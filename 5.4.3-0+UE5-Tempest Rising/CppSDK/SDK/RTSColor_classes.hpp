#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTSColor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "RTSColor_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class RTSColor.RTSColorPresets
// 0x0868 (0x0898 - 0x0030)
class URTSColorPresets final : public UDataAsset
{
public:
	struct FRTSColorTextMapping                   ColorDisplayNameMapping[0x11];                     // 0x0030(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FVector2D                              PlayerColorIntensityRange;                         // 0x01C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRTSPlayerColorPreset                  PlayerColorPresets[0x18];                          // 0x01D8(0x0024)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRTSSelectionColorPreset               SelectionColorPresets[0x18];                       // 0x0538(0x0024)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RTSColorPresets">();
	}
	static class URTSColorPresets* GetDefaultObj()
	{
		return GetDefaultObjImpl<URTSColorPresets>();
	}
};
static_assert(alignof(URTSColorPresets) == 0x000008, "Wrong alignment on URTSColorPresets");
static_assert(sizeof(URTSColorPresets) == 0x000898, "Wrong size on URTSColorPresets");
static_assert(offsetof(URTSColorPresets, ColorDisplayNameMapping) == 0x000030, "Member 'URTSColorPresets::ColorDisplayNameMapping' has a wrong offset!");
static_assert(offsetof(URTSColorPresets, PlayerColorIntensityRange) == 0x0001C8, "Member 'URTSColorPresets::PlayerColorIntensityRange' has a wrong offset!");
static_assert(offsetof(URTSColorPresets, PlayerColorPresets) == 0x0001D8, "Member 'URTSColorPresets::PlayerColorPresets' has a wrong offset!");
static_assert(offsetof(URTSColorPresets, SelectionColorPresets) == 0x000538, "Member 'URTSColorPresets::SelectionColorPresets' has a wrong offset!");

// Class RTSColor.RTSColorReceiverInterface
// 0x0000 (0x0000 - 0x0000)
class IRTSColorReceiverInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RTSColorReceiverInterface">();
	}
	static class IRTSColorReceiverInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRTSColorReceiverInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IRTSColorReceiverInterface) == 0x000001, "Wrong alignment on IRTSColorReceiverInterface");
static_assert(sizeof(IRTSColorReceiverInterface) == 0x000001, "Wrong size on IRTSColorReceiverInterface");

// Class RTSColor.RTSColorSubsystem
// 0x0570 (0x05A0 - 0x0030)
class URTSColorSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class URTSColorPresets*                       ColorPreset;                                       // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   PrimaryPlayerColorParamName;                       // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SecondaryPlayerColorParamName;                     // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SelectionColorParamName;                           // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HoverColorParamName;                               // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ColorInterpSpeed;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C[0x3B4];                                     // 0x007C(0x03B4)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, struct FRTSColorReceiverData> PendingRegisterReceivers;                      // 0x0430(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class AActor*, struct FRTSColorReceiverData> RegisteredReceivers;                           // 0x0480(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class UMaterialInstanceDynamic*, struct FRTSColorTransitions> PendingTransitions;           // 0x04D0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_520[0x30];                                     // 0x0520(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         ManagerClassName;                                  // 0x0550(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTexture2D*                             ColorLookupTexture;                                // 0x0570(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ColorData;                                         // 0x0578(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_588[0x18];                                     // 0x0588(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RTSColorSubsystem">();
	}
	static class URTSColorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<URTSColorSubsystem>();
	}
};
static_assert(alignof(URTSColorSubsystem) == 0x000008, "Wrong alignment on URTSColorSubsystem");
static_assert(sizeof(URTSColorSubsystem) == 0x0005A0, "Wrong size on URTSColorSubsystem");
static_assert(offsetof(URTSColorSubsystem, ColorPreset) == 0x000050, "Member 'URTSColorSubsystem::ColorPreset' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, PrimaryPlayerColorParamName) == 0x000058, "Member 'URTSColorSubsystem::PrimaryPlayerColorParamName' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, SecondaryPlayerColorParamName) == 0x000060, "Member 'URTSColorSubsystem::SecondaryPlayerColorParamName' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, SelectionColorParamName) == 0x000068, "Member 'URTSColorSubsystem::SelectionColorParamName' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, HoverColorParamName) == 0x000070, "Member 'URTSColorSubsystem::HoverColorParamName' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, ColorInterpSpeed) == 0x000078, "Member 'URTSColorSubsystem::ColorInterpSpeed' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, PendingRegisterReceivers) == 0x000430, "Member 'URTSColorSubsystem::PendingRegisterReceivers' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, RegisteredReceivers) == 0x000480, "Member 'URTSColorSubsystem::RegisteredReceivers' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, PendingTransitions) == 0x0004D0, "Member 'URTSColorSubsystem::PendingTransitions' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, ManagerClassName) == 0x000550, "Member 'URTSColorSubsystem::ManagerClassName' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, ColorLookupTexture) == 0x000570, "Member 'URTSColorSubsystem::ColorLookupTexture' has a wrong offset!");
static_assert(offsetof(URTSColorSubsystem, ColorData) == 0x000578, "Member 'URTSColorSubsystem::ColorData' has a wrong offset!");

}

