#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavGrid

#include "Basic.hpp"

#include "NavigationSystem_classes.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "NavGrid_structs.hpp"


namespace SDK
{

// Class NavGrid.EnvQueryTest_HexTrace
// 0x00B0 (0x02A8 - 0x01F8)
class UEnvQueryTest_HexTrace final : public UEnvQueryTest
{
public:
	struct FAIDataProviderBoolValue               TraceFromContext;                                  // 0x01F8(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FAIDataProviderFloatValue              ItemHeightOffset;                                  // 0x0230(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	struct FAIDataProviderFloatValue              ContextHeightOffset;                               // 0x0268(0x0038)(Edit, DisableEditOnInstance, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UEnvQueryContext>           Context;                                           // 0x02A0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvQueryTest_HexTrace">();
	}
	static class UEnvQueryTest_HexTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvQueryTest_HexTrace>();
	}
};
static_assert(alignof(UEnvQueryTest_HexTrace) == 0x000008, "Wrong alignment on UEnvQueryTest_HexTrace");
static_assert(sizeof(UEnvQueryTest_HexTrace) == 0x0002A8, "Wrong size on UEnvQueryTest_HexTrace");
static_assert(offsetof(UEnvQueryTest_HexTrace, TraceFromContext) == 0x0001F8, "Member 'UEnvQueryTest_HexTrace::TraceFromContext' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_HexTrace, ItemHeightOffset) == 0x000230, "Member 'UEnvQueryTest_HexTrace::ItemHeightOffset' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_HexTrace, ContextHeightOffset) == 0x000268, "Member 'UEnvQueryTest_HexTrace::ContextHeightOffset' has a wrong offset!");
static_assert(offsetof(UEnvQueryTest_HexTrace, Context) == 0x0002A0, "Member 'UEnvQueryTest_HexTrace::Context' has a wrong offset!");

// Class NavGrid.GridAreaVolume
// 0x0070 (0x0338 - 0x02C8)
class AGridAreaVolume : public AVolume
{
public:
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridMeshComponent*                     GridAreaRenderingComp;                             // 0x02D0(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     GridAreaMaterial;                                  // 0x02D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ANavGrid>                   DesiredNavGridClass;                               // 0x02E0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E8[0x50];                                     // 0x02E8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridAreaVolume">();
	}
	static class AGridAreaVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGridAreaVolume>();
	}
};
static_assert(alignof(AGridAreaVolume) == 0x000008, "Wrong alignment on AGridAreaVolume");
static_assert(sizeof(AGridAreaVolume) == 0x000338, "Wrong size on AGridAreaVolume");
static_assert(offsetof(AGridAreaVolume, GridAreaRenderingComp) == 0x0002D0, "Member 'AGridAreaVolume::GridAreaRenderingComp' has a wrong offset!");
static_assert(offsetof(AGridAreaVolume, GridAreaMaterial) == 0x0002D8, "Member 'AGridAreaVolume::GridAreaMaterial' has a wrong offset!");
static_assert(offsetof(AGridAreaVolume, DesiredNavGridClass) == 0x0002E0, "Member 'AGridAreaVolume::DesiredNavGridClass' has a wrong offset!");

// Class NavGrid.GridCoverRenderingComponent
// 0x0030 (0x0590 - 0x0560)
class UGridCoverRenderingComponent final : public UMeshComponent
{
public:
	struct FVector                                RenderingOffset;                                   // 0x0560(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CoverGatherRadius;                                 // 0x0578(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRenderBoundaryEdgesAsInfCover : 1;                // 0x057C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_57D[0x13];                                     // 0x057D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridCoverRenderingComponent">();
	}
	static class UGridCoverRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridCoverRenderingComponent>();
	}
};
static_assert(alignof(UGridCoverRenderingComponent) == 0x000010, "Wrong alignment on UGridCoverRenderingComponent");
static_assert(sizeof(UGridCoverRenderingComponent) == 0x000590, "Wrong size on UGridCoverRenderingComponent");
static_assert(offsetof(UGridCoverRenderingComponent, RenderingOffset) == 0x000560, "Member 'UGridCoverRenderingComponent::RenderingOffset' has a wrong offset!");
static_assert(offsetof(UGridCoverRenderingComponent, CoverGatherRadius) == 0x000578, "Member 'UGridCoverRenderingComponent::CoverGatherRadius' has a wrong offset!");

// Class NavGrid.GridMeshComponent
// 0x0030 (0x0590 - 0x0560)
class UGridMeshComponent : public UMeshComponent
{
public:
	struct FVector                                RenderingOffset;                                   // 0x0560(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bRenderOnlyIfOwnerSelectedInEditor : 1;            // 0x0578(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_579[0x17];                                     // 0x0579(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFromHexNavGrid(const class AHexNavGrid* InHexNavGrid, const TArray<struct FAxialCoords>& OptionalRelevantCoords);
	void SetFromSquareNavGrid(const class ASquareNavGrid* InSquareNavGrid, const TArray<struct FOffsetCoords>& OptionalRelevantCoords);
	void SetRenderingOffset(const struct FVector& InRenderingOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridMeshComponent">();
	}
	static class UGridMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridMeshComponent>();
	}
};
static_assert(alignof(UGridMeshComponent) == 0x000010, "Wrong alignment on UGridMeshComponent");
static_assert(sizeof(UGridMeshComponent) == 0x000590, "Wrong size on UGridMeshComponent");
static_assert(offsetof(UGridMeshComponent, RenderingOffset) == 0x000560, "Member 'UGridMeshComponent::RenderingOffset' has a wrong offset!");

// Class NavGrid.GridOutlineComponent
// 0x0050 (0x0580 - 0x0530)
#pragma pack(push, 0x1)
class alignas(0x10) UGridOutlineComponent : public UPrimitiveComponent
{
public:
	uint8                                         Pad_528[0x50];                                     // 0x0528(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridOutlineComponent">();
	}
	static class UGridOutlineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridOutlineComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UGridOutlineComponent) == 0x000010, "Wrong alignment on UGridOutlineComponent");
static_assert(sizeof(UGridOutlineComponent) == 0x000580, "Wrong size on UGridOutlineComponent");

// Class NavGrid.GridPathRenderingComponent
// 0x0060 (0x0590 - 0x0530)
class UGridPathRenderingComponent final : public UPrimitiveComponent
{
public:
	struct FLinearColor                           LineColor;                                         // 0x0528(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0538(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53C[0x54];                                     // 0x053C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridPathRenderingComponent">();
	}
	static class UGridPathRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridPathRenderingComponent>();
	}
};
static_assert(alignof(UGridPathRenderingComponent) == 0x000010, "Wrong alignment on UGridPathRenderingComponent");
static_assert(sizeof(UGridPathRenderingComponent) == 0x000590, "Wrong size on UGridPathRenderingComponent");
static_assert(offsetof(UGridPathRenderingComponent, LineColor) == 0x000528, "Member 'UGridPathRenderingComponent::LineColor' has a wrong offset!");
static_assert(offsetof(UGridPathRenderingComponent, LineThickness) == 0x000538, "Member 'UGridPathRenderingComponent::LineThickness' has a wrong offset!");

// Class NavGrid.NavGrid
// 0x02F0 (0x0798 - 0x04A8)
class ANavGrid : public ANavigationData
{
public:
	uint8                                         Pad_4A8[0x268];                                    // 0x04A8(0x0268)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNavGridLayerInfo*>              StaticLayers;                                      // 0x0710(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UNavGridLayer*>                  AdditionalLayers;                                  // 0x0720(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x0730(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENavGridGeneratorSnappingMode                 GeneratorSnappingMode;                             // 0x0734(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             GeometrySnappingChannel;                           // 0x0735(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_736[0x2];                                      // 0x0736(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectionExtentXY;                                // 0x0738(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticesProjectionExtentZ;                         // 0x073C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENavGridGeneratorValidationMode               GeneratorValidationMode;                           // 0x0740(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavMeshProjectionTileValidationScale;              // 0x0744(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bFilterOutTilesInsideGeometry : 1;                 // 0x0748(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bFilterOutInvalidSlopeTiles : 1;                   // 0x0748(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_749[0x3];                                      // 0x0749(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AgentMaxSlope;                                     // 0x074C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuildDebugFlags;                                   // 0x0750(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSimultaneousTileGenerationJobsCount;            // 0x0754(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUseSeparateJobsCountForRuntimeTileGeneration : 1; // 0x0758(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_759[0x3];                                      // 0x0759(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxSimultaneousTileRuntimeGenerationJobsCount;     // 0x075C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TileNumberHardLimit;                               // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FNavGridDetailFlags                    DrawDetailFlags;                                   // 0x0764(0x0012)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_776[0x2];                                      // 0x0776(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawOffset;                                        // 0x0778(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DrawDistanceOverride;                              // 0x077C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultDrawDistance;                               // 0x0780(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultMaxSearchNodes;                             // 0x0784(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeuristicScale;                                    // 0x0788(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78C[0xC];                                      // 0x078C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGrid">();
	}
	static class ANavGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavGrid>();
	}
};
static_assert(alignof(ANavGrid) == 0x000008, "Wrong alignment on ANavGrid");
static_assert(sizeof(ANavGrid) == 0x000798, "Wrong size on ANavGrid");
static_assert(offsetof(ANavGrid, StaticLayers) == 0x000710, "Member 'ANavGrid::StaticLayers' has a wrong offset!");
static_assert(offsetof(ANavGrid, AdditionalLayers) == 0x000720, "Member 'ANavGrid::AdditionalLayers' has a wrong offset!");
static_assert(offsetof(ANavGrid, TileSize) == 0x000730, "Member 'ANavGrid::TileSize' has a wrong offset!");
static_assert(offsetof(ANavGrid, GeneratorSnappingMode) == 0x000734, "Member 'ANavGrid::GeneratorSnappingMode' has a wrong offset!");
static_assert(offsetof(ANavGrid, GeometrySnappingChannel) == 0x000735, "Member 'ANavGrid::GeometrySnappingChannel' has a wrong offset!");
static_assert(offsetof(ANavGrid, ProjectionExtentXY) == 0x000738, "Member 'ANavGrid::ProjectionExtentXY' has a wrong offset!");
static_assert(offsetof(ANavGrid, VerticesProjectionExtentZ) == 0x00073C, "Member 'ANavGrid::VerticesProjectionExtentZ' has a wrong offset!");
static_assert(offsetof(ANavGrid, GeneratorValidationMode) == 0x000740, "Member 'ANavGrid::GeneratorValidationMode' has a wrong offset!");
static_assert(offsetof(ANavGrid, NavMeshProjectionTileValidationScale) == 0x000744, "Member 'ANavGrid::NavMeshProjectionTileValidationScale' has a wrong offset!");
static_assert(offsetof(ANavGrid, AgentMaxSlope) == 0x00074C, "Member 'ANavGrid::AgentMaxSlope' has a wrong offset!");
static_assert(offsetof(ANavGrid, BuildDebugFlags) == 0x000750, "Member 'ANavGrid::BuildDebugFlags' has a wrong offset!");
static_assert(offsetof(ANavGrid, MaxSimultaneousTileGenerationJobsCount) == 0x000754, "Member 'ANavGrid::MaxSimultaneousTileGenerationJobsCount' has a wrong offset!");
static_assert(offsetof(ANavGrid, MaxSimultaneousTileRuntimeGenerationJobsCount) == 0x00075C, "Member 'ANavGrid::MaxSimultaneousTileRuntimeGenerationJobsCount' has a wrong offset!");
static_assert(offsetof(ANavGrid, TileNumberHardLimit) == 0x000760, "Member 'ANavGrid::TileNumberHardLimit' has a wrong offset!");
static_assert(offsetof(ANavGrid, DrawDetailFlags) == 0x000764, "Member 'ANavGrid::DrawDetailFlags' has a wrong offset!");
static_assert(offsetof(ANavGrid, DrawOffset) == 0x000778, "Member 'ANavGrid::DrawOffset' has a wrong offset!");
static_assert(offsetof(ANavGrid, DrawDistanceOverride) == 0x00077C, "Member 'ANavGrid::DrawDistanceOverride' has a wrong offset!");
static_assert(offsetof(ANavGrid, DefaultDrawDistance) == 0x000780, "Member 'ANavGrid::DefaultDrawDistance' has a wrong offset!");
static_assert(offsetof(ANavGrid, DefaultMaxSearchNodes) == 0x000784, "Member 'ANavGrid::DefaultMaxSearchNodes' has a wrong offset!");
static_assert(offsetof(ANavGrid, HeuristicScale) == 0x000788, "Member 'ANavGrid::HeuristicScale' has a wrong offset!");

// Class NavGrid.SquareNavGrid
// 0x00C0 (0x0858 - 0x0798)
class ASquareNavGrid final : public ANavGrid
{
public:
	uint8                                         Pad_798[0xC0];                                     // 0x0798(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquareNavGrid">();
	}
	static class ASquareNavGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASquareNavGrid>();
	}
};
static_assert(alignof(ASquareNavGrid) == 0x000008, "Wrong alignment on ASquareNavGrid");
static_assert(sizeof(ASquareNavGrid) == 0x000858, "Wrong size on ASquareNavGrid");

// Class NavGrid.HexNavGrid
// 0x00D8 (0x0870 - 0x0798)
class AHexNavGrid final : public ANavGrid
{
public:
	float                                         TileWidth;                                         // 0x0798(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileHeight;                                        // 0x079C(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A0[0xD0];                                     // 0x07A0(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexNavGrid">();
	}
	static class AHexNavGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHexNavGrid>();
	}
};
static_assert(alignof(AHexNavGrid) == 0x000008, "Wrong alignment on AHexNavGrid");
static_assert(sizeof(AHexNavGrid) == 0x000870, "Wrong size on AHexNavGrid");
static_assert(offsetof(AHexNavGrid, TileWidth) == 0x000798, "Member 'AHexNavGrid::TileWidth' has a wrong offset!");
static_assert(offsetof(AHexNavGrid, TileHeight) == 0x00079C, "Member 'AHexNavGrid::TileHeight' has a wrong offset!");

// Class NavGrid.NavGridBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UNavGridBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FAxialCoords Add_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B);
	static struct FOffsetCoords Add_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B);
	static struct FAxialCoords AxialCoords_Invalid();
	static bool AxialCoords_IsValid(const struct FAxialCoords& AxialCoords);
	static struct FIntPoint Conv_AxialCoordsToIntPoint(const struct FAxialCoords& InAxialCoords);
	static class FString Conv_AxialCoordsToString(const struct FAxialCoords& AxialCoords);
	static struct FAxialCoords Conv_IntPointToAxialCoords(const struct FIntPoint& InIntPoint);
	static struct FOffsetCoords Conv_IntPointToOffsetCoords(const struct FIntPoint& InIntPoint);
	static struct FIntPoint Conv_OffsetCoordsToIntPoint(const struct FOffsetCoords& InOffsetCoords);
	static class FString Conv_OffsetCoordsToString(const struct FOffsetCoords& OffsetCoords);
	static bool Equal_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B);
	static bool Equal_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B);
	static bool FindReachableTiles(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const int32 Range, TArray<struct FOffsetCoords>* OutReachableTileCoords, const TSubclassOf<class UNavigationQueryFilter> FilterClass, const class ASquareNavGrid* Target);
	static TArray<struct FOffsetCoords> GetAllTileCoords(const class UObject* WorldContextObject, const class ASquareNavGrid* Target);
	static struct FOffsetCoords GetCoordsAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target);
	static TArray<struct FOffsetCoords> GetCoordsRange(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, int32 Range, const class ASquareNavGrid* Target);
	static class AHexNavGrid* GetHexNavGrid(const class UObject* WorldContextObject);
	static struct FOffsetCoords GetNeighbourCoords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, uint8 NeiIndex, const class ASquareNavGrid* Target);
	static struct FOffsetCoords GetNeighbourCoordsInWorldDirection(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector& WorldDirection, const class ASquareNavGrid* Target);
	static struct FOffsetCoords GetNeighbourCoordsInWorldDirection_Coords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const struct FVector& WorldDirection, const class ASquareNavGrid* Target);
	static TArray<struct FOffsetCoords> GetNeighboursCoords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static class ARecastNavMesh* GetRecastNavMesh(const class UObject* WorldContextObject);
	static class AActor* GetRegisteredTileActor(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target);
	static bool GetRegisteredTileActorCoords(const class UObject* WorldContextObject, const class AActor* TileActor, TArray<struct FOffsetCoords>* OutTileActorCoords, const class ASquareNavGrid* Target);
	static TArray<class AActor*> GetRegisteredTileActors(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target);
	static TArray<class AActor*> GetRegisteredTileActorsInRange(const class UObject* WorldContextObject, const TArray<struct FOffsetCoords>& CoordsRange, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target);
	static class ASquareNavGrid* GetSquareNavGrid(const class UObject* WorldContextObject);
	static TSubclassOf<class UNavArea> GetTileAreaClass(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static struct FVector GetTileCenter(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static struct FVector2D GetTileCenter2D(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static struct FVector GetTileCenterAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target);
	static TArray<struct FOffsetCoords> GetTileCoordsRange(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, int32 Range, const class ASquareNavGrid* Target);
	static struct FVector GetTileNormal(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static struct FRotator GetTileRotation(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static float GetTileSize(const class UObject* WorldContextObject, const class ASquareNavGrid* Target);
	static bool HasLineOfSight_Square(const class UObject* WorldContextObject, const struct FOffsetCoords& StartCoords, const struct FOffsetCoords& EndCoords, const class ASquareNavGrid* Target);
	static bool HasTileAt(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static bool HasTileAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target);
	static bool IsNavGridDataProviderRegistered(const TScriptInterface<class INavGridDataProvider> DataProvider);
	static bool IsTileAreaOfClass(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class UNavArea> NavAreaClass, const class ASquareNavGrid* Target);
	static bool IsTileEmpty(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static bool IsTileOccupied(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target);
	static bool IsTileWalkable(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target);
	static void MarkNavGridDataProviderDirty(TScriptInterface<class INavGridDataProvider> DataProvider);
	static bool NotEqual_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B);
	static bool NotEqual_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B);
	static int32 OffsetCoords_Distance(const struct FOffsetCoords& Coords, const struct FOffsetCoords& OtherCoords);
	static struct FOffsetCoords OffsetCoords_Invalid();
	static bool OffsetCoords_IsValid(const struct FOffsetCoords& OffsetCoords);
	static int32 OffsetCoords_ManhattanDistance(const struct FOffsetCoords& Coords, const struct FOffsetCoords& OtherCoords);
	static bool Overlap_Square(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const float Radius, TArray<struct FOffsetCoords>* OutOverlappedTileCoords, const class ASquareNavGrid* Target);
	static void RegisterNavGridDataProvider(TScriptInterface<class INavGridDataProvider> DataProvider);
	static struct FAxialCoords Subtract_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B);
	static struct FOffsetCoords Subtract_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B);
	static void UnregisterNavGridDataProvider(TScriptInterface<class INavGridDataProvider> DataProvider);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridBlueprintLibrary">();
	}
	static class UNavGridBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridBlueprintLibrary>();
	}
};
static_assert(alignof(UNavGridBlueprintLibrary) == 0x000008, "Wrong alignment on UNavGridBlueprintLibrary");
static_assert(sizeof(UNavGridBlueprintLibrary) == 0x000028, "Wrong size on UNavGridBlueprintLibrary");

// Class NavGrid.NavGridDataProvider
// 0x0000 (0x0000 - 0x0000)
class INavGridDataProvider final
{
public:
	void GetNavGridRelevantData(struct FNavGridRelevantData* OutNavigationData) const;
	bool IsNavGridRelevant(const class ANavGrid* NavData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridDataProvider">();
	}
	static class INavGridDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<INavGridDataProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(INavGridDataProvider) == 0x000001, "Wrong alignment on INavGridDataProvider");
static_assert(sizeof(INavGridDataProvider) == 0x000001, "Wrong size on INavGridDataProvider");

// Class NavGrid.NavGridFilter_IgnoreBlockingActorOnEndNode
// 0x0000 (0x0048 - 0x0048)
class UNavGridFilter_IgnoreBlockingActorOnEndNode final : public UNavigationQueryFilter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridFilter_IgnoreBlockingActorOnEndNode">();
	}
	static class UNavGridFilter_IgnoreBlockingActorOnEndNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridFilter_IgnoreBlockingActorOnEndNode>();
	}
};
static_assert(alignof(UNavGridFilter_IgnoreBlockingActorOnEndNode) == 0x000008, "Wrong alignment on UNavGridFilter_IgnoreBlockingActorOnEndNode");
static_assert(sizeof(UNavGridFilter_IgnoreBlockingActorOnEndNode) == 0x000048, "Wrong size on UNavGridFilter_IgnoreBlockingActorOnEndNode");

// Class NavGrid.NavGridLayerInfo
// 0x0008 (0x0030 - 0x0028)
class UNavGridLayerInfo final : public UObject
{
public:
	class UNavGridLayer*                          LayerObj;                                          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridLayerInfo">();
	}
	static class UNavGridLayerInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridLayerInfo>();
	}
};
static_assert(alignof(UNavGridLayerInfo) == 0x000008, "Wrong alignment on UNavGridLayerInfo");
static_assert(sizeof(UNavGridLayerInfo) == 0x000030, "Wrong size on UNavGridLayerInfo");
static_assert(offsetof(UNavGridLayerInfo, LayerObj) == 0x000028, "Member 'UNavGridLayerInfo::LayerObj' has a wrong offset!");

// Class NavGrid.NavGridLayer
// 0x00B0 (0x00D8 - 0x0028)
class UNavGridLayer : public UObject
{
public:
	struct FNavGridLayerData                      Data;                                              // 0x0028(0x00B0)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridLayer">();
	}
	static class UNavGridLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridLayer>();
	}
};
static_assert(alignof(UNavGridLayer) == 0x000008, "Wrong alignment on UNavGridLayer");
static_assert(sizeof(UNavGridLayer) == 0x0000D8, "Wrong size on UNavGridLayer");
static_assert(offsetof(UNavGridLayer, Data) == 0x000028, "Member 'UNavGridLayer::Data' has a wrong offset!");

// Class NavGrid.SquareNavGridLayer
// 0x0000 (0x00D8 - 0x00D8)
class USquareNavGridLayer final : public UNavGridLayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SquareNavGridLayer">();
	}
	static class USquareNavGridLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USquareNavGridLayer>();
	}
};
static_assert(alignof(USquareNavGridLayer) == 0x000008, "Wrong alignment on USquareNavGridLayer");
static_assert(sizeof(USquareNavGridLayer) == 0x0000D8, "Wrong size on USquareNavGridLayer");

// Class NavGrid.HexNavGridLayer
// 0x0000 (0x00D8 - 0x00D8)
class UHexNavGridLayer final : public UNavGridLayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexNavGridLayer">();
	}
	static class UHexNavGridLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexNavGridLayer>();
	}
};
static_assert(alignof(UHexNavGridLayer) == 0x000008, "Wrong alignment on UHexNavGridLayer");
static_assert(sizeof(UHexNavGridLayer) == 0x0000D8, "Wrong size on UHexNavGridLayer");

// Class NavGrid.NavGridRenderingComponent
// 0x0010 (0x0540 - 0x0530)
class UNavGridRenderingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_528[0x18];                                     // 0x0528(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridRenderingComponent">();
	}
	static class UNavGridRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridRenderingComponent>();
	}
};
static_assert(alignof(UNavGridRenderingComponent) == 0x000010, "Wrong alignment on UNavGridRenderingComponent");
static_assert(sizeof(UNavGridRenderingComponent) == 0x000540, "Wrong size on UNavGridRenderingComponent");

// Class NavGrid.NavGridSettings
// 0x0458 (0x0490 - 0x0038)
class UNavGridSettings final : public UDeveloperSettings
{
public:
	TArray<struct FNavGridTileSurfaceName>        TileSurfaces;                                      // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<ENavGridTileSurfaceType, struct FSupportedNavAreasSet> SupportedNavAreasSets;               // 0x0048(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	TArray<struct FNavGridTileTagName>            TileTags;                                          // 0x0098(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               TileMaterial;                                      // 0x00A8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterial>               EditorTileMaterial;                                // 0x00D0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TileColor_Highligted;                              // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TileColor_Selected;                                // 0x0108(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TileColor_TriangleEdges;                           // 0x0118(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TileColor_BeingRebuilt;                            // 0x0128(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TileColor_Label;                                   // 0x0138(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor_Unselected;                              // 0x0148(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor_Highlighted;                             // 0x0158(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor_Selected;                                // 0x0168(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor_NavGridBounds;                           // 0x0178(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EdgeColor_Triangle;                                // 0x0188(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness_DefaultEdges;                        // 0x0198(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness_TileEdges;                           // 0x019C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness_SelectedTileEdges;                   // 0x01A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness_NavGridEdges;                        // 0x01A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENavGridEdgeType, TSoftObjectPtr<class UMaterial>> WallMaterials;                           // 0x01A8(0x0050)(Edit, EditFixedSize, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ENavGridEdgeType, struct FLinearColor>   WallColors;                                        // 0x01F8(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	TMap<ENavGridEdgeType, float>                 WallHeights;                                       // 0x0248(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	TMap<ENavGridEdgeType, TSoftObjectPtr<class UTexture2D>> EdgeSprites;                            // 0x0298(0x0050)(Edit, EditFixedSize, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         EdgeSpriteSize;                                    // 0x02E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeSpriteZOffset;                                 // 0x02EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENavGridTileTag, TSoftObjectPtr<class UTexture2D>> TagSprites;                              // 0x02F0(0x0050)(Edit, EditFixedSize, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ENavGridTileTag, struct FVector>         TagSpriteOffsets;                                  // 0x0340(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	TMap<ENavGridTileSurfaceType, TSoftObjectPtr<class UTexture2D>> SurfaceSprites;                  // 0x0390(0x0050)(Edit, EditFixedSize, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<ENavGridTileSurfaceType, struct FLinearColor> SurfaceColors;                                // 0x03E0(0x0050)(Edit, EditFixedSize, Config, NativeAccessSpecifierPublic)
	float                                         SurfaceSpriteZOffset;                              // 0x0430(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSpriteSize;                                    // 0x0434(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPreLoadMaterialsForCompilation : 1;               // 0x0438(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FTopLevelAssetPath, class UObject*> LoadedObjects;                                   // 0x0440(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridSettings">();
	}
	static class UNavGridSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridSettings>();
	}
};
static_assert(alignof(UNavGridSettings) == 0x000008, "Wrong alignment on UNavGridSettings");
static_assert(sizeof(UNavGridSettings) == 0x000490, "Wrong size on UNavGridSettings");
static_assert(offsetof(UNavGridSettings, TileSurfaces) == 0x000038, "Member 'UNavGridSettings::TileSurfaces' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, SupportedNavAreasSets) == 0x000048, "Member 'UNavGridSettings::SupportedNavAreasSets' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileTags) == 0x000098, "Member 'UNavGridSettings::TileTags' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileMaterial) == 0x0000A8, "Member 'UNavGridSettings::TileMaterial' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EditorTileMaterial) == 0x0000D0, "Member 'UNavGridSettings::EditorTileMaterial' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileColor_Highligted) == 0x0000F8, "Member 'UNavGridSettings::TileColor_Highligted' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileColor_Selected) == 0x000108, "Member 'UNavGridSettings::TileColor_Selected' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileColor_TriangleEdges) == 0x000118, "Member 'UNavGridSettings::TileColor_TriangleEdges' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileColor_BeingRebuilt) == 0x000128, "Member 'UNavGridSettings::TileColor_BeingRebuilt' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileColor_Label) == 0x000138, "Member 'UNavGridSettings::TileColor_Label' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeColor_Unselected) == 0x000148, "Member 'UNavGridSettings::EdgeColor_Unselected' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeColor_Highlighted) == 0x000158, "Member 'UNavGridSettings::EdgeColor_Highlighted' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeColor_Selected) == 0x000168, "Member 'UNavGridSettings::EdgeColor_Selected' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeColor_NavGridBounds) == 0x000178, "Member 'UNavGridSettings::EdgeColor_NavGridBounds' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeColor_Triangle) == 0x000188, "Member 'UNavGridSettings::EdgeColor_Triangle' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, LineThickness_DefaultEdges) == 0x000198, "Member 'UNavGridSettings::LineThickness_DefaultEdges' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, LineThickness_TileEdges) == 0x00019C, "Member 'UNavGridSettings::LineThickness_TileEdges' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, LineThickness_SelectedTileEdges) == 0x0001A0, "Member 'UNavGridSettings::LineThickness_SelectedTileEdges' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, LineThickness_NavGridEdges) == 0x0001A4, "Member 'UNavGridSettings::LineThickness_NavGridEdges' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, WallMaterials) == 0x0001A8, "Member 'UNavGridSettings::WallMaterials' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, WallColors) == 0x0001F8, "Member 'UNavGridSettings::WallColors' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, WallHeights) == 0x000248, "Member 'UNavGridSettings::WallHeights' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeSprites) == 0x000298, "Member 'UNavGridSettings::EdgeSprites' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeSpriteSize) == 0x0002E8, "Member 'UNavGridSettings::EdgeSpriteSize' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, EdgeSpriteZOffset) == 0x0002EC, "Member 'UNavGridSettings::EdgeSpriteZOffset' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TagSprites) == 0x0002F0, "Member 'UNavGridSettings::TagSprites' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TagSpriteOffsets) == 0x000340, "Member 'UNavGridSettings::TagSpriteOffsets' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, SurfaceSprites) == 0x000390, "Member 'UNavGridSettings::SurfaceSprites' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, SurfaceColors) == 0x0003E0, "Member 'UNavGridSettings::SurfaceColors' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, SurfaceSpriteZOffset) == 0x000430, "Member 'UNavGridSettings::SurfaceSpriteZOffset' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, TileSpriteSize) == 0x000434, "Member 'UNavGridSettings::TileSpriteSize' has a wrong offset!");
static_assert(offsetof(UNavGridSettings, LoadedObjects) == 0x000440, "Member 'UNavGridSettings::LoadedObjects' has a wrong offset!");

// Class NavGrid.NavGridSystem
// 0x0010 (0x15C8 - 0x15B8)
class UNavGridSystem : public UNavigationSystemV1
{
public:
	uint8                                         Pad_15B8[0x10];                                    // 0x15B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridSystem">();
	}
	static class UNavGridSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNavGridSystem>();
	}
};
static_assert(alignof(UNavGridSystem) == 0x000008, "Wrong alignment on UNavGridSystem");
static_assert(sizeof(UNavGridSystem) == 0x0015C8, "Wrong size on UNavGridSystem");

// Class NavGrid.NavGridTriggerVolume
// 0x0070 (0x03A8 - 0x0338)
class ANavGridTriggerVolume : public AGridAreaVolume
{
public:
	uint8                                         bAutoEnabled : 1;                                  // 0x0338(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_339[0x17];                                     // 0x0339(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           OverlappingActors;                                 // 0x0350(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A0[0x8];                                      // 0x03A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIsEnabled(bool bInIsEnabled);

	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavGridTriggerVolume">();
	}
	static class ANavGridTriggerVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavGridTriggerVolume>();
	}
};
static_assert(alignof(ANavGridTriggerVolume) == 0x000008, "Wrong alignment on ANavGridTriggerVolume");
static_assert(sizeof(ANavGridTriggerVolume) == 0x0003A8, "Wrong size on ANavGridTriggerVolume");
static_assert(offsetof(ANavGridTriggerVolume, OverlappingActors) == 0x000350, "Member 'ANavGridTriggerVolume::OverlappingActors' has a wrong offset!");

}

