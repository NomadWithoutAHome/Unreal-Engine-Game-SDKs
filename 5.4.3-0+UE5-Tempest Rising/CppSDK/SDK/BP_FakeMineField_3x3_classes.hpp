#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FakeMineField_3x3

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FakeMineField_3x3.BP_FakeMineField_3x3_C
// 0x0060 (0x1A60 - 0x1A00)
class ABP_FakeMineField_3x3_C final : public ATedStructureBase
{
public:
	uint8                                         Pad_19F8[0x8];                                     // 0x19F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Explosion_FalloffExp;                              // 0x1A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Explosion_Strength;                                // 0x1A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CachedActorLocation;                               // 0x1A10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Explosion_Slot_Array;                              // 0x1A28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 Explosion_Slot_Current;                            // 0x1A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Explosion_Slot_Found;                              // 0x1A48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A49[0x3];                                     // 0x1A49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimMontageLength;                                 // 0x1A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CachedSurfaceType;                                 // 0x1A50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A54[0x4];                                     // 0x1A54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Explosion_Falloff_Exp;                             // 0x1A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetIdleEffectComponents(TArray<class USceneComponent*>* Components);

	void GetNavGridRelevantData(struct FNavGridRelevantData* OutNavigationData) const;
	bool IsNavGridRelevant(const class ANavGrid* NavData) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FakeMineField_3x3_C">();
	}
	static class ABP_FakeMineField_3x3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FakeMineField_3x3_C>();
	}
};
static_assert(alignof(ABP_FakeMineField_3x3_C) == 0x000010, "Wrong alignment on ABP_FakeMineField_3x3_C");
static_assert(sizeof(ABP_FakeMineField_3x3_C) == 0x001A60, "Wrong size on ABP_FakeMineField_3x3_C");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_FalloffExp) == 0x001A00, "Member 'ABP_FakeMineField_3x3_C::Explosion_FalloffExp' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_Strength) == 0x001A08, "Member 'ABP_FakeMineField_3x3_C::Explosion_Strength' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, CachedActorLocation) == 0x001A10, "Member 'ABP_FakeMineField_3x3_C::CachedActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_Slot_Array) == 0x001A28, "Member 'ABP_FakeMineField_3x3_C::Explosion_Slot_Array' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_Slot_Current) == 0x001A38, "Member 'ABP_FakeMineField_3x3_C::Explosion_Slot_Current' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_Slot_Found) == 0x001A48, "Member 'ABP_FakeMineField_3x3_C::Explosion_Slot_Found' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, AnimMontageLength) == 0x001A4C, "Member 'ABP_FakeMineField_3x3_C::AnimMontageLength' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, CachedSurfaceType) == 0x001A50, "Member 'ABP_FakeMineField_3x3_C::CachedSurfaceType' has a wrong offset!");
static_assert(offsetof(ABP_FakeMineField_3x3_C, Explosion_Falloff_Exp) == 0x001A58, "Member 'ABP_FakeMineField_3x3_C::Explosion_Falloff_Exp' has a wrong offset!");

}

