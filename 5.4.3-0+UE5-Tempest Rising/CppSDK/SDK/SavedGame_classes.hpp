#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SavedGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SavedGame_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SavedGame.SavedGameActorInterface
// 0x0000 (0x0000 - 0x0000)
class ISavedGameActorInterface final
{
public:
	void ReceiveOnPrepareSavedGameData();
	void ReceiveOnSavedGameDataLoaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameActorInterface">();
	}
	static class ISavedGameActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISavedGameActorInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISavedGameActorInterface) == 0x000001, "Wrong alignment on ISavedGameActorInterface");
static_assert(sizeof(ISavedGameActorInterface) == 0x000001, "Wrong size on ISavedGameActorInterface");

// Class SavedGame.SavedGameBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USavedGameBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddLoadLock(const class UObject* WorldContextObject, const struct FGameplayTag& LockTag);
	static void AddSaveLock(const class UObject* WorldContextObject, const struct FGameplayTag& LockTag);
	static void AutoSave(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, const class FString& DebugName);
	static bool CanLoadGame(const class UObject* WorldContextObject);
	static ESavedGameYesNo CanLoadGame_Exec(const class UObject* WorldContextObject);
	static bool CanSaveGame(const class UObject* WorldContextObject);
	static ESavedGameYesNo CanSaveGame_Exec(const class UObject* WorldContextObject);
	static void DeleteAllSlots(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result);
	static void DeleteSlot(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, class FName SlotName);
	static void DeleteSlotByInfo(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, const class USavedGameSlotInfo* SlotInfo);
	static class FString EnsureNoBadCharacters(const class FString& Filename, bool bFixedReservedNames);
	static class FString FixInvalidFilenameCharacters(const class FString& Filename);
	static class FString FixReservedNames(const class FString& Filename);
	static class USavedGameSlotData* GetCurrentSlotData(const class UObject* WorldContextObject);
	static class USavedGameSlotInfo* GetCurrentSlotInfo(const class UObject* WorldContextObject);
	static class UTexture2D* GetCurrentSlotThumbnail(const class UObject* WorldContextObject);
	static class FString GetDisplayNameFromReserved(const class FString& Filename);
	static void GetLoadedSlotInfos(const class UObject* WorldContextObject, TArray<class USavedGameSlotInfo*>* SlotInfos);
	static void GetLoadedSlotInfosWithType(const class UObject* WorldContextObject, TArray<class USavedGameSlotInfo*>* SlotInfos, const ESavedGameSlotType SlotType);
	static void IsLoadingGame(const class UObject* WorldContextObject, ESavedGameYesNo* Output);
	static void IsSavingGame(const class UObject* WorldContextObject, ESavedGameYesNo* Output);
	static void LoadAllSlotInfos(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, TArray<class USavedGameSlotInfo*>* SlotInfos, const bool bSortByRecent);
	static void LoadAllSlotInfosSync(const class UObject* WorldContextObject, TArray<class USavedGameSlotInfo*>* SlotInfos, const bool bSortByRecent);
	static bool LoadLatestSlot(const class UObject* WorldContextObject);
	static bool LoadSlot(const class UObject* WorldContextObject, class FName SlotName);
	static bool LoadSlotByInfo(const class UObject* WorldContextObject, const class USavedGameSlotInfo* SlotInfo);
	static void LoadSlotInfo(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, class USavedGameSlotInfo** SlotInfo, class FName SlotName);
	static void QuickSave(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result);
	static bool ReloadCurrentSlot(const class UObject* WorldContextObject);
	static void RemoveLoadLock(const class UObject* WorldContextObject, const struct FGameplayTag& LockTag);
	static void RemoveSaveLock(const class UObject* WorldContextObject, const struct FGameplayTag& LockTag);
	static void SaveSlot(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FLatentActionSaveGameData& LatentSaveGameData, ESavedGameActionResult* Result, class FName SlotName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameBlueprintLibrary">();
	}
	static class USavedGameBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameBlueprintLibrary>();
	}
};
static_assert(alignof(USavedGameBlueprintLibrary) == 0x000008, "Wrong alignment on USavedGameBlueprintLibrary");
static_assert(sizeof(USavedGameBlueprintLibrary) == 0x000028, "Wrong size on USavedGameBlueprintLibrary");

// Class SavedGame.SavedGameLevelStreamingNotifier
// 0x0048 (0x0070 - 0x0028)
class USavedGameLevelStreamingNotifier final : public UObject
{
public:
	uint8                                         Pad_28[0x48];                                      // 0x0028(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLevelHidden();
	void OnLevelLoaded();
	void OnLevelShown();
	void OnLevelUnloaded();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameLevelStreamingNotifier">();
	}
	static class USavedGameLevelStreamingNotifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameLevelStreamingNotifier>();
	}
};
static_assert(alignof(USavedGameLevelStreamingNotifier) == 0x000008, "Wrong alignment on USavedGameLevelStreamingNotifier");
static_assert(sizeof(USavedGameLevelStreamingNotifier) == 0x000070, "Wrong size on USavedGameLevelStreamingNotifier");

// Class SavedGame.SavedGameProfileInfo
// 0x0030 (0x0058 - 0x0028)
class USavedGameProfileInfo : public UObject
{
public:
	class FName                                   ProfileName;                                       // 0x0028(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PrettyName;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ProfileCreationTime;                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              TotalPlayTime;                                     // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueID;                                          // 0x0050(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetPrettyName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileInfo">();
	}
	static class USavedGameProfileInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileInfo>();
	}
};
static_assert(alignof(USavedGameProfileInfo) == 0x000008, "Wrong alignment on USavedGameProfileInfo");
static_assert(sizeof(USavedGameProfileInfo) == 0x000058, "Wrong size on USavedGameProfileInfo");
static_assert(offsetof(USavedGameProfileInfo, ProfileName) == 0x000028, "Member 'USavedGameProfileInfo::ProfileName' has a wrong offset!");
static_assert(offsetof(USavedGameProfileInfo, PrettyName) == 0x000030, "Member 'USavedGameProfileInfo::PrettyName' has a wrong offset!");
static_assert(offsetof(USavedGameProfileInfo, ProfileCreationTime) == 0x000040, "Member 'USavedGameProfileInfo::ProfileCreationTime' has a wrong offset!");
static_assert(offsetof(USavedGameProfileInfo, TotalPlayTime) == 0x000048, "Member 'USavedGameProfileInfo::TotalPlayTime' has a wrong offset!");
static_assert(offsetof(USavedGameProfileInfo, UniqueID) == 0x000050, "Member 'USavedGameProfileInfo::UniqueID' has a wrong offset!");

// Class SavedGame.SavedGameTask
// 0x0098 (0x00C0 - 0x0028)
class USavedGameTask : public UObject
{
public:
	uint8                                         Pad_28[0x88];                                      // 0x0028(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USavedGameTask*>                 SubTasks;                                          // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameTask">();
	}
	static class USavedGameTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameTask>();
	}
};
static_assert(alignof(USavedGameTask) == 0x000008, "Wrong alignment on USavedGameTask");
static_assert(sizeof(USavedGameTask) == 0x0000C0, "Wrong size on USavedGameTask");
static_assert(offsetof(USavedGameTask, SubTasks) == 0x0000B0, "Member 'USavedGameTask::SubTasks' has a wrong offset!");

// Class SavedGame.SavedGameProfileInfoTask
// 0x0000 (0x00C0 - 0x00C0)
class USavedGameProfileInfoTask : public USavedGameTask
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileInfoTask">();
	}
	static class USavedGameProfileInfoTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileInfoTask>();
	}
};
static_assert(alignof(USavedGameProfileInfoTask) == 0x000008, "Wrong alignment on USavedGameProfileInfoTask");
static_assert(sizeof(USavedGameProfileInfoTask) == 0x0000C0, "Wrong size on USavedGameProfileInfoTask");

// Class SavedGame.SavedGameProfileInfoTask_Create
// 0x0020 (0x00E0 - 0x00C0)
class USavedGameProfileInfoTask_Create final : public USavedGameProfileInfoTask
{
public:
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameProfileInfo*                  ProfileInfo;                                       // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileInfoTask_Create">();
	}
	static class USavedGameProfileInfoTask_Create* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileInfoTask_Create>();
	}
};
static_assert(alignof(USavedGameProfileInfoTask_Create) == 0x000008, "Wrong alignment on USavedGameProfileInfoTask_Create");
static_assert(sizeof(USavedGameProfileInfoTask_Create) == 0x0000E0, "Wrong size on USavedGameProfileInfoTask_Create");
static_assert(offsetof(USavedGameProfileInfoTask_Create, ProfileInfo) == 0x0000D8, "Member 'USavedGameProfileInfoTask_Create::ProfileInfo' has a wrong offset!");

// Class SavedGame.SavedGameProfileInfoTask_Update
// 0x0018 (0x00D8 - 0x00C0)
class USavedGameProfileInfoTask_Update final : public USavedGameProfileInfoTask
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameSlotInfo*                     SlotInfo;                                          // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameProfileInfo*                  ProfileInfo;                                       // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileInfoTask_Update">();
	}
	static class USavedGameProfileInfoTask_Update* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileInfoTask_Update>();
	}
};
static_assert(alignof(USavedGameProfileInfoTask_Update) == 0x000008, "Wrong alignment on USavedGameProfileInfoTask_Update");
static_assert(sizeof(USavedGameProfileInfoTask_Update) == 0x0000D8, "Wrong size on USavedGameProfileInfoTask_Update");
static_assert(offsetof(USavedGameProfileInfoTask_Update, SlotInfo) == 0x0000C8, "Member 'USavedGameProfileInfoTask_Update::SlotInfo' has a wrong offset!");
static_assert(offsetof(USavedGameProfileInfoTask_Update, ProfileInfo) == 0x0000D0, "Member 'USavedGameProfileInfoTask_Update::ProfileInfo' has a wrong offset!");

// Class SavedGame.SavedGameProfileInfoTask_Rename
// 0x0020 (0x00E0 - 0x00C0)
class USavedGameProfileInfoTask_Rename final : public USavedGameProfileInfoTask
{
public:
	uint8                                         Pad_C0[0x20];                                      // 0x00C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileInfoTask_Rename">();
	}
	static class USavedGameProfileInfoTask_Rename* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileInfoTask_Rename>();
	}
};
static_assert(alignof(USavedGameProfileInfoTask_Rename) == 0x000008, "Wrong alignment on USavedGameProfileInfoTask_Rename");
static_assert(sizeof(USavedGameProfileInfoTask_Rename) == 0x0000E0, "Wrong size on USavedGameProfileInfoTask_Rename");

// Class SavedGame.SavedGameSettings
// 0x03A8 (0x03E0 - 0x0038)
class USavedGameSettings final : public UDeveloperSettings
{
public:
	struct FSavedGameFilter                       SaveFilter;                                        // 0x0038(0x0290)(Edit, Config, Protected, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SubsystemClass;                                    // 0x02C8(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SlotInfoClass;                                     // 0x02F0(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   SlotDataClass;                                     // 0x0318(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftClassPtr<class UClass>                   ProfileDataClass;                                  // 0x0340(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AutoSaveSlotsLimit;                                // 0x0368(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AutoSaveSlotsLimitPerMap;                          // 0x036C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         QuickSaveSlotsLimit;                               // 0x0370(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ManualSaveSlotsLimit;                              // 0x0374(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTickWithGameWorld;                                // 0x0378(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCompressSlotData;                                 // 0x0379(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCaptureThumbnail;                                 // 0x037A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37B[0x1];                                      // 0x037B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThumbnailCaptureWidth;                             // 0x037C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ThumbnailCaptureHeight;                            // 0x0380(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              DefaultThumbnail;                                  // 0x0388(0x0028)(Edit, Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSaveProfiles;                                  // 0x03B0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefaultProfileName;                                // 0x03B8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ProfileSubfolderRegex;                             // 0x03C8(0x0010)(Edit, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutosavesShouldIncludeMapName;                    // 0x03D8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSettings">();
	}
	static class USavedGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSettings>();
	}
};
static_assert(alignof(USavedGameSettings) == 0x000008, "Wrong alignment on USavedGameSettings");
static_assert(sizeof(USavedGameSettings) == 0x0003E0, "Wrong size on USavedGameSettings");
static_assert(offsetof(USavedGameSettings, SaveFilter) == 0x000038, "Member 'USavedGameSettings::SaveFilter' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, SubsystemClass) == 0x0002C8, "Member 'USavedGameSettings::SubsystemClass' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, SlotInfoClass) == 0x0002F0, "Member 'USavedGameSettings::SlotInfoClass' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, SlotDataClass) == 0x000318, "Member 'USavedGameSettings::SlotDataClass' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, ProfileDataClass) == 0x000340, "Member 'USavedGameSettings::ProfileDataClass' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, AutoSaveSlotsLimit) == 0x000368, "Member 'USavedGameSettings::AutoSaveSlotsLimit' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, AutoSaveSlotsLimitPerMap) == 0x00036C, "Member 'USavedGameSettings::AutoSaveSlotsLimitPerMap' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, QuickSaveSlotsLimit) == 0x000370, "Member 'USavedGameSettings::QuickSaveSlotsLimit' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, ManualSaveSlotsLimit) == 0x000374, "Member 'USavedGameSettings::ManualSaveSlotsLimit' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, bTickWithGameWorld) == 0x000378, "Member 'USavedGameSettings::bTickWithGameWorld' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, bCompressSlotData) == 0x000379, "Member 'USavedGameSettings::bCompressSlotData' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, bCaptureThumbnail) == 0x00037A, "Member 'USavedGameSettings::bCaptureThumbnail' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, ThumbnailCaptureWidth) == 0x00037C, "Member 'USavedGameSettings::ThumbnailCaptureWidth' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, ThumbnailCaptureHeight) == 0x000380, "Member 'USavedGameSettings::ThumbnailCaptureHeight' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, DefaultThumbnail) == 0x000388, "Member 'USavedGameSettings::DefaultThumbnail' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, bUseSaveProfiles) == 0x0003B0, "Member 'USavedGameSettings::bUseSaveProfiles' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, DefaultProfileName) == 0x0003B8, "Member 'USavedGameSettings::DefaultProfileName' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, ProfileSubfolderRegex) == 0x0003C8, "Member 'USavedGameSettings::ProfileSubfolderRegex' has a wrong offset!");
static_assert(offsetof(USavedGameSettings, bAutosavesShouldIncludeMapName) == 0x0003D8, "Member 'USavedGameSettings::bAutosavesShouldIncludeMapName' has a wrong offset!");

// Class SavedGame.SavedGameSlotInfo
// 0x00C0 (0x00E8 - 0x0028)
class USavedGameSlotInfo : public UObject
{
public:
	class FName                                   Filename;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESavedGameSlotType                            SlotType;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0038(0x0010)(BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	class FName                                   MapName;                                           // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugName;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              PlayedTime;                                        // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              SlotPlayedTime;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              SaveDate;                                          // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              LoadDate;                                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BelongsToProfileWithId;                            // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BelongsToSubDirectory;                             // 0x0088(0x0010)(ZeroConstructor, SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ThumbnailData;                                     // 0x0098(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              ThumbnailTexture;                                  // 0x00A8(0x0028)(SaveGame, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 BuildVersion;                                      // 0x00D0(0x0010)(ZeroConstructor, SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             GeneratedThumbnailTexture;                         // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UTexture2D* GetThumbnail() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotInfo">();
	}
	static class USavedGameSlotInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotInfo>();
	}
};
static_assert(alignof(USavedGameSlotInfo) == 0x000008, "Wrong alignment on USavedGameSlotInfo");
static_assert(sizeof(USavedGameSlotInfo) == 0x0000E8, "Wrong size on USavedGameSlotInfo");
static_assert(offsetof(USavedGameSlotInfo, Filename) == 0x000028, "Member 'USavedGameSlotInfo::Filename' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, SlotType) == 0x000030, "Member 'USavedGameSlotInfo::SlotType' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, DisplayName) == 0x000038, "Member 'USavedGameSlotInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, MapName) == 0x000048, "Member 'USavedGameSlotInfo::MapName' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, DebugName) == 0x000050, "Member 'USavedGameSlotInfo::DebugName' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, PlayedTime) == 0x000060, "Member 'USavedGameSlotInfo::PlayedTime' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, SlotPlayedTime) == 0x000068, "Member 'USavedGameSlotInfo::SlotPlayedTime' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, SaveDate) == 0x000070, "Member 'USavedGameSlotInfo::SaveDate' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, LoadDate) == 0x000078, "Member 'USavedGameSlotInfo::LoadDate' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, BelongsToProfileWithId) == 0x000080, "Member 'USavedGameSlotInfo::BelongsToProfileWithId' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, BelongsToSubDirectory) == 0x000088, "Member 'USavedGameSlotInfo::BelongsToSubDirectory' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, ThumbnailData) == 0x000098, "Member 'USavedGameSlotInfo::ThumbnailData' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, ThumbnailTexture) == 0x0000A8, "Member 'USavedGameSlotInfo::ThumbnailTexture' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, BuildVersion) == 0x0000D0, "Member 'USavedGameSlotInfo::BuildVersion' has a wrong offset!");
static_assert(offsetof(USavedGameSlotInfo, GeneratedThumbnailTexture) == 0x0000E0, "Member 'USavedGameSlotInfo::GeneratedThumbnailTexture' has a wrong offset!");

// Class SavedGame.SavedGameSlotData
// 0x01E0 (0x0208 - 0x0028)
class USavedGameSlotData : public UObject
{
public:
	struct FSavedGameStandaloneGenericData        PersistentData;                                    // 0x0028(0x0030)(SaveGame, NativeAccessSpecifierPublic)
	float                                         TimeSeconds;                                       // 0x0058(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerViewLocation;                                // 0x0060(0x0018)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MapNameToOpen;                                     // 0x0078(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithMapData;                                      // 0x0080(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedGamePersistentLevelRecord        PersistentLevelRecord;                             // 0x0088(0x00E0)(SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSavedGameLevelRecord> StreamingLevelRecords;                           // 0x0168(0x0050)(SaveGame, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSavedGameLevelStreamingStateRecord> LevelStreamingStateRecords;        // 0x01B8(0x0050)(SaveGame, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotData">();
	}
	static class USavedGameSlotData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotData>();
	}
};
static_assert(alignof(USavedGameSlotData) == 0x000008, "Wrong alignment on USavedGameSlotData");
static_assert(sizeof(USavedGameSlotData) == 0x000208, "Wrong size on USavedGameSlotData");
static_assert(offsetof(USavedGameSlotData, PersistentData) == 0x000028, "Member 'USavedGameSlotData::PersistentData' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, TimeSeconds) == 0x000058, "Member 'USavedGameSlotData::TimeSeconds' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, PlayerViewLocation) == 0x000060, "Member 'USavedGameSlotData::PlayerViewLocation' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, MapNameToOpen) == 0x000078, "Member 'USavedGameSlotData::MapNameToOpen' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, bWithMapData) == 0x000080, "Member 'USavedGameSlotData::bWithMapData' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, PersistentLevelRecord) == 0x000088, "Member 'USavedGameSlotData::PersistentLevelRecord' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, StreamingLevelRecords) == 0x000168, "Member 'USavedGameSlotData::StreamingLevelRecords' has a wrong offset!");
static_assert(offsetof(USavedGameSlotData, LevelStreamingStateRecords) == 0x0001B8, "Member 'USavedGameSlotData::LevelStreamingStateRecords' has a wrong offset!");

// Class SavedGame.SavedGameSlotDataTask
// 0x02A8 (0x0368 - 0x00C0)
class USavedGameSlotDataTask : public USavedGameTask
{
public:
	struct FSavedGameFilter                       SavedGameFilter;                                   // 0x00C0(0x0290)(Transient, Protected, NativeAccessSpecifierProtected)
	class USavedGameSlotInfo*                     SlotInfo;                                          // 0x0350(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameSlotData*                     SlotData;                                          // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameProfileInfo*                  ProfileInfo;                                       // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotDataTask">();
	}
	static class USavedGameSlotDataTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotDataTask>();
	}
};
static_assert(alignof(USavedGameSlotDataTask) == 0x000008, "Wrong alignment on USavedGameSlotDataTask");
static_assert(sizeof(USavedGameSlotDataTask) == 0x000368, "Wrong size on USavedGameSlotDataTask");
static_assert(offsetof(USavedGameSlotDataTask, SavedGameFilter) == 0x0000C0, "Member 'USavedGameSlotDataTask::SavedGameFilter' has a wrong offset!");
static_assert(offsetof(USavedGameSlotDataTask, SlotInfo) == 0x000350, "Member 'USavedGameSlotDataTask::SlotInfo' has a wrong offset!");
static_assert(offsetof(USavedGameSlotDataTask, SlotData) == 0x000358, "Member 'USavedGameSlotDataTask::SlotData' has a wrong offset!");
static_assert(offsetof(USavedGameSlotDataTask, ProfileInfo) == 0x000360, "Member 'USavedGameSlotDataTask::ProfileInfo' has a wrong offset!");

// Class SavedGame.SavedGameSlotDataTask_Saver
// 0x0068 (0x03D0 - 0x0368)
class USavedGameSlotDataTask_Saver : public USavedGameSlotDataTask
{
public:
	uint8                                         Pad_368[0x68];                                     // 0x0368(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotDataTask_Saver">();
	}
	static class USavedGameSlotDataTask_Saver* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotDataTask_Saver>();
	}
};
static_assert(alignof(USavedGameSlotDataTask_Saver) == 0x000008, "Wrong alignment on USavedGameSlotDataTask_Saver");
static_assert(sizeof(USavedGameSlotDataTask_Saver) == 0x0003D0, "Wrong size on USavedGameSlotDataTask_Saver");

// Class SavedGame.SavedGameSlotDataTask_Loader
// 0x0030 (0x0398 - 0x0368)
class USavedGameSlotDataTask_Loader : public USavedGameSlotDataTask
{
public:
	uint8                                         Pad_368[0x30];                                     // 0x0368(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotDataTask_Loader">();
	}
	static class USavedGameSlotDataTask_Loader* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotDataTask_Loader>();
	}
};
static_assert(alignof(USavedGameSlotDataTask_Loader) == 0x000008, "Wrong alignment on USavedGameSlotDataTask_Loader");
static_assert(sizeof(USavedGameSlotDataTask_Loader) == 0x000398, "Wrong size on USavedGameSlotDataTask_Loader");

// Class SavedGame.SavedGameSlotDataTask_LevelSaver
// 0x0008 (0x03D8 - 0x03D0)
class USavedGameSlotDataTask_LevelSaver final : public USavedGameSlotDataTask_Saver
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotDataTask_LevelSaver">();
	}
	static class USavedGameSlotDataTask_LevelSaver* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotDataTask_LevelSaver>();
	}
};
static_assert(alignof(USavedGameSlotDataTask_LevelSaver) == 0x000008, "Wrong alignment on USavedGameSlotDataTask_LevelSaver");
static_assert(sizeof(USavedGameSlotDataTask_LevelSaver) == 0x0003D8, "Wrong size on USavedGameSlotDataTask_LevelSaver");
static_assert(offsetof(USavedGameSlotDataTask_LevelSaver, LevelStreaming) == 0x0003D0, "Member 'USavedGameSlotDataTask_LevelSaver::LevelStreaming' has a wrong offset!");

// Class SavedGame.SavedGameSlotDataTask_LevelLoader
// 0x0008 (0x03A0 - 0x0398)
class USavedGameSlotDataTask_LevelLoader final : public USavedGameSlotDataTask_Loader
{
public:
	class ULevelStreaming*                        LevelStreaming;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotDataTask_LevelLoader">();
	}
	static class USavedGameSlotDataTask_LevelLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotDataTask_LevelLoader>();
	}
};
static_assert(alignof(USavedGameSlotDataTask_LevelLoader) == 0x000008, "Wrong alignment on USavedGameSlotDataTask_LevelLoader");
static_assert(sizeof(USavedGameSlotDataTask_LevelLoader) == 0x0003A0, "Wrong size on USavedGameSlotDataTask_LevelLoader");
static_assert(offsetof(USavedGameSlotDataTask_LevelLoader, LevelStreaming) == 0x000398, "Member 'USavedGameSlotDataTask_LevelLoader::LevelStreaming' has a wrong offset!");

// Class SavedGame.SavedGameSlotFileTask
// 0x0000 (0x00C0 - 0x00C0)
class USavedGameSlotFileTask : public USavedGameTask
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask">();
	}
	static class USavedGameSlotFileTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask>();
	}
};
static_assert(alignof(USavedGameSlotFileTask) == 0x000008, "Wrong alignment on USavedGameSlotFileTask");
static_assert(sizeof(USavedGameSlotFileTask) == 0x0000C0, "Wrong size on USavedGameSlotFileTask");

// Class SavedGame.SavedGameSlotFileTask_LoadInfos
// 0x0060 (0x0120 - 0x00C0)
class USavedGameSlotFileTask_LoadInfos final : public USavedGameSlotFileTask
{
public:
	uint8                                         Pad_C0[0x40];                                      // 0x00C0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USavedGameSlotInfo*>             LoadedSlotInfos;                                   // 0x0100(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x10];                                     // 0x0110(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask_LoadInfos">();
	}
	static class USavedGameSlotFileTask_LoadInfos* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask_LoadInfos>();
	}
};
static_assert(alignof(USavedGameSlotFileTask_LoadInfos) == 0x000008, "Wrong alignment on USavedGameSlotFileTask_LoadInfos");
static_assert(sizeof(USavedGameSlotFileTask_LoadInfos) == 0x000120, "Wrong size on USavedGameSlotFileTask_LoadInfos");
static_assert(offsetof(USavedGameSlotFileTask_LoadInfos, LoadedSlotInfos) == 0x000100, "Member 'USavedGameSlotFileTask_LoadInfos::LoadedSlotInfos' has a wrong offset!");

// Class SavedGame.SavedGameSlotFileTask_Load
// 0x00E8 (0x01A8 - 0x00C0)
class USavedGameSlotFileTask_Load final : public USavedGameSlotFileTask
{
public:
	uint8                                         Pad_C0[0x30];                                      // 0x00C0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameSlotInfo*                     SlotInfo;                                          // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameSlotData*                     SlotData;                                          // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0xA8];                                     // 0x0100(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask_Load">();
	}
	static class USavedGameSlotFileTask_Load* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask_Load>();
	}
};
static_assert(alignof(USavedGameSlotFileTask_Load) == 0x000008, "Wrong alignment on USavedGameSlotFileTask_Load");
static_assert(sizeof(USavedGameSlotFileTask_Load) == 0x0001A8, "Wrong size on USavedGameSlotFileTask_Load");
static_assert(offsetof(USavedGameSlotFileTask_Load, SlotInfo) == 0x0000F0, "Member 'USavedGameSlotFileTask_Load::SlotInfo' has a wrong offset!");
static_assert(offsetof(USavedGameSlotFileTask_Load, SlotData) == 0x0000F8, "Member 'USavedGameSlotFileTask_Load::SlotData' has a wrong offset!");

// Class SavedGame.SavedGameSlotFileTask_Save
// 0x0050 (0x0110 - 0x00C0)
class USavedGameSlotFileTask_Save final : public USavedGameSlotFileTask
{
public:
	uint8                                         Pad_C0[0x40];                                      // 0x00C0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameSlotInfo*                     SlotInfo;                                          // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameSlotData*                     SlotData;                                          // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask_Save">();
	}
	static class USavedGameSlotFileTask_Save* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask_Save>();
	}
};
static_assert(alignof(USavedGameSlotFileTask_Save) == 0x000008, "Wrong alignment on USavedGameSlotFileTask_Save");
static_assert(sizeof(USavedGameSlotFileTask_Save) == 0x000110, "Wrong size on USavedGameSlotFileTask_Save");
static_assert(offsetof(USavedGameSlotFileTask_Save, SlotInfo) == 0x000100, "Member 'USavedGameSlotFileTask_Save::SlotInfo' has a wrong offset!");
static_assert(offsetof(USavedGameSlotFileTask_Save, SlotData) == 0x000108, "Member 'USavedGameSlotFileTask_Save::SlotData' has a wrong offset!");

// Class SavedGame.SavedGameSlotFileTask_Delete
// 0x0038 (0x00F8 - 0x00C0)
class USavedGameSlotFileTask_Delete final : public USavedGameSlotFileTask
{
public:
	uint8                                         Pad_C0[0x38];                                      // 0x00C0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask_Delete">();
	}
	static class USavedGameSlotFileTask_Delete* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask_Delete>();
	}
};
static_assert(alignof(USavedGameSlotFileTask_Delete) == 0x000008, "Wrong alignment on USavedGameSlotFileTask_Delete");
static_assert(sizeof(USavedGameSlotFileTask_Delete) == 0x0000F8, "Wrong size on USavedGameSlotFileTask_Delete");

// Class SavedGame.SavedGameSlotFileTask_EnsureSaveSlotsLimit
// 0x0050 (0x0110 - 0x00C0)
class USavedGameSlotFileTask_EnsureSaveSlotsLimit final : public USavedGameSlotFileTask
{
public:
	uint8                                         Pad_C0[0x50];                                      // 0x00C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSlotFileTask_EnsureSaveSlotsLimit">();
	}
	static class USavedGameSlotFileTask_EnsureSaveSlotsLimit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSlotFileTask_EnsureSaveSlotsLimit>();
	}
};
static_assert(alignof(USavedGameSlotFileTask_EnsureSaveSlotsLimit) == 0x000008, "Wrong alignment on USavedGameSlotFileTask_EnsureSaveSlotsLimit");
static_assert(sizeof(USavedGameSlotFileTask_EnsureSaveSlotsLimit) == 0x000110, "Wrong size on USavedGameSlotFileTask_EnsureSaveSlotsLimit");

// Class SavedGame.SavedGameSubsystem
// 0x0248 (0x0278 - 0x0030)
class USavedGameSubsystem : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USavedGameSlotInfo* SlotInfo)> OnSaveBeginBlueprintDelegate; // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x18];                                      // 0x0098(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USavedGameSlotInfo* SlotInfo)> OnSaveEndBlueprintDelegate;   // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USavedGameSlotInfo* SlotInfo)> OnLoadBeginBlueprintDelegate; // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8[0x18];                                      // 0x00E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class USavedGameSlotInfo* SlotInfo)> OnLoadEndBlueprintDelegate;   // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x68];                                     // 0x0110(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameSlotInfo*                     CurrentSlotInfo;                                   // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USavedGameSlotData*                     CurrentSlotData;                                   // 0x0180(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USavedGameSlotInfo*>             LoadedSlotInfos;                                   // 0x0188(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class USavedGameProfileInfo*>          LoadedProfiles;                                    // 0x0198(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class USavedGameProfileInfo*                  CurrentProfile;                                    // 0x01A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class FName>                             SaveLocks;                                         // 0x01B0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<class FName>                             LoadLocks;                                         // 0x0200(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class USavedGameTask*>                 Tasks;                                             // 0x0250(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class USavedGameLevelStreamingNotifier*> LevelStreamingNotifiers;                         // 0x0260(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorDestroyed(class AActor* Actor);
	void OnWorldSettingsEndPlay(class AActor* Actor, const EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameSubsystem">();
	}
	static class USavedGameSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameSubsystem>();
	}
};
static_assert(alignof(USavedGameSubsystem) == 0x000008, "Wrong alignment on USavedGameSubsystem");
static_assert(sizeof(USavedGameSubsystem) == 0x000278, "Wrong size on USavedGameSubsystem");
static_assert(offsetof(USavedGameSubsystem, OnSaveBeginBlueprintDelegate) == 0x000088, "Member 'USavedGameSubsystem::OnSaveBeginBlueprintDelegate' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, OnSaveEndBlueprintDelegate) == 0x0000B0, "Member 'USavedGameSubsystem::OnSaveEndBlueprintDelegate' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, OnLoadBeginBlueprintDelegate) == 0x0000D8, "Member 'USavedGameSubsystem::OnLoadBeginBlueprintDelegate' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, OnLoadEndBlueprintDelegate) == 0x000100, "Member 'USavedGameSubsystem::OnLoadEndBlueprintDelegate' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, CurrentSlotInfo) == 0x000178, "Member 'USavedGameSubsystem::CurrentSlotInfo' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, CurrentSlotData) == 0x000180, "Member 'USavedGameSubsystem::CurrentSlotData' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, LoadedSlotInfos) == 0x000188, "Member 'USavedGameSubsystem::LoadedSlotInfos' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, LoadedProfiles) == 0x000198, "Member 'USavedGameSubsystem::LoadedProfiles' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, CurrentProfile) == 0x0001A8, "Member 'USavedGameSubsystem::CurrentProfile' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, SaveLocks) == 0x0001B0, "Member 'USavedGameSubsystem::SaveLocks' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, LoadLocks) == 0x000200, "Member 'USavedGameSubsystem::LoadLocks' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, Tasks) == 0x000250, "Member 'USavedGameSubsystem::Tasks' has a wrong offset!");
static_assert(offsetof(USavedGameSubsystem, LevelStreamingNotifiers) == 0x000260, "Member 'USavedGameSubsystem::LevelStreamingNotifiers' has a wrong offset!");

// Class SavedGame.SavedGameTaskOwnerInterface
// 0x0000 (0x0000 - 0x0000)
class ISavedGameTaskOwnerInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameTaskOwnerInterface">();
	}
	static class ISavedGameTaskOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISavedGameTaskOwnerInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISavedGameTaskOwnerInterface) == 0x000001, "Wrong alignment on ISavedGameTaskOwnerInterface");
static_assert(sizeof(ISavedGameTaskOwnerInterface) == 0x000001, "Wrong size on ISavedGameTaskOwnerInterface");

// Class SavedGame.SavedGameProfileFileTask
// 0x0000 (0x00C0 - 0x00C0)
class USavedGameProfileFileTask : public USavedGameTask
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileFileTask">();
	}
	static class USavedGameProfileFileTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileFileTask>();
	}
};
static_assert(alignof(USavedGameProfileFileTask) == 0x000008, "Wrong alignment on USavedGameProfileFileTask");
static_assert(sizeof(USavedGameProfileFileTask) == 0x0000C0, "Wrong size on USavedGameProfileFileTask");

// Class SavedGame.SavedGameProfileFileTask_Save
// 0x0010 (0x00D0 - 0x00C0)
class USavedGameProfileFileTask_Save final : public USavedGameProfileFileTask
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameProfileInfo*                  ProfileInfo;                                       // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileFileTask_Save">();
	}
	static class USavedGameProfileFileTask_Save* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileFileTask_Save>();
	}
};
static_assert(alignof(USavedGameProfileFileTask_Save) == 0x000008, "Wrong alignment on USavedGameProfileFileTask_Save");
static_assert(sizeof(USavedGameProfileFileTask_Save) == 0x0000D0, "Wrong size on USavedGameProfileFileTask_Save");
static_assert(offsetof(USavedGameProfileFileTask_Save, ProfileInfo) == 0x0000C8, "Member 'USavedGameProfileFileTask_Save::ProfileInfo' has a wrong offset!");

// Class SavedGame.SavedGameProfileFileTask_Load
// 0x00D8 (0x0198 - 0x00C0)
class USavedGameProfileFileTask_Load final : public USavedGameProfileFileTask
{
public:
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USavedGameProfileInfo*                  ProfileInfo;                                       // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USavedGameSlotInfo*>             ProfileSlotInfos;                                  // 0x00E0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0xA8];                                      // 0x00F0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileFileTask_Load">();
	}
	static class USavedGameProfileFileTask_Load* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileFileTask_Load>();
	}
};
static_assert(alignof(USavedGameProfileFileTask_Load) == 0x000008, "Wrong alignment on USavedGameProfileFileTask_Load");
static_assert(sizeof(USavedGameProfileFileTask_Load) == 0x000198, "Wrong size on USavedGameProfileFileTask_Load");
static_assert(offsetof(USavedGameProfileFileTask_Load, ProfileInfo) == 0x0000D8, "Member 'USavedGameProfileFileTask_Load::ProfileInfo' has a wrong offset!");
static_assert(offsetof(USavedGameProfileFileTask_Load, ProfileSlotInfos) == 0x0000E0, "Member 'USavedGameProfileFileTask_Load::ProfileSlotInfos' has a wrong offset!");

// Class SavedGame.SavedGameProfileFileTask_LoadAll
// 0x0028 (0x00E8 - 0x00C0)
class USavedGameProfileFileTask_LoadAll final : public USavedGameProfileFileTask
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USavedGameProfileInfo*>          LoadedProfiles;                                    // 0x00C8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileFileTask_LoadAll">();
	}
	static class USavedGameProfileFileTask_LoadAll* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileFileTask_LoadAll>();
	}
};
static_assert(alignof(USavedGameProfileFileTask_LoadAll) == 0x000008, "Wrong alignment on USavedGameProfileFileTask_LoadAll");
static_assert(sizeof(USavedGameProfileFileTask_LoadAll) == 0x0000E8, "Wrong size on USavedGameProfileFileTask_LoadAll");
static_assert(offsetof(USavedGameProfileFileTask_LoadAll, LoadedProfiles) == 0x0000C8, "Member 'USavedGameProfileFileTask_LoadAll::LoadedProfiles' has a wrong offset!");

// Class SavedGame.SavedGameProfileFileTask_Delete
// 0x0030 (0x00F0 - 0x00C0)
class USavedGameProfileFileTask_Delete final : public USavedGameProfileFileTask
{
public:
	uint8                                         Pad_C0[0x30];                                      // 0x00C0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SavedGameProfileFileTask_Delete">();
	}
	static class USavedGameProfileFileTask_Delete* GetDefaultObj()
	{
		return GetDefaultObjImpl<USavedGameProfileFileTask_Delete>();
	}
};
static_assert(alignof(USavedGameProfileFileTask_Delete) == 0x000008, "Wrong alignment on USavedGameProfileFileTask_Delete");
static_assert(sizeof(USavedGameProfileFileTask_Delete) == 0x0000F0, "Wrong size on USavedGameProfileFileTask_Delete");

}

