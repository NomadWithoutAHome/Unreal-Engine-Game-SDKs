#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pros

#include "Basic.hpp"

#include "ProsSDK_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Pros.EProsServiceState
// NumValues: 0x0005
enum class EProsServiceState : uint8
{
	OFFLINE                                  = 0,
	CONNECTING                               = 1,
	ONLINE                                   = 2,
	DISCONNECTING                            = 3,
	EProsServiceState_MAX                    = 4,
};

// Enum Pros.EJsonType
// NumValues: 0x0008
enum class EJsonType : uint8
{
	None                                     = 0,
	Null                                     = 1,
	String                                   = 2,
	Number                                   = 3,
	Boolean                                  = 4,
	Array                                    = 5,
	Object                                   = 6,
	EJsonType_MAX                            = 7,
};

// Enum Pros.EProsLogLevel
// NumValues: 0x0004
enum class EProsLogLevel : uint8
{
	LOGERROR                                 = 0,
	LOGWARNING                               = 1,
	LOGINFO                                  = 2,
	EProsLogLevel_MAX                        = 3,
};

// Enum Pros.EProsSdkLogLevel
// NumValues: 0x0004
enum class EProsSdkLogLevel : uint8
{
	DEFAULT                                  = 0,
	DEBUG                                    = 10,
	VERBOSE                                  = 100,
	EProsSdkLogLevel_MAX                     = 101,
};

// ScriptStruct Pros.ProsLocDesc
// 0x0040 (0x0040 - 0x0000)
struct FProsLocDesc final
{
public:
	class FString                                 LanguageCode;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CountryCode;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLocDesc) == 0x000008, "Wrong alignment on FProsLocDesc");
static_assert(sizeof(FProsLocDesc) == 0x000040, "Wrong size on FProsLocDesc");
static_assert(offsetof(FProsLocDesc, LanguageCode) == 0x000000, "Member 'FProsLocDesc::LanguageCode' has a wrong offset!");
static_assert(offsetof(FProsLocDesc, CountryCode) == 0x000010, "Member 'FProsLocDesc::CountryCode' has a wrong offset!");
static_assert(offsetof(FProsLocDesc, Text) == 0x000020, "Member 'FProsLocDesc::Text' has a wrong offset!");

// ScriptStruct Pros.ProsBannerMessage
// 0x0020 (0x0020 - 0x0000)
struct FProsBannerMessage final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   LocDescs;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsBannerMessage) == 0x000008, "Wrong alignment on FProsBannerMessage");
static_assert(sizeof(FProsBannerMessage) == 0x000020, "Wrong size on FProsBannerMessage");
static_assert(offsetof(FProsBannerMessage, ID) == 0x000000, "Member 'FProsBannerMessage::ID' has a wrong offset!");
static_assert(offsetof(FProsBannerMessage, LocDescs) == 0x000010, "Member 'FProsBannerMessage::LocDescs' has a wrong offset!");

// ScriptStruct Pros.ProsBannerSpace
// 0x0018 (0x0018 - 0x0000)
struct FProsBannerSpace final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDefault;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsBannerSpace) == 0x000008, "Wrong alignment on FProsBannerSpace");
static_assert(sizeof(FProsBannerSpace) == 0x000018, "Wrong size on FProsBannerSpace");
static_assert(offsetof(FProsBannerSpace, Name) == 0x000000, "Member 'FProsBannerSpace::Name' has a wrong offset!");
static_assert(offsetof(FProsBannerSpace, IsDefault) == 0x000010, "Member 'FProsBannerSpace::IsDefault' has a wrong offset!");

// ScriptStruct Pros.ProsBanner
// 0x0080 (0x0080 - 0x0000)
struct FProsBanner final
{
public:
	class FString                                 CampaignId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RedirectUrl;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkBannerUrlType                          RedirectUrlType;                                   // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkBannerType                             Type;                                              // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsBannerMessage>             Messages;                                          // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 LinkContext;                                       // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Labels;                                            // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsBannerSpace                       Space;                                             // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsBanner) == 0x000008, "Wrong alignment on FProsBanner");
static_assert(sizeof(FProsBanner) == 0x000080, "Wrong size on FProsBanner");
static_assert(offsetof(FProsBanner, CampaignId) == 0x000000, "Member 'FProsBanner::CampaignId' has a wrong offset!");
static_assert(offsetof(FProsBanner, ImageUrl) == 0x000010, "Member 'FProsBanner::ImageUrl' has a wrong offset!");
static_assert(offsetof(FProsBanner, RedirectUrl) == 0x000020, "Member 'FProsBanner::RedirectUrl' has a wrong offset!");
static_assert(offsetof(FProsBanner, RedirectUrlType) == 0x000030, "Member 'FProsBanner::RedirectUrlType' has a wrong offset!");
static_assert(offsetof(FProsBanner, Type) == 0x000031, "Member 'FProsBanner::Type' has a wrong offset!");
static_assert(offsetof(FProsBanner, Messages) == 0x000038, "Member 'FProsBanner::Messages' has a wrong offset!");
static_assert(offsetof(FProsBanner, LinkContext) == 0x000048, "Member 'FProsBanner::LinkContext' has a wrong offset!");
static_assert(offsetof(FProsBanner, Labels) == 0x000058, "Member 'FProsBanner::Labels' has a wrong offset!");
static_assert(offsetof(FProsBanner, Space) == 0x000068, "Member 'FProsBanner::Space' has a wrong offset!");

// ScriptStruct Pros.ProsModsUserModel
// 0x0030 (0x0030 - 0x0000)
struct FProsModsUserModel final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Postfix;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsUserModel) == 0x000008, "Wrong alignment on FProsModsUserModel");
static_assert(sizeof(FProsModsUserModel) == 0x000030, "Wrong size on FProsModsUserModel");
static_assert(offsetof(FProsModsUserModel, Name) == 0x000000, "Member 'FProsModsUserModel::Name' has a wrong offset!");
static_assert(offsetof(FProsModsUserModel, Postfix) == 0x000010, "Member 'FProsModsUserModel::Postfix' has a wrong offset!");

// ScriptStruct Pros.ProsModsGalleryImage
// 0x0050 (0x0050 - 0x0000)
struct FProsModsGalleryImage final
{
public:
	class FString                                 Image;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailSmall;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailMedium;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThumbnailLarge;                                    // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsGalleryImage) == 0x000008, "Wrong alignment on FProsModsGalleryImage");
static_assert(sizeof(FProsModsGalleryImage) == 0x000050, "Wrong size on FProsModsGalleryImage");
static_assert(offsetof(FProsModsGalleryImage, Image) == 0x000000, "Member 'FProsModsGalleryImage::Image' has a wrong offset!");
static_assert(offsetof(FProsModsGalleryImage, ThumbnailSmall) == 0x000010, "Member 'FProsModsGalleryImage::ThumbnailSmall' has a wrong offset!");
static_assert(offsetof(FProsModsGalleryImage, ThumbnailMedium) == 0x000020, "Member 'FProsModsGalleryImage::ThumbnailMedium' has a wrong offset!");
static_assert(offsetof(FProsModsGalleryImage, ThumbnailLarge) == 0x000030, "Member 'FProsModsGalleryImage::ThumbnailLarge' has a wrong offset!");

// ScriptStruct Pros.ProsModsModeratorMessage
// 0x0028 (0x0028 - 0x0000)
struct FProsModsModeratorMessage final
{
public:
	class FString                                 ModeratorAccountID;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampPostedAt;                                 // 0x0020(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsModeratorMessage) == 0x000008, "Wrong alignment on FProsModsModeratorMessage");
static_assert(sizeof(FProsModsModeratorMessage) == 0x000028, "Wrong size on FProsModsModeratorMessage");
static_assert(offsetof(FProsModsModeratorMessage, ModeratorAccountID) == 0x000000, "Member 'FProsModsModeratorMessage::ModeratorAccountID' has a wrong offset!");
static_assert(offsetof(FProsModsModeratorMessage, Message) == 0x000010, "Member 'FProsModsModeratorMessage::Message' has a wrong offset!");
static_assert(offsetof(FProsModsModeratorMessage, TimestampPostedAt) == 0x000020, "Member 'FProsModsModeratorMessage::TimestampPostedAt' has a wrong offset!");

// ScriptStruct Pros.ProsModsDescription
// 0x0118 (0x0118 - 0x0000)
struct FProsModsDescription final
{
public:
	struct FProsModsUserModel                     Author;                                            // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsModsGalleryImage                  LogoImage;                                         // 0x0040(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   FullDescriptions;                                  // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   ShortDescriptions;                                 // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsModsGalleryImage>          Images;                                            // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Homepage;                                          // 0x00C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         YoutubeLinks;                                      // 0x00D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              LastUpdateTimestamp;                               // 0x00E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              CreatedAtTimestamp;                                // 0x00E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DeletedAtTimestamp;                                // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsModsModeratorMessage>      ModeratorMessages;                                 // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsDescription) == 0x000008, "Wrong alignment on FProsModsDescription");
static_assert(sizeof(FProsModsDescription) == 0x000118, "Wrong size on FProsModsDescription");
static_assert(offsetof(FProsModsDescription, Author) == 0x000000, "Member 'FProsModsDescription::Author' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, Name) == 0x000030, "Member 'FProsModsDescription::Name' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, LogoImage) == 0x000040, "Member 'FProsModsDescription::LogoImage' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, FullDescriptions) == 0x000090, "Member 'FProsModsDescription::FullDescriptions' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, ShortDescriptions) == 0x0000A0, "Member 'FProsModsDescription::ShortDescriptions' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, Images) == 0x0000B0, "Member 'FProsModsDescription::Images' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, Homepage) == 0x0000C0, "Member 'FProsModsDescription::Homepage' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, YoutubeLinks) == 0x0000D0, "Member 'FProsModsDescription::YoutubeLinks' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, LastUpdateTimestamp) == 0x0000E0, "Member 'FProsModsDescription::LastUpdateTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, CreatedAtTimestamp) == 0x0000E8, "Member 'FProsModsDescription::CreatedAtTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, ProfileUrl) == 0x0000F0, "Member 'FProsModsDescription::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, DeletedAtTimestamp) == 0x000100, "Member 'FProsModsDescription::DeletedAtTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsDescription, ModeratorMessages) == 0x000108, "Member 'FProsModsDescription::ModeratorMessages' has a wrong offset!");

// ScriptStruct Pros.ProsContainerChunk
// 0x0038 (0x0038 - 0x0000)
struct FProsContainerChunk final
{
public:
	int64                                         Number;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsContainerChunk) == 0x000008, "Wrong alignment on FProsContainerChunk");
static_assert(sizeof(FProsContainerChunk) == 0x000038, "Wrong size on FProsContainerChunk");
static_assert(offsetof(FProsContainerChunk, Number) == 0x000000, "Member 'FProsContainerChunk::Number' has a wrong offset!");
static_assert(offsetof(FProsContainerChunk, Key) == 0x000008, "Member 'FProsContainerChunk::Key' has a wrong offset!");
static_assert(offsetof(FProsContainerChunk, Data) == 0x000018, "Member 'FProsContainerChunk::Data' has a wrong offset!");

// ScriptStruct Pros.ProsContainerDownloadResponse
// 0x0020 (0x0020 - 0x0000)
struct FProsContainerDownloadResponse final
{
public:
	class FString                                 ContainerId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsContainerChunk>            Chunks;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsContainerDownloadResponse) == 0x000008, "Wrong alignment on FProsContainerDownloadResponse");
static_assert(sizeof(FProsContainerDownloadResponse) == 0x000020, "Wrong size on FProsContainerDownloadResponse");
static_assert(offsetof(FProsContainerDownloadResponse, ContainerId) == 0x000000, "Member 'FProsContainerDownloadResponse::ContainerId' has a wrong offset!");
static_assert(offsetof(FProsContainerDownloadResponse, Chunks) == 0x000010, "Member 'FProsContainerDownloadResponse::Chunks' has a wrong offset!");

// ScriptStruct Pros.ProsModsType
// 0x0038 (0x0038 - 0x0000)
struct FProsModsType final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizationID;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   Localizations;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsType) == 0x000008, "Wrong alignment on FProsModsType");
static_assert(sizeof(FProsModsType) == 0x000038, "Wrong size on FProsModsType");
static_assert(offsetof(FProsModsType, ID) == 0x000000, "Member 'FProsModsType::ID' has a wrong offset!");
static_assert(offsetof(FProsModsType, LocalizationID) == 0x000010, "Member 'FProsModsType::LocalizationID' has a wrong offset!");
static_assert(offsetof(FProsModsType, Localizations) == 0x000020, "Member 'FProsModsType::Localizations' has a wrong offset!");
static_assert(offsetof(FProsModsType, Order) == 0x000030, "Member 'FProsModsType::Order' has a wrong offset!");

// ScriptStruct Pros.ProsModsSocial
// 0x0010 (0x0010 - 0x0000)
struct FProsModsSocial final
{
public:
	int32                                         Likes;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Dislikes;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Downloads;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subscribers;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsSocial) == 0x000004, "Wrong alignment on FProsModsSocial");
static_assert(sizeof(FProsModsSocial) == 0x000010, "Wrong size on FProsModsSocial");
static_assert(offsetof(FProsModsSocial, Likes) == 0x000000, "Member 'FProsModsSocial::Likes' has a wrong offset!");
static_assert(offsetof(FProsModsSocial, Dislikes) == 0x000004, "Member 'FProsModsSocial::Dislikes' has a wrong offset!");
static_assert(offsetof(FProsModsSocial, Downloads) == 0x000008, "Member 'FProsModsSocial::Downloads' has a wrong offset!");
static_assert(offsetof(FProsModsSocial, Subscribers) == 0x00000C, "Member 'FProsModsSocial::Subscribers' has a wrong offset!");

// ScriptStruct Pros.ProsModsTag
// 0x0038 (0x0038 - 0x0000)
struct FProsModsTag final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizationID;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   Localizations;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsTag) == 0x000008, "Wrong alignment on FProsModsTag");
static_assert(sizeof(FProsModsTag) == 0x000038, "Wrong size on FProsModsTag");
static_assert(offsetof(FProsModsTag, ID) == 0x000000, "Member 'FProsModsTag::ID' has a wrong offset!");
static_assert(offsetof(FProsModsTag, LocalizationID) == 0x000010, "Member 'FProsModsTag::LocalizationID' has a wrong offset!");
static_assert(offsetof(FProsModsTag, Localizations) == 0x000020, "Member 'FProsModsTag::Localizations' has a wrong offset!");
static_assert(offsetof(FProsModsTag, Order) == 0x000030, "Member 'FProsModsTag::Order' has a wrong offset!");

// ScriptStruct Pros.ProsModsDataInfo
// 0x0048 (0x0048 - 0x0000)
struct FProsModsDataInfo final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileId;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ModSizeInBytes;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileUrl;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValidationHash;                                    // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsDataInfo) == 0x000008, "Wrong alignment on FProsModsDataInfo");
static_assert(sizeof(FProsModsDataInfo) == 0x000048, "Wrong size on FProsModsDataInfo");
static_assert(offsetof(FProsModsDataInfo, Filename) == 0x000000, "Member 'FProsModsDataInfo::Filename' has a wrong offset!");
static_assert(offsetof(FProsModsDataInfo, FileId) == 0x000010, "Member 'FProsModsDataInfo::FileId' has a wrong offset!");
static_assert(offsetof(FProsModsDataInfo, ModSizeInBytes) == 0x000020, "Member 'FProsModsDataInfo::ModSizeInBytes' has a wrong offset!");
static_assert(offsetof(FProsModsDataInfo, FileUrl) == 0x000028, "Member 'FProsModsDataInfo::FileUrl' has a wrong offset!");
static_assert(offsetof(FProsModsDataInfo, ValidationHash) == 0x000038, "Member 'FProsModsDataInfo::ValidationHash' has a wrong offset!");

// ScriptStruct Pros.ProsModsVersion
// 0x00B8 (0x00B8 - 0x0000)
struct FProsModsVersion final
{
public:
	class FString                                 VersionTag;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformID;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ApprovedAtTimestamp;                               // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UploadedAtTimestamp;                               // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsModsDataInfo                      ModDataInfo;                                       // 0x0030(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 ReleaseNotes;                                      // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkModVersionStatus                       Status;                                            // 0x0088(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsModsModeratorMessage>      ModeratorMessages;                                 // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 VersionName;                                       // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              UpdatedAtTimestamp;                                // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsVersion) == 0x000008, "Wrong alignment on FProsModsVersion");
static_assert(sizeof(FProsModsVersion) == 0x0000B8, "Wrong size on FProsModsVersion");
static_assert(offsetof(FProsModsVersion, VersionTag) == 0x000000, "Member 'FProsModsVersion::VersionTag' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, PlatformID) == 0x000010, "Member 'FProsModsVersion::PlatformID' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, ApprovedAtTimestamp) == 0x000020, "Member 'FProsModsVersion::ApprovedAtTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, UploadedAtTimestamp) == 0x000028, "Member 'FProsModsVersion::UploadedAtTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, ModDataInfo) == 0x000030, "Member 'FProsModsVersion::ModDataInfo' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, ReleaseNotes) == 0x000078, "Member 'FProsModsVersion::ReleaseNotes' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, Status) == 0x000088, "Member 'FProsModsVersion::Status' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, ModeratorMessages) == 0x000090, "Member 'FProsModsVersion::ModeratorMessages' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, VersionName) == 0x0000A0, "Member 'FProsModsVersion::VersionName' has a wrong offset!");
static_assert(offsetof(FProsModsVersion, UpdatedAtTimestamp) == 0x0000B0, "Member 'FProsModsVersion::UpdatedAtTimestamp' has a wrong offset!");

// ScriptStruct Pros.ProsModsAccountInfo
// 0x0018 (0x0018 - 0x0000)
struct FProsModsAccountInfo final
{
public:
	EProsdkModLikeStatus                          Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SubscribedAtTimestamp;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSubscribed;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsAccountInfo) == 0x000008, "Wrong alignment on FProsModsAccountInfo");
static_assert(sizeof(FProsModsAccountInfo) == 0x000018, "Wrong size on FProsModsAccountInfo");
static_assert(offsetof(FProsModsAccountInfo, Status) == 0x000000, "Member 'FProsModsAccountInfo::Status' has a wrong offset!");
static_assert(offsetof(FProsModsAccountInfo, SubscribedAtTimestamp) == 0x000008, "Member 'FProsModsAccountInfo::SubscribedAtTimestamp' has a wrong offset!");
static_assert(offsetof(FProsModsAccountInfo, bIsSubscribed) == 0x000010, "Member 'FProsModsAccountInfo::bIsSubscribed' has a wrong offset!");

// ScriptStruct Pros.ProsModsDependencyInfo
// 0x0028 (0x0028 - 0x0000)
struct FProsModsDependencyInfo final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkModStatus                              Status;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsDependencyInfo) == 0x000008, "Wrong alignment on FProsModsDependencyInfo");
static_assert(sizeof(FProsModsDependencyInfo) == 0x000028, "Wrong size on FProsModsDependencyInfo");
static_assert(offsetof(FProsModsDependencyInfo, ID) == 0x000000, "Member 'FProsModsDependencyInfo::ID' has a wrong offset!");
static_assert(offsetof(FProsModsDependencyInfo, Name) == 0x000010, "Member 'FProsModsDependencyInfo::Name' has a wrong offset!");
static_assert(offsetof(FProsModsDependencyInfo, Status) == 0x000020, "Member 'FProsModsDependencyInfo::Status' has a wrong offset!");

// ScriptStruct Pros.ProsModsItem
// 0x0288 (0x0288 - 0x0000)
struct FProsModsItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsModsType                          ModType;                                           // 0x0010(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FProsModsDescription                   Description;                                       // 0x0048(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EProsdkModStatus                              Status;                                            // 0x0160(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsModsTag>                   Tags;                                              // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsModsVersion                       Version;                                           // 0x0178(0x00B8)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FProsModsSocial                        Social;                                            // 0x0230(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsModsAccountInfo                   AccountModInfo;                                    // 0x0240(0x0018)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FProsModsDependencyInfo>        ThisDependsOn;                                     // 0x0258(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsModsDependencyInfo>        OtherDependsOnThis;                                // 0x0268(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CollectionID;                                      // 0x0278(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsItem) == 0x000008, "Wrong alignment on FProsModsItem");
static_assert(sizeof(FProsModsItem) == 0x000288, "Wrong size on FProsModsItem");
static_assert(offsetof(FProsModsItem, ID) == 0x000000, "Member 'FProsModsItem::ID' has a wrong offset!");
static_assert(offsetof(FProsModsItem, ModType) == 0x000010, "Member 'FProsModsItem::ModType' has a wrong offset!");
static_assert(offsetof(FProsModsItem, Description) == 0x000048, "Member 'FProsModsItem::Description' has a wrong offset!");
static_assert(offsetof(FProsModsItem, Status) == 0x000160, "Member 'FProsModsItem::Status' has a wrong offset!");
static_assert(offsetof(FProsModsItem, Tags) == 0x000168, "Member 'FProsModsItem::Tags' has a wrong offset!");
static_assert(offsetof(FProsModsItem, Version) == 0x000178, "Member 'FProsModsItem::Version' has a wrong offset!");
static_assert(offsetof(FProsModsItem, Social) == 0x000230, "Member 'FProsModsItem::Social' has a wrong offset!");
static_assert(offsetof(FProsModsItem, AccountModInfo) == 0x000240, "Member 'FProsModsItem::AccountModInfo' has a wrong offset!");
static_assert(offsetof(FProsModsItem, ThisDependsOn) == 0x000258, "Member 'FProsModsItem::ThisDependsOn' has a wrong offset!");
static_assert(offsetof(FProsModsItem, OtherDependsOnThis) == 0x000268, "Member 'FProsModsItem::OtherDependsOnThis' has a wrong offset!");
static_assert(offsetof(FProsModsItem, CollectionID) == 0x000278, "Member 'FProsModsItem::CollectionID' has a wrong offset!");

// ScriptStruct Pros.ProsBannerConfig
// 0x0018 (0x0018 - 0x0000)
struct FProsBannerConfig final
{
public:
	int32                                         DisplayMs;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkBannerSystemMode                       Mode;                                              // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsBannerSpace>               Spaces;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsBannerConfig) == 0x000008, "Wrong alignment on FProsBannerConfig");
static_assert(sizeof(FProsBannerConfig) == 0x000018, "Wrong size on FProsBannerConfig");
static_assert(offsetof(FProsBannerConfig, DisplayMs) == 0x000000, "Member 'FProsBannerConfig::DisplayMs' has a wrong offset!");
static_assert(offsetof(FProsBannerConfig, Mode) == 0x000004, "Member 'FProsBannerConfig::Mode' has a wrong offset!");
static_assert(offsetof(FProsBannerConfig, Spaces) == 0x000008, "Member 'FProsBannerConfig::Spaces' has a wrong offset!");

// ScriptStruct Pros.ProsModsComplaintType
// 0x0020 (0x0020 - 0x0000)
struct FProsModsComplaintType final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   Messages;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsComplaintType) == 0x000008, "Wrong alignment on FProsModsComplaintType");
static_assert(sizeof(FProsModsComplaintType) == 0x000020, "Wrong size on FProsModsComplaintType");
static_assert(offsetof(FProsModsComplaintType, ID) == 0x000000, "Member 'FProsModsComplaintType::ID' has a wrong offset!");
static_assert(offsetof(FProsModsComplaintType, Messages) == 0x000010, "Member 'FProsModsComplaintType::Messages' has a wrong offset!");

// ScriptStruct Pros.ProsModsComplaintTypeArray
// 0x0010 (0x0010 - 0x0000)
struct FProsModsComplaintTypeArray final
{
public:
	TArray<struct FProsModsComplaintType>         ModsComplaints;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsComplaintTypeArray) == 0x000008, "Wrong alignment on FProsModsComplaintTypeArray");
static_assert(sizeof(FProsModsComplaintTypeArray) == 0x000010, "Wrong size on FProsModsComplaintTypeArray");
static_assert(offsetof(FProsModsComplaintTypeArray, ModsComplaints) == 0x000000, "Member 'FProsModsComplaintTypeArray::ModsComplaints' has a wrong offset!");

// ScriptStruct Pros.ProsContainerChunkInfo
// 0x0020 (0x0020 - 0x0000)
struct FProsContainerChunkInfo final
{
public:
	int64                                         Number;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DataSize;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsContainerChunkInfo) == 0x000008, "Wrong alignment on FProsContainerChunkInfo");
static_assert(sizeof(FProsContainerChunkInfo) == 0x000020, "Wrong size on FProsContainerChunkInfo");
static_assert(offsetof(FProsContainerChunkInfo, Number) == 0x000000, "Member 'FProsContainerChunkInfo::Number' has a wrong offset!");
static_assert(offsetof(FProsContainerChunkInfo, Key) == 0x000008, "Member 'FProsContainerChunkInfo::Key' has a wrong offset!");
static_assert(offsetof(FProsContainerChunkInfo, DataSize) == 0x000018, "Member 'FProsContainerChunkInfo::DataSize' has a wrong offset!");

// ScriptStruct Pros.ProsContainerInfo
// 0x0020 (0x0020 - 0x0000)
struct FProsContainerInfo final
{
public:
	class FString                                 ContainerId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsContainerChunkInfo>        Chunks;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsContainerInfo) == 0x000008, "Wrong alignment on FProsContainerInfo");
static_assert(sizeof(FProsContainerInfo) == 0x000020, "Wrong size on FProsContainerInfo");
static_assert(offsetof(FProsContainerInfo, ContainerId) == 0x000000, "Member 'FProsContainerInfo::ContainerId' has a wrong offset!");
static_assert(offsetof(FProsContainerInfo, Chunks) == 0x000010, "Member 'FProsContainerInfo::Chunks' has a wrong offset!");

// ScriptStruct Pros.ProsModsTagGroup
// 0x0048 (0x0048 - 0x0000)
struct FProsModsTagGroup final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocalizationID;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   Localizations;                                     // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsModsTag>                   Tags;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          MultipleChoice;                                    // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Order;                                             // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsTagGroup) == 0x000008, "Wrong alignment on FProsModsTagGroup");
static_assert(sizeof(FProsModsTagGroup) == 0x000048, "Wrong size on FProsModsTagGroup");
static_assert(offsetof(FProsModsTagGroup, Name) == 0x000000, "Member 'FProsModsTagGroup::Name' has a wrong offset!");
static_assert(offsetof(FProsModsTagGroup, LocalizationID) == 0x000010, "Member 'FProsModsTagGroup::LocalizationID' has a wrong offset!");
static_assert(offsetof(FProsModsTagGroup, Localizations) == 0x000020, "Member 'FProsModsTagGroup::Localizations' has a wrong offset!");
static_assert(offsetof(FProsModsTagGroup, Tags) == 0x000030, "Member 'FProsModsTagGroup::Tags' has a wrong offset!");
static_assert(offsetof(FProsModsTagGroup, MultipleChoice) == 0x000040, "Member 'FProsModsTagGroup::MultipleChoice' has a wrong offset!");
static_assert(offsetof(FProsModsTagGroup, Order) == 0x000044, "Member 'FProsModsTagGroup::Order' has a wrong offset!");

// ScriptStruct Pros.ProsCrossSaveElement
// 0x0030 (0x0030 - 0x0000)
struct FProsCrossSaveElement final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsCrossSaveElement) == 0x000008, "Wrong alignment on FProsCrossSaveElement");
static_assert(sizeof(FProsCrossSaveElement) == 0x000030, "Wrong size on FProsCrossSaveElement");
static_assert(offsetof(FProsCrossSaveElement, Key) == 0x000000, "Member 'FProsCrossSaveElement::Key' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveElement, Data) == 0x000010, "Member 'FProsCrossSaveElement::Data' has a wrong offset!");

// ScriptStruct Pros.ProsCrossSaveSnapshot
// 0x0040 (0x0040 - 0x0000)
struct FProsCrossSaveSnapshot final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsCrossSaveElement>          Elements;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsCrossSaveSnapshot) == 0x000008, "Wrong alignment on FProsCrossSaveSnapshot");
static_assert(sizeof(FProsCrossSaveSnapshot) == 0x000040, "Wrong size on FProsCrossSaveSnapshot");
static_assert(offsetof(FProsCrossSaveSnapshot, ContentType) == 0x000000, "Member 'FProsCrossSaveSnapshot::ContentType' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveSnapshot, Description) == 0x000010, "Member 'FProsCrossSaveSnapshot::Description' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveSnapshot, Elements) == 0x000020, "Member 'FProsCrossSaveSnapshot::Elements' has a wrong offset!");

// ScriptStruct Pros.ProsCrossSaveSnapshotContainer
// 0x0040 (0x0040 - 0x0000)
struct FProsCrossSaveSnapshotContainer final
{
public:
	class FString                                 ContentType;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerId;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsCrossSaveSnapshotContainer) == 0x000008, "Wrong alignment on FProsCrossSaveSnapshotContainer");
static_assert(sizeof(FProsCrossSaveSnapshotContainer) == 0x000040, "Wrong size on FProsCrossSaveSnapshotContainer");
static_assert(offsetof(FProsCrossSaveSnapshotContainer, ContentType) == 0x000000, "Member 'FProsCrossSaveSnapshotContainer::ContentType' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveSnapshotContainer, Description) == 0x000010, "Member 'FProsCrossSaveSnapshotContainer::Description' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveSnapshotContainer, ContainerId) == 0x000020, "Member 'FProsCrossSaveSnapshotContainer::ContainerId' has a wrong offset!");

// ScriptStruct Pros.ProsCrossSaveCompleteTransferResult
// 0x0080 (0x0080 - 0x0000)
struct FProsCrossSaveCompleteTransferResult final
{
public:
	struct FProsCrossSaveSnapshot                 Snapshot;                                          // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FProsCrossSaveSnapshotContainer        SnapshotContainer;                                 // 0x0040(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsCrossSaveCompleteTransferResult) == 0x000008, "Wrong alignment on FProsCrossSaveCompleteTransferResult");
static_assert(sizeof(FProsCrossSaveCompleteTransferResult) == 0x000080, "Wrong size on FProsCrossSaveCompleteTransferResult");
static_assert(offsetof(FProsCrossSaveCompleteTransferResult, Snapshot) == 0x000000, "Member 'FProsCrossSaveCompleteTransferResult::Snapshot' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveCompleteTransferResult, SnapshotContainer) == 0x000040, "Member 'FProsCrossSaveCompleteTransferResult::SnapshotContainer' has a wrong offset!");

// ScriptStruct Pros.ProsModsTypeArray
// 0x0010 (0x0010 - 0x0000)
struct FProsModsTypeArray final
{
public:
	TArray<struct FProsModsType>                  ModsTypes;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsTypeArray) == 0x000008, "Wrong alignment on FProsModsTypeArray");
static_assert(sizeof(FProsModsTypeArray) == 0x000010, "Wrong size on FProsModsTypeArray");
static_assert(offsetof(FProsModsTypeArray, ModsTypes) == 0x000000, "Member 'FProsModsTypeArray::ModsTypes' has a wrong offset!");

// ScriptStruct Pros.ProsAccountServiceQrCodeExpiration
// 0x0008 (0x0008 - 0x0000)
struct FProsAccountServiceQrCodeExpiration final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpirationSec;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsAccountServiceQrCodeExpiration) == 0x000004, "Wrong alignment on FProsAccountServiceQrCodeExpiration");
static_assert(sizeof(FProsAccountServiceQrCodeExpiration) == 0x000008, "Wrong size on FProsAccountServiceQrCodeExpiration");
static_assert(offsetof(FProsAccountServiceQrCodeExpiration, bIsValid) == 0x000000, "Member 'FProsAccountServiceQrCodeExpiration::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceQrCodeExpiration, ExpirationSec) == 0x000004, "Member 'FProsAccountServiceQrCodeExpiration::ExpirationSec' has a wrong offset!");

// ScriptStruct Pros.ProsAccountServiceQrCode
// 0x0030 (0x0030 - 0x0000)
struct FProsAccountServiceQrCode final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Uri;                                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 png;                                               // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsAccountServiceQrCodeExpiration    Expiration;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsAccountServiceQrCode) == 0x000008, "Wrong alignment on FProsAccountServiceQrCode");
static_assert(sizeof(FProsAccountServiceQrCode) == 0x000030, "Wrong size on FProsAccountServiceQrCode");
static_assert(offsetof(FProsAccountServiceQrCode, bIsValid) == 0x000000, "Member 'FProsAccountServiceQrCode::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceQrCode, Uri) == 0x000008, "Member 'FProsAccountServiceQrCode::Uri' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceQrCode, png) == 0x000018, "Member 'FProsAccountServiceQrCode::png' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceQrCode, Expiration) == 0x000028, "Member 'FProsAccountServiceQrCode::Expiration' has a wrong offset!");

// ScriptStruct Pros.ProsAccountServiceAccountData
// 0x0038 (0x0038 - 0x0000)
struct FProsAccountServiceAccountData final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NamePostFix;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AvatarLink;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsAccountServiceAccountData) == 0x000008, "Wrong alignment on FProsAccountServiceAccountData");
static_assert(sizeof(FProsAccountServiceAccountData) == 0x000038, "Wrong size on FProsAccountServiceAccountData");
static_assert(offsetof(FProsAccountServiceAccountData, bIsValid) == 0x000000, "Member 'FProsAccountServiceAccountData::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceAccountData, Name) == 0x000008, "Member 'FProsAccountServiceAccountData::Name' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceAccountData, NamePostFix) == 0x000018, "Member 'FProsAccountServiceAccountData::NamePostFix' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceAccountData, AvatarLink) == 0x000028, "Member 'FProsAccountServiceAccountData::AvatarLink' has a wrong offset!");

// ScriptStruct Pros.ProsAccountServiceStatus
// 0x0070 (0x0070 - 0x0000)
struct FProsAccountServiceStatus final
{
public:
	EProsAccountLinkStatus                        LinkState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsAccountSystemMode                        SystemMode;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsAccountServiceQrCode              QrCode;                                            // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FProsAccountServiceAccountData         AccountData;                                       // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsAccountServiceStatus) == 0x000008, "Wrong alignment on FProsAccountServiceStatus");
static_assert(sizeof(FProsAccountServiceStatus) == 0x000070, "Wrong size on FProsAccountServiceStatus");
static_assert(offsetof(FProsAccountServiceStatus, LinkState) == 0x000000, "Member 'FProsAccountServiceStatus::LinkState' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceStatus, SystemMode) == 0x000001, "Member 'FProsAccountServiceStatus::SystemMode' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceStatus, QrCode) == 0x000008, "Member 'FProsAccountServiceStatus::QrCode' has a wrong offset!");
static_assert(offsetof(FProsAccountServiceStatus, AccountData) == 0x000038, "Member 'FProsAccountServiceStatus::AccountData' has a wrong offset!");

// ScriptStruct Pros.ProsModsUploadParameters
// 0x0010 (0x0010 - 0x0000)
struct FProsModsUploadParameters final
{
public:
	int32                                         MinChunkSize;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxChunkSize;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxFileSize;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsUploadParameters) == 0x000008, "Wrong alignment on FProsModsUploadParameters");
static_assert(sizeof(FProsModsUploadParameters) == 0x000010, "Wrong size on FProsModsUploadParameters");
static_assert(offsetof(FProsModsUploadParameters, MinChunkSize) == 0x000000, "Member 'FProsModsUploadParameters::MinChunkSize' has a wrong offset!");
static_assert(offsetof(FProsModsUploadParameters, MaxChunkSize) == 0x000004, "Member 'FProsModsUploadParameters::MaxChunkSize' has a wrong offset!");
static_assert(offsetof(FProsModsUploadParameters, MaxFileSize) == 0x000008, "Member 'FProsModsUploadParameters::MaxFileSize' has a wrong offset!");

// ScriptStruct Pros.ProsCrossSaveTransferInfo
// 0x0048 (0x0048 - 0x0000)
struct FProsCrossSaveTransferInfo final
{
public:
	class FString                                 TransferId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentType;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SaveCreatedAt;                                     // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TransferCreatedAt;                                 // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsCrossSaveTransferInfo) == 0x000008, "Wrong alignment on FProsCrossSaveTransferInfo");
static_assert(sizeof(FProsCrossSaveTransferInfo) == 0x000048, "Wrong size on FProsCrossSaveTransferInfo");
static_assert(offsetof(FProsCrossSaveTransferInfo, TransferId) == 0x000000, "Member 'FProsCrossSaveTransferInfo::TransferId' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, ContentType) == 0x000010, "Member 'FProsCrossSaveTransferInfo::ContentType' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, Description) == 0x000020, "Member 'FProsCrossSaveTransferInfo::Description' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, Platform) == 0x000030, "Member 'FProsCrossSaveTransferInfo::Platform' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, Provider) == 0x000031, "Member 'FProsCrossSaveTransferInfo::Provider' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, SaveCreatedAt) == 0x000038, "Member 'FProsCrossSaveTransferInfo::SaveCreatedAt' has a wrong offset!");
static_assert(offsetof(FProsCrossSaveTransferInfo, TransferCreatedAt) == 0x000040, "Member 'FProsCrossSaveTransferInfo::TransferCreatedAt' has a wrong offset!");

// ScriptStruct Pros.ProsEntitlementConsumeItemOperationResult
// 0x0018 (0x0018 - 0x0000)
struct FProsEntitlementConsumeItemOperationResult final
{
public:
	class FString                                 ReferenceId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeDefault                       ResultCode;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsEntitlementConsumeItemOperationResult) == 0x000008, "Wrong alignment on FProsEntitlementConsumeItemOperationResult");
static_assert(sizeof(FProsEntitlementConsumeItemOperationResult) == 0x000018, "Wrong size on FProsEntitlementConsumeItemOperationResult");
static_assert(offsetof(FProsEntitlementConsumeItemOperationResult, ReferenceId) == 0x000000, "Member 'FProsEntitlementConsumeItemOperationResult::ReferenceId' has a wrong offset!");
static_assert(offsetof(FProsEntitlementConsumeItemOperationResult, ResultCode) == 0x000010, "Member 'FProsEntitlementConsumeItemOperationResult::ResultCode' has a wrong offset!");

// ScriptStruct Pros.ProsEntitlementConsumeResult
// 0x0018 (0x0018 - 0x0000)
struct FProsEntitlementConsumeResult final
{
public:
	TArray<struct FProsEntitlementConsumeItemOperationResult> Items;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EProsdkErrorCodeDefault                       ErrorCode;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsEntitlementConsumeResult) == 0x000008, "Wrong alignment on FProsEntitlementConsumeResult");
static_assert(sizeof(FProsEntitlementConsumeResult) == 0x000018, "Wrong size on FProsEntitlementConsumeResult");
static_assert(offsetof(FProsEntitlementConsumeResult, Items) == 0x000000, "Member 'FProsEntitlementConsumeResult::Items' has a wrong offset!");
static_assert(offsetof(FProsEntitlementConsumeResult, ErrorCode) == 0x000010, "Member 'FProsEntitlementConsumeResult::ErrorCode' has a wrong offset!");

// ScriptStruct Pros.ProsMaintRecord
// 0x0018 (0x0018 - 0x0000)
struct FProsMaintRecord final
{
public:
	struct FDateTime                              TimestampStart;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampEnd;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkMaintenanceReason                      Reason;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsMaintRecord) == 0x000008, "Wrong alignment on FProsMaintRecord");
static_assert(sizeof(FProsMaintRecord) == 0x000018, "Wrong size on FProsMaintRecord");
static_assert(offsetof(FProsMaintRecord, TimestampStart) == 0x000000, "Member 'FProsMaintRecord::TimestampStart' has a wrong offset!");
static_assert(offsetof(FProsMaintRecord, TimestampEnd) == 0x000008, "Member 'FProsMaintRecord::TimestampEnd' has a wrong offset!");
static_assert(offsetof(FProsMaintRecord, Reason) == 0x000010, "Member 'FProsMaintRecord::Reason' has a wrong offset!");

// ScriptStruct Pros.ProsHttpFileCachePayload
// 0x0020 (0x0020 - 0x0000)
struct FProsHttpFileCachePayload final
{
public:
	class FString                                 Headers;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsHttpFileCachePayload) == 0x000008, "Wrong alignment on FProsHttpFileCachePayload");
static_assert(sizeof(FProsHttpFileCachePayload) == 0x000020, "Wrong size on FProsHttpFileCachePayload");
static_assert(offsetof(FProsHttpFileCachePayload, Headers) == 0x000000, "Member 'FProsHttpFileCachePayload::Headers' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCachePayload, Data) == 0x000010, "Member 'FProsHttpFileCachePayload::Data' has a wrong offset!");

// ScriptStruct Pros.ProsHttpFileCacheResponse
// 0x0040 (0x0040 - 0x0000)
struct FProsHttpFileCacheResponse final
{
public:
	EProsdkErrorCodeDefault                       ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsHttpFileCachePayload              Payload;                                           // 0x0018(0x0020)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         HttpResponseCode;                                  // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsHttpFileCacheResponse) == 0x000008, "Wrong alignment on FProsHttpFileCacheResponse");
static_assert(sizeof(FProsHttpFileCacheResponse) == 0x000040, "Wrong size on FProsHttpFileCacheResponse");
static_assert(offsetof(FProsHttpFileCacheResponse, ErrorCode) == 0x000000, "Member 'FProsHttpFileCacheResponse::ErrorCode' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCacheResponse, ErrorMessage) == 0x000008, "Member 'FProsHttpFileCacheResponse::ErrorMessage' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCacheResponse, Payload) == 0x000018, "Member 'FProsHttpFileCacheResponse::Payload' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCacheResponse, HttpResponseCode) == 0x000038, "Member 'FProsHttpFileCacheResponse::HttpResponseCode' has a wrong offset!");

// ScriptStruct Pros.ProsEntitlement
// 0x0060 (0x0060 - 0x0000)
struct FProsEntitlement final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsEntitlementType                          Type;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwned;                                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsEntitlementStatus                        Ownership;                                         // 0x0022(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PictureUrl;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeLimit;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeCount;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   UiName;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   UiDesc;                                            // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsEntitlement) == 0x000008, "Wrong alignment on FProsEntitlement");
static_assert(sizeof(FProsEntitlement) == 0x000060, "Wrong size on FProsEntitlement");
static_assert(offsetof(FProsEntitlement, ID) == 0x000000, "Member 'FProsEntitlement::ID' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, Name) == 0x000010, "Member 'FProsEntitlement::Name' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, Type) == 0x000020, "Member 'FProsEntitlement::Type' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, bIsOwned) == 0x000021, "Member 'FProsEntitlement::bIsOwned' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, Ownership) == 0x000022, "Member 'FProsEntitlement::Ownership' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, PictureUrl) == 0x000028, "Member 'FProsEntitlement::PictureUrl' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, ConsumeLimit) == 0x000038, "Member 'FProsEntitlement::ConsumeLimit' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, ConsumeCount) == 0x00003C, "Member 'FProsEntitlement::ConsumeCount' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, UiName) == 0x000040, "Member 'FProsEntitlement::UiName' has a wrong offset!");
static_assert(offsetof(FProsEntitlement, UiDesc) == 0x000050, "Member 'FProsEntitlement::UiDesc' has a wrong offset!");

// ScriptStruct Pros.ProsContainerUploadId
// 0x0028 (0x0028 - 0x0000)
struct FProsContainerUploadId final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkContainerType                          Type;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x17];                                      // 0x0011(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsContainerUploadId) == 0x000008, "Wrong alignment on FProsContainerUploadId");
static_assert(sizeof(FProsContainerUploadId) == 0x000028, "Wrong size on FProsContainerUploadId");
static_assert(offsetof(FProsContainerUploadId, ID) == 0x000000, "Member 'FProsContainerUploadId::ID' has a wrong offset!");
static_assert(offsetof(FProsContainerUploadId, Type) == 0x000010, "Member 'FProsContainerUploadId::Type' has a wrong offset!");

// ScriptStruct Pros.ProsContainer
// 0x0050 (0x0050 - 0x0000)
struct FProsContainer final
{
public:
	struct FProsContainerUploadId                 Upload;                                            // 0x0000(0x0028)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FProsContainerChunk>            Chunks;                                            // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TimeoutMs;                                         // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x14];                                      // 0x003C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsContainer) == 0x000008, "Wrong alignment on FProsContainer");
static_assert(sizeof(FProsContainer) == 0x000050, "Wrong size on FProsContainer");
static_assert(offsetof(FProsContainer, Upload) == 0x000000, "Member 'FProsContainer::Upload' has a wrong offset!");
static_assert(offsetof(FProsContainer, Chunks) == 0x000028, "Member 'FProsContainer::Chunks' has a wrong offset!");
static_assert(offsetof(FProsContainer, TimeoutMs) == 0x000038, "Member 'FProsContainer::TimeoutMs' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsContinuationToken
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FProsLeaderboardsContinuationToken final
{
public:
	int32                                         Skip;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Take;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsContinuationToken) == 0x000008, "Wrong alignment on FProsLeaderboardsContinuationToken");
static_assert(sizeof(FProsLeaderboardsContinuationToken) == 0x000018, "Wrong size on FProsLeaderboardsContinuationToken");
static_assert(offsetof(FProsLeaderboardsContinuationToken, Skip) == 0x000000, "Member 'FProsLeaderboardsContinuationToken::Skip' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsContinuationToken, Take) == 0x000004, "Member 'FProsLeaderboardsContinuationToken::Take' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsContinuationTokenOptional
// 0x0020 (0x0020 - 0x0000)
struct FProsLeaderboardsContinuationTokenOptional final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsLeaderboardsContinuationToken     Data;                                              // 0x0008(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsContinuationTokenOptional) == 0x000008, "Wrong alignment on FProsLeaderboardsContinuationTokenOptional");
static_assert(sizeof(FProsLeaderboardsContinuationTokenOptional) == 0x000020, "Wrong size on FProsLeaderboardsContinuationTokenOptional");
static_assert(offsetof(FProsLeaderboardsContinuationTokenOptional, bIsValid) == 0x000000, "Member 'FProsLeaderboardsContinuationTokenOptional::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsContinuationTokenOptional, Data) == 0x000008, "Member 'FProsLeaderboardsContinuationTokenOptional::Data' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardLocalizationInfo
// 0x00C0 (0x00C0 - 0x0000)
struct FProsLeaderboardsLeaderboardLocalizationInfo final
{
public:
	struct FProsLocDesc                           DisplayName;                                       // 0x0000(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FProsLocDesc                           Description;                                       // 0x0040(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FProsLocDesc                           MetricName;                                        // 0x0080(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardLocalizationInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardLocalizationInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardLocalizationInfo) == 0x0000C0, "Wrong size on FProsLeaderboardsLeaderboardLocalizationInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardLocalizationInfo, DisplayName) == 0x000000, "Member 'FProsLeaderboardsLeaderboardLocalizationInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardLocalizationInfo, Description) == 0x000040, "Member 'FProsLeaderboardsLeaderboardLocalizationInfo::Description' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardLocalizationInfo, MetricName) == 0x000080, "Member 'FProsLeaderboardsLeaderboardLocalizationInfo::MetricName' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardTierInfo
// 0x0028 (0x0028 - 0x0000)
struct FProsLeaderboardsLeaderboardTierInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsLocDesc>                   LocalizedNames;                                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardTierInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardTierInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardTierInfo) == 0x000028, "Wrong size on FProsLeaderboardsLeaderboardTierInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardTierInfo, Name) == 0x000000, "Member 'FProsLeaderboardsLeaderboardTierInfo::Name' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardTierInfo, Order) == 0x000010, "Member 'FProsLeaderboardsLeaderboardTierInfo::Order' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardTierInfo, LocalizedNames) == 0x000018, "Member 'FProsLeaderboardsLeaderboardTierInfo::LocalizedNames' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardGeneralInfo
// 0x0030 (0x0030 - 0x0000)
struct FProsLeaderboardsLeaderboardGeneralInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitDataByPlatform;                              // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParticipantsDisplayed;                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAnonymousPlayers;                             // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlatformIds;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsLeaderboardTierInfo> Tiers;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardGeneralInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardGeneralInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardGeneralInfo) == 0x000030, "Wrong size on FProsLeaderboardsLeaderboardGeneralInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, bIsValid) == 0x000000, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, bSplitDataByPlatform) == 0x000001, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::bSplitDataByPlatform' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, ParticipantsDisplayed) == 0x000004, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::ParticipantsDisplayed' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, bShowAnonymousPlayers) == 0x000008, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::bShowAnonymousPlayers' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, PlatformIds) == 0x000010, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::PlatformIds' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardGeneralInfo, Tiers) == 0x000020, "Member 'FProsLeaderboardsLeaderboardGeneralInfo::Tiers' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardReset
// 0x0010 (0x0010 - 0x0000)
struct FProsLeaderboardsLeaderboardReset final
{
public:
	struct FDateTime                              ResetTimeTimestamp;                                // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              RemainingTillNextResetSeconds;                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardReset) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardReset");
static_assert(sizeof(FProsLeaderboardsLeaderboardReset) == 0x000010, "Wrong size on FProsLeaderboardsLeaderboardReset");
static_assert(offsetof(FProsLeaderboardsLeaderboardReset, ResetTimeTimestamp) == 0x000000, "Member 'FProsLeaderboardsLeaderboardReset::ResetTimeTimestamp' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardReset, RemainingTillNextResetSeconds) == 0x000008, "Member 'FProsLeaderboardsLeaderboardReset::RemainingTillNextResetSeconds' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardPeriod
// 0x0008 (0x0008 - 0x0000)
struct FProsLeaderboardsLeaderboardPeriod final
{
public:
	EProsdkProsLeaderboardTimePeriod              Period;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardPeriod) == 0x000004, "Wrong alignment on FProsLeaderboardsLeaderboardPeriod");
static_assert(sizeof(FProsLeaderboardsLeaderboardPeriod) == 0x000008, "Wrong size on FProsLeaderboardsLeaderboardPeriod");
static_assert(offsetof(FProsLeaderboardsLeaderboardPeriod, Period) == 0x000000, "Member 'FProsLeaderboardsLeaderboardPeriod::Period' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardPeriod, Value) == 0x000004, "Member 'FProsLeaderboardsLeaderboardPeriod::Value' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardDataCaptureReset
// 0x0038 (0x0038 - 0x0000)
struct FProsLeaderboardsLeaderboardDataCaptureReset final
{
public:
	int32                                         TotalResetCount;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CompletedResetCount;                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardReset      NextReset;                                         // 0x0008(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardReset      LastReset;                                         // 0x0018(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardPeriod     ResetPeriod;                                       // 0x0028(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsLeaderboardDataCaptureReset) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardDataCaptureReset");
static_assert(sizeof(FProsLeaderboardsLeaderboardDataCaptureReset) == 0x000038, "Wrong size on FProsLeaderboardsLeaderboardDataCaptureReset");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, TotalResetCount) == 0x000000, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::TotalResetCount' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, CompletedResetCount) == 0x000004, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::CompletedResetCount' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, NextReset) == 0x000008, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::NextReset' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, LastReset) == 0x000018, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::LastReset' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, ResetPeriod) == 0x000028, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::ResetPeriod' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureReset, bIsValid) == 0x000030, "Member 'FProsLeaderboardsLeaderboardDataCaptureReset::bIsValid' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardDataCaptureEndInfo
// 0x0028 (0x0028 - 0x0000)
struct FProsLeaderboardsLeaderboardDataCaptureEndInfo final
{
public:
	EProsdkProsLeaderboardDataCaptureEndType      EndType;                                           // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndOnTimestamp;                                    // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfResets;                                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingResets;                                   // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              RemainingTillEndSeconds;                           // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsLeaderboardDataCaptureEndInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardDataCaptureEndInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardDataCaptureEndInfo) == 0x000028, "Wrong size on FProsLeaderboardsLeaderboardDataCaptureEndInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, EndType) == 0x000000, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::EndType' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, EndOnTimestamp) == 0x000008, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::EndOnTimestamp' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, NumberOfResets) == 0x000010, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::NumberOfResets' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, RemainingResets) == 0x000014, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::RemainingResets' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, RemainingTillEndSeconds) == 0x000018, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::RemainingTillEndSeconds' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureEndInfo, bIsValid) == 0x000020, "Member 'FProsLeaderboardsLeaderboardDataCaptureEndInfo::bIsValid' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardDataCaptureInfo
// 0x0078 (0x0078 - 0x0000)
struct FProsLeaderboardsLeaderboardDataCaptureInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDateTimestamp;                                // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardDataCaptureReset DataCaptureReset;                            // 0x0010(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardDataCaptureEndInfo DataCaptureEndDate;                        // 0x0048(0x0028)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EProsdkProsLeaderboardDataCaptureStatus       Status;                                            // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsLeaderboardDataCaptureInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardDataCaptureInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardDataCaptureInfo) == 0x000078, "Wrong size on FProsLeaderboardsLeaderboardDataCaptureInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureInfo, bIsValid) == 0x000000, "Member 'FProsLeaderboardsLeaderboardDataCaptureInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureInfo, StartDateTimestamp) == 0x000008, "Member 'FProsLeaderboardsLeaderboardDataCaptureInfo::StartDateTimestamp' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureInfo, DataCaptureReset) == 0x000010, "Member 'FProsLeaderboardsLeaderboardDataCaptureInfo::DataCaptureReset' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureInfo, DataCaptureEndDate) == 0x000048, "Member 'FProsLeaderboardsLeaderboardDataCaptureInfo::DataCaptureEndDate' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDataCaptureInfo, Status) == 0x000070, "Member 'FProsLeaderboardsLeaderboardDataCaptureInfo::Status' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardDuration
// 0x0010 (0x0010 - 0x0000)
struct FProsLeaderboardsLeaderboardDuration final
{
public:
	struct FDateTime                              StartTimestamp;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              FinishTimestamp;                                   // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboardDuration) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardDuration");
static_assert(sizeof(FProsLeaderboardsLeaderboardDuration) == 0x000010, "Wrong size on FProsLeaderboardsLeaderboardDuration");
static_assert(offsetof(FProsLeaderboardsLeaderboardDuration, StartTimestamp) == 0x000000, "Member 'FProsLeaderboardsLeaderboardDuration::StartTimestamp' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardDuration, FinishTimestamp) == 0x000008, "Member 'FProsLeaderboardsLeaderboardDuration::FinishTimestamp' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboardPublishingInfo
// 0x0020 (0x0020 - 0x0000)
struct FProsLeaderboardsLeaderboardPublishingInfo final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsLeaderboardsLeaderboardDuration   PublishingDate;                                    // 0x0008(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EProsdkProsLeaderboardPublishStatus           Status;                                            // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsLeaderboardPublishingInfo) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboardPublishingInfo");
static_assert(sizeof(FProsLeaderboardsLeaderboardPublishingInfo) == 0x000020, "Wrong size on FProsLeaderboardsLeaderboardPublishingInfo");
static_assert(offsetof(FProsLeaderboardsLeaderboardPublishingInfo, bIsValid) == 0x000000, "Member 'FProsLeaderboardsLeaderboardPublishingInfo::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardPublishingInfo, PublishingDate) == 0x000008, "Member 'FProsLeaderboardsLeaderboardPublishingInfo::PublishingDate' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboardPublishingInfo, Status) == 0x000018, "Member 'FProsLeaderboardsLeaderboardPublishingInfo::Status' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsLeaderboard
// 0x00F8 (0x00F8 - 0x0000)
struct FProsLeaderboardsLeaderboard final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsLeaderboardLocalizationInfo> LocalizationInfo;                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardGeneralInfo GeneralInfo;                                      // 0x0020(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardDataCaptureInfo DataCaptureInfo;                              // 0x0050(0x0078)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsLeaderboardPublishingInfo PublishingInfo;                                // 0x00C8(0x0020)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x00E8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsLeaderboard) == 0x000008, "Wrong alignment on FProsLeaderboardsLeaderboard");
static_assert(sizeof(FProsLeaderboardsLeaderboard) == 0x0000F8, "Wrong size on FProsLeaderboardsLeaderboard");
static_assert(offsetof(FProsLeaderboardsLeaderboard, ID) == 0x000000, "Member 'FProsLeaderboardsLeaderboard::ID' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboard, LocalizationInfo) == 0x000010, "Member 'FProsLeaderboardsLeaderboard::LocalizationInfo' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboard, GeneralInfo) == 0x000020, "Member 'FProsLeaderboardsLeaderboard::GeneralInfo' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboard, DataCaptureInfo) == 0x000050, "Member 'FProsLeaderboardsLeaderboard::DataCaptureInfo' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboard, PublishingInfo) == 0x0000C8, "Member 'FProsLeaderboardsLeaderboard::PublishingInfo' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsLeaderboard, Name) == 0x0000E8, "Member 'FProsLeaderboardsLeaderboard::Name' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsGetCatalogResult
// 0x0040 (0x0040 - 0x0000)
struct FProsLeaderboardsGetCatalogResult final
{
public:
	EProsdkErrorCodeLeaderboards                  ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsLeaderboardsContinuationTokenOptional ContinuationToken;                             // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsLeaderboard>   Leaderboards;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsGetCatalogResult) == 0x000008, "Wrong alignment on FProsLeaderboardsGetCatalogResult");
static_assert(sizeof(FProsLeaderboardsGetCatalogResult) == 0x000040, "Wrong size on FProsLeaderboardsGetCatalogResult");
static_assert(offsetof(FProsLeaderboardsGetCatalogResult, ErrorCode) == 0x000000, "Member 'FProsLeaderboardsGetCatalogResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetCatalogResult, ContinuationToken) == 0x000008, "Member 'FProsLeaderboardsGetCatalogResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetCatalogResult, Leaderboards) == 0x000028, "Member 'FProsLeaderboardsGetCatalogResult::Leaderboards' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetCatalogResult, Total) == 0x000038, "Member 'FProsLeaderboardsGetCatalogResult::Total' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsPlayer
// 0x0070 (0x0070 - 0x0000)
struct FProsLeaderboardsPlayer final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsAccountServiceAccountData         AccountInfo;                                       // 0x0020(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsPlayer) == 0x000008, "Wrong alignment on FProsLeaderboardsPlayer");
static_assert(sizeof(FProsLeaderboardsPlayer) == 0x000070, "Wrong size on FProsLeaderboardsPlayer");
static_assert(offsetof(FProsLeaderboardsPlayer, UserId) == 0x000000, "Member 'FProsLeaderboardsPlayer::UserId' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayer, AccountId) == 0x000010, "Member 'FProsLeaderboardsPlayer::AccountId' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayer, AccountInfo) == 0x000020, "Member 'FProsLeaderboardsPlayer::AccountInfo' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayer, Rank) == 0x000058, "Member 'FProsLeaderboardsPlayer::Rank' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayer, Score) == 0x00005C, "Member 'FProsLeaderboardsPlayer::Score' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayer, CustomData) == 0x000060, "Member 'FProsLeaderboardsPlayer::CustomData' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsTierEntry
// 0x0020 (0x0020 - 0x0000)
struct FProsLeaderboardsTierEntry final
{
public:
	class FString                                 TierName;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsPlayer>        Players;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsTierEntry) == 0x000008, "Wrong alignment on FProsLeaderboardsTierEntry");
static_assert(sizeof(FProsLeaderboardsTierEntry) == 0x000020, "Wrong size on FProsLeaderboardsTierEntry");
static_assert(offsetof(FProsLeaderboardsTierEntry, TierName) == 0x000000, "Member 'FProsLeaderboardsTierEntry::TierName' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsTierEntry, Players) == 0x000010, "Member 'FProsLeaderboardsTierEntry::Players' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsPlayerEntryOptional
// 0x0028 (0x0028 - 0x0000)
struct FProsLeaderboardsPlayerEntryOptional final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsLeaderboardsTierEntry             RequestedPlayerEntry;                              // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsPlayerEntryOptional) == 0x000008, "Wrong alignment on FProsLeaderboardsPlayerEntryOptional");
static_assert(sizeof(FProsLeaderboardsPlayerEntryOptional) == 0x000028, "Wrong size on FProsLeaderboardsPlayerEntryOptional");
static_assert(offsetof(FProsLeaderboardsPlayerEntryOptional, bIsValid) == 0x000000, "Member 'FProsLeaderboardsPlayerEntryOptional::bIsValid' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsPlayerEntryOptional, RequestedPlayerEntry) == 0x000008, "Member 'FProsLeaderboardsPlayerEntryOptional::RequestedPlayerEntry' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsEntry
// 0x0040 (0x0040 - 0x0000)
struct FProsLeaderboardsEntry final
{
public:
	EProsProvider                                 Provider;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsLeaderboardsTierEntry>     TierEntries;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsPlayerEntryOptional   RequestedPlayerResult;                             // 0x0018(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsEntry) == 0x000008, "Wrong alignment on FProsLeaderboardsEntry");
static_assert(sizeof(FProsLeaderboardsEntry) == 0x000040, "Wrong size on FProsLeaderboardsEntry");
static_assert(offsetof(FProsLeaderboardsEntry, Provider) == 0x000000, "Member 'FProsLeaderboardsEntry::Provider' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsEntry, Platform) == 0x000001, "Member 'FProsLeaderboardsEntry::Platform' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsEntry, TierEntries) == 0x000008, "Member 'FProsLeaderboardsEntry::TierEntries' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsEntry, RequestedPlayerResult) == 0x000018, "Member 'FProsLeaderboardsEntry::RequestedPlayerResult' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsSearchData
// 0x0048 (0x0048 - 0x0000)
struct FProsLeaderboardsSearchData final
{
public:
	class FString                                 LeaderboardId;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsContinuationTokenOptional ContinuationToken;                             // 0x0010(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsEntry>         Entries;                                           // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsSearchData) == 0x000008, "Wrong alignment on FProsLeaderboardsSearchData");
static_assert(sizeof(FProsLeaderboardsSearchData) == 0x000048, "Wrong size on FProsLeaderboardsSearchData");
static_assert(offsetof(FProsLeaderboardsSearchData, LeaderboardId) == 0x000000, "Member 'FProsLeaderboardsSearchData::LeaderboardId' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsSearchData, ContinuationToken) == 0x000010, "Member 'FProsLeaderboardsSearchData::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsSearchData, Entries) == 0x000030, "Member 'FProsLeaderboardsSearchData::Entries' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsSearchData, Total) == 0x000040, "Member 'FProsLeaderboardsSearchData::Total' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsGetResult
// 0x0018 (0x0018 - 0x0000)
struct FProsLeaderboardsGetResult final
{
public:
	EProsdkErrorCodeLeaderboards                  ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsLeaderboardsSearchData>    Results;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsLeaderboardsGetResult) == 0x000008, "Wrong alignment on FProsLeaderboardsGetResult");
static_assert(sizeof(FProsLeaderboardsGetResult) == 0x000018, "Wrong size on FProsLeaderboardsGetResult");
static_assert(offsetof(FProsLeaderboardsGetResult, ErrorCode) == 0x000000, "Member 'FProsLeaderboardsGetResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetResult, Results) == 0x000008, "Member 'FProsLeaderboardsGetResult::Results' has a wrong offset!");

// ScriptStruct Pros.ProsLeaderboardsGetEntriesResult
// 0x0040 (0x0040 - 0x0000)
struct FProsLeaderboardsGetEntriesResult final
{
public:
	EProsdkErrorCodeLeaderboards                  ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsLeaderboardsContinuationTokenOptional ContinuationToken;                             // 0x0008(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsLeaderboardsEntry>         Entries;                                           // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsGetEntriesResult) == 0x000008, "Wrong alignment on FProsLeaderboardsGetEntriesResult");
static_assert(sizeof(FProsLeaderboardsGetEntriesResult) == 0x000040, "Wrong size on FProsLeaderboardsGetEntriesResult");
static_assert(offsetof(FProsLeaderboardsGetEntriesResult, ErrorCode) == 0x000000, "Member 'FProsLeaderboardsGetEntriesResult::ErrorCode' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetEntriesResult, ContinuationToken) == 0x000008, "Member 'FProsLeaderboardsGetEntriesResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetEntriesResult, Entries) == 0x000028, "Member 'FProsLeaderboardsGetEntriesResult::Entries' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsGetEntriesResult, Total) == 0x000038, "Member 'FProsLeaderboardsGetEntriesResult::Total' has a wrong offset!");

// ScriptStruct Pros.ProsModsCollectionGroupEntry
// 0x0028 (0x0028 - 0x0000)
struct FProsModsCollectionGroupEntry final
{
public:
	class FString                                 CollectionID;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionViewType;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsCollectionGroupEntry) == 0x000008, "Wrong alignment on FProsModsCollectionGroupEntry");
static_assert(sizeof(FProsModsCollectionGroupEntry) == 0x000028, "Wrong size on FProsModsCollectionGroupEntry");
static_assert(offsetof(FProsModsCollectionGroupEntry, CollectionID) == 0x000000, "Member 'FProsModsCollectionGroupEntry::CollectionID' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntry, CollectionViewType) == 0x000010, "Member 'FProsModsCollectionGroupEntry::CollectionViewType' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntry, Order) == 0x000020, "Member 'FProsModsCollectionGroupEntry::Order' has a wrong offset!");

// ScriptStruct Pros.ProsModsCollectionGroupEntryInfo
// 0x0070 (0x0070 - 0x0000)
struct FProsModsCollectionGroupEntryInfo final
{
public:
	struct FProsModsCollectionGroupEntry          CollectionGroupEntry;                              // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 CollectionName;                                    // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollectionNameLocalizationID;                      // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   CollectionNameLocalizations;                       // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EProsdkModCollectionType                      CollectionType;                                    // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x17];                                      // 0x0059(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsCollectionGroupEntryInfo) == 0x000008, "Wrong alignment on FProsModsCollectionGroupEntryInfo");
static_assert(sizeof(FProsModsCollectionGroupEntryInfo) == 0x000070, "Wrong size on FProsModsCollectionGroupEntryInfo");
static_assert(offsetof(FProsModsCollectionGroupEntryInfo, CollectionGroupEntry) == 0x000000, "Member 'FProsModsCollectionGroupEntryInfo::CollectionGroupEntry' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntryInfo, CollectionName) == 0x000028, "Member 'FProsModsCollectionGroupEntryInfo::CollectionName' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntryInfo, CollectionNameLocalizationID) == 0x000038, "Member 'FProsModsCollectionGroupEntryInfo::CollectionNameLocalizationID' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntryInfo, CollectionNameLocalizations) == 0x000048, "Member 'FProsModsCollectionGroupEntryInfo::CollectionNameLocalizations' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroupEntryInfo, CollectionType) == 0x000058, "Member 'FProsModsCollectionGroupEntryInfo::CollectionType' has a wrong offset!");

// ScriptStruct Pros.ProsModsCollectionGroup
// 0x0030 (0x0030 - 0x0000)
struct FProsModsCollectionGroup final
{
public:
	class FString                                 CollectionGroupName;                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsModsCollectionGroupEntryInfo> CollectionGroupEntries;                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsCollectionGroup) == 0x000008, "Wrong alignment on FProsModsCollectionGroup");
static_assert(sizeof(FProsModsCollectionGroup) == 0x000030, "Wrong size on FProsModsCollectionGroup");
static_assert(offsetof(FProsModsCollectionGroup, CollectionGroupName) == 0x000000, "Member 'FProsModsCollectionGroup::CollectionGroupName' has a wrong offset!");
static_assert(offsetof(FProsModsCollectionGroup, CollectionGroupEntries) == 0x000010, "Member 'FProsModsCollectionGroup::CollectionGroupEntries' has a wrong offset!");

// ScriptStruct Pros.ProsModsCollectionGroupArray
// 0x0020 (0x0020 - 0x0000)
struct FProsModsCollectionGroupArray final
{
public:
	TArray<struct FProsModsCollectionGroup>       Groups;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsCollectionGroupArray) == 0x000008, "Wrong alignment on FProsModsCollectionGroupArray");
static_assert(sizeof(FProsModsCollectionGroupArray) == 0x000020, "Wrong size on FProsModsCollectionGroupArray");
static_assert(offsetof(FProsModsCollectionGroupArray, Groups) == 0x000000, "Member 'FProsModsCollectionGroupArray::Groups' has a wrong offset!");

// ScriptStruct Pros.ProsModsStat
// 0x0010 (0x0010 - 0x0000)
struct FProsModsStat final
{
public:
	int32                                         NewModsCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicModsCount;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubscriptionsModsCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreatedModsCount;                                  // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsStat) == 0x000004, "Wrong alignment on FProsModsStat");
static_assert(sizeof(FProsModsStat) == 0x000010, "Wrong size on FProsModsStat");
static_assert(offsetof(FProsModsStat, NewModsCount) == 0x000000, "Member 'FProsModsStat::NewModsCount' has a wrong offset!");
static_assert(offsetof(FProsModsStat, PublicModsCount) == 0x000004, "Member 'FProsModsStat::PublicModsCount' has a wrong offset!");
static_assert(offsetof(FProsModsStat, SubscriptionsModsCount) == 0x000008, "Member 'FProsModsStat::SubscriptionsModsCount' has a wrong offset!");
static_assert(offsetof(FProsModsStat, CreatedModsCount) == 0x00000C, "Member 'FProsModsStat::CreatedModsCount' has a wrong offset!");

// ScriptStruct Pros.ProsSpaceWithBanners
// 0x0028 (0x0028 - 0x0000)
struct FProsSpaceWithBanners final
{
public:
	struct FProsBannerSpace                       Space;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FProsBanner>                    Banners;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsSpaceWithBanners) == 0x000008, "Wrong alignment on FProsSpaceWithBanners");
static_assert(sizeof(FProsSpaceWithBanners) == 0x000028, "Wrong size on FProsSpaceWithBanners");
static_assert(offsetof(FProsSpaceWithBanners, Space) == 0x000000, "Member 'FProsSpaceWithBanners::Space' has a wrong offset!");
static_assert(offsetof(FProsSpaceWithBanners, Banners) == 0x000018, "Member 'FProsSpaceWithBanners::Banners' has a wrong offset!");

// ScriptStruct Pros.ProsModsAdditionalFields
// 0x0060 (0x0060 - 0x0000)
struct FProsModsAdditionalFields final
{
public:
	class FString                                 ModTypeID;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModTagIDs;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Homepage;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileUrl;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         YoutubeLinks;                                      // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsAdditionalFields) == 0x000008, "Wrong alignment on FProsModsAdditionalFields");
static_assert(sizeof(FProsModsAdditionalFields) == 0x000060, "Wrong size on FProsModsAdditionalFields");
static_assert(offsetof(FProsModsAdditionalFields, ModTypeID) == 0x000000, "Member 'FProsModsAdditionalFields::ModTypeID' has a wrong offset!");
static_assert(offsetof(FProsModsAdditionalFields, ModTagIDs) == 0x000010, "Member 'FProsModsAdditionalFields::ModTagIDs' has a wrong offset!");
static_assert(offsetof(FProsModsAdditionalFields, Homepage) == 0x000020, "Member 'FProsModsAdditionalFields::Homepage' has a wrong offset!");
static_assert(offsetof(FProsModsAdditionalFields, ProfileUrl) == 0x000030, "Member 'FProsModsAdditionalFields::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FProsModsAdditionalFields, YoutubeLinks) == 0x000040, "Member 'FProsModsAdditionalFields::YoutubeLinks' has a wrong offset!");

// ScriptStruct Pros.ProsSdkKeyValue
// 0x0030 (0x0030 - 0x0000)
struct FProsSdkKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsSdkKeyValue) == 0x000008, "Wrong alignment on FProsSdkKeyValue");
static_assert(sizeof(FProsSdkKeyValue) == 0x000030, "Wrong size on FProsSdkKeyValue");
static_assert(offsetof(FProsSdkKeyValue, Key) == 0x000000, "Member 'FProsSdkKeyValue::Key' has a wrong offset!");
static_assert(offsetof(FProsSdkKeyValue, Value) == 0x000010, "Member 'FProsSdkKeyValue::Value' has a wrong offset!");

// ScriptStruct Pros.ProsXSTSTokenConf
// 0x0020 (0x0020 - 0x0000)
struct FProsXSTSTokenConf final
{
public:
	class FString                                 RequestEndPointURL;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Verb;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsXSTSTokenConf) == 0x000008, "Wrong alignment on FProsXSTSTokenConf");
static_assert(sizeof(FProsXSTSTokenConf) == 0x000020, "Wrong size on FProsXSTSTokenConf");
static_assert(offsetof(FProsXSTSTokenConf, RequestEndPointURL) == 0x000000, "Member 'FProsXSTSTokenConf::RequestEndPointURL' has a wrong offset!");
static_assert(offsetof(FProsXSTSTokenConf, Verb) == 0x000010, "Member 'FProsXSTSTokenConf::Verb' has a wrong offset!");

// ScriptStruct Pros.ProsMaintInfo
// 0x0018 (0x0018 - 0x0000)
struct FProsMaintInfo final
{
public:
	EProsdkErrorCodeAuthorization                 Code;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsMaintRecord>               Records;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsMaintInfo) == 0x000008, "Wrong alignment on FProsMaintInfo");
static_assert(sizeof(FProsMaintInfo) == 0x000018, "Wrong size on FProsMaintInfo");
static_assert(offsetof(FProsMaintInfo, Code) == 0x000000, "Member 'FProsMaintInfo::Code' has a wrong offset!");
static_assert(offsetof(FProsMaintInfo, Records) == 0x000008, "Member 'FProsMaintInfo::Records' has a wrong offset!");

// ScriptStruct Pros.ProsContainerDownloadRequest
// 0x0030 (0x0030 - 0x0000)
struct FProsContainerDownloadRequest final
{
public:
	class FString                                 ContainerId;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int64>                                 ChunkIds;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsContainerDownloadRequest) == 0x000008, "Wrong alignment on FProsContainerDownloadRequest");
static_assert(sizeof(FProsContainerDownloadRequest) == 0x000030, "Wrong size on FProsContainerDownloadRequest");
static_assert(offsetof(FProsContainerDownloadRequest, ContainerId) == 0x000000, "Member 'FProsContainerDownloadRequest::ContainerId' has a wrong offset!");
static_assert(offsetof(FProsContainerDownloadRequest, ChunkIds) == 0x000010, "Member 'FProsContainerDownloadRequest::ChunkIds' has a wrong offset!");

// ScriptStruct Pros.ProsContainerRawdata
// 0x0020 (0x0020 - 0x0000)
struct FProsContainerRawdata final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsContainerRawdata) == 0x000008, "Wrong alignment on FProsContainerRawdata");
static_assert(sizeof(FProsContainerRawdata) == 0x000020, "Wrong size on FProsContainerRawdata");
static_assert(offsetof(FProsContainerRawdata, Data) == 0x000000, "Member 'FProsContainerRawdata::Data' has a wrong offset!");

// ScriptStruct Pros.ProsEntitlementConsumeRequest
// 0x0038 (0x0038 - 0x0000)
struct FProsEntitlementConsumeRequest final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsumeCount;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReferenceId;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsEntitlementConsumeRequest) == 0x000008, "Wrong alignment on FProsEntitlementConsumeRequest");
static_assert(sizeof(FProsEntitlementConsumeRequest) == 0x000038, "Wrong size on FProsEntitlementConsumeRequest");
static_assert(offsetof(FProsEntitlementConsumeRequest, ID) == 0x000000, "Member 'FProsEntitlementConsumeRequest::ID' has a wrong offset!");
static_assert(offsetof(FProsEntitlementConsumeRequest, ConsumeCount) == 0x000010, "Member 'FProsEntitlementConsumeRequest::ConsumeCount' has a wrong offset!");
static_assert(offsetof(FProsEntitlementConsumeRequest, ReferenceId) == 0x000018, "Member 'FProsEntitlementConsumeRequest::ReferenceId' has a wrong offset!");

// ScriptStruct Pros.ProsFileAccessCallbacks
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FProsFileAccessCallbacks final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsFileAccessCallbacks) == 0x000008, "Wrong alignment on FProsFileAccessCallbacks");
static_assert(sizeof(FProsFileAccessCallbacks) == 0x000010, "Wrong size on FProsFileAccessCallbacks");

// ScriptStruct Pros.ProsFileAccessOptions
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FProsFileAccessOptions final
{
public:
	uint8                                         Pad_0[0x40];                                       // 0x0000(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsFileAccessOptions) == 0x000008, "Wrong alignment on FProsFileAccessOptions");
static_assert(sizeof(FProsFileAccessOptions) == 0x000040, "Wrong size on FProsFileAccessOptions");

// ScriptStruct Pros.ProsHttpFileCacheGetRequest
// 0x0038 (0x0038 - 0x0000)
struct FProsHttpFileCacheGetRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Headers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeoutMs;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsHttpFileCacheGetRequest) == 0x000008, "Wrong alignment on FProsHttpFileCacheGetRequest");
static_assert(sizeof(FProsHttpFileCacheGetRequest) == 0x000038, "Wrong size on FProsHttpFileCacheGetRequest");
static_assert(offsetof(FProsHttpFileCacheGetRequest, URL) == 0x000000, "Member 'FProsHttpFileCacheGetRequest::URL' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCacheGetRequest, Headers) == 0x000010, "Member 'FProsHttpFileCacheGetRequest::Headers' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCacheGetRequest, TimeoutMs) == 0x000020, "Member 'FProsHttpFileCacheGetRequest::TimeoutMs' has a wrong offset!");

// ScriptStruct Pros.ProsHttpFileCachePostRequest
// 0x0048 (0x0048 - 0x0000)
struct FProsHttpFileCachePostRequest final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Headers;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeoutMs;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsHttpFileCachePostRequest) == 0x000008, "Wrong alignment on FProsHttpFileCachePostRequest");
static_assert(sizeof(FProsHttpFileCachePostRequest) == 0x000048, "Wrong size on FProsHttpFileCachePostRequest");
static_assert(offsetof(FProsHttpFileCachePostRequest, URL) == 0x000000, "Member 'FProsHttpFileCachePostRequest::URL' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCachePostRequest, Headers) == 0x000010, "Member 'FProsHttpFileCachePostRequest::Headers' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCachePostRequest, TimeoutMs) == 0x000020, "Member 'FProsHttpFileCachePostRequest::TimeoutMs' has a wrong offset!");
static_assert(offsetof(FProsHttpFileCachePostRequest, Data) == 0x000028, "Member 'FProsHttpFileCachePostRequest::Data' has a wrong offset!");

// ScriptStruct Pros.JsonObjBP
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJsonObjBP final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJsonObjBP) == 0x000008, "Wrong alignment on FJsonObjBP");
static_assert(sizeof(FJsonObjBP) == 0x000010, "Wrong size on FJsonObjBP");

// ScriptStruct Pros.JsonValBP
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FJsonValBP final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJsonValBP) == 0x000008, "Wrong alignment on FJsonValBP");
static_assert(sizeof(FJsonValBP) == 0x000010, "Wrong size on FJsonValBP");

// ScriptStruct Pros.ProsLeaderboardsSearch
// 0x0038 (0x0038 - 0x0000)
struct FProsLeaderboardsSearch final
{
public:
	class FString                                 LeaderboardId;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsLeaderboardsContinuationToken     ContinuationToken;                                 // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsLeaderboardsSearch) == 0x000008, "Wrong alignment on FProsLeaderboardsSearch");
static_assert(sizeof(FProsLeaderboardsSearch) == 0x000038, "Wrong size on FProsLeaderboardsSearch");
static_assert(offsetof(FProsLeaderboardsSearch, LeaderboardId) == 0x000000, "Member 'FProsLeaderboardsSearch::LeaderboardId' has a wrong offset!");
static_assert(offsetof(FProsLeaderboardsSearch, ContinuationToken) == 0x000010, "Member 'FProsLeaderboardsSearch::ContinuationToken' has a wrong offset!");

// ScriptStruct Pros.ProsModsView
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FProsModsView final
{
public:
	int32                                         StartFrom;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsView) == 0x000008, "Wrong alignment on FProsModsView");
static_assert(sizeof(FProsModsView) == 0x000018, "Wrong size on FProsModsView");
static_assert(offsetof(FProsModsView, StartFrom) == 0x000000, "Member 'FProsModsView::StartFrom' has a wrong offset!");
static_assert(offsetof(FProsModsView, MaxResults) == 0x000004, "Member 'FProsModsView::MaxResults' has a wrong offset!");

// ScriptStruct Pros.ProsModsProfileUrl
// 0x0038 (0x0038 - 0x0000)
struct FProsModsProfileUrl final
{
public:
	class FString                                 ProfileUrl;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsModsView                          View;                                              // 0x0010(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsProfileUrl) == 0x000008, "Wrong alignment on FProsModsProfileUrl");
static_assert(sizeof(FProsModsProfileUrl) == 0x000038, "Wrong size on FProsModsProfileUrl");
static_assert(offsetof(FProsModsProfileUrl, ProfileUrl) == 0x000000, "Member 'FProsModsProfileUrl::ProfileUrl' has a wrong offset!");
static_assert(offsetof(FProsModsProfileUrl, View) == 0x000010, "Member 'FProsModsProfileUrl::View' has a wrong offset!");

// ScriptStruct Pros.ProsModsList
// 0x0018 (0x0018 - 0x0000)
struct FProsModsList final
{
public:
	TArray<struct FProsModsItem>                  Mods;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         TotalResults;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsList) == 0x000008, "Wrong alignment on FProsModsList");
static_assert(sizeof(FProsModsList) == 0x000018, "Wrong size on FProsModsList");
static_assert(offsetof(FProsModsList, Mods) == 0x000000, "Member 'FProsModsList::Mods' has a wrong offset!");
static_assert(offsetof(FProsModsList, TotalResults) == 0x000010, "Member 'FProsModsList::TotalResults' has a wrong offset!");

// ScriptStruct Pros.ProsModsByUrlResult
// 0x0050 (0x0050 - 0x0000)
struct FProsModsByUrlResult final
{
public:
	struct FProsModsProfileUrl                    ContinuationToken;                                 // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FProsModsList                          Result;                                            // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsByUrlResult) == 0x000008, "Wrong alignment on FProsModsByUrlResult");
static_assert(sizeof(FProsModsByUrlResult) == 0x000050, "Wrong size on FProsModsByUrlResult");
static_assert(offsetof(FProsModsByUrlResult, ContinuationToken) == 0x000000, "Member 'FProsModsByUrlResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FProsModsByUrlResult, Result) == 0x000038, "Member 'FProsModsByUrlResult::Result' has a wrong offset!");

// ScriptStruct Pros.ProsModsComplaint
// 0x0030 (0x0030 - 0x0000)
struct FProsModsComplaint final
{
public:
	class FString                                 ModID;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ComplaintTypeIDs;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsComplaint) == 0x000008, "Wrong alignment on FProsModsComplaint");
static_assert(sizeof(FProsModsComplaint) == 0x000030, "Wrong size on FProsModsComplaint");
static_assert(offsetof(FProsModsComplaint, ModID) == 0x000000, "Member 'FProsModsComplaint::ModID' has a wrong offset!");
static_assert(offsetof(FProsModsComplaint, ComplaintTypeIDs) == 0x000010, "Member 'FProsModsComplaint::ComplaintTypeIDs' has a wrong offset!");

// ScriptStruct Pros.ProsModsTagGroupArray
// 0x0010 (0x0010 - 0x0000)
struct FProsModsTagGroupArray final
{
public:
	TArray<struct FProsModsTagGroup>              TagGroups;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsTagGroupArray) == 0x000008, "Wrong alignment on FProsModsTagGroupArray");
static_assert(sizeof(FProsModsTagGroupArray) == 0x000010, "Wrong size on FProsModsTagGroupArray");
static_assert(offsetof(FProsModsTagGroupArray, TagGroups) == 0x000000, "Member 'FProsModsTagGroupArray::TagGroups' has a wrong offset!");

// ScriptStruct Pros.ProsModsMandatoryFields
// 0x00A0 (0x00A0 - 0x0000)
struct FProsModsMandatoryFields final
{
public:
	class FString                                 ModName;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   FullDescriptions;                                  // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsLocDesc>                   ShortDescriptions;                                 // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FProsModsGalleryImage                  LogoImage;                                         // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsModsGalleryImage>          Images;                                            // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x10];                                      // 0x0090(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsMandatoryFields) == 0x000008, "Wrong alignment on FProsModsMandatoryFields");
static_assert(sizeof(FProsModsMandatoryFields) == 0x0000A0, "Wrong size on FProsModsMandatoryFields");
static_assert(offsetof(FProsModsMandatoryFields, ModName) == 0x000000, "Member 'FProsModsMandatoryFields::ModName' has a wrong offset!");
static_assert(offsetof(FProsModsMandatoryFields, FullDescriptions) == 0x000010, "Member 'FProsModsMandatoryFields::FullDescriptions' has a wrong offset!");
static_assert(offsetof(FProsModsMandatoryFields, ShortDescriptions) == 0x000020, "Member 'FProsModsMandatoryFields::ShortDescriptions' has a wrong offset!");
static_assert(offsetof(FProsModsMandatoryFields, LogoImage) == 0x000030, "Member 'FProsModsMandatoryFields::LogoImage' has a wrong offset!");
static_assert(offsetof(FProsModsMandatoryFields, Images) == 0x000080, "Member 'FProsModsMandatoryFields::Images' has a wrong offset!");

// ScriptStruct Pros.ProsModsProviderWithPlatform
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FProsModsProviderWithPlatform final
{
public:
	EProsProvider                                 Provider;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x16];                                       // 0x0002(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsProviderWithPlatform) == 0x000008, "Wrong alignment on FProsModsProviderWithPlatform");
static_assert(sizeof(FProsModsProviderWithPlatform) == 0x000018, "Wrong size on FProsModsProviderWithPlatform");
static_assert(offsetof(FProsModsProviderWithPlatform, Provider) == 0x000000, "Member 'FProsModsProviderWithPlatform::Provider' has a wrong offset!");
static_assert(offsetof(FProsModsProviderWithPlatform, Platform) == 0x000001, "Member 'FProsModsProviderWithPlatform::Platform' has a wrong offset!");

// ScriptStruct Pros.ProsModsAddVersionAdditionalFields
// 0x0060 (0x0060 - 0x0000)
struct FProsModsAddVersionAdditionalFields final
{
public:
	class FString                                 VersionName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsModsProviderWithPlatform>  SupportedPlatforms;                                // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bAutoPublish;                                      // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReleaseNotes;                                      // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSendToModeration;                                 // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x17];                                      // 0x0049(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsAddVersionAdditionalFields) == 0x000008, "Wrong alignment on FProsModsAddVersionAdditionalFields");
static_assert(sizeof(FProsModsAddVersionAdditionalFields) == 0x000060, "Wrong size on FProsModsAddVersionAdditionalFields");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, VersionName) == 0x000000, "Member 'FProsModsAddVersionAdditionalFields::VersionName' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, SupportedPlatforms) == 0x000010, "Member 'FProsModsAddVersionAdditionalFields::SupportedPlatforms' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, bAutoPublish) == 0x000020, "Member 'FProsModsAddVersionAdditionalFields::bAutoPublish' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, ReleaseNotes) == 0x000028, "Member 'FProsModsAddVersionAdditionalFields::ReleaseNotes' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, Filename) == 0x000038, "Member 'FProsModsAddVersionAdditionalFields::Filename' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersionAdditionalFields, bSendToModeration) == 0x000048, "Member 'FProsModsAddVersionAdditionalFields::bSendToModeration' has a wrong offset!");

// ScriptStruct Pros.ProsModsAddVersion
// 0x0090 (0x0090 - 0x0000)
struct FProsModsAddVersion final
{
public:
	class FString                                 ModID;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContainerId;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsModsAddVersionAdditionalFields    VersionAdditionalFields;                           // 0x0020(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsAddVersion) == 0x000008, "Wrong alignment on FProsModsAddVersion");
static_assert(sizeof(FProsModsAddVersion) == 0x000090, "Wrong size on FProsModsAddVersion");
static_assert(offsetof(FProsModsAddVersion, ModID) == 0x000000, "Member 'FProsModsAddVersion::ModID' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersion, ContainerId) == 0x000010, "Member 'FProsModsAddVersion::ContainerId' has a wrong offset!");
static_assert(offsetof(FProsModsAddVersion, VersionAdditionalFields) == 0x000020, "Member 'FProsModsAddVersion::VersionAdditionalFields' has a wrong offset!");

// ScriptStruct Pros.ProsModsImage
// 0x0028 (0x0028 - 0x0000)
struct FProsModsImage final
{
public:
	TArray<uint8>                                 ImageData;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bThumbnailRequired;                                // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkModImageExtension                      Extension;                                         // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x16];                                      // 0x0012(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsImage) == 0x000008, "Wrong alignment on FProsModsImage");
static_assert(sizeof(FProsModsImage) == 0x000028, "Wrong size on FProsModsImage");
static_assert(offsetof(FProsModsImage, ImageData) == 0x000000, "Member 'FProsModsImage::ImageData' has a wrong offset!");
static_assert(offsetof(FProsModsImage, bThumbnailRequired) == 0x000010, "Member 'FProsModsImage::bThumbnailRequired' has a wrong offset!");
static_assert(offsetof(FProsModsImage, Extension) == 0x000011, "Member 'FProsModsImage::Extension' has a wrong offset!");

// ScriptStruct Pros.ProsModsRateModID
// 0x0028 (0x0028 - 0x0000)
struct FProsModsRateModID final
{
public:
	class FString                                 ModID;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkModLikeStatus                          LikeStatus;                                        // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x17];                                      // 0x0011(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsRateModID) == 0x000008, "Wrong alignment on FProsModsRateModID");
static_assert(sizeof(FProsModsRateModID) == 0x000028, "Wrong size on FProsModsRateModID");
static_assert(offsetof(FProsModsRateModID, ModID) == 0x000000, "Member 'FProsModsRateModID::ModID' has a wrong offset!");
static_assert(offsetof(FProsModsRateModID, LikeStatus) == 0x000010, "Member 'FProsModsRateModID::LikeStatus' has a wrong offset!");

// ScriptStruct Pros.ProsModsIntervalFilter
// 0x0010 (0x0010 - 0x0000)
struct FProsModsIntervalFilter final
{
public:
	int64                                         From;                                              // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         To;                                                // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsIntervalFilter) == 0x000008, "Wrong alignment on FProsModsIntervalFilter");
static_assert(sizeof(FProsModsIntervalFilter) == 0x000010, "Wrong size on FProsModsIntervalFilter");
static_assert(offsetof(FProsModsIntervalFilter, From) == 0x000000, "Member 'FProsModsIntervalFilter::From' has a wrong offset!");
static_assert(offsetof(FProsModsIntervalFilter, To) == 0x000008, "Member 'FProsModsIntervalFilter::To' has a wrong offset!");

// ScriptStruct Pros.ProsModsSorting
// 0x0002 (0x0002 - 0x0000)
struct FProsModsSorting final
{
public:
	EProsdkModSortType                            SortType;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkModSortOrder                           SortOrder;                                         // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsSorting) == 0x000001, "Wrong alignment on FProsModsSorting");
static_assert(sizeof(FProsModsSorting) == 0x000002, "Wrong size on FProsModsSorting");
static_assert(offsetof(FProsModsSorting, SortType) == 0x000000, "Member 'FProsModsSorting::SortType' has a wrong offset!");
static_assert(offsetof(FProsModsSorting, SortOrder) == 0x000001, "Member 'FProsModsSorting::SortOrder' has a wrong offset!");

// ScriptStruct Pros.ProsModsSearchFilter
// 0x00D8 (0x00D8 - 0x0000)
struct FProsModsSearchFilter final
{
public:
	struct FProsModsView                          View;                                              // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FProsModsUserModel                     Author;                                            // 0x0018(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ModName;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ModTypes;                                          // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EProsdkModStatus>                      ModStatuses;                                       // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ModCollectionID;                                   // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubscriptionsOnly;                                // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProsModsIntervalFilter                CreatedAtIntervalFilter;                           // 0x00A0(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsModsIntervalFilter                UpdatedAtIntervalFilter;                           // 0x00B0(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FProsModsSorting                       Sorting;                                           // 0x00C0(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x16];                                      // 0x00C2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsSearchFilter) == 0x000008, "Wrong alignment on FProsModsSearchFilter");
static_assert(sizeof(FProsModsSearchFilter) == 0x0000D8, "Wrong size on FProsModsSearchFilter");
static_assert(offsetof(FProsModsSearchFilter, View) == 0x000000, "Member 'FProsModsSearchFilter::View' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, Author) == 0x000018, "Member 'FProsModsSearchFilter::Author' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, Tags) == 0x000048, "Member 'FProsModsSearchFilter::Tags' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, ModName) == 0x000058, "Member 'FProsModsSearchFilter::ModName' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, ModTypes) == 0x000068, "Member 'FProsModsSearchFilter::ModTypes' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, ModStatuses) == 0x000078, "Member 'FProsModsSearchFilter::ModStatuses' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, ModCollectionID) == 0x000088, "Member 'FProsModsSearchFilter::ModCollectionID' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, bSubscriptionsOnly) == 0x000098, "Member 'FProsModsSearchFilter::bSubscriptionsOnly' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, CreatedAtIntervalFilter) == 0x0000A0, "Member 'FProsModsSearchFilter::CreatedAtIntervalFilter' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, UpdatedAtIntervalFilter) == 0x0000B0, "Member 'FProsModsSearchFilter::UpdatedAtIntervalFilter' has a wrong offset!");
static_assert(offsetof(FProsModsSearchFilter, Sorting) == 0x0000C0, "Member 'FProsModsSearchFilter::Sorting' has a wrong offset!");

// ScriptStruct Pros.ProsModsListResult
// 0x00F0 (0x00F0 - 0x0000)
struct FProsModsListResult final
{
public:
	struct FProsModsSearchFilter                  ContinuationToken;                                 // 0x0000(0x00D8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FProsModsList                          Result;                                            // 0x00D8(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsModsListResult) == 0x000008, "Wrong alignment on FProsModsListResult");
static_assert(sizeof(FProsModsListResult) == 0x0000F0, "Wrong size on FProsModsListResult");
static_assert(offsetof(FProsModsListResult, ContinuationToken) == 0x000000, "Member 'FProsModsListResult::ContinuationToken' has a wrong offset!");
static_assert(offsetof(FProsModsListResult, Result) == 0x0000D8, "Member 'FProsModsListResult::Result' has a wrong offset!");

// ScriptStruct Pros.ProsModsAccountSearchInfo
// 0x0060 (0x0060 - 0x0000)
struct FProsModsAccountSearchInfo final
{
public:
	struct FProsModsUserModel                     Author;                                            // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 AccountId;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogIn;                                             // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsAccountSearchInfo) == 0x000008, "Wrong alignment on FProsModsAccountSearchInfo");
static_assert(sizeof(FProsModsAccountSearchInfo) == 0x000060, "Wrong size on FProsModsAccountSearchInfo");
static_assert(offsetof(FProsModsAccountSearchInfo, Author) == 0x000000, "Member 'FProsModsAccountSearchInfo::Author' has a wrong offset!");
static_assert(offsetof(FProsModsAccountSearchInfo, AccountId) == 0x000030, "Member 'FProsModsAccountSearchInfo::AccountId' has a wrong offset!");
static_assert(offsetof(FProsModsAccountSearchInfo, LogIn) == 0x000040, "Member 'FProsModsAccountSearchInfo::LogIn' has a wrong offset!");

// ScriptStruct Pros.ProsModsHideInfo
// 0x0030 (0x0030 - 0x0000)
struct FProsModsHideInfo final
{
public:
	TArray<class FString>                         ModIDs;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsModsAccountSearchInfo>     ModAuthorAccountInfos;                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsModsHideInfo) == 0x000008, "Wrong alignment on FProsModsHideInfo");
static_assert(sizeof(FProsModsHideInfo) == 0x000030, "Wrong size on FProsModsHideInfo");
static_assert(offsetof(FProsModsHideInfo, ModIDs) == 0x000000, "Member 'FProsModsHideInfo::ModIDs' has a wrong offset!");
static_assert(offsetof(FProsModsHideInfo, ModAuthorAccountInfos) == 0x000010, "Member 'FProsModsHideInfo::ModAuthorAccountInfos' has a wrong offset!");

// ScriptStruct Pros.PluginEndpoint
// 0x0018 (0x0018 - 0x0000)
struct FPluginEndpoint final
{
public:
	class FString                                 Domain;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecured;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPluginEndpoint) == 0x000008, "Wrong alignment on FPluginEndpoint");
static_assert(sizeof(FPluginEndpoint) == 0x000018, "Wrong size on FPluginEndpoint");
static_assert(offsetof(FPluginEndpoint, Domain) == 0x000000, "Member 'FPluginEndpoint::Domain' has a wrong offset!");
static_assert(offsetof(FPluginEndpoint, Port) == 0x000010, "Member 'FPluginEndpoint::Port' has a wrong offset!");
static_assert(offsetof(FPluginEndpoint, bSecured) == 0x000014, "Member 'FPluginEndpoint::bSecured' has a wrong offset!");

// ScriptStruct Pros.PluginVersioned
// 0x0028 (0x0028 - 0x0000)
struct FPluginVersioned final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VersionMajor;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VersionMinor;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPluginVersioned) == 0x000008, "Wrong alignment on FPluginVersioned");
static_assert(sizeof(FPluginVersioned) == 0x000028, "Wrong size on FPluginVersioned");
static_assert(offsetof(FPluginVersioned, Name) == 0x000000, "Member 'FPluginVersioned::Name' has a wrong offset!");
static_assert(offsetof(FPluginVersioned, VersionMajor) == 0x000010, "Member 'FPluginVersioned::VersionMajor' has a wrong offset!");
static_assert(offsetof(FPluginVersioned, VersionMinor) == 0x000014, "Member 'FPluginVersioned::VersionMinor' has a wrong offset!");

// ScriptStruct Pros.ProsConnectionOptions
// 0x0028 (0x0028 - 0x0000)
struct FProsConnectionOptions final
{
public:
	class FString                                 EdsOverrideUrl;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EdsOverridePort;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsConnectionOptions) == 0x000008, "Wrong alignment on FProsConnectionOptions");
static_assert(sizeof(FProsConnectionOptions) == 0x000028, "Wrong size on FProsConnectionOptions");
static_assert(offsetof(FProsConnectionOptions, EdsOverrideUrl) == 0x000000, "Member 'FProsConnectionOptions::EdsOverrideUrl' has a wrong offset!");
static_assert(offsetof(FProsConnectionOptions, EdsOverridePort) == 0x000010, "Member 'FProsConnectionOptions::EdsOverridePort' has a wrong offset!");

// ScriptStruct Pros.ProsMemoryOptions
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FProsMemoryOptions final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsMemoryOptions) == 0x000008, "Wrong alignment on FProsMemoryOptions");
static_assert(sizeof(FProsMemoryOptions) == 0x000018, "Wrong size on FProsMemoryOptions");

// ScriptStruct Pros.ProsInitSettings
// 0x00E8 (0x00E8 - 0x0000)
struct FProsInitSettings final
{
public:
	class FString                                 TitleId;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationName;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ApplicationVersion;                                // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MMakeCompatibleVersion;                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompatibilityUseOldv1Telemetry;                   // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsSdkLogLevel                              LogLevel;                                          // 0x0041(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableFacts;                                     // 0x0042(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableTelemetry;                                 // 0x0043(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         OverrideConnectionTimeout;                         // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProsFileAccessOptions                 FileaccessOptions;                                 // 0x0050(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bDisableInternalThreadCreation;                    // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableXCurl;                                     // 0x0091(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_92[0x56];                                      // 0x0092(0x0056)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProsInitSettings) == 0x000008, "Wrong alignment on FProsInitSettings");
static_assert(sizeof(FProsInitSettings) == 0x0000E8, "Wrong size on FProsInitSettings");
static_assert(offsetof(FProsInitSettings, TitleId) == 0x000000, "Member 'FProsInitSettings::TitleId' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, ApplicationName) == 0x000010, "Member 'FProsInitSettings::ApplicationName' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, ApplicationVersion) == 0x000020, "Member 'FProsInitSettings::ApplicationVersion' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, MMakeCompatibleVersion) == 0x000030, "Member 'FProsInitSettings::MMakeCompatibleVersion' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, bCompatibilityUseOldv1Telemetry) == 0x000040, "Member 'FProsInitSettings::bCompatibilityUseOldv1Telemetry' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, LogLevel) == 0x000041, "Member 'FProsInitSettings::LogLevel' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, bDisableFacts) == 0x000042, "Member 'FProsInitSettings::bDisableFacts' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, bDisableTelemetry) == 0x000043, "Member 'FProsInitSettings::bDisableTelemetry' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, OverrideConnectionTimeout) == 0x000048, "Member 'FProsInitSettings::OverrideConnectionTimeout' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, FileaccessOptions) == 0x000050, "Member 'FProsInitSettings::FileaccessOptions' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, bDisableInternalThreadCreation) == 0x000090, "Member 'FProsInitSettings::bDisableInternalThreadCreation' has a wrong offset!");
static_assert(offsetof(FProsInitSettings, bDisableXCurl) == 0x000091, "Member 'FProsInitSettings::bDisableXCurl' has a wrong offset!");

}

