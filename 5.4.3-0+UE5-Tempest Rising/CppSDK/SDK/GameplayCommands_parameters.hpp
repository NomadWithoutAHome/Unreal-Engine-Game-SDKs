#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayCommands

#include "Basic.hpp"

#include "GameplayCommands_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GameplayCommands.GameplayCommandComponent.CancelCurrentCommand
// 0x0001 (0x0001 - 0x0000)
struct GameplayCommandComponent_CancelCurrentCommand final
{
public:
	bool                                          bClearQueue;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_CancelCurrentCommand) == 0x000001, "Wrong alignment on GameplayCommandComponent_CancelCurrentCommand");
static_assert(sizeof(GameplayCommandComponent_CancelCurrentCommand) == 0x000001, "Wrong size on GameplayCommandComponent_CancelCurrentCommand");
static_assert(offsetof(GameplayCommandComponent_CancelCurrentCommand, bClearQueue) == 0x000000, "Member 'GameplayCommandComponent_CancelCurrentCommand::bClearQueue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.EnqueueCommand
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandComponent_EnqueueCommand final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponent_EnqueueCommand) == 0x000008, "Wrong alignment on GameplayCommandComponent_EnqueueCommand");
static_assert(sizeof(GameplayCommandComponent_EnqueueCommand) == 0x000050, "Wrong size on GameplayCommandComponent_EnqueueCommand");
static_assert(offsetof(GameplayCommandComponent_EnqueueCommand, CommandData) == 0x000000, "Member 'GameplayCommandComponent_EnqueueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponent_EnqueueCommand, ReturnValue) == 0x000048, "Member 'GameplayCommandComponent_EnqueueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.IssueCommand
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandComponent_IssueCommand final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponent_IssueCommand) == 0x000008, "Wrong alignment on GameplayCommandComponent_IssueCommand");
static_assert(sizeof(GameplayCommandComponent_IssueCommand) == 0x000050, "Wrong size on GameplayCommandComponent_IssueCommand");
static_assert(offsetof(GameplayCommandComponent_IssueCommand, CommandData) == 0x000000, "Member 'GameplayCommandComponent_IssueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponent_IssueCommand, ReturnValue) == 0x000048, "Member 'GameplayCommandComponent_IssueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.CanExecuteCommand
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandComponent_CanExecuteCommand final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentCommand;                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerboseLogs;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponent_CanExecuteCommand) == 0x000008, "Wrong alignment on GameplayCommandComponent_CanExecuteCommand");
static_assert(sizeof(GameplayCommandComponent_CanExecuteCommand) == 0x000050, "Wrong size on GameplayCommandComponent_CanExecuteCommand");
static_assert(offsetof(GameplayCommandComponent_CanExecuteCommand, CommandData) == 0x000000, "Member 'GameplayCommandComponent_CanExecuteCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponent_CanExecuteCommand, bIgnoreCurrentCommand) == 0x000048, "Member 'GameplayCommandComponent_CanExecuteCommand::bIgnoreCurrentCommand' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponent_CanExecuteCommand, bVerboseLogs) == 0x000049, "Member 'GameplayCommandComponent_CanExecuteCommand::bVerboseLogs' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponent_CanExecuteCommand, ReturnValue) == 0x00004A, "Member 'GameplayCommandComponent_CanExecuteCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.GetCommandQueue
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandComponent_GetCommandQueue final
{
public:
	TArray<struct FGameplayCommandData>           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_GetCommandQueue) == 0x000008, "Wrong alignment on GameplayCommandComponent_GetCommandQueue");
static_assert(sizeof(GameplayCommandComponent_GetCommandQueue) == 0x000010, "Wrong size on GameplayCommandComponent_GetCommandQueue");
static_assert(offsetof(GameplayCommandComponent_GetCommandQueue, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_GetCommandQueue::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.GetCurrentCommand
// 0x0048 (0x0048 - 0x0000)
struct GameplayCommandComponent_GetCurrentCommand final
{
public:
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_GetCurrentCommand) == 0x000008, "Wrong alignment on GameplayCommandComponent_GetCurrentCommand");
static_assert(sizeof(GameplayCommandComponent_GetCurrentCommand) == 0x000048, "Wrong size on GameplayCommandComponent_GetCurrentCommand");
static_assert(offsetof(GameplayCommandComponent_GetCurrentCommand, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_GetCurrentCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.GetCurrentCommandClass
// 0x0008 (0x0008 - 0x0000)
struct GameplayCommandComponent_GetCurrentCommandClass final
{
public:
	TSubclassOf<class UGameplayCommand>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_GetCurrentCommandClass) == 0x000008, "Wrong alignment on GameplayCommandComponent_GetCurrentCommandClass");
static_assert(sizeof(GameplayCommandComponent_GetCurrentCommandClass) == 0x000008, "Wrong size on GameplayCommandComponent_GetCurrentCommandClass");
static_assert(offsetof(GameplayCommandComponent_GetCurrentCommandClass, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_GetCurrentCommandClass::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.GetCurrentCommandTargetActor
// 0x0008 (0x0008 - 0x0000)
struct GameplayCommandComponent_GetCurrentCommandTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_GetCurrentCommandTargetActor) == 0x000008, "Wrong alignment on GameplayCommandComponent_GetCurrentCommandTargetActor");
static_assert(sizeof(GameplayCommandComponent_GetCurrentCommandTargetActor) == 0x000008, "Wrong size on GameplayCommandComponent_GetCurrentCommandTargetActor");
static_assert(offsetof(GameplayCommandComponent_GetCurrentCommandTargetActor, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_GetCurrentCommandTargetActor::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.GetCurrentCommandTargetLocation
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandComponent_GetCurrentCommandTargetLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_GetCurrentCommandTargetLocation) == 0x000008, "Wrong alignment on GameplayCommandComponent_GetCurrentCommandTargetLocation");
static_assert(sizeof(GameplayCommandComponent_GetCurrentCommandTargetLocation) == 0x000010, "Wrong size on GameplayCommandComponent_GetCurrentCommandTargetLocation");
static_assert(offsetof(GameplayCommandComponent_GetCurrentCommandTargetLocation, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_GetCurrentCommandTargetLocation::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponent.IsExecutingCommand
// 0x0001 (0x0001 - 0x0000)
struct GameplayCommandComponent_IsExecutingCommand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponent_IsExecutingCommand) == 0x000001, "Wrong alignment on GameplayCommandComponent_IsExecutingCommand");
static_assert(sizeof(GameplayCommandComponent_IsExecutingCommand) == 0x000001, "Wrong size on GameplayCommandComponent_IsExecutingCommand");
static_assert(offsetof(GameplayCommandComponent_IsExecutingCommand, ReturnValue) == 0x000000, "Member 'GameplayCommandComponent_IsExecutingCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.CancelCommands
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandComponentV2_CancelCommands final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCancelNonCancelable;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_CancelCommands) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_CancelCommands");
static_assert(sizeof(GameplayCommandComponentV2_CancelCommands) == 0x000010, "Wrong size on GameplayCommandComponentV2_CancelCommands");
static_assert(offsetof(GameplayCommandComponentV2_CancelCommands, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_CancelCommands::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_CancelCommands, bForceCancelNonCancelable) == 0x000008, "Member 'GameplayCommandComponentV2_CancelCommands::bForceCancelNonCancelable' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.ClearCommandQueue
// 0x0008 (0x0008 - 0x0000)
struct GameplayCommandComponentV2_ClearCommandQueue final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponentV2_ClearCommandQueue) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_ClearCommandQueue");
static_assert(sizeof(GameplayCommandComponentV2_ClearCommandQueue) == 0x000008, "Wrong size on GameplayCommandComponentV2_ClearCommandQueue");
static_assert(offsetof(GameplayCommandComponentV2_ClearCommandQueue, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_ClearCommandQueue::CommandActor' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.EnqueueBatchCommand
// 0x0060 (0x0060 - 0x0000)
struct GameplayCommandComponentV2_EnqueueBatchCommand final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_EnqueueBatchCommand) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_EnqueueBatchCommand");
static_assert(sizeof(GameplayCommandComponentV2_EnqueueBatchCommand) == 0x000060, "Wrong size on GameplayCommandComponentV2_EnqueueBatchCommand");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueBatchCommand, CommandActors) == 0x000000, "Member 'GameplayCommandComponentV2_EnqueueBatchCommand::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueBatchCommand, CommandData) == 0x000010, "Member 'GameplayCommandComponentV2_EnqueueBatchCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueBatchCommand, ReturnValue) == 0x000058, "Member 'GameplayCommandComponentV2_EnqueueBatchCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.EnqueueCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandComponentV2_EnqueueCommand final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_EnqueueCommand) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_EnqueueCommand");
static_assert(sizeof(GameplayCommandComponentV2_EnqueueCommand) == 0x000058, "Wrong size on GameplayCommandComponentV2_EnqueueCommand");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueCommand, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_EnqueueCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueCommand, CommandData) == 0x000008, "Member 'GameplayCommandComponentV2_EnqueueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_EnqueueCommand, ReturnValue) == 0x000050, "Member 'GameplayCommandComponentV2_EnqueueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.InsertCommandAfterCurrent
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandComponentV2_InsertCommandAfterCurrent final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_InsertCommandAfterCurrent) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_InsertCommandAfterCurrent");
static_assert(sizeof(GameplayCommandComponentV2_InsertCommandAfterCurrent) == 0x000058, "Wrong size on GameplayCommandComponentV2_InsertCommandAfterCurrent");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandAfterCurrent, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_InsertCommandAfterCurrent::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandAfterCurrent, CommandData) == 0x000008, "Member 'GameplayCommandComponentV2_InsertCommandAfterCurrent::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandAfterCurrent, ReturnValue) == 0x000050, "Member 'GameplayCommandComponentV2_InsertCommandAfterCurrent::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.InsertCommandBeforeCurrent
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandComponentV2_InsertCommandBeforeCurrent final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_InsertCommandBeforeCurrent) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_InsertCommandBeforeCurrent");
static_assert(sizeof(GameplayCommandComponentV2_InsertCommandBeforeCurrent) == 0x000058, "Wrong size on GameplayCommandComponentV2_InsertCommandBeforeCurrent");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandBeforeCurrent, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_InsertCommandBeforeCurrent::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandBeforeCurrent, CommandData) == 0x000008, "Member 'GameplayCommandComponentV2_InsertCommandBeforeCurrent::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_InsertCommandBeforeCurrent, ReturnValue) == 0x000050, "Member 'GameplayCommandComponentV2_InsertCommandBeforeCurrent::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.IssueBatchCommand
// 0x0060 (0x0060 - 0x0000)
struct GameplayCommandComponentV2_IssueBatchCommand final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_IssueBatchCommand) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_IssueBatchCommand");
static_assert(sizeof(GameplayCommandComponentV2_IssueBatchCommand) == 0x000060, "Wrong size on GameplayCommandComponentV2_IssueBatchCommand");
static_assert(offsetof(GameplayCommandComponentV2_IssueBatchCommand, CommandActors) == 0x000000, "Member 'GameplayCommandComponentV2_IssueBatchCommand::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueBatchCommand, CommandData) == 0x000010, "Member 'GameplayCommandComponentV2_IssueBatchCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueBatchCommand, bEnqueueIfCannotExecuteRightAway) == 0x000058, "Member 'GameplayCommandComponentV2_IssueBatchCommand::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueBatchCommand, ReturnValue) == 0x000059, "Member 'GameplayCommandComponentV2_IssueBatchCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.IssueCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandComponentV2_IssueCommand final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_IssueCommand) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_IssueCommand");
static_assert(sizeof(GameplayCommandComponentV2_IssueCommand) == 0x000058, "Wrong size on GameplayCommandComponentV2_IssueCommand");
static_assert(offsetof(GameplayCommandComponentV2_IssueCommand, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_IssueCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueCommand, CommandData) == 0x000008, "Member 'GameplayCommandComponentV2_IssueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueCommand, bEnqueueIfCannotExecuteRightAway) == 0x000050, "Member 'GameplayCommandComponentV2_IssueCommand::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_IssueCommand, ReturnValue) == 0x000051, "Member 'GameplayCommandComponentV2_IssueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.CanExecuteCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandComponentV2_CanExecuteCommand final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentCommand;                             // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVerboseLogs;                                      // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0052(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandComponentV2_CanExecuteCommand) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_CanExecuteCommand");
static_assert(sizeof(GameplayCommandComponentV2_CanExecuteCommand) == 0x000058, "Wrong size on GameplayCommandComponentV2_CanExecuteCommand");
static_assert(offsetof(GameplayCommandComponentV2_CanExecuteCommand, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_CanExecuteCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_CanExecuteCommand, CommandData) == 0x000008, "Member 'GameplayCommandComponentV2_CanExecuteCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_CanExecuteCommand, bIgnoreCurrentCommand) == 0x000050, "Member 'GameplayCommandComponentV2_CanExecuteCommand::bIgnoreCurrentCommand' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_CanExecuteCommand, bVerboseLogs) == 0x000051, "Member 'GameplayCommandComponentV2_CanExecuteCommand::bVerboseLogs' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_CanExecuteCommand, ReturnValue) == 0x000052, "Member 'GameplayCommandComponentV2_CanExecuteCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.GetCurrentCommandClass
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandComponentV2_GetCurrentCommandClass final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponentV2_GetCurrentCommandClass) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_GetCurrentCommandClass");
static_assert(sizeof(GameplayCommandComponentV2_GetCurrentCommandClass) == 0x000010, "Wrong size on GameplayCommandComponentV2_GetCurrentCommandClass");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandClass, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_GetCurrentCommandClass::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandClass, ReturnValue) == 0x000008, "Member 'GameplayCommandComponentV2_GetCurrentCommandClass::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.GetCurrentCommandData
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandComponentV2_GetCurrentCommandData final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponentV2_GetCurrentCommandData) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_GetCurrentCommandData");
static_assert(sizeof(GameplayCommandComponentV2_GetCurrentCommandData) == 0x000050, "Wrong size on GameplayCommandComponentV2_GetCurrentCommandData");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandData, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_GetCurrentCommandData::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandData, ReturnValue) == 0x000008, "Member 'GameplayCommandComponentV2_GetCurrentCommandData::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.GetCurrentCommandTargetActor
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandComponentV2_GetCurrentCommandTargetActor final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponentV2_GetCurrentCommandTargetActor) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_GetCurrentCommandTargetActor");
static_assert(sizeof(GameplayCommandComponentV2_GetCurrentCommandTargetActor) == 0x000010, "Wrong size on GameplayCommandComponentV2_GetCurrentCommandTargetActor");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandTargetActor, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_GetCurrentCommandTargetActor::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandTargetActor, ReturnValue) == 0x000008, "Member 'GameplayCommandComponentV2_GetCurrentCommandTargetActor::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandComponentV2.GetCurrentCommandTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandComponentV2_GetCurrentCommandTargetLocation final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandComponentV2_GetCurrentCommandTargetLocation) == 0x000008, "Wrong alignment on GameplayCommandComponentV2_GetCurrentCommandTargetLocation");
static_assert(sizeof(GameplayCommandComponentV2_GetCurrentCommandTargetLocation) == 0x000018, "Wrong size on GameplayCommandComponentV2_GetCurrentCommandTargetLocation");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandTargetLocation, CommandActor) == 0x000000, "Member 'GameplayCommandComponentV2_GetCurrentCommandTargetLocation::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandComponentV2_GetCurrentCommandTargetLocation, ReturnValue) == 0x000008, "Member 'GameplayCommandComponentV2_GetCurrentCommandTargetLocation::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandCustomRequirementBlueprintBase.K2_MeetRequirement
// 0x00B8 (0x00B8 - 0x0000)
struct GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandErrorTags              OutErrorTags;                                      // 0x0050(0x0060)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement) == 0x000008, "Wrong alignment on GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement");
static_assert(sizeof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement) == 0x0000B8, "Wrong size on GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement");
static_assert(offsetof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement, CommandActor) == 0x000000, "Member 'GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement, CommandData) == 0x000008, "Member 'GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement, OutErrorTags) == 0x000050, "Member 'GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement::OutErrorTags' has a wrong offset!");
static_assert(offsetof(GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement, ReturnValue) == 0x0000B0, "Member 'GameplayCommandCustomRequirementBlueprintBase_K2_MeetRequirement::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CancelCommands
// 0x0008 (0x0008 - 0x0000)
struct GameplayCommandFunctionLibrary_CancelCommands final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_CancelCommands) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CancelCommands");
static_assert(sizeof(GameplayCommandFunctionLibrary_CancelCommands) == 0x000008, "Wrong size on GameplayCommandFunctionLibrary_CancelCommands");
static_assert(offsetof(GameplayCommandFunctionLibrary_CancelCommands, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CancelCommands::CommandActor' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CanExecuteCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandFunctionLibrary_CanExecuteCommand final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCurrentCommand;                             // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_CanExecuteCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CanExecuteCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_CanExecuteCommand) == 0x000058, "Wrong size on GameplayCommandFunctionLibrary_CanExecuteCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_CanExecuteCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CanExecuteCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CanExecuteCommand, CommandData) == 0x000008, "Member 'GameplayCommandFunctionLibrary_CanExecuteCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CanExecuteCommand, bIgnoreCurrentCommand) == 0x000050, "Member 'GameplayCommandFunctionLibrary_CanExecuteCommand::bIgnoreCurrentCommand' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CanExecuteCommand, ReturnValue) == 0x000051, "Member 'GameplayCommandFunctionLibrary_CanExecuteCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.ClearCommandQueue
// 0x0008 (0x0008 - 0x0000)
struct GameplayCommandFunctionLibrary_ClearCommandQueue final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_ClearCommandQueue) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_ClearCommandQueue");
static_assert(sizeof(GameplayCommandFunctionLibrary_ClearCommandQueue) == 0x000008, "Wrong size on GameplayCommandFunctionLibrary_ClearCommandQueue");
static_assert(offsetof(GameplayCommandFunctionLibrary_ClearCommandQueue, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_ClearCommandQueue::CommandActor' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CommandData_GetCommandClass
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandFunctionLibrary_CommandData_GetCommandClass final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_CommandData_GetCommandClass) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CommandData_GetCommandClass");
static_assert(sizeof(GameplayCommandFunctionLibrary_CommandData_GetCommandClass) == 0x000050, "Wrong size on GameplayCommandFunctionLibrary_CommandData_GetCommandClass");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetCommandClass, CommandData) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CommandData_GetCommandClass::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetCommandClass, ReturnValue) == 0x000048, "Member 'GameplayCommandFunctionLibrary_CommandData_GetCommandClass::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CommandData_GetTarget
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandFunctionLibrary_CommandData_GetTarget final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_CommandData_GetTarget) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CommandData_GetTarget");
static_assert(sizeof(GameplayCommandFunctionLibrary_CommandData_GetTarget) == 0x000050, "Wrong size on GameplayCommandFunctionLibrary_CommandData_GetTarget");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetTarget, CommandData) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CommandData_GetTarget::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetTarget, ReturnValue) == 0x000048, "Member 'GameplayCommandFunctionLibrary_CommandData_GetTarget::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CommandData_GetTargetLocation
// 0x0060 (0x0060 - 0x0000)
struct GameplayCommandFunctionLibrary_CommandData_GetTargetLocation final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bHasTargetLocation;                                // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_CommandData_GetTargetLocation) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CommandData_GetTargetLocation");
static_assert(sizeof(GameplayCommandFunctionLibrary_CommandData_GetTargetLocation) == 0x000060, "Wrong size on GameplayCommandFunctionLibrary_CommandData_GetTargetLocation");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetTargetLocation, CommandData) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CommandData_GetTargetLocation::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetTargetLocation, bHasTargetLocation) == 0x000048, "Member 'GameplayCommandFunctionLibrary_CommandData_GetTargetLocation::bHasTargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_GetTargetLocation, ReturnValue) == 0x000050, "Member 'GameplayCommandFunctionLibrary_CommandData_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.CommandData_IsValid
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandFunctionLibrary_CommandData_IsValid final
{
public:
	struct FGameplayCommandData                   CommandData;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_CommandData_IsValid) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_CommandData_IsValid");
static_assert(sizeof(GameplayCommandFunctionLibrary_CommandData_IsValid) == 0x000050, "Wrong size on GameplayCommandFunctionLibrary_CommandData_IsValid");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_IsValid, CommandData) == 0x000000, "Member 'GameplayCommandFunctionLibrary_CommandData_IsValid::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_CommandData_IsValid, ReturnValue) == 0x000048, "Member 'GameplayCommandFunctionLibrary_CommandData_IsValid::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.EnqueueBatchCommand
// 0x0060 (0x0060 - 0x0000)
struct GameplayCommandFunctionLibrary_EnqueueBatchCommand final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_EnqueueBatchCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_EnqueueBatchCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_EnqueueBatchCommand) == 0x000060, "Wrong size on GameplayCommandFunctionLibrary_EnqueueBatchCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommand, CommandActors) == 0x000000, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommand::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommand, CommandData) == 0x000010, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommand, ReturnValue) == 0x000058, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.EnqueueBatchCommandByType
// 0x0040 (0x0040 - 0x0000)
struct GameplayCommandFunctionLibrary_EnqueueBatchCommandByType final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_EnqueueBatchCommandByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType) == 0x000040, "Wrong size on GameplayCommandFunctionLibrary_EnqueueBatchCommandByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType, CommandActors) == 0x000000, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommandByType::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType, CommandType) == 0x000010, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommandByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType, TargetActor) == 0x000018, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommandByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType, TargetLocation) == 0x000020, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommandByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueBatchCommandByType, ReturnValue) == 0x000038, "Member 'GameplayCommandFunctionLibrary_EnqueueBatchCommandByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.EnqueueCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandFunctionLibrary_EnqueueCommand final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_EnqueueCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_EnqueueCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_EnqueueCommand) == 0x000058, "Wrong size on GameplayCommandFunctionLibrary_EnqueueCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_EnqueueCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommand, CommandData) == 0x000008, "Member 'GameplayCommandFunctionLibrary_EnqueueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommand, ReturnValue) == 0x000050, "Member 'GameplayCommandFunctionLibrary_EnqueueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.EnqueueCommandByType
// 0x0038 (0x0038 - 0x0000)
struct GameplayCommandFunctionLibrary_EnqueueCommandByType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_EnqueueCommandByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_EnqueueCommandByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_EnqueueCommandByType) == 0x000038, "Wrong size on GameplayCommandFunctionLibrary_EnqueueCommandByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommandByType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_EnqueueCommandByType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommandByType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_EnqueueCommandByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommandByType, TargetActor) == 0x000010, "Member 'GameplayCommandFunctionLibrary_EnqueueCommandByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommandByType, TargetLocation) == 0x000018, "Member 'GameplayCommandFunctionLibrary_EnqueueCommandByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_EnqueueCommandByType, ReturnValue) == 0x000030, "Member 'GameplayCommandFunctionLibrary_EnqueueCommandByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.GetCurrentCommandClass
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandFunctionLibrary_GetCurrentCommandClass final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_GetCurrentCommandClass) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_GetCurrentCommandClass");
static_assert(sizeof(GameplayCommandFunctionLibrary_GetCurrentCommandClass) == 0x000010, "Wrong size on GameplayCommandFunctionLibrary_GetCurrentCommandClass");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandClass, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandClass::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandClass, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandClass::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.GetCurrentCommandData
// 0x0050 (0x0050 - 0x0000)
struct GameplayCommandFunctionLibrary_GetCurrentCommandData final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_GetCurrentCommandData) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_GetCurrentCommandData");
static_assert(sizeof(GameplayCommandFunctionLibrary_GetCurrentCommandData) == 0x000050, "Wrong size on GameplayCommandFunctionLibrary_GetCurrentCommandData");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandData, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandData::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandData, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandData::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.GetCurrentCommandID
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandFunctionLibrary_GetCurrentCommandID final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandID                     ReturnValue;                                       // 0x0008(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_GetCurrentCommandID) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_GetCurrentCommandID");
static_assert(sizeof(GameplayCommandFunctionLibrary_GetCurrentCommandID) == 0x000010, "Wrong size on GameplayCommandFunctionLibrary_GetCurrentCommandID");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandID, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandID::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandID, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandID::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.GetCurrentCommandTargetActor
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor");
static_assert(sizeof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor) == 0x000010, "Wrong size on GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandTargetActor::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.GetCurrentCommandTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation");
static_assert(sizeof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation) == 0x000018, "Wrong size on GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_GetCurrentCommandTargetLocation::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.InsertCommandAfterCurrent
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandFunctionLibrary_InsertCommandAfterCurrent final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrent) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_InsertCommandAfterCurrent");
static_assert(sizeof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrent) == 0x000058, "Wrong size on GameplayCommandFunctionLibrary_InsertCommandAfterCurrent");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrent, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrent::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrent, CommandData) == 0x000008, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrent::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrent, ReturnValue) == 0x000050, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrent::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.InsertCommandAfterCurrentByType
// 0x0038 (0x0038 - 0x0000)
struct GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType) == 0x000038, "Wrong size on GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType, TargetActor) == 0x000010, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType, TargetLocation) == 0x000018, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType, ReturnValue) == 0x000030, "Member 'GameplayCommandFunctionLibrary_InsertCommandAfterCurrentByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.InsertCommandBeforeCurrent
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent");
static_assert(sizeof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent) == 0x000058, "Wrong size on GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent, CommandData) == 0x000008, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent, ReturnValue) == 0x000050, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrent::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.InsertCommandBeforeCurrentByType
// 0x0038 (0x0038 - 0x0000)
struct GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType) == 0x000038, "Wrong size on GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType, TargetActor) == 0x000010, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType, TargetLocation) == 0x000018, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType, ReturnValue) == 0x000030, "Member 'GameplayCommandFunctionLibrary_InsertCommandBeforeCurrentByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IsCommandSupported
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandFunctionLibrary_IsCommandSupported final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           CommandClass;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IsCommandSupported) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IsCommandSupported");
static_assert(sizeof(GameplayCommandFunctionLibrary_IsCommandSupported) == 0x000018, "Wrong size on GameplayCommandFunctionLibrary_IsCommandSupported");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupported, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IsCommandSupported::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupported, CommandClass) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IsCommandSupported::CommandClass' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupported, ReturnValue) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IsCommandSupported::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IsCommandSupportedByType
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandFunctionLibrary_IsCommandSupportedByType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IsCommandSupportedByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IsCommandSupportedByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_IsCommandSupportedByType) == 0x000018, "Wrong size on GameplayCommandFunctionLibrary_IsCommandSupportedByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupportedByType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IsCommandSupportedByType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupportedByType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IsCommandSupportedByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsCommandSupportedByType, ReturnValue) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IsCommandSupportedByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IsExecutingAnyCommand
// 0x0010 (0x0010 - 0x0000)
struct GameplayCommandFunctionLibrary_IsExecutingAnyCommand final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IsExecutingAnyCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IsExecutingAnyCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_IsExecutingAnyCommand) == 0x000010, "Wrong size on GameplayCommandFunctionLibrary_IsExecutingAnyCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutingAnyCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IsExecutingAnyCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutingAnyCommand, ReturnValue) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IsExecutingAnyCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IsExecutingCommandOfType
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandFunctionLibrary_IsExecutingCommandOfType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IsExecutingCommandOfType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IsExecutingCommandOfType");
static_assert(sizeof(GameplayCommandFunctionLibrary_IsExecutingCommandOfType) == 0x000018, "Wrong size on GameplayCommandFunctionLibrary_IsExecutingCommandOfType");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutingCommandOfType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IsExecutingCommandOfType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutingCommandOfType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IsExecutingCommandOfType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutingCommandOfType, ReturnValue) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IsExecutingCommandOfType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IsExecutionCommand
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandFunctionLibrary_IsExecutionCommand final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           CommandClass;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IsExecutionCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IsExecutionCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_IsExecutionCommand) == 0x000018, "Wrong size on GameplayCommandFunctionLibrary_IsExecutionCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutionCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IsExecutionCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutionCommand, CommandClass) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IsExecutionCommand::CommandClass' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IsExecutionCommand, ReturnValue) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IsExecutionCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IssueBatchCommand
// 0x0060 (0x0060 - 0x0000)
struct GameplayCommandFunctionLibrary_IssueBatchCommand final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0010(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0059(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IssueBatchCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IssueBatchCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_IssueBatchCommand) == 0x000060, "Wrong size on GameplayCommandFunctionLibrary_IssueBatchCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommand, CommandActors) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommand::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommand, CommandData) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommand, bEnqueueIfCannotExecuteRightAway) == 0x000058, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommand::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommand, ReturnValue) == 0x000059, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IssueBatchCommandByType
// 0x0040 (0x0040 - 0x0000)
struct GameplayCommandFunctionLibrary_IssueBatchCommandByType final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IssueBatchCommandByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IssueBatchCommandByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_IssueBatchCommandByType) == 0x000040, "Wrong size on GameplayCommandFunctionLibrary_IssueBatchCommandByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, CommandActors) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::CommandActors' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, CommandType) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, TargetActor) == 0x000018, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, TargetLocation) == 0x000020, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, bEnqueueIfCannotExecuteRightAway) == 0x000038, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueBatchCommandByType, ReturnValue) == 0x000039, "Member 'GameplayCommandFunctionLibrary_IssueBatchCommandByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IssueCommand
// 0x0058 (0x0058 - 0x0000)
struct GameplayCommandFunctionLibrary_IssueCommand final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IssueCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IssueCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_IssueCommand) == 0x000058, "Wrong size on GameplayCommandFunctionLibrary_IssueCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IssueCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommand, CommandData) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IssueCommand::CommandData' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommand, bEnqueueIfCannotExecuteRightAway) == 0x000050, "Member 'GameplayCommandFunctionLibrary_IssueCommand::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommand, ReturnValue) == 0x000051, "Member 'GameplayCommandFunctionLibrary_IssueCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IssueCommandByType
// 0x0038 (0x0038 - 0x0000)
struct GameplayCommandFunctionLibrary_IssueCommandByType final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommandType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IssueCommandByType) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IssueCommandByType");
static_assert(sizeof(GameplayCommandFunctionLibrary_IssueCommandByType) == 0x000038, "Wrong size on GameplayCommandFunctionLibrary_IssueCommandByType");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, CommandType) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::CommandType' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, TargetActor) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, TargetLocation) == 0x000018, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, bEnqueueIfCannotExecuteRightAway) == 0x000030, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueCommandByType, ReturnValue) == 0x000031, "Member 'GameplayCommandFunctionLibrary_IssueCommandByType::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandFunctionLibrary.IssueContextualCommand
// 0x0030 (0x0030 - 0x0000)
struct GameplayCommandFunctionLibrary_IssueContextualCommand final
{
public:
	class AActor*                                 CommandActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnqueueIfCannotExecuteRightAway;                  // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandFunctionLibrary_IssueContextualCommand) == 0x000008, "Wrong alignment on GameplayCommandFunctionLibrary_IssueContextualCommand");
static_assert(sizeof(GameplayCommandFunctionLibrary_IssueContextualCommand) == 0x000030, "Wrong size on GameplayCommandFunctionLibrary_IssueContextualCommand");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueContextualCommand, CommandActor) == 0x000000, "Member 'GameplayCommandFunctionLibrary_IssueContextualCommand::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueContextualCommand, TargetActor) == 0x000008, "Member 'GameplayCommandFunctionLibrary_IssueContextualCommand::TargetActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueContextualCommand, TargetLocation) == 0x000010, "Member 'GameplayCommandFunctionLibrary_IssueContextualCommand::TargetLocation' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueContextualCommand, bEnqueueIfCannotExecuteRightAway) == 0x000028, "Member 'GameplayCommandFunctionLibrary_IssueContextualCommand::bEnqueueIfCannotExecuteRightAway' has a wrong offset!");
static_assert(offsetof(GameplayCommandFunctionLibrary_IssueContextualCommand, ReturnValue) == 0x000029, "Member 'GameplayCommandFunctionLibrary_IssueContextualCommand::ReturnValue' has a wrong offset!");

// Function GameplayCommands.GameplayCommandPreviewActor.OnActiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GameplayCommandPreviewActor_OnActiveStateChanged final
{
public:
	bool                                          bNewActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayCommandPreviewActor_OnActiveStateChanged) == 0x000001, "Wrong alignment on GameplayCommandPreviewActor_OnActiveStateChanged");
static_assert(sizeof(GameplayCommandPreviewActor_OnActiveStateChanged) == 0x000001, "Wrong size on GameplayCommandPreviewActor_OnActiveStateChanged");
static_assert(offsetof(GameplayCommandPreviewActor_OnActiveStateChanged, bNewActive) == 0x000000, "Member 'GameplayCommandPreviewActor_OnActiveStateChanged::bNewActive' has a wrong offset!");

// Function GameplayCommands.GameplayCommandValueCalculation.CalculateValue
// 0x0018 (0x0018 - 0x0000)
struct GameplayCommandValueCalculation_CalculateValue final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UGameplayCommand*                 Command;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayCommandValueCalculation_CalculateValue) == 0x000008, "Wrong alignment on GameplayCommandValueCalculation_CalculateValue");
static_assert(sizeof(GameplayCommandValueCalculation_CalculateValue) == 0x000018, "Wrong size on GameplayCommandValueCalculation_CalculateValue");
static_assert(offsetof(GameplayCommandValueCalculation_CalculateValue, CommandActor) == 0x000000, "Member 'GameplayCommandValueCalculation_CalculateValue::CommandActor' has a wrong offset!");
static_assert(offsetof(GameplayCommandValueCalculation_CalculateValue, Command) == 0x000008, "Member 'GameplayCommandValueCalculation_CalculateValue::Command' has a wrong offset!");
static_assert(offsetof(GameplayCommandValueCalculation_CalculateValue, ReturnValue) == 0x000010, "Member 'GameplayCommandValueCalculation_CalculateValue::ReturnValue' has a wrong offset!");

}

