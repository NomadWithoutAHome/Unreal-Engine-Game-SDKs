#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleWreck_MCVNukeVehicle

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleWreck_MCVNukeVehicle.BP_VehicleWreck_MCVNukeVehicle_C
// 0x0120 (0x04C0 - 0x03A0)
class ABP_VehicleWreck_MCVNukeVehicle_C final : public ATedVehicleWreckActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_WreckDYNNukeVehicle_06;                         // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckDYNNukeVehicle_05;                         // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSFX;                                           // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_FireAircraftDestruction_1;                      // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_FireAircraftDestruction_3;                      // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_FireAircraftDestruction_2;                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckDYNNukeVehicle_04;                         // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckDYNNukeVehicle_03;                         // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckDYNNukeVehicle_02;                         // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_SmokeVehicleDestroyed;                          // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransformCache;                               // 0x0400(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityVectorLength;                              // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityToTransfer;                                // 0x0468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitBaseMesh;                                       // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPart1;                                          // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxBaseVelocityVectorLength;                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart1;                                       // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart2;                                       // 0x0491(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart3;                                       // 0x0492(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_493[0x5];                                      // 0x0493(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshLocationCache;                                 // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPart2;                                          // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPart3;                                          // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart4;                                       // 0x04B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart5;                                       // 0x04B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_VehicleWreck_MCVNukeVehicle_SM_WreckDYNNukeVehicle_04_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_VehicleWreck_MCVNukeVehicle_SM_WreckDYNNukeVehicle_05_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_VehicleWreck_MCVNukeVehicle_SM_WreckDYNNukeVehicle_06_K2Node_ComponentBoundEvent_4_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_VehicleWreck_MediumTank_Mesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_VehicleWreck_MCVNukeVehicle(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleWreck_MCVNukeVehicle_C">();
	}
	static class ABP_VehicleWreck_MCVNukeVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleWreck_MCVNukeVehicle_C>();
	}
};
static_assert(alignof(ABP_VehicleWreck_MCVNukeVehicle_C) == 0x000010, "Wrong alignment on ABP_VehicleWreck_MCVNukeVehicle_C");
static_assert(sizeof(ABP_VehicleWreck_MCVNukeVehicle_C) == 0x0004C0, "Wrong size on ABP_VehicleWreck_MCVNukeVehicle_C");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, UberGraphFrame) == 0x0003A0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, SM_WreckDYNNukeVehicle_06) == 0x0003A8, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::SM_WreckDYNNukeVehicle_06' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, SM_WreckDYNNukeVehicle_05) == 0x0003B0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::SM_WreckDYNNukeVehicle_05' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, FireSFX) == 0x0003B8, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::FireSFX' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, PS_FireAircraftDestruction_1) == 0x0003C0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::PS_FireAircraftDestruction_1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, PS_FireAircraftDestruction_3) == 0x0003C8, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::PS_FireAircraftDestruction_3' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, PS_FireAircraftDestruction_2) == 0x0003D0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::PS_FireAircraftDestruction_2' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, SM_WreckDYNNukeVehicle_04) == 0x0003D8, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::SM_WreckDYNNukeVehicle_04' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, SM_WreckDYNNukeVehicle_03) == 0x0003E0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::SM_WreckDYNNukeVehicle_03' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, SM_WreckDYNNukeVehicle_02) == 0x0003E8, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::SM_WreckDYNNukeVehicle_02' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, PS_SmokeVehicleDestroyed) == 0x0003F0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::PS_SmokeVehicleDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, ActorTransformCache) == 0x000400, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::ActorTransformCache' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, VelocityVectorLength) == 0x000460, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::VelocityVectorLength' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, VelocityToTransfer) == 0x000468, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::VelocityToTransfer' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, HitBaseMesh) == 0x000480, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::HitBaseMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, HitPart1) == 0x000481, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::HitPart1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, MaxBaseVelocityVectorLength) == 0x000488, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::MaxBaseVelocityVectorLength' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, BrokenPart1) == 0x000490, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::BrokenPart1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, BrokenPart2) == 0x000491, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::BrokenPart2' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, BrokenPart3) == 0x000492, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::BrokenPart3' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, MeshLocationCache) == 0x000498, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::MeshLocationCache' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, HitPart2) == 0x0004B0, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::HitPart2' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, HitPart3) == 0x0004B1, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::HitPart3' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, BrokenPart4) == 0x0004B2, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::BrokenPart4' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_MCVNukeVehicle_C, BrokenPart5) == 0x0004B3, "Member 'ABP_VehicleWreck_MCVNukeVehicle_C::BrokenPart5' has a wrong offset!");

}

