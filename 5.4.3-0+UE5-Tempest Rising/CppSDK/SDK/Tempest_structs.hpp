#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tempest

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FogOfWar_structs.hpp"
#include "SmartDataAsset_structs.hpp"
#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "NubCore_structs.hpp"
#include "Engine_structs.hpp"
#include "NetCore_structs.hpp"
#include "GameplayCommands_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AIModule_structs.hpp"
#include "UMG_structs.hpp"
#include "NubECS_structs.hpp"
#include "StructUtils_structs.hpp"
#include "RTSColor_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "NavGrid_structs.hpp"
#include "NubAudio_structs.hpp"


namespace SDK
{

// Enum Tempest.EClientLeaveLobbyReason
// NumValues: 0x0004
enum class EClientLeaveLobbyReason : uint8
{
	Leave                                    = 0,
	Kicked                                   = 1,
	JoinGame                                 = 2,
	EClientLeaveLobbyReason_MAX              = 3,
};

// Enum Tempest.ETedConnectionRejectReason
// NumValues: 0x0005
enum class ETedConnectionRejectReason : uint8
{
	Invalid                                  = 0,
	FullLobby                                = 1,
	InvalidPassword                          = 2,
	Last                                     = 3,
	ETedConnectionRejectReason_MAX           = 4,
};

// Enum Tempest.ETedSessionMemberSettingKey
// NumValues: 0x000C
enum class ETedSessionMemberSettingKey : uint8
{
	Invalid                                  = 0,
	PlayerID                                 = 1,
	TeamID                                   = 2,
	Faction                                  = 3,
	Color                                    = 4,
	ReadyUp                                  = 5,
	RankedRow                                = 6,
	BotDifficulty                            = 7,
	SpectatorOnly                            = 8,
	SkinOverrides                            = 9,
	Last                                     = 10,
	ETedSessionMemberSettingKey_MAX          = 11,
};

// Enum Tempest.ETedSessionSettingKey
// NumValues: 0x001D
enum class ETedSessionSettingKey : uint8
{
	Invalid                                  = 0,
	ServerType                               = 1,
	MatchID                                  = 2,
	Host                                     = 3,
	Map                                      = 4,
	Port                                     = 5,
	LobbyCreationFinished                    = 6,
	ConnectedClients                         = 7,
	MatchStarted                             = 8,
	MembersData                              = 9,
	BuildVersion                             = 10,
	TargetVersion                            = 11,
	LocalDedicatedGuid                       = 12,
	StartingCredits                          = 13,
	StartingArmy                             = 14,
	MatchType                                = 15,
	ExpectedHumans                           = 16,
	ExpectedBots                             = 17,
	AllowBotTakingOver                       = 18,
	GameDifficultyOverride                   = 19,
	RankedTeamType                           = 20,
	PostDisconnectBehavior                   = 21,
	ExpectedSpectators                       = 22,
	Password                                 = 23,
	LobbyName                                = 24,
	ConnectedSpectators                      = 25,
	AllowSpectatorsSeeAll                    = 26,
	Last                                     = 27,
	ETedSessionSettingKey_MAX                = 28,
};

// Enum Tempest.ETedContentSlotAction
// NumValues: 0x0006
enum class ETedContentSlotAction : uint8
{
	Click_Primary                            = 0,
	Click_Secondary                          = 1,
	DoubleClick_Primary                      = 2,
	DoubleClick_Secondary                    = 3,
	Last                                     = 4,
	ETedContentSlotAction_MAX                = 5,
};

// Enum Tempest.ETedContentSlotState
// NumValues: 0x000E
enum class ETedContentSlotState : uint8
{
	Disabled                                 = 0,
	Hovered                                  = 1,
	Pressed                                  = 2,
	Selected                                 = 3,
	Empty                                    = 4,
	Unavailable                              = 5,
	Active                                   = 6,
	Collapsed                                = 7,
	Hidden                                   = 8,
	Misc_01                                  = 9,
	Misc_02                                  = 10,
	Misc_03                                  = 11,
	Last                                     = 12,
	ETedContentSlotState_MAX                 = 13,
};

// Enum Tempest.EAIMissionState
// NumValues: 0x0007
enum class EAIMissionState : uint8
{
	Inactive                                 = 0,
	Preparing                                = 1,
	Ready                                    = 2,
	InProgress                               = 3,
	Success                                  = 4,
	Fail                                     = 5,
	EAIMissionState_MAX                      = 6,
};

// Enum Tempest.ETedTeamID
// NumValues: 0x000F
enum class ETedTeamID : uint8
{
	Team_1                                   = 0,
	Team_2                                   = 1,
	Team_3                                   = 2,
	Team_4                                   = 3,
	Team_5                                   = 4,
	Team_6                                   = 5,
	Team_7                                   = 6,
	Team_8                                   = 7,
	Neutral                                  = 8,
	Hostile                                  = 9,
	Spectator                                = 14,
	None                                     = 255,
	First                                    = 0,
	Last                                     = 9,
	ETedTeamID_MAX                           = 256,
};

// Enum Tempest.EChatMessageSender
// NumValues: 0x0009
enum class EChatMessageSender : uint8
{
	System                                   = 0,
	Player                                   = 1,
	DefeatedPlayer                           = 2,
	Spectator                                = 3,
	VoiceOver                                = 4,
	Marketing                                = 5,
	PartyToLobby                             = 6,
	Other                                    = 7,
	EChatMessageSender_MAX                   = 8,
};

// Enum Tempest.EChatMessageDestination
// NumValues: 0x0005
enum class EChatMessageDestination : uint8
{
	Default                                  = 0,
	Team                                     = 1,
	Whisper                                  = 2,
	Hidden                                   = 3,
	EChatMessageDestination_MAX              = 4,
};

// Enum Tempest.EEncyclopediaAssetStatus
// NumValues: 0x0004
enum class EEncyclopediaAssetStatus : uint8
{
	Locked                                   = 0,
	UnlockedUnseen                           = 1,
	UnlockedSeen                             = 2,
	EEncyclopediaAssetStatus_MAX             = 3,
};

// Enum Tempest.ETedDialogueLineType
// NumValues: 0x0004
enum class ETedDialogueLineType : uint8
{
	Intro                                    = 0,
	Default                                  = 1,
	Finish                                   = 2,
	ETedDialogueLineType_MAX                 = 3,
};

// Enum Tempest.ETedDialogueLineEndReason
// NumValues: 0x0003
enum class ETedDialogueLineEndReason : uint8
{
	Finished                                 = 0,
	Skipped                                  = 1,
	ETedDialogueLineEndReason_MAX            = 2,
};

// Enum Tempest.ETedPlayerLockedTechMode
// NumValues: 0x0005
enum class ETedPlayerLockedTechMode : uint8
{
	UnlockAll                                = 0,
	UnlockList                               = 1,
	LockAll                                  = 2,
	LockList                                 = 3,
	ETedPlayerLockedTechMode_MAX             = 4,
};

// Enum Tempest.ETedVerticalAnchor
// NumValues: 0x0004
enum class ETedVerticalAnchor : uint8
{
	Top                                      = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	ETedVerticalAnchor_MAX                   = 3,
};

// Enum Tempest.ETedHorizontalAnchor
// NumValues: 0x0004
enum class ETedHorizontalAnchor : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	ETedHorizontalAnchor_MAX                 = 3,
};

// Enum Tempest.ETedChatPartyStartPosition
// NumValues: 0x0003
enum class ETedChatPartyStartPosition : uint8
{
	UpperLeft                                = 0,
	LowerRight                               = 1,
	ETedChatPartyStartPosition_MAX           = 2,
};

// Enum Tempest.ECharacterLimitType
// NumValues: 0x0004
enum class ECharacterLimitType : uint8
{
	NoLimit                                  = 0,
	CampaignName                             = 1,
	ChatBox                                  = 2,
	ECharacterLimitType_MAX                  = 3,
};

// Enum Tempest.ESuffixType
// NumValues: 0x0003
enum class ESuffixType : uint8
{
	NoSuffix                                 = 0,
	Kilo                                     = 1,
	ESuffixType_MAX                          = 2,
};

// Enum Tempest.ETedContentPanelRegistration
// NumValues: 0x0003
enum class ETedContentPanelRegistration : uint8
{
	New                                      = 0,
	Next                                     = 1,
	ETedContentPanelRegistration_MAX         = 2,
};

// Enum Tempest.ETedRankedTeam
// NumValues: 0x0005
enum class ETedRankedTeam : uint8
{
	Team_1v1                                 = 0,
	Team_2v2                                 = 1,
	Team_Custom                              = 2,
	Last                                     = 3,
	ETedRankedTeam_MAX                       = 4,
};

// Enum Tempest.ETedServerType
// NumValues: 0x0008
enum class ETedServerType : uint8
{
	Ranked                                   = 0,
	Unranked                                 = 1,
	Custom                                   = 2,
	Lan                                      = 3,
	Skirmish                                 = 4,
	None                                     = 5,
	Last                                     = 6,
	ETedServerType_MAX                       = 7,
};

// Enum Tempest.ETedRankedFaction
// NumValues: 0x0006
enum class ETedRankedFaction : uint8
{
	GDF                                      = 0,
	DYN                                      = 1,
	Veti                                     = 2,
	Random                                   = 3,
	Last                                     = 4,
	ETedRankedFaction_MAX                    = 5,
};

// Enum Tempest.ETedPreOrderPlayerAvatar
// NumValues: 0x0004
enum class ETedPreOrderPlayerAvatar : uint8
{
	DefaultAvatar                            = 0,
	Avatar1                                  = 1,
	Avatar2                                  = 2,
	Max                                      = 3,
};

// Enum Tempest.ETedFaction
// NumValues: 0x0005
enum class ETedFaction : uint8
{
	GDF                                      = 0,
	DYN                                      = 1,
	Veti                                     = 2,
	Civilian                                 = 3,
	ETedFaction_MAX                          = 4,
};

// Enum Tempest.ETedPlayerID
// NumValues: 0x000F
enum class ETedPlayerID : uint8
{
	Player_1                                 = 0,
	Player_2                                 = 1,
	Player_3                                 = 2,
	Player_4                                 = 3,
	Player_5                                 = 4,
	Player_6                                 = 5,
	Player_7                                 = 6,
	Player_8                                 = 7,
	Neutral                                  = 8,
	Hostile                                  = 9,
	Max                                      = 10,
	Spectator                                = 14,
	None                                     = 255,
	First                                    = 0,
	Last                                     = 9,
};

// Enum Tempest.ETedVeterancyLevel
// NumValues: 0x0007
enum class ETedVeterancyLevel : uint8
{
	None                                     = 0,
	Hardened                                 = 1,
	Veteran                                  = 2,
	Elite                                    = 3,
	Max                                      = 4,
	First                                    = 0,
	Last                                     = 3,
};

// Enum Tempest.ETedPawnUpgradeType
// NumValues: 0x0004
enum class ETedPawnUpgradeType : uint8
{
	None                                     = 0,
	Upgrade1                                 = 1,
	Upgrade2                                 = 2,
	Max                                      = 3,
};

// Enum Tempest.ETedPawnUpgradeTypeFlags
// NumValues: 0x0005
enum class ETedPawnUpgradeTypeFlags : uint8
{
	None                                     = 0,
	Upgrade1                                 = 1,
	Upgrade2                                 = 2,
	BothUpgrades                             = 3,
	ETedPawnUpgradeTypeFlags_MAX             = 4,
};

// Enum Tempest.ETedPawnSkinIndex
// NumValues: 0x0003
enum class ETedPawnSkinIndex : uint8
{
	Default                                  = 0,
	PreOrder                                 = 1,
	Max                                      = 2,
};

// Enum Tempest.ETedStatusType
// NumValues: 0x0007
enum class ETedStatusType : uint8
{
	None                                     = 0,
	Buff                                     = 1,
	Debuff                                   = 2,
	Intel                                    = 3,
	Credit                                   = 4,
	Veterancy                                = 5,
	ETedStatusType_MAX                       = 6,
};

// Enum Tempest.EFoliageChannel
// NumValues: 0x0004
enum class EFoliageChannel : uint8
{
	None                                     = 0,
	Default                                  = 1,
	SmallFoliage                             = 2,
	Max                                      = 3,
};

// Enum Tempest.EAIMissionCaptureStructureTargetType
// NumValues: 0x0004
enum class EAIMissionCaptureStructureTargetType : uint8
{
	Explicit                                 = 0,
	DefinitionID                             = 1,
	ActorTags                                = 2,
	EAIMissionCaptureStructureTargetType_MAX = 3,
};

// Enum Tempest.EAIMissionConvoyMode
// NumValues: 0x0005
enum class EAIMissionConvoyMode : uint8
{
	PingPong                                 = 0,
	PingPongReversed                         = 1,
	Loop                                     = 2,
	LoopReversed                             = 3,
	EAIMissionConvoyMode_MAX                 = 4,
};

// Enum Tempest.EAIMissionPatrolMode
// NumValues: 0x0009
enum class EAIMissionPatrolMode : uint8
{
	PingPong                                 = 0,
	PingPongReversed                         = 1,
	Loop                                     = 2,
	LoopReversed                             = 3,
	Linear                                   = 4,
	LinearReversed                           = 5,
	Random                                   = 6,
	RandomUnique                             = 7,
	EAIMissionPatrolMode_MAX                 = 8,
};

// Enum Tempest.EAIMissionRebuildStructureType
// NumValues: 0x0004
enum class EAIMissionRebuildStructureType : uint8
{
	Normal                                   = 0,
	Turret                                   = 1,
	Wall                                     = 2,
	EAIMissionRebuildStructureType_MAX       = 3,
};

// Enum Tempest.EStructureSelectResult
// NumValues: 0x0006
enum class EStructureSelectResult : uint8
{
	ESR_Postpone                             = 0,
	ESR_NoPathFound                          = 1,
	ESR_Success                              = 2,
	ESR_OutOfStructures                      = 3,
	ESR_NoStructuresFound                    = 4,
	ESR_MAX                                  = 5,
};

// Enum Tempest.EAITargetActorVariantType
// NumValues: 0x0005
enum class EAITargetActorVariantType : uint8
{
	Invalid                                  = 0,
	WeakPtr                                  = 1,
	SoftPtr                                  = 2,
	Tagged                                   = 3,
	EAITargetActorVariantType_MAX            = 4,
};

// Enum Tempest.EPopupAction
// NumValues: 0x0005
enum class EPopupAction : uint8
{
	CreateCampaign                           = 0,
	RenameCampaign                           = 1,
	DeleteCampaign                           = 2,
	DeleteSave                               = 3,
	EPopupAction_MAX                         = 4,
};

// Enum Tempest.ESquishAxis
// NumValues: 0x0006
enum class ESquishAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	X_Neg                                    = 2,
	Y_Neg                                    = 3,
	Z                                        = 4,
	ESquishAxis_MAX                          = 5,
};

// Enum Tempest.EAggregationMethod
// NumValues: 0x0006
enum class EAggregationMethod : uint8
{
	Multiply                                 = 0,
	Add                                      = 1,
	UseHighest                               = 2,
	UseLowest                                = 3,
	Mean                                     = 4,
	EAggregationMethod_MAX                   = 5,
};

// Enum Tempest.ESkirmishEntityType
// NumValues: 0x0007
enum class ESkirmishEntityType : uint8
{
	Infantry                                 = 0,
	Vehicle                                  = 1,
	Air                                      = 2,
	Structure                                = 3,
	Drone                                    = 4,
	Num                                      = 5,
	ESkirmishEntityType_MAX                  = 6,
};

// Enum Tempest.ESkirmishMicro
// NumValues: 0x0010
enum class ESkirmishMicro : uint8
{
	None                                     = 0,
	Avoid                                    = 1,
	Crush                                    = 2,
	Capture                                  = 3,
	Conform                                  = 4,
	Follow                                   = 5,
	Ability                                  = 6,
	Deploy                                   = 7,
	Undeploy                                 = 8,
	Enter                                    = 9,
	Kiting                                   = 10,
	Attack                                   = 11,
	Fallback                                 = 12,
	Transport                                = 13,
	Num                                      = 14,
	ESkirmishMicro_MAX                       = 15,
};

// Enum Tempest.ETedAbilityRangeType
// NumValues: 0x0005
enum class ETedAbilityRangeType : uint8
{
	None                                     = 0,
	AttackRange                              = 1,
	AbilityPayload                           = 2,
	NumericValue                             = 3,
	ETedAbilityRangeType_MAX                 = 4,
};

// Enum Tempest.ETedAbilityEvent
// NumValues: 0x0006
enum class ETedAbilityEvent : uint8
{
	None                                     = 0,
	OnAbilityActivate                        = 1,
	OnAbilityEnd                             = 2,
	OnAbilityEndWithSuccess                  = 3,
	OnGameplayEvent                          = 4,
	ETedAbilityEvent_MAX                     = 5,
};

// Enum Tempest.EMontageAbilityEndRule
// NumValues: 0x0004
enum class EMontageAbilityEndRule : uint8
{
	None                                     = 0,
	EndAbilityOnMontageBlendOut              = 1,
	EndAbilityOnMontageEnd                   = 2,
	EMontageAbilityEndRule_MAX               = 3,
};

// Enum Tempest.EMontageAbilityType
// NumValues: 0x0003
enum class EMontageAbilityType : uint8
{
	UsingExplicitAnimMontage                 = 0,
	UsingAnimMontageSet                      = 1,
	EMontageAbilityType_MAX                  = 2,
};

// Enum Tempest.ECG_TriggerType
// NumValues: 0x0003
enum class ECG_TriggerType : uint8
{
	ECG_BeginMatch                           = 0,
	ECG_EndMatch                             = 1,
	ECG_MAX                                  = 2,
};

// Enum Tempest.ECG_MatchState
// NumValues: 0x0004
enum class ECG_MatchState : uint8
{
	ECG_Any                                  = 0,
	ECG_Victory                              = 1,
	ECG_Failure                              = 2,
	ECG_MAX                                  = 3,
};

// Enum Tempest.ECG_GameModeType
// NumValues: 0x0004
enum class ECG_GameModeType : uint8
{
	GM_Any                                   = 0,
	GM_Skirmish                              = 1,
	GM_Multiplayer                           = 2,
	GM_MAX                                   = 3,
};

// Enum Tempest.EOnTedCommandExecutedRule
// NumValues: 0x0006
enum class EOnTedCommandExecutedRule : uint8
{
	None                                     = 0,
	OnExecute                                = 1,
	OnFinishedSuccessfully                   = 2,
	OnFinished                               = 3,
	OnFailed                                 = 4,
	EOnTedCommandExecutedRule_MAX            = 5,
};

// Enum Tempest.EOnTedCommandExecutedResult
// NumValues: 0x0005
enum class EOnTedCommandExecutedResult : uint8
{
	None                                     = 0,
	Succeeded                                = 1,
	Failed                                   = 2,
	Canceled                                 = 3,
	EOnTedCommandExecutedResult_MAX          = 4,
};

// Enum Tempest.ETedActorTagEventAction
// NumValues: 0x0003
enum class ETedActorTagEventAction : uint8
{
	Register                                 = 0,
	Unregister                               = 1,
	ETedActorTagEventAction_MAX              = 2,
};

// Enum Tempest.ETedActorTagEvent
// NumValues: 0x0003
enum class ETedActorTagEvent : uint8
{
	Add                                      = 0,
	Remove                                   = 1,
	ETedActorTagEvent_MAX                    = 2,
};

// Enum Tempest.ETedAircraftFlightState
// NumValues: 0x0006
enum class ETedAircraftFlightState : uint8
{
	Airborne                                 = 0,
	Landed                                   = 1,
	Landing                                  = 2,
	TakingOff                                = 3,
	None                                     = 4,
	ETedAircraftFlightState_MAX              = 5,
};

// Enum Tempest.ETedAnnouncementMarkerPosition
// NumValues: 0x0003
enum class ETedAnnouncementMarkerPosition : uint8
{
	ActorLocation                            = 0,
	AttachActor                              = 1,
	ETedAnnouncementMarkerPosition_MAX       = 2,
};

// Enum Tempest.ETedCommandRangeType
// NumValues: 0x0006
enum class ETedCommandRangeType : uint8
{
	AttackRange                              = 0,
	GuardRange                               = 1,
	ChaseRange                               = 2,
	ExplicitValue                            = 3,
	Command                                  = 4,
	ETedCommandRangeType_MAX                 = 5,
};

// Enum Tempest.ETedAICommandType
// NumValues: 0x0004
enum class ETedAICommandType : uint8
{
	Move                                     = 0,
	Attack                                   = 1,
	AttackMove                               = 2,
	ETedAICommandType_MAX                    = 3,
};

// Enum Tempest.ETedChartWidgetType
// NumValues: 0x0003
enum class ETedChartWidgetType : uint8
{
	Linear                                   = 0,
	Step                                     = 1,
	ETedChartWidgetType_MAX                  = 2,
};

// Enum Tempest.ETedChartPaintLabel
// NumValues: 0x0004
enum class ETedChartPaintLabel : uint8
{
	None                                     = 0,
	Start                                    = 1,
	End                                      = 2,
	ETedChartPaintLabel_MAX                  = 3,
};

// Enum Tempest.ETedChatPartyRichTextBadgeId
// NumValues: 0x0007
enum class ETedChatPartyRichTextBadgeId : uint8
{
	Destination                              = 0,
	Sender                                   = 1,
	SenderName                               = 2,
	Timestamp                                = 3,
	TeamID                                   = 4,
	HydraID                                  = 5,
	Max                                      = 6,
};

// Enum Tempest.EKillAllPawns
// NumValues: 0x0005
enum class EKillAllPawns : uint8
{
	AllUnits                                 = 0,
	EnemyUnits                               = 1,
	NeutralUnits                             = 2,
	FriendlyUnits                            = 3,
	EKillAllPawns_MAX                        = 4,
};

// Enum Tempest.ETedCommandCompoundMapScreenStage
// NumValues: 0x0008
enum class ETedCommandCompoundMapScreenStage : uint8
{
	NotStarted                               = 0,
	GlobeIntro                               = 1,
	MissionIntro                             = 2,
	MissionDetails                           = 3,
	MissionOutro                             = 4,
	MissionCinematicIntro                    = 5,
	MissionLaunch                            = 6,
	Max                                      = 7,
};

// Enum Tempest.ETedCommandCompoundMapScreenTrigger
// NumValues: 0x0006
enum class ETedCommandCompoundMapScreenTrigger : uint8
{
	Component                                = 0,
	Movie                                    = 1,
	Transition_StillImage                    = 2,
	Transition_Marquee                       = 3,
	SlotPrimaryAction                        = 4,
	ETedCommandCompoundMapScreenTrigger_MAX  = 5,
};

// Enum Tempest.ETedCommandCompoundMapScreenMovieType
// NumValues: 0x000A
enum class ETedCommandCompoundMapScreenMovieType : uint8
{
	None                                     = 0,
	StageMovie                               = 1,
	Mission_Intro                            = 2,
	Mission_DetailsLoop                      = 3,
	Mission_Outro                            = 4,
	Mission_CinemaricIntro                   = 5,
	Mission_TextBox                          = 6,
	Mission_DataBox                          = 7,
	Mission_Logo                             = 8,
	ETedCommandCompoundMapScreenMovieType_MAX = 9,
};

// Enum Tempest.ETedCommandCompoundMapScreenResourceType
// NumValues: 0x0005
enum class ETedCommandCompoundMapScreenResourceType : uint8
{
	None                                     = 0,
	VO                                       = 1,
	TextBoxTexture                           = 2,
	DataBoxTexture                           = 3,
	ETedCommandCompoundMapScreenResourceType_MAX = 4,
};

// Enum Tempest.ETedCommandCompoundMapScreenVisibilityAction
// NumValues: 0x0004
enum class ETedCommandCompoundMapScreenVisibilityAction : uint8
{
	Shown                                    = 0,
	Hidden                                   = 1,
	NoChange                                 = 2,
	ETedCommandCompoundMapScreenVisibilityAction_MAX = 3,
};

// Enum Tempest.ETedCommandCompoundDesktopBackgroundAnim
// NumValues: 0x0005
enum class ETedCommandCompoundDesktopBackgroundAnim : uint8
{
	Intro                                    = 0,
	Loop                                     = 1,
	Outro                                    = 2,
	Num                                      = 3,
	ETedCommandCompoundDesktopBackgroundAnim_MAX = 4,
};

// Enum Tempest.ETedCommandState
// NumValues: 0x0008
enum class ETedCommandState : uint8
{
	Active                                   = 0,
	Selected                                 = 1,
	Disabled                                 = 2,
	CoolingDown                              = 3,
	AutoCasting                              = 4,
	AlternatingActive                        = 5,
	DurationActive                           = 6,
	ETedCommandState_MAX                     = 7,
};

// Enum Tempest.ETedCommandDisplaySection
// NumValues: 0x0006
enum class ETedCommandDisplaySection : uint8
{
	None                                     = 0,
	Common                                   = 1,
	PawnSpecific                             = 2,
	Player                                   = 3,
	Upgrade                                  = 4,
	ETedCommandDisplaySection_MAX            = 5,
};

// Enum Tempest.EAirMissionPickLocationType
// NumValues: 0x0003
enum class EAirMissionPickLocationType : uint8
{
	Auto                                     = 0,
	Manual                                   = 1,
	EAirMissionPickLocationType_MAX          = 2,
};

// Enum Tempest.ETedCursorType
// NumValues: 0x0005
enum class ETedCursorType : uint8
{
	Default                                  = 0,
	Selection                                = 1,
	Command                                  = 2,
	NoCursor                                 = 3,
	ETedCursorType_MAX                       = 4,
};

// Enum Tempest.ETedDefinitionModOp
// NumValues: 0x0006
enum class ETedDefinitionModOp : uint8
{
	Additive                                 = 0,
	Subtractive                              = 1,
	Multiplicative                           = 2,
	Division                                 = 3,
	Override                                 = 4,
	MAX                                      = 5,
};

// Enum Tempest.ETedDefinitionConditionOp
// NumValues: 0x000D
enum class ETedDefinitionConditionOp : uint8
{
	Equal                                    = 0,
	DoesNotEqual                             = 1,
	GreaterOrEqual                           = 2,
	LessOrEqual                              = 3,
	Greater                                  = 4,
	Less                                     = 5,
	Contains                                 = 6,
	ContainsAny                              = 7,
	DoesNotContain                           = 8,
	DoesNotContainAny                        = 9,
	Empty                                    = 10,
	NotEmpty                                 = 11,
	MAX                                      = 12,
};

// Enum Tempest.ETedDefinitionConditionsRequirements
// NumValues: 0x0003
enum class ETedDefinitionConditionsRequirements : uint8
{
	All                                      = 0,
	Any                                      = 1,
	MAX                                      = 2,
};

// Enum Tempest.EAssetIdSyncStatus
// NumValues: 0x0004
enum class EAssetIdSyncStatus : uint8
{
	Synced                                   = 0,
	NotSynced                                = 1,
	Invalid                                  = 2,
	EAssetIdSyncStatus_MAX                   = 3,
};

// Enum Tempest.EGarrisonSlotSize
// NumValues: 0x0004
enum class EGarrisonSlotSize : uint8
{
	Default                                  = 0,
	Small                                    = 1,
	Large                                    = 4,
	EGarrisonSlotSize_MAX                    = 5,
};

// Enum Tempest.ETedUnitType
// NumValues: 0x0004
enum class ETedUnitType : uint8
{
	Infantry                                 = 0,
	Specialist                               = 1,
	Commando                                 = 2,
	ETedUnitType_MAX                         = 3,
};

// Enum Tempest.ETedEquipmentPanelSearchStringCheck
// NumValues: 0x0004
enum class ETedEquipmentPanelSearchStringCheck : uint8
{
	Title                                    = 0,
	Description                              = 1,
	Title_And_Description                    = 2,
	ETedEquipmentPanelSearchStringCheck_MAX  = 3,
};

// Enum Tempest.ETedEquipmentPanelFilterOptionType
// NumValues: 0x000C
enum class ETedEquipmentPanelFilterOptionType : uint8
{
	All                                      = 0,
	Purchased                                = 1,
	NotPurchased                             = 2,
	CanBePurchased                           = 3,
	Equipped                                 = 4,
	NotEquipped                              = 5,
	CanBeEquipped                            = 6,
	Space_1                                  = 7,
	Space_2                                  = 8,
	Space_3                                  = 9,
	Space_4                                  = 10,
	Max                                      = 11,
};

// Enum Tempest.ETedBranch
// NumValues: 0x0006
enum class ETedBranch : uint8
{
	Main                                     = 0,
	Staging                                  = 1,
	Release                                  = 2,
	ClosedBeta                               = 3,
	Num                                      = 4,
	ETedBranch_MAX                           = 5,
};

// Enum Tempest.ETedFrameInfoOption
// NumValues: 0x0005
enum class ETedFrameInfoOption : uint8
{
	None                                     = 0,
	WindowPosition                           = 1,
	ProcId                                   = 2,
	LogFilename                              = 4,
	ETedFrameInfoOption_MAX                  = 5,
};

// Enum Tempest.FTedGameStage
// NumValues: 0x0004
enum class EFTedGameStage : uint8
{
	TGS_None                                 = 0,
	TGS_WaitingForOtherPlayers               = 1,
	TGS_Playing                              = 2,
	TGS_MAX                                  = 3,
};

// Enum Tempest.ETedGameProgressOpenMapOption
// NumValues: 0x0005
enum class ETedGameProgressOpenMapOption : uint8
{
	DontOpen                                 = 0,
	BriefingOrMission                        = 1,
	Briefing                                 = 2,
	Mission                                  = 3,
	ETedGameProgressOpenMapOption_MAX        = 4,
};

// Enum Tempest.ETedTargetVersion
// NumValues: 0x0007
enum class ETedTargetVersion : uint8
{
	Invalid                                  = 0,
	Debug                                    = 1,
	Development                              = 2,
	Test                                     = 3,
	Shipping                                 = 4,
	Last                                     = 5,
	ETedTargetVersion_MAX                    = 6,
};

// Enum Tempest.ETedGarrisonBarsPart
// NumValues: 0x0003
enum class ETedGarrisonBarsPart : uint8
{
	Bars                                     = 0,
	Box                                      = 1,
	ETedGarrisonBarsPart_MAX                 = 2,
};

// Enum Tempest.EHintSpawnType
// NumValues: 0x0006
enum class EHintSpawnType : uint8
{
	None                                     = 0,
	UIOnly                                   = 1,
	OnActorsByRef                            = 2,
	OnActorsByTag                            = 3,
	OnLocations                              = 4,
	EHintSpawnType_MAX                       = 5,
};

// Enum Tempest.EHintMarkedActorDestroyedBehaviour
// NumValues: 0x0005
enum class EHintMarkedActorDestroyedBehaviour : uint8
{
	None                                     = 0,
	Ignore                                   = 1,
	HideMarker                               = 2,
	HideEntireHint                           = 3,
	EHintMarkedActorDestroyedBehaviour_MAX   = 4,
};

// Enum Tempest.EHintState
// NumValues: 0x0004
enum class EHintState : uint8
{
	None                                     = 0,
	WasRead                                  = 1,
	IsActive                                 = 2,
	EHintState_MAX                           = 3,
};

// Enum Tempest.ETedBarType
// NumValues: 0x0008
enum class ETedBarType : uint8
{
	BT_Health                                = 0,
	BT_CarryUnits                            = 1,
	BT_Ammo                                  = 2,
	BT_Debuff                                = 3,
	BT_BuildSellCaptureTimed                 = 4,
	BT_VeterancyAndDebuff                    = 5,
	Count                                    = 6,
	ETedBarType_MAX                          = 7,
};

// Enum Tempest.ETedDebuffType
// NumValues: 0x0005
enum class ETedDebuffType : uint8
{
	DT_TempestCharge                         = 0,
	DT_RiotSuppression                       = 1,
	DT_RiotSuppressionMP                     = 2,
	Count                                    = 3,
	ETedDebuffType_MAX                       = 4,
};

// Enum Tempest.ETedProgressType
// NumValues: 0x0004
enum class ETedProgressType : uint8
{
	PT_Capture                               = 0,
	PT_Sell                                  = 1,
	PT_Timed                                 = 2,
	PT_MAX                                   = 3,
};

// Enum Tempest.EMinimapStateFlag
// NumValues: 0x0003
enum class EMinimapStateFlag : uint8
{
	Enabled                                  = 0,
	Eligible                                 = 1,
	EMinimapStateFlag_MAX                    = 2,
};

// Enum Tempest.EMinimapStateMode
// NumValues: 0x0004
enum class EMinimapStateMode : uint8
{
	Default                                  = 0,
	ForceOn                                  = 1,
	ForceOff                                 = 2,
	EMinimapStateMode_MAX                    = 3,
};

// Enum Tempest.ETedSkippableSequenceResult
// NumValues: 0x0003
enum class ETedSkippableSequenceResult : uint8
{
	End                                      = 0,
	Keep                                     = 1,
	ETedSkippableSequenceResult_MAX          = 2,
};

// Enum Tempest.ETedInputDataType
// NumValues: 0x0004
enum class ETedInputDataType : uint8
{
	Action                                   = 0,
	Axis_Positive                            = 1,
	Axis_Negative                            = 2,
	ETedInputDataType_MAX                    = 3,
};

// Enum Tempest.ETedIpcChannelType
// NumValues: 0x0003
enum class ETedIpcChannelType : uint8
{
	Client                                   = 0,
	Server                                   = 1,
	ETedIpcChannelType_MAX                   = 2,
};

// Enum Tempest.EAirDropInputs
// NumValues: 0x0002
enum class EAirDropInputs : uint8
{
	Start                                    = 0,
	EAirDropInputs_MAX                       = 1,
};

// Enum Tempest.EAirDropOutputs
// NumValues: 0x0003
enum class EAirDropOutputs : uint8
{
	OnStart                                  = 0,
	OnAirDropCompleted                       = 1,
	EAirDropOutputs_MAX                      = 2,
};

// Enum Tempest.EAirDropInVolumeInputs
// NumValues: 0x0002
enum class EAirDropInVolumeInputs : uint8
{
	Start                                    = 0,
	EAirDropInVolumeInputs_MAX               = 1,
};

// Enum Tempest.EAirDropInVolumeOutputs
// NumValues: 0x0003
enum class EAirDropInVolumeOutputs : uint8
{
	OnStart                                  = 0,
	OnAirDropCompleted                       = 1,
	EAirDropInVolumeOutputs_MAX              = 2,
};

// Enum Tempest.EBatchSpawnInputs
// NumValues: 0x0002
enum class EBatchSpawnInputs : uint8
{
	Start                                    = 0,
	EBatchSpawnInputs_MAX                    = 1,
};

// Enum Tempest.EBatchSpawnOutputs
// NumValues: 0x0002
enum class EBatchSpawnOutputs : uint8
{
	OnSpawnCompleted                         = 0,
	EBatchSpawnOutputs_MAX                   = 1,
};

// Enum Tempest.ESpawnInVolumeInputs
// NumValues: 0x0002
enum class ESpawnInVolumeInputs : uint8
{
	Start                                    = 0,
	ESpawnInVolumeInputs_MAX                 = 1,
};

// Enum Tempest.ESpawnInVolumeOutputs
// NumValues: 0x0002
enum class ESpawnInVolumeOutputs : uint8
{
	OnSpawnCompleted                         = 0,
	ESpawnInVolumeOutputs_MAX                = 1,
};

// Enum Tempest.ESpawnStaggeredInputs
// NumValues: 0x0002
enum class ESpawnStaggeredInputs : uint8
{
	Start                                    = 0,
	ESpawnStaggeredInputs_MAX                = 1,
};

// Enum Tempest.ESpawnStaggeredOutputs
// NumValues: 0x0003
enum class ESpawnStaggeredOutputs : uint8
{
	OnStart                                  = 0,
	OnSpawnCompleted                         = 1,
	ESpawnStaggeredOutputs_MAX               = 2,
};

// Enum Tempest.ELatentActionWaitForProductionInputs
// NumValues: 0x0003
enum class ELatentActionWaitForProductionInputs : uint8
{
	Start                                    = 0,
	Abort                                    = 1,
	ELatentActionWaitForProductionInputs_MAX = 2,
};

// Enum Tempest.ELatentActionWaitForProductionOutputs
// NumValues: 0x0004
enum class ELatentActionWaitForProductionOutputs : uint8
{
	OnStart                                  = 0,
	OnAbort                                  = 1,
	OnProduced                               = 2,
	ELatentActionWaitForProductionOutputs_MAX = 3,
};

// Enum Tempest.ETedLatentLink
// NumValues: 0x0003
enum class ETedLatentLink : uint8
{
	Start                                    = 0,
	Abort                                    = 1,
	ETedLatentLink_MAX                       = 2,
};

// Enum Tempest.ETedBriefingMovieFrame
// NumValues: 0x0004
enum class ETedBriefingMovieFrame : uint8
{
	Small_Left                               = 0,
	Small_Right                              = 1,
	Big                                      = 2,
	ETedBriefingMovieFrame_MAX               = 3,
};

// Enum Tempest.ETedLobbyPasswordMode
// NumValues: 0x0004
enum class ETedLobbyPasswordMode : uint8
{
	Required                                 = 0,
	NotRequired                              = 1,
	Last                                     = 2,
	ETedLobbyPasswordMode_MAX                = 3,
};

// Enum Tempest.ETedLobbyAffectPasswordMode
// NumValues: 0x0005
enum class ETedLobbyAffectPasswordMode : uint8
{
	ForceYes                                 = 0,
	Yes                                      = 1,
	No                                       = 2,
	Last                                     = 3,
	ETedLobbyAffectPasswordMode_MAX          = 4,
};

// Enum Tempest.ETedMarkerShapeSplineArrowMode
// NumValues: 0x0004
enum class ETedMarkerShapeSplineArrowMode : uint8
{
	None                                     = 0,
	DrawAtTheEnd                             = 1,
	DrawAtEveryPoint                         = 2,
	ETedMarkerShapeSplineArrowMode_MAX       = 3,
};

// Enum Tempest.ETedMarkerTargetType
// NumValues: 0x0004
enum class ETedMarkerTargetType : uint8
{
	Invalid                                  = 0,
	Location                                 = 1,
	Actor                                    = 2,
	ETedMarkerTargetType_MAX                 = 3,
};

// Enum Tempest.ETedMedalsType
// NumValues: 0x0003
enum class ETedMedalsType : uint8
{
	Main                                     = 0,
	Side                                     = 1,
	ETedMedalsType_MAX                       = 2,
};

// Enum Tempest.ETedMovieType
// NumValues: 0x0006
enum class ETedMovieType : uint8
{
	Fullscreen                               = 0,
	MissionDialogue                          = 1,
	Misc                                     = 2,
	TransitionalMovie                        = 3,
	Num                                      = 4,
	ETedMovieType_MAX                        = 5,
};

// Enum Tempest.ETedMovieGamePauseInteraction
// NumValues: 0x0004
enum class ETedMovieGamePauseInteraction : uint8
{
	None                                     = 0,
	PauseGame                                = 1,
	Sync                                     = 2,
	ETedMovieGamePauseInteraction_MAX        = 3,
};

// Enum Tempest.ETedMovieFadeType
// NumValues: 0x0003
enum class ETedMovieFadeType : uint8
{
	FadeIn                                   = 0,
	FadeOut                                  = 1,
	ETedMovieFadeType_MAX                    = 2,
};

// Enum Tempest.ETedNavFilterCondition
// NumValues: 0x0003
enum class ETedNavFilterCondition : uint8
{
	COND_Or                                  = 0,
	COND_And                                 = 1,
	COND_MAX                                 = 2,
};

// Enum Tempest.ETedPostProcessedNavMeshTileState
// NumValues: 0x0004
enum class ETedPostProcessedNavMeshTileState : uint8
{
	Unchanged                                = 0,
	FullyCleared                             = 1,
	PartiallyCleared                         = 2,
	ETedPostProcessedNavMeshTileState_MAX    = 3,
};

// Enum Tempest.ETedNoBuildVolumeStage
// NumValues: 0x0003
enum class ETedNoBuildVolumeStage : uint8
{
	Initial                                  = 0,
	Vines                                    = 1,
	ETedNoBuildVolumeStage_MAX               = 2,
};

// Enum Tempest.ETedHasPrerequisitesTracking
// NumValues: 0x0004
enum class ETedHasPrerequisitesTracking : uint8
{
	Current                                  = 0,
	Gained                                   = 1,
	Lost                                     = 2,
	ETedHasPrerequisitesTracking_MAX         = 3,
};

// Enum Tempest.ETedHaveTechTracking
// NumValues: 0x0004
enum class ETedHaveTechTracking : uint8
{
	Current                                  = 0,
	Gained                                   = 1,
	Lost                                     = 2,
	ETedHaveTechTracking_MAX                 = 3,
};

// Enum Tempest.ETedHaveUpgradesTracking
// NumValues: 0x0004
enum class ETedHaveUpgradesTracking : uint8
{
	Current                                  = 0,
	Gained                                   = 1,
	Lost                                     = 2,
	ETedHaveUpgradesTracking_MAX             = 3,
};

// Enum Tempest.ETedObjectiveConditionVolumeActorCounterTracking
// NumValues: 0x0004
enum class ETedObjectiveConditionVolumeActorCounterTracking : uint8
{
	Present                                  = 0,
	Enterers                                 = 1,
	Leavers                                  = 2,
	ETedObjectiveConditionVolumeActorCounterTracking_MAX = 3,
};

// Enum Tempest.EObjectiveState
// NumValues: 0x0005
enum class EObjectiveState : uint8
{
	Inactive                                 = 0,
	Active                                   = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	EObjectiveState_MAX                      = 4,
};

// Enum Tempest.EObjectiveResult
// NumValues: 0x0003
enum class EObjectiveResult : uint8
{
	Succeeded                                = 0,
	Failed                                   = 1,
	EObjectiveResult_MAX                     = 2,
};

// Enum Tempest.EObjectiveResultWithNone
// NumValues: 0x0004
enum class EObjectiveResultWithNone : uint8
{
	None                                     = 0,
	Succeeded                                = 1,
	Failed                                   = 2,
	EObjectiveResultWithNone_MAX             = 3,
};

// Enum Tempest.EObjectiveConditionState
// NumValues: 0x0004
enum class EObjectiveConditionState : uint8
{
	Unresolved                               = 0,
	Met                                      = 1,
	NotMet                                   = 2,
	EObjectiveConditionState_MAX             = 3,
};

// Enum Tempest.EObjectiveDisplayMode
// NumValues: 0x0004
enum class EObjectiveDisplayMode : uint8
{
	None                                     = 0,
	Default                                  = 1,
	Optional                                 = 2,
	EObjectiveDisplayMode_MAX                = 3,
};

// Enum Tempest.EObjectiveStateBehavior
// NumValues: 0x0005
enum class EObjectiveStateBehavior : uint8
{
	None                                     = 0,
	SucceedOnSuccess                         = 1,
	FailOnFailure                            = 2,
	Both                                     = 3,
	EObjectiveStateBehavior_MAX              = 4,
};

// Enum Tempest.ETedObjectiveAnnouncementType
// NumValues: 0x0005
enum class ETedObjectiveAnnouncementType : uint8
{
	New                                      = 0,
	Updated                                  = 1,
	Completed                                = 2,
	Failed                                   = 3,
	ETedObjectiveAnnouncementType_MAX        = 4,
};

// Enum Tempest.ETedObjectiveCommandTracking
// NumValues: 0x0003
enum class ETedObjectiveCommandTracking : uint8
{
	Start                                    = 0,
	Complete                                 = 1,
	ETedObjectiveCommandTracking_MAX         = 2,
};

// Enum Tempest.ETedObjectiveCommandConditionMarker
// NumValues: 0x0004
enum class ETedObjectiveCommandConditionMarker : uint8
{
	TargetActor                              = 0,
	CommandActor                             = 1,
	Both                                     = 2,
	ETedObjectiveCommandConditionMarker_MAX  = 3,
};

// Enum Tempest.ETedOnlineFriendState
// NumValues: 0x0004
enum class ETedOnlineFriendState : uint8
{
	Offline                                  = 0,
	Online                                   = 1,
	InTedGame                                = 2,
	ETedOnlineFriendState_MAX                = 3,
};

// Enum Tempest.ETedGameState
// NumValues: 0x0006
enum class ETedGameState : uint8
{
	MainMenu                                 = 0,
	CommandCompound                          = 1,
	Campaign                                 = 2,
	Skirmish                                 = 3,
	Multiplayer                              = 4,
	ETedGameState_MAX                        = 5,
};

// Enum Tempest.ETedGameInviteState
// NumValues: 0x0004
enum class ETedGameInviteState : uint8
{
	Failed                                   = 0,
	Received                                 = 1,
	Ready                                    = 2,
	ETedGameInviteState_MAX                  = 3,
};

// Enum Tempest.ETedFriendStateChangeType
// NumValues: 0x0007
enum class ETedFriendStateChangeType : uint8
{
	None                                     = 0,
	FriendRelationship                       = 1,
	OnlineState                              = 2,
	GameState                                = 3,
	GameInvite                               = 4,
	SpectatorInvite                          = 5,
	ETedFriendStateChangeType_MAX            = 6,
};

// Enum Tempest.ETedChatMessageState
// NumValues: 0x0004
enum class ETedChatMessageState : uint8
{
	Invalid                                  = 0,
	ChatMsg                                  = 1,
	Typing                                   = 2,
	ETedChatMessageState_MAX                 = 3,
};

// Enum Tempest.ETedRatingAlgorithm
// NumValues: 0x0005
enum class ETedRatingAlgorithm : uint8
{
	Elo                                      = 0,
	Glicko1                                  = 1,
	Glicko2                                  = 2,
	Last                                     = 3,
	ETedRatingAlgorithm_MAX                  = 4,
};

// Enum Tempest.ETedReconnectState
// NumValues: 0x000A
enum class ETedReconnectState : uint8
{
	Idle                                     = 0,
	Reconnecting                             = 1,
	ReconnectingSuccess                      = 2,
	ReconnectingFail                         = 3,
	Waiting                                  = 4,
	WaitingSuccess                           = 5,
	WaitingFail                              = 6,
	DeliDiscInfo                             = 7,
	HandleLateServerAck                      = 8,
	ETedReconnectState_MAX                   = 9,
};

// Enum Tempest.ETedOnlineSessionPlayerContext
// NumValues: 0x0003
enum class ETedOnlineSessionPlayerContext : uint8
{
	CurrentSession                           = 0,
	SearchResult                             = 1,
	ETedOnlineSessionPlayerContext_MAX       = 2,
};

// Enum Tempest.ETedOnlineSessionIpcMessageType
// NumValues: 0x0005
enum class ETedOnlineSessionIpcMessageType : uint8
{
	NoMessage                                = 0,
	HostSessionFinished                      = 1,
	HostSessionFinished_ACK                  = 2,
	QuitServer                               = 3,
	ETedOnlineSessionIpcMessageType_MAX      = 4,
};

// Enum Tempest.ETedOnlineComparisonResult
// NumValues: 0x0004
enum class ETedOnlineComparisonResult : uint8
{
	SmallerA                                 = 0,
	SmallerB                                 = 1,
	Equal                                    = 2,
	ETedOnlineComparisonResult_MAX           = 3,
};

// Enum Tempest.EAsyncRequestStatus
// NumValues: 0x0004
enum class EAsyncRequestStatus : uint8
{
	NotCalled                                = 0,
	InProgress                               = 1,
	Completed                                = 2,
	EAsyncRequestStatus_MAX                  = 3,
};

// Enum Tempest.ETedPingType
// NumValues: 0x0003
enum class ETedPingType : uint8
{
	Icmp                                     = 0,
	UDP                                      = 1,
	ETedPingType_MAX                         = 2,
};

// Enum Tempest.ETedPostDisconnectBehavior
// NumValues: 0x0007
enum class ETedPostDisconnectBehavior : uint8
{
	PauseAndContinue                         = 0,
	NoControl                                = 1,
	ImmediateDefeat                          = 2,
	AiTakeover                               = 3,
	Ranked                                   = 4,
	Last                                     = 5,
	ETedPostDisconnectBehavior_MAX           = 6,
};

// Enum Tempest.ETedMatchTypeMP
// NumValues: 0x0005
enum class ETedMatchTypeMP : uint8
{
	MP_Destroy_ConYards                      = 0,
	MP_Destroy_Buildings                     = 1,
	MP_Destroy_All                           = 2,
	Last                                     = 3,
	ETedMatchTypeMP_MAX                      = 4,
};

// Enum Tempest.ETedMatchTypeSK
// NumValues: 0x0005
enum class ETedMatchTypeSK : uint8
{
	SK_Destroy_ConYards                      = 0,
	SK_Destroy_Buildings                     = 1,
	SK_Destroy_All                           = 2,
	Last                                     = 3,
	ETedMatchTypeSK_MAX                      = 4,
};

// Enum Tempest.ETedPartyRemoteActionType
// NumValues: 0x0005
enum class ETedPartyRemoteActionType : uint8
{
	None                                     = 0,
	Question                                 = 1,
	Answer                                   = 2,
	Cancel                                   = 3,
	ETedPartyRemoteActionType_MAX            = 4,
};

// Enum Tempest.ETedWeaponSelection
// NumValues: 0x0003
enum class ETedWeaponSelection : uint8
{
	Current                                  = 0,
	Any                                      = 1,
	ETedWeaponSelection_MAX                  = 2,
};

// Enum Tempest.ETedPawnFilterMode
// NumValues: 0x0003
enum class ETedPawnFilterMode : uint8
{
	And                                      = 0,
	Or                                       = 1,
	ETedPawnFilterMode_MAX                   = 2,
};

// Enum Tempest.ETedPawnUpgradeResearchStatus
// NumValues: 0x0007
enum class ETedPawnUpgradeResearchStatus : uint8
{
	Started                                  = 0,
	Paused_User                              = 1,
	Paused_Credits                           = 2,
	Resumed                                  = 3,
	Canceled                                 = 4,
	Completed                                = 5,
	ETedPawnUpgradeResearchStatus_MAX        = 6,
};

// Enum Tempest.ETedDisplayablePerformanceStat
// NumValues: 0x0011
enum class ETedDisplayablePerformanceStat : uint8
{
	ClientFPS                                = 0,
	ServerFPS                                = 1,
	IdleTime                                 = 2,
	FrameTime                                = 3,
	FrameTime_GameThread                     = 4,
	FrameTime_RenderThread                   = 5,
	FrameTime_RHIThread                      = 6,
	FrameTime_GPU                            = 7,
	Ping                                     = 8,
	PacketLoss_Incoming                      = 9,
	PacketLoss_Outgoing                      = 10,
	PacketRate_Incoming                      = 11,
	PacketRate_Outgoing                      = 12,
	PacketSize_Incoming                      = 13,
	PacketSize_Outgoing                      = 14,
	Count                                    = 15,
	ETedDisplayablePerformanceStat_MAX       = 16,
};

// Enum Tempest.ETedSelectionOp
// NumValues: 0x0004
enum class ETedSelectionOp : uint8
{
	Set                                      = 0,
	Add                                      = 1,
	Remove                                   = 2,
	ETedSelectionOp_MAX                      = 3,
};

// Enum Tempest.ETedSelectionMode
// NumValues: 0x0008
enum class ETedSelectionMode : uint8
{
	Hovered                                  = 0,
	Group                                    = 1,
	MatchingHoveredOnScreen                  = 2,
	MatchingSelectedOnScreen                 = 3,
	All                                      = 4,
	AllMatchingSelected                      = 5,
	AllOnScreen                              = 6,
	ETedSelectionMode_MAX                    = 7,
};

// Enum Tempest.ETedSideBarSlotAction
// NumValues: 0x0004
enum class ETedSideBarSlotAction : uint8
{
	Press                                    = 0,
	Release                                  = 1,
	ReleaseAndConfirm                        = 2,
	ETedSideBarSlotAction_MAX                = 3,
};

// Enum Tempest.ETedMinimapEvent
// NumValues: 0x0004
enum class ETedMinimapEvent : uint8
{
	IssueCommand                             = 0,
	Teleport                                 = 1,
	PlacePing                                = 2,
	ETedMinimapEvent_MAX                     = 3,
};

// Enum Tempest.ETedCCCameraType
// NumValues: 0x0004
enum class ETedCCCameraType : uint8
{
	Default                                  = 0,
	Conversation                             = 1,
	Idle                                     = 2,
	ETedCCCameraType_MAX                     = 3,
};

// Enum Tempest.ETedSequenceRange
// NumValues: 0x0003
enum class ETedSequenceRange : uint8
{
	Start                                    = 0,
	End                                      = 1,
	ETedSequenceRange_MAX                    = 2,
};

// Enum Tempest.ETedPlayerDataAnnouncement
// NumValues: 0x0014
enum class ETedPlayerDataAnnouncement : uint8
{
	None                                     = 0,
	Queue_Construction_Start                 = 1,
	Queue_Construction_Complete              = 2,
	Queue_Construction_Cancel                = 3,
	Queue_Construction_Resume                = 4,
	Queue_Construction_Pause_User            = 5,
	Queue_Construction_Pause_Credits         = 6,
	Queue_Construction_Pause_Power           = 7,
	Queue_Construction_NewTechAvailable      = 8,
	Research_Start                           = 9,
	Research_Resume                          = 10,
	Research_Complete_Doctrine               = 11,
	Research_Complete_PawnUpgrade            = 12,
	Doctrine_Sold                            = 13,
	Entity_Repairing                         = 14,
	Entity_Captured                          = 15,
	Resources_Power_Low                      = 16,
	Resources_Credits_Low                    = 17,
	Resources_Credits_SilosNeeded            = 18,
	ETedPlayerDataAnnouncement_MAX           = 19,
};

// Enum Tempest.ETedPlayerDataDataType
// NumValues: 0x0009
enum class ETedPlayerDataDataType : uint8
{
	Resource                                 = 0,
	LockedTechData                           = 1,
	OwnedTags                                = 2,
	Structures                               = 3,
	Units                                    = 4,
	ConstructionQueues                       = 5,
	DoctrineResearchQueue                    = 6,
	Last                                     = 7,
	ETedPlayerDataDataType_MAX               = 8,
};

// Enum Tempest.ETedPlayerDataStat
// NumValues: 0x001B
enum class ETedPlayerDataStat : uint8
{
	Credits                                  = 0,
	Credits_Gained                           = 1,
	Credits_Lost                             = 2,
	HarvestersCreated                        = 3,
	AverageIncomePerMin                      = 4,
	IncomePerMin                             = 5,
	MaxPowerGenerated                        = 6,
	Power                                    = 7,
	PowerConsumption                         = 8,
	Intel_Gained                             = 9,
	Intel_Lost                               = 10,
	Units                                    = 11,
	Units_Gained                             = 12,
	Units_Trained                            = 13,
	Units_Lost                               = 14,
	Units_Destroyed                          = 15,
	Units_DamageDealt                        = 16,
	Units_DamageReceived                     = 17,
	Units_ExperienceGained                   = 18,
	Structures                               = 19,
	Structures_Built                         = 20,
	Structures_Lost                          = 21,
	Structures_Destroyed                     = 22,
	Structures_Captured                      = 23,
	Structures_Sold                          = 24,
	Structures_ExperienceGained              = 25,
	MAX                                      = 26,
};

// Enum Tempest.ETedPlayerDataStatOp
// NumValues: 0x0004
enum class ETedPlayerDataStatOp : uint8
{
	Add                                      = 0,
	Set                                      = 1,
	SetIfHigher                              = 2,
	ETedPlayerDataStatOp_MAX                 = 3,
};

// Enum Tempest.ETedStartingArmySize
// NumValues: 0x0004
enum class ETedStartingArmySize : uint8
{
	ConYard                                  = 0,
	Small                                    = 1,
	Large                                    = 2,
	Max                                      = 3,
};

// Enum Tempest.ETedSteamAvatarSize
// NumValues: 0x0004
enum class ETedSteamAvatarSize : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	Big                                      = 2,
	ETedSteamAvatarSize_MAX                  = 3,
};

// Enum Tempest.EPopupLayoutSettings
// NumValues: 0x0008
enum class EPopupLayoutSettings : uint8
{
	PopupBody                                = 0,
	PopupTextBox                             = 1,
	PopupDropDown                            = 2,
	PopupWorking                             = 3,
	PopupBackgroundBlur                      = 4,
	PopupHeaderUpperCase                     = 5,
	CollapseAllSpacers                       = 6,
	EPopupLayoutSettings_MAX                 = 7,
};

// Enum Tempest.ETedPopupGoBackBehavior
// NumValues: 0x0003
enum class ETedPopupGoBackBehavior : uint8
{
	Hide                                     = 0,
	Destruct                                 = 1,
	ETedPopupGoBackBehavior_MAX              = 2,
};

// Enum Tempest.EFOWBehaviour
// NumValues: 0x0006
enum class EFOWBehaviour : uint8
{
	ReplicateOnlyIfVisible                   = 0,
	ThrottleUnderFogOfWarSkipIfNeverSeen     = 1,
	AlwaysReplicateIfSeenOnce                = 2,
	AlwaysReplicate                          = 3,
	AlwaysThrottleUnderFogOfWarAlwaysReplicate = 4,
	EFOWBehaviour_MAX                        = 5,
};

// Enum Tempest.EPreloadScenario
// NumValues: 0x0004
enum class EPreloadScenario : uint8
{
	PS_DedicatedServer                       = 0,
	PS_Client                                = 1,
	PS_Standalone                            = 2,
	PS_MAX                                   = 3,
};

// Enum Tempest.EPreloadStrategy
// NumValues: 0x0003
enum class EPreloadStrategy : uint8
{
	FogOfWarBaseClientSidePreload            = 0,
	ClientPreloadsAll                        = 1,
	EPreloadStrategy_MAX                     = 2,
};

// Enum Tempest.EClassRepNodeMapping
// NumValues: 0x0008
enum class EClassRepNodeMapping : uint32
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	RelevantOwnerConnection                  = 2,
	Spatialize_FOW                           = 3,
	Spatialize_Static                        = 4,
	Spatialize_Dynamic                       = 5,
	Spatialize_Dormancy                      = 6,
	EClassRepNodeMapping_MAX                 = 7,
};

// Enum Tempest.ETedSavedSlotGamemodeType
// NumValues: 0x0004
enum class ETedSavedSlotGamemodeType : uint8
{
	Campaign_DYN                             = 0,
	Campaign_GDF                             = 1,
	Skirmish                                 = 2,
	ETedSavedSlotGamemodeType_MAX            = 3,
};

// Enum Tempest.ETedScoreScreenOnlinePlayersPanelOption
// NumValues: 0x0008
enum class ETedScoreScreenOnlinePlayersPanelOption : uint8
{
	None                                     = 0,
	PlayerInfo                               = 2,
	PlayerColor                              = 4,
	Team                                     = 8,
	Faction                                  = 16,
	Ranking                                  = 32,
	Difficulty                               = 64,
	ETedScoreScreenOnlinePlayersPanelOption_MAX = 65,
};

// Enum Tempest.ETedScoreScreenRelevantPawns
// NumValues: 0x0004
enum class ETedScoreScreenRelevantPawns : uint8
{
	Structures                               = 0,
	Units                                    = 1,
	All                                      = 2,
	ETedScoreScreenRelevantPawns_MAX         = 3,
};

// Enum Tempest.ETedScoreScreenGrouping
// NumValues: 0x0004
enum class ETedScoreScreenGrouping : uint8
{
	None                                     = 0,
	AttitudeAndFaction                       = 1,
	Team                                     = 2,
	ETedScoreScreenGrouping_MAX              = 3,
};

// Enum Tempest.ETedSelectionBoxOrigin
// NumValues: 0x0005
enum class ETedSelectionBoxOrigin : uint8
{
	UpperLeft                                = 0,
	UpperRight                               = 1,
	LowerRight                               = 2,
	LowerLeft                                = 3,
	ETedSelectionBoxOrigin_MAX               = 4,
};

// Enum Tempest.EStructureHarvesterStage
// NumValues: 0x0005
enum class EStructureHarvesterStage : uint8
{
	InitialHarvestSpeed                      = 0,
	SmallHarvestSpeed                        = 1,
	MediumHarvestSpeed                       = 2,
	MaxHarvestSpeed                          = 3,
	EStructureHarvesterStage_MAX             = 4,
};

// Enum Tempest.ETedNeighborAnim
// NumValues: 0x0004
enum class ETedNeighborAnim : uint8
{
	None                                     = 0,
	Construct                                = 1,
	Deconstruct                              = 2,
	ETedNeighborAnim_MAX                     = 3,
};

// Enum Tempest.ERefineryEventType
// NumValues: 0x0004
enum class ERefineryEventType : uint8
{
	ResourceDepositStarted                   = 0,
	OnResourceDepositFinished                = 1,
	HarvesterAligned                         = 2,
	ERefineryEventType_MAX                   = 3,
};

// Enum Tempest.ETedPowerStateFlag
// NumValues: 0x0003
enum class ETedPowerStateFlag : uint8
{
	UserPowered                              = 0,
	SufficientPower                          = 1,
	ETedPowerStateFlag_MAX                   = 2,
};

// Enum Tempest.ETedPowerStatus
// NumValues: 0x0004
enum class ETedPowerStatus : uint8
{
	FullPower                                = 0,
	LowPower                                 = 1,
	NoPower                                  = 2,
	ETedPowerStatus_MAX                      = 3,
};

// Enum Tempest.ETedStructureUnitSpawnMode
// NumValues: 0x0004
enum class ETedStructureUnitSpawnMode : uint8
{
	AutoSpawnPlacement                       = 0,
	AutoSpawnDestroy                         = 1,
	Production                               = 2,
	ETedStructureUnitSpawnMode_MAX           = 3,
};

// Enum Tempest.ETedStructureSpawnOption
// NumValues: 0x0005
enum class ETedStructureSpawnOption : uint8
{
	None                                     = 0,
	FromConstructionSite                     = 1,
	Wall_IgnoreFillers                       = 2,
	Gate_ShouldBeRotated                     = 4,
	ETedStructureSpawnOption_MAX             = 5,
};

// Enum Tempest.ETedStructureSource
// NumValues: 0x0004
enum class ETedStructureSource : uint8
{
	None                                     = 0,
	ConstructionQueue                        = 1,
	PlayerCommand                            = 2,
	ETedStructureSource_MAX                  = 3,
};

// Enum Tempest.ETedStructureFailReason
// NumValues: 0x0006
enum class ETedStructureFailReason : uint8
{
	TeamMismatch                             = 0,
	ClassMismatch                            = 1,
	ConnectionMismatch                       = 2,
	NeighborhoodMismatch                     = 3,
	SideMismatch                             = 4,
	ETedStructureFailReason_MAX              = 5,
};

// Enum Tempest.ETedStructureConnection
// NumValues: 0x0006
enum class ETedStructureConnection : uint8
{
	None                                     = 0,
	I                                        = 1,
	L                                        = 2,
	T                                        = 3,
	X                                        = 4,
	ETedStructureConnection_MAX              = 5,
};

// Enum Tempest.ETedStructureWallSide
// NumValues: 0x0006
enum class ETedStructureWallSide : uint8
{
	West                                     = 0,
	North                                    = 1,
	East                                     = 2,
	South                                    = 3,
	Last                                     = 4,
	ETedStructureWallSide_MAX                = 5,
};

// Enum Tempest.ETedConstructionSiteAnim
// NumValues: 0x0004
enum class ETedConstructionSiteAnim : uint8
{
	Place                                    = 0,
	Transform                                = 1,
	Deconstruct                              = 2,
	Max                                      = 3,
};

// Enum Tempest.ETedConstructionSiteAnimNotify
// NumValues: 0x000A
enum class ETedConstructionSiteAnimNotify : uint8
{
	Drone_Pickup                             = 0,
	Drone_DropOff                            = 1,
	PlaceStructure                           = 2,
	HideFence                                = 3,
	HideDrone                                = 4,
	Destroy                                  = 5,
	DisableInteraction                       = 6,
	ShowDecal                                = 7,
	HideDecal                                = 8,
	Max                                      = 9,
};

// Enum Tempest.ETedStructureAlignment
// NumValues: 0x0006
enum class ETedStructureAlignment : uint8
{
	TopRight                                 = 0,
	TopLeft                                  = 1,
	BottomLeft                               = 2,
	BottomRight                              = 3,
	Max                                      = 4,
	None                                     = 5,
};

// Enum Tempest.ETelemetryEventType
// NumValues: 0x001A
enum class ETelemetryEventType : uint8
{
	ClientLobbyProgress                      = 0,
	ClientMatchmaking                        = 1,
	ClientMatchStart                         = 2,
	ClientMatchProgress                      = 3,
	ClientMatchEnd                           = 4,
	ClientCampaignProgress                   = 5,
	ClientObjective                          = 6,
	ClientSceneLoading                       = 7,
	ClientSettings                           = 8,
	ClientCutsceneResult                     = 9,
	ClientLeaderboardScreen                  = 10,
	ClientDeviceInfo                         = 11,
	ClientDlcInfo                            = 12,
	ClientTransaction                        = 13,
	ServerMatchDestroy                       = 14,
	ServerMatchBuild                         = 15,
	ServerMatchProgress                      = 16,
	ServerSupportPowerResult                 = 17,
	ServerMatchEnd                           = 18,
	MotdClientBannerClickBiEvent             = 19,
	MotdClientBannerImpressionBiEvent        = 20,
	MotdClientBannerCloseWindowBiEvent       = 21,
	MotdClientBannerOpenWindowBiEvent        = 22,
	MotdClientBannerSettingsBiEvent          = 23,
	MotdClientDlcConfirmedBiEvent            = 24,
	ETelemetryEventType_MAX                  = 25,
};

// Enum Tempest.ETedTelemetryCreditsSource
// NumValues: 0x000C
enum class ETedTelemetryCreditsSource : uint8
{
	Command                                  = 0,
	PassiveGeneration                        = 1,
	Pickup                                   = 2,
	Production_Structure                     = 3,
	Production_Unit                          = 4,
	Research_Doctrine                        = 5,
	Research_PawnUpgrade                     = 6,
	Selling_Doctrine                         = 7,
	Selling_Structure                        = 8,
	TempestField                             = 9,
	Unspecified                              = 10,
	ETedTelemetryCreditsSource_MAX           = 11,
};

// Enum Tempest.ETedTelemetryMatchStartReason
// NumValues: 0x0006
enum class ETedTelemetryMatchStartReason : uint8
{
	NewGame                                  = 0,
	Restart                                  = 1,
	LoadSaveGame                             = 2,
	Matchmaking                              = 3,
	Connected                                = 4,
	ETedTelemetryMatchStartReason_MAX        = 5,
};

// Enum Tempest.ETedTelemetryMatchEndReason
// NumValues: 0x0006
enum class ETedTelemetryMatchEndReason : uint8
{
	Won                                      = 0,
	Lost                                     = 1,
	Disconnected                             = 2,
	Left                                     = 3,
	Surrendered                              = 4,
	ETedTelemetryMatchEndReason_MAX          = 5,
};

// Enum Tempest.ETedTelemetryConstructionStatus
// NumValues: 0x0004
enum class ETedTelemetryConstructionStatus : uint8
{
	BuildStart                               = 0,
	BuildCancelled                           = 1,
	BuildComplete                            = 2,
	ETedTelemetryConstructionStatus_MAX      = 3,
};

// Enum Tempest.ETedTelemetryTrackedSupportPowerResult
// NumValues: 0x0004
enum class ETedTelemetryTrackedSupportPowerResult : uint8
{
	Success                                  = 0,
	Fail                                     = 1,
	MatchEnd                                 = 2,
	ETedTelemetryTrackedSupportPowerResult_MAX = 3,
};

// Enum Tempest.ETedTelemetryTransactionCurrency
// NumValues: 0x0003
enum class ETedTelemetryTransactionCurrency : uint8
{
	DoctrinePoint                            = 0,
	EquipmentPoint                           = 1,
	ETedTelemetryTransactionCurrency_MAX     = 2,
};

// Enum Tempest.ETedTelemetryTransactionType
// NumValues: 0x0004
enum class ETedTelemetryTransactionType : uint8
{
	Add                                      = 0,
	Sub                                      = 1,
	Set                                      = 2,
	ETedTelemetryTransactionType_MAX         = 3,
};

// Enum Tempest.ETedTelemetryMatchType
// NumValues: 0x0005
enum class ETedTelemetryMatchType : uint8
{
	DestroyAllBuildings                      = 0,
	DestroyAllConYards                       = 1,
	PurgeThemAll                             = 2,
	CompleteMainObjectives                   = 3,
	ETedTelemetryMatchType_MAX               = 4,
};

// Enum Tempest.ETedIteration
// NumValues: 0x0003
enum class ETedIteration : uint8
{
	Continue                                 = 0,
	Finish                                   = 1,
	ETedIteration_MAX                        = 2,
};

// Enum Tempest.ETedPawnType
// NumValues: 0x0006
enum class ETedPawnType : uint8
{
	Unknown                                  = 0,
	Infantry                                 = 1,
	Structure                                = 2,
	Vehicle                                  = 3,
	Air                                      = 4,
	ETedPawnType_MAX                         = 5,
};

// Enum Tempest.ETedPlayerControl
// NumValues: 0x0005
enum class ETedPlayerControl : uint8
{
	None                                     = 0,
	Human                                    = 1,
	Bot                                      = 2,
	Uncontrollable                           = 3,
	ETedPlayerControl_MAX                    = 4,
};

// Enum Tempest.ETedBotDifficulty
// NumValues: 0x0005
enum class ETedBotDifficulty : uint8
{
	Easy                                     = 0,
	Default                                  = 1,
	Hard                                     = 2,
	Num                                      = 3,
	ETedBotDifficulty_MAX                    = 4,
};

// Enum Tempest.ETedGameDifficulty
// NumValues: 0x0006
enum class ETedGameDifficulty : uint8
{
	Easy                                     = 0,
	Default                                  = 1,
	Hard                                     = 2,
	VeryHard                                 = 3,
	Num                                      = 4,
	ETedGameDifficulty_MAX                   = 5,
};

// Enum Tempest.ETedGameMusicMode
// NumValues: 0x0003
enum class ETedGameMusicMode : uint8
{
	MUSIC_Mission                            = 0,
	MUSIC_Shuffle                            = 1,
	MUSIC_MAX                                = 2,
};

// Enum Tempest.ETedResourceType
// NumValues: 0x0003
enum class ETedResourceType : uint8
{
	Credits                                  = 0,
	Intel                                    = 1,
	ETedResourceType_MAX                     = 2,
};

// Enum Tempest.ETedResourceChangeReason
// NumValues: 0x0011
enum class ETedResourceChangeReason : uint8
{
	PassiveGeneration                        = 0,
	Pickup                                   = 1,
	PawnKilled                               = 2,
	Command                                  = 3,
	HarvestTempestField                      = 4,
	StructureProduced                        = 5,
	UnitProduced                             = 6,
	DoctrineResearched                       = 7,
	PawnUpgraded                             = 8,
	DoctrineSold                             = 9,
	StructureSold                            = 10,
	CapShrink                                = 11,
	MissionScript                            = 12,
	Reclaim                                  = 13,
	PawnCaptured                             = 14,
	Unspecified                              = 15,
	ETedResourceChangeReason_MAX             = 16,
};

// Enum Tempest.ETedUI_TransitionState
// NumValues: 0x0006
enum class ETedUI_TransitionState : uint8
{
	Finished                                 = 0,
	Increasing                               = 1,
	Decreasing                               = 2,
	FinishedIncreasing                       = 3,
	FinishedDecreasing                       = 4,
	ETedUI_MAX                               = 5,
};

// Enum Tempest.ETedSpectatorMode
// NumValues: 0x0004
enum class ETedSpectatorMode : uint8
{
	None                                     = 0,
	Ally                                     = 1,
	Match                                    = 2,
	ETedSpectatorMode_MAX                    = 3,
};

// Enum Tempest.ESpawnMode
// NumValues: 0x0003
enum class ESpawnMode : uint8
{
	OnBeginPlay                              = 0,
	Manual                                   = 1,
	ESpawnMode_MAX                           = 2,
};

// Enum Tempest.ESpawnerMoveMode
// NumValues: 0x0008
enum class ESpawnerMoveMode : uint8
{
	None                                     = 0,
	MoveToTargetActor                        = 1,
	MoveToTargetLocation                     = 2,
	AttackMoveToTargetActor                  = 3,
	AttackMoveToTargetLocation               = 4,
	FollowTargetActor                        = 5,
	EscortTargetActor                        = 6,
	ESpawnerMoveMode_MAX                     = 7,
};

// Enum Tempest.ETedMovementFlag
// NumValues: 0x0002
enum class ETedMovementFlag : uint8
{
	SpecialMovement                          = 0,
	ETedMovementFlag_MAX                     = 1,
};

// Enum Tempest.ETedUpgradeCondition_ResourceType
// NumValues: 0x0008
enum class ETedUpgradeCondition_ResourceType : uint8
{
	Credits                                  = 0,
	CreditsCap                               = 1,
	Power                                    = 2,
	PowerConsumption                         = 3,
	Intel                                    = 4,
	Population                               = 5,
	UpcomingPopulation                       = 6,
	ETedUpgradeCondition_MAX                 = 7,
};

// Enum Tempest.ETedUpgradeProcessorFlags
// NumValues: 0x000A
enum class ETedUpgradeProcessorFlags : uint8
{
	AppliedToPawns                           = 0,
	AppliedOnPawnDeath                       = 1,
	AppliedToSourcePawns                     = 2,
	Global                                   = 3,
	HasCondition                             = 4,
	ReappliedOnSaveLoad                      = 5,
	IsReplicated                             = 6,
	Max                                      = 7,
	FirstAlwaysOptional                      = 4,
	LastAlwaysOptional                       = 6,
};

// Enum Tempest.ETedSettingSlot
// NumValues: 0x0006
enum class ETedSettingSlot : uint8
{
	TSS_Graphics                             = 0,
	TSS_Audio                                = 1,
	TSS_General                              = 2,
	TSS_Controls                             = 3,
	TSS_PreOrder                             = 4,
	TSS_MAX                                  = 5,
};

// Enum Tempest.EHealthBarsDisplayMode
// NumValues: 0x0007
enum class EHealthBarsDisplayMode : uint8
{
	Normal                                   = 0,
	Selected                                 = 1,
	Damaged                                  = 2,
	DamagedOwned                             = 3,
	Always                                   = 4,
	AlwaysShowOnUnits                        = 5,
	Max                                      = 6,
};

// Enum Tempest.ETedUpscaler
// NumValues: 0x0005
enum class ETedUpscaler : uint8
{
	Off                                      = 0,
	DLSS                                     = 1,
	FSR3                                     = 2,
	XeSS                                     = 3,
	ETedUpscaler_MAX                         = 4,
};

// Enum Tempest.ETedUpscalerPreset
// NumValues: 0x0006
enum class ETedUpscalerPreset : uint8
{
	HighestQuality                           = 0,
	Quality                                  = 1,
	Balanced                                 = 2,
	Performance                              = 3,
	HighestPerformance                       = 4,
	ETedUpscalerPreset_MAX                   = 5,
};

// Enum Tempest.ETedPreOrderMouseCursorSkin
// NumValues: 0x0005
enum class ETedPreOrderMouseCursorSkin : uint8
{
	DefaultCursor                            = 0,
	Cursor1                                  = 1,
	Cursor2                                  = 2,
	Cursor3                                  = 3,
	ETedPreOrderMouseCursorSkin_MAX          = 4,
};

// Enum Tempest.ETedDefaultMoveBehavior
// NumValues: 0x0003
enum class ETedDefaultMoveBehavior : uint8
{
	DefaultMovement                          = 0,
	SynchronizedMovement                     = 1,
	ETedDefaultMoveBehavior_MAX              = 2,
};

// Enum Tempest.ETedDefaultAttackBehavior
// NumValues: 0x0003
enum class ETedDefaultAttackBehavior : uint8
{
	AttackThreats                            = 0,
	AttackAll                                = 1,
	ETedDefaultAttackBehavior_MAX            = 2,
};

// Enum Tempest.ETedAbilityCyclingBehavior
// NumValues: 0x0003
enum class ETedAbilityCyclingBehavior : uint8
{
	CycleAll                                 = 0,
	CycleWithAbilities                       = 1,
	ETedAbilityCyclingBehavior_MAX           = 2,
};

// Enum Tempest.ETedWeaponAmmoCheckOptions
// NumValues: 0x0004
enum class ETedWeaponAmmoCheckOptions : uint8
{
	CurrentWeapon                            = 0,
	AnyWeapon                                = 1,
	AllWeapons                               = 2,
	ETedWeaponAmmoCheckOptions_MAX           = 3,
};

// Enum Tempest.EDamageKind
// NumValues: 0x0005
enum class EDamageKind : uint8
{
	Point                                    = 0,
	Radial                                   = 1,
	Cone                                     = 2,
	Invalid                                  = 3,
	EDamageKind_MAX                          = 4,
};

// Enum Tempest.ETempestFieldGrowthStage
// NumValues: 0x0006
enum class ETempestFieldGrowthStage : uint8
{
	Initial                                  = 0,
	Vines                                    = 1,
	SmallGrowth                              = 2,
	MediumGrowth                             = 3,
	MaxGrowth                                = 4,
	ETempestFieldGrowthStage_MAX             = 5,
};

// Enum Tempest.ETempestFieldElementStage
// NumValues: 0x0008
enum class ETempestFieldElementStage : uint8
{
	Initial                                  = 0,
	Vines                                    = 1,
	SmallGrowth                              = 2,
	MediumGrowth                             = 3,
	MaxGrowth                                = 4,
	Rotten                                   = 5,
	Uninitialized                            = 6,
	ETempestFieldElementStage_MAX            = 7,
};

// Enum Tempest.EUtilityAIActionInfluenceMapQueryType
// NumValues: 0x0003
enum class EUtilityAIActionInfluenceMapQueryType : uint8
{
	HighestValueInRange                      = 0,
	LowestValueInRange                       = 1,
	EUtilityAIActionInfluenceMapQueryType_MAX = 2,
};

// Enum Tempest.EUtilityAITargetGeneratorQueryLocationMode
// NumValues: 0x0003
enum class EUtilityAITargetGeneratorQueryLocationMode : uint8
{
	OwnerLocation                            = 0,
	LeashLocation                            = 1,
	EUtilityAITargetGeneratorQueryLocationMode_MAX = 2,
};

// Enum Tempest.EUtilityAITargetGeneratorQueryRangeMode
// NumValues: 0x0003
enum class EUtilityAITargetGeneratorQueryRangeMode : uint8
{
	DataProvider                             = 0,
	ChaseRange                               = 1,
	EUtilityAITargetGeneratorQueryRangeMode_MAX = 2,
};

// Enum Tempest.EUtilityAITargetDistanceSorterMode
// NumValues: 0x0004
enum class EUtilityAITargetDistanceSorterMode : uint8
{
	None                                     = 0,
	Ascending                                = 1,
	Descending                               = 2,
	EUtilityAITargetDistanceSorterMode_MAX   = 3,
};

// ScriptStruct Tempest.TedDefinitionRef
// 0x0000 (0x0020 - 0x0020)
struct FTedDefinitionRef final : public FSmartDataAssetHandle
{
};
static_assert(alignof(FTedDefinitionRef) == 0x000008, "Wrong alignment on FTedDefinitionRef");
static_assert(sizeof(FTedDefinitionRef) == 0x000020, "Wrong size on FTedDefinitionRef");

// ScriptStruct Tempest.TedConstructionElementType
// 0x0028 (0x0028 - 0x0000)
struct FTedConstructionElementType final
{
public:
	struct FTedDefinitionRef                      DefinitionRef;                                     // 0x0000(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedConstructionElementType) == 0x000008, "Wrong alignment on FTedConstructionElementType");
static_assert(sizeof(FTedConstructionElementType) == 0x000028, "Wrong size on FTedConstructionElementType");
static_assert(offsetof(FTedConstructionElementType, DefinitionRef) == 0x000000, "Member 'FTedConstructionElementType::DefinitionRef' has a wrong offset!");

// ScriptStruct Tempest.RepCurveBase
// 0x0001 (0x0001 - 0x0000)
struct FRepCurveBase
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepCurveBase) == 0x000001, "Wrong alignment on FRepCurveBase");
static_assert(sizeof(FRepCurveBase) == 0x000001, "Wrong size on FRepCurveBase");

// ScriptStruct Tempest.RepCurve_Float
// 0x0017 (0x0018 - 0x0001)
struct alignas(0x04) FRepCurve_Float final : public FRepCurveBase
{
public:
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepCurve_Float) == 0x000004, "Wrong alignment on FRepCurve_Float");
static_assert(sizeof(FRepCurve_Float) == 0x000018, "Wrong size on FRepCurve_Float");

// ScriptStruct Tempest.TedConstructionProgress
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FTedConstructionProgress
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepCurve_Float                        Progress;                                          // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	float                                         PausedProgress;                                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPaused : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHalted : 1;                                       // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulatedCredits;                                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedConstructionProgress) == 0x000008, "Wrong alignment on FTedConstructionProgress");
static_assert(sizeof(FTedConstructionProgress) == 0x000030, "Wrong size on FTedConstructionProgress");
static_assert(offsetof(FTedConstructionProgress, Progress) == 0x000008, "Member 'FTedConstructionProgress::Progress' has a wrong offset!");
static_assert(offsetof(FTedConstructionProgress, PausedProgress) == 0x000020, "Member 'FTedConstructionProgress::PausedProgress' has a wrong offset!");
static_assert(offsetof(FTedConstructionProgress, AccumulatedCredits) == 0x000028, "Member 'FTedConstructionProgress::AccumulatedCredits' has a wrong offset!");

// ScriptStruct Tempest.TedConstructionElementProgress
// 0x0040 (0x0070 - 0x0030)
struct FTedConstructionElementProgress final : public FTedConstructionProgress
{
public:
	struct FTedConstructionElementType            Type;                                              // 0x0030(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedConstructionSite*>           ConstructionSites;                                 // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bConditionallyPlayConstructionSiteAnim;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayedTransformAnim;                              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StructureTransformTime;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConstructionElementProgress) == 0x000008, "Wrong alignment on FTedConstructionElementProgress");
static_assert(sizeof(FTedConstructionElementProgress) == 0x000070, "Wrong size on FTedConstructionElementProgress");
static_assert(offsetof(FTedConstructionElementProgress, Type) == 0x000030, "Member 'FTedConstructionElementProgress::Type' has a wrong offset!");
static_assert(offsetof(FTedConstructionElementProgress, ConstructionSites) == 0x000058, "Member 'FTedConstructionElementProgress::ConstructionSites' has a wrong offset!");
static_assert(offsetof(FTedConstructionElementProgress, bConditionallyPlayConstructionSiteAnim) == 0x000068, "Member 'FTedConstructionElementProgress::bConditionallyPlayConstructionSiteAnim' has a wrong offset!");
static_assert(offsetof(FTedConstructionElementProgress, bPlayedTransformAnim) == 0x000069, "Member 'FTedConstructionElementProgress::bPlayedTransformAnim' has a wrong offset!");
static_assert(offsetof(FTedConstructionElementProgress, StructureTransformTime) == 0x00006C, "Member 'FTedConstructionElementProgress::StructureTransformTime' has a wrong offset!");

// ScriptStruct Tempest.TedConstructionQueue
// 0x0058 (0x0058 - 0x0000)
struct FTedConstructionQueue final
{
public:
	struct FGameplayTag                           QueueType;                                         // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      Factory;                                           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTedConstructionElementType>    Order;                                             // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedConstructionElementProgress> Progresses;                                       // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTedConstructionElementType            CompletedStructure;                                // 0x0030(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConstructionQueue) == 0x000008, "Wrong alignment on FTedConstructionQueue");
static_assert(sizeof(FTedConstructionQueue) == 0x000058, "Wrong size on FTedConstructionQueue");
static_assert(offsetof(FTedConstructionQueue, QueueType) == 0x000000, "Member 'FTedConstructionQueue::QueueType' has a wrong offset!");
static_assert(offsetof(FTedConstructionQueue, Factory) == 0x000008, "Member 'FTedConstructionQueue::Factory' has a wrong offset!");
static_assert(offsetof(FTedConstructionQueue, Order) == 0x000010, "Member 'FTedConstructionQueue::Order' has a wrong offset!");
static_assert(offsetof(FTedConstructionQueue, Progresses) == 0x000020, "Member 'FTedConstructionQueue::Progresses' has a wrong offset!");
static_assert(offsetof(FTedConstructionQueue, CompletedStructure) == 0x000030, "Member 'FTedConstructionQueue::CompletedStructure' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataConstructionQueues
// 0x0018 (0x0018 - 0x0000)
struct FTedPlayerDataConstructionQueues final
{
public:
	TArray<struct FTedConstructionQueue>          Queues;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RepID;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPlayerDataConstructionQueues) == 0x000008, "Wrong alignment on FTedPlayerDataConstructionQueues");
static_assert(sizeof(FTedPlayerDataConstructionQueues) == 0x000018, "Wrong size on FTedPlayerDataConstructionQueues");
static_assert(offsetof(FTedPlayerDataConstructionQueues, Queues) == 0x000000, "Member 'FTedPlayerDataConstructionQueues::Queues' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataConstructionQueues, RepID) == 0x000010, "Member 'FTedPlayerDataConstructionQueues::RepID' has a wrong offset!");

// ScriptStruct Tempest.ServerPlayerContext
// 0x0040 (0x0040 - 0x0000)
struct FServerPlayerContext final
{
public:
	class FString                                 PlayerID;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 playerSessionId;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerPlayerContext) == 0x000008, "Wrong alignment on FServerPlayerContext");
static_assert(sizeof(FServerPlayerContext) == 0x000040, "Wrong size on FServerPlayerContext");
static_assert(offsetof(FServerPlayerContext, PlayerID) == 0x000000, "Member 'FServerPlayerContext::PlayerID' has a wrong offset!");
static_assert(offsetof(FServerPlayerContext, playerSessionId) == 0x000010, "Member 'FServerPlayerContext::playerSessionId' has a wrong offset!");
static_assert(offsetof(FServerPlayerContext, Platform) == 0x000020, "Member 'FServerPlayerContext::Platform' has a wrong offset!");
static_assert(offsetof(FServerPlayerContext, Provider) == 0x000030, "Member 'FServerPlayerContext::Provider' has a wrong offset!");

// ScriptStruct Tempest.QueryTestConfig
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FQueryTestConfig
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EEnvTestPurpose                               TestPurpose;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEnvTestFilterType                            FilterType;                                        // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatValueMin;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMax;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoringFactor;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueryTestConfig) == 0x000008, "Wrong alignment on FQueryTestConfig");
static_assert(sizeof(FQueryTestConfig) == 0x000018, "Wrong size on FQueryTestConfig");
static_assert(offsetof(FQueryTestConfig, TestPurpose) == 0x000008, "Member 'FQueryTestConfig::TestPurpose' has a wrong offset!");
static_assert(offsetof(FQueryTestConfig, FilterType) == 0x000009, "Member 'FQueryTestConfig::FilterType' has a wrong offset!");
static_assert(offsetof(FQueryTestConfig, FloatValueMin) == 0x00000C, "Member 'FQueryTestConfig::FloatValueMin' has a wrong offset!");
static_assert(offsetof(FQueryTestConfig, FloatValueMax) == 0x000010, "Member 'FQueryTestConfig::FloatValueMax' has a wrong offset!");
static_assert(offsetof(FQueryTestConfig, ScoringFactor) == 0x000014, "Member 'FQueryTestConfig::ScoringFactor' has a wrong offset!");

// ScriptStruct Tempest.QueryTestConfig_Distance
// 0x0008 (0x0020 - 0x0018)
struct FQueryTestConfig_Distance : public FQueryTestConfig
{
public:
	bool                                          bUsePathLength;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueryTestConfig_Distance) == 0x000008, "Wrong alignment on FQueryTestConfig_Distance");
static_assert(sizeof(FQueryTestConfig_Distance) == 0x000020, "Wrong size on FQueryTestConfig_Distance");
static_assert(offsetof(FQueryTestConfig_Distance, bUsePathLength) == 0x000018, "Member 'FQueryTestConfig_Distance::bUsePathLength' has a wrong offset!");

// ScriptStruct Tempest.QueryTestConfig_Distance_RefineryDeployLoc
// 0x0008 (0x0028 - 0x0020)
struct FQueryTestConfig_Distance_RefineryDeployLoc final : public FQueryTestConfig_Distance
{
public:
	bool                                          bTestContextIsResourceVolume;                      // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueryTestConfig_Distance_RefineryDeployLoc) == 0x000008, "Wrong alignment on FQueryTestConfig_Distance_RefineryDeployLoc");
static_assert(sizeof(FQueryTestConfig_Distance_RefineryDeployLoc) == 0x000028, "Wrong size on FQueryTestConfig_Distance_RefineryDeployLoc");
static_assert(offsetof(FQueryTestConfig_Distance_RefineryDeployLoc, bTestContextIsResourceVolume) == 0x000020, "Member 'FQueryTestConfig_Distance_RefineryDeployLoc::bTestContextIsResourceVolume' has a wrong offset!");

// ScriptStruct Tempest.ClientLobbyProgressBiEvent_LobbyDetails
// 0x0030 (0x0030 - 0x0000)
struct FClientLobbyProgressBiEvent_LobbyDetails final
{
public:
	class FString                                 matchLobbyUid;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMatchWithLobby;                                  // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 lobbyStep;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         lobbyLoadingTime;                                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         timeSinceJoin;                                     // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLobbyProgressBiEvent_LobbyDetails) == 0x000008, "Wrong alignment on FClientLobbyProgressBiEvent_LobbyDetails");
static_assert(sizeof(FClientLobbyProgressBiEvent_LobbyDetails) == 0x000030, "Wrong size on FClientLobbyProgressBiEvent_LobbyDetails");
static_assert(offsetof(FClientLobbyProgressBiEvent_LobbyDetails, matchLobbyUid) == 0x000000, "Member 'FClientLobbyProgressBiEvent_LobbyDetails::matchLobbyUid' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_LobbyDetails, isMatchWithLobby) == 0x000010, "Member 'FClientLobbyProgressBiEvent_LobbyDetails::isMatchWithLobby' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_LobbyDetails, lobbyStep) == 0x000018, "Member 'FClientLobbyProgressBiEvent_LobbyDetails::lobbyStep' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_LobbyDetails, lobbyLoadingTime) == 0x000028, "Member 'FClientLobbyProgressBiEvent_LobbyDetails::lobbyLoadingTime' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_LobbyDetails, timeSinceJoin) == 0x00002C, "Member 'FClientLobbyProgressBiEvent_LobbyDetails::timeSinceJoin' has a wrong offset!");

// ScriptStruct Tempest.MatchDetails
// 0x0078 (0x0078 - 0x0000)
struct FMatchDetails final
{
public:
	class FString                                 matchUid;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchMode;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LobbySize;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealPlayers;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotPlayers;                                        // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DifficultyMode;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isHost;                                            // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 allStartingPositions;                              // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchDetails) == 0x000008, "Wrong alignment on FMatchDetails");
static_assert(sizeof(FMatchDetails) == 0x000078, "Wrong size on FMatchDetails");
static_assert(offsetof(FMatchDetails, matchUid) == 0x000000, "Member 'FMatchDetails::matchUid' has a wrong offset!");
static_assert(offsetof(FMatchDetails, MapName) == 0x000010, "Member 'FMatchDetails::MapName' has a wrong offset!");
static_assert(offsetof(FMatchDetails, MatchMode) == 0x000020, "Member 'FMatchDetails::MatchMode' has a wrong offset!");
static_assert(offsetof(FMatchDetails, MatchType) == 0x000030, "Member 'FMatchDetails::MatchType' has a wrong offset!");
static_assert(offsetof(FMatchDetails, LobbySize) == 0x000040, "Member 'FMatchDetails::LobbySize' has a wrong offset!");
static_assert(offsetof(FMatchDetails, RealPlayers) == 0x000044, "Member 'FMatchDetails::RealPlayers' has a wrong offset!");
static_assert(offsetof(FMatchDetails, BotPlayers) == 0x000048, "Member 'FMatchDetails::BotPlayers' has a wrong offset!");
static_assert(offsetof(FMatchDetails, DifficultyMode) == 0x000050, "Member 'FMatchDetails::DifficultyMode' has a wrong offset!");
static_assert(offsetof(FMatchDetails, isHost) == 0x000060, "Member 'FMatchDetails::isHost' has a wrong offset!");
static_assert(offsetof(FMatchDetails, allStartingPositions) == 0x000068, "Member 'FMatchDetails::allStartingPositions' has a wrong offset!");

// ScriptStruct Tempest.PlayerSettings
// 0x0048 (0x0048 - 0x0000)
struct FPlayerSettings final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Slot;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color;                                             // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Team;                                              // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startingPosition;                                  // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerSettings) == 0x000008, "Wrong alignment on FPlayerSettings");
static_assert(sizeof(FPlayerSettings) == 0x000048, "Wrong size on FPlayerSettings");
static_assert(offsetof(FPlayerSettings, Faction) == 0x000000, "Member 'FPlayerSettings::Faction' has a wrong offset!");
static_assert(offsetof(FPlayerSettings, Slot) == 0x000010, "Member 'FPlayerSettings::Slot' has a wrong offset!");
static_assert(offsetof(FPlayerSettings, Color) == 0x000020, "Member 'FPlayerSettings::Color' has a wrong offset!");
static_assert(offsetof(FPlayerSettings, Team) == 0x000030, "Member 'FPlayerSettings::Team' has a wrong offset!");
static_assert(offsetof(FPlayerSettings, startingPosition) == 0x000040, "Member 'FPlayerSettings::startingPosition' has a wrong offset!");

// ScriptStruct Tempest.ClientLobbyProgressBiEvent_MatchSettings
// 0x0068 (0x0068 - 0x0000)
struct FClientLobbyProgressBiEvent_MatchSettings final
{
public:
	class FString                                 pickups;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 supportPowers;                                     // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 allyBuildRadius;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingCredits;                                   // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 buildTime;                                         // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartingArmy;                                      // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 regrowthRate;                                      // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLobbyProgressBiEvent_MatchSettings) == 0x000008, "Wrong alignment on FClientLobbyProgressBiEvent_MatchSettings");
static_assert(sizeof(FClientLobbyProgressBiEvent_MatchSettings) == 0x000068, "Wrong size on FClientLobbyProgressBiEvent_MatchSettings");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, pickups) == 0x000000, "Member 'FClientLobbyProgressBiEvent_MatchSettings::pickups' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, supportPowers) == 0x000010, "Member 'FClientLobbyProgressBiEvent_MatchSettings::supportPowers' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, allyBuildRadius) == 0x000020, "Member 'FClientLobbyProgressBiEvent_MatchSettings::allyBuildRadius' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, StartingCredits) == 0x000030, "Member 'FClientLobbyProgressBiEvent_MatchSettings::StartingCredits' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, buildTime) == 0x000038, "Member 'FClientLobbyProgressBiEvent_MatchSettings::buildTime' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, StartingArmy) == 0x000048, "Member 'FClientLobbyProgressBiEvent_MatchSettings::StartingArmy' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent_MatchSettings, regrowthRate) == 0x000058, "Member 'FClientLobbyProgressBiEvent_MatchSettings::regrowthRate' has a wrong offset!");

// ScriptStruct Tempest.ClientLobbyProgressBiEvent
// 0x0158 (0x0158 - 0x0000)
struct FClientLobbyProgressBiEvent final
{
public:
	struct FClientLobbyProgressBiEvent_LobbyDetails lobbyDetails;                                    // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0030(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerSettings                        biPlayerSettings;                                  // 0x00A8(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientLobbyProgressBiEvent_MatchSettings MatchSettings;                                  // 0x00F0(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLobbyProgressBiEvent) == 0x000008, "Wrong alignment on FClientLobbyProgressBiEvent");
static_assert(sizeof(FClientLobbyProgressBiEvent) == 0x000158, "Wrong size on FClientLobbyProgressBiEvent");
static_assert(offsetof(FClientLobbyProgressBiEvent, lobbyDetails) == 0x000000, "Member 'FClientLobbyProgressBiEvent::lobbyDetails' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent, biMatchDetails) == 0x000030, "Member 'FClientLobbyProgressBiEvent::biMatchDetails' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent, biPlayerSettings) == 0x0000A8, "Member 'FClientLobbyProgressBiEvent::biPlayerSettings' has a wrong offset!");
static_assert(offsetof(FClientLobbyProgressBiEvent, MatchSettings) == 0x0000F0, "Member 'FClientLobbyProgressBiEvent::MatchSettings' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionModAggregatorRef
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTedDefinitionModAggregatorRef final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionModAggregatorRef) == 0x000008, "Wrong alignment on FTedDefinitionModAggregatorRef");
static_assert(sizeof(FTedDefinitionModAggregatorRef) == 0x000010, "Wrong size on FTedDefinitionModAggregatorRef");

// ScriptStruct Tempest.TedChatMessage
// 0x0070 (0x0070 - 0x0000)
struct FTedChatMessage final
{
public:
	EChatMessageDestination                       Destination;                                       // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChatMessageSender                            Sender;                                            // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SenderPlayerId;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestinationPlayerId;                               // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   SenderName;                                        // 0x0028(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FDateTime                              Timestamp;                                         // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x18];                                      // 0x0058(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChatMessage) == 0x000008, "Wrong alignment on FTedChatMessage");
static_assert(sizeof(FTedChatMessage) == 0x000070, "Wrong size on FTedChatMessage");
static_assert(offsetof(FTedChatMessage, Destination) == 0x000000, "Member 'FTedChatMessage::Destination' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, Sender) == 0x000001, "Member 'FTedChatMessage::Sender' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, SenderPlayerId) == 0x000008, "Member 'FTedChatMessage::SenderPlayerId' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, DestinationPlayerId) == 0x000018, "Member 'FTedChatMessage::DestinationPlayerId' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, SenderName) == 0x000028, "Member 'FTedChatMessage::SenderName' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, Timestamp) == 0x000038, "Member 'FTedChatMessage::Timestamp' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, TeamID) == 0x000040, "Member 'FTedChatMessage::TeamID' has a wrong offset!");
static_assert(offsetof(FTedChatMessage, Message) == 0x000048, "Member 'FTedChatMessage::Message' has a wrong offset!");

// ScriptStruct Tempest.MatchTelemetry
// 0x0018 (0x0018 - 0x0000)
struct FMatchTelemetry final
{
public:
	float                                         AvgPing;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         avgFps;                                            // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 fpsHistogram;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchTelemetry) == 0x000008, "Wrong alignment on FMatchTelemetry");
static_assert(sizeof(FMatchTelemetry) == 0x000018, "Wrong size on FMatchTelemetry");
static_assert(offsetof(FMatchTelemetry, AvgPing) == 0x000000, "Member 'FMatchTelemetry::AvgPing' has a wrong offset!");
static_assert(offsetof(FMatchTelemetry, avgFps) == 0x000004, "Member 'FMatchTelemetry::avgFps' has a wrong offset!");
static_assert(offsetof(FMatchTelemetry, fpsHistogram) == 0x000008, "Member 'FMatchTelemetry::fpsHistogram' has a wrong offset!");

// ScriptStruct Tempest.TedInfantryAnimSet
// 0x0078 (0x0078 - 0x0000)
struct FTedInfantryAnimSet final
{
public:
	class UBlendSpace*                            BS_Movement;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BS_Movement_Crawling;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_IdleToAim;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_AimToIdle;                                    // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_Aim;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_Aim_Crawling;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_StandingToCrawling;                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_CrawlingToStanding;                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_ParachuteBegin;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_ParachuteLoop;                                // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Anim_ParachuteEnd;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  IdleBreaks;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAnimSequence*>                  ShootingIdleBreaks;                                // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedInfantryAnimSet) == 0x000008, "Wrong alignment on FTedInfantryAnimSet");
static_assert(sizeof(FTedInfantryAnimSet) == 0x000078, "Wrong size on FTedInfantryAnimSet");
static_assert(offsetof(FTedInfantryAnimSet, BS_Movement) == 0x000000, "Member 'FTedInfantryAnimSet::BS_Movement' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, BS_Movement_Crawling) == 0x000008, "Member 'FTedInfantryAnimSet::BS_Movement_Crawling' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_IdleToAim) == 0x000010, "Member 'FTedInfantryAnimSet::Anim_IdleToAim' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_AimToIdle) == 0x000018, "Member 'FTedInfantryAnimSet::Anim_AimToIdle' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_Aim) == 0x000020, "Member 'FTedInfantryAnimSet::Anim_Aim' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_Aim_Crawling) == 0x000028, "Member 'FTedInfantryAnimSet::Anim_Aim_Crawling' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_StandingToCrawling) == 0x000030, "Member 'FTedInfantryAnimSet::Anim_StandingToCrawling' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_CrawlingToStanding) == 0x000038, "Member 'FTedInfantryAnimSet::Anim_CrawlingToStanding' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_ParachuteBegin) == 0x000040, "Member 'FTedInfantryAnimSet::Anim_ParachuteBegin' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_ParachuteLoop) == 0x000048, "Member 'FTedInfantryAnimSet::Anim_ParachuteLoop' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, Anim_ParachuteEnd) == 0x000050, "Member 'FTedInfantryAnimSet::Anim_ParachuteEnd' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, IdleBreaks) == 0x000058, "Member 'FTedInfantryAnimSet::IdleBreaks' has a wrong offset!");
static_assert(offsetof(FTedInfantryAnimSet, ShootingIdleBreaks) == 0x000068, "Member 'FTedInfantryAnimSet::ShootingIdleBreaks' has a wrong offset!");

// ScriptStruct Tempest.ProsQrCodeState
// 0x0020 (0x0020 - 0x0000)
struct FProsQrCodeState final
{
public:
	bool                                          bSucceeded;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlreadyLinked;                                  // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpiresIn;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Link;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Image;                                             // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProsQrCodeState) == 0x000008, "Wrong alignment on FProsQrCodeState");
static_assert(sizeof(FProsQrCodeState) == 0x000020, "Wrong size on FProsQrCodeState");
static_assert(offsetof(FProsQrCodeState, bSucceeded) == 0x000000, "Member 'FProsQrCodeState::bSucceeded' has a wrong offset!");
static_assert(offsetof(FProsQrCodeState, bIsAlreadyLinked) == 0x000001, "Member 'FProsQrCodeState::bIsAlreadyLinked' has a wrong offset!");
static_assert(offsetof(FProsQrCodeState, ExpiresIn) == 0x000004, "Member 'FProsQrCodeState::ExpiresIn' has a wrong offset!");
static_assert(offsetof(FProsQrCodeState, Link) == 0x000008, "Member 'FProsQrCodeState::Link' has a wrong offset!");
static_assert(offsetof(FProsQrCodeState, Image) == 0x000018, "Member 'FProsQrCodeState::Image' has a wrong offset!");

// ScriptStruct Tempest.TedInstancedStruct
// 0x0000 (0x0010 - 0x0010)
struct FTedInstancedStruct final : public FInstancedStruct
{
};
static_assert(alignof(FTedInstancedStruct) == 0x000008, "Wrong alignment on FTedInstancedStruct");
static_assert(sizeof(FTedInstancedStruct) == 0x000010, "Wrong size on FTedInstancedStruct");

// ScriptStruct Tempest.TedUpgradeProcessor
// 0x0020 (0x0020 - 0x0000)
struct FTedUpgradeProcessor
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ProcessorFlags;                                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedInstancedStruct                    Condition;                                         // 0x0010(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor) == 0x000008, "Wrong alignment on FTedUpgradeProcessor");
static_assert(sizeof(FTedUpgradeProcessor) == 0x000020, "Wrong size on FTedUpgradeProcessor");
static_assert(offsetof(FTedUpgradeProcessor, ProcessorFlags) == 0x000008, "Member 'FTedUpgradeProcessor::ProcessorFlags' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor, Condition) == 0x000010, "Member 'FTedUpgradeProcessor::Condition' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_Custom
// 0x0008 (0x0028 - 0x0020)
struct FTedUpgradeProcessor_Custom final : public FTedUpgradeProcessor
{
public:
	TSubclassOf<class UTedCustomUpgradeLogic>     UpgradeLogicClass;                                 // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_Custom) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_Custom");
static_assert(sizeof(FTedUpgradeProcessor_Custom) == 0x000028, "Wrong size on FTedUpgradeProcessor_Custom");
static_assert(offsetof(FTedUpgradeProcessor_Custom, UpgradeLogicClass) == 0x000020, "Member 'FTedUpgradeProcessor_Custom::UpgradeLogicClass' has a wrong offset!");

// ScriptStruct Tempest.TedDialogueLine
// 0x0040 (0x0040 - 0x0000)
struct FTedDialogueLine final
{
public:
	ETedDialogueLineType                          Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULevelSequence>          Sequence;                                          // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDialogueLine) == 0x000008, "Wrong alignment on FTedDialogueLine");
static_assert(sizeof(FTedDialogueLine) == 0x000040, "Wrong size on FTedDialogueLine");
static_assert(offsetof(FTedDialogueLine, Type) == 0x000000, "Member 'FTedDialogueLine::Type' has a wrong offset!");
static_assert(offsetof(FTedDialogueLine, DisplayText) == 0x000008, "Member 'FTedDialogueLine::DisplayText' has a wrong offset!");
static_assert(offsetof(FTedDialogueLine, Sequence) == 0x000018, "Member 'FTedDialogueLine::Sequence' has a wrong offset!");

// ScriptStruct Tempest.TedEditableCustomAttitude
// 0x0003 (0x0003 - 0x0000)
struct FTedEditableCustomAttitude final
{
public:
	ETedTeamID                                    A;                                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    B;                                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETeamAttitude                                 Attitude;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedEditableCustomAttitude) == 0x000001, "Wrong alignment on FTedEditableCustomAttitude");
static_assert(sizeof(FTedEditableCustomAttitude) == 0x000003, "Wrong size on FTedEditableCustomAttitude");
static_assert(offsetof(FTedEditableCustomAttitude, A) == 0x000000, "Member 'FTedEditableCustomAttitude::A' has a wrong offset!");
static_assert(offsetof(FTedEditableCustomAttitude, B) == 0x000001, "Member 'FTedEditableCustomAttitude::B' has a wrong offset!");
static_assert(offsetof(FTedEditableCustomAttitude, Attitude) == 0x000002, "Member 'FTedEditableCustomAttitude::Attitude' has a wrong offset!");

// ScriptStruct Tempest.TedCommandWithBehaviorAssetSpec
// 0x0030 (0x0030 - 0x0000)
struct FTedCommandWithBehaviorAssetSpec final
{
public:
	TSoftObjectPtr<class UBehaviorTree>           BehaviorAsset;                                     // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldRestartBehaviorTree : 1;                    // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCommandWithBehaviorAssetSpec) == 0x000008, "Wrong alignment on FTedCommandWithBehaviorAssetSpec");
static_assert(sizeof(FTedCommandWithBehaviorAssetSpec) == 0x000030, "Wrong size on FTedCommandWithBehaviorAssetSpec");
static_assert(offsetof(FTedCommandWithBehaviorAssetSpec, BehaviorAsset) == 0x000000, "Member 'FTedCommandWithBehaviorAssetSpec::BehaviorAsset' has a wrong offset!");

// ScriptStruct Tempest.TedOnlinePlayerData
// 0x0030 (0x0030 - 0x0000)
struct FTedOnlinePlayerData final
{
public:
	class FString                                 HydraId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nickname;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedOnlinePlayerData) == 0x000008, "Wrong alignment on FTedOnlinePlayerData");
static_assert(sizeof(FTedOnlinePlayerData) == 0x000030, "Wrong size on FTedOnlinePlayerData");
static_assert(offsetof(FTedOnlinePlayerData, HydraId) == 0x000000, "Member 'FTedOnlinePlayerData::HydraId' has a wrong offset!");
static_assert(offsetof(FTedOnlinePlayerData, SteamId) == 0x000010, "Member 'FTedOnlinePlayerData::SteamId' has a wrong offset!");
static_assert(offsetof(FTedOnlinePlayerData, Nickname) == 0x000020, "Member 'FTedOnlinePlayerData::Nickname' has a wrong offset!");

// ScriptStruct Tempest.TedRankedMatchSettings
// 0x0006 (0x0006 - 0x0000)
struct FTedRankedMatchSettings final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedFaction                             RankedFaction;                                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                RankedTeam;                                        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        Season;                                            // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedRankedMatchSettings) == 0x000002, "Wrong alignment on FTedRankedMatchSettings");
static_assert(sizeof(FTedRankedMatchSettings) == 0x000006, "Wrong size on FTedRankedMatchSettings");
static_assert(offsetof(FTedRankedMatchSettings, ServerType) == 0x000000, "Member 'FTedRankedMatchSettings::ServerType' has a wrong offset!");
static_assert(offsetof(FTedRankedMatchSettings, RankedFaction) == 0x000001, "Member 'FTedRankedMatchSettings::RankedFaction' has a wrong offset!");
static_assert(offsetof(FTedRankedMatchSettings, RankedTeam) == 0x000002, "Member 'FTedRankedMatchSettings::RankedTeam' has a wrong offset!");
static_assert(offsetof(FTedRankedMatchSettings, Season) == 0x000004, "Member 'FTedRankedMatchSettings::Season' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardData
// 0x0020 (0x0020 - 0x0000)
struct FTedLeaderboardData final
{
public:
	ETedRatingAlgorithm                           RatingAlgorithm;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rating;                                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatingDeviation;                                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RatingVolatility;                                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Won;                                               // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Lost;                                              // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         UnixTimestamp;                                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLeaderboardData) == 0x000008, "Wrong alignment on FTedLeaderboardData");
static_assert(sizeof(FTedLeaderboardData) == 0x000020, "Wrong size on FTedLeaderboardData");
static_assert(offsetof(FTedLeaderboardData, RatingAlgorithm) == 0x000000, "Member 'FTedLeaderboardData::RatingAlgorithm' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, Rating) == 0x000004, "Member 'FTedLeaderboardData::Rating' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, RatingDeviation) == 0x000008, "Member 'FTedLeaderboardData::RatingDeviation' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, RatingVolatility) == 0x00000C, "Member 'FTedLeaderboardData::RatingVolatility' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, Won) == 0x000010, "Member 'FTedLeaderboardData::Won' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, Lost) == 0x000012, "Member 'FTedLeaderboardData::Lost' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardData, UnixTimestamp) == 0x000018, "Member 'FTedLeaderboardData::UnixTimestamp' has a wrong offset!");

// ScriptStruct Tempest.TedRankedRow
// 0x0070 (0x0070 - 0x0000)
struct FTedRankedRow final
{
public:
	struct FTedOnlinePlayerData                   Player;                                            // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	struct FTedRankedMatchSettings                MatchSettings;                                     // 0x0030(0x0006)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedLeaderboardData                    Data;                                              // 0x0038(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 LeaderboardName;                                   // 0x0058(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LbBackendPosition;                                 // 0x0068(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedRankedRow) == 0x000008, "Wrong alignment on FTedRankedRow");
static_assert(sizeof(FTedRankedRow) == 0x000070, "Wrong size on FTedRankedRow");
static_assert(offsetof(FTedRankedRow, Player) == 0x000000, "Member 'FTedRankedRow::Player' has a wrong offset!");
static_assert(offsetof(FTedRankedRow, MatchSettings) == 0x000030, "Member 'FTedRankedRow::MatchSettings' has a wrong offset!");
static_assert(offsetof(FTedRankedRow, Data) == 0x000038, "Member 'FTedRankedRow::Data' has a wrong offset!");
static_assert(offsetof(FTedRankedRow, LeaderboardName) == 0x000058, "Member 'FTedRankedRow::LeaderboardName' has a wrong offset!");
static_assert(offsetof(FTedRankedRow, LbBackendPosition) == 0x000068, "Member 'FTedRankedRow::LbBackendPosition' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardUser
// 0x0080 (0x0080 - 0x0000)
struct FTedLeaderboardUser final
{
public:
	ETedPlayerID                                  PlayerID;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedRankedRow                          RankedRow;                                         // 0x0008(0x0070)(NativeAccessSpecifierPublic)
	class ATedPlayerController*                   TempPC;                                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLeaderboardUser) == 0x000008, "Wrong alignment on FTedLeaderboardUser");
static_assert(sizeof(FTedLeaderboardUser) == 0x000080, "Wrong size on FTedLeaderboardUser");
static_assert(offsetof(FTedLeaderboardUser, PlayerID) == 0x000000, "Member 'FTedLeaderboardUser::PlayerID' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUser, TeamID) == 0x000001, "Member 'FTedLeaderboardUser::TeamID' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUser, bIsWinner) == 0x000002, "Member 'FTedLeaderboardUser::bIsWinner' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUser, RankedRow) == 0x000008, "Member 'FTedLeaderboardUser::RankedRow' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUser, TempPC) == 0x000078, "Member 'FTedLeaderboardUser::TempPC' has a wrong offset!");

// ScriptStruct Tempest.TedChatPartyContext
// 0x0030 (0x0030 - 0x0000)
struct FTedChatPartyContext final
{
public:
	EChatMessageDestination                       Destination;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TOptional<class FString>                      UniqueID;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChatPartyContext) == 0x000008, "Wrong alignment on FTedChatPartyContext");
static_assert(sizeof(FTedChatPartyContext) == 0x000030, "Wrong size on FTedChatPartyContext");
static_assert(offsetof(FTedChatPartyContext, Destination) == 0x000000, "Member 'FTedChatPartyContext::Destination' has a wrong offset!");
static_assert(offsetof(FTedChatPartyContext, UniqueID) == 0x000008, "Member 'FTedChatPartyContext::UniqueID' has a wrong offset!");
static_assert(offsetof(FTedChatPartyContext, DisplayName) == 0x000020, "Member 'FTedChatPartyContext::DisplayName' has a wrong offset!");

// ScriptStruct Tempest.ClientCutsceneResultBiEvent_EventContext
// 0x0030 (0x0030 - 0x0000)
struct FClientCutsceneResultBiEvent_EventContext final
{
public:
	class FString                                 matchUid;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Faction;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCutsceneResultBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientCutsceneResultBiEvent_EventContext");
static_assert(sizeof(FClientCutsceneResultBiEvent_EventContext) == 0x000030, "Wrong size on FClientCutsceneResultBiEvent_EventContext");
static_assert(offsetof(FClientCutsceneResultBiEvent_EventContext, matchUid) == 0x000000, "Member 'FClientCutsceneResultBiEvent_EventContext::matchUid' has a wrong offset!");
static_assert(offsetof(FClientCutsceneResultBiEvent_EventContext, MapName) == 0x000010, "Member 'FClientCutsceneResultBiEvent_EventContext::MapName' has a wrong offset!");
static_assert(offsetof(FClientCutsceneResultBiEvent_EventContext, Faction) == 0x000020, "Member 'FClientCutsceneResultBiEvent_EventContext::Faction' has a wrong offset!");

// ScriptStruct Tempest.ClientCutsceneResultBiEvent_CutsceneDetails
// 0x0018 (0x0018 - 0x0000)
struct FClientCutsceneResultBiEvent_CutsceneDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isSkipped;                                         // 0x0014(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientCutsceneResultBiEvent_CutsceneDetails) == 0x000008, "Wrong alignment on FClientCutsceneResultBiEvent_CutsceneDetails");
static_assert(sizeof(FClientCutsceneResultBiEvent_CutsceneDetails) == 0x000018, "Wrong size on FClientCutsceneResultBiEvent_CutsceneDetails");
static_assert(offsetof(FClientCutsceneResultBiEvent_CutsceneDetails, Name) == 0x000000, "Member 'FClientCutsceneResultBiEvent_CutsceneDetails::Name' has a wrong offset!");
static_assert(offsetof(FClientCutsceneResultBiEvent_CutsceneDetails, Duration) == 0x000010, "Member 'FClientCutsceneResultBiEvent_CutsceneDetails::Duration' has a wrong offset!");
static_assert(offsetof(FClientCutsceneResultBiEvent_CutsceneDetails, isSkipped) == 0x000014, "Member 'FClientCutsceneResultBiEvent_CutsceneDetails::isSkipped' has a wrong offset!");

// ScriptStruct Tempest.ClientCutsceneResultBiEvent
// 0x0048 (0x0048 - 0x0000)
struct FClientCutsceneResultBiEvent final
{
public:
	struct FClientCutsceneResultBiEvent_EventContext eventContext;                                   // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientCutsceneResultBiEvent_CutsceneDetails cutsceneDetails;                             // 0x0030(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCutsceneResultBiEvent) == 0x000008, "Wrong alignment on FClientCutsceneResultBiEvent");
static_assert(sizeof(FClientCutsceneResultBiEvent) == 0x000048, "Wrong size on FClientCutsceneResultBiEvent");
static_assert(offsetof(FClientCutsceneResultBiEvent, eventContext) == 0x000000, "Member 'FClientCutsceneResultBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientCutsceneResultBiEvent, cutsceneDetails) == 0x000030, "Member 'FClientCutsceneResultBiEvent::cutsceneDetails' has a wrong offset!");

// ScriptStruct Tempest.TedAnnouncementMarker
// 0x0010 (0x0010 - 0x0000)
struct FTedAnnouncementMarker final
{
public:
	class UTedMarkerConfig*                       Marker;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedAnnouncementMarkerPosition                position;                                          // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedAnnouncementMarker) == 0x000008, "Wrong alignment on FTedAnnouncementMarker");
static_assert(sizeof(FTedAnnouncementMarker) == 0x000010, "Wrong size on FTedAnnouncementMarker");
static_assert(offsetof(FTedAnnouncementMarker, Marker) == 0x000000, "Member 'FTedAnnouncementMarker::Marker' has a wrong offset!");
static_assert(offsetof(FTedAnnouncementMarker, position) == 0x000008, "Member 'FTedAnnouncementMarker::position' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionModAggregator
// 0x00D8 (0x00D8 - 0x0000)
struct alignas(0x08) FTedDefinitionModAggregator
{
public:
	uint8                                         Pad_0[0xD8];                                       // 0x0000(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionModAggregator) == 0x000008, "Wrong alignment on FTedDefinitionModAggregator");
static_assert(sizeof(FTedDefinitionModAggregator) == 0x0000D8, "Wrong size on FTedDefinitionModAggregator");

// ScriptStruct Tempest.TedContainerModAggregator
// 0x0000 (0x00D8 - 0x00D8)
struct FTedContainerModAggregator final : public FTedDefinitionModAggregator
{
};
static_assert(alignof(FTedContainerModAggregator) == 0x000008, "Wrong alignment on FTedContainerModAggregator");
static_assert(sizeof(FTedContainerModAggregator) == 0x0000D8, "Wrong size on FTedContainerModAggregator");

// ScriptStruct Tempest.AIMissionDiedSquadPawnProductionSettings
// 0x0048 (0x0048 - 0x0000)
struct FAIMissionDiedSquadPawnProductionSettings final
{
public:
	bool                                          bProduceOnlyPawnsIncludedInBuildOrder;             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelProductionRequestsOnSquadWipe;              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProductionRequestsLimit;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AllowedDefinitionIds;                              // 0x0008(0x0020)(Edit, BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DisallowedDefinitionIds;                           // 0x0028(0x0020)(Edit, BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIMissionDiedSquadPawnProductionSettings) == 0x000008, "Wrong alignment on FAIMissionDiedSquadPawnProductionSettings");
static_assert(sizeof(FAIMissionDiedSquadPawnProductionSettings) == 0x000048, "Wrong size on FAIMissionDiedSquadPawnProductionSettings");
static_assert(offsetof(FAIMissionDiedSquadPawnProductionSettings, bProduceOnlyPawnsIncludedInBuildOrder) == 0x000000, "Member 'FAIMissionDiedSquadPawnProductionSettings::bProduceOnlyPawnsIncludedInBuildOrder' has a wrong offset!");
static_assert(offsetof(FAIMissionDiedSquadPawnProductionSettings, bCancelProductionRequestsOnSquadWipe) == 0x000001, "Member 'FAIMissionDiedSquadPawnProductionSettings::bCancelProductionRequestsOnSquadWipe' has a wrong offset!");
static_assert(offsetof(FAIMissionDiedSquadPawnProductionSettings, ProductionRequestsLimit) == 0x000004, "Member 'FAIMissionDiedSquadPawnProductionSettings::ProductionRequestsLimit' has a wrong offset!");
static_assert(offsetof(FAIMissionDiedSquadPawnProductionSettings, AllowedDefinitionIds) == 0x000008, "Member 'FAIMissionDiedSquadPawnProductionSettings::AllowedDefinitionIds' has a wrong offset!");
static_assert(offsetof(FAIMissionDiedSquadPawnProductionSettings, DisallowedDefinitionIds) == 0x000028, "Member 'FAIMissionDiedSquadPawnProductionSettings::DisallowedDefinitionIds' has a wrong offset!");

// ScriptStruct Tempest.ClientDlcInfoBiEvent_EventContext
// 0x0020 (0x0020 - 0x0000)
struct FClientDlcInfoBiEvent_EventContext final
{
public:
	class FString                                 gameLaunchUid;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         dlcIds;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDlcInfoBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientDlcInfoBiEvent_EventContext");
static_assert(sizeof(FClientDlcInfoBiEvent_EventContext) == 0x000020, "Wrong size on FClientDlcInfoBiEvent_EventContext");
static_assert(offsetof(FClientDlcInfoBiEvent_EventContext, gameLaunchUid) == 0x000000, "Member 'FClientDlcInfoBiEvent_EventContext::gameLaunchUid' has a wrong offset!");
static_assert(offsetof(FClientDlcInfoBiEvent_EventContext, dlcIds) == 0x000010, "Member 'FClientDlcInfoBiEvent_EventContext::dlcIds' has a wrong offset!");

// ScriptStruct Tempest.ClientDlcInfoBiEvent
// 0x0020 (0x0020 - 0x0000)
struct FClientDlcInfoBiEvent final
{
public:
	struct FClientDlcInfoBiEvent_EventContext     eventContext;                                      // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDlcInfoBiEvent) == 0x000008, "Wrong alignment on FClientDlcInfoBiEvent");
static_assert(sizeof(FClientDlcInfoBiEvent) == 0x000020, "Wrong size on FClientDlcInfoBiEvent");
static_assert(offsetof(FClientDlcInfoBiEvent, eventContext) == 0x000000, "Member 'FClientDlcInfoBiEvent::eventContext' has a wrong offset!");

// ScriptStruct Tempest.TedDifficultyContainer
// 0x000C (0x000C - 0x0000)
struct FTedDifficultyContainer final
{
public:
	ETedGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequisitionEarnRateOverride;                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RequisitionEarnRate;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVeterancyOverride;                                // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedVeterancyLevel                            VeterancyLevel;                                    // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDifficultyContainer) == 0x000004, "Wrong alignment on FTedDifficultyContainer");
static_assert(sizeof(FTedDifficultyContainer) == 0x00000C, "Wrong size on FTedDifficultyContainer");
static_assert(offsetof(FTedDifficultyContainer, Difficulty) == 0x000000, "Member 'FTedDifficultyContainer::Difficulty' has a wrong offset!");
static_assert(offsetof(FTedDifficultyContainer, bRequisitionEarnRateOverride) == 0x000001, "Member 'FTedDifficultyContainer::bRequisitionEarnRateOverride' has a wrong offset!");
static_assert(offsetof(FTedDifficultyContainer, RequisitionEarnRate) == 0x000004, "Member 'FTedDifficultyContainer::RequisitionEarnRate' has a wrong offset!");
static_assert(offsetof(FTedDifficultyContainer, bVeterancyOverride) == 0x000008, "Member 'FTedDifficultyContainer::bVeterancyOverride' has a wrong offset!");
static_assert(offsetof(FTedDifficultyContainer, VeterancyLevel) == 0x000009, "Member 'FTedDifficultyContainer::VeterancyLevel' has a wrong offset!");

// ScriptStruct Tempest.AITargetActor
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FAITargetActor final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITargetActor) == 0x000008, "Wrong alignment on FAITargetActor");
static_assert(sizeof(FAITargetActor) == 0x000038, "Wrong size on FAITargetActor");

// ScriptStruct Tempest.AITargetLocation
// 0x0018 (0x0018 - 0x0000)
struct FAITargetLocation final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bValid;                                            // 0x0014(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITargetLocation) == 0x000008, "Wrong alignment on FAITargetLocation");
static_assert(sizeof(FAITargetLocation) == 0x000018, "Wrong size on FAITargetLocation");
static_assert(offsetof(FAITargetLocation, Location) == 0x000000, "Member 'FAITargetLocation::Location' has a wrong offset!");
static_assert(offsetof(FAITargetLocation, Radius) == 0x000010, "Member 'FAITargetLocation::Radius' has a wrong offset!");
static_assert(offsetof(FAITargetLocation, bValid) == 0x000014, "Member 'FAITargetLocation::bValid' has a wrong offset!");

// ScriptStruct Tempest.AITarget
// 0x0050 (0x0050 - 0x0000)
struct FAITarget final
{
public:
	struct FAITargetActor                         TargetActor;                                       // 0x0000(0x0038)(SaveGame, Protected, NativeAccessSpecifierProtected)
	struct FAITargetLocation                      TargetLocation;                                    // 0x0038(0x0018)(SaveGame, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAITarget) == 0x000008, "Wrong alignment on FAITarget");
static_assert(sizeof(FAITarget) == 0x000050, "Wrong size on FAITarget");
static_assert(offsetof(FAITarget, TargetActor) == 0x000000, "Member 'FAITarget::TargetActor' has a wrong offset!");
static_assert(offsetof(FAITarget, TargetLocation) == 0x000038, "Member 'FAITarget::TargetLocation' has a wrong offset!");

// ScriptStruct Tempest.AIBuildOrderQueueElementHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAIBuildOrderQueueElementHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIBuildOrderQueueElementHandle) == 0x000004, "Wrong alignment on FAIBuildOrderQueueElementHandle");
static_assert(sizeof(FAIBuildOrderQueueElementHandle) == 0x000004, "Wrong size on FAIBuildOrderQueueElementHandle");

// ScriptStruct Tempest.AIBuildOrderQueueElement
// 0x00A8 (0x00A8 - 0x0000)
struct FAIBuildOrderQueueElement final
{
public:
	struct FTedDefinitionRef                      DefinitionRef;                                     // 0x0000(0x0020)(SaveGame, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Priority;                                          // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSkip;                                          // 0x0024(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UObject>                 WeakOwner;                                         // 0x0028(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAITarget                              ProductionTarget;                                  // 0x0030(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
	struct FAIBuildOrderQueueElementHandle        Handle;                                            // 0x0080(0x0004)(SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAIBuildOrderQueueElementHandle        InstigatorHandle;                                  // 0x0084(0x0004)(SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETedVeterancyLevel                            VeterancyLevel;                                    // 0x0088(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETedStructureAlignment                        StructureAlignment;                                // 0x0089(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnorePrerequisites;                              // 0x008A(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowBuildingProducer;                            // 0x008B(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowFulfillingPrerequisites;                     // 0x008C(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ProducerAndPrerequisitesBuildDelay;                // 0x0090(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RemainingCooldownTime;                             // 0x00A0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIBuildOrderQueueElement) == 0x000008, "Wrong alignment on FAIBuildOrderQueueElement");
static_assert(sizeof(FAIBuildOrderQueueElement) == 0x0000A8, "Wrong size on FAIBuildOrderQueueElement");
static_assert(offsetof(FAIBuildOrderQueueElement, DefinitionRef) == 0x000000, "Member 'FAIBuildOrderQueueElement::DefinitionRef' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, Priority) == 0x000020, "Member 'FAIBuildOrderQueueElement::Priority' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, bCanSkip) == 0x000024, "Member 'FAIBuildOrderQueueElement::bCanSkip' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, WeakOwner) == 0x000028, "Member 'FAIBuildOrderQueueElement::WeakOwner' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, ProductionTarget) == 0x000030, "Member 'FAIBuildOrderQueueElement::ProductionTarget' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, Handle) == 0x000080, "Member 'FAIBuildOrderQueueElement::Handle' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, InstigatorHandle) == 0x000084, "Member 'FAIBuildOrderQueueElement::InstigatorHandle' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, VeterancyLevel) == 0x000088, "Member 'FAIBuildOrderQueueElement::VeterancyLevel' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, StructureAlignment) == 0x000089, "Member 'FAIBuildOrderQueueElement::StructureAlignment' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, bIgnorePrerequisites) == 0x00008A, "Member 'FAIBuildOrderQueueElement::bIgnorePrerequisites' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, bAllowBuildingProducer) == 0x00008B, "Member 'FAIBuildOrderQueueElement::bAllowBuildingProducer' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, bAllowFulfillingPrerequisites) == 0x00008C, "Member 'FAIBuildOrderQueueElement::bAllowFulfillingPrerequisites' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, ProducerAndPrerequisitesBuildDelay) == 0x000090, "Member 'FAIBuildOrderQueueElement::ProducerAndPrerequisitesBuildDelay' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueueElement, RemainingCooldownTime) == 0x0000A0, "Member 'FAIBuildOrderQueueElement::RemainingCooldownTime' has a wrong offset!");

// ScriptStruct Tempest.AIPendingUpgradeResearchElement
// 0x00B0 (0x00B0 - 0x0000)
struct FAIPendingUpgradeResearchElement final
{
public:
	TWeakObjectPtr<class ATedStructureBase>       Producer;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIBuildOrderQueueElement              BuildElement;                                      // 0x0008(0x00A8)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIPendingUpgradeResearchElement) == 0x000008, "Wrong alignment on FAIPendingUpgradeResearchElement");
static_assert(sizeof(FAIPendingUpgradeResearchElement) == 0x0000B0, "Wrong size on FAIPendingUpgradeResearchElement");
static_assert(offsetof(FAIPendingUpgradeResearchElement, Producer) == 0x000000, "Member 'FAIPendingUpgradeResearchElement::Producer' has a wrong offset!");
static_assert(offsetof(FAIPendingUpgradeResearchElement, BuildElement) == 0x000008, "Member 'FAIPendingUpgradeResearchElement::BuildElement' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_Base
// 0x0001 (0x0001 - 0x0000)
struct FTedBarPreview_Base
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreview_Base) == 0x000001, "Wrong alignment on FTedBarPreview_Base");
static_assert(sizeof(FTedBarPreview_Base) == 0x000001, "Wrong size on FTedBarPreview_Base");
static_assert(offsetof(FTedBarPreview_Base, bActive) == 0x000000, "Member 'FTedBarPreview_Base::bActive' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_Debuff
// 0x000F (0x0010 - 0x0001)
struct FTedBarPreview_Debuff final : public FTedBarPreview_Base
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCharges;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurCharges;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedDebuffType                                Type;                                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBarPreview_Debuff) == 0x000004, "Wrong alignment on FTedBarPreview_Debuff");
static_assert(sizeof(FTedBarPreview_Debuff) == 0x000010, "Wrong size on FTedBarPreview_Debuff");
static_assert(offsetof(FTedBarPreview_Debuff, MaxCharges) == 0x000004, "Member 'FTedBarPreview_Debuff::MaxCharges' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Debuff, CurCharges) == 0x000008, "Member 'FTedBarPreview_Debuff::CurCharges' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Debuff, Type) == 0x00000C, "Member 'FTedBarPreview_Debuff::Type' has a wrong offset!");

// ScriptStruct Tempest.TedDoctrineResearchProgress
// 0x0008 (0x0038 - 0x0030)
struct FTedDoctrineResearchProgress final : public FTedConstructionProgress
{
public:
	class UTedDoctrineDefinition*                 Doctrine;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDoctrineResearchProgress) == 0x000008, "Wrong alignment on FTedDoctrineResearchProgress");
static_assert(sizeof(FTedDoctrineResearchProgress) == 0x000038, "Wrong size on FTedDoctrineResearchProgress");
static_assert(offsetof(FTedDoctrineResearchProgress, Doctrine) == 0x000030, "Member 'FTedDoctrineResearchProgress::Doctrine' has a wrong offset!");

// ScriptStruct Tempest.TedDoctrineResearchQueue
// 0x0020 (0x0020 - 0x0000)
struct FTedDoctrineResearchQueue final
{
public:
	TArray<class UTedDoctrineDefinition*>         Order;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedDoctrineResearchProgress>   Progresses;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDoctrineResearchQueue) == 0x000008, "Wrong alignment on FTedDoctrineResearchQueue");
static_assert(sizeof(FTedDoctrineResearchQueue) == 0x000020, "Wrong size on FTedDoctrineResearchQueue");
static_assert(offsetof(FTedDoctrineResearchQueue, Order) == 0x000000, "Member 'FTedDoctrineResearchQueue::Order' has a wrong offset!");
static_assert(offsetof(FTedDoctrineResearchQueue, Progresses) == 0x000010, "Member 'FTedDoctrineResearchQueue::Progresses' has a wrong offset!");

// ScriptStruct Tempest.ProfanityInstance
// 0x0010 (0x0010 - 0x0000)
struct FProfanityInstance final
{
public:
	class UProfanityProcessor*                    ProcessorInstance;                                 // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProfanityData*                         ProfanityData;                                     // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FProfanityInstance) == 0x000008, "Wrong alignment on FProfanityInstance");
static_assert(sizeof(FProfanityInstance) == 0x000010, "Wrong size on FProfanityInstance");
static_assert(offsetof(FProfanityInstance, ProcessorInstance) == 0x000000, "Member 'FProfanityInstance::ProcessorInstance' has a wrong offset!");
static_assert(offsetof(FProfanityInstance, ProfanityData) == 0x000008, "Member 'FProfanityInstance::ProfanityData' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchMakingBiEvent_EventContext
// 0x0038 (0x0038 - 0x0000)
struct FClientMatchMakingBiEvent_EventContext final
{
public:
	class FString                                 matchSearchUid;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchMode;                                         // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchMakingBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientMatchMakingBiEvent_EventContext");
static_assert(sizeof(FClientMatchMakingBiEvent_EventContext) == 0x000038, "Wrong size on FClientMatchMakingBiEvent_EventContext");
static_assert(offsetof(FClientMatchMakingBiEvent_EventContext, matchSearchUid) == 0x000000, "Member 'FClientMatchMakingBiEvent_EventContext::matchSearchUid' has a wrong offset!");
static_assert(offsetof(FClientMatchMakingBiEvent_EventContext, Status) == 0x000010, "Member 'FClientMatchMakingBiEvent_EventContext::Status' has a wrong offset!");
static_assert(offsetof(FClientMatchMakingBiEvent_EventContext, Duration) == 0x000020, "Member 'FClientMatchMakingBiEvent_EventContext::Duration' has a wrong offset!");
static_assert(offsetof(FClientMatchMakingBiEvent_EventContext, MatchMode) == 0x000028, "Member 'FClientMatchMakingBiEvent_EventContext::MatchMode' has a wrong offset!");

// ScriptStruct Tempest.DataCenter
// 0x0018 (0x0018 - 0x0000)
struct FDataCenter final
{
public:
	class FString                                 DataCenterId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dataCenterPing;                                    // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataCenter) == 0x000008, "Wrong alignment on FDataCenter");
static_assert(sizeof(FDataCenter) == 0x000018, "Wrong size on FDataCenter");
static_assert(offsetof(FDataCenter, DataCenterId) == 0x000000, "Member 'FDataCenter::DataCenterId' has a wrong offset!");
static_assert(offsetof(FDataCenter, dataCenterPing) == 0x000010, "Member 'FDataCenter::dataCenterPing' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchMakingBiEvent_DataCentersDetails
// 0x0018 (0x0018 - 0x0000)
struct FClientMatchMakingBiEvent_DataCentersDetails final
{
public:
	struct FDataCenter                            biDataCenters;                                     // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchMakingBiEvent_DataCentersDetails) == 0x000008, "Wrong alignment on FClientMatchMakingBiEvent_DataCentersDetails");
static_assert(sizeof(FClientMatchMakingBiEvent_DataCentersDetails) == 0x000018, "Wrong size on FClientMatchMakingBiEvent_DataCentersDetails");
static_assert(offsetof(FClientMatchMakingBiEvent_DataCentersDetails, biDataCenters) == 0x000000, "Member 'FClientMatchMakingBiEvent_DataCentersDetails::biDataCenters' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchMakingBiEvent
// 0x0050 (0x0050 - 0x0000)
struct FClientMatchMakingBiEvent final
{
public:
	struct FClientMatchMakingBiEvent_EventContext eventContext;                                      // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientMatchMakingBiEvent_DataCentersDetails dataCentersDetails;                          // 0x0038(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchMakingBiEvent) == 0x000008, "Wrong alignment on FClientMatchMakingBiEvent");
static_assert(sizeof(FClientMatchMakingBiEvent) == 0x000050, "Wrong size on FClientMatchMakingBiEvent");
static_assert(offsetof(FClientMatchMakingBiEvent, eventContext) == 0x000000, "Member 'FClientMatchMakingBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientMatchMakingBiEvent, dataCentersDetails) == 0x000038, "Member 'FClientMatchMakingBiEvent::dataCentersDetails' has a wrong offset!");

// ScriptStruct Tempest.AirDropUnitData
// 0x0080 (0x0080 - 0x0000)
struct FAirDropUnitData final
{
public:
	struct FGameplayTag                           UnitDefinitionId;                                  // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, int32>              UnitsToSpawnForContainer;                          // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PlayerRequiredTags;                                // 0x0060(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAirDropUnitData) == 0x000008, "Wrong alignment on FAirDropUnitData");
static_assert(sizeof(FAirDropUnitData) == 0x000080, "Wrong size on FAirDropUnitData");
static_assert(offsetof(FAirDropUnitData, UnitDefinitionId) == 0x000000, "Member 'FAirDropUnitData::UnitDefinitionId' has a wrong offset!");
static_assert(offsetof(FAirDropUnitData, NumToSpawn) == 0x000008, "Member 'FAirDropUnitData::NumToSpawn' has a wrong offset!");
static_assert(offsetof(FAirDropUnitData, UnitsToSpawnForContainer) == 0x000010, "Member 'FAirDropUnitData::UnitsToSpawnForContainer' has a wrong offset!");
static_assert(offsetof(FAirDropUnitData, PlayerRequiredTags) == 0x000060, "Member 'FAirDropUnitData::PlayerRequiredTags' has a wrong offset!");

// ScriptStruct Tempest.TedShortcutUI
// 0x0020 (0x0020 - 0x0000)
struct FTedShortcutUI final
{
public:
	class FName                                   InputName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAction;                                           // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedShortcutUI) == 0x000008, "Wrong alignment on FTedShortcutUI");
static_assert(sizeof(FTedShortcutUI) == 0x000020, "Wrong size on FTedShortcutUI");
static_assert(offsetof(FTedShortcutUI, InputName) == 0x000000, "Member 'FTedShortcutUI::InputName' has a wrong offset!");
static_assert(offsetof(FTedShortcutUI, Label) == 0x000008, "Member 'FTedShortcutUI::Label' has a wrong offset!");
static_assert(offsetof(FTedShortcutUI, bAction) == 0x000018, "Member 'FTedShortcutUI::bAction' has a wrong offset!");

// ScriptStruct Tempest.TedShortcutChordUI
// 0x0028 (0x0048 - 0x0020)
struct FTedShortcutChordUI final : public FInputChord
{
public:
	struct FKey                                   SecondaryKey;                                      // 0x0020(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Label;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedShortcutChordUI) == 0x000008, "Wrong alignment on FTedShortcutChordUI");
static_assert(sizeof(FTedShortcutChordUI) == 0x000048, "Wrong size on FTedShortcutChordUI");
static_assert(offsetof(FTedShortcutChordUI, SecondaryKey) == 0x000020, "Member 'FTedShortcutChordUI::SecondaryKey' has a wrong offset!");
static_assert(offsetof(FTedShortcutChordUI, Label) == 0x000038, "Member 'FTedShortcutChordUI::Label' has a wrong offset!");

// ScriptStruct Tempest.TedTooltipDisplayParams
// 0x0070 (0x0070 - 0x0000)
struct FTedTooltipDisplayParams final
{
public:
	class FText                                   Header;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   InputName;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInputNameIsAxis : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETedHorizontalAnchor                          AttachAnchor_Horizontal;                           // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedVerticalAnchor                            AttachAnchor_Vertical;                             // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                AttachWidgetOverride;                              // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAttachToParent : 1;                               // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETedHorizontalAnchor                          TooltipAnchor_Horizontal;                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedVerticalAnchor                            TooltipAnchor_Vertical;                            // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Offset;                                            // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTedShortcutUI>                 Shortcuts;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedShortcutChordUI>            ShortcutChords;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTooltipDisplayParams) == 0x000008, "Wrong alignment on FTedTooltipDisplayParams");
static_assert(sizeof(FTedTooltipDisplayParams) == 0x000070, "Wrong size on FTedTooltipDisplayParams");
static_assert(offsetof(FTedTooltipDisplayParams, Header) == 0x000000, "Member 'FTedTooltipDisplayParams::Header' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, Description) == 0x000010, "Member 'FTedTooltipDisplayParams::Description' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, InputName) == 0x000020, "Member 'FTedTooltipDisplayParams::InputName' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, AttachAnchor_Horizontal) == 0x000029, "Member 'FTedTooltipDisplayParams::AttachAnchor_Horizontal' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, AttachAnchor_Vertical) == 0x00002A, "Member 'FTedTooltipDisplayParams::AttachAnchor_Vertical' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, AttachWidgetOverride) == 0x000030, "Member 'FTedTooltipDisplayParams::AttachWidgetOverride' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, TooltipAnchor_Horizontal) == 0x000039, "Member 'FTedTooltipDisplayParams::TooltipAnchor_Horizontal' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, TooltipAnchor_Vertical) == 0x00003A, "Member 'FTedTooltipDisplayParams::TooltipAnchor_Vertical' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, Offset) == 0x000040, "Member 'FTedTooltipDisplayParams::Offset' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, Shortcuts) == 0x000050, "Member 'FTedTooltipDisplayParams::Shortcuts' has a wrong offset!");
static_assert(offsetof(FTedTooltipDisplayParams, ShortcutChords) == 0x000060, "Member 'FTedTooltipDisplayParams::ShortcutChords' has a wrong offset!");

// ScriptStruct Tempest.TedMovieSequenceStage
// 0x0010 (0x0010 - 0x0000)
struct FTedMovieSequenceStage final
{
public:
	class UFileMediaSource*                       Movie;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLoop : 1;                                         // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMovieSequenceStage) == 0x000008, "Wrong alignment on FTedMovieSequenceStage");
static_assert(sizeof(FTedMovieSequenceStage) == 0x000010, "Wrong size on FTedMovieSequenceStage");
static_assert(offsetof(FTedMovieSequenceStage, Movie) == 0x000000, "Member 'FTedMovieSequenceStage::Movie' has a wrong offset!");

// ScriptStruct Tempest.MissionDetails
// 0x0028 (0x0028 - 0x0000)
struct FMissionDetails final
{
public:
	class FString                                 Faction;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         missionNum;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 missionName;                                       // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMissionDetails) == 0x000008, "Wrong alignment on FMissionDetails");
static_assert(sizeof(FMissionDetails) == 0x000028, "Wrong size on FMissionDetails");
static_assert(offsetof(FMissionDetails, Faction) == 0x000000, "Member 'FMissionDetails::Faction' has a wrong offset!");
static_assert(offsetof(FMissionDetails, missionNum) == 0x000010, "Member 'FMissionDetails::missionNum' has a wrong offset!");
static_assert(offsetof(FMissionDetails, missionName) == 0x000018, "Member 'FMissionDetails::missionName' has a wrong offset!");

// ScriptStruct Tempest.ClientObjectiveStatusBiEvent_EventContext
// 0x0020 (0x0020 - 0x0000)
struct FClientObjectiveStatusBiEvent_EventContext final
{
public:
	class FString                                 matchUid;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 progressStep;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientObjectiveStatusBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientObjectiveStatusBiEvent_EventContext");
static_assert(sizeof(FClientObjectiveStatusBiEvent_EventContext) == 0x000020, "Wrong size on FClientObjectiveStatusBiEvent_EventContext");
static_assert(offsetof(FClientObjectiveStatusBiEvent_EventContext, matchUid) == 0x000000, "Member 'FClientObjectiveStatusBiEvent_EventContext::matchUid' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_EventContext, progressStep) == 0x000010, "Member 'FClientObjectiveStatusBiEvent_EventContext::progressStep' has a wrong offset!");

// ScriptStruct Tempest.ClientObjectiveStatusBiEvent_ObjectiveDetails
// 0x0040 (0x0040 - 0x0000)
struct FClientObjectiveStatusBiEvent_ObjectiveDetails final
{
public:
	class FString                                 objectiveType;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientObjectiveStatusBiEvent_ObjectiveDetails) == 0x000008, "Wrong alignment on FClientObjectiveStatusBiEvent_ObjectiveDetails");
static_assert(sizeof(FClientObjectiveStatusBiEvent_ObjectiveDetails) == 0x000040, "Wrong size on FClientObjectiveStatusBiEvent_ObjectiveDetails");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, objectiveType) == 0x000000, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::objectiveType' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, Name) == 0x000010, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::Name' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, Num) == 0x000020, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::Num' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, Status) == 0x000028, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::Status' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, Progress) == 0x000038, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::Progress' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent_ObjectiveDetails, Duration) == 0x00003C, "Member 'FClientObjectiveStatusBiEvent_ObjectiveDetails::Duration' has a wrong offset!");

// ScriptStruct Tempest.MatchStatistics
// 0x0060 (0x0060 - 0x0000)
struct FMatchStatistics final
{
public:
	int32                                         totalCreditsGot;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCreditsHarvested;                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCreditsLost;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCreditsUnitsSpent;                            // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCreditsBuildingsSpent;                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalCreditsUpgradesSpent;                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsCaptured;                                     // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsCreated;                                      // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitsLost;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitsDestroyed;                                    // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildingsCaptured;                                 // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildingsCreated;                                  // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingsLost;                                     // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuildingsDestroyed;                                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelGot;                                          // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelLost;                                         // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 populationDistribution;                            // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DynActivePlans;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchStatistics) == 0x000008, "Wrong alignment on FMatchStatistics");
static_assert(sizeof(FMatchStatistics) == 0x000060, "Wrong size on FMatchStatistics");
static_assert(offsetof(FMatchStatistics, totalCreditsGot) == 0x000000, "Member 'FMatchStatistics::totalCreditsGot' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, totalCreditsHarvested) == 0x000004, "Member 'FMatchStatistics::totalCreditsHarvested' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, totalCreditsLost) == 0x000008, "Member 'FMatchStatistics::totalCreditsLost' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, totalCreditsUnitsSpent) == 0x00000C, "Member 'FMatchStatistics::totalCreditsUnitsSpent' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, totalCreditsBuildingsSpent) == 0x000010, "Member 'FMatchStatistics::totalCreditsBuildingsSpent' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, totalCreditsUpgradesSpent) == 0x000014, "Member 'FMatchStatistics::totalCreditsUpgradesSpent' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, unitsCaptured) == 0x000018, "Member 'FMatchStatistics::unitsCaptured' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, unitsCreated) == 0x00001C, "Member 'FMatchStatistics::unitsCreated' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, UnitsLost) == 0x000020, "Member 'FMatchStatistics::UnitsLost' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, UnitsDestroyed) == 0x000024, "Member 'FMatchStatistics::UnitsDestroyed' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, buildingsCaptured) == 0x000028, "Member 'FMatchStatistics::buildingsCaptured' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, buildingsCreated) == 0x00002C, "Member 'FMatchStatistics::buildingsCreated' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, BuildingsLost) == 0x000030, "Member 'FMatchStatistics::BuildingsLost' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, BuildingsDestroyed) == 0x000034, "Member 'FMatchStatistics::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, IntelGot) == 0x000038, "Member 'FMatchStatistics::IntelGot' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, IntelLost) == 0x00003C, "Member 'FMatchStatistics::IntelLost' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, populationDistribution) == 0x000040, "Member 'FMatchStatistics::populationDistribution' has a wrong offset!");
static_assert(offsetof(FMatchStatistics, DynActivePlans) == 0x000050, "Member 'FMatchStatistics::DynActivePlans' has a wrong offset!");

// ScriptStruct Tempest.ClientObjectiveStatusBiEvent
// 0x00E8 (0x00E8 - 0x0000)
struct FClientObjectiveStatusBiEvent final
{
public:
	struct FMissionDetails                        biMissionDetails;                                  // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientObjectiveStatusBiEvent_EventContext eventContext;                                  // 0x0028(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientObjectiveStatusBiEvent_ObjectiveDetails objectiveDetails;                          // 0x0048(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchStatistics                       biMatchStatistics;                                 // 0x0088(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientObjectiveStatusBiEvent) == 0x000008, "Wrong alignment on FClientObjectiveStatusBiEvent");
static_assert(sizeof(FClientObjectiveStatusBiEvent) == 0x0000E8, "Wrong size on FClientObjectiveStatusBiEvent");
static_assert(offsetof(FClientObjectiveStatusBiEvent, biMissionDetails) == 0x000000, "Member 'FClientObjectiveStatusBiEvent::biMissionDetails' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent, eventContext) == 0x000028, "Member 'FClientObjectiveStatusBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent, objectiveDetails) == 0x000048, "Member 'FClientObjectiveStatusBiEvent::objectiveDetails' has a wrong offset!");
static_assert(offsetof(FClientObjectiveStatusBiEvent, biMatchStatistics) == 0x000088, "Member 'FClientObjectiveStatusBiEvent::biMatchStatistics' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerLockedTechData
// 0x0028 (0x0028 - 0x0000)
struct FTedPlayerLockedTechData final
{
public:
	ETedPlayerLockedTechMode                      Mode;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  List;                                              // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerLockedTechData) == 0x000008, "Wrong alignment on FTedPlayerLockedTechData");
static_assert(sizeof(FTedPlayerLockedTechData) == 0x000028, "Wrong size on FTedPlayerLockedTechData");
static_assert(offsetof(FTedPlayerLockedTechData, Mode) == 0x000000, "Member 'FTedPlayerLockedTechData::Mode' has a wrong offset!");
static_assert(offsetof(FTedPlayerLockedTechData, List) == 0x000008, "Member 'FTedPlayerLockedTechData::List' has a wrong offset!");

// ScriptStruct Tempest.TedMissionCheat
// 0x0038 (0x0038 - 0x0000)
struct FTedMissionCheat final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelScriptActor*                      BoundLevelScript;                                  // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMissionCheat) == 0x000008, "Wrong alignment on FTedMissionCheat");
static_assert(sizeof(FTedMissionCheat) == 0x000038, "Wrong size on FTedMissionCheat");
static_assert(offsetof(FTedMissionCheat, BoundLevelScript) == 0x000030, "Member 'FTedMissionCheat::BoundLevelScript' has a wrong offset!");

// ScriptStruct Tempest.TedContentSlotStateAssetSelectorEntry
// 0x0010 (0x0010 - 0x0000)
struct FTedContentSlotStateAssetSelectorEntry final
{
public:
	ETedContentSlotState                          State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Asset;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedContentSlotStateAssetSelectorEntry) == 0x000008, "Wrong alignment on FTedContentSlotStateAssetSelectorEntry");
static_assert(sizeof(FTedContentSlotStateAssetSelectorEntry) == 0x000010, "Wrong size on FTedContentSlotStateAssetSelectorEntry");
static_assert(offsetof(FTedContentSlotStateAssetSelectorEntry, State) == 0x000000, "Member 'FTedContentSlotStateAssetSelectorEntry::State' has a wrong offset!");
static_assert(offsetof(FTedContentSlotStateAssetSelectorEntry, Asset) == 0x000008, "Member 'FTedContentSlotStateAssetSelectorEntry::Asset' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataResources
// 0x0020 (0x0020 - 0x0000)
struct FTedPlayerDataResources final
{
public:
	int32                                         Credits;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreditsCap;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Power;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerConsumption;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Intel;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Population;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpcomingPopulation;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPlayerDataResources) == 0x000004, "Wrong alignment on FTedPlayerDataResources");
static_assert(sizeof(FTedPlayerDataResources) == 0x000020, "Wrong size on FTedPlayerDataResources");
static_assert(offsetof(FTedPlayerDataResources, Credits) == 0x000000, "Member 'FTedPlayerDataResources::Credits' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, CreditsCap) == 0x000004, "Member 'FTedPlayerDataResources::CreditsCap' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, Power) == 0x000008, "Member 'FTedPlayerDataResources::Power' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, PowerConsumption) == 0x00000C, "Member 'FTedPlayerDataResources::PowerConsumption' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, Intel) == 0x000010, "Member 'FTedPlayerDataResources::Intel' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, Population) == 0x000014, "Member 'FTedPlayerDataResources::Population' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataResources, UpcomingPopulation) == 0x000018, "Member 'FTedPlayerDataResources::UpcomingPopulation' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatsData
// 0x0050 (0x0050 - 0x0000)
struct FTedPlayerDataStatsData final
{
public:
	TMap<ETedPlayerDataStat, float>               Data;                                              // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataStatsData) == 0x000008, "Wrong alignment on FTedPlayerDataStatsData");
static_assert(sizeof(FTedPlayerDataStatsData) == 0x000050, "Wrong size on FTedPlayerDataStatsData");
static_assert(offsetof(FTedPlayerDataStatsData, Data) == 0x000000, "Member 'FTedPlayerDataStatsData::Data' has a wrong offset!");

// ScriptStruct Tempest.TedHotspotHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTedHotspotHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedHotspotHandle) == 0x000004, "Wrong alignment on FTedHotspotHandle");
static_assert(sizeof(FTedHotspotHandle) == 0x000004, "Wrong size on FTedHotspotHandle");

// ScriptStruct Tempest.TedTelemetryActiveCutscene
// 0x0018 (0x0018 - 0x0000)
struct FTedTelemetryActiveCutscene final
{
public:
	class FString                                 CutsceneName;                                      // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryActiveCutscene) == 0x000008, "Wrong alignment on FTedTelemetryActiveCutscene");
static_assert(sizeof(FTedTelemetryActiveCutscene) == 0x000018, "Wrong size on FTedTelemetryActiveCutscene");
static_assert(offsetof(FTedTelemetryActiveCutscene, CutsceneName) == 0x000000, "Member 'FTedTelemetryActiveCutscene::CutsceneName' has a wrong offset!");
static_assert(offsetof(FTedTelemetryActiveCutscene, StartTime) == 0x000010, "Member 'FTedTelemetryActiveCutscene::StartTime' has a wrong offset!");

// ScriptStruct Tempest.TedContentSlotStateAssetSelector
// 0x0018 (0x0018 - 0x0000)
struct FTedContentSlotStateAssetSelector final
{
public:
	TArray<struct FTedContentSlotStateAssetSelectorEntry> Assets;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UObject*                                Default;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedContentSlotStateAssetSelector) == 0x000008, "Wrong alignment on FTedContentSlotStateAssetSelector");
static_assert(sizeof(FTedContentSlotStateAssetSelector) == 0x000018, "Wrong size on FTedContentSlotStateAssetSelector");
static_assert(offsetof(FTedContentSlotStateAssetSelector, Assets) == 0x000000, "Member 'FTedContentSlotStateAssetSelector::Assets' has a wrong offset!");
static_assert(offsetof(FTedContentSlotStateAssetSelector, Default) == 0x000010, "Member 'FTedContentSlotStateAssetSelector::Default' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationSetting
// 0x0008 (0x0008 - 0x0000)
struct FTedGameCreationSetting final
{
public:
	ETedSessionSettingKey                         Key;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationSetting) == 0x000004, "Wrong alignment on FTedGameCreationSetting");
static_assert(sizeof(FTedGameCreationSetting) == 0x000008, "Wrong size on FTedGameCreationSetting");
static_assert(offsetof(FTedGameCreationSetting, Key) == 0x000000, "Member 'FTedGameCreationSetting::Key' has a wrong offset!");
static_assert(offsetof(FTedGameCreationSetting, Value) == 0x000004, "Member 'FTedGameCreationSetting::Value' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationSettings
// 0x0010 (0x0010 - 0x0000)
struct FTedGameCreationSettings final
{
public:
	TArray<struct FTedGameCreationSetting>        Settings;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationSettings) == 0x000008, "Wrong alignment on FTedGameCreationSettings");
static_assert(sizeof(FTedGameCreationSettings) == 0x000010, "Wrong size on FTedGameCreationSettings");
static_assert(offsetof(FTedGameCreationSettings, Settings) == 0x000000, "Member 'FTedGameCreationSettings::Settings' has a wrong offset!");

// ScriptStruct Tempest.TedWeaponAimOffsetData
// 0x0028 (0x0028 - 0x0000)
struct FTedWeaponAimOffsetData final
{
public:
	class FName                                   AimOffsetOriginSocketName;                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              YawAimOffsetInterpSpeed;                           // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PitchAimOffsetInterpSpeed;                         // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedWeaponAimOffsetData) == 0x000008, "Wrong alignment on FTedWeaponAimOffsetData");
static_assert(sizeof(FTedWeaponAimOffsetData) == 0x000028, "Wrong size on FTedWeaponAimOffsetData");
static_assert(offsetof(FTedWeaponAimOffsetData, AimOffsetOriginSocketName) == 0x000000, "Member 'FTedWeaponAimOffsetData::AimOffsetOriginSocketName' has a wrong offset!");
static_assert(offsetof(FTedWeaponAimOffsetData, YawAimOffsetInterpSpeed) == 0x000008, "Member 'FTedWeaponAimOffsetData::YawAimOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(FTedWeaponAimOffsetData, PitchAimOffsetInterpSpeed) == 0x000018, "Member 'FTedWeaponAimOffsetData::PitchAimOffsetInterpSpeed' has a wrong offset!");

// ScriptStruct Tempest.TedWeaponAimData
// 0x0048 (0x0048 - 0x0000)
struct FTedWeaponAimData final
{
public:
	bool                                          bUseDefaultAimOffsetData;                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedWeaponAimOffsetData                AimOffsetData;                                     // 0x0008(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultPhysicalFireLocSocketName;              // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PhysicalFireLocSocketNames;                        // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedWeaponAimData) == 0x000008, "Wrong alignment on FTedWeaponAimData");
static_assert(sizeof(FTedWeaponAimData) == 0x000048, "Wrong size on FTedWeaponAimData");
static_assert(offsetof(FTedWeaponAimData, bUseDefaultAimOffsetData) == 0x000000, "Member 'FTedWeaponAimData::bUseDefaultAimOffsetData' has a wrong offset!");
static_assert(offsetof(FTedWeaponAimData, AimOffsetData) == 0x000008, "Member 'FTedWeaponAimData::AimOffsetData' has a wrong offset!");
static_assert(offsetof(FTedWeaponAimData, bUseDefaultPhysicalFireLocSocketName) == 0x000030, "Member 'FTedWeaponAimData::bUseDefaultPhysicalFireLocSocketName' has a wrong offset!");
static_assert(offsetof(FTedWeaponAimData, PhysicalFireLocSocketNames) == 0x000038, "Member 'FTedWeaponAimData::PhysicalFireLocSocketNames' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionPropertyData
// 0x0018 (0x0018 - 0x0000)
struct FTedDefinitionPropertyData final
{
public:
	class FName                                   PropertyName;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ValueString;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDefinitionPropertyData) == 0x000008, "Wrong alignment on FTedDefinitionPropertyData");
static_assert(sizeof(FTedDefinitionPropertyData) == 0x000018, "Wrong size on FTedDefinitionPropertyData");
static_assert(offsetof(FTedDefinitionPropertyData, PropertyName) == 0x000000, "Member 'FTedDefinitionPropertyData::PropertyName' has a wrong offset!");
static_assert(offsetof(FTedDefinitionPropertyData, ValueString) == 0x000008, "Member 'FTedDefinitionPropertyData::ValueString' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionPropertyCondition
// 0x0020 (0x0020 - 0x0000)
struct FTedDefinitionPropertyCondition final
{
public:
	struct FTedDefinitionPropertyData             PropertyData;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	ETedDefinitionConditionOp                     ConditionOp;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionPropertyCondition) == 0x000008, "Wrong alignment on FTedDefinitionPropertyCondition");
static_assert(sizeof(FTedDefinitionPropertyCondition) == 0x000020, "Wrong size on FTedDefinitionPropertyCondition");
static_assert(offsetof(FTedDefinitionPropertyCondition, PropertyData) == 0x000000, "Member 'FTedDefinitionPropertyCondition::PropertyData' has a wrong offset!");
static_assert(offsetof(FTedDefinitionPropertyCondition, ConditionOp) == 0x000018, "Member 'FTedDefinitionPropertyCondition::ConditionOp' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionConditions
// 0x0018 (0x0018 - 0x0000)
struct FTedDefinitionConditions final
{
public:
	TArray<struct FTedDefinitionPropertyCondition> PropertyConditions;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	ETedDefinitionConditionsRequirements          PropertyConditionsRequirements;                    // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionConditions) == 0x000008, "Wrong alignment on FTedDefinitionConditions");
static_assert(sizeof(FTedDefinitionConditions) == 0x000018, "Wrong size on FTedDefinitionConditions");
static_assert(offsetof(FTedDefinitionConditions, PropertyConditions) == 0x000000, "Member 'FTedDefinitionConditions::PropertyConditions' has a wrong offset!");
static_assert(offsetof(FTedDefinitionConditions, PropertyConditionsRequirements) == 0x000010, "Member 'FTedDefinitionConditions::PropertyConditionsRequirements' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionFilter
// 0x0028 (0x0028 - 0x0000)
struct FTedDefinitionFilter final
{
public:
	TSubclassOf<class UTedDefinitionAsset>        DefinitionType;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDifferentType;                              // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedDefinitionConditions               DefinitionConditions;                              // 0x0010(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDefinitionFilter) == 0x000008, "Wrong alignment on FTedDefinitionFilter");
static_assert(sizeof(FTedDefinitionFilter) == 0x000028, "Wrong size on FTedDefinitionFilter");
static_assert(offsetof(FTedDefinitionFilter, DefinitionType) == 0x000000, "Member 'FTedDefinitionFilter::DefinitionType' has a wrong offset!");
static_assert(offsetof(FTedDefinitionFilter, bIgnoreDifferentType) == 0x000008, "Member 'FTedDefinitionFilter::bIgnoreDifferentType' has a wrong offset!");
static_assert(offsetof(FTedDefinitionFilter, DefinitionConditions) == 0x000010, "Member 'FTedDefinitionFilter::DefinitionConditions' has a wrong offset!");

// ScriptStruct Tempest.TedEntityDefinitionsQuery
// 0x0038 (0x0038 - 0x0000)
struct FTedEntityDefinitionsQuery final
{
public:
	struct FGameplayTagContainer                  DefinitionIds;                                     // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTedDefinitionFilter>           Filters;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedEntityDefinitionsQuery) == 0x000008, "Wrong alignment on FTedEntityDefinitionsQuery");
static_assert(sizeof(FTedEntityDefinitionsQuery) == 0x000038, "Wrong size on FTedEntityDefinitionsQuery");
static_assert(offsetof(FTedEntityDefinitionsQuery, DefinitionIds) == 0x000000, "Member 'FTedEntityDefinitionsQuery::DefinitionIds' has a wrong offset!");
static_assert(offsetof(FTedEntityDefinitionsQuery, bExactMatch) == 0x000020, "Member 'FTedEntityDefinitionsQuery::bExactMatch' has a wrong offset!");
static_assert(offsetof(FTedEntityDefinitionsQuery, Filters) == 0x000028, "Member 'FTedEntityDefinitionsQuery::Filters' has a wrong offset!");

// ScriptStruct Tempest.AIBuildOrderElement
// 0x0018 (0x0018 - 0x0000)
struct FAIBuildOrderElement final
{
public:
	class FName                                   AttackWaveMultiplierPreset;                        // 0x0000(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           DefinitionId;                                      // 0x0008(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         Count;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSkip;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanApplyAttackWaveMultiplier;                     // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVeterancyOverride;                                // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETedVeterancyLevel                            VeterancyLevel;                                    // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAIBuildOrderElement) == 0x000004, "Wrong alignment on FAIBuildOrderElement");
static_assert(sizeof(FAIBuildOrderElement) == 0x000018, "Wrong size on FAIBuildOrderElement");
static_assert(offsetof(FAIBuildOrderElement, AttackWaveMultiplierPreset) == 0x000000, "Member 'FAIBuildOrderElement::AttackWaveMultiplierPreset' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, DefinitionId) == 0x000008, "Member 'FAIBuildOrderElement::DefinitionId' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, Count) == 0x000010, "Member 'FAIBuildOrderElement::Count' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, bCanSkip) == 0x000014, "Member 'FAIBuildOrderElement::bCanSkip' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, bCanApplyAttackWaveMultiplier) == 0x000015, "Member 'FAIBuildOrderElement::bCanApplyAttackWaveMultiplier' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, bVeterancyOverride) == 0x000016, "Member 'FAIBuildOrderElement::bVeterancyOverride' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderElement, VeterancyLevel) == 0x000017, "Member 'FAIBuildOrderElement::VeterancyLevel' has a wrong offset!");

// ScriptStruct Tempest.AIBuildOrderSettings
// 0x0018 (0x0018 - 0x0000)
struct FAIBuildOrderSettings final
{
public:
	bool                                          bAllowBuildingProducer;                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnorePrerequisites;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFulfillingPrerequisites;                     // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ProducerAndPrerequisitesBuildDelay;                // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIBuildOrderSettings) == 0x000008, "Wrong alignment on FAIBuildOrderSettings");
static_assert(sizeof(FAIBuildOrderSettings) == 0x000018, "Wrong size on FAIBuildOrderSettings");
static_assert(offsetof(FAIBuildOrderSettings, bAllowBuildingProducer) == 0x000000, "Member 'FAIBuildOrderSettings::bAllowBuildingProducer' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderSettings, bIgnorePrerequisites) == 0x000001, "Member 'FAIBuildOrderSettings::bIgnorePrerequisites' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderSettings, bAllowFulfillingPrerequisites) == 0x000002, "Member 'FAIBuildOrderSettings::bAllowFulfillingPrerequisites' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderSettings, ProducerAndPrerequisitesBuildDelay) == 0x000008, "Member 'FAIBuildOrderSettings::ProducerAndPrerequisitesBuildDelay' has a wrong offset!");

// ScriptStruct Tempest.AIBuildOrder
// 0x0028 (0x0028 - 0x0000)
struct FAIBuildOrder final
{
public:
	TArray<struct FAIBuildOrderElement>           Elements;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FAIBuildOrderSettings                  Settings;                                          // 0x0010(0x0018)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAIBuildOrder) == 0x000008, "Wrong alignment on FAIBuildOrder");
static_assert(sizeof(FAIBuildOrder) == 0x000028, "Wrong size on FAIBuildOrder");
static_assert(offsetof(FAIBuildOrder, Elements) == 0x000000, "Member 'FAIBuildOrder::Elements' has a wrong offset!");
static_assert(offsetof(FAIBuildOrder, Settings) == 0x000010, "Member 'FAIBuildOrder::Settings' has a wrong offset!");

// ScriptStruct Tempest.TedContentPanelSlotArray
// 0x0010 (0x0010 - 0x0000)
struct FTedContentPanelSlotArray final
{
public:
	TArray<class UTedContentPanelSlotBase*>       Array;                                             // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedContentPanelSlotArray) == 0x000008, "Wrong alignment on FTedContentPanelSlotArray");
static_assert(sizeof(FTedContentPanelSlotArray) == 0x000010, "Wrong size on FTedContentPanelSlotArray");
static_assert(offsetof(FTedContentPanelSlotArray, Array) == 0x000000, "Member 'FTedContentPanelSlotArray::Array' has a wrong offset!");

// ScriptStruct Tempest.GameplayEffectStack
// 0x0034 (0x0040 - 0x000C)
struct FGameplayEffectStack final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            BoundEffect;                                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         StackCount;                                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0020(0x0020)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FGameplayEffectStack) == 0x000008, "Wrong alignment on FGameplayEffectStack");
static_assert(sizeof(FGameplayEffectStack) == 0x000040, "Wrong size on FGameplayEffectStack");
static_assert(offsetof(FGameplayEffectStack, BoundEffect) == 0x000010, "Member 'FGameplayEffectStack::BoundEffect' has a wrong offset!");
static_assert(offsetof(FGameplayEffectStack, StackCount) == 0x000018, "Member 'FGameplayEffectStack::StackCount' has a wrong offset!");
static_assert(offsetof(FGameplayEffectStack, TagContainer) == 0x000020, "Member 'FGameplayEffectStack::TagContainer' has a wrong offset!");

// ScriptStruct Tempest.SavedReceivedAoE
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSavedReceivedAoE final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedReceivedAoE) == 0x000008, "Wrong alignment on FSavedReceivedAoE");
static_assert(sizeof(FSavedReceivedAoE) == 0x000018, "Wrong size on FSavedReceivedAoE");

// ScriptStruct Tempest.AIPendingStructureConstructionElement
// 0x00D8 (0x00D8 - 0x0000)
struct FAIPendingStructureConstructionElement final
{
public:
	TWeakObjectPtr<class ATedStructureBase>       Producer;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedConstructionElementType            ConstructionElement;                               // 0x0008(0x0028)(SaveGame, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIBuildOrderQueueElement              BuildElement;                                      // 0x0030(0x00A8)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIPendingStructureConstructionElement) == 0x000008, "Wrong alignment on FAIPendingStructureConstructionElement");
static_assert(sizeof(FAIPendingStructureConstructionElement) == 0x0000D8, "Wrong size on FAIPendingStructureConstructionElement");
static_assert(offsetof(FAIPendingStructureConstructionElement, Producer) == 0x000000, "Member 'FAIPendingStructureConstructionElement::Producer' has a wrong offset!");
static_assert(offsetof(FAIPendingStructureConstructionElement, ConstructionElement) == 0x000008, "Member 'FAIPendingStructureConstructionElement::ConstructionElement' has a wrong offset!");
static_assert(offsetof(FAIPendingStructureConstructionElement, BuildElement) == 0x000030, "Member 'FAIPendingStructureConstructionElement::BuildElement' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardsRetrieveFilter
// 0x0030 (0x0030 - 0x0000)
struct FTedLeaderboardsRetrieveFilter final
{
public:
	TArray<ETedRankedFaction>                     Factions;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	ETedServerType                                Server;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETedRankedTeam>                        Teams;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bDisplayFriendsOnlyOverride;                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayLocalStatsOnlyOverride;                    // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedLeaderboardsRetrieveFilter) == 0x000008, "Wrong alignment on FTedLeaderboardsRetrieveFilter");
static_assert(sizeof(FTedLeaderboardsRetrieveFilter) == 0x000030, "Wrong size on FTedLeaderboardsRetrieveFilter");
static_assert(offsetof(FTedLeaderboardsRetrieveFilter, Factions) == 0x000000, "Member 'FTedLeaderboardsRetrieveFilter::Factions' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardsRetrieveFilter, Server) == 0x000010, "Member 'FTedLeaderboardsRetrieveFilter::Server' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardsRetrieveFilter, Teams) == 0x000018, "Member 'FTedLeaderboardsRetrieveFilter::Teams' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardsRetrieveFilter, bDisplayFriendsOnlyOverride) == 0x000028, "Member 'FTedLeaderboardsRetrieveFilter::bDisplayFriendsOnlyOverride' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardsRetrieveFilter, bDisplayLocalStatsOnlyOverride) == 0x000029, "Member 'FTedLeaderboardsRetrieveFilter::bDisplayLocalStatsOnlyOverride' has a wrong offset!");

// ScriptStruct Tempest.TedNewsContent
// 0x00C8 (0x00C8 - 0x0000)
struct FTedNewsContent final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)
	class FText                                   Body;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPrivate)
	class UTexture2D*                             Picture;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0xA0];                                      // 0x0028(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedNewsContent) == 0x000008, "Wrong alignment on FTedNewsContent");
static_assert(sizeof(FTedNewsContent) == 0x0000C8, "Wrong size on FTedNewsContent");
static_assert(offsetof(FTedNewsContent, Title) == 0x000000, "Member 'FTedNewsContent::Title' has a wrong offset!");
static_assert(offsetof(FTedNewsContent, Body) == 0x000010, "Member 'FTedNewsContent::Body' has a wrong offset!");
static_assert(offsetof(FTedNewsContent, Picture) == 0x000020, "Member 'FTedNewsContent::Picture' has a wrong offset!");

// ScriptStruct Tempest.TedUserRating
// 0x0008 (0x0008 - 0x0000)
struct FTedUserRating final
{
public:
	ETedRankedFaction                             Faction;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                Team;                                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rank;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUserRating) == 0x000004, "Wrong alignment on FTedUserRating");
static_assert(sizeof(FTedUserRating) == 0x000008, "Wrong size on FTedUserRating");
static_assert(offsetof(FTedUserRating, Faction) == 0x000000, "Member 'FTedUserRating::Faction' has a wrong offset!");
static_assert(offsetof(FTedUserRating, Team) == 0x000001, "Member 'FTedUserRating::Team' has a wrong offset!");
static_assert(offsetof(FTedUserRating, Rank) == 0x000004, "Member 'FTedUserRating::Rank' has a wrong offset!");

// ScriptStruct Tempest.TedAttackTargetInfo
// 0x0040 (0x0040 - 0x0000)
struct FTedAttackTargetInfo final
{
public:
	class ATedPawn*                               Target;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    TargetLocation;                                    // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLocation;                                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0028(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetScore;                                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedCommand>                CommandClass;                                      // 0x0038(0x0008)(ZeroConstructor, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedAttackTargetInfo) == 0x000008, "Wrong alignment on FTedAttackTargetInfo");
static_assert(sizeof(FTedAttackTargetInfo) == 0x000040, "Wrong size on FTedAttackTargetInfo");
static_assert(offsetof(FTedAttackTargetInfo, Target) == 0x000000, "Member 'FTedAttackTargetInfo::Target' has a wrong offset!");
static_assert(offsetof(FTedAttackTargetInfo, TargetLocation) == 0x000008, "Member 'FTedAttackTargetInfo::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTedAttackTargetInfo, bUseLocation) == 0x000020, "Member 'FTedAttackTargetInfo::bUseLocation' has a wrong offset!");
static_assert(offsetof(FTedAttackTargetInfo, WeaponClass) == 0x000028, "Member 'FTedAttackTargetInfo::WeaponClass' has a wrong offset!");
static_assert(offsetof(FTedAttackTargetInfo, TargetScore) == 0x000030, "Member 'FTedAttackTargetInfo::TargetScore' has a wrong offset!");
static_assert(offsetof(FTedAttackTargetInfo, CommandClass) == 0x000038, "Member 'FTedAttackTargetInfo::CommandClass' has a wrong offset!");

// ScriptStruct Tempest.HarvesterAlignmentData
// 0x00E0 (0x00E0 - 0x0000)
struct alignas(0x10) FHarvesterAlignmentData final
{
public:
	class ATedUnitBase*                           Unit;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0xD8];                                       // 0x0008(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHarvesterAlignmentData) == 0x000010, "Wrong alignment on FHarvesterAlignmentData");
static_assert(sizeof(FHarvesterAlignmentData) == 0x0000E0, "Wrong size on FHarvesterAlignmentData");
static_assert(offsetof(FHarvesterAlignmentData, Unit) == 0x000000, "Member 'FHarvesterAlignmentData::Unit' has a wrong offset!");

// ScriptStruct Tempest.TedUserPreferences
// 0x0005 (0x0005 - 0x0000)
struct FTedUserPreferences final
{
public:
	bool                                          bEnablePreorderPlayerProfile;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreorderChatIcon;                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreorderConstructionYard;                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePreorderNeutralBuildings;                   // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPreOrderPlayerAvatar                      SelectedAvatar;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUserPreferences) == 0x000001, "Wrong alignment on FTedUserPreferences");
static_assert(sizeof(FTedUserPreferences) == 0x000005, "Wrong size on FTedUserPreferences");
static_assert(offsetof(FTedUserPreferences, bEnablePreorderPlayerProfile) == 0x000000, "Member 'FTedUserPreferences::bEnablePreorderPlayerProfile' has a wrong offset!");
static_assert(offsetof(FTedUserPreferences, bEnablePreorderChatIcon) == 0x000001, "Member 'FTedUserPreferences::bEnablePreorderChatIcon' has a wrong offset!");
static_assert(offsetof(FTedUserPreferences, bEnablePreorderConstructionYard) == 0x000002, "Member 'FTedUserPreferences::bEnablePreorderConstructionYard' has a wrong offset!");
static_assert(offsetof(FTedUserPreferences, bEnablePreorderNeutralBuildings) == 0x000003, "Member 'FTedUserPreferences::bEnablePreorderNeutralBuildings' has a wrong offset!");
static_assert(offsetof(FTedUserPreferences, SelectedAvatar) == 0x000004, "Member 'FTedUserPreferences::SelectedAvatar' has a wrong offset!");

// ScriptStruct Tempest.TedUserInfo
// 0x0040 (0x0040 - 0x0000)
struct FTedUserInfo final
{
public:
	class FString                                 ProviderUserId;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderNickname;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPreorderContent;                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeveloper;                                      // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Avatar;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             AvatarBig;                                         // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedUserPreferences                    Preferences;                                       // 0x0038(0x0005)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUserInfo) == 0x000008, "Wrong alignment on FTedUserInfo");
static_assert(sizeof(FTedUserInfo) == 0x000040, "Wrong size on FTedUserInfo");
static_assert(offsetof(FTedUserInfo, ProviderUserId) == 0x000000, "Member 'FTedUserInfo::ProviderUserId' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, ProviderNickname) == 0x000010, "Member 'FTedUserInfo::ProviderNickname' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, bHasPreorderContent) == 0x000020, "Member 'FTedUserInfo::bHasPreorderContent' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, bIsDeveloper) == 0x000021, "Member 'FTedUserInfo::bIsDeveloper' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, Avatar) == 0x000028, "Member 'FTedUserInfo::Avatar' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, AvatarBig) == 0x000030, "Member 'FTedUserInfo::AvatarBig' has a wrong offset!");
static_assert(offsetof(FTedUserInfo, Preferences) == 0x000038, "Member 'FTedUserInfo::Preferences' has a wrong offset!");

// ScriptStruct Tempest.TedRepAnimMontage
// 0x0018 (0x0018 - 0x0000)
struct FTedRepAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bSkipPlayRate : 1;                                 // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopped : 1;                                      // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         PlayBit : 1;                                       // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         StartSectionID;                                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedRepAnimMontage) == 0x000008, "Wrong alignment on FTedRepAnimMontage");
static_assert(sizeof(FTedRepAnimMontage) == 0x000018, "Wrong size on FTedRepAnimMontage");
static_assert(offsetof(FTedRepAnimMontage, AnimMontage) == 0x000000, "Member 'FTedRepAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(FTedRepAnimMontage, PlayRate) == 0x000008, "Member 'FTedRepAnimMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(FTedRepAnimMontage, StartSectionID) == 0x00000D, "Member 'FTedRepAnimMontage::StartSectionID' has a wrong offset!");
static_assert(offsetof(FTedRepAnimMontage, BlendOutTime) == 0x000010, "Member 'FTedRepAnimMontage::BlendOutTime' has a wrong offset!");

// ScriptStruct Tempest.FoliageComponentAnimData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFoliageComponentAnimData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageComponentAnimData) == 0x000008, "Wrong alignment on FFoliageComponentAnimData");
static_assert(sizeof(FFoliageComponentAnimData) == 0x000018, "Wrong size on FFoliageComponentAnimData");

// ScriptStruct Tempest.ReceivedAoEInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FReceivedAoEInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReceivedAoEInfo) == 0x000008, "Wrong alignment on FReceivedAoEInfo");
static_assert(sizeof(FReceivedAoEInfo) == 0x000038, "Wrong size on FReceivedAoEInfo");

// ScriptStruct Tempest.AIMissionRebuildStructureData
// 0x0020 (0x0020 - 0x0000)
struct FAIMissionRebuildStructureData final
{
public:
	struct FGameplayTag                           DefinitionId;                                      // 0x0000(0x0008)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedStructureAlignment                        Alignment;                                         // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RebuildCount;                                      // 0x001C(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIMissionRebuildStructureData) == 0x000008, "Wrong alignment on FAIMissionRebuildStructureData");
static_assert(sizeof(FAIMissionRebuildStructureData) == 0x000020, "Wrong size on FAIMissionRebuildStructureData");
static_assert(offsetof(FAIMissionRebuildStructureData, DefinitionId) == 0x000000, "Member 'FAIMissionRebuildStructureData::DefinitionId' has a wrong offset!");
static_assert(offsetof(FAIMissionRebuildStructureData, Location) == 0x000008, "Member 'FAIMissionRebuildStructureData::Location' has a wrong offset!");
static_assert(offsetof(FAIMissionRebuildStructureData, Alignment) == 0x000018, "Member 'FAIMissionRebuildStructureData::Alignment' has a wrong offset!");
static_assert(offsetof(FAIMissionRebuildStructureData, RebuildCount) == 0x00001C, "Member 'FAIMissionRebuildStructureData::RebuildCount' has a wrong offset!");

// ScriptStruct Tempest.UnitsStatistics_EnemyUnitsDetails
// 0x0040 (0x0040 - 0x0000)
struct FUnitsStatistics_EnemyUnitsDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         interacted;                                        // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         killed;                                            // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dealtDmg;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotUnitDmg;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotUnitKills;                                      // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotBuildDmg;                                       // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotBuildKills;                                     // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitsStatistics_EnemyUnitsDetails) == 0x000008, "Wrong alignment on FUnitsStatistics_EnemyUnitsDetails");
static_assert(sizeof(FUnitsStatistics_EnemyUnitsDetails) == 0x000040, "Wrong size on FUnitsStatistics_EnemyUnitsDetails");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, Name) == 0x000000, "Member 'FUnitsStatistics_EnemyUnitsDetails::Name' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, Category) == 0x000010, "Member 'FUnitsStatistics_EnemyUnitsDetails::Category' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, isMilitary) == 0x000020, "Member 'FUnitsStatistics_EnemyUnitsDetails::isMilitary' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, interacted) == 0x000024, "Member 'FUnitsStatistics_EnemyUnitsDetails::interacted' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, killed) == 0x000028, "Member 'FUnitsStatistics_EnemyUnitsDetails::killed' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, dealtDmg) == 0x00002C, "Member 'FUnitsStatistics_EnemyUnitsDetails::dealtDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, gotUnitDmg) == 0x000030, "Member 'FUnitsStatistics_EnemyUnitsDetails::gotUnitDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, gotUnitKills) == 0x000034, "Member 'FUnitsStatistics_EnemyUnitsDetails::gotUnitKills' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, gotBuildDmg) == 0x000038, "Member 'FUnitsStatistics_EnemyUnitsDetails::gotBuildDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_EnemyUnitsDetails, gotBuildKills) == 0x00003C, "Member 'FUnitsStatistics_EnemyUnitsDetails::gotBuildKills' has a wrong offset!");

// ScriptStruct Tempest.FieldTileElementISMData
// 0x0070 (0x0070 - 0x0000)
struct FFieldTileElementISMData final
{
public:
	class UInstancedStaticMeshComponent*          ISMComp;                                           // 0x0000(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceIndex;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginalInstanceTransform;                         // 0x0010(0x0060)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldTileElementISMData) == 0x000010, "Wrong alignment on FFieldTileElementISMData");
static_assert(sizeof(FFieldTileElementISMData) == 0x000070, "Wrong size on FFieldTileElementISMData");
static_assert(offsetof(FFieldTileElementISMData, ISMComp) == 0x000000, "Member 'FFieldTileElementISMData::ISMComp' has a wrong offset!");
static_assert(offsetof(FFieldTileElementISMData, InstanceIndex) == 0x000008, "Member 'FFieldTileElementISMData::InstanceIndex' has a wrong offset!");
static_assert(offsetof(FFieldTileElementISMData, OriginalInstanceTransform) == 0x000010, "Member 'FFieldTileElementISMData::OriginalInstanceTransform' has a wrong offset!");

// ScriptStruct Tempest.FieldTileElement
// 0x00C0 (0x00C0 - 0x0000)
struct FFieldTileElement final
{
public:
	class UTempestFieldElementProxy*              Proxy;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     RandomTransforms;                                  // 0x0070(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     CurrentStage;                                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     NextStage;                                         // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionProgress;                                // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                Components;                                        // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                ISMCComponents;                                    // 0x0098(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FFieldTileElementISMData>       InstancedSMs;                                      // 0x00A8(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldTileElement) == 0x000010, "Wrong alignment on FFieldTileElement");
static_assert(sizeof(FFieldTileElement) == 0x0000C0, "Wrong size on FFieldTileElement");
static_assert(offsetof(FFieldTileElement, Proxy) == 0x000000, "Member 'FFieldTileElement::Proxy' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, Transform) == 0x000010, "Member 'FFieldTileElement::Transform' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, RandomTransforms) == 0x000070, "Member 'FFieldTileElement::RandomTransforms' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, CurrentStage) == 0x000080, "Member 'FFieldTileElement::CurrentStage' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, NextStage) == 0x000081, "Member 'FFieldTileElement::NextStage' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, TransitionProgress) == 0x000084, "Member 'FFieldTileElement::TransitionProgress' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, Components) == 0x000088, "Member 'FFieldTileElement::Components' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, ISMCComponents) == 0x000098, "Member 'FFieldTileElement::ISMCComponents' has a wrong offset!");
static_assert(offsetof(FFieldTileElement, InstancedSMs) == 0x0000A8, "Member 'FFieldTileElement::InstancedSMs' has a wrong offset!");

// ScriptStruct Tempest.TedWeaponInfo
// 0x0020 (0x0020 - 0x0000)
struct FTedWeaponInfo final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastFiredWeaponTime;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ammo;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeStartTime;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedWeaponInfo) == 0x000008, "Wrong alignment on FTedWeaponInfo");
static_assert(sizeof(FTedWeaponInfo) == 0x000020, "Wrong size on FTedWeaponInfo");
static_assert(offsetof(FTedWeaponInfo, WeaponClass) == 0x000000, "Member 'FTedWeaponInfo::WeaponClass' has a wrong offset!");
static_assert(offsetof(FTedWeaponInfo, LastFiredWeaponTime) == 0x000008, "Member 'FTedWeaponInfo::LastFiredWeaponTime' has a wrong offset!");
static_assert(offsetof(FTedWeaponInfo, Ammo) == 0x00000C, "Member 'FTedWeaponInfo::Ammo' has a wrong offset!");
static_assert(offsetof(FTedWeaponInfo, RechargeStartTime) == 0x000010, "Member 'FTedWeaponInfo::RechargeStartTime' has a wrong offset!");

// ScriptStruct Tempest.TedPawnDamageInfo
// 0x0020 (0x0020 - 0x0000)
struct FTedPawnDamageInfo final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFriendlyFire : 1;                                 // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageTimestamp;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepDamageCounter;                                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LocalDamageCounter;                                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnDamageInfo) == 0x000008, "Wrong alignment on FTedPawnDamageInfo");
static_assert(sizeof(FTedPawnDamageInfo) == 0x000020, "Wrong size on FTedPawnDamageInfo");
static_assert(offsetof(FTedPawnDamageInfo, DamageCauser) == 0x000000, "Member 'FTedPawnDamageInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FTedPawnDamageInfo, DamageTypeClass) == 0x000008, "Member 'FTedPawnDamageInfo::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FTedPawnDamageInfo, DamageAmount) == 0x000010, "Member 'FTedPawnDamageInfo::DamageAmount' has a wrong offset!");
static_assert(offsetof(FTedPawnDamageInfo, DamageTimestamp) == 0x000018, "Member 'FTedPawnDamageInfo::DamageTimestamp' has a wrong offset!");
static_assert(offsetof(FTedPawnDamageInfo, RepDamageCounter) == 0x00001C, "Member 'FTedPawnDamageInfo::RepDamageCounter' has a wrong offset!");
static_assert(offsetof(FTedPawnDamageInfo, LocalDamageCounter) == 0x00001D, "Member 'FTedPawnDamageInfo::LocalDamageCounter' has a wrong offset!");

// ScriptStruct Tempest.TedVisibility
// 0x0010 (0x0038 - 0x0028)
struct FTedVisibility final : public FFogOfWarVisibility
{
public:
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedVisibility) == 0x000008, "Wrong alignment on FTedVisibility");
static_assert(sizeof(FTedVisibility) == 0x000038, "Wrong size on FTedVisibility");

// ScriptStruct Tempest.SavedReceivedAoEInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSavedReceivedAoEInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedReceivedAoEInfo) == 0x000008, "Wrong alignment on FSavedReceivedAoEInfo");
static_assert(sizeof(FSavedReceivedAoEInfo) == 0x000010, "Wrong size on FSavedReceivedAoEInfo");

// ScriptStruct Tempest.TedMapProgress
// 0x0068 (0x0068 - 0x0000)
struct FTedMapProgress final
{
public:
	class UTedMapInfo*                            Map;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUnlocked : 1;                                     // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bContinuationLocked : 1;                           // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTedDoctrineDefinition*>         PurchasedDoctrines;                                // 0x0010(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class UTedEquipment*>                  PurchasedEquipment;                                // 0x0020(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class UTedEquipment*>                  EquippedEquipment;                                 // 0x0030(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class UTedObjectiveObj*>               CompletedObjectives;                               // 0x0040(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class UTedObjectiveObj*>               NotCompletedObjectives;                            // 0x0050(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         UsedDoctrineResetPoints;                           // 0x0060(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UsedEquipmentResetPoints;                          // 0x0061(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            Difficulty;                                        // 0x0062(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMapCompleted : 1;                                 // 0x0063(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMapProgress) == 0x000008, "Wrong alignment on FTedMapProgress");
static_assert(sizeof(FTedMapProgress) == 0x000068, "Wrong size on FTedMapProgress");
static_assert(offsetof(FTedMapProgress, Map) == 0x000000, "Member 'FTedMapProgress::Map' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, PurchasedDoctrines) == 0x000010, "Member 'FTedMapProgress::PurchasedDoctrines' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, PurchasedEquipment) == 0x000020, "Member 'FTedMapProgress::PurchasedEquipment' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, EquippedEquipment) == 0x000030, "Member 'FTedMapProgress::EquippedEquipment' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, CompletedObjectives) == 0x000040, "Member 'FTedMapProgress::CompletedObjectives' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, NotCompletedObjectives) == 0x000050, "Member 'FTedMapProgress::NotCompletedObjectives' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, UsedDoctrineResetPoints) == 0x000060, "Member 'FTedMapProgress::UsedDoctrineResetPoints' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, UsedEquipmentResetPoints) == 0x000061, "Member 'FTedMapProgress::UsedEquipmentResetPoints' has a wrong offset!");
static_assert(offsetof(FTedMapProgress, Difficulty) == 0x000062, "Member 'FTedMapProgress::Difficulty' has a wrong offset!");

// ScriptStruct Tempest.TedCampaignProgress
// 0x0028 (0x0028 - 0x0000)
struct FTedCampaignProgress final
{
public:
	class UTedCampaignInfo*                       Campaign;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedMapInfo*                            CurrentMap;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            GameDifficulty;                                    // 0x0010(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTedMapProgress>                Maps;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCampaignProgress) == 0x000008, "Wrong alignment on FTedCampaignProgress");
static_assert(sizeof(FTedCampaignProgress) == 0x000028, "Wrong size on FTedCampaignProgress");
static_assert(offsetof(FTedCampaignProgress, Campaign) == 0x000000, "Member 'FTedCampaignProgress::Campaign' has a wrong offset!");
static_assert(offsetof(FTedCampaignProgress, CurrentMap) == 0x000008, "Member 'FTedCampaignProgress::CurrentMap' has a wrong offset!");
static_assert(offsetof(FTedCampaignProgress, GameDifficulty) == 0x000010, "Member 'FTedCampaignProgress::GameDifficulty' has a wrong offset!");
static_assert(offsetof(FTedCampaignProgress, Maps) == 0x000018, "Member 'FTedCampaignProgress::Maps' has a wrong offset!");

// ScriptStruct Tempest.TedCampaignTimestamp
// 0x0010 (0x0010 - 0x0000)
struct FTedCampaignTimestamp final
{
public:
	class UTedCampaignInfo*                       Campaign;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedMapInfo*                            Map;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCampaignTimestamp) == 0x000008, "Wrong alignment on FTedCampaignTimestamp");
static_assert(sizeof(FTedCampaignTimestamp) == 0x000010, "Wrong size on FTedCampaignTimestamp");
static_assert(offsetof(FTedCampaignTimestamp, Campaign) == 0x000000, "Member 'FTedCampaignTimestamp::Campaign' has a wrong offset!");
static_assert(offsetof(FTedCampaignTimestamp, Map) == 0x000008, "Member 'FTedCampaignTimestamp::Map' has a wrong offset!");

// ScriptStruct Tempest.TedCampaignProgressContainerData
// 0x0020 (0x0020 - 0x0000)
struct FTedCampaignProgressContainerData final
{
public:
	TArray<struct FTedCampaignProgress>           Campaigns;                                         // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	struct FTedCampaignTimestamp                  CampaignTimestamp;                                 // 0x0010(0x0010)(SaveGame, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCampaignProgressContainerData) == 0x000008, "Wrong alignment on FTedCampaignProgressContainerData");
static_assert(sizeof(FTedCampaignProgressContainerData) == 0x000020, "Wrong size on FTedCampaignProgressContainerData");
static_assert(offsetof(FTedCampaignProgressContainerData, Campaigns) == 0x000000, "Member 'FTedCampaignProgressContainerData::Campaigns' has a wrong offset!");
static_assert(offsetof(FTedCampaignProgressContainerData, CampaignTimestamp) == 0x000010, "Member 'FTedCampaignProgressContainerData::CampaignTimestamp' has a wrong offset!");

// ScriptStruct Tempest.SavedProvidedAoEInfo
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FSavedProvidedAoEInfo final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedProvidedAoEInfo) == 0x000008, "Wrong alignment on FSavedProvidedAoEInfo");
static_assert(sizeof(FSavedProvidedAoEInfo) == 0x000050, "Wrong size on FSavedProvidedAoEInfo");

// ScriptStruct Tempest.TedChartEntries
// 0x0018 (0x0018 - 0x0000)
struct FTedChartEntries
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      Entries;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChartEntries) == 0x000008, "Wrong alignment on FTedChartEntries");
static_assert(sizeof(FTedChartEntries) == 0x000018, "Wrong size on FTedChartEntries");
static_assert(offsetof(FTedChartEntries, Entries) == 0x000008, "Member 'FTedChartEntries::Entries' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FTedGenericData
{
};
#pragma pack(pop)
static_assert(alignof(FTedGenericData) == 0x000001, "Wrong alignment on FTedGenericData");
static_assert(sizeof(FTedGenericData) == 0x000001, "Wrong size on FTedGenericData");

// ScriptStruct Tempest.TedGenericData_ChartEntries
// 0x0018 (0x0018 - 0x0000)
struct FTedGenericData_ChartEntries final : public FTedGenericData
{
public:
	struct FTedChartEntries                       Value;                                             // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_ChartEntries) == 0x000008, "Wrong alignment on FTedGenericData_ChartEntries");
static_assert(sizeof(FTedGenericData_ChartEntries) == 0x000018, "Wrong size on FTedGenericData_ChartEntries");
static_assert(offsetof(FTedGenericData_ChartEntries, Value) == 0x000000, "Member 'FTedGenericData_ChartEntries::Value' has a wrong offset!");

// ScriptStruct Tempest.AIMissionRebuildStructureDataHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAIMissionRebuildStructureDataHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIMissionRebuildStructureDataHandle) == 0x000004, "Wrong alignment on FAIMissionRebuildStructureDataHandle");
static_assert(sizeof(FAIMissionRebuildStructureDataHandle) == 0x000004, "Wrong size on FAIMissionRebuildStructureDataHandle");

// ScriptStruct Tempest.TedPawnUpgradeResearchProgress
// 0x0008 (0x0038 - 0x0030)
struct FTedPawnUpgradeResearchProgress final : public FTedConstructionProgress
{
public:
	ETedPawnUpgradeType                           UpgradeType;                                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnUpgradeResearchProgress) == 0x000008, "Wrong alignment on FTedPawnUpgradeResearchProgress");
static_assert(sizeof(FTedPawnUpgradeResearchProgress) == 0x000038, "Wrong size on FTedPawnUpgradeResearchProgress");
static_assert(offsetof(FTedPawnUpgradeResearchProgress, UpgradeType) == 0x000030, "Member 'FTedPawnUpgradeResearchProgress::UpgradeType' has a wrong offset!");

// ScriptStruct Tempest.TedPrerequisiteContainer
// 0x0110 (0x0110 - 0x0000)
struct FTedPrerequisiteContainer final
{
public:
	TSet<TSoftObjectPtr<class UTedEntityDefinitionAsset>> Definitions;                               // 0x0000(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class UTedEntityDefinitionAsset>, struct FGameplayTagContainer> EntityOwnedTags; // 0x0050(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x00A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FGameplayTagContainer> Equivalents;                             // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPrerequisiteContainer) == 0x000008, "Wrong alignment on FTedPrerequisiteContainer");
static_assert(sizeof(FTedPrerequisiteContainer) == 0x000110, "Wrong size on FTedPrerequisiteContainer");
static_assert(offsetof(FTedPrerequisiteContainer, Definitions) == 0x000000, "Member 'FTedPrerequisiteContainer::Definitions' has a wrong offset!");
static_assert(offsetof(FTedPrerequisiteContainer, EntityOwnedTags) == 0x000050, "Member 'FTedPrerequisiteContainer::EntityOwnedTags' has a wrong offset!");
static_assert(offsetof(FTedPrerequisiteContainer, Tags) == 0x0000A0, "Member 'FTedPrerequisiteContainer::Tags' has a wrong offset!");
static_assert(offsetof(FTedPrerequisiteContainer, Equivalents) == 0x0000C0, "Member 'FTedPrerequisiteContainer::Equivalents' has a wrong offset!");

// ScriptStruct Tempest.TedPawnUpgradeData
// 0x0170 (0x0170 - 0x0000)
struct FTedPawnUpgradeData final
{
public:
	ETedPawnUpgradeType                           UpgradeType;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RequiredTech;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTedPrerequisiteContainer              RequiredPrerequisites;                             // 0x0028(0x0110)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTedUpgrade>             ResearchedUpgrade;                                 // 0x0138(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResearchTime;                                      // 0x0160(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreditCost;                                        // 0x0164(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelCost;                                         // 0x0168(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnUpgradeData) == 0x000008, "Wrong alignment on FTedPawnUpgradeData");
static_assert(sizeof(FTedPawnUpgradeData) == 0x000170, "Wrong size on FTedPawnUpgradeData");
static_assert(offsetof(FTedPawnUpgradeData, UpgradeType) == 0x000000, "Member 'FTedPawnUpgradeData::UpgradeType' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, RequiredTech) == 0x000008, "Member 'FTedPawnUpgradeData::RequiredTech' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, RequiredPrerequisites) == 0x000028, "Member 'FTedPawnUpgradeData::RequiredPrerequisites' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, ResearchedUpgrade) == 0x000138, "Member 'FTedPawnUpgradeData::ResearchedUpgrade' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, ResearchTime) == 0x000160, "Member 'FTedPawnUpgradeData::ResearchTime' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, CreditCost) == 0x000164, "Member 'FTedPawnUpgradeData::CreditCost' has a wrong offset!");
static_assert(offsetof(FTedPawnUpgradeData, IntelCost) == 0x000168, "Member 'FTedPawnUpgradeData::IntelCost' has a wrong offset!");

// ScriptStruct Tempest.AISquadOrder
// 0x0058 (0x0058 - 0x0000)
struct FAISquadOrder final
{
public:
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAITarget                              Target;                                            // 0x0008(0x0050)(SaveGame, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FAISquadOrder) == 0x000008, "Wrong alignment on FAISquadOrder");
static_assert(sizeof(FAISquadOrder) == 0x000058, "Wrong size on FAISquadOrder");
static_assert(offsetof(FAISquadOrder, OrderType) == 0x000000, "Member 'FAISquadOrder::OrderType' has a wrong offset!");
static_assert(offsetof(FAISquadOrder, Target) == 0x000008, "Member 'FAISquadOrder::Target' has a wrong offset!");

// ScriptStruct Tempest.TedGhostPawnArray
// 0x0018 (0x0028 - 0x0010)
struct FTedGhostPawnArray final : public FOwnedStruct
{
public:
	uint8                                         Pad_10[0x18];                                      // 0x0010(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedGhostPawnArray) == 0x000008, "Wrong alignment on FTedGhostPawnArray");
static_assert(sizeof(FTedGhostPawnArray) == 0x000028, "Wrong size on FTedGhostPawnArray");

// ScriptStruct Tempest.TedGameplayTagReplicationContainer
// 0x0060 (0x0060 - 0x0000)
struct FTedGameplayTagReplicationContainer final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                Owner;                                             // 0x0050(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedGameplayTagReplicationContainer) == 0x000008, "Wrong alignment on FTedGameplayTagReplicationContainer");
static_assert(sizeof(FTedGameplayTagReplicationContainer) == 0x000060, "Wrong size on FTedGameplayTagReplicationContainer");
static_assert(offsetof(FTedGameplayTagReplicationContainer, Owner) == 0x000050, "Member 'FTedGameplayTagReplicationContainer::Owner' has a wrong offset!");

// ScriptStruct Tempest.AIPendingUnitConstructionElement
// 0x00B0 (0x00B0 - 0x0000)
struct FAIPendingUnitConstructionElement final
{
public:
	TWeakObjectPtr<class ATedStructureUnitFactory> Factory;                                          // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIBuildOrderQueueElement              BuildElement;                                      // 0x0008(0x00A8)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIPendingUnitConstructionElement) == 0x000008, "Wrong alignment on FAIPendingUnitConstructionElement");
static_assert(sizeof(FAIPendingUnitConstructionElement) == 0x0000B0, "Wrong size on FAIPendingUnitConstructionElement");
static_assert(offsetof(FAIPendingUnitConstructionElement, Factory) == 0x000000, "Member 'FAIPendingUnitConstructionElement::Factory' has a wrong offset!");
static_assert(offsetof(FAIPendingUnitConstructionElement, BuildElement) == 0x000008, "Member 'FAIPendingUnitConstructionElement::BuildElement' has a wrong offset!");

// ScriptStruct Tempest.TedPawnDeathInfo
// 0x0020 (0x0020 - 0x0000)
struct FTedPawnDeathInfo final
{
public:
	class AActor*                                 DamageCauser;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bFriendlyFire : 1;                                 // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDied : 1;                                         // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ContainerFreeSlots;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPawnDeathInfo) == 0x000008, "Wrong alignment on FTedPawnDeathInfo");
static_assert(sizeof(FTedPawnDeathInfo) == 0x000020, "Wrong size on FTedPawnDeathInfo");
static_assert(offsetof(FTedPawnDeathInfo, DamageCauser) == 0x000000, "Member 'FTedPawnDeathInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FTedPawnDeathInfo, Killer) == 0x000008, "Member 'FTedPawnDeathInfo::Killer' has a wrong offset!");
static_assert(offsetof(FTedPawnDeathInfo, DamageTypeClass) == 0x000010, "Member 'FTedPawnDeathInfo::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FTedPawnDeathInfo, ContainerFreeSlots) == 0x00001C, "Member 'FTedPawnDeathInfo::ContainerFreeSlots' has a wrong offset!");

// ScriptStruct Tempest.TedSlateText
// 0x00A0 (0x00A0 - 0x0000)
struct FTedSlateText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Alignment;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0030(0x0060)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0090(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSlateText) == 0x000008, "Wrong alignment on FTedSlateText");
static_assert(sizeof(FTedSlateText) == 0x0000A0, "Wrong size on FTedSlateText");
static_assert(offsetof(FTedSlateText, Text) == 0x000000, "Member 'FTedSlateText::Text' has a wrong offset!");
static_assert(offsetof(FTedSlateText, Offset) == 0x000010, "Member 'FTedSlateText::Offset' has a wrong offset!");
static_assert(offsetof(FTedSlateText, Alignment) == 0x000020, "Member 'FTedSlateText::Alignment' has a wrong offset!");
static_assert(offsetof(FTedSlateText, Font) == 0x000030, "Member 'FTedSlateText::Font' has a wrong offset!");
static_assert(offsetof(FTedSlateText, Color) == 0x000090, "Member 'FTedSlateText::Color' has a wrong offset!");

// ScriptStruct Tempest.TedChartMarkerMinimal
// 0x00B8 (0x00B8 - 0x0000)
struct FTedChartMarkerMinimal
{
public:
	struct FTedSlateText                          Label;                                             // 0x0000(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x00A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChartMarkerMinimal) == 0x000008, "Wrong alignment on FTedChartMarkerMinimal");
static_assert(sizeof(FTedChartMarkerMinimal) == 0x0000B8, "Wrong size on FTedChartMarkerMinimal");
static_assert(offsetof(FTedChartMarkerMinimal, Label) == 0x000000, "Member 'FTedChartMarkerMinimal::Label' has a wrong offset!");
static_assert(offsetof(FTedChartMarkerMinimal, Color) == 0x0000A0, "Member 'FTedChartMarkerMinimal::Color' has a wrong offset!");
static_assert(offsetof(FTedChartMarkerMinimal, Thickness) == 0x0000B0, "Member 'FTedChartMarkerMinimal::Thickness' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_SlateBrush
// 0x00D0 (0x00D0 - 0x0000)
struct FTedGenericData_SlateBrush final : public FTedGenericData
{
public:
	struct FSlateBrush                            Value;                                             // 0x0000(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_SlateBrush) == 0x000010, "Wrong alignment on FTedGenericData_SlateBrush");
static_assert(sizeof(FTedGenericData_SlateBrush) == 0x0000D0, "Wrong size on FTedGenericData_SlateBrush");
static_assert(offsetof(FTedGenericData_SlateBrush, Value) == 0x000000, "Member 'FTedGenericData_SlateBrush::Value' has a wrong offset!");

// ScriptStruct Tempest.TedPawnFocusInfo
// 0x0030 (0x0030 - 0x0000)
struct FTedPawnFocusInfo final
{
public:
	class AActor*                                 FocusActor;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bFocusActorIsSet : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    FocusLocation;                                     // 0x0010(0x0018)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bFocusLocationIsSet : 1;                           // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnFocusInfo) == 0x000008, "Wrong alignment on FTedPawnFocusInfo");
static_assert(sizeof(FTedPawnFocusInfo) == 0x000030, "Wrong size on FTedPawnFocusInfo");
static_assert(offsetof(FTedPawnFocusInfo, FocusActor) == 0x000000, "Member 'FTedPawnFocusInfo::FocusActor' has a wrong offset!");
static_assert(offsetof(FTedPawnFocusInfo, FocusLocation) == 0x000010, "Member 'FTedPawnFocusInfo::FocusLocation' has a wrong offset!");

// ScriptStruct Tempest.EcsComp_AoEConfig
// 0x0008 (0x0008 - 0x0000)
struct FEcsComp_AoEConfig final
{
public:
	struct FGameplayTag                           AoEDefinitionId;                                   // 0x0000(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_AoEConfig) == 0x000004, "Wrong alignment on FEcsComp_AoEConfig");
static_assert(sizeof(FEcsComp_AoEConfig) == 0x000008, "Wrong size on FEcsComp_AoEConfig");
static_assert(offsetof(FEcsComp_AoEConfig, AoEDefinitionId) == 0x000000, "Member 'FEcsComp_AoEConfig::AoEDefinitionId' has a wrong offset!");

// ScriptStruct Tempest.DBSCAN_DataPoint
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FDBSCAN_DataPoint final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBSCAN_DataPoint) == 0x000008, "Wrong alignment on FDBSCAN_DataPoint");
static_assert(sizeof(FDBSCAN_DataPoint) == 0x000018, "Wrong size on FDBSCAN_DataPoint");

// ScriptStruct Tempest.TedLocalAnimMontage
// 0x0028 (0x0028 - 0x0000)
struct FTedLocalAnimMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PlayBit : 1;                                       // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       AnimatingAbility;                                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SerializedMontagePosition;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedLocalAnimMontage) == 0x000008, "Wrong alignment on FTedLocalAnimMontage");
static_assert(sizeof(FTedLocalAnimMontage) == 0x000028, "Wrong size on FTedLocalAnimMontage");
static_assert(offsetof(FTedLocalAnimMontage, AnimMontage) == 0x000000, "Member 'FTedLocalAnimMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(FTedLocalAnimMontage, StartSectionName) == 0x00000C, "Member 'FTedLocalAnimMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(FTedLocalAnimMontage, AnimatingAbility) == 0x000018, "Member 'FTedLocalAnimMontage::AnimatingAbility' has a wrong offset!");
static_assert(offsetof(FTedLocalAnimMontage, SerializedMontagePosition) == 0x000020, "Member 'FTedLocalAnimMontage::SerializedMontagePosition' has a wrong offset!");

// ScriptStruct Tempest.TedStyleAssetWrapper
// 0x0008 (0x0008 - 0x0000)
struct FTedStyleAssetWrapper final
{
public:
	class USlateWidgetStyleAsset*                 StyleAsset;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStyleAssetWrapper) == 0x000008, "Wrong alignment on FTedStyleAssetWrapper");
static_assert(sizeof(FTedStyleAssetWrapper) == 0x000008, "Wrong size on FTedStyleAssetWrapper");
static_assert(offsetof(FTedStyleAssetWrapper, StyleAsset) == 0x000000, "Member 'FTedStyleAssetWrapper::StyleAsset' has a wrong offset!");

// ScriptStruct Tempest.GameplayEffectStackContainer
// 0x0060 (0x0168 - 0x0108)
struct FGameplayEffectStackContainer final : public FFastArraySerializer
{
public:
	TArray<struct FGameplayEffectStack>           Stacks;                                            // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x50];                                     // 0x0118(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayEffectStackContainer) == 0x000008, "Wrong alignment on FGameplayEffectStackContainer");
static_assert(sizeof(FGameplayEffectStackContainer) == 0x000168, "Wrong size on FGameplayEffectStackContainer");
static_assert(offsetof(FGameplayEffectStackContainer, Stacks) == 0x000108, "Member 'FGameplayEffectStackContainer::Stacks' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_Health
// 0x000F (0x0010 - 0x0001)
struct FTedBarPreview_Health final : public FTedBarPreview_Base
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHP;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurHP;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RulerSpacing;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreview_Health) == 0x000004, "Wrong alignment on FTedBarPreview_Health");
static_assert(sizeof(FTedBarPreview_Health) == 0x000010, "Wrong size on FTedBarPreview_Health");
static_assert(offsetof(FTedBarPreview_Health, MaxHP) == 0x000004, "Member 'FTedBarPreview_Health::MaxHP' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Health, CurHP) == 0x000008, "Member 'FTedBarPreview_Health::CurHP' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Health, RulerSpacing) == 0x00000C, "Member 'FTedBarPreview_Health::RulerSpacing' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_Garrison
// 0x000B (0x000C - 0x0001)
struct FTedBarPreview_Garrison final : public FTedBarPreview_Base
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxUnit;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeSlots;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreview_Garrison) == 0x000004, "Wrong alignment on FTedBarPreview_Garrison");
static_assert(sizeof(FTedBarPreview_Garrison) == 0x00000C, "Wrong size on FTedBarPreview_Garrison");
static_assert(offsetof(FTedBarPreview_Garrison, MaxUnit) == 0x000004, "Member 'FTedBarPreview_Garrison::MaxUnit' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Garrison, FreeSlots) == 0x000008, "Member 'FTedBarPreview_Garrison::FreeSlots' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_Ammo
// 0x000B (0x000C - 0x0001)
struct FTedBarPreview_Ammo final : public FTedBarPreview_Base
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmmo;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoLeft;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreview_Ammo) == 0x000004, "Wrong alignment on FTedBarPreview_Ammo");
static_assert(sizeof(FTedBarPreview_Ammo) == 0x00000C, "Wrong size on FTedBarPreview_Ammo");
static_assert(offsetof(FTedBarPreview_Ammo, MaxAmmo) == 0x000004, "Member 'FTedBarPreview_Ammo::MaxAmmo' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_Ammo, AmmoLeft) == 0x000008, "Member 'FTedBarPreview_Ammo::AmmoLeft' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_BuildSellCaptureTimed
// 0x000B (0x000C - 0x0001)
struct FTedBarPreview_BuildSellCaptureTimed final : public FTedBarPreview_Base
{
public:
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTSColor                                     Color;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedProgressType                              Type;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBarPreview_BuildSellCaptureTimed) == 0x000004, "Wrong alignment on FTedBarPreview_BuildSellCaptureTimed");
static_assert(sizeof(FTedBarPreview_BuildSellCaptureTimed) == 0x00000C, "Wrong size on FTedBarPreview_BuildSellCaptureTimed");
static_assert(offsetof(FTedBarPreview_BuildSellCaptureTimed, Progress) == 0x000004, "Member 'FTedBarPreview_BuildSellCaptureTimed::Progress' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_BuildSellCaptureTimed, Color) == 0x000008, "Member 'FTedBarPreview_BuildSellCaptureTimed::Color' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_BuildSellCaptureTimed, Type) == 0x000009, "Member 'FTedBarPreview_BuildSellCaptureTimed::Type' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreview_DebuffAndVeterancy
// 0x0003 (0x0004 - 0x0001)
struct FTedBarPreview_DebuffAndVeterancy final : public FTedBarPreview_Base
{
public:
	ETedVeterancyLevel                            Veterancy;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBuff;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDebuff;                                        // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreview_DebuffAndVeterancy) == 0x000001, "Wrong alignment on FTedBarPreview_DebuffAndVeterancy");
static_assert(sizeof(FTedBarPreview_DebuffAndVeterancy) == 0x000004, "Wrong size on FTedBarPreview_DebuffAndVeterancy");
static_assert(offsetof(FTedBarPreview_DebuffAndVeterancy, Veterancy) == 0x000001, "Member 'FTedBarPreview_DebuffAndVeterancy::Veterancy' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_DebuffAndVeterancy, bHasBuff) == 0x000002, "Member 'FTedBarPreview_DebuffAndVeterancy::bHasBuff' has a wrong offset!");
static_assert(offsetof(FTedBarPreview_DebuffAndVeterancy, bHasDebuff) == 0x000003, "Member 'FTedBarPreview_DebuffAndVeterancy::bHasDebuff' has a wrong offset!");

// ScriptStruct Tempest.TedBarPreviewEntry
// 0x0050 (0x0050 - 0x0000)
struct FTedBarPreviewEntry final
{
public:
	float                                         PreviewLength;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   PreviewFaction;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedBarPreview_Health                  Preview_Health;                                    // 0x0008(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedBarPreview_Garrison                Preview_Garrison;                                  // 0x0018(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedBarPreview_Ammo                    Preview_Ammo;                                      // 0x0024(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedBarPreview_Debuff                  Preview_Debuff;                                    // 0x0030(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedBarPreview_BuildSellCaptureTimed   Preview_BuildSellCaptureTimed;                     // 0x0040(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedBarPreview_DebuffAndVeterancy      Preview_DebuffAndVeterancy;                        // 0x004C(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarPreviewEntry) == 0x000004, "Wrong alignment on FTedBarPreviewEntry");
static_assert(sizeof(FTedBarPreviewEntry) == 0x000050, "Wrong size on FTedBarPreviewEntry");
static_assert(offsetof(FTedBarPreviewEntry, PreviewLength) == 0x000000, "Member 'FTedBarPreviewEntry::PreviewLength' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, PreviewFaction) == 0x000004, "Member 'FTedBarPreviewEntry::PreviewFaction' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_Health) == 0x000008, "Member 'FTedBarPreviewEntry::Preview_Health' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_Garrison) == 0x000018, "Member 'FTedBarPreviewEntry::Preview_Garrison' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_Ammo) == 0x000024, "Member 'FTedBarPreviewEntry::Preview_Ammo' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_Debuff) == 0x000030, "Member 'FTedBarPreviewEntry::Preview_Debuff' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_BuildSellCaptureTimed) == 0x000040, "Member 'FTedBarPreviewEntry::Preview_BuildSellCaptureTimed' has a wrong offset!");
static_assert(offsetof(FTedBarPreviewEntry, Preview_DebuffAndVeterancy) == 0x00004C, "Member 'FTedBarPreviewEntry::Preview_DebuffAndVeterancy' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionPropertyModifier
// 0x0020 (0x0020 - 0x0000)
struct FTedDefinitionPropertyModifier final
{
public:
	struct FTedDefinitionPropertyData             PropertyData;                                      // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	ETedDefinitionModOp                           ModifierOp;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionPropertyModifier) == 0x000008, "Wrong alignment on FTedDefinitionPropertyModifier");
static_assert(sizeof(FTedDefinitionPropertyModifier) == 0x000020, "Wrong size on FTedDefinitionPropertyModifier");
static_assert(offsetof(FTedDefinitionPropertyModifier, PropertyData) == 0x000000, "Member 'FTedDefinitionPropertyModifier::PropertyData' has a wrong offset!");
static_assert(offsetof(FTedDefinitionPropertyModifier, ModifierOp) == 0x000018, "Member 'FTedDefinitionPropertyModifier::ModifierOp' has a wrong offset!");

// ScriptStruct Tempest.TedGameplayTagContainerModAggregator
// 0x0000 (0x00D8 - 0x00D8)
struct FTedGameplayTagContainerModAggregator final : public FTedDefinitionModAggregator
{
};
static_assert(alignof(FTedGameplayTagContainerModAggregator) == 0x000008, "Wrong alignment on FTedGameplayTagContainerModAggregator");
static_assert(sizeof(FTedGameplayTagContainerModAggregator) == 0x0000D8, "Wrong size on FTedGameplayTagContainerModAggregator");

// ScriptStruct Tempest.AIBuildOrderQueue
// 0x0020 (0x0030 - 0x0010)
struct FAIBuildOrderQueue final : public FOwnedStruct
{
public:
	TArray<struct FAIBuildOrderQueueElement>      Queue;                                             // 0x0010(0x0010)(ZeroConstructor, SaveGame, Protected, NativeAccessSpecifierProtected)
	int32                                         LowestPriority;                                    // 0x0020(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         HighestPriority;                                   // 0x0024(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIBuildOrderQueue) == 0x000008, "Wrong alignment on FAIBuildOrderQueue");
static_assert(sizeof(FAIBuildOrderQueue) == 0x000030, "Wrong size on FAIBuildOrderQueue");
static_assert(offsetof(FAIBuildOrderQueue, Queue) == 0x000010, "Member 'FAIBuildOrderQueue::Queue' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueue, LowestPriority) == 0x000020, "Member 'FAIBuildOrderQueue::LowestPriority' has a wrong offset!");
static_assert(offsetof(FAIBuildOrderQueue, HighestPriority) == 0x000024, "Member 'FAIBuildOrderQueue::HighestPriority' has a wrong offset!");

// ScriptStruct Tempest.AIUnitLimit
// 0x000C (0x000C - 0x0000)
struct FAIUnitLimit final
{
public:
	struct FGameplayTag                           DefinitionId;                                      // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAIUnitLimit) == 0x000004, "Wrong alignment on FAIUnitLimit");
static_assert(sizeof(FAIUnitLimit) == 0x00000C, "Wrong size on FAIUnitLimit");
static_assert(offsetof(FAIUnitLimit, DefinitionId) == 0x000000, "Member 'FAIUnitLimit::DefinitionId' has a wrong offset!");
static_assert(offsetof(FAIUnitLimit, Limit) == 0x000008, "Member 'FAIUnitLimit::Limit' has a wrong offset!");

// ScriptStruct Tempest.AIMissionHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAIMissionHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAIMissionHandle) == 0x000004, "Wrong alignment on FAIMissionHandle");
static_assert(sizeof(FAIMissionHandle) == 0x000004, "Wrong size on FAIMissionHandle");

// ScriptStruct Tempest.EntityOverlapInfo
// 0x0020 (0x0020 - 0x0000)
struct FEntityOverlapInfo final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverlapping;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEntityOverlapInfo) == 0x000008, "Wrong alignment on FEntityOverlapInfo");
static_assert(sizeof(FEntityOverlapInfo) == 0x000020, "Wrong size on FEntityOverlapInfo");
static_assert(offsetof(FEntityOverlapInfo, bActive) == 0x000000, "Member 'FEntityOverlapInfo::bActive' has a wrong offset!");
static_assert(offsetof(FEntityOverlapInfo, bOverlapping) == 0x000001, "Member 'FEntityOverlapInfo::bOverlapping' has a wrong offset!");
static_assert(offsetof(FEntityOverlapInfo, Location) == 0x000008, "Member 'FEntityOverlapInfo::Location' has a wrong offset!");

// ScriptStruct Tempest.EcsComp_TriggerVolume
// 0x0058 (0x0058 - 0x0000)
struct FEcsComp_TriggerVolume final
{
public:
	TWeakObjectPtr<class AVolume>                 Volume;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FEcsEntityView, struct FEntityOverlapInfo> OverlapInfos;                             // 0x0008(0x0050)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_TriggerVolume) == 0x000008, "Wrong alignment on FEcsComp_TriggerVolume");
static_assert(sizeof(FEcsComp_TriggerVolume) == 0x000058, "Wrong size on FEcsComp_TriggerVolume");
static_assert(offsetof(FEcsComp_TriggerVolume, Volume) == 0x000000, "Member 'FEcsComp_TriggerVolume::Volume' has a wrong offset!");
static_assert(offsetof(FEcsComp_TriggerVolume, OverlapInfos) == 0x000008, "Member 'FEcsComp_TriggerVolume::OverlapInfos' has a wrong offset!");

// ScriptStruct Tempest.AISquadHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAISquadHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAISquadHandle) == 0x000004, "Wrong alignment on FAISquadHandle");
static_assert(sizeof(FAISquadHandle) == 0x000004, "Wrong size on FAISquadHandle");

// ScriptStruct Tempest.AITaggedActor
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FAITaggedActor final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITaggedActor) == 0x000004, "Wrong alignment on FAITaggedActor");
static_assert(sizeof(FAITaggedActor) == 0x000010, "Wrong size on FAITaggedActor");

// ScriptStruct Tempest.DBSCAN
// 0x0001 (0x0001 - 0x0000)
struct FDBSCAN final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBSCAN) == 0x000001, "Wrong alignment on FDBSCAN");
static_assert(sizeof(FDBSCAN) == 0x000001, "Wrong size on FDBSCAN");

// ScriptStruct Tempest.NativeActorEvents
// 0x0068 (0x0068 - 0x0000)
struct FNativeActorEvents final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x60];                                       // 0x0008(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNativeActorEvents) == 0x000008, "Wrong alignment on FNativeActorEvents");
static_assert(sizeof(FNativeActorEvents) == 0x000068, "Wrong size on FNativeActorEvents");
static_assert(offsetof(FNativeActorEvents, Actor) == 0x000000, "Member 'FNativeActorEvents::Actor' has a wrong offset!");

// ScriptStruct Tempest.FoliageOverlapRequest
// 0x00B0 (0x00B0 - 0x0000)
struct FFoliageOverlapRequest final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoredFoliage;                                    // 0x0008(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         FoliageChannelFlag;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransform;                                    // 0x0030(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ActorExtent;                                       // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageOverlapRequest) == 0x000010, "Wrong alignment on FFoliageOverlapRequest");
static_assert(sizeof(FFoliageOverlapRequest) == 0x0000B0, "Wrong size on FFoliageOverlapRequest");
static_assert(offsetof(FFoliageOverlapRequest, Pawn) == 0x000000, "Member 'FFoliageOverlapRequest::Pawn' has a wrong offset!");
static_assert(offsetof(FFoliageOverlapRequest, IgnoredFoliage) == 0x000008, "Member 'FFoliageOverlapRequest::IgnoredFoliage' has a wrong offset!");
static_assert(offsetof(FFoliageOverlapRequest, FoliageChannelFlag) == 0x000028, "Member 'FFoliageOverlapRequest::FoliageChannelFlag' has a wrong offset!");
static_assert(offsetof(FFoliageOverlapRequest, ActorTransform) == 0x000030, "Member 'FFoliageOverlapRequest::ActorTransform' has a wrong offset!");
static_assert(offsetof(FFoliageOverlapRequest, ActorExtent) == 0x000090, "Member 'FFoliageOverlapRequest::ActorExtent' has a wrong offset!");

// ScriptStruct Tempest.ReplicatedOverlap
// 0x0018 (0x0018 - 0x0000)
struct FReplicatedOverlap final
{
public:
	struct FVector2D_NetQuantize                  ActorLocation;                                     // 0x0000(0x0010)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TileDataIdx;                                       // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ISMCIdx;                                           // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        InstanceIdx;                                       // 0x0014(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicatedOverlap) == 0x000008, "Wrong alignment on FReplicatedOverlap");
static_assert(sizeof(FReplicatedOverlap) == 0x000018, "Wrong size on FReplicatedOverlap");
static_assert(offsetof(FReplicatedOverlap, ActorLocation) == 0x000000, "Member 'FReplicatedOverlap::ActorLocation' has a wrong offset!");
static_assert(offsetof(FReplicatedOverlap, TileDataIdx) == 0x000010, "Member 'FReplicatedOverlap::TileDataIdx' has a wrong offset!");
static_assert(offsetof(FReplicatedOverlap, ISMCIdx) == 0x000012, "Member 'FReplicatedOverlap::ISMCIdx' has a wrong offset!");
static_assert(offsetof(FReplicatedOverlap, InstanceIdx) == 0x000014, "Member 'FReplicatedOverlap::InstanceIdx' has a wrong offset!");

// ScriptStruct Tempest.FoliageInstanceAnimData
// 0x01A0 (0x01A0 - 0x0000)
struct FFoliageInstanceAnimData final
{
public:
	uint16                                        InstanceIdx;                                       // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     AnimationCurve;                                    // 0x0008(0x0088)(NativeAccessSpecifierPublic)
	float                                         TimeSeconds;                                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDelay;                                      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FadeOutScale;                                      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OriginalTransform;                                 // 0x00C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetTransform;                                   // 0x0120(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactRightVec;                                    // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESquishAxis                                   SquishAxis;                                        // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHasRotation : 1;                                  // 0x0199(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasTranslation : 1;                               // 0x0199(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasScale : 1;                                     // 0x0199(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAnimationFinished : 1;                            // 0x0199(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartedFadeOut : 1;                               // 0x0199(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFadedOut : 1;                                     // 0x0199(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUpdateInstanceTransform : 1;                      // 0x0199(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19A[0x6];                                      // 0x019A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageInstanceAnimData) == 0x000010, "Wrong alignment on FFoliageInstanceAnimData");
static_assert(sizeof(FFoliageInstanceAnimData) == 0x0001A0, "Wrong size on FFoliageInstanceAnimData");
static_assert(offsetof(FFoliageInstanceAnimData, InstanceIdx) == 0x000000, "Member 'FFoliageInstanceAnimData::InstanceIdx' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, AnimationCurve) == 0x000008, "Member 'FFoliageInstanceAnimData::AnimationCurve' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, TimeSeconds) == 0x000090, "Member 'FFoliageInstanceAnimData::TimeSeconds' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, FadeOutTime) == 0x000094, "Member 'FFoliageInstanceAnimData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, FadeOutDelay) == 0x000098, "Member 'FFoliageInstanceAnimData::FadeOutDelay' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, FadeOutScale) == 0x0000A0, "Member 'FFoliageInstanceAnimData::FadeOutScale' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, OriginalTransform) == 0x0000C0, "Member 'FFoliageInstanceAnimData::OriginalTransform' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, TargetTransform) == 0x000120, "Member 'FFoliageInstanceAnimData::TargetTransform' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, ImpactRightVec) == 0x000180, "Member 'FFoliageInstanceAnimData::ImpactRightVec' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceAnimData, SquishAxis) == 0x000198, "Member 'FFoliageInstanceAnimData::SquishAxis' has a wrong offset!");

// ScriptStruct Tempest.FoliageInstanceData
// 0x00C0 (0x00C0 - 0x0000)
struct FFoliageInstanceData final
{
public:
	uint8                                         ISMCIdx;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        InstanceIdx;                                       // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InstanceTransform;                                 // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class ATedPawn>>             InteractablePawnTypes;                             // 0x0070(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageInstanceData) == 0x000010, "Wrong alignment on FFoliageInstanceData");
static_assert(sizeof(FFoliageInstanceData) == 0x0000C0, "Wrong size on FFoliageInstanceData");
static_assert(offsetof(FFoliageInstanceData, ISMCIdx) == 0x000000, "Member 'FFoliageInstanceData::ISMCIdx' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceData, InstanceIdx) == 0x000002, "Member 'FFoliageInstanceData::InstanceIdx' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceData, InstanceTransform) == 0x000010, "Member 'FFoliageInstanceData::InstanceTransform' has a wrong offset!");
static_assert(offsetof(FFoliageInstanceData, InteractablePawnTypes) == 0x000070, "Member 'FFoliageInstanceData::InteractablePawnTypes' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchEndBiEvent_EventContext
// 0x0030 (0x0030 - 0x0000)
struct FServerMatchEndBiEvent_EventContext final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mmrChange;                                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         mmrCurrent;                                        // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         matchTimer;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataCenterId;                                      // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchEndBiEvent_EventContext) == 0x000008, "Wrong alignment on FServerMatchEndBiEvent_EventContext");
static_assert(sizeof(FServerMatchEndBiEvent_EventContext) == 0x000030, "Wrong size on FServerMatchEndBiEvent_EventContext");
static_assert(offsetof(FServerMatchEndBiEvent_EventContext, Result) == 0x000000, "Member 'FServerMatchEndBiEvent_EventContext::Result' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent_EventContext, mmrChange) == 0x000010, "Member 'FServerMatchEndBiEvent_EventContext::mmrChange' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent_EventContext, mmrCurrent) == 0x000014, "Member 'FServerMatchEndBiEvent_EventContext::mmrCurrent' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent_EventContext, matchTimer) == 0x000018, "Member 'FServerMatchEndBiEvent_EventContext::matchTimer' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent_EventContext, DataCenterId) == 0x000020, "Member 'FServerMatchEndBiEvent_EventContext::DataCenterId' has a wrong offset!");

// ScriptStruct Tempest.FoliageTileData
// 0x0020 (0x0020 - 0x0000)
struct FFoliageTileData final
{
public:
	uint32                                        TileRef;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageInstanceData>           FoliageInstanceDataCache;                          // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bModifiesNavArea;                                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageTileData) == 0x000008, "Wrong alignment on FFoliageTileData");
static_assert(sizeof(FFoliageTileData) == 0x000020, "Wrong size on FFoliageTileData");
static_assert(offsetof(FFoliageTileData, TileRef) == 0x000000, "Member 'FFoliageTileData::TileRef' has a wrong offset!");
static_assert(offsetof(FFoliageTileData, FoliageInstanceDataCache) == 0x000008, "Member 'FFoliageTileData::FoliageInstanceDataCache' has a wrong offset!");
static_assert(offsetof(FFoliageTileData, bModifiesNavArea) == 0x000018, "Member 'FFoliageTileData::bModifiesNavArea' has a wrong offset!");

// ScriptStruct Tempest.TedStructureWallMeshSetup_Temp
// 0x0028 (0x0028 - 0x0000)
struct FTedStructureWallMeshSetup_Temp final
{
public:
	class UStaticMesh*                            NoConnection;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            I;                                                 // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            L;                                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            T;                                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            X;                                                 // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureWallMeshSetup_Temp) == 0x000008, "Wrong alignment on FTedStructureWallMeshSetup_Temp");
static_assert(sizeof(FTedStructureWallMeshSetup_Temp) == 0x000028, "Wrong size on FTedStructureWallMeshSetup_Temp");
static_assert(offsetof(FTedStructureWallMeshSetup_Temp, NoConnection) == 0x000000, "Member 'FTedStructureWallMeshSetup_Temp::NoConnection' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup_Temp, I) == 0x000008, "Member 'FTedStructureWallMeshSetup_Temp::I' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup_Temp, L) == 0x000010, "Member 'FTedStructureWallMeshSetup_Temp::L' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup_Temp, T) == 0x000018, "Member 'FTedStructureWallMeshSetup_Temp::T' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup_Temp, X) == 0x000020, "Member 'FTedStructureWallMeshSetup_Temp::X' has a wrong offset!");

// ScriptStruct Tempest.FoliageChannelData
// 0x00C0 (0x00C0 - 0x0000)
struct FFoliageChannelData final
{
public:
	EFoliageChannel                               FoliageChannel;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFoliageTileData>               FoliageData;                                       // 0x0008(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TMap<uint32, int32>                           FoliageTileData;                                   // 0x0018(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TArray<uint32>                                CachedFoliageTiles;                                // 0x0068(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	TArray<struct FFoliageComponentAnimData>      ActiveAnimations;                                  // 0x0078(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UHierarchicalInstancedStaticMeshComponent>> HISMCArray;              // 0x0088(0x0010)(ExportObject, ZeroConstructor, RepSkip, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AFoliageClusterActor*>           ClusterActors;                                     // 0x0098(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	int32                                         ComponentAnimDataToTickIdx;                        // 0x00A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepFoliageToProcessIdx;                            // 0x00AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReplicatedOverlap>             OverlappedFoliage;                                 // 0x00B0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageChannelData) == 0x000008, "Wrong alignment on FFoliageChannelData");
static_assert(sizeof(FFoliageChannelData) == 0x0000C0, "Wrong size on FFoliageChannelData");
static_assert(offsetof(FFoliageChannelData, FoliageChannel) == 0x000000, "Member 'FFoliageChannelData::FoliageChannel' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, FoliageData) == 0x000008, "Member 'FFoliageChannelData::FoliageData' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, FoliageTileData) == 0x000018, "Member 'FFoliageChannelData::FoliageTileData' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, CachedFoliageTiles) == 0x000068, "Member 'FFoliageChannelData::CachedFoliageTiles' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, ActiveAnimations) == 0x000078, "Member 'FFoliageChannelData::ActiveAnimations' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, HISMCArray) == 0x000088, "Member 'FFoliageChannelData::HISMCArray' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, ClusterActors) == 0x000098, "Member 'FFoliageChannelData::ClusterActors' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, ComponentAnimDataToTickIdx) == 0x0000A8, "Member 'FFoliageChannelData::ComponentAnimDataToTickIdx' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, RepFoliageToProcessIdx) == 0x0000AC, "Member 'FFoliageChannelData::RepFoliageToProcessIdx' has a wrong offset!");
static_assert(offsetof(FFoliageChannelData, OverlappedFoliage) == 0x0000B0, "Member 'FFoliageChannelData::OverlappedFoliage' has a wrong offset!");

// ScriptStruct Tempest.AwakeningLevel
// 0x0008 (0x0008 - 0x0000)
struct FAwakeningLevel final
{
public:
	int32                                         EnlightenedSacrificed;                             // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Buff;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAwakeningLevel) == 0x000004, "Wrong alignment on FAwakeningLevel");
static_assert(sizeof(FAwakeningLevel) == 0x000008, "Wrong size on FAwakeningLevel");
static_assert(offsetof(FAwakeningLevel, EnlightenedSacrificed) == 0x000000, "Member 'FAwakeningLevel::EnlightenedSacrificed' has a wrong offset!");
static_assert(offsetof(FAwakeningLevel, Buff) == 0x000004, "Member 'FAwakeningLevel::Buff' has a wrong offset!");

// ScriptStruct Tempest.AmmoRechargeData
// 0x0008 (0x0008 - 0x0000)
struct FAmmoRechargeData final
{
public:
	int32                                         AmmoCountToRecharge;                               // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedWeaponAmmoCheckOptions                    WeaponSelection;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmmoRechargeData) == 0x000004, "Wrong alignment on FAmmoRechargeData");
static_assert(sizeof(FAmmoRechargeData) == 0x000008, "Wrong size on FAmmoRechargeData");
static_assert(offsetof(FAmmoRechargeData, AmmoCountToRecharge) == 0x000000, "Member 'FAmmoRechargeData::AmmoCountToRecharge' has a wrong offset!");
static_assert(offsetof(FAmmoRechargeData, WeaponSelection) == 0x000004, "Member 'FAmmoRechargeData::WeaponSelection' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityBuildBiEvent_BuildingDetails
// 0x0040 (0x0040 - 0x0000)
struct FServerMatchActivityBuildBiEvent_BuildingDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         cost;                                              // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         hitpoints;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildDuration;                                     // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 initialOwner;                                      // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityBuildBiEvent_BuildingDetails) == 0x000008, "Wrong alignment on FServerMatchActivityBuildBiEvent_BuildingDetails");
static_assert(sizeof(FServerMatchActivityBuildBiEvent_BuildingDetails) == 0x000040, "Wrong size on FServerMatchActivityBuildBiEvent_BuildingDetails");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, Name) == 0x000000, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::Name' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, Category) == 0x000010, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::Category' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, isMilitary) == 0x000020, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::isMilitary' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, cost) == 0x000024, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::cost' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, hitpoints) == 0x000028, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::hitpoints' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, buildDuration) == 0x00002C, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::buildDuration' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_BuildingDetails, initialOwner) == 0x000030, "Member 'FServerMatchActivityBuildBiEvent_BuildingDetails::initialOwner' has a wrong offset!");

// ScriptStruct Tempest.DirectionalLightParameters
// 0x00F8 (0x00F8 - 0x0000)
struct FDirectionalLightParameters final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceAngle;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightSourceSoftAngle;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsWorld;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IndirectLightingIntensity;                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowCascadeBiasDistribution;                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForwardShadingPriority;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastModulatedShadows;                             // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 ModulatedShadowColor;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowAmount;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowResolutionScale;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContactShadowLengthInWS;                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastTranslucentShadows;                            // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsFromCinematicObjectsOnly;              // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectDynamicIndirectLighting;                    // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceCachedShadowsForMovablePrimitives;           // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0055(0x0001)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CastStaticShadows;                                 // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastDynamicShadows;                                // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x0059(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricShadow;                             // 0x005A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastDeepShadow;                                   // 0x005B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeepShadowLayerDistribution;                       // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftOcclusion;                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftBloom;                            // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceStationaryLight;              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicShadowCascades;                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeTransitionFraction;                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowDistanceFadeoutFraction;                     // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInsetShadowsForMovableObjects;                 // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FarShadowCascadeCount;                             // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarShadowDistance;                                 // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFieldShadowDistance;                       // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRayTracedDistanceFieldShadows;                 // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceDistance;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayStartOffsetDepthScale;                          // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDirectionalLightParameters) == 0x000008, "Wrong alignment on FDirectionalLightParameters");
static_assert(sizeof(FDirectionalLightParameters) == 0x0000F8, "Wrong size on FDirectionalLightParameters");
static_assert(offsetof(FDirectionalLightParameters, Intensity) == 0x000000, "Member 'FDirectionalLightParameters::Intensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightColor) == 0x000004, "Member 'FDirectionalLightParameters::LightColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightSourceAngle) == 0x000008, "Member 'FDirectionalLightParameters::LightSourceAngle' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightSourceSoftAngle) == 0x00000C, "Member 'FDirectionalLightParameters::LightSourceSoftAngle' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bUseTemperature) == 0x000010, "Member 'FDirectionalLightParameters::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, Temperature) == 0x000014, "Member 'FDirectionalLightParameters::Temperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bAffectsWorld) == 0x000018, "Member 'FDirectionalLightParameters::bAffectsWorld' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CastShadows) == 0x000019, "Member 'FDirectionalLightParameters::CastShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, IndirectLightingIntensity) == 0x00001C, "Member 'FDirectionalLightParameters::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, VolumetricScatteringIntensity) == 0x000020, "Member 'FDirectionalLightParameters::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowCascadeBiasDistribution) == 0x000024, "Member 'FDirectionalLightParameters::ShadowCascadeBiasDistribution' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ForwardShadingPriority) == 0x000028, "Member 'FDirectionalLightParameters::ForwardShadingPriority' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bCastModulatedShadows) == 0x00002C, "Member 'FDirectionalLightParameters::bCastModulatedShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ModulatedShadowColor) == 0x000030, "Member 'FDirectionalLightParameters::ModulatedShadowColor' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowAmount) == 0x000034, "Member 'FDirectionalLightParameters::ShadowAmount' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, SpecularScale) == 0x000038, "Member 'FDirectionalLightParameters::SpecularScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowResolutionScale) == 0x00003C, "Member 'FDirectionalLightParameters::ShadowResolutionScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowBias) == 0x000040, "Member 'FDirectionalLightParameters::ShadowBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowSlopeBias) == 0x000044, "Member 'FDirectionalLightParameters::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowSharpen) == 0x000048, "Member 'FDirectionalLightParameters::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ContactShadowLength) == 0x00004C, "Member 'FDirectionalLightParameters::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ContactShadowLengthInWS) == 0x000050, "Member 'FDirectionalLightParameters::ContactShadowLengthInWS' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CastTranslucentShadows) == 0x000051, "Member 'FDirectionalLightParameters::CastTranslucentShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bCastShadowsFromCinematicObjectsOnly) == 0x000052, "Member 'FDirectionalLightParameters::bCastShadowsFromCinematicObjectsOnly' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bAffectDynamicIndirectLighting) == 0x000053, "Member 'FDirectionalLightParameters::bAffectDynamicIndirectLighting' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bForceCachedShadowsForMovablePrimitives) == 0x000054, "Member 'FDirectionalLightParameters::bForceCachedShadowsForMovablePrimitives' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightingChannels) == 0x000055, "Member 'FDirectionalLightParameters::LightingChannels' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CastStaticShadows) == 0x000056, "Member 'FDirectionalLightParameters::CastStaticShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CastDynamicShadows) == 0x000057, "Member 'FDirectionalLightParameters::CastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bAffectTranslucentLighting) == 0x000058, "Member 'FDirectionalLightParameters::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bTransmission) == 0x000059, "Member 'FDirectionalLightParameters::bTransmission' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bCastVolumetricShadow) == 0x00005A, "Member 'FDirectionalLightParameters::bCastVolumetricShadow' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bCastDeepShadow) == 0x00005B, "Member 'FDirectionalLightParameters::bCastDeepShadow' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DeepShadowLayerDistribution) == 0x00005C, "Member 'FDirectionalLightParameters::DeepShadowLayerDistribution' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bEnableLightShaftOcclusion) == 0x000060, "Member 'FDirectionalLightParameters::bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, OcclusionMaskDarkness) == 0x000064, "Member 'FDirectionalLightParameters::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, OcclusionDepthRange) == 0x000068, "Member 'FDirectionalLightParameters::OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bEnableLightShaftBloom) == 0x00006C, "Member 'FDirectionalLightParameters::bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, BloomScale) == 0x000070, "Member 'FDirectionalLightParameters::BloomScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, BloomThreshold) == 0x000074, "Member 'FDirectionalLightParameters::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, BloomMaxBrightness) == 0x000078, "Member 'FDirectionalLightParameters::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, BloomTint) == 0x00007C, "Member 'FDirectionalLightParameters::BloomTint' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightShaftOverrideDirection) == 0x000080, "Member 'FDirectionalLightParameters::LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DynamicShadowDistanceMovableLight) == 0x000098, "Member 'FDirectionalLightParameters::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DynamicShadowDistanceStationaryLight) == 0x00009C, "Member 'FDirectionalLightParameters::DynamicShadowDistanceStationaryLight' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DynamicShadowCascades) == 0x0000A0, "Member 'FDirectionalLightParameters::DynamicShadowCascades' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CascadeDistributionExponent) == 0x0000A4, "Member 'FDirectionalLightParameters::CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, CascadeTransitionFraction) == 0x0000A8, "Member 'FDirectionalLightParameters::CascadeTransitionFraction' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, ShadowDistanceFadeoutFraction) == 0x0000AC, "Member 'FDirectionalLightParameters::ShadowDistanceFadeoutFraction' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bUseInsetShadowsForMovableObjects) == 0x0000B0, "Member 'FDirectionalLightParameters::bUseInsetShadowsForMovableObjects' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, FarShadowCascadeCount) == 0x0000B4, "Member 'FDirectionalLightParameters::FarShadowCascadeCount' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, FarShadowDistance) == 0x0000B8, "Member 'FDirectionalLightParameters::FarShadowDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DistanceFieldShadowDistance) == 0x0000BC, "Member 'FDirectionalLightParameters::DistanceFieldShadowDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, bUseRayTracedDistanceFieldShadows) == 0x0000C0, "Member 'FDirectionalLightParameters::bUseRayTracedDistanceFieldShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, TraceDistance) == 0x0000C4, "Member 'FDirectionalLightParameters::TraceDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, RayStartOffsetDepthScale) == 0x0000C8, "Member 'FDirectionalLightParameters::RayStartOffsetDepthScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightFunctionMaterial) == 0x0000D0, "Member 'FDirectionalLightParameters::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightFunctionScale) == 0x0000D8, "Member 'FDirectionalLightParameters::LightFunctionScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, LightFunctionFadeDistance) == 0x0000F0, "Member 'FDirectionalLightParameters::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParameters, DisabledBrightness) == 0x0000F4, "Member 'FDirectionalLightParameters::DisabledBrightness' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchStartBiEvent_PrematchDetails
// 0x0020 (0x0020 - 0x0000)
struct FClientMatchStartBiEvent_PrematchDetails final
{
public:
	int32                                         lobbyDuration;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loadingDuration;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         prematchDuration;                                  // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 matchReason;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchStartBiEvent_PrematchDetails) == 0x000008, "Wrong alignment on FClientMatchStartBiEvent_PrematchDetails");
static_assert(sizeof(FClientMatchStartBiEvent_PrematchDetails) == 0x000020, "Wrong size on FClientMatchStartBiEvent_PrematchDetails");
static_assert(offsetof(FClientMatchStartBiEvent_PrematchDetails, lobbyDuration) == 0x000000, "Member 'FClientMatchStartBiEvent_PrematchDetails::lobbyDuration' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent_PrematchDetails, loadingDuration) == 0x000004, "Member 'FClientMatchStartBiEvent_PrematchDetails::loadingDuration' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent_PrematchDetails, prematchDuration) == 0x000008, "Member 'FClientMatchStartBiEvent_PrematchDetails::prematchDuration' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent_PrematchDetails, matchReason) == 0x000010, "Member 'FClientMatchStartBiEvent_PrematchDetails::matchReason' has a wrong offset!");

// ScriptStruct Tempest.SkyLightParameters
// 0x0078 (0x0078 - 0x0000)
struct FSkyLightParameters final
{
public:
	bool                                          bRealTimeCapture;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyLightSourceType                           SourceType;                                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CubemapResolution;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyDistanceThreshold;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LightColor;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsWorld;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IndirectLightingIntensity;                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEmissiveOnly;                              // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0034(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastStaticShadows;                                 // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastDynamicShadows;                                // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x0047(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricShadow;                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastDeepShadow;                                   // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeepShadowLayerDistribution;                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMaxDistance;                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Contrast;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionExponent;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOcclusion;                                      // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OcclusionTint;                                     // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOcclusionCombineMode                         OcclusionCombineMode;                              // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudAmbientOcclusion;                            // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionStrength;                     // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionExtent;                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyLightParameters) == 0x000008, "Wrong alignment on FSkyLightParameters");
static_assert(sizeof(FSkyLightParameters) == 0x000078, "Wrong size on FSkyLightParameters");
static_assert(offsetof(FSkyLightParameters, bRealTimeCapture) == 0x000000, "Member 'FSkyLightParameters::bRealTimeCapture' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, SourceType) == 0x000001, "Member 'FSkyLightParameters::SourceType' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, Cubemap) == 0x000008, "Member 'FSkyLightParameters::Cubemap' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, SourceCubemapAngle) == 0x000010, "Member 'FSkyLightParameters::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CubemapResolution) == 0x000014, "Member 'FSkyLightParameters::CubemapResolution' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, SkyDistanceThreshold) == 0x000018, "Member 'FSkyLightParameters::SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, Intensity) == 0x00001C, "Member 'FSkyLightParameters::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, LightColor) == 0x000020, "Member 'FSkyLightParameters::LightColor' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bAffectsWorld) == 0x000024, "Member 'FSkyLightParameters::bAffectsWorld' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CastShadows) == 0x000025, "Member 'FSkyLightParameters::CastShadows' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, IndirectLightingIntensity) == 0x000028, "Member 'FSkyLightParameters::IndirectLightingIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, VolumetricScatteringIntensity) == 0x00002C, "Member 'FSkyLightParameters::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bCaptureEmissiveOnly) == 0x000030, "Member 'FSkyLightParameters::bCaptureEmissiveOnly' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bLowerHemisphereIsBlack) == 0x000031, "Member 'FSkyLightParameters::bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, LowerHemisphereColor) == 0x000034, "Member 'FSkyLightParameters::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CastStaticShadows) == 0x000044, "Member 'FSkyLightParameters::CastStaticShadows' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CastDynamicShadows) == 0x000045, "Member 'FSkyLightParameters::CastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bAffectTranslucentLighting) == 0x000046, "Member 'FSkyLightParameters::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bTransmission) == 0x000047, "Member 'FSkyLightParameters::bTransmission' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bCastVolumetricShadow) == 0x000048, "Member 'FSkyLightParameters::bCastVolumetricShadow' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bCastDeepShadow) == 0x000049, "Member 'FSkyLightParameters::bCastDeepShadow' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, DeepShadowLayerDistribution) == 0x00004C, "Member 'FSkyLightParameters::DeepShadowLayerDistribution' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, OcclusionMaxDistance) == 0x000050, "Member 'FSkyLightParameters::OcclusionMaxDistance' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, Contrast) == 0x000054, "Member 'FSkyLightParameters::Contrast' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, OcclusionExponent) == 0x000058, "Member 'FSkyLightParameters::OcclusionExponent' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, MinOcclusion) == 0x00005C, "Member 'FSkyLightParameters::MinOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, OcclusionTint) == 0x000060, "Member 'FSkyLightParameters::OcclusionTint' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, OcclusionCombineMode) == 0x000064, "Member 'FSkyLightParameters::OcclusionCombineMode' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, bCloudAmbientOcclusion) == 0x000065, "Member 'FSkyLightParameters::bCloudAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CloudAmbientOcclusionStrength) == 0x000068, "Member 'FSkyLightParameters::CloudAmbientOcclusionStrength' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CloudAmbientOcclusionExtent) == 0x00006C, "Member 'FSkyLightParameters::CloudAmbientOcclusionExtent' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CloudAmbientOcclusionMapResolutionScale) == 0x000070, "Member 'FSkyLightParameters::CloudAmbientOcclusionMapResolutionScale' has a wrong offset!");
static_assert(offsetof(FSkyLightParameters, CloudAmbientOcclusionApertureScale) == 0x000074, "Member 'FSkyLightParameters::CloudAmbientOcclusionApertureScale' has a wrong offset!");

// ScriptStruct Tempest.ExponentialHeightFogParameters
// 0x00B0 (0x00B0 - 0x0000)
struct FExponentialHeightFogParameters final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringLuminance;                          // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyAtmosphereAmbientContributionColorScale;        // 0x0024(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartDistance;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogCutoffDistance;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureCube*                           InscatteringColorCubemap;                          // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InscatteringColorCubemapAngle;                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InscatteringTextureTint;                           // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyDirectionalInscatteringColorDistance;         // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonDirectionalInscatteringColorDistance;           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStaticLightingScatteringIntensity;    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExponentialHeightFogParameters) == 0x000008, "Wrong alignment on FExponentialHeightFogParameters");
static_assert(sizeof(FExponentialHeightFogParameters) == 0x0000B0, "Wrong size on FExponentialHeightFogParameters");
static_assert(offsetof(FExponentialHeightFogParameters, FogDensity) == 0x000000, "Member 'FExponentialHeightFogParameters::FogDensity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, FogHeightFalloff) == 0x000004, "Member 'FExponentialHeightFogParameters::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, SecondFogData) == 0x000008, "Member 'FExponentialHeightFogParameters::SecondFogData' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, FogInscatteringLuminance) == 0x000014, "Member 'FExponentialHeightFogParameters::FogInscatteringLuminance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, SkyAtmosphereAmbientContributionColorScale) == 0x000024, "Member 'FExponentialHeightFogParameters::SkyAtmosphereAmbientContributionColorScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, FogMaxOpacity) == 0x000034, "Member 'FExponentialHeightFogParameters::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, StartDistance) == 0x000038, "Member 'FExponentialHeightFogParameters::StartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, FogCutoffDistance) == 0x00003C, "Member 'FExponentialHeightFogParameters::FogCutoffDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, InscatteringColorCubemap) == 0x000040, "Member 'FExponentialHeightFogParameters::InscatteringColorCubemap' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, InscatteringColorCubemapAngle) == 0x000048, "Member 'FExponentialHeightFogParameters::InscatteringColorCubemapAngle' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, InscatteringTextureTint) == 0x00004C, "Member 'FExponentialHeightFogParameters::InscatteringTextureTint' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, FullyDirectionalInscatteringColorDistance) == 0x00005C, "Member 'FExponentialHeightFogParameters::FullyDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, NonDirectionalInscatteringColorDistance) == 0x000060, "Member 'FExponentialHeightFogParameters::NonDirectionalInscatteringColorDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, DirectionalInscatteringExponent) == 0x000064, "Member 'FExponentialHeightFogParameters::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, DirectionalInscatteringStartDistance) == 0x000068, "Member 'FExponentialHeightFogParameters::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, DirectionalInscatteringLuminance) == 0x00006C, "Member 'FExponentialHeightFogParameters::DirectionalInscatteringLuminance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, bEnableVolumetricFog) == 0x00007C, "Member 'FExponentialHeightFogParameters::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogScatteringDistribution) == 0x000080, "Member 'FExponentialHeightFogParameters::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogAlbedo) == 0x000084, "Member 'FExponentialHeightFogParameters::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogEmissive) == 0x000088, "Member 'FExponentialHeightFogParameters::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogExtinctionScale) == 0x000098, "Member 'FExponentialHeightFogParameters::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogDistance) == 0x00009C, "Member 'FExponentialHeightFogParameters::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogStartDistance) == 0x0000A0, "Member 'FExponentialHeightFogParameters::VolumetricFogStartDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogNearFadeInDistance) == 0x0000A4, "Member 'FExponentialHeightFogParameters::VolumetricFogNearFadeInDistance' has a wrong offset!");
static_assert(offsetof(FExponentialHeightFogParameters, VolumetricFogStaticLightingScatteringIntensity) == 0x0000A8, "Member 'FExponentialHeightFogParameters::VolumetricFogStaticLightingScatteringIntensity' has a wrong offset!");

// ScriptStruct Tempest.ProcessorDictionaryBody
// 0x0010 (0x0010 - 0x0000)
struct FProcessorDictionaryBody final
{
public:
	TArray<class FString>                         Characters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProcessorDictionaryBody) == 0x000008, "Wrong alignment on FProcessorDictionaryBody");
static_assert(sizeof(FProcessorDictionaryBody) == 0x000010, "Wrong size on FProcessorDictionaryBody");
static_assert(offsetof(FProcessorDictionaryBody, Characters) == 0x000000, "Member 'FProcessorDictionaryBody::Characters' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityDestroyBiEvent_DestroyedUnit
// 0x0050 (0x0050 - 0x0000)
struct FServerMatchActivityDestroyBiEvent_DestroyedUnit final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         hitpoints;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isEnemyBot;                                        // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 enemyFaction;                                      // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 enemyColor;                                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityDestroyBiEvent_DestroyedUnit) == 0x000008, "Wrong alignment on FServerMatchActivityDestroyBiEvent_DestroyedUnit");
static_assert(sizeof(FServerMatchActivityDestroyBiEvent_DestroyedUnit) == 0x000050, "Wrong size on FServerMatchActivityDestroyBiEvent_DestroyedUnit");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, Name) == 0x000000, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::Name' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, Category) == 0x000010, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::Category' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, isMilitary) == 0x000020, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::isMilitary' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, hitpoints) == 0x000024, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::hitpoints' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, isEnemyBot) == 0x000028, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::isEnemyBot' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, enemyFaction) == 0x000030, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::enemyFaction' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyedUnit, enemyColor) == 0x000040, "Member 'FServerMatchActivityDestroyBiEvent_DestroyedUnit::enemyColor' has a wrong offset!");

// ScriptStruct Tempest.RallyPointTarget
// 0x0058 (0x0068 - 0x0010)
struct FRallyPointTarget final : public FOwnedStruct
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCommandData                   RallyPointCommandData;                             // 0x0020(0x0048)(Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FRallyPointTarget) == 0x000008, "Wrong alignment on FRallyPointTarget");
static_assert(sizeof(FRallyPointTarget) == 0x000068, "Wrong size on FRallyPointTarget");
static_assert(offsetof(FRallyPointTarget, RallyPointCommandData) == 0x000020, "Member 'FRallyPointTarget::RallyPointCommandData' has a wrong offset!");

// ScriptStruct Tempest.SkirmishCombatValue
// 0x0010 (0x0010 - 0x0000)
struct FSkirmishCombatValue final
{
public:
	float                                         StrengthAgainsInfantry;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAgainstVehicle;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrengthAgainstAir;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SupportFactor;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkirmishCombatValue) == 0x000004, "Wrong alignment on FSkirmishCombatValue");
static_assert(sizeof(FSkirmishCombatValue) == 0x000010, "Wrong size on FSkirmishCombatValue");
static_assert(offsetof(FSkirmishCombatValue, StrengthAgainsInfantry) == 0x000000, "Member 'FSkirmishCombatValue::StrengthAgainsInfantry' has a wrong offset!");
static_assert(offsetof(FSkirmishCombatValue, StrengthAgainstVehicle) == 0x000004, "Member 'FSkirmishCombatValue::StrengthAgainstVehicle' has a wrong offset!");
static_assert(offsetof(FSkirmishCombatValue, StrengthAgainstAir) == 0x000008, "Member 'FSkirmishCombatValue::StrengthAgainstAir' has a wrong offset!");
static_assert(offsetof(FSkirmishCombatValue, SupportFactor) == 0x00000C, "Member 'FSkirmishCombatValue::SupportFactor' has a wrong offset!");

// ScriptStruct Tempest.SoftActorPtr
// 0x0028 (0x0028 - 0x0000)
struct FSoftActorPtr final
{
public:
	TSoftObjectPtr<class AActor>                  Ptr;                                               // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoftActorPtr) == 0x000008, "Wrong alignment on FSoftActorPtr");
static_assert(sizeof(FSoftActorPtr) == 0x000028, "Wrong size on FSoftActorPtr");
static_assert(offsetof(FSoftActorPtr, Ptr) == 0x000000, "Member 'FSoftActorPtr::Ptr' has a wrong offset!");

// ScriptStruct Tempest.AbilityMontageData
// 0x0018 (0x0018 - 0x0000)
struct FAbilityMontageData final
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbilityMontageData) == 0x000008, "Wrong alignment on FAbilityMontageData");
static_assert(sizeof(FAbilityMontageData) == 0x000018, "Wrong size on FAbilityMontageData");
static_assert(offsetof(FAbilityMontageData, MontageToPlay) == 0x000000, "Member 'FAbilityMontageData::MontageToPlay' has a wrong offset!");
static_assert(offsetof(FAbilityMontageData, PlayRate) == 0x000008, "Member 'FAbilityMontageData::PlayRate' has a wrong offset!");
static_assert(offsetof(FAbilityMontageData, SectionName) == 0x00000C, "Member 'FAbilityMontageData::SectionName' has a wrong offset!");

// ScriptStruct Tempest.ClientTransactionBiEvent_Resource
// 0x0018 (0x0018 - 0x0000)
struct FClientTransactionBiEvent_Resource final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalAmount;                                       // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientTransactionBiEvent_Resource) == 0x000008, "Wrong alignment on FClientTransactionBiEvent_Resource");
static_assert(sizeof(FClientTransactionBiEvent_Resource) == 0x000018, "Wrong size on FClientTransactionBiEvent_Resource");
static_assert(offsetof(FClientTransactionBiEvent_Resource, Name) == 0x000000, "Member 'FClientTransactionBiEvent_Resource::Name' has a wrong offset!");
static_assert(offsetof(FClientTransactionBiEvent_Resource, Amount) == 0x000010, "Member 'FClientTransactionBiEvent_Resource::Amount' has a wrong offset!");
static_assert(offsetof(FClientTransactionBiEvent_Resource, totalAmount) == 0x000014, "Member 'FClientTransactionBiEvent_Resource::totalAmount' has a wrong offset!");

// ScriptStruct Tempest.HarvesterAbilityInfo
// 0x0040 (0x0040 - 0x0000)
struct FHarvesterAbilityInfo final
{
public:
	class ATempestFieldVolume*                    ResourceVolume;                                    // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureRefinery*                  ParentRefinery;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           Harvester;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedAIController*                       AIController;                                      // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldTileIdx;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TileLocation;                                      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvesterAbilityInfo) == 0x000008, "Wrong alignment on FHarvesterAbilityInfo");
static_assert(sizeof(FHarvesterAbilityInfo) == 0x000040, "Wrong size on FHarvesterAbilityInfo");
static_assert(offsetof(FHarvesterAbilityInfo, ResourceVolume) == 0x000000, "Member 'FHarvesterAbilityInfo::ResourceVolume' has a wrong offset!");
static_assert(offsetof(FHarvesterAbilityInfo, ParentRefinery) == 0x000008, "Member 'FHarvesterAbilityInfo::ParentRefinery' has a wrong offset!");
static_assert(offsetof(FHarvesterAbilityInfo, Harvester) == 0x000010, "Member 'FHarvesterAbilityInfo::Harvester' has a wrong offset!");
static_assert(offsetof(FHarvesterAbilityInfo, AIController) == 0x000018, "Member 'FHarvesterAbilityInfo::AIController' has a wrong offset!");
static_assert(offsetof(FHarvesterAbilityInfo, FieldTileIdx) == 0x000020, "Member 'FHarvesterAbilityInfo::FieldTileIdx' has a wrong offset!");
static_assert(offsetof(FHarvesterAbilityInfo, TileLocation) == 0x000028, "Member 'FHarvesterAbilityInfo::TileLocation' has a wrong offset!");

// ScriptStruct Tempest.GCueParticleConfig
// 0x0060 (0x0060 - 0x0000)
struct FGCueParticleConfig final
{
public:
	class UFXSystemAsset*                         ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleScale;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BaseRotation;                                      // 0x0010(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              GCueLocationRandRangeXOffset;                      // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GCueLocationRandRangeYOffset;                      // 0x0038(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GCueLocationRandRangeZOffset;                      // 0x0048(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedRotation;                                 // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGCueParticleConfig) == 0x000008, "Wrong alignment on FGCueParticleConfig");
static_assert(sizeof(FGCueParticleConfig) == 0x000060, "Wrong size on FGCueParticleConfig");
static_assert(offsetof(FGCueParticleConfig, ParticleSystem) == 0x000000, "Member 'FGCueParticleConfig::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, ParticleScale) == 0x000008, "Member 'FGCueParticleConfig::ParticleScale' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, BaseRotation) == 0x000010, "Member 'FGCueParticleConfig::BaseRotation' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, GCueLocationRandRangeXOffset) == 0x000028, "Member 'FGCueParticleConfig::GCueLocationRandRangeXOffset' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, GCueLocationRandRangeYOffset) == 0x000038, "Member 'FGCueParticleConfig::GCueLocationRandRangeYOffset' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, GCueLocationRandRangeZOffset) == 0x000048, "Member 'FGCueParticleConfig::GCueLocationRandRangeZOffset' has a wrong offset!");
static_assert(offsetof(FGCueParticleConfig, bUseFixedRotation) == 0x000058, "Member 'FGCueParticleConfig::bUseFixedRotation' has a wrong offset!");

// ScriptStruct Tempest.TedGameplayAbilityTargetData_TargetInfo
// 0x0018 (0x0020 - 0x0008)
struct FTedGameplayAbilityTargetData_TargetInfo final : public FGameplayAbilityTargetData
{
public:
	TWeakObjectPtr<class AActor>                  Target;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TargetLocation;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameplayAbilityTargetData_TargetInfo) == 0x000008, "Wrong alignment on FTedGameplayAbilityTargetData_TargetInfo");
static_assert(sizeof(FTedGameplayAbilityTargetData_TargetInfo) == 0x000020, "Wrong size on FTedGameplayAbilityTargetData_TargetInfo");
static_assert(offsetof(FTedGameplayAbilityTargetData_TargetInfo, Target) == 0x000008, "Member 'FTedGameplayAbilityTargetData_TargetInfo::Target' has a wrong offset!");
static_assert(offsetof(FTedGameplayAbilityTargetData_TargetInfo, TargetLocation) == 0x000010, "Member 'FTedGameplayAbilityTargetData_TargetInfo::TargetLocation' has a wrong offset!");

// ScriptStruct Tempest.UnitsStatistics_PlayerUnitsDetails
// 0x0058 (0x0058 - 0x0000)
struct FUnitsStatistics_PlayerUnitsDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Created;                                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cost;                                              // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lost;                                              // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         deleted;                                           // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitDmg;                                           // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitKills;                                         // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildDmg;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildKills;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         receivedDmg;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dealtHeal;                                         // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         receivedHeal;                                      // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         experience;                                        // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         abilities;                                         // 0x0054(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitsStatistics_PlayerUnitsDetails) == 0x000008, "Wrong alignment on FUnitsStatistics_PlayerUnitsDetails");
static_assert(sizeof(FUnitsStatistics_PlayerUnitsDetails) == 0x000058, "Wrong size on FUnitsStatistics_PlayerUnitsDetails");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, Name) == 0x000000, "Member 'FUnitsStatistics_PlayerUnitsDetails::Name' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, Category) == 0x000010, "Member 'FUnitsStatistics_PlayerUnitsDetails::Category' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, isMilitary) == 0x000020, "Member 'FUnitsStatistics_PlayerUnitsDetails::isMilitary' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, Created) == 0x000024, "Member 'FUnitsStatistics_PlayerUnitsDetails::Created' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, cost) == 0x000028, "Member 'FUnitsStatistics_PlayerUnitsDetails::cost' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, Lost) == 0x00002C, "Member 'FUnitsStatistics_PlayerUnitsDetails::Lost' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, deleted) == 0x000030, "Member 'FUnitsStatistics_PlayerUnitsDetails::deleted' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, unitDmg) == 0x000034, "Member 'FUnitsStatistics_PlayerUnitsDetails::unitDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, unitKills) == 0x000038, "Member 'FUnitsStatistics_PlayerUnitsDetails::unitKills' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, buildDmg) == 0x00003C, "Member 'FUnitsStatistics_PlayerUnitsDetails::buildDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, buildKills) == 0x000040, "Member 'FUnitsStatistics_PlayerUnitsDetails::buildKills' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, receivedDmg) == 0x000044, "Member 'FUnitsStatistics_PlayerUnitsDetails::receivedDmg' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, dealtHeal) == 0x000048, "Member 'FUnitsStatistics_PlayerUnitsDetails::dealtHeal' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, receivedHeal) == 0x00004C, "Member 'FUnitsStatistics_PlayerUnitsDetails::receivedHeal' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, experience) == 0x000050, "Member 'FUnitsStatistics_PlayerUnitsDetails::experience' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics_PlayerUnitsDetails, abilities) == 0x000054, "Member 'FUnitsStatistics_PlayerUnitsDetails::abilities' has a wrong offset!");

// ScriptStruct Tempest.MinefieldData
// 0x0030 (0x0030 - 0x0000)
struct FMinefieldData final
{
public:
	TSoftClassPtr<class UClass>                   MineActorClass;                                    // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinefieldTileRange;                                // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinesPerTile;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMinefieldData) == 0x000008, "Wrong alignment on FMinefieldData");
static_assert(sizeof(FMinefieldData) == 0x000030, "Wrong size on FMinefieldData");
static_assert(offsetof(FMinefieldData, MineActorClass) == 0x000000, "Member 'FMinefieldData::MineActorClass' has a wrong offset!");
static_assert(offsetof(FMinefieldData, MinefieldTileRange) == 0x000028, "Member 'FMinefieldData::MinefieldTileRange' has a wrong offset!");
static_assert(offsetof(FMinefieldData, MinesPerTile) == 0x00002C, "Member 'FMinefieldData::MinesPerTile' has a wrong offset!");

// ScriptStruct Tempest.Location
// 0x000C (0x000C - 0x0000)
struct FLocation final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLocation) == 0x000004, "Wrong alignment on FLocation");
static_assert(sizeof(FLocation) == 0x00000C, "Wrong size on FLocation");
static_assert(offsetof(FLocation, X) == 0x000000, "Member 'FLocation::X' has a wrong offset!");
static_assert(offsetof(FLocation, Y) == 0x000004, "Member 'FLocation::Y' has a wrong offset!");
static_assert(offsetof(FLocation, Z) == 0x000008, "Member 'FLocation::Z' has a wrong offset!");

// ScriptStruct Tempest.TedAttitudeFilter
// 0x0002 (0x0002 - 0x0000)
struct FTedAttitudeFilter final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnemies : 1;                                      // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bNeutrals : 1;                                     // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFriendlies : 1;                                   // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FTedAttitudeFilter) == 0x000001, "Wrong alignment on FTedAttitudeFilter");
static_assert(sizeof(FTedAttitudeFilter) == 0x000002, "Wrong size on FTedAttitudeFilter");
static_assert(offsetof(FTedAttitudeFilter, TeamID) == 0x000000, "Member 'FTedAttitudeFilter::TeamID' has a wrong offset!");

// ScriptStruct Tempest.ApplyAoEGEConfig
// 0x0098 (0x0098 - 0x0000)
struct FApplyAoEGEConfig final
{
public:
	TSubclassOf<class UGameplayEffect>            GameplayEffect;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedAttitudeFilter                     AttitudeFilter;                                    // 0x0008(0x0002)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               EntityTagRequirements;                             // 0x0010(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FApplyAoEGEConfig) == 0x000008, "Wrong alignment on FApplyAoEGEConfig");
static_assert(sizeof(FApplyAoEGEConfig) == 0x000098, "Wrong size on FApplyAoEGEConfig");
static_assert(offsetof(FApplyAoEGEConfig, GameplayEffect) == 0x000000, "Member 'FApplyAoEGEConfig::GameplayEffect' has a wrong offset!");
static_assert(offsetof(FApplyAoEGEConfig, AttitudeFilter) == 0x000008, "Member 'FApplyAoEGEConfig::AttitudeFilter' has a wrong offset!");
static_assert(offsetof(FApplyAoEGEConfig, EntityTagRequirements) == 0x000010, "Member 'FApplyAoEGEConfig::EntityTagRequirements' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly
// 0x0008 (0x0028 - 0x0020)
struct FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly final : public FTedUpgradeProcessor
{
public:
	struct FGameplayTag                           NewDefinitionId;                                   // 0x0020(0x0008)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly");
static_assert(sizeof(FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly) == 0x000028, "Wrong size on FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly");
static_assert(offsetof(FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly, NewDefinitionId) == 0x000020, "Member 'FTedUpgradeProcessor_SetDefinitionId_SourcePawnsOnly::NewDefinitionId' has a wrong offset!");

// ScriptStruct Tempest.InterpolationData
// 0x00E0 (0x00E0 - 0x0000)
struct FInterpolationData final
{
public:
	struct FTimerHandle                           InterpolationTimerHandle;                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OriginTransform;                                   // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotInterpLength;                                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocInterpLength;                                   // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInterpolationData) == 0x000010, "Wrong alignment on FInterpolationData");
static_assert(sizeof(FInterpolationData) == 0x0000E0, "Wrong size on FInterpolationData");
static_assert(offsetof(FInterpolationData, InterpolationTimerHandle) == 0x000000, "Member 'FInterpolationData::InterpolationTimerHandle' has a wrong offset!");
static_assert(offsetof(FInterpolationData, TargetTransform) == 0x000010, "Member 'FInterpolationData::TargetTransform' has a wrong offset!");
static_assert(offsetof(FInterpolationData, OriginTransform) == 0x000070, "Member 'FInterpolationData::OriginTransform' has a wrong offset!");
static_assert(offsetof(FInterpolationData, RotInterpLength) == 0x0000D0, "Member 'FInterpolationData::RotInterpLength' has a wrong offset!");
static_assert(offsetof(FInterpolationData, LocInterpLength) == 0x0000D4, "Member 'FInterpolationData::LocInterpLength' has a wrong offset!");
static_assert(offsetof(FInterpolationData, ElapsedTime) == 0x0000D8, "Member 'FInterpolationData::ElapsedTime' has a wrong offset!");

// ScriptStruct Tempest.TedMissionFinishReq
// 0x0010 (0x0010 - 0x0000)
struct FTedMissionFinishReq final
{
public:
	class UTedMapInfo*                            Mission;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireAllObjectivesFinished;                     // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            MinimumDifficulty;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMissionFinishReq) == 0x000008, "Wrong alignment on FTedMissionFinishReq");
static_assert(sizeof(FTedMissionFinishReq) == 0x000010, "Wrong size on FTedMissionFinishReq");
static_assert(offsetof(FTedMissionFinishReq, Mission) == 0x000000, "Member 'FTedMissionFinishReq::Mission' has a wrong offset!");
static_assert(offsetof(FTedMissionFinishReq, bRequireAllObjectivesFinished) == 0x000008, "Member 'FTedMissionFinishReq::bRequireAllObjectivesFinished' has a wrong offset!");
static_assert(offsetof(FTedMissionFinishReq, MinimumDifficulty) == 0x000009, "Member 'FTedMissionFinishReq::MinimumDifficulty' has a wrong offset!");

// ScriptStruct Tempest.TedActorTagContainer
// 0x00A0 (0x00A0 - 0x0000)
struct FTedActorTagContainer final
{
public:
	TSet<class AActor*>                           Actors;                                            // 0x0000(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(const struct FGameplayTag& InActorTag, class AActor* InActor, class AActor* InSecondActor)> OnAdd; // 0x0050(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& InActorTag, class AActor* InActor, class AActor* InSecondActor)> OnRemove; // 0x0078(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedActorTagContainer) == 0x000008, "Wrong alignment on FTedActorTagContainer");
static_assert(sizeof(FTedActorTagContainer) == 0x0000A0, "Wrong size on FTedActorTagContainer");
static_assert(offsetof(FTedActorTagContainer, Actors) == 0x000000, "Member 'FTedActorTagContainer::Actors' has a wrong offset!");
static_assert(offsetof(FTedActorTagContainer, OnAdd) == 0x000050, "Member 'FTedActorTagContainer::OnAdd' has a wrong offset!");
static_assert(offsetof(FTedActorTagContainer, OnRemove) == 0x000078, "Member 'FTedActorTagContainer::OnRemove' has a wrong offset!");

// ScriptStruct Tempest.ClosestValidAttackPositionCache
// 0x0040 (0x0040 - 0x0000)
struct FClosestValidAttackPositionCache final
{
public:
	struct FVector                                LastAttackLocation;                                // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastAttackRefreshTime;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastMoveDestination;                               // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          LastPathfindingResult;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastMoveRefreshTime;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FClosestValidAttackPositionCache) == 0x000008, "Wrong alignment on FClosestValidAttackPositionCache");
static_assert(sizeof(FClosestValidAttackPositionCache) == 0x000040, "Wrong size on FClosestValidAttackPositionCache");
static_assert(offsetof(FClosestValidAttackPositionCache, LastAttackLocation) == 0x000000, "Member 'FClosestValidAttackPositionCache::LastAttackLocation' has a wrong offset!");
static_assert(offsetof(FClosestValidAttackPositionCache, LastAttackRefreshTime) == 0x000018, "Member 'FClosestValidAttackPositionCache::LastAttackRefreshTime' has a wrong offset!");
static_assert(offsetof(FClosestValidAttackPositionCache, LastMoveDestination) == 0x000020, "Member 'FClosestValidAttackPositionCache::LastMoveDestination' has a wrong offset!");
static_assert(offsetof(FClosestValidAttackPositionCache, LastPathfindingResult) == 0x000038, "Member 'FClosestValidAttackPositionCache::LastPathfindingResult' has a wrong offset!");
static_assert(offsetof(FClosestValidAttackPositionCache, LastMoveRefreshTime) == 0x00003C, "Member 'FClosestValidAttackPositionCache::LastMoveRefreshTime' has a wrong offset!");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent_Ram
// 0x0010 (0x0010 - 0x0000)
struct FClientDeviceInfoBiEvent_Ram final
{
public:
	int32                                         physicalRam;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         physicalRamFrequency;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         swapRam;                                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         vRam;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoBiEvent_Ram) == 0x000004, "Wrong alignment on FClientDeviceInfoBiEvent_Ram");
static_assert(sizeof(FClientDeviceInfoBiEvent_Ram) == 0x000010, "Wrong size on FClientDeviceInfoBiEvent_Ram");
static_assert(offsetof(FClientDeviceInfoBiEvent_Ram, physicalRam) == 0x000000, "Member 'FClientDeviceInfoBiEvent_Ram::physicalRam' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Ram, physicalRamFrequency) == 0x000004, "Member 'FClientDeviceInfoBiEvent_Ram::physicalRamFrequency' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Ram, swapRam) == 0x000008, "Member 'FClientDeviceInfoBiEvent_Ram::swapRam' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Ram, vRam) == 0x00000C, "Member 'FClientDeviceInfoBiEvent_Ram::vRam' has a wrong offset!");

// ScriptStruct Tempest.QueryTestConfig_Value
// 0x0000 (0x0018 - 0x0018)
struct FQueryTestConfig_Value final : public FQueryTestConfig
{
};
static_assert(alignof(FQueryTestConfig_Value) == 0x000008, "Wrong alignment on FQueryTestConfig_Value");
static_assert(sizeof(FQueryTestConfig_Value) == 0x000018, "Wrong size on FQueryTestConfig_Value");

// ScriptStruct Tempest.MultiplayerScreenSavedData
// 0x001C (0x001C - 0x0000)
struct FMultiplayerScreenSavedData final
{
public:
	int32                                         MP_Page_Index;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranked_FactionIndex;                               // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranked_PlayersSettingsIndex;                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ranked_SpectatorSettingsIndex;                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnRanked_FactionIndex;                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnRanked_PlayersSettingsIndex;                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnRanked_SpectatorSettingsIndex;                   // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultiplayerScreenSavedData) == 0x000004, "Wrong alignment on FMultiplayerScreenSavedData");
static_assert(sizeof(FMultiplayerScreenSavedData) == 0x00001C, "Wrong size on FMultiplayerScreenSavedData");
static_assert(offsetof(FMultiplayerScreenSavedData, MP_Page_Index) == 0x000000, "Member 'FMultiplayerScreenSavedData::MP_Page_Index' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, Ranked_FactionIndex) == 0x000004, "Member 'FMultiplayerScreenSavedData::Ranked_FactionIndex' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, Ranked_PlayersSettingsIndex) == 0x000008, "Member 'FMultiplayerScreenSavedData::Ranked_PlayersSettingsIndex' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, Ranked_SpectatorSettingsIndex) == 0x00000C, "Member 'FMultiplayerScreenSavedData::Ranked_SpectatorSettingsIndex' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, UnRanked_FactionIndex) == 0x000010, "Member 'FMultiplayerScreenSavedData::UnRanked_FactionIndex' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, UnRanked_PlayersSettingsIndex) == 0x000014, "Member 'FMultiplayerScreenSavedData::UnRanked_PlayersSettingsIndex' has a wrong offset!");
static_assert(offsetof(FMultiplayerScreenSavedData, UnRanked_SpectatorSettingsIndex) == 0x000018, "Member 'FMultiplayerScreenSavedData::UnRanked_SpectatorSettingsIndex' has a wrong offset!");

// ScriptStruct Tempest.RefineryDeployLocationRequestId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FRefineryDeployLocationRequestId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRefineryDeployLocationRequestId) == 0x000004, "Wrong alignment on FRefineryDeployLocationRequestId");
static_assert(sizeof(FRefineryDeployLocationRequestId) == 0x000004, "Wrong size on FRefineryDeployLocationRequestId");

// ScriptStruct Tempest.VolumeTileData
// 0x0038 (0x0038 - 0x0000)
struct FVolumeTileData final
{
public:
	class ATempestFieldVolume*                    Volume;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumeTileData) == 0x000008, "Wrong alignment on FVolumeTileData");
static_assert(sizeof(FVolumeTileData) == 0x000038, "Wrong size on FVolumeTileData");
static_assert(offsetof(FVolumeTileData, Volume) == 0x000000, "Member 'FVolumeTileData::Volume' has a wrong offset!");

// ScriptStruct Tempest.QueryResultData
// 0x0020 (0x0020 - 0x0000)
struct FQueryResultData final
{
public:
	class ATempestFieldVolume*                    Volume;                                            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQueryResultData) == 0x000008, "Wrong alignment on FQueryResultData");
static_assert(sizeof(FQueryResultData) == 0x000020, "Wrong size on FQueryResultData");
static_assert(offsetof(FQueryResultData, Volume) == 0x000000, "Member 'FQueryResultData::Volume' has a wrong offset!");

// ScriptStruct Tempest.TedAircraftSlot
// 0x0010 (0x0010 - 0x0000)
struct FTedAircraftSlot final
{
public:
	TWeakObjectPtr<class ATedAircraft>            OwnerAircraft;                                     // 0x0000(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATedAircraft>            CurrentAircraft;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedAircraftSlot) == 0x000004, "Wrong alignment on FTedAircraftSlot");
static_assert(sizeof(FTedAircraftSlot) == 0x000010, "Wrong size on FTedAircraftSlot");
static_assert(offsetof(FTedAircraftSlot, OwnerAircraft) == 0x000000, "Member 'FTedAircraftSlot::OwnerAircraft' has a wrong offset!");
static_assert(offsetof(FTedAircraftSlot, CurrentAircraft) == 0x000008, "Member 'FTedAircraftSlot::CurrentAircraft' has a wrong offset!");

// ScriptStruct Tempest.TedAmmoBarConfig
// 0x0088 (0x0088 - 0x0000)
struct FTedAmmoBarConfig final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RulerSpacing;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SupportedClass;                                    // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BlackListedClass;                                  // 0x0048(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAllowIrregularSegments : 1;                       // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatInterval                         HealthBarMaxHealthRange;                           // 0x0074(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         HealthBarLengthRange;                              // 0x007C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedAmmoBarConfig) == 0x000008, "Wrong alignment on FTedAmmoBarConfig");
static_assert(sizeof(FTedAmmoBarConfig) == 0x000088, "Wrong size on FTedAmmoBarConfig");
static_assert(offsetof(FTedAmmoBarConfig, Material) == 0x000000, "Member 'FTedAmmoBarConfig::Material' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, Size) == 0x000008, "Member 'FTedAmmoBarConfig::Size' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, RulerSpacing) == 0x000018, "Member 'FTedAmmoBarConfig::RulerSpacing' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, SupportedClass) == 0x000020, "Member 'FTedAmmoBarConfig::SupportedClass' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, BlackListedClass) == 0x000048, "Member 'FTedAmmoBarConfig::BlackListedClass' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, HealthBarMaxHealthRange) == 0x000074, "Member 'FTedAmmoBarConfig::HealthBarMaxHealthRange' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarConfig, HealthBarLengthRange) == 0x00007C, "Member 'FTedAmmoBarConfig::HealthBarLengthRange' has a wrong offset!");

// ScriptStruct Tempest.TedServerTime
// 0x0004 (0x0004 - 0x0000)
struct FTedServerTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedServerTime) == 0x000004, "Wrong alignment on FTedServerTime");
static_assert(sizeof(FTedServerTime) == 0x000004, "Wrong size on FTedServerTime");
static_assert(offsetof(FTedServerTime, Time) == 0x000000, "Member 'FTedServerTime::Time' has a wrong offset!");

// ScriptStruct Tempest.TedAmmoBarPreviewEntry
// 0x0008 (0x0008 - 0x0000)
struct FTedAmmoBarPreviewEntry final
{
public:
	int32                                         max_0;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedAmmoBarPreviewEntry) == 0x000004, "Wrong alignment on FTedAmmoBarPreviewEntry");
static_assert(sizeof(FTedAmmoBarPreviewEntry) == 0x000008, "Wrong size on FTedAmmoBarPreviewEntry");
static_assert(offsetof(FTedAmmoBarPreviewEntry, max_0) == 0x000000, "Member 'FTedAmmoBarPreviewEntry::max_0' has a wrong offset!");
static_assert(offsetof(FTedAmmoBarPreviewEntry, Count) == 0x000004, "Member 'FTedAmmoBarPreviewEntry::Count' has a wrong offset!");

// ScriptStruct Tempest.AnnouncementData
// 0x0060 (0x0060 - 0x0000)
struct FAnnouncementData final
{
public:
	TMap<ETedFaction, TSoftObjectPtr<class USoundCue>> AnnouncementFactionSound;                     // 0x0000(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldStopOtherAnnouncements;                     // 0x0051(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilentPlayIfOnCooldown;                           // 0x0052(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAnnouncementDelay;                              // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnnouncementSpacing;                               // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnnouncementCooldown;                              // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnouncementData) == 0x000008, "Wrong alignment on FAnnouncementData");
static_assert(sizeof(FAnnouncementData) == 0x000060, "Wrong size on FAnnouncementData");
static_assert(offsetof(FAnnouncementData, AnnouncementFactionSound) == 0x000000, "Member 'FAnnouncementData::AnnouncementFactionSound' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, Priority) == 0x000050, "Member 'FAnnouncementData::Priority' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, bShouldStopOtherAnnouncements) == 0x000051, "Member 'FAnnouncementData::bShouldStopOtherAnnouncements' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, bSilentPlayIfOnCooldown) == 0x000052, "Member 'FAnnouncementData::bSilentPlayIfOnCooldown' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, MaxAnnouncementDelay) == 0x000054, "Member 'FAnnouncementData::MaxAnnouncementDelay' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, AnnouncementSpacing) == 0x000058, "Member 'FAnnouncementData::AnnouncementSpacing' has a wrong offset!");
static_assert(offsetof(FAnnouncementData, AnnouncementCooldown) == 0x00005C, "Member 'FAnnouncementData::AnnouncementCooldown' has a wrong offset!");

// ScriptStruct Tempest.ClientSceneLoadingBiEvent_EventContext
// 0x0010 (0x0010 - 0x0000)
struct FClientSceneLoadingBiEvent_EventContext final
{
public:
	class FString                                 gameLaunchUid;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSceneLoadingBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientSceneLoadingBiEvent_EventContext");
static_assert(sizeof(FClientSceneLoadingBiEvent_EventContext) == 0x000010, "Wrong size on FClientSceneLoadingBiEvent_EventContext");
static_assert(offsetof(FClientSceneLoadingBiEvent_EventContext, gameLaunchUid) == 0x000000, "Member 'FClientSceneLoadingBiEvent_EventContext::gameLaunchUid' has a wrong offset!");

// ScriptStruct Tempest.ClientSceneLoadingBiEvent_SceneLoading
// 0x0048 (0x0048 - 0x0000)
struct FClientSceneLoadingBiEvent_SceneLoading final
{
public:
	class FString                                 sceneLoadingUid;                                   // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 loadingStartScene;                                 // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 loadingEndScene;                                   // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 loadingStageName;                                  // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         loadingDuration;                                   // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientSceneLoadingBiEvent_SceneLoading) == 0x000008, "Wrong alignment on FClientSceneLoadingBiEvent_SceneLoading");
static_assert(sizeof(FClientSceneLoadingBiEvent_SceneLoading) == 0x000048, "Wrong size on FClientSceneLoadingBiEvent_SceneLoading");
static_assert(offsetof(FClientSceneLoadingBiEvent_SceneLoading, sceneLoadingUid) == 0x000000, "Member 'FClientSceneLoadingBiEvent_SceneLoading::sceneLoadingUid' has a wrong offset!");
static_assert(offsetof(FClientSceneLoadingBiEvent_SceneLoading, loadingStartScene) == 0x000010, "Member 'FClientSceneLoadingBiEvent_SceneLoading::loadingStartScene' has a wrong offset!");
static_assert(offsetof(FClientSceneLoadingBiEvent_SceneLoading, loadingEndScene) == 0x000020, "Member 'FClientSceneLoadingBiEvent_SceneLoading::loadingEndScene' has a wrong offset!");
static_assert(offsetof(FClientSceneLoadingBiEvent_SceneLoading, loadingStageName) == 0x000030, "Member 'FClientSceneLoadingBiEvent_SceneLoading::loadingStageName' has a wrong offset!");
static_assert(offsetof(FClientSceneLoadingBiEvent_SceneLoading, loadingDuration) == 0x000040, "Member 'FClientSceneLoadingBiEvent_SceneLoading::loadingDuration' has a wrong offset!");

// ScriptStruct Tempest.ClientSceneLoadingBiEvent
// 0x0058 (0x0058 - 0x0000)
struct FClientSceneLoadingBiEvent final
{
public:
	struct FClientSceneLoadingBiEvent_EventContext eventContext;                                     // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientSceneLoadingBiEvent_SceneLoading sceneLoading;                                     // 0x0010(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSceneLoadingBiEvent) == 0x000008, "Wrong alignment on FClientSceneLoadingBiEvent");
static_assert(sizeof(FClientSceneLoadingBiEvent) == 0x000058, "Wrong size on FClientSceneLoadingBiEvent");
static_assert(offsetof(FClientSceneLoadingBiEvent, eventContext) == 0x000000, "Member 'FClientSceneLoadingBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientSceneLoadingBiEvent, sceneLoading) == 0x000010, "Member 'FClientSceneLoadingBiEvent::sceneLoading' has a wrong offset!");

// ScriptStruct Tempest.AnnouncementHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAnnouncementHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnnouncementHandle) == 0x000004, "Wrong alignment on FAnnouncementHandle");
static_assert(sizeof(FAnnouncementHandle) == 0x000004, "Wrong size on FAnnouncementHandle");

// ScriptStruct Tempest.Announcement
// 0x0020 (0x0020 - 0x0000)
struct FAnnouncement final
{
public:
	struct FAnnouncementHandle                    Handle;                                            // 0x0000(0x0004)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedAnnouncement*                       AnnouncementCDO;                                   // 0x0008(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QueuedTime;                                        // 0x0010(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                OptionalObject;                                    // 0x0018(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnouncement) == 0x000008, "Wrong alignment on FAnnouncement");
static_assert(sizeof(FAnnouncement) == 0x000020, "Wrong size on FAnnouncement");
static_assert(offsetof(FAnnouncement, Handle) == 0x000000, "Member 'FAnnouncement::Handle' has a wrong offset!");
static_assert(offsetof(FAnnouncement, AnnouncementCDO) == 0x000008, "Member 'FAnnouncement::AnnouncementCDO' has a wrong offset!");
static_assert(offsetof(FAnnouncement, QueuedTime) == 0x000010, "Member 'FAnnouncement::QueuedTime' has a wrong offset!");
static_assert(offsetof(FAnnouncement, OptionalObject) == 0x000018, "Member 'FAnnouncement::OptionalObject' has a wrong offset!");

// ScriptStruct Tempest.TedAoEConfig
// 0x0060 (0x0060 - 0x0000)
struct FTedAoEConfig final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectExpireDelay;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccrueStackTime;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceRequiredTags;                                // 0x0018(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceIgnoredTags;                                 // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAISenseAffiliationFilter              AttitudeFilter;                                    // 0x0058(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedAoEConfig) == 0x000008, "Wrong alignment on FTedAoEConfig");
static_assert(sizeof(FTedAoEConfig) == 0x000060, "Wrong size on FTedAoEConfig");
static_assert(offsetof(FTedAoEConfig, EffectClass) == 0x000000, "Member 'FTedAoEConfig::EffectClass' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, EffectRadius) == 0x000008, "Member 'FTedAoEConfig::EffectRadius' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, EffectExpireDelay) == 0x00000C, "Member 'FTedAoEConfig::EffectExpireDelay' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, AccrueStackTime) == 0x000010, "Member 'FTedAoEConfig::AccrueStackTime' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, SourceRequiredTags) == 0x000018, "Member 'FTedAoEConfig::SourceRequiredTags' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, SourceIgnoredTags) == 0x000038, "Member 'FTedAoEConfig::SourceIgnoredTags' has a wrong offset!");
static_assert(offsetof(FTedAoEConfig, AttitudeFilter) == 0x000058, "Member 'FTedAoEConfig::AttitudeFilter' has a wrong offset!");

// ScriptStruct Tempest.PrimaryAssetTypeToLoadOnStartInfo
// 0x000C (0x000C - 0x0000)
struct FPrimaryAssetTypeToLoadOnStartInfo final
{
public:
	struct FPrimaryAssetType                      PrimaryAssetType;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadWhenRunningCommandlet;                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPrimaryAssetTypeToLoadOnStartInfo) == 0x000004, "Wrong alignment on FPrimaryAssetTypeToLoadOnStartInfo");
static_assert(sizeof(FPrimaryAssetTypeToLoadOnStartInfo) == 0x00000C, "Wrong size on FPrimaryAssetTypeToLoadOnStartInfo");
static_assert(offsetof(FPrimaryAssetTypeToLoadOnStartInfo, PrimaryAssetType) == 0x000000, "Member 'FPrimaryAssetTypeToLoadOnStartInfo::PrimaryAssetType' has a wrong offset!");
static_assert(offsetof(FPrimaryAssetTypeToLoadOnStartInfo, bLoadWhenRunningCommandlet) == 0x000008, "Member 'FPrimaryAssetTypeToLoadOnStartInfo::bLoadWhenRunningCommandlet' has a wrong offset!");

// ScriptStruct Tempest.TedStructureNeighborhood
// 0x0010 (0x0010 - 0x0000)
struct FTedStructureNeighborhood final
{
public:
	TArray<class ATedStructureNeighborBase*>      Structures;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedStructureNeighborhood) == 0x000008, "Wrong alignment on FTedStructureNeighborhood");
static_assert(sizeof(FTedStructureNeighborhood) == 0x000010, "Wrong size on FTedStructureNeighborhood");
static_assert(offsetof(FTedStructureNeighborhood, Structures) == 0x000000, "Member 'FTedStructureNeighborhood::Structures' has a wrong offset!");

// ScriptStruct Tempest.TedAttributPanelContent
// 0x0060 (0x0060 - 0x0000)
struct FTedAttributPanelContent final
{
public:
	struct FGameplayAttribute                     Attribute;                                         // 0x0000(0x0038)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0038(0x0010)(Edit, NativeAccessSpecifierPublic)
	class UCurveLinearColor*                      ValueColorCurve;                                   // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ValueTranslationCurve;                             // 0x0050(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisplayAsPercent : 1;                             // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedAttributPanelContent) == 0x000008, "Wrong alignment on FTedAttributPanelContent");
static_assert(sizeof(FTedAttributPanelContent) == 0x000060, "Wrong size on FTedAttributPanelContent");
static_assert(offsetof(FTedAttributPanelContent, Attribute) == 0x000000, "Member 'FTedAttributPanelContent::Attribute' has a wrong offset!");
static_assert(offsetof(FTedAttributPanelContent, DisplayName) == 0x000038, "Member 'FTedAttributPanelContent::DisplayName' has a wrong offset!");
static_assert(offsetof(FTedAttributPanelContent, ValueColorCurve) == 0x000048, "Member 'FTedAttributPanelContent::ValueColorCurve' has a wrong offset!");
static_assert(offsetof(FTedAttributPanelContent, ValueTranslationCurve) == 0x000050, "Member 'FTedAttributPanelContent::ValueTranslationCurve' has a wrong offset!");

// ScriptStruct Tempest.TedDemoWatermarkConfig
// 0x00D0 (0x00D0 - 0x0000)
struct FTedDemoWatermarkConfig final
{
public:
	bool                                          bDisplayWatermark;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WatermarkText;                                     // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font;                                              // 0x0018(0x0060)(Edit, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            FontColor;                                         // 0x0078(0x0014)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bAnimate;                                          // 0x008C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUsername;                                     // 0x008D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBuildNumber;                                  // 0x008E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x008F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0090(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UCurveFloat>             OpacityCurve;                                      // 0x0098(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                Padding;                                           // 0x00C0(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDemoWatermarkConfig) == 0x000008, "Wrong alignment on FTedDemoWatermarkConfig");
static_assert(sizeof(FTedDemoWatermarkConfig) == 0x0000D0, "Wrong size on FTedDemoWatermarkConfig");
static_assert(offsetof(FTedDemoWatermarkConfig, bDisplayWatermark) == 0x000000, "Member 'FTedDemoWatermarkConfig::bDisplayWatermark' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, WatermarkText) == 0x000008, "Member 'FTedDemoWatermarkConfig::WatermarkText' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, Font) == 0x000018, "Member 'FTedDemoWatermarkConfig::Font' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, FontColor) == 0x000078, "Member 'FTedDemoWatermarkConfig::FontColor' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, bAnimate) == 0x00008C, "Member 'FTedDemoWatermarkConfig::bAnimate' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, bShowUsername) == 0x00008D, "Member 'FTedDemoWatermarkConfig::bShowUsername' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, bShowBuildNumber) == 0x00008E, "Member 'FTedDemoWatermarkConfig::bShowBuildNumber' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, HorizontalAlignment) == 0x00008F, "Member 'FTedDemoWatermarkConfig::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, VerticalAlignment) == 0x000090, "Member 'FTedDemoWatermarkConfig::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, OpacityCurve) == 0x000098, "Member 'FTedDemoWatermarkConfig::OpacityCurve' has a wrong offset!");
static_assert(offsetof(FTedDemoWatermarkConfig, Padding) == 0x0000C0, "Member 'FTedDemoWatermarkConfig::Padding' has a wrong offset!");

// ScriptStruct Tempest.TedGameplayAttributeData
// 0x0000 (0x0010 - 0x0010)
struct FTedGameplayAttributeData final : public FGameplayAttributeData
{
};
static_assert(alignof(FTedGameplayAttributeData) == 0x000008, "Wrong alignment on FTedGameplayAttributeData");
static_assert(sizeof(FTedGameplayAttributeData) == 0x000010, "Wrong size on FTedGameplayAttributeData");

// ScriptStruct Tempest.TedReplicatedAttributeMod
// 0x0008 (0x0008 - 0x0000)
struct FTedReplicatedAttributeMod final
{
public:
	float                                         ModsSum;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModOp;                                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedReplicatedAttributeMod) == 0x000004, "Wrong alignment on FTedReplicatedAttributeMod");
static_assert(sizeof(FTedReplicatedAttributeMod) == 0x000008, "Wrong size on FTedReplicatedAttributeMod");
static_assert(offsetof(FTedReplicatedAttributeMod, ModsSum) == 0x000000, "Member 'FTedReplicatedAttributeMod::ModsSum' has a wrong offset!");
static_assert(offsetof(FTedReplicatedAttributeMod, ModOp) == 0x000004, "Member 'FTedReplicatedAttributeMod::ModOp' has a wrong offset!");

// ScriptStruct Tempest.TedReplicatedAttributeMods
// 0x004C (0x0058 - 0x000C)
struct FTedReplicatedAttributeMods final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x0010(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTedReplicatedAttributeMod>     Mods;                                              // 0x0048(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedReplicatedAttributeMods) == 0x000008, "Wrong alignment on FTedReplicatedAttributeMods");
static_assert(sizeof(FTedReplicatedAttributeMods) == 0x000058, "Wrong size on FTedReplicatedAttributeMods");
static_assert(offsetof(FTedReplicatedAttributeMods, Attribute) == 0x000010, "Member 'FTedReplicatedAttributeMods::Attribute' has a wrong offset!");
static_assert(offsetof(FTedReplicatedAttributeMods, Mods) == 0x000048, "Member 'FTedReplicatedAttributeMods::Mods' has a wrong offset!");

// ScriptStruct Tempest.TedReplicatedAttributeModsContainer
// 0x0068 (0x0170 - 0x0108)
struct FTedReplicatedAttributeModsContainer final : public FFastArraySerializer
{
public:
	TArray<struct FTedReplicatedAttributeMods>    AttributeMods;                                     // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UTedAttributeSetBase>    OwningAttributeSet;                                // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x50];                                     // 0x0120(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedReplicatedAttributeModsContainer) == 0x000008, "Wrong alignment on FTedReplicatedAttributeModsContainer");
static_assert(sizeof(FTedReplicatedAttributeModsContainer) == 0x000170, "Wrong size on FTedReplicatedAttributeModsContainer");
static_assert(offsetof(FTedReplicatedAttributeModsContainer, AttributeMods) == 0x000108, "Member 'FTedReplicatedAttributeModsContainer::AttributeMods' has a wrong offset!");
static_assert(offsetof(FTedReplicatedAttributeModsContainer, OwningAttributeSet) == 0x000118, "Member 'FTedReplicatedAttributeModsContainer::OwningAttributeSet' has a wrong offset!");

// ScriptStruct Tempest.AttributeValueMap
// 0x0028 (0x0028 - 0x0000)
struct FAttributeValueMap final
{
public:
	float                                         AttributeValue;                                    // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutputValue;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GrantedTags;                                       // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeValueMap) == 0x000008, "Wrong alignment on FAttributeValueMap");
static_assert(sizeof(FAttributeValueMap) == 0x000028, "Wrong size on FAttributeValueMap");
static_assert(offsetof(FAttributeValueMap, AttributeValue) == 0x000000, "Member 'FAttributeValueMap::AttributeValue' has a wrong offset!");
static_assert(offsetof(FAttributeValueMap, OutputValue) == 0x000004, "Member 'FAttributeValueMap::OutputValue' has a wrong offset!");
static_assert(offsetof(FAttributeValueMap, GrantedTags) == 0x000008, "Member 'FAttributeValueMap::GrantedTags' has a wrong offset!");

// ScriptStruct Tempest.AttributeMod
// 0x0048 (0x0048 - 0x0000)
struct FAttributeMod final
{
public:
	struct FGameplayAttribute                     AttributeToCapture;                                // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttributeValueMap>             AttributeValueMap;                                 // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeMod) == 0x000008, "Wrong alignment on FAttributeMod");
static_assert(sizeof(FAttributeMod) == 0x000048, "Wrong size on FAttributeMod");
static_assert(offsetof(FAttributeMod, AttributeToCapture) == 0x000000, "Member 'FAttributeMod::AttributeToCapture' has a wrong offset!");
static_assert(offsetof(FAttributeMod, AttributeValueMap) == 0x000038, "Member 'FAttributeMod::AttributeValueMap' has a wrong offset!");

// ScriptStruct Tempest.TedBuildingGridCachedDataForTab
// 0x0018 (0x0018 - 0x0000)
struct FTedBuildingGridCachedDataForTab final
{
public:
	struct FGameplayTag                           Tab;                                               // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      LastSelectedFactory;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastShownPageNumber;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBuildingGridCachedDataForTab) == 0x000008, "Wrong alignment on FTedBuildingGridCachedDataForTab");
static_assert(sizeof(FTedBuildingGridCachedDataForTab) == 0x000018, "Wrong size on FTedBuildingGridCachedDataForTab");
static_assert(offsetof(FTedBuildingGridCachedDataForTab, Tab) == 0x000000, "Member 'FTedBuildingGridCachedDataForTab::Tab' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridCachedDataForTab, LastSelectedFactory) == 0x000008, "Member 'FTedBuildingGridCachedDataForTab::LastSelectedFactory' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridCachedDataForTab, LastShownPageNumber) == 0x000010, "Member 'FTedBuildingGridCachedDataForTab::LastShownPageNumber' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityDestroyBiEvent_MostDamageDealtUnit
// 0x0028 (0x0028 - 0x0000)
struct FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         damageDone;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit) == 0x000008, "Wrong alignment on FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit");
static_assert(sizeof(FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit) == 0x000028, "Wrong size on FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit, Name) == 0x000000, "Member 'FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit::Name' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit, Category) == 0x000010, "Member 'FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit::Category' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit, damageDone) == 0x000020, "Member 'FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit::damageDone' has a wrong offset!");

// ScriptStruct Tempest.TedBuildingGridFactoryTypesPanelContent
// 0x0038 (0x0038 - 0x0000)
struct FTedBuildingGridFactoryTypesPanelContent final
{
public:
	struct FGameplayTag                           FactoryType;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DArray*                        Icon;                                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ShortText;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LongText;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FName                                   Shortcut;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBuildingGridFactoryTypesPanelContent) == 0x000008, "Wrong alignment on FTedBuildingGridFactoryTypesPanelContent");
static_assert(sizeof(FTedBuildingGridFactoryTypesPanelContent) == 0x000038, "Wrong size on FTedBuildingGridFactoryTypesPanelContent");
static_assert(offsetof(FTedBuildingGridFactoryTypesPanelContent, FactoryType) == 0x000000, "Member 'FTedBuildingGridFactoryTypesPanelContent::FactoryType' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridFactoryTypesPanelContent, Icon) == 0x000008, "Member 'FTedBuildingGridFactoryTypesPanelContent::Icon' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridFactoryTypesPanelContent, ShortText) == 0x000010, "Member 'FTedBuildingGridFactoryTypesPanelContent::ShortText' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridFactoryTypesPanelContent, LongText) == 0x000020, "Member 'FTedBuildingGridFactoryTypesPanelContent::LongText' has a wrong offset!");
static_assert(offsetof(FTedBuildingGridFactoryTypesPanelContent, Shortcut) == 0x000030, "Member 'FTedBuildingGridFactoryTypesPanelContent::Shortcut' has a wrong offset!");

// ScriptStruct Tempest.FOW_ConnectionNodePair
// 0x0010 (0x0010 - 0x0000)
struct FFOW_ConnectionNodePair final
{
public:
	class UNetConnection*                         NetConnection;                                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedReplicationGraphNode_FogOfWar*      Node;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFOW_ConnectionNodePair) == 0x000008, "Wrong alignment on FFOW_ConnectionNodePair");
static_assert(sizeof(FFOW_ConnectionNodePair) == 0x000010, "Wrong size on FFOW_ConnectionNodePair");
static_assert(offsetof(FFOW_ConnectionNodePair, NetConnection) == 0x000000, "Member 'FFOW_ConnectionNodePair::NetConnection' has a wrong offset!");
static_assert(offsetof(FFOW_ConnectionNodePair, Node) == 0x000008, "Member 'FFOW_ConnectionNodePair::Node' has a wrong offset!");

// ScriptStruct Tempest.GameplayTagToLocalization
// 0x0030 (0x0030 - 0x0000)
struct FGameplayTagToLocalization final
{
public:
	class FString                                 StringifiedGameplayTag;                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Table;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayTagToLocalization) == 0x000008, "Wrong alignment on FGameplayTagToLocalization");
static_assert(sizeof(FGameplayTagToLocalization) == 0x000030, "Wrong size on FGameplayTagToLocalization");
static_assert(offsetof(FGameplayTagToLocalization, StringifiedGameplayTag) == 0x000000, "Member 'FGameplayTagToLocalization::StringifiedGameplayTag' has a wrong offset!");
static_assert(offsetof(FGameplayTagToLocalization, Table) == 0x000010, "Member 'FGameplayTagToLocalization::Table' has a wrong offset!");
static_assert(offsetof(FGameplayTagToLocalization, Key) == 0x000020, "Member 'FGameplayTagToLocalization::Key' has a wrong offset!");

// ScriptStruct Tempest.ClientCampaignProgressBiEvent_EventContext
// 0x0010 (0x0010 - 0x0000)
struct FClientCampaignProgressBiEvent_EventContext final
{
public:
	class FString                                 progressStep;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCampaignProgressBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientCampaignProgressBiEvent_EventContext");
static_assert(sizeof(FClientCampaignProgressBiEvent_EventContext) == 0x000010, "Wrong size on FClientCampaignProgressBiEvent_EventContext");
static_assert(offsetof(FClientCampaignProgressBiEvent_EventContext, progressStep) == 0x000000, "Member 'FClientCampaignProgressBiEvent_EventContext::progressStep' has a wrong offset!");

// ScriptStruct Tempest.TedChartData
// 0x0018 (0x0030 - 0x0018)
struct FTedChartData final : public FTedChartEntries
{
public:
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChartData) == 0x000008, "Wrong alignment on FTedChartData");
static_assert(sizeof(FTedChartData) == 0x000030, "Wrong size on FTedChartData");
static_assert(offsetof(FTedChartData, Color) == 0x000018, "Member 'FTedChartData::Color' has a wrong offset!");
static_assert(offsetof(FTedChartData, Thickness) == 0x000028, "Member 'FTedChartData::Thickness' has a wrong offset!");

// ScriptStruct Tempest.MatchDurations
// 0x000C (0x000C - 0x0000)
struct FMatchDurations final
{
public:
	int32                                         maxCreditsDuration;                                // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxPopulationDuration;                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         notEnoughEnergyDuration;                           // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchDurations) == 0x000004, "Wrong alignment on FMatchDurations");
static_assert(sizeof(FMatchDurations) == 0x00000C, "Wrong size on FMatchDurations");
static_assert(offsetof(FMatchDurations, maxCreditsDuration) == 0x000000, "Member 'FMatchDurations::maxCreditsDuration' has a wrong offset!");
static_assert(offsetof(FMatchDurations, maxPopulationDuration) == 0x000004, "Member 'FMatchDurations::maxPopulationDuration' has a wrong offset!");
static_assert(offsetof(FMatchDurations, notEnoughEnergyDuration) == 0x000008, "Member 'FMatchDurations::notEnoughEnergyDuration' has a wrong offset!");

// ScriptStruct Tempest.TedChartMarker
// 0x0008 (0x00C0 - 0x00B8)
struct FTedChartMarker final : public FTedChartMarkerMinimal
{
public:
	float                                         Value;                                             // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChartMarker) == 0x000008, "Wrong alignment on FTedChartMarker");
static_assert(sizeof(FTedChartMarker) == 0x0000C0, "Wrong size on FTedChartMarker");
static_assert(offsetof(FTedChartMarker, Value) == 0x0000B8, "Member 'FTedChartMarker::Value' has a wrong offset!");

// ScriptStruct Tempest.TedScoreScreenMatchParticipantCollector
// 0x0110 (0x0110 - 0x0000)
struct FTedScoreScreenMatchParticipantCollector final
{
public:
	class ATedPlayerState*                        OwningPS;                                          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedScoreScreenGrouping                       Groupping;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETedPlayerDataStat, struct FGameplayTag> PlayerStatToGenericValueMap;                       // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TMap<ETedPlayerDataStat, struct FGameplayTag> PlayerPawnStatToGenericValueMap;                   // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	ETedScoreScreenRelevantPawns                  RelevantPawns;                                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETedPlayerDataStat, struct FGameplayTag> PlayerStatChartToGenericValueMap;                  // 0x00B8(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bSkipStatsCollection;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOwnerOnly;                                        // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedScoreScreenMatchParticipantCollector) == 0x000008, "Wrong alignment on FTedScoreScreenMatchParticipantCollector");
static_assert(sizeof(FTedScoreScreenMatchParticipantCollector) == 0x000110, "Wrong size on FTedScoreScreenMatchParticipantCollector");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, OwningPS) == 0x000000, "Member 'FTedScoreScreenMatchParticipantCollector::OwningPS' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, Groupping) == 0x000008, "Member 'FTedScoreScreenMatchParticipantCollector::Groupping' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, PlayerStatToGenericValueMap) == 0x000010, "Member 'FTedScoreScreenMatchParticipantCollector::PlayerStatToGenericValueMap' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, PlayerPawnStatToGenericValueMap) == 0x000060, "Member 'FTedScoreScreenMatchParticipantCollector::PlayerPawnStatToGenericValueMap' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, RelevantPawns) == 0x0000B0, "Member 'FTedScoreScreenMatchParticipantCollector::RelevantPawns' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, PlayerStatChartToGenericValueMap) == 0x0000B8, "Member 'FTedScoreScreenMatchParticipantCollector::PlayerStatChartToGenericValueMap' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, bSkipStatsCollection) == 0x000108, "Member 'FTedScoreScreenMatchParticipantCollector::bSkipStatsCollection' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipantCollector, bOwnerOnly) == 0x000109, "Member 'FTedScoreScreenMatchParticipantCollector::bOwnerOnly' has a wrong offset!");

// ScriptStruct Tempest.TedChartMarkers
// 0x0020 (0x0020 - 0x0000)
struct FTedChartMarkers final
{
public:
	TArray<struct FTedChartMarker>                MarkersVertical;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedChartMarker>                MarkersHorizontal;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChartMarkers) == 0x000008, "Wrong alignment on FTedChartMarkers");
static_assert(sizeof(FTedChartMarkers) == 0x000020, "Wrong size on FTedChartMarkers");
static_assert(offsetof(FTedChartMarkers, MarkersVertical) == 0x000000, "Member 'FTedChartMarkers::MarkersVertical' has a wrong offset!");
static_assert(offsetof(FTedChartMarkers, MarkersHorizontal) == 0x000010, "Member 'FTedChartMarkers::MarkersHorizontal' has a wrong offset!");

// ScriptStruct Tempest.TedChartValueRoundingRule
// 0x0018 (0x0018 - 0x0000)
struct FTedChartValueRoundingRule final
{
public:
	float                                         MinRelevantValue;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Factors;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChartValueRoundingRule) == 0x000008, "Wrong alignment on FTedChartValueRoundingRule");
static_assert(sizeof(FTedChartValueRoundingRule) == 0x000018, "Wrong size on FTedChartValueRoundingRule");
static_assert(offsetof(FTedChartValueRoundingRule, MinRelevantValue) == 0x000000, "Member 'FTedChartValueRoundingRule::MinRelevantValue' has a wrong offset!");
static_assert(offsetof(FTedChartValueRoundingRule, Factors) == 0x000008, "Member 'FTedChartValueRoundingRule::Factors' has a wrong offset!");

// ScriptStruct Tempest.TedChartValueRoundingRules
// 0x0010 (0x0010 - 0x0000)
struct FTedChartValueRoundingRules final
{
public:
	TArray<struct FTedChartValueRoundingRule>     Rules;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChartValueRoundingRules) == 0x000008, "Wrong alignment on FTedChartValueRoundingRules");
static_assert(sizeof(FTedChartValueRoundingRules) == 0x000010, "Wrong size on FTedChartValueRoundingRules");
static_assert(offsetof(FTedChartValueRoundingRules, Rules) == 0x000000, "Member 'FTedChartValueRoundingRules::Rules' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerProfileStat
// 0x0070 (0x0070 - 0x0000)
struct FTedPlayerProfileStat final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Icon;                                              // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerProfileStat) == 0x000008, "Wrong alignment on FTedPlayerProfileStat");
static_assert(sizeof(FTedPlayerProfileStat) == 0x000070, "Wrong size on FTedPlayerProfileStat");
static_assert(offsetof(FTedPlayerProfileStat, Icon) == 0x000068, "Member 'FTedPlayerProfileStat::Icon' has a wrong offset!");

// ScriptStruct Tempest.TedChartDisplayData
// 0x0038 (0x0038 - 0x0000)
struct FTedChartDisplayData final
{
public:
	TArray<struct FTedChartData>                  Charts;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedChartMarker>                VerticalMarkers;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTedChartMarker>                HorizontalMarkers;                                 // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         AnimDurationOverride;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChartDisplayData) == 0x000008, "Wrong alignment on FTedChartDisplayData");
static_assert(sizeof(FTedChartDisplayData) == 0x000038, "Wrong size on FTedChartDisplayData");
static_assert(offsetof(FTedChartDisplayData, Charts) == 0x000000, "Member 'FTedChartDisplayData::Charts' has a wrong offset!");
static_assert(offsetof(FTedChartDisplayData, VerticalMarkers) == 0x000010, "Member 'FTedChartDisplayData::VerticalMarkers' has a wrong offset!");
static_assert(offsetof(FTedChartDisplayData, HorizontalMarkers) == 0x000020, "Member 'FTedChartDisplayData::HorizontalMarkers' has a wrong offset!");
static_assert(offsetof(FTedChartDisplayData, AnimDurationOverride) == 0x000030, "Member 'FTedChartDisplayData::AnimDurationOverride' has a wrong offset!");

// ScriptStruct Tempest.TedPreviewChartValueGeneration
// 0x000C (0x000C - 0x0000)
struct FTedPreviewChartValueGeneration final
{
public:
	float                                         min_0;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNoise;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNoise;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPreviewChartValueGeneration) == 0x000004, "Wrong alignment on FTedPreviewChartValueGeneration");
static_assert(sizeof(FTedPreviewChartValueGeneration) == 0x00000C, "Wrong size on FTedPreviewChartValueGeneration");
static_assert(offsetof(FTedPreviewChartValueGeneration, min_0) == 0x000000, "Member 'FTedPreviewChartValueGeneration::min_0' has a wrong offset!");
static_assert(offsetof(FTedPreviewChartValueGeneration, MinNoise) == 0x000004, "Member 'FTedPreviewChartValueGeneration::MinNoise' has a wrong offset!");
static_assert(offsetof(FTedPreviewChartValueGeneration, MaxNoise) == 0x000008, "Member 'FTedPreviewChartValueGeneration::MaxNoise' has a wrong offset!");

// ScriptStruct Tempest.TedChatPartyPlayer_BP
// 0x0020 (0x0020 - 0x0000)
struct FTedChatPartyPlayer_BP final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UTexture2D>              Avatar;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedOnlineFriendState                         OnlineStatus;                                      // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAdmin;                                          // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedChatPartyPlayer_BP) == 0x000008, "Wrong alignment on FTedChatPartyPlayer_BP");
static_assert(sizeof(FTedChatPartyPlayer_BP) == 0x000020, "Wrong size on FTedChatPartyPlayer_BP");
static_assert(offsetof(FTedChatPartyPlayer_BP, PlayerName) == 0x000000, "Member 'FTedChatPartyPlayer_BP::PlayerName' has a wrong offset!");
static_assert(offsetof(FTedChatPartyPlayer_BP, Avatar) == 0x000010, "Member 'FTedChatPartyPlayer_BP::Avatar' has a wrong offset!");
static_assert(offsetof(FTedChatPartyPlayer_BP, OnlineStatus) == 0x000018, "Member 'FTedChatPartyPlayer_BP::OnlineStatus' has a wrong offset!");
static_assert(offsetof(FTedChatPartyPlayer_BP, bIsAdmin) == 0x000019, "Member 'FTedChatPartyPlayer_BP::bIsAdmin' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeExtendedDescriptionCreator
// 0x0030 (0x0030 - 0x0000)
struct FTedUpgradeExtendedDescriptionCreator final
{
public:
	class FText                                   Category;                                          // 0x0000(0x0010)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         ProcessorsIndices;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTedEntityDefinitionsQuery>     CustomDefinitionQueries;                           // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeExtendedDescriptionCreator) == 0x000008, "Wrong alignment on FTedUpgradeExtendedDescriptionCreator");
static_assert(sizeof(FTedUpgradeExtendedDescriptionCreator) == 0x000030, "Wrong size on FTedUpgradeExtendedDescriptionCreator");
static_assert(offsetof(FTedUpgradeExtendedDescriptionCreator, Category) == 0x000000, "Member 'FTedUpgradeExtendedDescriptionCreator::Category' has a wrong offset!");
static_assert(offsetof(FTedUpgradeExtendedDescriptionCreator, ProcessorsIndices) == 0x000010, "Member 'FTedUpgradeExtendedDescriptionCreator::ProcessorsIndices' has a wrong offset!");
static_assert(offsetof(FTedUpgradeExtendedDescriptionCreator, CustomDefinitionQueries) == 0x000020, "Member 'FTedUpgradeExtendedDescriptionCreator::CustomDefinitionQueries' has a wrong offset!");

// ScriptStruct Tempest.TedChatPartyPlayerSection
// 0x00F0 (0x00F0 - 0x0000)
struct FTedChatPartyPlayerSection final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         AmountOfPlayersInSection;                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0020(0x00D0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedChatPartyPlayerSection) == 0x000010, "Wrong alignment on FTedChatPartyPlayerSection");
static_assert(sizeof(FTedChatPartyPlayerSection) == 0x0000F0, "Wrong size on FTedChatPartyPlayerSection");
static_assert(offsetof(FTedChatPartyPlayerSection, Title) == 0x000000, "Member 'FTedChatPartyPlayerSection::Title' has a wrong offset!");
static_assert(offsetof(FTedChatPartyPlayerSection, AmountOfPlayersInSection) == 0x000010, "Member 'FTedChatPartyPlayerSection::AmountOfPlayersInSection' has a wrong offset!");
static_assert(offsetof(FTedChatPartyPlayerSection, Brush) == 0x000020, "Member 'FTedChatPartyPlayerSection::Brush' has a wrong offset!");

// ScriptStruct Tempest.DebugSpawnNameToClass
// 0x0030 (0x0030 - 0x0000)
struct FDebugSpawnNameToClass final
{
public:
	class FName                                   UnitName;                                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UnitClass;                                         // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDebugSpawnNameToClass) == 0x000008, "Wrong alignment on FDebugSpawnNameToClass");
static_assert(sizeof(FDebugSpawnNameToClass) == 0x000030, "Wrong size on FDebugSpawnNameToClass");
static_assert(offsetof(FDebugSpawnNameToClass, UnitName) == 0x000000, "Member 'FDebugSpawnNameToClass::UnitName' has a wrong offset!");
static_assert(offsetof(FDebugSpawnNameToClass, UnitClass) == 0x000008, "Member 'FDebugSpawnNameToClass::UnitClass' has a wrong offset!");

// ScriptStruct Tempest.TedMoviePlayParams
// 0x0018 (0x0018 - 0x0000)
struct FTedMoviePlayParams final
{
public:
	uint8                                         bLoop : 1;                                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSilent : 1;                                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETedMovieGamePauseInteraction                 PauseInteraction;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeIn;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStartupMapMovie : 1;                              // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovieStartTimeSeconds;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipIntro;                                        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMoviePlayParams) == 0x000004, "Wrong alignment on FTedMoviePlayParams");
static_assert(sizeof(FTedMoviePlayParams) == 0x000018, "Wrong size on FTedMoviePlayParams");
static_assert(offsetof(FTedMoviePlayParams, PauseInteraction) == 0x000001, "Member 'FTedMoviePlayParams::PauseInteraction' has a wrong offset!");
static_assert(offsetof(FTedMoviePlayParams, FadeIn) == 0x000004, "Member 'FTedMoviePlayParams::FadeIn' has a wrong offset!");
static_assert(offsetof(FTedMoviePlayParams, FadeOut) == 0x000008, "Member 'FTedMoviePlayParams::FadeOut' has a wrong offset!");
static_assert(offsetof(FTedMoviePlayParams, MovieStartTimeSeconds) == 0x000010, "Member 'FTedMoviePlayParams::MovieStartTimeSeconds' has a wrong offset!");
static_assert(offsetof(FTedMoviePlayParams, bSkipIntro) == 0x000014, "Member 'FTedMoviePlayParams::bSkipIntro' has a wrong offset!");

// ScriptStruct Tempest.TedCommandCompoundMapScreenStageSetup
// 0x00D8 (0x00D8 - 0x0000)
struct FTedCommandCompoundMapScreenStageSetup final
{
public:
	TMap<struct FGameplayTag, ESlateVisibility>   Components;                                        // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<ETedCommandCompoundMapScreenTrigger>     NextStageTriggers;                                 // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ETedCommandCompoundMapScreenMovieType         MovieType;                                         // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFileMediaSource*                       StageMovie;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMoviePlayParams                    MoviePlayParams;                                   // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bShowCursor : 1;                                   // 0x00C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SkippableSection;                                  // 0x00CC(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCommandCompoundMapScreenStageSetup) == 0x000008, "Wrong alignment on FTedCommandCompoundMapScreenStageSetup");
static_assert(sizeof(FTedCommandCompoundMapScreenStageSetup) == 0x0000D8, "Wrong size on FTedCommandCompoundMapScreenStageSetup");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, Components) == 0x000000, "Member 'FTedCommandCompoundMapScreenStageSetup::Components' has a wrong offset!");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, NextStageTriggers) == 0x000050, "Member 'FTedCommandCompoundMapScreenStageSetup::NextStageTriggers' has a wrong offset!");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, MovieType) == 0x0000A0, "Member 'FTedCommandCompoundMapScreenStageSetup::MovieType' has a wrong offset!");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, StageMovie) == 0x0000A8, "Member 'FTedCommandCompoundMapScreenStageSetup::StageMovie' has a wrong offset!");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, MoviePlayParams) == 0x0000B0, "Member 'FTedCommandCompoundMapScreenStageSetup::MoviePlayParams' has a wrong offset!");
static_assert(offsetof(FTedCommandCompoundMapScreenStageSetup, SkippableSection) == 0x0000CC, "Member 'FTedCommandCompoundMapScreenStageSetup::SkippableSection' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTedUpgradeCondition
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bInverseCondition;                                 // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition) == 0x000008, "Wrong alignment on FTedUpgradeCondition");
static_assert(sizeof(FTedUpgradeCondition) == 0x000010, "Wrong size on FTedUpgradeCondition");
static_assert(offsetof(FTedUpgradeCondition, bInverseCondition) == 0x000008, "Member 'FTedUpgradeCondition::bInverseCondition' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition_PlayerTagRequirements
// 0x0088 (0x0098 - 0x0010)
struct FTedUpgradeCondition_PlayerTagRequirements final : public FTedUpgradeCondition
{
public:
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0010(0x0088)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeCondition_PlayerTagRequirements) == 0x000008, "Wrong alignment on FTedUpgradeCondition_PlayerTagRequirements");
static_assert(sizeof(FTedUpgradeCondition_PlayerTagRequirements) == 0x000098, "Wrong size on FTedUpgradeCondition_PlayerTagRequirements");
static_assert(offsetof(FTedUpgradeCondition_PlayerTagRequirements, TagRequirements) == 0x000010, "Member 'FTedUpgradeCondition_PlayerTagRequirements::TagRequirements' has a wrong offset!");

// ScriptStruct Tempest.TedCommandRequestID
// 0x0001 (0x0001 - 0x0000)
struct FTedCommandRequestID final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCommandRequestID) == 0x000001, "Wrong alignment on FTedCommandRequestID");
static_assert(sizeof(FTedCommandRequestID) == 0x000001, "Wrong size on FTedCommandRequestID");

// ScriptStruct Tempest.TedStartingArmySpawnParams
// 0x0038 (0x0038 - 0x0000)
struct FTedStartingArmySpawnParams final
{
public:
	TSubclassOf<class ATedPawn>                   PawnClass;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStartingArmySpawnParams) == 0x000008, "Wrong alignment on FTedStartingArmySpawnParams");
static_assert(sizeof(FTedStartingArmySpawnParams) == 0x000038, "Wrong size on FTedStartingArmySpawnParams");
static_assert(offsetof(FTedStartingArmySpawnParams, PawnClass) == 0x000000, "Member 'FTedStartingArmySpawnParams::PawnClass' has a wrong offset!");
static_assert(offsetof(FTedStartingArmySpawnParams, Location) == 0x000008, "Member 'FTedStartingArmySpawnParams::Location' has a wrong offset!");
static_assert(offsetof(FTedStartingArmySpawnParams, Rotation) == 0x000020, "Member 'FTedStartingArmySpawnParams::Rotation' has a wrong offset!");

// ScriptStruct Tempest.TedSelectionID
// 0x0001 (0x0001 - 0x0000)
struct FTedSelectionID final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedSelectionID) == 0x000001, "Wrong alignment on FTedSelectionID");
static_assert(sizeof(FTedSelectionID) == 0x000001, "Wrong size on FTedSelectionID");

// ScriptStruct Tempest.TedCommandRequest
// 0x0070 (0x0070 - 0x0000)
struct FTedCommandRequest final
{
public:
	struct FTedCommandRequestID                   RequestId;                                         // 0x0000(0x0001)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(NativeAccessSpecifierPublic)
	struct FTedSelectionID                        SelectionID;                                       // 0x0050(0x0001)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CommandActors;                                     // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bEnqueue : 1;                                      // 0x0068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSyncExecution : 1;                                // 0x0068(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bExecuteInPlace : 1;                               // 0x0068(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCommandRequest) == 0x000008, "Wrong alignment on FTedCommandRequest");
static_assert(sizeof(FTedCommandRequest) == 0x000070, "Wrong size on FTedCommandRequest");
static_assert(offsetof(FTedCommandRequest, RequestId) == 0x000000, "Member 'FTedCommandRequest::RequestId' has a wrong offset!");
static_assert(offsetof(FTedCommandRequest, CommandData) == 0x000008, "Member 'FTedCommandRequest::CommandData' has a wrong offset!");
static_assert(offsetof(FTedCommandRequest, SelectionID) == 0x000050, "Member 'FTedCommandRequest::SelectionID' has a wrong offset!");
static_assert(offsetof(FTedCommandRequest, CommandActors) == 0x000058, "Member 'FTedCommandRequest::CommandActors' has a wrong offset!");

// ScriptStruct Tempest.WindParamData
// 0x0098 (0x0098 - 0x0000)
struct FWindParamData final
{
public:
	class FName                                   ParamName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ParameterCurve;                                    // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWindParamData) == 0x000008, "Wrong alignment on FWindParamData");
static_assert(sizeof(FWindParamData) == 0x000098, "Wrong size on FWindParamData");
static_assert(offsetof(FWindParamData, ParamName) == 0x000000, "Member 'FWindParamData::ParamName' has a wrong offset!");
static_assert(offsetof(FWindParamData, DefaultValue) == 0x000008, "Member 'FWindParamData::DefaultValue' has a wrong offset!");
static_assert(offsetof(FWindParamData, ParameterCurve) == 0x000010, "Member 'FWindParamData::ParameterCurve' has a wrong offset!");

// ScriptStruct Tempest.WindAnimationData
// 0x0048 (0x0048 - 0x0000)
struct FWindAnimationData final
{
public:
	class UTedWindEffectConfig*                   ConfigAsset;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWindParamData>                 Parameters;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SlotID;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAnimationFinished : 1;                            // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStartedFadeOut : 1;                               // 0x0044(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindAnimationData) == 0x000008, "Wrong alignment on FWindAnimationData");
static_assert(sizeof(FWindAnimationData) == 0x000048, "Wrong size on FWindAnimationData");
static_assert(offsetof(FWindAnimationData, ConfigAsset) == 0x000000, "Member 'FWindAnimationData::ConfigAsset' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, Parameters) == 0x000008, "Member 'FWindAnimationData::Parameters' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, SlotID) == 0x000018, "Member 'FWindAnimationData::SlotID' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, Location) == 0x000020, "Member 'FWindAnimationData::Location' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, AnimTime) == 0x000038, "Member 'FWindAnimationData::AnimTime' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, Duration) == 0x00003C, "Member 'FWindAnimationData::Duration' has a wrong offset!");
static_assert(offsetof(FWindAnimationData, FadeTime) == 0x000040, "Member 'FWindAnimationData::FadeTime' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_AttackMove
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCommandDataPayload_AttackMove final : public FGameplayCommandDataCustomPayload
{
public:
	bool                                          bBypassTargetPriority;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_AttackMove) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_AttackMove");
static_assert(sizeof(FGameplayCommandDataPayload_AttackMove) == 0x000010, "Wrong size on FGameplayCommandDataPayload_AttackMove");
static_assert(offsetof(FGameplayCommandDataPayload_AttackMove, bBypassTargetPriority) == 0x000008, "Member 'FGameplayCommandDataPayload_AttackMove::bBypassTargetPriority' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_AirMission
// 0x0098 (0x00A0 - 0x0008)
struct FGameplayCommandDataPayload_AirMission : public FGameplayCommandDataCustomPayload
{
public:
	EAirMissionPickLocationType                   StartLocationType;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartLocation;                                     // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirMissionPickLocationType                   EndLocationType;                                   // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EndLocation;                                       // 0x0030(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCommandSetup;                             // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   AircraftClass;                                     // 0x0050(0x0028)(BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedWeapon>                 AircraftWeaponOverride;                            // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AircraftNum;                                       // 0x0080(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FormationDistance;                                 // 0x0084(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATedUnitBase>            Unit;                                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPoints;                                        // 0x0090(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGameplayCommandDataPayload_AirMission) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_AirMission");
static_assert(sizeof(FGameplayCommandDataPayload_AirMission) == 0x0000A0, "Wrong size on FGameplayCommandDataPayload_AirMission");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, StartLocationType) == 0x000008, "Member 'FGameplayCommandDataPayload_AirMission::StartLocationType' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, StartLocation) == 0x000010, "Member 'FGameplayCommandDataPayload_AirMission::StartLocation' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, EndLocationType) == 0x000028, "Member 'FGameplayCommandDataPayload_AirMission::EndLocationType' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, EndLocation) == 0x000030, "Member 'FGameplayCommandDataPayload_AirMission::EndLocation' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, bOverrideCommandSetup) == 0x000048, "Member 'FGameplayCommandDataPayload_AirMission::bOverrideCommandSetup' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, AircraftClass) == 0x000050, "Member 'FGameplayCommandDataPayload_AirMission::AircraftClass' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, AircraftWeaponOverride) == 0x000078, "Member 'FGameplayCommandDataPayload_AirMission::AircraftWeaponOverride' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, AircraftNum) == 0x000080, "Member 'FGameplayCommandDataPayload_AirMission::AircraftNum' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, FormationDistance) == 0x000084, "Member 'FGameplayCommandDataPayload_AirMission::FormationDistance' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, Unit) == 0x000088, "Member 'FGameplayCommandDataPayload_AirMission::Unit' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirMission, PathPoints) == 0x000090, "Member 'FGameplayCommandDataPayload_AirMission::PathPoints' has a wrong offset!");

// ScriptStruct Tempest.UnitToSpawnData
// 0x0010 (0x0010 - 0x0000)
struct FUnitToSpawnData final
{
public:
	struct FGameplayTag                           UnitDefinitionTag;                                 // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FormationDistance;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitToSpawnData) == 0x000004, "Wrong alignment on FUnitToSpawnData");
static_assert(sizeof(FUnitToSpawnData) == 0x000010, "Wrong size on FUnitToSpawnData");
static_assert(offsetof(FUnitToSpawnData, UnitDefinitionTag) == 0x000000, "Member 'FUnitToSpawnData::UnitDefinitionTag' has a wrong offset!");
static_assert(offsetof(FUnitToSpawnData, NumToSpawn) == 0x000008, "Member 'FUnitToSpawnData::NumToSpawn' has a wrong offset!");
static_assert(offsetof(FUnitToSpawnData, FormationDistance) == 0x00000C, "Member 'FUnitToSpawnData::FormationDistance' has a wrong offset!");

// ScriptStruct Tempest.TedUpcomingPopulationSourceHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTedUpcomingPopulationSourceHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpcomingPopulationSourceHandle) == 0x000004, "Wrong alignment on FTedUpcomingPopulationSourceHandle");
static_assert(sizeof(FTedUpcomingPopulationSourceHandle) == 0x000004, "Wrong size on FTedUpcomingPopulationSourceHandle");

// ScriptStruct Tempest.GameplayCommandDataPayload_AirDrop
// 0x0038 (0x00D8 - 0x00A0)
struct FGameplayCommandDataPayload_AirDrop final : public FGameplayCommandDataPayload_AirMission
{
public:
	TArray<class ATedUnitSpawner*>                Spawners;                                          // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class ATedUnitSpawner_Volume*                 VolumeSpawner;                                     // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSpawn;                                       // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAirDropUnitData>               UnitsToSpawnData;                                  // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTedUpcomingPopulationSourceHandle     UpcomingPopulationHandle;                          // 0x00D0(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetSpawnerState;                                // 0x00D4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_AirDrop) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_AirDrop");
static_assert(sizeof(FGameplayCommandDataPayload_AirDrop) == 0x0000D8, "Wrong size on FGameplayCommandDataPayload_AirDrop");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, Spawners) == 0x0000A0, "Member 'FGameplayCommandDataPayload_AirDrop::Spawners' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, VolumeSpawner) == 0x0000B0, "Member 'FGameplayCommandDataPayload_AirDrop::VolumeSpawner' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, bForceSpawn) == 0x0000B8, "Member 'FGameplayCommandDataPayload_AirDrop::bForceSpawn' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, UnitsToSpawnData) == 0x0000C0, "Member 'FGameplayCommandDataPayload_AirDrop::UnitsToSpawnData' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, UpcomingPopulationHandle) == 0x0000D0, "Member 'FGameplayCommandDataPayload_AirDrop::UpcomingPopulationHandle' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_AirDrop, bResetSpawnerState) == 0x0000D4, "Member 'FGameplayCommandDataPayload_AirDrop::bResetSpawnerState' has a wrong offset!");

// ScriptStruct Tempest.TedLoadingScreenSetup
// 0x0028 (0x0028 - 0x0000)
struct FTedLoadingScreenSetup final
{
public:
	ETedFaction                                   Faction;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IntroFileName;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoopFileName;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLoadingScreenSetup) == 0x000008, "Wrong alignment on FTedLoadingScreenSetup");
static_assert(sizeof(FTedLoadingScreenSetup) == 0x000028, "Wrong size on FTedLoadingScreenSetup");
static_assert(offsetof(FTedLoadingScreenSetup, Faction) == 0x000000, "Member 'FTedLoadingScreenSetup::Faction' has a wrong offset!");
static_assert(offsetof(FTedLoadingScreenSetup, IntroFileName) == 0x000008, "Member 'FTedLoadingScreenSetup::IntroFileName' has a wrong offset!");
static_assert(offsetof(FTedLoadingScreenSetup, LoopFileName) == 0x000018, "Member 'FTedLoadingScreenSetup::LoopFileName' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_Airstrike
// 0x0010 (0x00B0 - 0x00A0)
struct FGameplayCommandDataPayload_Airstrike final : public FGameplayCommandDataPayload_AirMission
{
public:
	struct FVector2D                              TargetLocation;                                    // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_Airstrike) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_Airstrike");
static_assert(sizeof(FGameplayCommandDataPayload_Airstrike) == 0x0000B0, "Wrong size on FGameplayCommandDataPayload_Airstrike");
static_assert(offsetof(FGameplayCommandDataPayload_Airstrike, TargetLocation) == 0x0000A0, "Member 'FGameplayCommandDataPayload_Airstrike::TargetLocation' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_RotateStructure
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCommandDataPayload_RotateStructure : public FGameplayCommandDataCustomPayload
{
public:
	ETedStructureAlignment                        Alignment;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanChangeAlignment;                               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_RotateStructure) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_RotateStructure");
static_assert(sizeof(FGameplayCommandDataPayload_RotateStructure) == 0x000010, "Wrong size on FGameplayCommandDataPayload_RotateStructure");
static_assert(offsetof(FGameplayCommandDataPayload_RotateStructure, Alignment) == 0x000008, "Member 'FGameplayCommandDataPayload_RotateStructure::Alignment' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_RotateStructure, bCanChangeAlignment) == 0x000009, "Member 'FGameplayCommandDataPayload_RotateStructure::bCanChangeAlignment' has a wrong offset!");

// ScriptStruct Tempest.TedCommandPendingExecuteData
// 0x0050 (0x0050 - 0x0000)
struct FTedCommandPendingExecuteData final
{
public:
	struct FTimerHandle                           TimerHandle;                                       // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   CommandData;                                       // 0x0008(0x0048)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCommandPendingExecuteData) == 0x000008, "Wrong alignment on FTedCommandPendingExecuteData");
static_assert(sizeof(FTedCommandPendingExecuteData) == 0x000050, "Wrong size on FTedCommandPendingExecuteData");
static_assert(offsetof(FTedCommandPendingExecuteData, TimerHandle) == 0x000000, "Member 'FTedCommandPendingExecuteData::TimerHandle' has a wrong offset!");
static_assert(offsetof(FTedCommandPendingExecuteData, CommandData) == 0x000008, "Member 'FTedCommandPendingExecuteData::CommandData' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerIncomeCalculator
// 0x00FC (0x00FC - 0x0000)
struct FTedPlayerIncomeCalculator final
{
public:
	float                                         LastMinuteIncomeValues[0x3C];                      // 0x0000(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LastIndex;                                         // 0x00F0(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastSummIncome;                                    // 0x00F4(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LastTime;                                          // 0x00F8(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedPlayerIncomeCalculator) == 0x000004, "Wrong alignment on FTedPlayerIncomeCalculator");
static_assert(sizeof(FTedPlayerIncomeCalculator) == 0x0000FC, "Wrong size on FTedPlayerIncomeCalculator");
static_assert(offsetof(FTedPlayerIncomeCalculator, LastMinuteIncomeValues) == 0x000000, "Member 'FTedPlayerIncomeCalculator::LastMinuteIncomeValues' has a wrong offset!");
static_assert(offsetof(FTedPlayerIncomeCalculator, LastIndex) == 0x0000F0, "Member 'FTedPlayerIncomeCalculator::LastIndex' has a wrong offset!");
static_assert(offsetof(FTedPlayerIncomeCalculator, LastSummIncome) == 0x0000F4, "Member 'FTedPlayerIncomeCalculator::LastSummIncome' has a wrong offset!");
static_assert(offsetof(FTedPlayerIncomeCalculator, LastTime) == 0x0000F8, "Member 'FTedPlayerIncomeCalculator::LastTime' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityDestroyBiEvent_EventContext
// 0x0004 (0x0004 - 0x0000)
struct FServerMatchActivityDestroyBiEvent_EventContext final
{
public:
	int32                                         matchTimer;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityDestroyBiEvent_EventContext) == 0x000004, "Wrong alignment on FServerMatchActivityDestroyBiEvent_EventContext");
static_assert(sizeof(FServerMatchActivityDestroyBiEvent_EventContext) == 0x000004, "Wrong size on FServerMatchActivityDestroyBiEvent_EventContext");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_EventContext, matchTimer) == 0x000000, "Member 'FServerMatchActivityDestroyBiEvent_EventContext::matchTimer' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityDestroyBiEvent_DestroyerUnit
// 0x0028 (0x0028 - 0x0000)
struct FServerMatchActivityDestroyBiEvent_DestroyerUnit final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         damageDone;                                        // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerMatchActivityDestroyBiEvent_DestroyerUnit) == 0x000008, "Wrong alignment on FServerMatchActivityDestroyBiEvent_DestroyerUnit");
static_assert(sizeof(FServerMatchActivityDestroyBiEvent_DestroyerUnit) == 0x000028, "Wrong size on FServerMatchActivityDestroyBiEvent_DestroyerUnit");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyerUnit, Name) == 0x000000, "Member 'FServerMatchActivityDestroyBiEvent_DestroyerUnit::Name' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyerUnit, Category) == 0x000010, "Member 'FServerMatchActivityDestroyBiEvent_DestroyerUnit::Category' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent_DestroyerUnit, damageDone) == 0x000020, "Member 'FServerMatchActivityDestroyBiEvent_DestroyerUnit::damageDone' has a wrong offset!");

// ScriptStruct Tempest.PlayerProperties
// 0x0030 (0x0030 - 0x0000)
struct FPlayerProperties final
{
public:
	bool                                          IsBot;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Faction;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color;                                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         startingPosition;                                  // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerProperties) == 0x000008, "Wrong alignment on FPlayerProperties");
static_assert(sizeof(FPlayerProperties) == 0x000030, "Wrong size on FPlayerProperties");
static_assert(offsetof(FPlayerProperties, IsBot) == 0x000000, "Member 'FPlayerProperties::IsBot' has a wrong offset!");
static_assert(offsetof(FPlayerProperties, Faction) == 0x000008, "Member 'FPlayerProperties::Faction' has a wrong offset!");
static_assert(offsetof(FPlayerProperties, Color) == 0x000018, "Member 'FPlayerProperties::Color' has a wrong offset!");
static_assert(offsetof(FPlayerProperties, startingPosition) == 0x000028, "Member 'FPlayerProperties::startingPosition' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityDestroyBiEvent
// 0x01A0 (0x01A0 - 0x0000)
struct FServerMatchActivityDestroyBiEvent final
{
public:
	struct FServerMatchActivityDestroyBiEvent_EventContext eventContext;                             // 0x0000(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerMatchActivityDestroyBiEvent_DestroyedUnit destroyedUnit;                           // 0x0008(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerMatchActivityDestroyBiEvent_DestroyerUnit destroyerUnit;                           // 0x0058(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerMatchActivityDestroyBiEvent_MostDamageDealtUnit mostDamageDealtUnit;               // 0x0080(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLocation                              biLocation;                                        // 0x00A8(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerProperties                      biPlayerProperties;                                // 0x00B8(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerPlayerContext                   biServerPlayerContext;                             // 0x00E8(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0128(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityDestroyBiEvent) == 0x000008, "Wrong alignment on FServerMatchActivityDestroyBiEvent");
static_assert(sizeof(FServerMatchActivityDestroyBiEvent) == 0x0001A0, "Wrong size on FServerMatchActivityDestroyBiEvent");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, eventContext) == 0x000000, "Member 'FServerMatchActivityDestroyBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, destroyedUnit) == 0x000008, "Member 'FServerMatchActivityDestroyBiEvent::destroyedUnit' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, destroyerUnit) == 0x000058, "Member 'FServerMatchActivityDestroyBiEvent::destroyerUnit' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, mostDamageDealtUnit) == 0x000080, "Member 'FServerMatchActivityDestroyBiEvent::mostDamageDealtUnit' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, biLocation) == 0x0000A8, "Member 'FServerMatchActivityDestroyBiEvent::biLocation' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, biPlayerProperties) == 0x0000B8, "Member 'FServerMatchActivityDestroyBiEvent::biPlayerProperties' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, biServerPlayerContext) == 0x0000E8, "Member 'FServerMatchActivityDestroyBiEvent::biServerPlayerContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityDestroyBiEvent, biMatchDetails) == 0x000128, "Member 'FServerMatchActivityDestroyBiEvent::biMatchDetails' has a wrong offset!");

// ScriptStruct Tempest.TedCommandSoundOverride
// 0x0048 (0x0048 - 0x0000)
struct FTedCommandSoundOverride final
{
public:
	struct FGameplayTagContainer                  CommandActorWeapon;                                // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetOwnedTags;                                   // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedPawnSound>              SoundClass;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCommandSoundOverride) == 0x000008, "Wrong alignment on FTedCommandSoundOverride");
static_assert(sizeof(FTedCommandSoundOverride) == 0x000048, "Wrong size on FTedCommandSoundOverride");
static_assert(offsetof(FTedCommandSoundOverride, CommandActorWeapon) == 0x000000, "Member 'FTedCommandSoundOverride::CommandActorWeapon' has a wrong offset!");
static_assert(offsetof(FTedCommandSoundOverride, TargetOwnedTags) == 0x000020, "Member 'FTedCommandSoundOverride::TargetOwnedTags' has a wrong offset!");
static_assert(offsetof(FTedCommandSoundOverride, SoundClass) == 0x000040, "Member 'FTedCommandSoundOverride::SoundClass' has a wrong offset!");

// ScriptStruct Tempest.TedCompletedStructure
// 0x0080 (0x0080 - 0x0000)
struct FTedCompletedStructure final
{
public:
	struct FTedConstructionElementType            Type;                                              // 0x0000(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class ATedStructureBase*>                FactoriesRequestedFrom;                            // 0x0028(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCompletedStructure) == 0x000008, "Wrong alignment on FTedCompletedStructure");
static_assert(sizeof(FTedCompletedStructure) == 0x000080, "Wrong size on FTedCompletedStructure");
static_assert(offsetof(FTedCompletedStructure, Type) == 0x000000, "Member 'FTedCompletedStructure::Type' has a wrong offset!");
static_assert(offsetof(FTedCompletedStructure, FactoriesRequestedFrom) == 0x000028, "Member 'FTedCompletedStructure::FactoriesRequestedFrom' has a wrong offset!");

// ScriptStruct Tempest.ConformationStateData
// 0x0090 (0x0090 - 0x0000)
struct FConformationStateData final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0008)(Edit, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultStateValue;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EnabledStateNavArea;                               // 0x0010(0x0028)(Edit, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DisabledStateNavArea;                              // 0x0038(0x0028)(Edit, RepSkip, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnabledCollisionProfileName;                       // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisabledCollisionProfileName;                      // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHealthBound;                                      // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateChangeOngoing;                               // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepCurve_Float                        StateValueCurve;                                   // 0x0074(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConformationStateData) == 0x000008, "Wrong alignment on FConformationStateData");
static_assert(sizeof(FConformationStateData) == 0x000090, "Wrong size on FConformationStateData");
static_assert(offsetof(FConformationStateData, StateTag) == 0x000000, "Member 'FConformationStateData::StateTag' has a wrong offset!");
static_assert(offsetof(FConformationStateData, DefaultStateValue) == 0x000008, "Member 'FConformationStateData::DefaultStateValue' has a wrong offset!");
static_assert(offsetof(FConformationStateData, EnabledStateNavArea) == 0x000010, "Member 'FConformationStateData::EnabledStateNavArea' has a wrong offset!");
static_assert(offsetof(FConformationStateData, DisabledStateNavArea) == 0x000038, "Member 'FConformationStateData::DisabledStateNavArea' has a wrong offset!");
static_assert(offsetof(FConformationStateData, EnabledCollisionProfileName) == 0x000060, "Member 'FConformationStateData::EnabledCollisionProfileName' has a wrong offset!");
static_assert(offsetof(FConformationStateData, DisabledCollisionProfileName) == 0x000068, "Member 'FConformationStateData::DisabledCollisionProfileName' has a wrong offset!");
static_assert(offsetof(FConformationStateData, bHealthBound) == 0x000070, "Member 'FConformationStateData::bHealthBound' has a wrong offset!");
static_assert(offsetof(FConformationStateData, bStateChangeOngoing) == 0x000071, "Member 'FConformationStateData::bStateChangeOngoing' has a wrong offset!");
static_assert(offsetof(FConformationStateData, StateValueCurve) == 0x000074, "Member 'FConformationStateData::StateValueCurve' has a wrong offset!");

// ScriptStruct Tempest.TedConstructionSiteAnimNotifyTimeMap
// 0x0050 (0x0050 - 0x0000)
struct FTedConstructionSiteAnimNotifyTimeMap final
{
public:
	TMap<ETedConstructionSiteAnimNotify, float>   Times;                                             // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConstructionSiteAnimNotifyTimeMap) == 0x000008, "Wrong alignment on FTedConstructionSiteAnimNotifyTimeMap");
static_assert(sizeof(FTedConstructionSiteAnimNotifyTimeMap) == 0x000050, "Wrong size on FTedConstructionSiteAnimNotifyTimeMap");
static_assert(offsetof(FTedConstructionSiteAnimNotifyTimeMap, Times) == 0x000000, "Member 'FTedConstructionSiteAnimNotifyTimeMap::Times' has a wrong offset!");

// ScriptStruct Tempest.TedConstructionSiteConfig
// 0x0138 (0x0138 - 0x0000)
struct FTedConstructionSiteConfig final
{
public:
	struct FIntPoint                              GridSize;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshRotation;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class ATedStructureBase>, struct FVector> MeshLocationOffsetOverrides;          // 0x0038(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimBP;                                            // 0x0088(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ETedConstructionSiteAnim, TSoftObjectPtr<class UAnimMontage>> Animations;                   // 0x00B0(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Decal;                                             // 0x0100(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DecalSize;                                         // 0x0128(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConstructionSiteConfig) == 0x000008, "Wrong alignment on FTedConstructionSiteConfig");
static_assert(sizeof(FTedConstructionSiteConfig) == 0x000138, "Wrong size on FTedConstructionSiteConfig");
static_assert(offsetof(FTedConstructionSiteConfig, GridSize) == 0x000000, "Member 'FTedConstructionSiteConfig::GridSize' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, Mesh) == 0x000008, "Member 'FTedConstructionSiteConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, MeshRotation) == 0x000030, "Member 'FTedConstructionSiteConfig::MeshRotation' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, MeshLocationOffsetOverrides) == 0x000038, "Member 'FTedConstructionSiteConfig::MeshLocationOffsetOverrides' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, AnimBP) == 0x000088, "Member 'FTedConstructionSiteConfig::AnimBP' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, Animations) == 0x0000B0, "Member 'FTedConstructionSiteConfig::Animations' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, Decal) == 0x000100, "Member 'FTedConstructionSiteConfig::Decal' has a wrong offset!");
static_assert(offsetof(FTedConstructionSiteConfig, DecalSize) == 0x000128, "Member 'FTedConstructionSiteConfig::DecalSize' has a wrong offset!");

// ScriptStruct Tempest.AttackTargetQueryRequestId
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FAttackTargetQueryRequestId final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAttackTargetQueryRequestId) == 0x000004, "Wrong alignment on FAttackTargetQueryRequestId");
static_assert(sizeof(FAttackTargetQueryRequestId) == 0x000004, "Wrong size on FAttackTargetQueryRequestId");

// ScriptStruct Tempest.TedCursorSelector
// 0x0005 (0x0005 - 0x0000)
struct FTedCursorSelector final
{
public:
	ETedCursorType                                NoHover;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCursorType                                Friendly;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCursorType                                Neutral;                                           // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCursorType                                Hostile;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCursorType                                Self;                                              // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCursorSelector) == 0x000001, "Wrong alignment on FTedCursorSelector");
static_assert(sizeof(FTedCursorSelector) == 0x000005, "Wrong size on FTedCursorSelector");
static_assert(offsetof(FTedCursorSelector, NoHover) == 0x000000, "Member 'FTedCursorSelector::NoHover' has a wrong offset!");
static_assert(offsetof(FTedCursorSelector, Friendly) == 0x000001, "Member 'FTedCursorSelector::Friendly' has a wrong offset!");
static_assert(offsetof(FTedCursorSelector, Neutral) == 0x000002, "Member 'FTedCursorSelector::Neutral' has a wrong offset!");
static_assert(offsetof(FTedCursorSelector, Hostile) == 0x000003, "Member 'FTedCursorSelector::Hostile' has a wrong offset!");
static_assert(offsetof(FTedCursorSelector, Self) == 0x000004, "Member 'FTedCursorSelector::Self' has a wrong offset!");

// ScriptStruct Tempest.TedCursorDisplayData
// 0x0018 (0x0018 - 0x0000)
struct FTedCursorDisplayData final
{
public:
	ETedCursorType                                Cursor;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x2];                                        // 0x0001(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ETedFaction                                   Theme;                                             // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInvalid : 1;                                      // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedCommand*                            CommandCDO;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedCursorConfig*                       CursorConfig;                                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedCursorDisplayData) == 0x000008, "Wrong alignment on FTedCursorDisplayData");
static_assert(sizeof(FTedCursorDisplayData) == 0x000018, "Wrong size on FTedCursorDisplayData");
static_assert(offsetof(FTedCursorDisplayData, Cursor) == 0x000000, "Member 'FTedCursorDisplayData::Cursor' has a wrong offset!");
static_assert(offsetof(FTedCursorDisplayData, Theme) == 0x000003, "Member 'FTedCursorDisplayData::Theme' has a wrong offset!");
static_assert(offsetof(FTedCursorDisplayData, CommandCDO) == 0x000008, "Member 'FTedCursorDisplayData::CommandCDO' has a wrong offset!");
static_assert(offsetof(FTedCursorDisplayData, CursorConfig) == 0x000010, "Member 'FTedCursorDisplayData::CursorConfig' has a wrong offset!");

// ScriptStruct Tempest.TedThemedHardwareCursor
// 0x0030 (0x0030 - 0x0000)
struct FTedThemedHardwareCursor final
{
public:
	struct FFilePath                              GDF;                                               // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              DYN;                                               // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFilePath                              VETI;                                              // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedThemedHardwareCursor) == 0x000008, "Wrong alignment on FTedThemedHardwareCursor");
static_assert(sizeof(FTedThemedHardwareCursor) == 0x000030, "Wrong size on FTedThemedHardwareCursor");
static_assert(offsetof(FTedThemedHardwareCursor, GDF) == 0x000000, "Member 'FTedThemedHardwareCursor::GDF' has a wrong offset!");
static_assert(offsetof(FTedThemedHardwareCursor, DYN) == 0x000010, "Member 'FTedThemedHardwareCursor::DYN' has a wrong offset!");
static_assert(offsetof(FTedThemedHardwareCursor, VETI) == 0x000020, "Member 'FTedThemedHardwareCursor::VETI' has a wrong offset!");

// ScriptStruct Tempest.TedMatchCumulativeData
// 0x0040 (0x0040 - 0x0000)
struct FTedMatchCumulativeData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WinRate;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              TimePlayed;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitsProduced;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitsDestroyed;                                    // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitsLost;                                         // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildingsProduced;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildingsDestroyed;                                // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildingsLost;                                     // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResourcesHarvested;                                // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResourcesSpent;                                    // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDealt;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageReceived;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMatchCumulativeData) == 0x000008, "Wrong alignment on FTedMatchCumulativeData");
static_assert(sizeof(FTedMatchCumulativeData) == 0x000040, "Wrong size on FTedMatchCumulativeData");
static_assert(offsetof(FTedMatchCumulativeData, WinRate) == 0x000008, "Member 'FTedMatchCumulativeData::WinRate' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, TimePlayed) == 0x000010, "Member 'FTedMatchCumulativeData::TimePlayed' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, UnitsProduced) == 0x000018, "Member 'FTedMatchCumulativeData::UnitsProduced' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, UnitsDestroyed) == 0x00001C, "Member 'FTedMatchCumulativeData::UnitsDestroyed' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, UnitsLost) == 0x000020, "Member 'FTedMatchCumulativeData::UnitsLost' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, BuildingsProduced) == 0x000024, "Member 'FTedMatchCumulativeData::BuildingsProduced' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, BuildingsDestroyed) == 0x000028, "Member 'FTedMatchCumulativeData::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, BuildingsLost) == 0x00002C, "Member 'FTedMatchCumulativeData::BuildingsLost' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, ResourcesHarvested) == 0x000030, "Member 'FTedMatchCumulativeData::ResourcesHarvested' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, ResourcesSpent) == 0x000034, "Member 'FTedMatchCumulativeData::ResourcesSpent' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, DamageDealt) == 0x000038, "Member 'FTedMatchCumulativeData::DamageDealt' has a wrong offset!");
static_assert(offsetof(FTedMatchCumulativeData, DamageReceived) == 0x00003C, "Member 'FTedMatchCumulativeData::DamageReceived' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerProfileStatsCache
// 0x00A0 (0x00A0 - 0x0000)
struct FTedPlayerProfileStatsCache final
{
public:
	TMap<ETedRankedFaction, struct FTedMatchCumulativeData> TotalCumulativeData;                     // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ETedRankedFaction, struct FTedMatchCumulativeData> AverageCumulativeData;                   // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerProfileStatsCache) == 0x000008, "Wrong alignment on FTedPlayerProfileStatsCache");
static_assert(sizeof(FTedPlayerProfileStatsCache) == 0x0000A0, "Wrong size on FTedPlayerProfileStatsCache");
static_assert(offsetof(FTedPlayerProfileStatsCache, TotalCumulativeData) == 0x000000, "Member 'FTedPlayerProfileStatsCache::TotalCumulativeData' has a wrong offset!");
static_assert(offsetof(FTedPlayerProfileStatsCache, AverageCumulativeData) == 0x000050, "Member 'FTedPlayerProfileStatsCache::AverageCumulativeData' has a wrong offset!");

// ScriptStruct Tempest.ObjectivesData
// 0x0020 (0x0020 - 0x0000)
struct FObjectivesData final
{
public:
	TArray<class UTedObjectiveObj*>               CompleteObjectives;                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTedObjectiveObj*>               NotCompleteObjectives;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectivesData) == 0x000008, "Wrong alignment on FObjectivesData");
static_assert(sizeof(FObjectivesData) == 0x000020, "Wrong size on FObjectivesData");
static_assert(offsetof(FObjectivesData, CompleteObjectives) == 0x000000, "Member 'FObjectivesData::CompleteObjectives' has a wrong offset!");
static_assert(offsetof(FObjectivesData, NotCompleteObjectives) == 0x000010, "Member 'FObjectivesData::NotCompleteObjectives' has a wrong offset!");

// ScriptStruct Tempest.TedCustomAttitudes
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTedCustomAttitudes final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCustomAttitudes) == 0x000008, "Wrong alignment on FTedCustomAttitudes");
static_assert(sizeof(FTedCustomAttitudes) == 0x000010, "Wrong size on FTedCustomAttitudes");

// ScriptStruct Tempest.ConeDamageParams
// 0x0018 (0x0018 - 0x0000)
struct FConeDamageParams final
{
public:
	float                                         BaseDamage;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLength;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLength;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConeDamageParams) == 0x000004, "Wrong alignment on FConeDamageParams");
static_assert(sizeof(FConeDamageParams) == 0x000018, "Wrong size on FConeDamageParams");
static_assert(offsetof(FConeDamageParams, BaseDamage) == 0x000000, "Member 'FConeDamageParams::BaseDamage' has a wrong offset!");
static_assert(offsetof(FConeDamageParams, MinimumDamage) == 0x000004, "Member 'FConeDamageParams::MinimumDamage' has a wrong offset!");
static_assert(offsetof(FConeDamageParams, MinLength) == 0x000008, "Member 'FConeDamageParams::MinLength' has a wrong offset!");
static_assert(offsetof(FConeDamageParams, MaxLength) == 0x00000C, "Member 'FConeDamageParams::MaxLength' has a wrong offset!");
static_assert(offsetof(FConeDamageParams, Angle) == 0x000010, "Member 'FConeDamageParams::Angle' has a wrong offset!");
static_assert(offsetof(FConeDamageParams, DamageFalloff) == 0x000014, "Member 'FConeDamageParams::DamageFalloff' has a wrong offset!");

// ScriptStruct Tempest.ConeDamageEvent
// 0x0048 (0x0058 - 0x0010)
struct FConeDamageEvent final : public FDamageEvent
{
public:
	struct FConeDamageParams                      Params;                                            // 0x0010(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConeDamageEvent) == 0x000008, "Wrong alignment on FConeDamageEvent");
static_assert(sizeof(FConeDamageEvent) == 0x000058, "Wrong size on FConeDamageEvent");
static_assert(offsetof(FConeDamageEvent, Params) == 0x000010, "Member 'FConeDamageEvent::Params' has a wrong offset!");
static_assert(offsetof(FConeDamageEvent, Origin) == 0x000028, "Member 'FConeDamageEvent::Origin' has a wrong offset!");
static_assert(offsetof(FConeDamageEvent, Direction) == 0x000040, "Member 'FConeDamageEvent::Direction' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionConditionsInstance
// 0x0040 (0x0040 - 0x0000)
struct FTedDefinitionConditionsInstance final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedDefinitionConditions               DefinitionConditions;                              // 0x0018(0x0018)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bConditionsMet;                                    // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConditionsEvaluated;                              // 0x0031(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0xE];                                       // 0x0032(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionConditionsInstance) == 0x000008, "Wrong alignment on FTedDefinitionConditionsInstance");
static_assert(sizeof(FTedDefinitionConditionsInstance) == 0x000040, "Wrong size on FTedDefinitionConditionsInstance");
static_assert(offsetof(FTedDefinitionConditionsInstance, DefinitionConditions) == 0x000018, "Member 'FTedDefinitionConditionsInstance::DefinitionConditions' has a wrong offset!");
static_assert(offsetof(FTedDefinitionConditionsInstance, bConditionsMet) == 0x000030, "Member 'FTedDefinitionConditionsInstance::bConditionsMet' has a wrong offset!");
static_assert(offsetof(FTedDefinitionConditionsInstance, bConditionsEvaluated) == 0x000031, "Member 'FTedDefinitionConditionsInstance::bConditionsEvaluated' has a wrong offset!");

// ScriptStruct Tempest.TedDefinitionModInstance
// 0x0028 (0x0028 - 0x0000)
struct FTedDefinitionModInstance final
{
public:
	uint32                                        HandleId;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedDefinitionPropertyModifier         Mod;                                               // 0x0008(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDefinitionModInstance) == 0x000008, "Wrong alignment on FTedDefinitionModInstance");
static_assert(sizeof(FTedDefinitionModInstance) == 0x000028, "Wrong size on FTedDefinitionModInstance");
static_assert(offsetof(FTedDefinitionModInstance, HandleId) == 0x000000, "Member 'FTedDefinitionModInstance::HandleId' has a wrong offset!");
static_assert(offsetof(FTedDefinitionModInstance, Mod) == 0x000008, "Member 'FTedDefinitionModInstance::Mod' has a wrong offset!");

// ScriptStruct Tempest.FieldTileData
// 0x0030 (0x0030 - 0x0000)
struct FFieldTileData final
{
public:
	struct FOffsetCoords                          TileCoords;                                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldGrowthStage                      GrowthStage;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     ElementsStage;                                     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ElementIndices;                                    // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Resource;                                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextUpdateTime;                                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextCheckTime;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bShouldGrow : 1;                                   // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldRot : 1;                                    // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bConnectedToRoot : 1;                              // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLocallyVisible : 1;                               // 0x002C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldTileData) == 0x000008, "Wrong alignment on FFieldTileData");
static_assert(sizeof(FFieldTileData) == 0x000030, "Wrong size on FFieldTileData");
static_assert(offsetof(FFieldTileData, TileCoords) == 0x000000, "Member 'FFieldTileData::TileCoords' has a wrong offset!");
static_assert(offsetof(FFieldTileData, GrowthStage) == 0x000008, "Member 'FFieldTileData::GrowthStage' has a wrong offset!");
static_assert(offsetof(FFieldTileData, ElementsStage) == 0x000009, "Member 'FFieldTileData::ElementsStage' has a wrong offset!");
static_assert(offsetof(FFieldTileData, ElementIndices) == 0x000010, "Member 'FFieldTileData::ElementIndices' has a wrong offset!");
static_assert(offsetof(FFieldTileData, Resource) == 0x000020, "Member 'FFieldTileData::Resource' has a wrong offset!");
static_assert(offsetof(FFieldTileData, NextUpdateTime) == 0x000024, "Member 'FFieldTileData::NextUpdateTime' has a wrong offset!");
static_assert(offsetof(FFieldTileData, NextCheckTime) == 0x000028, "Member 'FFieldTileData::NextCheckTime' has a wrong offset!");

// ScriptStruct Tempest.TedNumericModAggregator
// 0x0000 (0x00D8 - 0x00D8)
struct FTedNumericModAggregator final : public FTedDefinitionModAggregator
{
};
static_assert(alignof(FTedNumericModAggregator) == 0x000008, "Wrong alignment on FTedNumericModAggregator");
static_assert(sizeof(FTedNumericModAggregator) == 0x0000D8, "Wrong size on FTedNumericModAggregator");

// ScriptStruct Tempest.TedStructModAggregator
// 0x0050 (0x0128 - 0x00D8)
struct FTedStructModAggregator final : public FTedDefinitionModAggregator
{
public:
	uint8                                         Pad_D8[0x50];                                      // 0x00D8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedStructModAggregator) == 0x000008, "Wrong alignment on FTedStructModAggregator");
static_assert(sizeof(FTedStructModAggregator) == 0x000128, "Wrong size on FTedStructModAggregator");

// ScriptStruct Tempest.ClientTransactionBiEvent_EventContext
// 0x0020 (0x0020 - 0x0000)
struct FClientTransactionBiEvent_EventContext final
{
public:
	class FString                                 transactionUid;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 transactionType;                                   // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientTransactionBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientTransactionBiEvent_EventContext");
static_assert(sizeof(FClientTransactionBiEvent_EventContext) == 0x000020, "Wrong size on FClientTransactionBiEvent_EventContext");
static_assert(offsetof(FClientTransactionBiEvent_EventContext, transactionUid) == 0x000000, "Member 'FClientTransactionBiEvent_EventContext::transactionUid' has a wrong offset!");
static_assert(offsetof(FClientTransactionBiEvent_EventContext, transactionType) == 0x000010, "Member 'FClientTransactionBiEvent_EventContext::transactionType' has a wrong offset!");

// ScriptStruct Tempest.TedDifficultyMultipliers
// 0x0010 (0x0018 - 0x0008)
struct FTedDifficultyMultipliers final : public FTableRowBase
{
public:
	float                                         Easy;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Medium;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hard;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VeryHard;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDifficultyMultipliers) == 0x000008, "Wrong alignment on FTedDifficultyMultipliers");
static_assert(sizeof(FTedDifficultyMultipliers) == 0x000018, "Wrong size on FTedDifficultyMultipliers");
static_assert(offsetof(FTedDifficultyMultipliers, Easy) == 0x000008, "Member 'FTedDifficultyMultipliers::Easy' has a wrong offset!");
static_assert(offsetof(FTedDifficultyMultipliers, Medium) == 0x00000C, "Member 'FTedDifficultyMultipliers::Medium' has a wrong offset!");
static_assert(offsetof(FTedDifficultyMultipliers, Hard) == 0x000010, "Member 'FTedDifficultyMultipliers::Hard' has a wrong offset!");
static_assert(offsetof(FTedDifficultyMultipliers, VeryHard) == 0x000014, "Member 'FTedDifficultyMultipliers::VeryHard' has a wrong offset!");

// ScriptStruct Tempest.TedTextWidgetConfig
// 0x0038 (0x0038 - 0x0000)
struct FTedTextWidgetConfig final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           PrimaryColor;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_Text : 1;                                // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_PrimaryColor : 1;                        // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_SecondaryColor : 1;                      // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTextWidgetConfig) == 0x000008, "Wrong alignment on FTedTextWidgetConfig");
static_assert(sizeof(FTedTextWidgetConfig) == 0x000038, "Wrong size on FTedTextWidgetConfig");
static_assert(offsetof(FTedTextWidgetConfig, Text) == 0x000000, "Member 'FTedTextWidgetConfig::Text' has a wrong offset!");
static_assert(offsetof(FTedTextWidgetConfig, PrimaryColor) == 0x000010, "Member 'FTedTextWidgetConfig::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FTedTextWidgetConfig, SecondaryColor) == 0x000020, "Member 'FTedTextWidgetConfig::SecondaryColor' has a wrong offset!");

// ScriptStruct Tempest.TedDropDownStyle
// 0x0DD0 (0x1430 - 0x0660)
struct FTedDropDownStyle final : public FComboBoxStyle
{
public:
	struct FTableRowStyle                         ItemStyle;                                         // 0x0660(0x0D50)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         ContentFont;                                       // 0x13B0(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateColor                            ForegroundColor;                                   // 0x1410(0x0014)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1424[0xC];                                     // 0x1424(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDropDownStyle) == 0x000010, "Wrong alignment on FTedDropDownStyle");
static_assert(sizeof(FTedDropDownStyle) == 0x001430, "Wrong size on FTedDropDownStyle");
static_assert(offsetof(FTedDropDownStyle, ItemStyle) == 0x000660, "Member 'FTedDropDownStyle::ItemStyle' has a wrong offset!");
static_assert(offsetof(FTedDropDownStyle, ContentFont) == 0x0013B0, "Member 'FTedDropDownStyle::ContentFont' has a wrong offset!");
static_assert(offsetof(FTedDropDownStyle, ForegroundColor) == 0x001410, "Member 'FTedDropDownStyle::ForegroundColor' has a wrong offset!");

// ScriptStruct Tempest.EcsComp_ProvidedAoE
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FEcsComp_ProvidedAoE final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_ProvidedAoE) == 0x000008, "Wrong alignment on FEcsComp_ProvidedAoE");
static_assert(sizeof(FEcsComp_ProvidedAoE) == 0x000050, "Wrong size on FEcsComp_ProvidedAoE");

// ScriptStruct Tempest.EcsComp_ReceivedAoE
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEcsComp_ReceivedAoE final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_ReceivedAoE) == 0x000008, "Wrong alignment on FEcsComp_ReceivedAoE");
static_assert(sizeof(FEcsComp_ReceivedAoE) == 0x000010, "Wrong size on FEcsComp_ReceivedAoE");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent_Cpu
// 0x0040 (0x0040 - 0x0000)
struct FClientDeviceInfoBiEvent_Cpu final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 detailedName;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         coreCount;                                         // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         logicalCoreCount;                                  // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frequency;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 driverVersion;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoBiEvent_Cpu) == 0x000008, "Wrong alignment on FClientDeviceInfoBiEvent_Cpu");
static_assert(sizeof(FClientDeviceInfoBiEvent_Cpu) == 0x000040, "Wrong size on FClientDeviceInfoBiEvent_Cpu");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, Name) == 0x000000, "Member 'FClientDeviceInfoBiEvent_Cpu::Name' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, detailedName) == 0x000010, "Member 'FClientDeviceInfoBiEvent_Cpu::detailedName' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, coreCount) == 0x000020, "Member 'FClientDeviceInfoBiEvent_Cpu::coreCount' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, logicalCoreCount) == 0x000024, "Member 'FClientDeviceInfoBiEvent_Cpu::logicalCoreCount' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, Frequency) == 0x000028, "Member 'FClientDeviceInfoBiEvent_Cpu::Frequency' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Cpu, driverVersion) == 0x000030, "Member 'FClientDeviceInfoBiEvent_Cpu::driverVersion' has a wrong offset!");

// ScriptStruct Tempest.EcsSpatialQueryElementPayload_AoEReceiver
// 0x0008 (0x0010 - 0x0008)
struct FEcsSpatialQueryElementPayload_AoEReceiver final : public FEcsSpatialQueryElementPayload
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsSpatialQueryElementPayload_AoEReceiver) == 0x000008, "Wrong alignment on FEcsSpatialQueryElementPayload_AoEReceiver");
static_assert(sizeof(FEcsSpatialQueryElementPayload_AoEReceiver) == 0x000010, "Wrong size on FEcsSpatialQueryElementPayload_AoEReceiver");

// ScriptStruct Tempest.GameplayCommandDataPayload_MoveAlongSpline
// 0x0018 (0x0020 - 0x0008)
struct FGameplayCommandDataPayload_MoveAlongSpline : public FGameplayCommandDataCustomPayload
{
public:
	class ATedUnitBase*                           Unit;                                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComp;                                        // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StartPointIdx;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EndPointIdx;                                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_MoveAlongSpline) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_MoveAlongSpline");
static_assert(sizeof(FGameplayCommandDataPayload_MoveAlongSpline) == 0x000020, "Wrong size on FGameplayCommandDataPayload_MoveAlongSpline");
static_assert(offsetof(FGameplayCommandDataPayload_MoveAlongSpline, Unit) == 0x000008, "Member 'FGameplayCommandDataPayload_MoveAlongSpline::Unit' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_MoveAlongSpline, SplineComp) == 0x000010, "Member 'FGameplayCommandDataPayload_MoveAlongSpline::SplineComp' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_MoveAlongSpline, StartPointIdx) == 0x000018, "Member 'FGameplayCommandDataPayload_MoveAlongSpline::StartPointIdx' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_MoveAlongSpline, EndPointIdx) == 0x00001C, "Member 'FGameplayCommandDataPayload_MoveAlongSpline::EndPointIdx' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_EnterExitRefinery
// 0x0010 (0x0030 - 0x0020)
struct FGameplayCommandDataPayload_EnterExitRefinery final : public FGameplayCommandDataPayload_MoveAlongSpline
{
public:
	class ATedStructureRefinery*                  Refinery;                                          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExit;                                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_EnterExitRefinery) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_EnterExitRefinery");
static_assert(sizeof(FGameplayCommandDataPayload_EnterExitRefinery) == 0x000030, "Wrong size on FGameplayCommandDataPayload_EnterExitRefinery");
static_assert(offsetof(FGameplayCommandDataPayload_EnterExitRefinery, Refinery) == 0x000020, "Member 'FGameplayCommandDataPayload_EnterExitRefinery::Refinery' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_EnterExitRefinery, bExit) == 0x000028, "Member 'FGameplayCommandDataPayload_EnterExitRefinery::bExit' has a wrong offset!");

// ScriptStruct Tempest.EcsComp_NavGrid
// 0x0008 (0x0008 - 0x0000)
struct FEcsComp_NavGrid final
{
public:
	class ASquareNavGrid*                         NavGrid;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_NavGrid) == 0x000008, "Wrong alignment on FEcsComp_NavGrid");
static_assert(sizeof(FEcsComp_NavGrid) == 0x000008, "Wrong size on FEcsComp_NavGrid");
static_assert(offsetof(FEcsComp_NavGrid, NavGrid) == 0x000000, "Member 'FEcsComp_NavGrid::NavGrid' has a wrong offset!");

// ScriptStruct Tempest.TedStartingArmies
// 0x0018 (0x0018 - 0x0000)
struct FTedStartingArmies final
{
public:
	class UTedArmyDefinition*                     Armies[0x3];                                       // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStartingArmies) == 0x000008, "Wrong alignment on FTedStartingArmies");
static_assert(sizeof(FTedStartingArmies) == 0x000018, "Wrong size on FTedStartingArmies");
static_assert(offsetof(FTedStartingArmies, Armies) == 0x000000, "Member 'FTedStartingArmies::Armies' has a wrong offset!");

// ScriptStruct Tempest.EcsSpatialQueryElementPayload_Pawn
// 0x0030 (0x0038 - 0x0008)
struct FEcsSpatialQueryElementPayload_Pawn final : public FEcsSpatialQueryElementPayload
{
public:
	uint8                                         Pad_8[0x30];                                       // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsSpatialQueryElementPayload_Pawn) == 0x000008, "Wrong alignment on FEcsSpatialQueryElementPayload_Pawn");
static_assert(sizeof(FEcsSpatialQueryElementPayload_Pawn) == 0x000038, "Wrong size on FEcsSpatialQueryElementPayload_Pawn");

// ScriptStruct Tempest.EcsComp_StealthOverridingEntity
// 0x0058 (0x0058 - 0x0000)
struct alignas(0x08) FEcsComp_StealthOverridingEntity final
{
public:
	uint8                                         Pad_0[0x58];                                       // 0x0000(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_StealthOverridingEntity) == 0x000008, "Wrong alignment on FEcsComp_StealthOverridingEntity");
static_assert(sizeof(FEcsComp_StealthOverridingEntity) == 0x000058, "Wrong size on FEcsComp_StealthOverridingEntity");

// ScriptStruct Tempest.EcsComp_StealthOverrides
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FEcsComp_StealthOverrides final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_StealthOverrides) == 0x000008, "Wrong alignment on FEcsComp_StealthOverrides");
static_assert(sizeof(FEcsComp_StealthOverrides) == 0x000050, "Wrong size on FEcsComp_StealthOverrides");

// ScriptStruct Tempest.TedDefinitionIdsFilter
// 0x0028 (0x0028 - 0x0000)
struct FTedDefinitionIdsFilter final
{
public:
	struct FGameplayTagContainer                  AllowedTags;                                       // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedDefinitionIdsFilter) == 0x000008, "Wrong alignment on FTedDefinitionIdsFilter");
static_assert(sizeof(FTedDefinitionIdsFilter) == 0x000028, "Wrong size on FTedDefinitionIdsFilter");
static_assert(offsetof(FTedDefinitionIdsFilter, AllowedTags) == 0x000000, "Member 'FTedDefinitionIdsFilter::AllowedTags' has a wrong offset!");
static_assert(offsetof(FTedDefinitionIdsFilter, bExactMatch) == 0x000020, "Member 'FTedDefinitionIdsFilter::bExactMatch' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_SpawnOnDeath
// 0x0070 (0x0090 - 0x0020)
struct FTedUpgradeProcessor_SpawnOnDeath final : public FTedUpgradeProcessor
{
public:
	struct FTedDefinitionIdsFilter                DefinitionIdsFilter;                               // 0x0020(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bAppliedOnlyToSourcePawns;                         // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   UnitsToSpawn;                                      // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	ETedVeterancyLevel                            SpawnedUnitsVeterancyLevel;                        // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   MinefieldToSpawn;                                  // 0x0068(0x0028)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_SpawnOnDeath) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_SpawnOnDeath");
static_assert(sizeof(FTedUpgradeProcessor_SpawnOnDeath) == 0x000090, "Wrong size on FTedUpgradeProcessor_SpawnOnDeath");
static_assert(offsetof(FTedUpgradeProcessor_SpawnOnDeath, DefinitionIdsFilter) == 0x000020, "Member 'FTedUpgradeProcessor_SpawnOnDeath::DefinitionIdsFilter' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_SpawnOnDeath, bAppliedOnlyToSourcePawns) == 0x000048, "Member 'FTedUpgradeProcessor_SpawnOnDeath::bAppliedOnlyToSourcePawns' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_SpawnOnDeath, UnitsToSpawn) == 0x000050, "Member 'FTedUpgradeProcessor_SpawnOnDeath::UnitsToSpawn' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_SpawnOnDeath, SpawnedUnitsVeterancyLevel) == 0x000060, "Member 'FTedUpgradeProcessor_SpawnOnDeath::SpawnedUnitsVeterancyLevel' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_SpawnOnDeath, MinefieldToSpawn) == 0x000068, "Member 'FTedUpgradeProcessor_SpawnOnDeath::MinefieldToSpawn' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchEndBiEvent_MatchResults
// 0x0028 (0x0028 - 0x0000)
struct FClientMatchEndBiEvent_MatchResults final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchDuration;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         objectivesCompleted;                               // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         requisitionGained;                                 // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         supportPowerUsage;                                 // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientMatchEndBiEvent_MatchResults) == 0x000008, "Wrong alignment on FClientMatchEndBiEvent_MatchResults");
static_assert(sizeof(FClientMatchEndBiEvent_MatchResults) == 0x000028, "Wrong size on FClientMatchEndBiEvent_MatchResults");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, Result) == 0x000000, "Member 'FClientMatchEndBiEvent_MatchResults::Result' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, Score) == 0x000010, "Member 'FClientMatchEndBiEvent_MatchResults::Score' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, MatchDuration) == 0x000014, "Member 'FClientMatchEndBiEvent_MatchResults::MatchDuration' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, objectivesCompleted) == 0x000018, "Member 'FClientMatchEndBiEvent_MatchResults::objectivesCompleted' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, requisitionGained) == 0x00001C, "Member 'FClientMatchEndBiEvent_MatchResults::requisitionGained' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent_MatchResults, supportPowerUsage) == 0x000020, "Member 'FClientMatchEndBiEvent_MatchResults::supportPowerUsage' has a wrong offset!");

// ScriptStruct Tempest.TedEffectAppliedToAttackerConfig
// 0x0170 (0x0170 - 0x0000)
struct FTedEffectAppliedToAttackerConfig final
{
public:
	TSubclassOf<class UGameplayEffect>            EffectClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAISenseAffiliationFilter              AttitudeFilter;                                    // 0x000C(0x0004)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x0010(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0098(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<TSubclassOf<class UTedDamageType>>       RequiredDamageTypes;                               // 0x0120(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedEffectAppliedToAttackerConfig) == 0x000008, "Wrong alignment on FTedEffectAppliedToAttackerConfig");
static_assert(sizeof(FTedEffectAppliedToAttackerConfig) == 0x000170, "Wrong size on FTedEffectAppliedToAttackerConfig");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, EffectClass) == 0x000000, "Member 'FTedEffectAppliedToAttackerConfig::EffectClass' has a wrong offset!");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, EffectRadius) == 0x000008, "Member 'FTedEffectAppliedToAttackerConfig::EffectRadius' has a wrong offset!");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, AttitudeFilter) == 0x00000C, "Member 'FTedEffectAppliedToAttackerConfig::AttitudeFilter' has a wrong offset!");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, SourceTagRequirements) == 0x000010, "Member 'FTedEffectAppliedToAttackerConfig::SourceTagRequirements' has a wrong offset!");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, TargetTagRequirements) == 0x000098, "Member 'FTedEffectAppliedToAttackerConfig::TargetTagRequirements' has a wrong offset!");
static_assert(offsetof(FTedEffectAppliedToAttackerConfig, RequiredDamageTypes) == 0x000120, "Member 'FTedEffectAppliedToAttackerConfig::RequiredDamageTypes' has a wrong offset!");

// ScriptStruct Tempest.TedEffectDrawData
// 0x0110 (0x0110 - 0x0000)
struct FTedEffectDrawData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTedStatusDefinition*>           EffectsQueue;                                      // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            EffectBrush;                                       // 0x0020(0x00D0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x20];                                      // 0x00F0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedEffectDrawData) == 0x000010, "Wrong alignment on FTedEffectDrawData");
static_assert(sizeof(FTedEffectDrawData) == 0x000110, "Wrong size on FTedEffectDrawData");
static_assert(offsetof(FTedEffectDrawData, EffectsQueue) == 0x000008, "Member 'FTedEffectDrawData::EffectsQueue' has a wrong offset!");
static_assert(offsetof(FTedEffectDrawData, EffectBrush) == 0x000020, "Member 'FTedEffectDrawData::EffectBrush' has a wrong offset!");

// ScriptStruct Tempest.VolumeSpawnEntry
// 0x0020 (0x0020 - 0x0000)
struct FVolumeSpawnEntry final
{
public:
	TSubclassOf<class ATedUnitBase>               Class;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActorTag;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UnitsSpawnMultiplierPreset;                        // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVeterancyOverride;                                // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedVeterancyLevel                            VeterancyLevel;                                    // 0x001D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumeSpawnEntry) == 0x000008, "Wrong alignment on FVolumeSpawnEntry");
static_assert(sizeof(FVolumeSpawnEntry) == 0x000020, "Wrong size on FVolumeSpawnEntry");
static_assert(offsetof(FVolumeSpawnEntry, Class) == 0x000000, "Member 'FVolumeSpawnEntry::Class' has a wrong offset!");
static_assert(offsetof(FVolumeSpawnEntry, Count) == 0x000008, "Member 'FVolumeSpawnEntry::Count' has a wrong offset!");
static_assert(offsetof(FVolumeSpawnEntry, ActorTag) == 0x00000C, "Member 'FVolumeSpawnEntry::ActorTag' has a wrong offset!");
static_assert(offsetof(FVolumeSpawnEntry, UnitsSpawnMultiplierPreset) == 0x000014, "Member 'FVolumeSpawnEntry::UnitsSpawnMultiplierPreset' has a wrong offset!");
static_assert(offsetof(FVolumeSpawnEntry, bVeterancyOverride) == 0x00001C, "Member 'FVolumeSpawnEntry::bVeterancyOverride' has a wrong offset!");
static_assert(offsetof(FVolumeSpawnEntry, VeterancyLevel) == 0x00001D, "Member 'FVolumeSpawnEntry::VeterancyLevel' has a wrong offset!");

// ScriptStruct Tempest.VolumeSpawnPayload
// 0x0010 (0x0010 - 0x0000)
struct FVolumeSpawnPayload final
{
public:
	TArray<struct FVolumeSpawnEntry>              Entries;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVolumeSpawnPayload) == 0x000008, "Wrong alignment on FVolumeSpawnPayload");
static_assert(sizeof(FVolumeSpawnPayload) == 0x000010, "Wrong size on FVolumeSpawnPayload");
static_assert(offsetof(FVolumeSpawnPayload, Entries) == 0x000000, "Member 'FVolumeSpawnPayload::Entries' has a wrong offset!");

// ScriptStruct Tempest.PawnEffectData
// 0x0130 (0x0130 - 0x0000)
struct FPawnEffectData final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedEffectDrawData                     Data;                                              // 0x0020(0x0110)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnEffectData) == 0x000010, "Wrong alignment on FPawnEffectData");
static_assert(sizeof(FPawnEffectData) == 0x000130, "Wrong size on FPawnEffectData");
static_assert(offsetof(FPawnEffectData, Pawn) == 0x000000, "Member 'FPawnEffectData::Pawn' has a wrong offset!");
static_assert(offsetof(FPawnEffectData, Data) == 0x000020, "Member 'FPawnEffectData::Data' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryDamageDealerInfo
// 0x0030 (0x0030 - 0x0000)
struct FTedTelemetryDamageDealerInfo final
{
public:
	TWeakObjectPtr<class ATedPawn>                PawnWeakPtr;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedDefinitionRef                      CachedDefinitionRef;                               // 0x0008(0x0020)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulatedDamage;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryDamageDealerInfo) == 0x000008, "Wrong alignment on FTedTelemetryDamageDealerInfo");
static_assert(sizeof(FTedTelemetryDamageDealerInfo) == 0x000030, "Wrong size on FTedTelemetryDamageDealerInfo");
static_assert(offsetof(FTedTelemetryDamageDealerInfo, PawnWeakPtr) == 0x000000, "Member 'FTedTelemetryDamageDealerInfo::PawnWeakPtr' has a wrong offset!");
static_assert(offsetof(FTedTelemetryDamageDealerInfo, CachedDefinitionRef) == 0x000008, "Member 'FTedTelemetryDamageDealerInfo::CachedDefinitionRef' has a wrong offset!");
static_assert(offsetof(FTedTelemetryDamageDealerInfo, AccumulatedDamage) == 0x000028, "Member 'FTedTelemetryDamageDealerInfo::AccumulatedDamage' has a wrong offset!");

// ScriptStruct Tempest.EncyclopediaFactoryPanelInfo
// 0x0018 (0x0018 - 0x0000)
struct FEncyclopediaFactoryPanelInfo final
{
public:
	class FName                                   FactionName;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTedEncyclopediaDefinitionAsset*> Assets;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEncyclopediaFactoryPanelInfo) == 0x000008, "Wrong alignment on FEncyclopediaFactoryPanelInfo");
static_assert(sizeof(FEncyclopediaFactoryPanelInfo) == 0x000018, "Wrong size on FEncyclopediaFactoryPanelInfo");
static_assert(offsetof(FEncyclopediaFactoryPanelInfo, FactionName) == 0x000000, "Member 'FEncyclopediaFactoryPanelInfo::FactionName' has a wrong offset!");
static_assert(offsetof(FEncyclopediaFactoryPanelInfo, Assets) == 0x000008, "Member 'FEncyclopediaFactoryPanelInfo::Assets' has a wrong offset!");

// ScriptStruct Tempest.TedEquipmentPanelFilterOption
// 0x0018 (0x0018 - 0x0000)
struct FTedEquipmentPanelFilterOption final
{
public:
	ETedEquipmentPanelFilterOptionType            Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayText;                                       // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedEquipmentPanelFilterOption) == 0x000008, "Wrong alignment on FTedEquipmentPanelFilterOption");
static_assert(sizeof(FTedEquipmentPanelFilterOption) == 0x000018, "Wrong size on FTedEquipmentPanelFilterOption");
static_assert(offsetof(FTedEquipmentPanelFilterOption, Type) == 0x000000, "Member 'FTedEquipmentPanelFilterOption::Type' has a wrong offset!");
static_assert(offsetof(FTedEquipmentPanelFilterOption, DisplayText) == 0x000008, "Member 'FTedEquipmentPanelFilterOption::DisplayText' has a wrong offset!");

// ScriptStruct Tempest.FoWAgentHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FFoWAgentHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoWAgentHandle) == 0x000004, "Wrong alignment on FFoWAgentHandle");
static_assert(sizeof(FFoWAgentHandle) == 0x000004, "Wrong size on FFoWAgentHandle");

// ScriptStruct Tempest.InputActionOptions
// 0x0030 (0x0030 - 0x0000)
struct FInputActionOptions final
{
public:
	TSoftObjectPtr<class UInputAction>            InputAction;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInputActionOptions) == 0x000008, "Wrong alignment on FInputActionOptions");
static_assert(sizeof(FInputActionOptions) == 0x000030, "Wrong size on FInputActionOptions");
static_assert(offsetof(FInputActionOptions, InputAction) == 0x000000, "Member 'FInputActionOptions::InputAction' has a wrong offset!");
static_assert(offsetof(FInputActionOptions, TriggerEvent) == 0x000028, "Member 'FInputActionOptions::TriggerEvent' has a wrong offset!");

// ScriptStruct Tempest.TedFoWAgentData
// 0x0050 (0x0050 - 0x0000)
struct FTedFoWAgentData final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(ZeroConstructor, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    TargetLocation;                                    // 0x0008(0x0018)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           DestroyTimerHandle;                                // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFogOfWarAgentData                     FogOfWarAgentData;                                 // 0x0028(0x0028)(SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedFoWAgentData) == 0x000008, "Wrong alignment on FTedFoWAgentData");
static_assert(sizeof(FTedFoWAgentData) == 0x000050, "Wrong size on FTedFoWAgentData");
static_assert(offsetof(FTedFoWAgentData, Target) == 0x000000, "Member 'FTedFoWAgentData::Target' has a wrong offset!");
static_assert(offsetof(FTedFoWAgentData, TargetLocation) == 0x000008, "Member 'FTedFoWAgentData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTedFoWAgentData, DestroyTimerHandle) == 0x000020, "Member 'FTedFoWAgentData::DestroyTimerHandle' has a wrong offset!");
static_assert(offsetof(FTedFoWAgentData, FogOfWarAgentData) == 0x000028, "Member 'FTedFoWAgentData::FogOfWarAgentData' has a wrong offset!");

// ScriptStruct Tempest.TPPoolElem
// 0x0010 (0x0010 - 0x0000)
struct FTPPoolElem final
{
public:
	class ATedProjectile*                         Projectile;                                        // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTPPoolElem) == 0x000008, "Wrong alignment on FTPPoolElem");
static_assert(sizeof(FTPPoolElem) == 0x000010, "Wrong size on FTPPoolElem");
static_assert(offsetof(FTPPoolElem, Projectile) == 0x000000, "Member 'FTPPoolElem::Projectile' has a wrong offset!");

// ScriptStruct Tempest.FoliageInteractionData
// 0x0130 (0x0130 - 0x0000)
struct FFoliageInteractionData final
{
public:
	struct FRuntimeFloatCurve                     AnimationCurve;                                    // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         TargetRotationLimit;                               // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationZOffset;                             // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetScale;                                       // 0x0090(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              FadeOutDelay;                                      // 0x00B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FadeOutScale;                                      // 0x00C0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               InteractionSound;                                  // 0x00D8(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          InteractionParticle;                               // 0x0100(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableInteractionForOtherPawnTypes;              // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFoliageInteractionData) == 0x000008, "Wrong alignment on FFoliageInteractionData");
static_assert(sizeof(FFoliageInteractionData) == 0x000130, "Wrong size on FFoliageInteractionData");
static_assert(offsetof(FFoliageInteractionData, AnimationCurve) == 0x000000, "Member 'FFoliageInteractionData::AnimationCurve' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, TargetRotationLimit) == 0x000088, "Member 'FFoliageInteractionData::TargetRotationLimit' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, TargetLocationZOffset) == 0x00008C, "Member 'FFoliageInteractionData::TargetLocationZOffset' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, TargetScale) == 0x000090, "Member 'FFoliageInteractionData::TargetScale' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, FadeOutTime) == 0x0000A8, "Member 'FFoliageInteractionData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, FadeOutDelay) == 0x0000B0, "Member 'FFoliageInteractionData::FadeOutDelay' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, FadeOutScale) == 0x0000C0, "Member 'FFoliageInteractionData::FadeOutScale' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, InteractionSound) == 0x0000D8, "Member 'FFoliageInteractionData::InteractionSound' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, InteractionParticle) == 0x000100, "Member 'FFoliageInteractionData::InteractionParticle' has a wrong offset!");
static_assert(offsetof(FFoliageInteractionData, bDisableInteractionForOtherPawnTypes) == 0x000128, "Member 'FFoliageInteractionData::bDisableInteractionForOtherPawnTypes' has a wrong offset!");

// ScriptStruct Tempest.FoliageConfig
// 0x0190 (0x0190 - 0x0000)
struct FFoliageConfig final
{
public:
	struct FGameplayTag                           FoliageType;                                       // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFoliageChannel                               FoliageChannel;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsObstacle : 1;                                   // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverlapRadiusScale;                                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageInteractionData                FoliageInteractionData;                            // 0x0010(0x0130)(Edit, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class ATedPawn>, struct FFoliageInteractionData> FoliageInteractionDataOverrides; // 0x0140(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageConfig) == 0x000008, "Wrong alignment on FFoliageConfig");
static_assert(sizeof(FFoliageConfig) == 0x000190, "Wrong size on FFoliageConfig");
static_assert(offsetof(FFoliageConfig, FoliageType) == 0x000000, "Member 'FFoliageConfig::FoliageType' has a wrong offset!");
static_assert(offsetof(FFoliageConfig, FoliageChannel) == 0x000008, "Member 'FFoliageConfig::FoliageChannel' has a wrong offset!");
static_assert(offsetof(FFoliageConfig, OverlapRadiusScale) == 0x00000C, "Member 'FFoliageConfig::OverlapRadiusScale' has a wrong offset!");
static_assert(offsetof(FFoliageConfig, FoliageInteractionData) == 0x000010, "Member 'FFoliageConfig::FoliageInteractionData' has a wrong offset!");
static_assert(offsetof(FFoliageConfig, FoliageInteractionDataOverrides) == 0x000140, "Member 'FFoliageConfig::FoliageInteractionDataOverrides' has a wrong offset!");

// ScriptStruct Tempest.TedFrameConsoleData
// 0x0020 (0x0020 - 0x0000)
struct FTedFrameConsoleData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PosX;                                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PosY;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedFrameConsoleData) == 0x000008, "Wrong alignment on FTedFrameConsoleData");
static_assert(sizeof(FTedFrameConsoleData) == 0x000020, "Wrong size on FTedFrameConsoleData");
static_assert(offsetof(FTedFrameConsoleData, Title) == 0x000000, "Member 'FTedFrameConsoleData::Title' has a wrong offset!");
static_assert(offsetof(FTedFrameConsoleData, PosX) == 0x000010, "Member 'FTedFrameConsoleData::PosX' has a wrong offset!");
static_assert(offsetof(FTedFrameConsoleData, PosY) == 0x000014, "Member 'FTedFrameConsoleData::PosY' has a wrong offset!");
static_assert(offsetof(FTedFrameConsoleData, Width) == 0x000018, "Member 'FTedFrameConsoleData::Width' has a wrong offset!");
static_assert(offsetof(FTedFrameConsoleData, Height) == 0x00001C, "Member 'FTedFrameConsoleData::Height' has a wrong offset!");

// ScriptStruct Tempest.TedMatchPlayerConfig
// 0x0038 (0x0038 - 0x0000)
struct FTedMatchPlayerConfig final
{
public:
	struct FTedOnlinePlayerData                   Player;                                            // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	ETedRankedFaction                             RankedFaction;                                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   Faction;                                           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBot;                                            // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedBotDifficulty                             BotDifficulty;                                     // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMatchPlayerConfig) == 0x000008, "Wrong alignment on FTedMatchPlayerConfig");
static_assert(sizeof(FTedMatchPlayerConfig) == 0x000038, "Wrong size on FTedMatchPlayerConfig");
static_assert(offsetof(FTedMatchPlayerConfig, Player) == 0x000000, "Member 'FTedMatchPlayerConfig::Player' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, RankedFaction) == 0x000030, "Member 'FTedMatchPlayerConfig::RankedFaction' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, Faction) == 0x000031, "Member 'FTedMatchPlayerConfig::Faction' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, PlayerID) == 0x000032, "Member 'FTedMatchPlayerConfig::PlayerID' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, TeamID) == 0x000033, "Member 'FTedMatchPlayerConfig::TeamID' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, bIsWinner) == 0x000034, "Member 'FTedMatchPlayerConfig::bIsWinner' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, bIsBot) == 0x000035, "Member 'FTedMatchPlayerConfig::bIsBot' has a wrong offset!");
static_assert(offsetof(FTedMatchPlayerConfig, BotDifficulty) == 0x000036, "Member 'FTedMatchPlayerConfig::BotDifficulty' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct FTedGameCreationPlayerSetting final
{
public:
	ETedSessionMemberSettingKey                   Key;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationPlayerSetting) == 0x000004, "Wrong alignment on FTedGameCreationPlayerSetting");
static_assert(sizeof(FTedGameCreationPlayerSetting) == 0x000008, "Wrong size on FTedGameCreationPlayerSetting");
static_assert(offsetof(FTedGameCreationPlayerSetting, Key) == 0x000000, "Member 'FTedGameCreationPlayerSetting::Key' has a wrong offset!");
static_assert(offsetof(FTedGameCreationPlayerSetting, Value) == 0x000004, "Member 'FTedGameCreationPlayerSetting::Value' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationPlayerSettings
// 0x0010 (0x0010 - 0x0000)
struct FTedGameCreationPlayerSettings final
{
public:
	TArray<struct FTedGameCreationPlayerSetting>  Settings;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationPlayerSettings) == 0x000008, "Wrong alignment on FTedGameCreationPlayerSettings");
static_assert(sizeof(FTedGameCreationPlayerSettings) == 0x000010, "Wrong size on FTedGameCreationPlayerSettings");
static_assert(offsetof(FTedGameCreationPlayerSettings, Settings) == 0x000000, "Member 'FTedGameCreationPlayerSettings::Settings' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataPendingAnnouncement
// 0x0018 (0x0018 - 0x0000)
struct FTedPlayerDataPendingAnnouncement final
{
public:
	ETedPlayerDataAnnouncement                    Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ContextObject;                                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnitAnnouncement;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPlayerDataPendingAnnouncement) == 0x000008, "Wrong alignment on FTedPlayerDataPendingAnnouncement");
static_assert(sizeof(FTedPlayerDataPendingAnnouncement) == 0x000018, "Wrong size on FTedPlayerDataPendingAnnouncement");
static_assert(offsetof(FTedPlayerDataPendingAnnouncement, Type) == 0x000000, "Member 'FTedPlayerDataPendingAnnouncement::Type' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataPendingAnnouncement, ContextObject) == 0x000008, "Member 'FTedPlayerDataPendingAnnouncement::ContextObject' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataPendingAnnouncement, bUnitAnnouncement) == 0x000010, "Member 'FTedPlayerDataPendingAnnouncement::bUnitAnnouncement' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationContextObject
// 0x0010 (0x0010 - 0x0000)
struct FTedGameCreationContextObject final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationContextObject) == 0x000008, "Wrong alignment on FTedGameCreationContextObject");
static_assert(sizeof(FTedGameCreationContextObject) == 0x000010, "Wrong size on FTedGameCreationContextObject");
static_assert(offsetof(FTedGameCreationContextObject, Key) == 0x000000, "Member 'FTedGameCreationContextObject::Key' has a wrong offset!");
static_assert(offsetof(FTedGameCreationContextObject, Value) == 0x000008, "Member 'FTedGameCreationContextObject::Value' has a wrong offset!");

// ScriptStruct Tempest.TedPawnSkinOverride
// 0x000C (0x000C - 0x0000)
struct FTedPawnSkinOverride final
{
public:
	struct FGameplayTag                           PawnTag;                                           // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPawnSkinIndex                             Skin;                                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnSkinOverride) == 0x000004, "Wrong alignment on FTedPawnSkinOverride");
static_assert(sizeof(FTedPawnSkinOverride) == 0x00000C, "Wrong size on FTedPawnSkinOverride");
static_assert(offsetof(FTedPawnSkinOverride, PawnTag) == 0x000000, "Member 'FTedPawnSkinOverride::PawnTag' has a wrong offset!");
static_assert(offsetof(FTedPawnSkinOverride, Skin) == 0x000008, "Member 'FTedPawnSkinOverride::Skin' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationContextObjects
// 0x0010 (0x0010 - 0x0000)
struct FTedGameCreationContextObjects final
{
public:
	TArray<struct FTedGameCreationContextObject>  Objects;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationContextObjects) == 0x000008, "Wrong alignment on FTedGameCreationContextObjects");
static_assert(sizeof(FTedGameCreationContextObjects) == 0x000010, "Wrong size on FTedGameCreationContextObjects");
static_assert(offsetof(FTedGameCreationContextObjects, Objects) == 0x000000, "Member 'FTedGameCreationContextObjects::Objects' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationPlayer
// 0x0030 (0x0030 - 0x0000)
struct FTedGameCreationPlayer final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTedGameCreationPlayerSettings         Settings;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTedGameCreationContextObjects         ContextObjects;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationPlayer) == 0x000008, "Wrong alignment on FTedGameCreationPlayer");
static_assert(sizeof(FTedGameCreationPlayer) == 0x000030, "Wrong size on FTedGameCreationPlayer");
static_assert(offsetof(FTedGameCreationPlayer, Label) == 0x000000, "Member 'FTedGameCreationPlayer::Label' has a wrong offset!");
static_assert(offsetof(FTedGameCreationPlayer, Settings) == 0x000010, "Member 'FTedGameCreationPlayer::Settings' has a wrong offset!");
static_assert(offsetof(FTedGameCreationPlayer, ContextObjects) == 0x000020, "Member 'FTedGameCreationPlayer::ContextObjects' has a wrong offset!");

// ScriptStruct Tempest.TedGameCreationTeam
// 0x0010 (0x0010 - 0x0000)
struct FTedGameCreationTeam final
{
public:
	TArray<struct FTedGameCreationPlayer>         Players;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameCreationTeam) == 0x000008, "Wrong alignment on FTedGameCreationTeam");
static_assert(sizeof(FTedGameCreationTeam) == 0x000010, "Wrong size on FTedGameCreationTeam");
static_assert(offsetof(FTedGameCreationTeam, Players) == 0x000000, "Member 'FTedGameCreationTeam::Players' has a wrong offset!");

// ScriptStruct Tempest.TedPowerBarData
// 0x0048 (0x0048 - 0x0000)
struct FTedPowerBarData final
{
public:
	float                                         AnimDuration;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableRuler : 1;                                  // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RulerSegmentSpacing;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxRulerSegmentsToShow;                            // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedPowerBarWidget*                     OwningWidget;                                      // 0x0010(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ProgressBar;                                       // 0x0018(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ProgressBarDMI;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       IndicatorSlot;                                     // 0x0028(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetResourceValue;                               // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetResourceCapacity;                            // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetResourcePercentage;                          // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastPercentage;                                    // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastIndicatorCanvasLength;                         // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bForceUpdate : 1;                                  // 0x0044(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPowerBarData) == 0x000008, "Wrong alignment on FTedPowerBarData");
static_assert(sizeof(FTedPowerBarData) == 0x000048, "Wrong size on FTedPowerBarData");
static_assert(offsetof(FTedPowerBarData, AnimDuration) == 0x000000, "Member 'FTedPowerBarData::AnimDuration' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, RulerSegmentSpacing) == 0x000008, "Member 'FTedPowerBarData::RulerSegmentSpacing' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, MaxRulerSegmentsToShow) == 0x00000C, "Member 'FTedPowerBarData::MaxRulerSegmentsToShow' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, OwningWidget) == 0x000010, "Member 'FTedPowerBarData::OwningWidget' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, ProgressBar) == 0x000018, "Member 'FTedPowerBarData::ProgressBar' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, ProgressBarDMI) == 0x000020, "Member 'FTedPowerBarData::ProgressBarDMI' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, IndicatorSlot) == 0x000028, "Member 'FTedPowerBarData::IndicatorSlot' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, TargetResourceValue) == 0x000030, "Member 'FTedPowerBarData::TargetResourceValue' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, TargetResourceCapacity) == 0x000034, "Member 'FTedPowerBarData::TargetResourceCapacity' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, TargetResourcePercentage) == 0x000038, "Member 'FTedPowerBarData::TargetResourcePercentage' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, LastPercentage) == 0x00003C, "Member 'FTedPowerBarData::LastPercentage' has a wrong offset!");
static_assert(offsetof(FTedPowerBarData, LastIndicatorCanvasLength) == 0x000040, "Member 'FTedPowerBarData::LastIndicatorCanvasLength' has a wrong offset!");

// ScriptStruct Tempest.TedGameplayEffectContext
// 0x0008 (0x0088 - 0x0080)
struct FTedGameplayEffectContext final : public FGameplayEffectContext
{
public:
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0080(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedGameplayEffectContext) == 0x000008, "Wrong alignment on FTedGameplayEffectContext");
static_assert(sizeof(FTedGameplayEffectContext) == 0x000088, "Wrong size on FTedGameplayEffectContext");
static_assert(offsetof(FTedGameplayEffectContext, DamageTypeClass) == 0x000080, "Member 'FTedGameplayEffectContext::DamageTypeClass' has a wrong offset!");

// ScriptStruct Tempest.ClientLeaderboardScreenBiEvent_LeaderboardTop
// 0x0028 (0x0028 - 0x0000)
struct FClientLeaderboardScreenBiEvent_LeaderboardTop final
{
public:
	int32                                         place;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wins;                                              // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinRate;                                           // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMR;                                               // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientLeaderboardScreenBiEvent_LeaderboardTop) == 0x000008, "Wrong alignment on FClientLeaderboardScreenBiEvent_LeaderboardTop");
static_assert(sizeof(FClientLeaderboardScreenBiEvent_LeaderboardTop) == 0x000028, "Wrong size on FClientLeaderboardScreenBiEvent_LeaderboardTop");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardTop, place) == 0x000000, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardTop::place' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardTop, Name) == 0x000008, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardTop::Name' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardTop, Wins) == 0x000018, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardTop::Wins' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardTop, WinRate) == 0x00001C, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardTop::WinRate' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardTop, MMR) == 0x000020, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardTop::MMR' has a wrong offset!");

// ScriptStruct Tempest.TedValueModWithTagRequirementsData
// 0x0090 (0x0090 - 0x0000)
struct FTedValueModWithTagRequirementsData final
{
public:
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0000(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         Magnitude;                                         // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModOp                                ModifierOp;                                        // 0x008C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedValueModWithTagRequirementsData) == 0x000008, "Wrong alignment on FTedValueModWithTagRequirementsData");
static_assert(sizeof(FTedValueModWithTagRequirementsData) == 0x000090, "Wrong size on FTedValueModWithTagRequirementsData");
static_assert(offsetof(FTedValueModWithTagRequirementsData, TagRequirements) == 0x000000, "Member 'FTedValueModWithTagRequirementsData::TagRequirements' has a wrong offset!");
static_assert(offsetof(FTedValueModWithTagRequirementsData, Magnitude) == 0x000088, "Member 'FTedValueModWithTagRequirementsData::Magnitude' has a wrong offset!");
static_assert(offsetof(FTedValueModWithTagRequirementsData, ModifierOp) == 0x00008C, "Member 'FTedValueModWithTagRequirementsData::ModifierOp' has a wrong offset!");

// ScriptStruct Tempest.TedValueModsWithTagRequirements
// 0x0010 (0x0010 - 0x0000)
struct FTedValueModsWithTagRequirements final
{
public:
	TArray<struct FTedValueModWithTagRequirementsData> ModsData;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedValueModsWithTagRequirements) == 0x000008, "Wrong alignment on FTedValueModsWithTagRequirements");
static_assert(sizeof(FTedValueModsWithTagRequirements) == 0x000010, "Wrong size on FTedValueModsWithTagRequirements");
static_assert(offsetof(FTedValueModsWithTagRequirements, ModsData) == 0x000000, "Member 'FTedValueModsWithTagRequirements::ModsData' has a wrong offset!");

// ScriptStruct Tempest.Campaign
// 0x0010 (0x0010 - 0x0000)
struct FCampaign final
{
public:
	class FString                                 CampaignId;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampaign) == 0x000008, "Wrong alignment on FCampaign");
static_assert(sizeof(FCampaign) == 0x000010, "Wrong size on FCampaign");
static_assert(offsetof(FCampaign, CampaignId) == 0x000000, "Member 'FCampaign::CampaignId' has a wrong offset!");

// ScriptStruct Tempest.PingLimiter
// 0x0018 (0x0018 - 0x0000)
struct FPingLimiter final
{
public:
	int32                                         MaxPingInDuration;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Duration;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPingLimiter) == 0x000008, "Wrong alignment on FPingLimiter");
static_assert(sizeof(FPingLimiter) == 0x000018, "Wrong size on FPingLimiter");
static_assert(offsetof(FPingLimiter, MaxPingInDuration) == 0x000000, "Member 'FPingLimiter::MaxPingInDuration' has a wrong offset!");
static_assert(offsetof(FPingLimiter, Duration) == 0x000008, "Member 'FPingLimiter::Duration' has a wrong offset!");
static_assert(offsetof(FPingLimiter, Cooldown) == 0x000010, "Member 'FPingLimiter::Cooldown' has a wrong offset!");

// ScriptStruct Tempest.TedGarrisonBarConfig
// 0x0070 (0x0070 - 0x0000)
struct FTedGarrisonBarConfig final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         MaxHealthRange;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         LengthRange;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SupportedClass;                                    // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           BlackListedClasses;                                // 0x0048(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BoxMaterial;                                       // 0x0058(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BoxSize;                                           // 0x0060(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGarrisonBarConfig) == 0x000008, "Wrong alignment on FTedGarrisonBarConfig");
static_assert(sizeof(FTedGarrisonBarConfig) == 0x000070, "Wrong size on FTedGarrisonBarConfig");
static_assert(offsetof(FTedGarrisonBarConfig, Material) == 0x000000, "Member 'FTedGarrisonBarConfig::Material' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, MaxHealthRange) == 0x000008, "Member 'FTedGarrisonBarConfig::MaxHealthRange' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, LengthRange) == 0x000010, "Member 'FTedGarrisonBarConfig::LengthRange' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, Height) == 0x000018, "Member 'FTedGarrisonBarConfig::Height' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, SupportedClass) == 0x000020, "Member 'FTedGarrisonBarConfig::SupportedClass' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, BlackListedClasses) == 0x000048, "Member 'FTedGarrisonBarConfig::BlackListedClasses' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, BoxMaterial) == 0x000058, "Member 'FTedGarrisonBarConfig::BoxMaterial' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarConfig, BoxSize) == 0x000060, "Member 'FTedGarrisonBarConfig::BoxSize' has a wrong offset!");

// ScriptStruct Tempest.TedConfigFontOutlineSettings
// 0x0040 (0x0040 - 0x0000)
struct FTedConfigFontOutlineSettings final
{
public:
	int32                                         OutlineSize;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMiteredCorners;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSeparateFillAlpha;                                // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyOutlineToDropShadows;                        // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 OutlineMaterial;                                   // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutlineColor;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConfigFontOutlineSettings) == 0x000008, "Wrong alignment on FTedConfigFontOutlineSettings");
static_assert(sizeof(FTedConfigFontOutlineSettings) == 0x000040, "Wrong size on FTedConfigFontOutlineSettings");
static_assert(offsetof(FTedConfigFontOutlineSettings, OutlineSize) == 0x000000, "Member 'FTedConfigFontOutlineSettings::OutlineSize' has a wrong offset!");
static_assert(offsetof(FTedConfigFontOutlineSettings, bMiteredCorners) == 0x000004, "Member 'FTedConfigFontOutlineSettings::bMiteredCorners' has a wrong offset!");
static_assert(offsetof(FTedConfigFontOutlineSettings, bSeparateFillAlpha) == 0x000005, "Member 'FTedConfigFontOutlineSettings::bSeparateFillAlpha' has a wrong offset!");
static_assert(offsetof(FTedConfigFontOutlineSettings, bApplyOutlineToDropShadows) == 0x000006, "Member 'FTedConfigFontOutlineSettings::bApplyOutlineToDropShadows' has a wrong offset!");
static_assert(offsetof(FTedConfigFontOutlineSettings, OutlineMaterial) == 0x000008, "Member 'FTedConfigFontOutlineSettings::OutlineMaterial' has a wrong offset!");
static_assert(offsetof(FTedConfigFontOutlineSettings, OutlineColor) == 0x000030, "Member 'FTedConfigFontOutlineSettings::OutlineColor' has a wrong offset!");

// ScriptStruct Tempest.TedConfigSlateFontInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FTedConfigSlateFontInfo final
{
public:
	TSoftObjectPtr<class UObject>                 FontObject;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 FontMaterial;                                      // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedConfigFontOutlineSettings          OutlineSettings;                                   // 0x0050(0x0040)(Edit, NativeAccessSpecifierPublic)
	class FName                                   TypefaceFontName;                                  // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LetterSpacing;                                     // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkewAmount;                                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMonospaced;                                  // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MonospacedWidth;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedConfigSlateFontInfo) == 0x000008, "Wrong alignment on FTedConfigSlateFontInfo");
static_assert(sizeof(FTedConfigSlateFontInfo) == 0x0000B0, "Wrong size on FTedConfigSlateFontInfo");
static_assert(offsetof(FTedConfigSlateFontInfo, FontObject) == 0x000000, "Member 'FTedConfigSlateFontInfo::FontObject' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, FontMaterial) == 0x000028, "Member 'FTedConfigSlateFontInfo::FontMaterial' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, OutlineSettings) == 0x000050, "Member 'FTedConfigSlateFontInfo::OutlineSettings' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, TypefaceFontName) == 0x000090, "Member 'FTedConfigSlateFontInfo::TypefaceFontName' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, Size) == 0x000098, "Member 'FTedConfigSlateFontInfo::Size' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, LetterSpacing) == 0x00009C, "Member 'FTedConfigSlateFontInfo::LetterSpacing' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, SkewAmount) == 0x0000A0, "Member 'FTedConfigSlateFontInfo::SkewAmount' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, bForceMonospaced) == 0x0000A4, "Member 'FTedConfigSlateFontInfo::bForceMonospaced' has a wrong offset!");
static_assert(offsetof(FTedConfigSlateFontInfo, MonospacedWidth) == 0x0000A8, "Member 'FTedConfigSlateFontInfo::MonospacedWidth' has a wrong offset!");

// ScriptStruct Tempest.TedGarrisonBarPreviewEntry
// 0x0008 (0x0008 - 0x0000)
struct FTedGarrisonBarPreviewEntry final
{
public:
	uint8                                         Garrisoned;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxGarrison;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LengthPct;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGarrisonBarPreviewEntry) == 0x000004, "Wrong alignment on FTedGarrisonBarPreviewEntry");
static_assert(sizeof(FTedGarrisonBarPreviewEntry) == 0x000008, "Wrong size on FTedGarrisonBarPreviewEntry");
static_assert(offsetof(FTedGarrisonBarPreviewEntry, Garrisoned) == 0x000000, "Member 'FTedGarrisonBarPreviewEntry::Garrisoned' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarPreviewEntry, MaxGarrison) == 0x000001, "Member 'FTedGarrisonBarPreviewEntry::MaxGarrison' has a wrong offset!");
static_assert(offsetof(FTedGarrisonBarPreviewEntry, LengthPct) == 0x000004, "Member 'FTedGarrisonBarPreviewEntry::LengthPct' has a wrong offset!");

// ScriptStruct Tempest.AssetLoadTask
// 0x0028 (0x0028 - 0x0000)
struct FAssetLoadTask final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        LoadedObjects;                                     // 0x0010(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bScanForDependancies;                              // 0x0020(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAssetLoadTask) == 0x000008, "Wrong alignment on FAssetLoadTask");
static_assert(sizeof(FAssetLoadTask) == 0x000028, "Wrong size on FAssetLoadTask");
static_assert(offsetof(FAssetLoadTask, LoadedObjects) == 0x000010, "Member 'FAssetLoadTask::LoadedObjects' has a wrong offset!");
static_assert(offsetof(FAssetLoadTask, bScanForDependancies) == 0x000020, "Member 'FAssetLoadTask::bScanForDependancies' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_Float
// 0x0008 (0x0008 - 0x0000)
struct FTedGenericData_Float final : public FTedGenericData
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_Float) == 0x000004, "Wrong alignment on FTedGenericData_Float");
static_assert(sizeof(FTedGenericData_Float) == 0x000008, "Wrong size on FTedGenericData_Float");
static_assert(offsetof(FTedGenericData_Float, Value) == 0x000004, "Member 'FTedGenericData_Float::Value' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_Int32
// 0x0008 (0x0008 - 0x0000)
struct FTedGenericData_Int32 final : public FTedGenericData
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_Int32) == 0x000004, "Wrong alignment on FTedGenericData_Int32");
static_assert(sizeof(FTedGenericData_Int32) == 0x000008, "Wrong size on FTedGenericData_Int32");
static_assert(offsetof(FTedGenericData_Int32, Value) == 0x000004, "Member 'FTedGenericData_Int32::Value' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_Text
// 0x0010 (0x0010 - 0x0000)
struct FTedGenericData_Text final : public FTedGenericData
{
public:
	class FText                                   Value;                                             // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_Text) == 0x000008, "Wrong alignment on FTedGenericData_Text");
static_assert(sizeof(FTedGenericData_Text) == 0x000010, "Wrong size on FTedGenericData_Text");
static_assert(offsetof(FTedGenericData_Text, Value) == 0x000000, "Member 'FTedGenericData_Text::Value' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryPawnSettings
// 0x0002 (0x0002 - 0x0000)
struct FTedTelemetryPawnSettings final
{
public:
	bool                                          bTrackHealthStats;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackOwnershipStats;                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryPawnSettings) == 0x000001, "Wrong alignment on FTedTelemetryPawnSettings");
static_assert(sizeof(FTedTelemetryPawnSettings) == 0x000002, "Wrong size on FTedTelemetryPawnSettings");
static_assert(offsetof(FTedTelemetryPawnSettings, bTrackHealthStats) == 0x000000, "Member 'FTedTelemetryPawnSettings::bTrackHealthStats' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPawnSettings, bTrackOwnershipStats) == 0x000001, "Member 'FTedTelemetryPawnSettings::bTrackOwnershipStats' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataInitConfig
// 0x0058 (0x0058 - 0x0000)
struct FTedPlayerDataInitConfig final
{
public:
	int32                                         Credits;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CreditsCap;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Intel;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedPlayerLockedTechData               Tech;                                              // 0x0010(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockSupportPowersTags;                            // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataInitConfig) == 0x000008, "Wrong alignment on FTedPlayerDataInitConfig");
static_assert(sizeof(FTedPlayerDataInitConfig) == 0x000058, "Wrong size on FTedPlayerDataInitConfig");
static_assert(offsetof(FTedPlayerDataInitConfig, Credits) == 0x000000, "Member 'FTedPlayerDataInitConfig::Credits' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataInitConfig, CreditsCap) == 0x000004, "Member 'FTedPlayerDataInitConfig::CreditsCap' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataInitConfig, Intel) == 0x000008, "Member 'FTedPlayerDataInitConfig::Intel' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataInitConfig, Tech) == 0x000010, "Member 'FTedPlayerDataInitConfig::Tech' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataInitConfig, BlockSupportPowersTags) == 0x000038, "Member 'FTedPlayerDataInitConfig::BlockSupportPowersTags' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerSlot
// 0x0100 (0x0100 - 0x0000)
struct FTedPlayerSlot final
{
public:
	ETedPlayerID                                  PlayerID;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerControl                             Control;                                           // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class APlayerStart>            PlayerStart;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PlayerStartLocation;                               // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   PlayerFaction;                                     // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERTSColor                                     PlayerColor;                                       // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETedPawnType, struct FGameplayTagContainer> AdditionalPawnGameplayTags;                     // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTedPlayerDataInitConfig               PlayerData;                                        // 0x0098(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableAICommander;                                // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIDefinition_Strategy*                 StrategyDefinition;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerSlot) == 0x000008, "Wrong alignment on FTedPlayerSlot");
static_assert(sizeof(FTedPlayerSlot) == 0x000100, "Wrong size on FTedPlayerSlot");
static_assert(offsetof(FTedPlayerSlot, PlayerID) == 0x000000, "Member 'FTedPlayerSlot::PlayerID' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, Control) == 0x000001, "Member 'FTedPlayerSlot::Control' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, PlayerStart) == 0x000008, "Member 'FTedPlayerSlot::PlayerStart' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, PlayerStartLocation) == 0x000030, "Member 'FTedPlayerSlot::PlayerStartLocation' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, TeamID) == 0x000040, "Member 'FTedPlayerSlot::TeamID' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, PlayerFaction) == 0x000041, "Member 'FTedPlayerSlot::PlayerFaction' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, PlayerColor) == 0x000042, "Member 'FTedPlayerSlot::PlayerColor' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, AdditionalPawnGameplayTags) == 0x000048, "Member 'FTedPlayerSlot::AdditionalPawnGameplayTags' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, PlayerData) == 0x000098, "Member 'FTedPlayerSlot::PlayerData' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, bEnableAICommander) == 0x0000F0, "Member 'FTedPlayerSlot::bEnableAICommander' has a wrong offset!");
static_assert(offsetof(FTedPlayerSlot, StrategyDefinition) == 0x0000F8, "Member 'FTedPlayerSlot::StrategyDefinition' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_GameplayTag
// 0x0008 (0x0008 - 0x0000)
struct FTedGenericData_GameplayTag final : public FTedGenericData
{
public:
	struct FGameplayTag                           Value;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_GameplayTag) == 0x000004, "Wrong alignment on FTedGenericData_GameplayTag");
static_assert(sizeof(FTedGenericData_GameplayTag) == 0x000008, "Wrong size on FTedGenericData_GameplayTag");
static_assert(offsetof(FTedGenericData_GameplayTag, Value) == 0x000000, "Member 'FTedGenericData_GameplayTag::Value' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_Enum
// 0x0010 (0x0010 - 0x0000)
struct FTedGenericData_Enum final : public FTedGenericData
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnum*                                  EnumType;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_Enum) == 0x000008, "Wrong alignment on FTedGenericData_Enum");
static_assert(sizeof(FTedGenericData_Enum) == 0x000010, "Wrong size on FTedGenericData_Enum");
static_assert(offsetof(FTedGenericData_Enum, Value) == 0x000000, "Member 'FTedGenericData_Enum::Value' has a wrong offset!");
static_assert(offsetof(FTedGenericData_Enum, EnumType) == 0x000008, "Member 'FTedGenericData_Enum::EnumType' has a wrong offset!");

// ScriptStruct Tempest.TedGenericData_Object
// 0x0008 (0x0008 - 0x0000)
struct FTedGenericData_Object final : public FTedGenericData
{
public:
	class UObject*                                Value;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGenericData_Object) == 0x000008, "Wrong alignment on FTedGenericData_Object");
static_assert(sizeof(FTedGenericData_Object) == 0x000008, "Wrong size on FTedGenericData_Object");
static_assert(offsetof(FTedGenericData_Object, Value) == 0x000000, "Member 'FTedGenericData_Object::Value' has a wrong offset!");

// ScriptStruct Tempest.TedPawnFilter
// 0x01C0 (0x01C0 - 0x0000)
struct FTedPawnFilter final
{
public:
	ETedPawnFilterMode                            Filtering;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisableContainerCheck : 1;                        // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_ActorTags : 1;                           // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Tech : 1;                                // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Prerequisites : 1;                       // 0x0001(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Players : 1;                             // 0x0001(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_Classes : 1;                             // 0x0001(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tech;                                              // 0x0028(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FTedPrerequisiteContainer              Prerequisites;                                     // 0x0048(0x0110)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ETedPlayerID>                            Players;                                           // 0x0158(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bExactClass : 1;                                   // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnFilter) == 0x000008, "Wrong alignment on FTedPawnFilter");
static_assert(sizeof(FTedPawnFilter) == 0x0001C0, "Wrong size on FTedPawnFilter");
static_assert(offsetof(FTedPawnFilter, Filtering) == 0x000000, "Member 'FTedPawnFilter::Filtering' has a wrong offset!");
static_assert(offsetof(FTedPawnFilter, ActorTags) == 0x000008, "Member 'FTedPawnFilter::ActorTags' has a wrong offset!");
static_assert(offsetof(FTedPawnFilter, Tech) == 0x000028, "Member 'FTedPawnFilter::Tech' has a wrong offset!");
static_assert(offsetof(FTedPawnFilter, Prerequisites) == 0x000048, "Member 'FTedPawnFilter::Prerequisites' has a wrong offset!");
static_assert(offsetof(FTedPawnFilter, Players) == 0x000158, "Member 'FTedPawnFilter::Players' has a wrong offset!");
static_assert(offsetof(FTedPawnFilter, Classes) == 0x0001A8, "Member 'FTedPawnFilter::Classes' has a wrong offset!");

// ScriptStruct Tempest.TedGenericDataContainer
// 0x0050 (0x0050 - 0x0000)
struct FTedGenericDataContainer final
{
public:
	TMap<struct FGameplayTag, struct FInstancedStruct> Values;                                       // 0x0000(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedGenericDataContainer) == 0x000008, "Wrong alignment on FTedGenericDataContainer");
static_assert(sizeof(FTedGenericDataContainer) == 0x000050, "Wrong size on FTedGenericDataContainer");
static_assert(offsetof(FTedGenericDataContainer, Values) == 0x000000, "Member 'FTedGenericDataContainer::Values' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_PlaceStructure
// 0x0010 (0x0020 - 0x0010)
struct FGameplayCommandDataPayload_PlaceStructure final : public FGameplayCommandDataPayload_RotateStructure
{
public:
	TSubclassOf<class ATedStructureBase>          StructureClass;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      Factory;                                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_PlaceStructure) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_PlaceStructure");
static_assert(sizeof(FGameplayCommandDataPayload_PlaceStructure) == 0x000020, "Wrong size on FGameplayCommandDataPayload_PlaceStructure");
static_assert(offsetof(FGameplayCommandDataPayload_PlaceStructure, StructureClass) == 0x000010, "Member 'FGameplayCommandDataPayload_PlaceStructure::StructureClass' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_PlaceStructure, Factory) == 0x000018, "Member 'FGameplayCommandDataPayload_PlaceStructure::Factory' has a wrong offset!");

// ScriptStruct Tempest.TedGhostPawnEntry
// 0x000C (0x000C - 0x0000)
struct FTedGhostPawnEntry final
{
public:
	TWeakObjectPtr<class ATedGhostPawn>           GhostPawn;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         ChannelId;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedGhostPawnEntry) == 0x000004, "Wrong alignment on FTedGhostPawnEntry");
static_assert(sizeof(FTedGhostPawnEntry) == 0x00000C, "Wrong size on FTedGhostPawnEntry");
static_assert(offsetof(FTedGhostPawnEntry, GhostPawn) == 0x000000, "Member 'FTedGhostPawnEntry::GhostPawn' has a wrong offset!");
static_assert(offsetof(FTedGhostPawnEntry, ChannelId) == 0x000008, "Member 'FTedGhostPawnEntry::ChannelId' has a wrong offset!");

// ScriptStruct Tempest.BoxComponentDataSaveHelper
// 0x0090 (0x0090 - 0x0000)
struct FBoxComponentDataSaveHelper final
{
public:
	class USceneComponent*                        AttachParent;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCollision;                                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBoxComponentDataSaveHelper) == 0x000010, "Wrong alignment on FBoxComponentDataSaveHelper");
static_assert(sizeof(FBoxComponentDataSaveHelper) == 0x000090, "Wrong size on FBoxComponentDataSaveHelper");
static_assert(offsetof(FBoxComponentDataSaveHelper, AttachParent) == 0x000000, "Member 'FBoxComponentDataSaveHelper::AttachParent' has a wrong offset!");
static_assert(offsetof(FBoxComponentDataSaveHelper, RelativeTransform) == 0x000010, "Member 'FBoxComponentDataSaveHelper::RelativeTransform' has a wrong offset!");
static_assert(offsetof(FBoxComponentDataSaveHelper, BoxExtent) == 0x000070, "Member 'FBoxComponentDataSaveHelper::BoxExtent' has a wrong offset!");
static_assert(offsetof(FBoxComponentDataSaveHelper, bEnableCollision) == 0x000088, "Member 'FBoxComponentDataSaveHelper::bEnableCollision' has a wrong offset!");

// ScriptStruct Tempest.TedCachedConformationState
// 0x0010 (0x0010 - 0x0000)
struct FTedCachedConformationState final
{
public:
	struct FGameplayTag                           StateTag;                                          // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateValue;                                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateChangeInProgress;                            // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedCachedConformationState) == 0x000004, "Wrong alignment on FTedCachedConformationState");
static_assert(sizeof(FTedCachedConformationState) == 0x000010, "Wrong size on FTedCachedConformationState");
static_assert(offsetof(FTedCachedConformationState, StateTag) == 0x000000, "Member 'FTedCachedConformationState::StateTag' has a wrong offset!");
static_assert(offsetof(FTedCachedConformationState, StateValue) == 0x000008, "Member 'FTedCachedConformationState::StateValue' has a wrong offset!");
static_assert(offsetof(FTedCachedConformationState, bStateChangeInProgress) == 0x00000C, "Member 'FTedCachedConformationState::bStateChangeInProgress' has a wrong offset!");

// ScriptStruct Tempest.TedPreMatchSettings
// 0x0002 (0x0002 - 0x0000)
struct FTedPreMatchSettings final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                RankedTeam;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPreMatchSettings) == 0x000001, "Wrong alignment on FTedPreMatchSettings");
static_assert(sizeof(FTedPreMatchSettings) == 0x000002, "Wrong size on FTedPreMatchSettings");
static_assert(offsetof(FTedPreMatchSettings, ServerType) == 0x000000, "Member 'FTedPreMatchSettings::ServerType' has a wrong offset!");
static_assert(offsetof(FTedPreMatchSettings, RankedTeam) == 0x000001, "Member 'FTedPreMatchSettings::RankedTeam' has a wrong offset!");

// ScriptStruct Tempest.TedMatchLobbyData
// 0x0020 (0x0020 - 0x0000)
struct FTedMatchLobbyData final
{
public:
	uint16                                        StartingCredits;                                   // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedStartingArmySize                          StartingArmy;                                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MatchType;                                         // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPostDisconnectBehavior                    PostDisconnectBehavior;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedServerType                                ServerType;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                RankedTeam;                                        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMatchLobbyData) == 0x000008, "Wrong alignment on FTedMatchLobbyData");
static_assert(sizeof(FTedMatchLobbyData) == 0x000020, "Wrong size on FTedMatchLobbyData");
static_assert(offsetof(FTedMatchLobbyData, StartingCredits) == 0x000000, "Member 'FTedMatchLobbyData::StartingCredits' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, StartingArmy) == 0x000002, "Member 'FTedMatchLobbyData::StartingArmy' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, MatchType) == 0x000003, "Member 'FTedMatchLobbyData::MatchType' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, PostDisconnectBehavior) == 0x000004, "Member 'FTedMatchLobbyData::PostDisconnectBehavior' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, MapName) == 0x000008, "Member 'FTedMatchLobbyData::MapName' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, ServerType) == 0x000018, "Member 'FTedMatchLobbyData::ServerType' has a wrong offset!");
static_assert(offsetof(FTedMatchLobbyData, RankedTeam) == 0x000019, "Member 'FTedMatchLobbyData::RankedTeam' has a wrong offset!");

// ScriptStruct Tempest.TedMatchStats
// 0x0020 (0x0020 - 0x0000)
struct FTedMatchStats final
{
public:
	bool                                          bWon;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        UnitsProduced;                                     // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        UnitsDestroyed;                                    // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        UnitsLost;                                         // 0x0006(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BuildingsProduced;                                 // 0x0008(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BuildingsDestroyed;                                // 0x000A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BuildingsLost;                                     // 0x000C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ResourcesHarvested;                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ResourcesSpent;                                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageDealt;                                       // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageReceived;                                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMatchStats) == 0x000004, "Wrong alignment on FTedMatchStats");
static_assert(sizeof(FTedMatchStats) == 0x000020, "Wrong size on FTedMatchStats");
static_assert(offsetof(FTedMatchStats, bWon) == 0x000000, "Member 'FTedMatchStats::bWon' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, UnitsProduced) == 0x000002, "Member 'FTedMatchStats::UnitsProduced' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, UnitsDestroyed) == 0x000004, "Member 'FTedMatchStats::UnitsDestroyed' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, UnitsLost) == 0x000006, "Member 'FTedMatchStats::UnitsLost' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, BuildingsProduced) == 0x000008, "Member 'FTedMatchStats::BuildingsProduced' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, BuildingsDestroyed) == 0x00000A, "Member 'FTedMatchStats::BuildingsDestroyed' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, BuildingsLost) == 0x00000C, "Member 'FTedMatchStats::BuildingsLost' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, ResourcesHarvested) == 0x000010, "Member 'FTedMatchStats::ResourcesHarvested' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, ResourcesSpent) == 0x000014, "Member 'FTedMatchStats::ResourcesSpent' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, DamageDealt) == 0x000018, "Member 'FTedMatchStats::DamageDealt' has a wrong offset!");
static_assert(offsetof(FTedMatchStats, DamageReceived) == 0x00001C, "Member 'FTedMatchStats::DamageReceived' has a wrong offset!");

// ScriptStruct Tempest.TedMatchData
// 0x00B0 (0x00B0 - 0x0000)
struct FTedMatchData final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPreMatchSettings                   PreMatchConfig;                                    // 0x0010(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              MatchDuration;                                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         UnixTimestamp;                                     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Season;                                            // 0x0028(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedMatchLobbyData                     LobbyData;                                         // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FTedMatchPlayerConfig>          Players;                                           // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<ETedPlayerID, struct FTedMatchStats>     MatchStats;                                        // 0x0060(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMatchData) == 0x000008, "Wrong alignment on FTedMatchData");
static_assert(sizeof(FTedMatchData) == 0x0000B0, "Wrong size on FTedMatchData");
static_assert(offsetof(FTedMatchData, MatchID) == 0x000000, "Member 'FTedMatchData::MatchID' has a wrong offset!");
static_assert(offsetof(FTedMatchData, PreMatchConfig) == 0x000010, "Member 'FTedMatchData::PreMatchConfig' has a wrong offset!");
static_assert(offsetof(FTedMatchData, MatchDuration) == 0x000018, "Member 'FTedMatchData::MatchDuration' has a wrong offset!");
static_assert(offsetof(FTedMatchData, UnixTimestamp) == 0x000020, "Member 'FTedMatchData::UnixTimestamp' has a wrong offset!");
static_assert(offsetof(FTedMatchData, Season) == 0x000028, "Member 'FTedMatchData::Season' has a wrong offset!");
static_assert(offsetof(FTedMatchData, LobbyData) == 0x000030, "Member 'FTedMatchData::LobbyData' has a wrong offset!");
static_assert(offsetof(FTedMatchData, Players) == 0x000050, "Member 'FTedMatchData::Players' has a wrong offset!");
static_assert(offsetof(FTedMatchData, MatchStats) == 0x000060, "Member 'FTedMatchData::MatchStats' has a wrong offset!");

// ScriptStruct Tempest.TedStatistics
// 0x0090 (0x0090 - 0x0000)
struct FTedStatistics final
{
public:
	struct FTedOnlinePlayerData                   Player;                                            // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	TArray<struct FTedMatchData>                  MatchHistory;                                      // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FTedRankedMatchSettings, struct FTedLeaderboardData> RankingHistory;                 // 0x0040(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStatistics) == 0x000008, "Wrong alignment on FTedStatistics");
static_assert(sizeof(FTedStatistics) == 0x000090, "Wrong size on FTedStatistics");
static_assert(offsetof(FTedStatistics, Player) == 0x000000, "Member 'FTedStatistics::Player' has a wrong offset!");
static_assert(offsetof(FTedStatistics, MatchHistory) == 0x000030, "Member 'FTedStatistics::MatchHistory' has a wrong offset!");
static_assert(offsetof(FTedStatistics, RankingHistory) == 0x000040, "Member 'FTedStatistics::RankingHistory' has a wrong offset!");

// ScriptStruct Tempest.RepMoveSnapshotBatch
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRepMoveSnapshotBatch final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepMoveSnapshotBatch) == 0x000008, "Wrong alignment on FRepMoveSnapshotBatch");
static_assert(sizeof(FRepMoveSnapshotBatch) == 0x000028, "Wrong size on FRepMoveSnapshotBatch");

// ScriptStruct Tempest.HarvesterData
// 0x0010 (0x0010 - 0x0000)
struct FHarvesterData
{
public:
	int32                                         ResourceHarvestSpeed;                              // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceDepositSpeed;                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResourceMaxCapacity;                               // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddResourceFrequency;                              // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHarvesterData) == 0x000004, "Wrong alignment on FHarvesterData");
static_assert(sizeof(FHarvesterData) == 0x000010, "Wrong size on FHarvesterData");
static_assert(offsetof(FHarvesterData, ResourceHarvestSpeed) == 0x000000, "Member 'FHarvesterData::ResourceHarvestSpeed' has a wrong offset!");
static_assert(offsetof(FHarvesterData, ResourceDepositSpeed) == 0x000004, "Member 'FHarvesterData::ResourceDepositSpeed' has a wrong offset!");
static_assert(offsetof(FHarvesterData, ResourceMaxCapacity) == 0x000008, "Member 'FHarvesterData::ResourceMaxCapacity' has a wrong offset!");
static_assert(offsetof(FHarvesterData, AddResourceFrequency) == 0x00000C, "Member 'FHarvesterData::AddResourceFrequency' has a wrong offset!");

// ScriptStruct Tempest.TedHealthBarConfig
// 0x0088 (0x0088 - 0x0000)
struct FTedHealthBarConfig final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         MaxHealthRange;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         LengthRange;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RulerSpacing;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SupportedClass;                                    // 0x0020(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           BlackListedClasses;                                // 0x0048(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         bAllowIrregularSegments : 1;                       // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   BlackListedClass;                                  // 0x0060(0x0028)(Deprecated, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedHealthBarConfig) == 0x000008, "Wrong alignment on FTedHealthBarConfig");
static_assert(sizeof(FTedHealthBarConfig) == 0x000088, "Wrong size on FTedHealthBarConfig");
static_assert(offsetof(FTedHealthBarConfig, Material) == 0x000000, "Member 'FTedHealthBarConfig::Material' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, MaxHealthRange) == 0x000008, "Member 'FTedHealthBarConfig::MaxHealthRange' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, LengthRange) == 0x000010, "Member 'FTedHealthBarConfig::LengthRange' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, Height) == 0x000018, "Member 'FTedHealthBarConfig::Height' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, RulerSpacing) == 0x00001C, "Member 'FTedHealthBarConfig::RulerSpacing' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, SupportedClass) == 0x000020, "Member 'FTedHealthBarConfig::SupportedClass' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, BlackListedClasses) == 0x000048, "Member 'FTedHealthBarConfig::BlackListedClasses' has a wrong offset!");
static_assert(offsetof(FTedHealthBarConfig, BlackListedClass) == 0x000060, "Member 'FTedHealthBarConfig::BlackListedClass' has a wrong offset!");

// ScriptStruct Tempest.TedHealthBarPreviewEntry
// 0x0008 (0x0008 - 0x0000)
struct FTedHealthBarPreviewEntry final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthPct;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedHealthBarPreviewEntry) == 0x000004, "Wrong alignment on FTedHealthBarPreviewEntry");
static_assert(sizeof(FTedHealthBarPreviewEntry) == 0x000008, "Wrong size on FTedHealthBarPreviewEntry");
static_assert(offsetof(FTedHealthBarPreviewEntry, Percentage) == 0x000000, "Member 'FTedHealthBarPreviewEntry::Percentage' has a wrong offset!");
static_assert(offsetof(FTedHealthBarPreviewEntry, LengthPct) == 0x000004, "Member 'FTedHealthBarPreviewEntry::LengthPct' has a wrong offset!");

// ScriptStruct Tempest.HintData
// 0x0048 (0x0048 - 0x0000)
struct FHintData final
{
public:
	class UTedHintsAsset*                         HintAsset;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedWorldHintActor*>             CachedHintActors;                                  // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         CachedMarkedActors;                                // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHintData) == 0x000008, "Wrong alignment on FHintData");
static_assert(sizeof(FHintData) == 0x000048, "Wrong size on FHintData");
static_assert(offsetof(FHintData, HintAsset) == 0x000000, "Member 'FHintData::HintAsset' has a wrong offset!");
static_assert(offsetof(FHintData, CachedHintActors) == 0x000008, "Member 'FHintData::CachedHintActors' has a wrong offset!");
static_assert(offsetof(FHintData, CachedMarkedActors) == 0x000018, "Member 'FHintData::CachedMarkedActors' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataAnnouncementConfig
// 0x0058 (0x0058 - 0x0000)
struct FTedPlayerDataAnnouncementConfig final
{
public:
	ETedPlayerDataAnnouncement                    Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Structure;                                         // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   UnitOverride;                                      // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataAnnouncementConfig) == 0x000008, "Wrong alignment on FTedPlayerDataAnnouncementConfig");
static_assert(sizeof(FTedPlayerDataAnnouncementConfig) == 0x000058, "Wrong size on FTedPlayerDataAnnouncementConfig");
static_assert(offsetof(FTedPlayerDataAnnouncementConfig, Type) == 0x000000, "Member 'FTedPlayerDataAnnouncementConfig::Type' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataAnnouncementConfig, Structure) == 0x000008, "Member 'FTedPlayerDataAnnouncementConfig::Structure' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataAnnouncementConfig, UnitOverride) == 0x000030, "Member 'FTedPlayerDataAnnouncementConfig::UnitOverride' has a wrong offset!");

// ScriptStruct Tempest.TedHotspot
// 0x0030 (0x0030 - 0x0000)
struct FTedHotspot final
{
public:
	struct FTedHotspotHandle                      Handle;                                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedHotspotConfig*                      Config;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedHotspot) == 0x000008, "Wrong alignment on FTedHotspot");
static_assert(sizeof(FTedHotspot) == 0x000030, "Wrong size on FTedHotspot");
static_assert(offsetof(FTedHotspot, Handle) == 0x000000, "Member 'FTedHotspot::Handle' has a wrong offset!");
static_assert(offsetof(FTedHotspot, Config) == 0x000008, "Member 'FTedHotspot::Config' has a wrong offset!");
static_assert(offsetof(FTedHotspot, TargetLocation) == 0x000010, "Member 'FTedHotspot::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTedHotspot, Target) == 0x000028, "Member 'FTedHotspot::Target' has a wrong offset!");

// ScriptStruct Tempest.TedBaseBarConfig
// 0x0088 (0x0088 - 0x0000)
struct FTedBaseBarConfig final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ResolutionCurve;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverlay;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YOffset;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WrapperPadding;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseColorLookupTexture;                            // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDisplayHeightParam;                            // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDisplayPaddingParam;                           // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayRulers;                                    // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RulerSpacing;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRulerSpacing;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETedPawnType>                          SupportedPawns;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bAllowIrregularSegments : 1;                       // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedHUDInstancedValueProcessor*         ValueProcessor;                                    // 0x0058(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           SupportedClasses;                                  // 0x0060(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           BlackListedClasses;                                // 0x0070(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0080(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBaseBarConfig) == 0x000008, "Wrong alignment on FTedBaseBarConfig");
static_assert(sizeof(FTedBaseBarConfig) == 0x000088, "Wrong size on FTedBaseBarConfig");
static_assert(offsetof(FTedBaseBarConfig, Material) == 0x000000, "Member 'FTedBaseBarConfig::Material' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, ResolutionCurve) == 0x000008, "Member 'FTedBaseBarConfig::ResolutionCurve' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, bIsOverlay) == 0x000010, "Member 'FTedBaseBarConfig::bIsOverlay' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, YOffset) == 0x000014, "Member 'FTedBaseBarConfig::YOffset' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, WrapperPadding) == 0x000018, "Member 'FTedBaseBarConfig::WrapperPadding' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, Height) == 0x000028, "Member 'FTedBaseBarConfig::Height' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, Width) == 0x00002C, "Member 'FTedBaseBarConfig::Width' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, bUseColorLookupTexture) == 0x000030, "Member 'FTedBaseBarConfig::bUseColorLookupTexture' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, bUseDisplayHeightParam) == 0x000031, "Member 'FTedBaseBarConfig::bUseDisplayHeightParam' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, bUseDisplayPaddingParam) == 0x000032, "Member 'FTedBaseBarConfig::bUseDisplayPaddingParam' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, bDisplayRulers) == 0x000033, "Member 'FTedBaseBarConfig::bDisplayRulers' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, RulerSpacing) == 0x000034, "Member 'FTedBaseBarConfig::RulerSpacing' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, MinRulerSpacing) == 0x000038, "Member 'FTedBaseBarConfig::MinRulerSpacing' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, SupportedPawns) == 0x000040, "Member 'FTedBaseBarConfig::SupportedPawns' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, ValueProcessor) == 0x000058, "Member 'FTedBaseBarConfig::ValueProcessor' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, SupportedClasses) == 0x000060, "Member 'FTedBaseBarConfig::SupportedClasses' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, BlackListedClasses) == 0x000070, "Member 'FTedBaseBarConfig::BlackListedClasses' has a wrong offset!");
static_assert(offsetof(FTedBaseBarConfig, Mid) == 0x000080, "Member 'FTedBaseBarConfig::Mid' has a wrong offset!");

// ScriptStruct Tempest.GCueTranslation
// 0x0010 (0x0010 - 0x0000)
struct FGCueTranslation final
{
public:
	struct FGameplayTag                           EntityTag;                                         // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GCueTranslation;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGCueTranslation) == 0x000004, "Wrong alignment on FGCueTranslation");
static_assert(sizeof(FGCueTranslation) == 0x000010, "Wrong size on FGCueTranslation");
static_assert(offsetof(FGCueTranslation, EntityTag) == 0x000000, "Member 'FGCueTranslation::EntityTag' has a wrong offset!");
static_assert(offsetof(FGCueTranslation, GCueTranslation) == 0x000008, "Member 'FGCueTranslation::GCueTranslation' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatChart
// 0x0008 (0x0020 - 0x0018)
struct FTedPlayerDataStatChart final : public FTedChartEntries
{
public:
	ETedPlayerDataStat                            Stat;                                              // 0x0018(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPlayerDataStatChart) == 0x000008, "Wrong alignment on FTedPlayerDataStatChart");
static_assert(sizeof(FTedPlayerDataStatChart) == 0x000020, "Wrong size on FTedPlayerDataStatChart");
static_assert(offsetof(FTedPlayerDataStatChart, Stat) == 0x000018, "Member 'FTedPlayerDataStatChart::Stat' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatEntry
// 0x0008 (0x0008 - 0x0000)
struct FTedPlayerDataStatEntry final
{
public:
	ETedPlayerDataStat                            Key;                                               // 0x0000(0x0001)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0004(0x0004)(ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataStatEntry) == 0x000004, "Wrong alignment on FTedPlayerDataStatEntry");
static_assert(sizeof(FTedPlayerDataStatEntry) == 0x000008, "Wrong size on FTedPlayerDataStatEntry");
static_assert(offsetof(FTedPlayerDataStatEntry, Key) == 0x000000, "Member 'FTedPlayerDataStatEntry::Key' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataStatEntry, Value) == 0x000004, "Member 'FTedPlayerDataStatEntry::Value' has a wrong offset!");

// ScriptStruct Tempest.TedBarOverrideEntry
// 0x0000 (0x0000 - 0x0000)
#pragma pack(push, 0x1)
struct alignas(0x01) FTedBarOverrideEntry
{
};
#pragma pack(pop)
static_assert(alignof(FTedBarOverrideEntry) == 0x000001, "Wrong alignment on FTedBarOverrideEntry");
static_assert(sizeof(FTedBarOverrideEntry) == 0x000001, "Wrong size on FTedBarOverrideEntry");

// ScriptStruct Tempest.PawnSoundHandle
// 0x0020 (0x0020 - 0x0000)
struct FPawnSoundHandle final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedPawnSound*                          SoundCDO;                                          // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartPlayingTime;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound;                                             // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FPawnSoundHandle) == 0x000008, "Wrong alignment on FPawnSoundHandle");
static_assert(sizeof(FPawnSoundHandle) == 0x000020, "Wrong size on FPawnSoundHandle");
static_assert(offsetof(FPawnSoundHandle, Pawn) == 0x000000, "Member 'FPawnSoundHandle::Pawn' has a wrong offset!");
static_assert(offsetof(FPawnSoundHandle, SoundCDO) == 0x000008, "Member 'FPawnSoundHandle::SoundCDO' has a wrong offset!");
static_assert(offsetof(FPawnSoundHandle, StartPlayingTime) == 0x000010, "Member 'FPawnSoundHandle::StartPlayingTime' has a wrong offset!");
static_assert(offsetof(FPawnSoundHandle, Sound) == 0x000018, "Member 'FPawnSoundHandle::Sound' has a wrong offset!");

// ScriptStruct Tempest.TedBarOverrideEntry_HP
// 0x0004 (0x0004 - 0x0000)
struct FTedBarOverrideEntry_HP final : public FTedBarOverrideEntry
{
public:
	float                                         RulerSpacing;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedBarOverrideEntry_HP) == 0x000004, "Wrong alignment on FTedBarOverrideEntry_HP");
static_assert(sizeof(FTedBarOverrideEntry_HP) == 0x000004, "Wrong size on FTedBarOverrideEntry_HP");
static_assert(offsetof(FTedBarOverrideEntry_HP, RulerSpacing) == 0x000000, "Member 'FTedBarOverrideEntry_HP::RulerSpacing' has a wrong offset!");

// ScriptStruct Tempest.TedPawnMirrorStat
// 0x000C (0x000C - 0x0000)
struct FTedPawnMirrorStat final
{
public:
	struct FGameplayTag                           ToTag;                                             // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_ToStat : 1;                              // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETedPlayerDataStat                            ToStat;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnMirrorStat) == 0x000004, "Wrong alignment on FTedPawnMirrorStat");
static_assert(sizeof(FTedPawnMirrorStat) == 0x00000C, "Wrong size on FTedPawnMirrorStat");
static_assert(offsetof(FTedPawnMirrorStat, ToTag) == 0x000000, "Member 'FTedPawnMirrorStat::ToTag' has a wrong offset!");
static_assert(offsetof(FTedPawnMirrorStat, ToStat) == 0x000009, "Member 'FTedPawnMirrorStat::ToStat' has a wrong offset!");

// ScriptStruct Tempest.TedHitBox
// 0x0028 (0x0028 - 0x0000)
struct FTedHitBox final
{
public:
	struct FVector2D                              min_0;                                             // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              max_0;                                             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Width;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedHitBox) == 0x000008, "Wrong alignment on FTedHitBox");
static_assert(sizeof(FTedHitBox) == 0x000028, "Wrong size on FTedHitBox");
static_assert(offsetof(FTedHitBox, min_0) == 0x000000, "Member 'FTedHitBox::min_0' has a wrong offset!");
static_assert(offsetof(FTedHitBox, max_0) == 0x000010, "Member 'FTedHitBox::max_0' has a wrong offset!");
static_assert(offsetof(FTedHitBox, Width) == 0x000020, "Member 'FTedHitBox::Width' has a wrong offset!");

// ScriptStruct Tempest.StandaloneWidgetConfig
// 0x00A8 (0x00A8 - 0x0000)
struct FStandaloneWidgetConfig final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Visibility;                                        // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoredHidingContext;                              // 0x0030(0x0020)(Edit, NativeAccessSpecifierPublic)
	TSet<ETedBranch>                              IgnoreOnGameBranches;                              // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIgnoreInSkirmish;                                 // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStandaloneWidgetConfig) == 0x000008, "Wrong alignment on FStandaloneWidgetConfig");
static_assert(sizeof(FStandaloneWidgetConfig) == 0x0000A8, "Wrong size on FStandaloneWidgetConfig");
static_assert(offsetof(FStandaloneWidgetConfig, Class) == 0x000000, "Member 'FStandaloneWidgetConfig::Class' has a wrong offset!");
static_assert(offsetof(FStandaloneWidgetConfig, ZOrder) == 0x000028, "Member 'FStandaloneWidgetConfig::ZOrder' has a wrong offset!");
static_assert(offsetof(FStandaloneWidgetConfig, Visibility) == 0x00002C, "Member 'FStandaloneWidgetConfig::Visibility' has a wrong offset!");
static_assert(offsetof(FStandaloneWidgetConfig, IgnoredHidingContext) == 0x000030, "Member 'FStandaloneWidgetConfig::IgnoredHidingContext' has a wrong offset!");
static_assert(offsetof(FStandaloneWidgetConfig, IgnoreOnGameBranches) == 0x000050, "Member 'FStandaloneWidgetConfig::IgnoreOnGameBranches' has a wrong offset!");
static_assert(offsetof(FStandaloneWidgetConfig, bIgnoreInSkirmish) == 0x0000A0, "Member 'FStandaloneWidgetConfig::bIgnoreInSkirmish' has a wrong offset!");

// ScriptStruct Tempest.MenuScreenConfig
// 0x0030 (0x0030 - 0x0000)
struct FMenuScreenConfig final
{
public:
	TSoftClassPtr<class UClass>                   Class;                                             // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDisabled : 1;                                     // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuScreenConfig) == 0x000008, "Wrong alignment on FMenuScreenConfig");
static_assert(sizeof(FMenuScreenConfig) == 0x000030, "Wrong size on FMenuScreenConfig");
static_assert(offsetof(FMenuScreenConfig, Class) == 0x000000, "Member 'FMenuScreenConfig::Class' has a wrong offset!");
static_assert(offsetof(FMenuScreenConfig, ZOrder) == 0x000028, "Member 'FMenuScreenConfig::ZOrder' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerCloseWindowBiEvent
// 0x0010 (0x0010 - 0x0000)
struct FClientBannerCloseWindowBiEvent final
{
public:
	struct FCampaign                              Campaign;                                          // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerCloseWindowBiEvent) == 0x000008, "Wrong alignment on FClientBannerCloseWindowBiEvent");
static_assert(sizeof(FClientBannerCloseWindowBiEvent) == 0x000010, "Wrong size on FClientBannerCloseWindowBiEvent");
static_assert(offsetof(FClientBannerCloseWindowBiEvent, Campaign) == 0x000000, "Member 'FClientBannerCloseWindowBiEvent::Campaign' has a wrong offset!");

// ScriptStruct Tempest.MinimapMarkerData
// 0x00E0 (0x00E0 - 0x0000)
struct FMinimapMarkerData final
{
public:
	struct FSlateBrush                            MarkerBrush;                                       // 0x0000(0x00D0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bRenderOverFoW;                                    // 0x00D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00D4(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMinimapMarkerData) == 0x000010, "Wrong alignment on FMinimapMarkerData");
static_assert(sizeof(FMinimapMarkerData) == 0x0000E0, "Wrong size on FMinimapMarkerData");
static_assert(offsetof(FMinimapMarkerData, MarkerBrush) == 0x000000, "Member 'FMinimapMarkerData::MarkerBrush' has a wrong offset!");
static_assert(offsetof(FMinimapMarkerData, bRenderOverFoW) == 0x0000D0, "Member 'FMinimapMarkerData::bRenderOverFoW' has a wrong offset!");
static_assert(offsetof(FMinimapMarkerData, Duration) == 0x0000D4, "Member 'FMinimapMarkerData::Duration' has a wrong offset!");

// ScriptStruct Tempest.TedSkippableSequence
// 0x0028 (0x0028 - 0x0000)
struct FTedSkippableSequence final
{
public:
	struct FGameplayTag                           Sequence;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedSkippableSequence) == 0x000008, "Wrong alignment on FTedSkippableSequence");
static_assert(sizeof(FTedSkippableSequence) == 0x000028, "Wrong size on FTedSkippableSequence");
static_assert(offsetof(FTedSkippableSequence, Sequence) == 0x000000, "Member 'FTedSkippableSequence::Sequence' has a wrong offset!");
static_assert(offsetof(FTedSkippableSequence, Text) == 0x000008, "Member 'FTedSkippableSequence::Text' has a wrong offset!");

// ScriptStruct Tempest.TedInputMappingContent
// 0x0080 (0x0080 - 0x0000)
struct FTedInputMappingContent final
{
public:
	struct FPlayerKeyMapping                      ActionKeyMapping;                                  // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedInputMappingContent) == 0x000008, "Wrong alignment on FTedInputMappingContent");
static_assert(sizeof(FTedInputMappingContent) == 0x000080, "Wrong size on FTedInputMappingContent");
static_assert(offsetof(FTedInputMappingContent, ActionKeyMapping) == 0x000000, "Member 'FTedInputMappingContent::ActionKeyMapping' has a wrong offset!");

// ScriptStruct Tempest.TedPingTimestamp
// 0x0020 (0x0020 - 0x0000)
struct FTedPingTimestamp final
{
public:
	int32                                         PlacedInDuration;                                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IsOnCooldown : 1;                                  // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerController*                   OwningPlayer;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<double>                                Timestamps;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPingTimestamp) == 0x000008, "Wrong alignment on FTedPingTimestamp");
static_assert(sizeof(FTedPingTimestamp) == 0x000020, "Wrong size on FTedPingTimestamp");
static_assert(offsetof(FTedPingTimestamp, PlacedInDuration) == 0x000000, "Member 'FTedPingTimestamp::PlacedInDuration' has a wrong offset!");
static_assert(offsetof(FTedPingTimestamp, OwningPlayer) == 0x000008, "Member 'FTedPingTimestamp::OwningPlayer' has a wrong offset!");
static_assert(offsetof(FTedPingTimestamp, Timestamps) == 0x000010, "Member 'FTedPingTimestamp::Timestamps' has a wrong offset!");

// ScriptStruct Tempest.TedPresetEntry
// 0x0028 (0x0028 - 0x0000)
struct FTedPresetEntry final
{
public:
	class UInputAction*                           InputAction;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MappableName;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPresetEntry) == 0x000008, "Wrong alignment on FTedPresetEntry");
static_assert(sizeof(FTedPresetEntry) == 0x000028, "Wrong size on FTedPresetEntry");
static_assert(offsetof(FTedPresetEntry, InputAction) == 0x000000, "Member 'FTedPresetEntry::InputAction' has a wrong offset!");
static_assert(offsetof(FTedPresetEntry, MappableName) == 0x000008, "Member 'FTedPresetEntry::MappableName' has a wrong offset!");
static_assert(offsetof(FTedPresetEntry, Key) == 0x000010, "Member 'FTedPresetEntry::Key' has a wrong offset!");

// ScriptStruct Tempest.TedInputSectionData
// 0x0028 (0x0028 - 0x0000)
struct FTedInputSectionData final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedInputSectionData) == 0x000008, "Wrong alignment on FTedInputSectionData");
static_assert(sizeof(FTedInputSectionData) == 0x000028, "Wrong size on FTedInputSectionData");
static_assert(offsetof(FTedInputSectionData, SectionName) == 0x000000, "Member 'FTedInputSectionData::SectionName' has a wrong offset!");
static_assert(offsetof(FTedInputSectionData, DisplayName) == 0x000008, "Member 'FTedInputSectionData::DisplayName' has a wrong offset!");
static_assert(offsetof(FTedInputSectionData, Description) == 0x000018, "Member 'FTedInputSectionData::Description' has a wrong offset!");

// ScriptStruct Tempest.TedInputUIData
// 0x0040 (0x0040 - 0x0000)
struct FTedInputUIData final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputName;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              InputNameRange;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedInputDataType                             Type;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0020(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedInputUIData) == 0x000008, "Wrong alignment on FTedInputUIData");
static_assert(sizeof(FTedInputUIData) == 0x000040, "Wrong size on FTedInputUIData");
static_assert(offsetof(FTedInputUIData, SectionName) == 0x000000, "Member 'FTedInputUIData::SectionName' has a wrong offset!");
static_assert(offsetof(FTedInputUIData, InputName) == 0x000008, "Member 'FTedInputUIData::InputName' has a wrong offset!");
static_assert(offsetof(FTedInputUIData, InputNameRange) == 0x000010, "Member 'FTedInputUIData::InputNameRange' has a wrong offset!");
static_assert(offsetof(FTedInputUIData, Type) == 0x000018, "Member 'FTedInputUIData::Type' has a wrong offset!");
static_assert(offsetof(FTedInputUIData, DisplayName) == 0x000020, "Member 'FTedInputUIData::DisplayName' has a wrong offset!");
static_assert(offsetof(FTedInputUIData, Description) == 0x000030, "Member 'FTedInputUIData::Description' has a wrong offset!");

// ScriptStruct Tempest.TedKeyDisplayNameOverrides
// 0x0038 (0x0038 - 0x0000)
struct FTedKeyDisplayNameOverrides final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Long;                                              // 0x0018(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Short;                                             // 0x0028(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedKeyDisplayNameOverrides) == 0x000008, "Wrong alignment on FTedKeyDisplayNameOverrides");
static_assert(sizeof(FTedKeyDisplayNameOverrides) == 0x000038, "Wrong size on FTedKeyDisplayNameOverrides");
static_assert(offsetof(FTedKeyDisplayNameOverrides, Key) == 0x000000, "Member 'FTedKeyDisplayNameOverrides::Key' has a wrong offset!");
static_assert(offsetof(FTedKeyDisplayNameOverrides, Long) == 0x000018, "Member 'FTedKeyDisplayNameOverrides::Long' has a wrong offset!");
static_assert(offsetof(FTedKeyDisplayNameOverrides, Short) == 0x000028, "Member 'FTedKeyDisplayNameOverrides::Short' has a wrong offset!");

// ScriptStruct Tempest.TedSpecialistLimitSettings
// 0x000C (0x000C - 0x0000)
struct FTedSpecialistLimitSettings final
{
public:
	int32                                         SpecialistLimit;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommandoLimit;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSameClassSpecialists;                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMoreThanOneInQueue;                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedSpecialistLimitSettings) == 0x000004, "Wrong alignment on FTedSpecialistLimitSettings");
static_assert(sizeof(FTedSpecialistLimitSettings) == 0x00000C, "Wrong size on FTedSpecialistLimitSettings");
static_assert(offsetof(FTedSpecialistLimitSettings, SpecialistLimit) == 0x000000, "Member 'FTedSpecialistLimitSettings::SpecialistLimit' has a wrong offset!");
static_assert(offsetof(FTedSpecialistLimitSettings, CommandoLimit) == 0x000004, "Member 'FTedSpecialistLimitSettings::CommandoLimit' has a wrong offset!");
static_assert(offsetof(FTedSpecialistLimitSettings, bAllowSameClassSpecialists) == 0x000008, "Member 'FTedSpecialistLimitSettings::bAllowSameClassSpecialists' has a wrong offset!");
static_assert(offsetof(FTedSpecialistLimitSettings, bAllowMoreThanOneInQueue) == 0x000009, "Member 'FTedSpecialistLimitSettings::bAllowMoreThanOneInQueue' has a wrong offset!");

// ScriptStruct Tempest.TedInputDisplay
// 0x0070 (0x0070 - 0x0000)
struct FTedInputDisplay final
{
public:
	TArray<struct FKey>                           Keys;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   DisplayCategory;                                   // 0x0010(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ActionName;                                        // 0x0020(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   ActionDescription;                                 // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UInputAction>            InputAction;                                       // 0x0040(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputActionMappableName;                           // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedInputDisplay) == 0x000008, "Wrong alignment on FTedInputDisplay");
static_assert(sizeof(FTedInputDisplay) == 0x000070, "Wrong size on FTedInputDisplay");
static_assert(offsetof(FTedInputDisplay, Keys) == 0x000000, "Member 'FTedInputDisplay::Keys' has a wrong offset!");
static_assert(offsetof(FTedInputDisplay, DisplayCategory) == 0x000010, "Member 'FTedInputDisplay::DisplayCategory' has a wrong offset!");
static_assert(offsetof(FTedInputDisplay, ActionName) == 0x000020, "Member 'FTedInputDisplay::ActionName' has a wrong offset!");
static_assert(offsetof(FTedInputDisplay, ActionDescription) == 0x000030, "Member 'FTedInputDisplay::ActionDescription' has a wrong offset!");
static_assert(offsetof(FTedInputDisplay, InputAction) == 0x000040, "Member 'FTedInputDisplay::InputAction' has a wrong offset!");
static_assert(offsetof(FTedInputDisplay, InputActionMappableName) == 0x000068, "Member 'FTedInputDisplay::InputActionMappableName' has a wrong offset!");

// ScriptStruct Tempest.TedBaseLatentActionWrapper
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FTedBaseLatentActionWrapper
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EObjectiveConditionState                      MetResult;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x2F];                                       // 0x0009(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBaseLatentActionWrapper) == 0x000008, "Wrong alignment on FTedBaseLatentActionWrapper");
static_assert(sizeof(FTedBaseLatentActionWrapper) == 0x000038, "Wrong size on FTedBaseLatentActionWrapper");
static_assert(offsetof(FTedBaseLatentActionWrapper, MetResult) == 0x000008, "Member 'FTedBaseLatentActionWrapper::MetResult' has a wrong offset!");

// ScriptStruct Tempest.TedBaseLatentActionWrapper_KillPawns
// 0x0008 (0x0040 - 0x0038)
struct FTedBaseLatentActionWrapper_KillPawns final : public FTedBaseLatentActionWrapper
{
public:
	uint8                                         ExpectedAmount;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   ComparisonMethod;                                  // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBaseLatentActionWrapper_KillPawns) == 0x000008, "Wrong alignment on FTedBaseLatentActionWrapper_KillPawns");
static_assert(sizeof(FTedBaseLatentActionWrapper_KillPawns) == 0x000040, "Wrong size on FTedBaseLatentActionWrapper_KillPawns");
static_assert(offsetof(FTedBaseLatentActionWrapper_KillPawns, ExpectedAmount) == 0x000038, "Member 'FTedBaseLatentActionWrapper_KillPawns::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(FTedBaseLatentActionWrapper_KillPawns, ComparisonMethod) == 0x000039, "Member 'FTedBaseLatentActionWrapper_KillPawns::ComparisonMethod' has a wrong offset!");

// ScriptStruct Tempest.TedLatentAction_ActorTagCounter_KillActors_Wrapper
// 0x0008 (0x0040 - 0x0038)
struct FTedLatentAction_ActorTagCounter_KillActors_Wrapper final : public FTedBaseLatentActionWrapper
{
public:
	uint8                                         ExpectedAmount;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedLatentAction_ActorTagCounter_KillActors_Wrapper) == 0x000008, "Wrong alignment on FTedLatentAction_ActorTagCounter_KillActors_Wrapper");
static_assert(sizeof(FTedLatentAction_ActorTagCounter_KillActors_Wrapper) == 0x000040, "Wrong size on FTedLatentAction_ActorTagCounter_KillActors_Wrapper");
static_assert(offsetof(FTedLatentAction_ActorTagCounter_KillActors_Wrapper, ExpectedAmount) == 0x000038, "Member 'FTedLatentAction_ActorTagCounter_KillActors_Wrapper::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(FTedLatentAction_ActorTagCounter_KillActors_Wrapper, Comparison) == 0x000039, "Member 'FTedLatentAction_ActorTagCounter_KillActors_Wrapper::Comparison' has a wrong offset!");

// ScriptStruct Tempest.StructureHarvesterData
// 0x0028 (0x0038 - 0x0010)
struct FStructureHarvesterData final : public FHarvesterData
{
public:
	int32                                         MaxResourceHarvestTileRange;                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxConcurrentHarvestTiles;                         // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StageHarvestSpeedMultiplier[0x4];                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StageDuration[0x4];                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructureHarvesterData) == 0x000004, "Wrong alignment on FStructureHarvesterData");
static_assert(sizeof(FStructureHarvesterData) == 0x000038, "Wrong size on FStructureHarvesterData");
static_assert(offsetof(FStructureHarvesterData, MaxResourceHarvestTileRange) == 0x000010, "Member 'FStructureHarvesterData::MaxResourceHarvestTileRange' has a wrong offset!");
static_assert(offsetof(FStructureHarvesterData, MaxConcurrentHarvestTiles) == 0x000014, "Member 'FStructureHarvesterData::MaxConcurrentHarvestTiles' has a wrong offset!");
static_assert(offsetof(FStructureHarvesterData, StageHarvestSpeedMultiplier) == 0x000018, "Member 'FStructureHarvesterData::StageHarvestSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(FStructureHarvesterData, StageDuration) == 0x000028, "Member 'FStructureHarvesterData::StageDuration' has a wrong offset!");

// ScriptStruct Tempest.WaitForPlayerOwnsOption
// 0x0010 (0x0010 - 0x0000)
struct FWaitForPlayerOwnsOption final
{
public:
	struct FGameplayTag                           OwnedTag;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaitForPlayerOwnsOption) == 0x000004, "Wrong alignment on FWaitForPlayerOwnsOption");
static_assert(sizeof(FWaitForPlayerOwnsOption) == 0x000010, "Wrong size on FWaitForPlayerOwnsOption");
static_assert(offsetof(FWaitForPlayerOwnsOption, OwnedTag) == 0x000000, "Member 'FWaitForPlayerOwnsOption::OwnedTag' has a wrong offset!");
static_assert(offsetof(FWaitForPlayerOwnsOption, ExpectedAmount) == 0x000008, "Member 'FWaitForPlayerOwnsOption::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(FWaitForPlayerOwnsOption, Comparison) == 0x00000C, "Member 'FWaitForPlayerOwnsOption::Comparison' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityProgressBiEvent_QuadrantsDetails
// 0x0054 (0x0054 - 0x0000)
struct FServerMatchActivityProgressBiEvent_QuadrantsDetails final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         locationX;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         locationY;                                         // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsInfantry;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsVehicle;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsAircraft;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitsOther;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildings;                                         // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         enemyUnitsInfantry;                                // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         enemyUnitsVehicle;                                 // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         enemyUnitsAircraft;                                // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         enemyUnitsOther;                                   // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         enemyBuildings;                                    // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageDoneInfantry;                                // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageDoneVehicle;                                 // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageDoneAircraft;                                // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageDoneOther;                                   // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageGotInfantry;                                 // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageGotVehicle;                                  // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageGotAircraft;                                 // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         damageGotOther;                                    // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityProgressBiEvent_QuadrantsDetails) == 0x000004, "Wrong alignment on FServerMatchActivityProgressBiEvent_QuadrantsDetails");
static_assert(sizeof(FServerMatchActivityProgressBiEvent_QuadrantsDetails) == 0x000054, "Wrong size on FServerMatchActivityProgressBiEvent_QuadrantsDetails");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, Num) == 0x000000, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::Num' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, locationX) == 0x000004, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::locationX' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, locationY) == 0x000008, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::locationY' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, unitsInfantry) == 0x00000C, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::unitsInfantry' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, unitsVehicle) == 0x000010, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::unitsVehicle' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, unitsAircraft) == 0x000014, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::unitsAircraft' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, unitsOther) == 0x000018, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::unitsOther' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, buildings) == 0x00001C, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::buildings' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, enemyUnitsInfantry) == 0x000020, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::enemyUnitsInfantry' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, enemyUnitsVehicle) == 0x000024, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::enemyUnitsVehicle' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, enemyUnitsAircraft) == 0x000028, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::enemyUnitsAircraft' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, enemyUnitsOther) == 0x00002C, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::enemyUnitsOther' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, enemyBuildings) == 0x000030, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::enemyBuildings' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageDoneInfantry) == 0x000034, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageDoneInfantry' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageDoneVehicle) == 0x000038, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageDoneVehicle' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageDoneAircraft) == 0x00003C, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageDoneAircraft' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageDoneOther) == 0x000040, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageDoneOther' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageGotInfantry) == 0x000044, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageGotInfantry' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageGotVehicle) == 0x000048, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageGotVehicle' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageGotAircraft) == 0x00004C, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageGotAircraft' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_QuadrantsDetails, damageGotOther) == 0x000050, "Member 'FServerMatchActivityProgressBiEvent_QuadrantsDetails::damageGotOther' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardHeaderContent
// 0x0020 (0x0020 - 0x0000)
struct FTedLeaderboardHeaderContent final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FillPercent;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedLeaderboardHeaderContent) == 0x000008, "Wrong alignment on FTedLeaderboardHeaderContent");
static_assert(sizeof(FTedLeaderboardHeaderContent) == 0x000020, "Wrong size on FTedLeaderboardHeaderContent");
static_assert(offsetof(FTedLeaderboardHeaderContent, ID) == 0x000000, "Member 'FTedLeaderboardHeaderContent::ID' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardHeaderContent, Text) == 0x000008, "Member 'FTedLeaderboardHeaderContent::Text' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardHeaderContent, FillPercent) == 0x000018, "Member 'FTedLeaderboardHeaderContent::FillPercent' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardDataPanel
// 0x0020 (0x0020 - 0x0000)
struct FTedLeaderboardDataPanel final
{
public:
	class FString                                 NameAndNumber;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Wins;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Losses;                                            // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinRatePCT;                                        // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinRateMMR;                                        // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLeaderboardDataPanel) == 0x000008, "Wrong alignment on FTedLeaderboardDataPanel");
static_assert(sizeof(FTedLeaderboardDataPanel) == 0x000020, "Wrong size on FTedLeaderboardDataPanel");
static_assert(offsetof(FTedLeaderboardDataPanel, NameAndNumber) == 0x000000, "Member 'FTedLeaderboardDataPanel::NameAndNumber' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardDataPanel, Wins) == 0x000010, "Member 'FTedLeaderboardDataPanel::Wins' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardDataPanel, Losses) == 0x000014, "Member 'FTedLeaderboardDataPanel::Losses' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardDataPanel, WinRatePCT) == 0x000018, "Member 'FTedLeaderboardDataPanel::WinRatePCT' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardDataPanel, WinRateMMR) == 0x00001C, "Member 'FTedLeaderboardDataPanel::WinRateMMR' has a wrong offset!");

// ScriptStruct Tempest.TedLobbyConfiguration
// 0x0038 (0x0038 - 0x0000)
struct FTedLobbyConfiguration final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLobbyPasswordMode                         PasswordMode;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Password;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedServerType                                Type;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bReadOnlyType : 1;                                 // 0x0029(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	ETedLobbyAffectPasswordMode                   AffectPassword;                                    // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPasswordLength;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNameLength;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedLobbyConfiguration) == 0x000008, "Wrong alignment on FTedLobbyConfiguration");
static_assert(sizeof(FTedLobbyConfiguration) == 0x000038, "Wrong size on FTedLobbyConfiguration");
static_assert(offsetof(FTedLobbyConfiguration, Name) == 0x000000, "Member 'FTedLobbyConfiguration::Name' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, PasswordMode) == 0x000010, "Member 'FTedLobbyConfiguration::PasswordMode' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, Password) == 0x000018, "Member 'FTedLobbyConfiguration::Password' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, Type) == 0x000028, "Member 'FTedLobbyConfiguration::Type' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, AffectPassword) == 0x00002A, "Member 'FTedLobbyConfiguration::AffectPassword' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, MaxPasswordLength) == 0x00002C, "Member 'FTedLobbyConfiguration::MaxPasswordLength' has a wrong offset!");
static_assert(offsetof(FTedLobbyConfiguration, MaxNameLength) == 0x000030, "Member 'FTedLobbyConfiguration::MaxNameLength' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryEnemyPawnStatistics
// 0x0050 (0x0050 - 0x0000)
struct FTedTelemetryEnemyPawnStatistics final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMilitary;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStructure;                                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EncountersNum;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillCount;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReceivedDamage;                                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerUnitDamageDealt;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUnitKillCount;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerStructureDamageDealt;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStructureKillCount;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ATedPawn>>        EncounteredPawns;                                  // 0x0040(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryEnemyPawnStatistics) == 0x000008, "Wrong alignment on FTedTelemetryEnemyPawnStatistics");
static_assert(sizeof(FTedTelemetryEnemyPawnStatistics) == 0x000050, "Wrong size on FTedTelemetryEnemyPawnStatistics");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, Name) == 0x000000, "Member 'FTedTelemetryEnemyPawnStatistics::Name' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, Category) == 0x000010, "Member 'FTedTelemetryEnemyPawnStatistics::Category' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, bIsMilitary) == 0x000020, "Member 'FTedTelemetryEnemyPawnStatistics::bIsMilitary' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, bIsStructure) == 0x000021, "Member 'FTedTelemetryEnemyPawnStatistics::bIsStructure' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, EncountersNum) == 0x000024, "Member 'FTedTelemetryEnemyPawnStatistics::EncountersNum' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, KillCount) == 0x000028, "Member 'FTedTelemetryEnemyPawnStatistics::KillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, ReceivedDamage) == 0x00002C, "Member 'FTedTelemetryEnemyPawnStatistics::ReceivedDamage' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, PlayerUnitDamageDealt) == 0x000030, "Member 'FTedTelemetryEnemyPawnStatistics::PlayerUnitDamageDealt' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, PlayerUnitKillCount) == 0x000034, "Member 'FTedTelemetryEnemyPawnStatistics::PlayerUnitKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, PlayerStructureDamageDealt) == 0x000038, "Member 'FTedTelemetryEnemyPawnStatistics::PlayerStructureDamageDealt' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, PlayerStructureKillCount) == 0x00003C, "Member 'FTedTelemetryEnemyPawnStatistics::PlayerStructureKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryEnemyPawnStatistics, EncounteredPawns) == 0x000040, "Member 'FTedTelemetryEnemyPawnStatistics::EncounteredPawns' has a wrong offset!");

// ScriptStruct Tempest.TedMarkerOverlayInstanceData
// 0x0120 (0x0120 - 0x0000)
struct FTedMarkerOverlayInstanceData final
{
public:
	uint8                                         bRelevant : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedMarkerConfig*                       MarkerConfig;                                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              position;                                          // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            CornerBrush;                                       // 0x0030(0x00D0)(NativeAccessSpecifierPublic)
	struct FVector2D                              CornerBrushSize;                                   // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CornerBrushOffset;                                 // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMarkerOverlayInstanceData) == 0x000010, "Wrong alignment on FTedMarkerOverlayInstanceData");
static_assert(sizeof(FTedMarkerOverlayInstanceData) == 0x000120, "Wrong size on FTedMarkerOverlayInstanceData");
static_assert(offsetof(FTedMarkerOverlayInstanceData, MarkerConfig) == 0x000008, "Member 'FTedMarkerOverlayInstanceData::MarkerConfig' has a wrong offset!");
static_assert(offsetof(FTedMarkerOverlayInstanceData, Size) == 0x000010, "Member 'FTedMarkerOverlayInstanceData::Size' has a wrong offset!");
static_assert(offsetof(FTedMarkerOverlayInstanceData, position) == 0x000020, "Member 'FTedMarkerOverlayInstanceData::position' has a wrong offset!");
static_assert(offsetof(FTedMarkerOverlayInstanceData, CornerBrush) == 0x000030, "Member 'FTedMarkerOverlayInstanceData::CornerBrush' has a wrong offset!");
static_assert(offsetof(FTedMarkerOverlayInstanceData, CornerBrushSize) == 0x000100, "Member 'FTedMarkerOverlayInstanceData::CornerBrushSize' has a wrong offset!");
static_assert(offsetof(FTedMarkerOverlayInstanceData, CornerBrushOffset) == 0x000110, "Member 'FTedMarkerOverlayInstanceData::CornerBrushOffset' has a wrong offset!");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent_EventContext
// 0x0070 (0x0070 - 0x0000)
struct FClientDeviceInfoBiEvent_EventContext final
{
public:
	class FString                                 gameLaunchUid;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 device;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         InputDevice;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 osVersion;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 osLocale;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 exeConfig;                                         // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 exeVersion;                                        // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientDeviceInfoBiEvent_EventContext");
static_assert(sizeof(FClientDeviceInfoBiEvent_EventContext) == 0x000070, "Wrong size on FClientDeviceInfoBiEvent_EventContext");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, gameLaunchUid) == 0x000000, "Member 'FClientDeviceInfoBiEvent_EventContext::gameLaunchUid' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, device) == 0x000010, "Member 'FClientDeviceInfoBiEvent_EventContext::device' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, InputDevice) == 0x000020, "Member 'FClientDeviceInfoBiEvent_EventContext::InputDevice' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, osVersion) == 0x000030, "Member 'FClientDeviceInfoBiEvent_EventContext::osVersion' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, osLocale) == 0x000040, "Member 'FClientDeviceInfoBiEvent_EventContext::osLocale' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, exeConfig) == 0x000050, "Member 'FClientDeviceInfoBiEvent_EventContext::exeConfig' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_EventContext, exeVersion) == 0x000060, "Member 'FClientDeviceInfoBiEvent_EventContext::exeVersion' has a wrong offset!");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent_Gpu
// 0x0040 (0x0040 - 0x0000)
struct FClientDeviceInfoBiEvent_Gpu final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 detailedName;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 vendor;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 driverVersion;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoBiEvent_Gpu) == 0x000008, "Wrong alignment on FClientDeviceInfoBiEvent_Gpu");
static_assert(sizeof(FClientDeviceInfoBiEvent_Gpu) == 0x000040, "Wrong size on FClientDeviceInfoBiEvent_Gpu");
static_assert(offsetof(FClientDeviceInfoBiEvent_Gpu, Name) == 0x000000, "Member 'FClientDeviceInfoBiEvent_Gpu::Name' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Gpu, detailedName) == 0x000010, "Member 'FClientDeviceInfoBiEvent_Gpu::detailedName' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Gpu, vendor) == 0x000020, "Member 'FClientDeviceInfoBiEvent_Gpu::vendor' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Gpu, driverVersion) == 0x000030, "Member 'FClientDeviceInfoBiEvent_Gpu::driverVersion' has a wrong offset!");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent_Desktop
// 0x0020 (0x0020 - 0x0000)
struct FClientDeviceInfoBiEvent_Desktop final
{
public:
	class FString                                 graphicsSetting;                                   // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         maxRefreshRate;                                    // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientDeviceInfoBiEvent_Desktop) == 0x000008, "Wrong alignment on FClientDeviceInfoBiEvent_Desktop");
static_assert(sizeof(FClientDeviceInfoBiEvent_Desktop) == 0x000020, "Wrong size on FClientDeviceInfoBiEvent_Desktop");
static_assert(offsetof(FClientDeviceInfoBiEvent_Desktop, graphicsSetting) == 0x000000, "Member 'FClientDeviceInfoBiEvent_Desktop::graphicsSetting' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Desktop, Width) == 0x000010, "Member 'FClientDeviceInfoBiEvent_Desktop::Width' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Desktop, Height) == 0x000014, "Member 'FClientDeviceInfoBiEvent_Desktop::Height' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent_Desktop, maxRefreshRate) == 0x000018, "Member 'FClientDeviceInfoBiEvent_Desktop::maxRefreshRate' has a wrong offset!");

// ScriptStruct Tempest.ClientDeviceInfoBiEvent
// 0x0120 (0x0120 - 0x0000)
struct FClientDeviceInfoBiEvent final
{
public:
	struct FClientDeviceInfoBiEvent_EventContext  eventContext;                                      // 0x0000(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientDeviceInfoBiEvent_Cpu           cpu;                                               // 0x0070(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientDeviceInfoBiEvent_Gpu           gpu;                                               // 0x00B0(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientDeviceInfoBiEvent_Ram           ram;                                               // 0x00F0(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FClientDeviceInfoBiEvent_Desktop       desktop;                                           // 0x0100(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDeviceInfoBiEvent) == 0x000008, "Wrong alignment on FClientDeviceInfoBiEvent");
static_assert(sizeof(FClientDeviceInfoBiEvent) == 0x000120, "Wrong size on FClientDeviceInfoBiEvent");
static_assert(offsetof(FClientDeviceInfoBiEvent, eventContext) == 0x000000, "Member 'FClientDeviceInfoBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent, cpu) == 0x000070, "Member 'FClientDeviceInfoBiEvent::cpu' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent, gpu) == 0x0000B0, "Member 'FClientDeviceInfoBiEvent::gpu' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent, ram) == 0x0000F0, "Member 'FClientDeviceInfoBiEvent::ram' has a wrong offset!");
static_assert(offsetof(FClientDeviceInfoBiEvent, desktop) == 0x000100, "Member 'FClientDeviceInfoBiEvent::desktop' has a wrong offset!");

// ScriptStruct Tempest.TedMarkerHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTedMarkerHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMarkerHandle) == 0x000004, "Wrong alignment on FTedMarkerHandle");
static_assert(sizeof(FTedMarkerHandle) == 0x000004, "Wrong size on FTedMarkerHandle");

// ScriptStruct Tempest.TedMarker
// 0x0038 (0x0038 - 0x0000)
struct FTedMarker final
{
public:
	struct FTedMarkerHandle                       Handle;                                            // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedMarkerConfig*                       Config;                                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMarkerTargetType                          TargetType;                                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMarker) == 0x000008, "Wrong alignment on FTedMarker");
static_assert(sizeof(FTedMarker) == 0x000038, "Wrong size on FTedMarker");
static_assert(offsetof(FTedMarker, Handle) == 0x000000, "Member 'FTedMarker::Handle' has a wrong offset!");
static_assert(offsetof(FTedMarker, Config) == 0x000008, "Member 'FTedMarker::Config' has a wrong offset!");
static_assert(offsetof(FTedMarker, TargetLocation) == 0x000010, "Member 'FTedMarker::TargetLocation' has a wrong offset!");
static_assert(offsetof(FTedMarker, Target) == 0x000028, "Member 'FTedMarker::Target' has a wrong offset!");
static_assert(offsetof(FTedMarker, TargetType) == 0x000030, "Member 'FTedMarker::TargetType' has a wrong offset!");

// ScriptStruct Tempest.TedMatchHistorySlot_Expansion_PlayerContent
// 0x0040 (0x0040 - 0x0000)
struct FTedMatchHistorySlot_Expansion_PlayerContent final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    Team;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedFaction                             Faction;                                           // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTedUI_InstancedContent*>        StatsContents;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                 HydraId;                                           // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBot;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMatchHistorySlot_Expansion_PlayerContent) == 0x000008, "Wrong alignment on FTedMatchHistorySlot_Expansion_PlayerContent");
static_assert(sizeof(FTedMatchHistorySlot_Expansion_PlayerContent) == 0x000040, "Wrong size on FTedMatchHistorySlot_Expansion_PlayerContent");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, Name) == 0x000000, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::Name' has a wrong offset!");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, Team) == 0x000010, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::Team' has a wrong offset!");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, Faction) == 0x000011, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::Faction' has a wrong offset!");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, StatsContents) == 0x000018, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::StatsContents' has a wrong offset!");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, HydraId) == 0x000028, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::HydraId' has a wrong offset!");
static_assert(offsetof(FTedMatchHistorySlot_Expansion_PlayerContent, bIsBot) == 0x000038, "Member 'FTedMatchHistorySlot_Expansion_PlayerContent::bIsBot' has a wrong offset!");

// ScriptStruct Tempest.TedStructureWallBoxSetup
// 0x0068 (0x0068 - 0x0000)
struct FTedStructureWallBoxSetup final
{
public:
	struct FVector                                PrimaryOffsetLoc;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrimaryExtent;                                     // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSecondary : 1;                                 // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SecondaryOffsetLoc;                                // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SecondaryExtent;                                   // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureWallBoxSetup) == 0x000008, "Wrong alignment on FTedStructureWallBoxSetup");
static_assert(sizeof(FTedStructureWallBoxSetup) == 0x000068, "Wrong size on FTedStructureWallBoxSetup");
static_assert(offsetof(FTedStructureWallBoxSetup, PrimaryOffsetLoc) == 0x000000, "Member 'FTedStructureWallBoxSetup::PrimaryOffsetLoc' has a wrong offset!");
static_assert(offsetof(FTedStructureWallBoxSetup, PrimaryExtent) == 0x000018, "Member 'FTedStructureWallBoxSetup::PrimaryExtent' has a wrong offset!");
static_assert(offsetof(FTedStructureWallBoxSetup, SecondaryOffsetLoc) == 0x000038, "Member 'FTedStructureWallBoxSetup::SecondaryOffsetLoc' has a wrong offset!");
static_assert(offsetof(FTedStructureWallBoxSetup, SecondaryExtent) == 0x000050, "Member 'FTedStructureWallBoxSetup::SecondaryExtent' has a wrong offset!");

// ScriptStruct Tempest.TedMedalTableRow
// 0x0018 (0x0020 - 0x0008)
struct FTedMedalTableRow : public FTableRowBase
{
public:
	class UTexture2D*                             MedalTexture;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MedalDisplayName;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMedalTableRow) == 0x000008, "Wrong alignment on FTedMedalTableRow");
static_assert(sizeof(FTedMedalTableRow) == 0x000020, "Wrong size on FTedMedalTableRow");
static_assert(offsetof(FTedMedalTableRow, MedalTexture) == 0x000008, "Member 'FTedMedalTableRow::MedalTexture' has a wrong offset!");
static_assert(offsetof(FTedMedalTableRow, MedalDisplayName) == 0x000010, "Member 'FTedMedalTableRow::MedalDisplayName' has a wrong offset!");

// ScriptStruct Tempest.TriggerIgnores
// 0x0010 (0x0010 - 0x0000)
struct FTriggerIgnores final
{
public:
	TArray<TSubclassOf<class ATedPawn>>           PawnsToIgnore;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTriggerIgnores) == 0x000008, "Wrong alignment on FTriggerIgnores");
static_assert(sizeof(FTriggerIgnores) == 0x000010, "Wrong size on FTriggerIgnores");
static_assert(offsetof(FTriggerIgnores, PawnsToIgnore) == 0x000000, "Member 'FTriggerIgnores::PawnsToIgnore' has a wrong offset!");

// ScriptStruct Tempest.TedMedalTableRow_Ranked
// 0x0008 (0x0028 - 0x0020)
struct FTedMedalTableRow_Ranked final : public FTedMedalTableRow
{
public:
	int32                                         RequiredRating;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedMedalTableRow_Ranked) == 0x000008, "Wrong alignment on FTedMedalTableRow_Ranked");
static_assert(sizeof(FTedMedalTableRow_Ranked) == 0x000028, "Wrong size on FTedMedalTableRow_Ranked");
static_assert(offsetof(FTedMedalTableRow_Ranked, RequiredRating) == 0x000020, "Member 'FTedMedalTableRow_Ranked::RequiredRating' has a wrong offset!");

// ScriptStruct Tempest.TedThemeMovieEntry
// 0x0008 (0x0008 - 0x0000)
struct FTedThemeMovieEntry final
{
public:
	class UFileMediaSource*                       Movie;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedThemeMovieEntry) == 0x000008, "Wrong alignment on FTedThemeMovieEntry");
static_assert(sizeof(FTedThemeMovieEntry) == 0x000008, "Wrong size on FTedThemeMovieEntry");
static_assert(offsetof(FTedThemeMovieEntry, Movie) == 0x000000, "Member 'FTedThemeMovieEntry::Movie' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchProgressBiEvent_MatchProgressDetails
// 0x001C (0x001C - 0x0000)
struct FClientMatchProgressBiEvent_MatchProgressDetails final
{
public:
	int32                                         progressStep;                                      // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Score;                                             // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         matchTimer;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         pauseTime;                                         // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         objectivesCompleted;                               // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         supportPowerUsage;                                 // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerConsumption;                                  // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchProgressBiEvent_MatchProgressDetails) == 0x000004, "Wrong alignment on FClientMatchProgressBiEvent_MatchProgressDetails");
static_assert(sizeof(FClientMatchProgressBiEvent_MatchProgressDetails) == 0x00001C, "Wrong size on FClientMatchProgressBiEvent_MatchProgressDetails");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, progressStep) == 0x000000, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::progressStep' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, Score) == 0x000004, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::Score' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, matchTimer) == 0x000008, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::matchTimer' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, pauseTime) == 0x00000C, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::pauseTime' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, objectivesCompleted) == 0x000010, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::objectivesCompleted' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, supportPowerUsage) == 0x000014, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::supportPowerUsage' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent_MatchProgressDetails, PowerConsumption) == 0x000018, "Member 'FClientMatchProgressBiEvent_MatchProgressDetails::PowerConsumption' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryPlayerStatistics
// 0x0068 (0x0068 - 0x0000)
struct FTedTelemetryPlayerStatistics final
{
public:
	int32                                         GainedCredits;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedCredits_Harvesting;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCredits;                                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCredits_UnitProduction;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCredits_StructureProduction;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCredits_PawnUpgradeResearch;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCredits_DoctrineResearch;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedMilitaryUnits;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProducedMilitaryUnits;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostMilitaryUnits;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MilitaryUnitKillCount;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedStructures;                                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProducedStructures;                                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostStructures;                                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StructureKillCount;                                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedRequisitionPoints;                           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelGot;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelLost;                                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PopulationDistributionPerMinute;                   // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DynActivePlans;                                    // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryPlayerStatistics) == 0x000008, "Wrong alignment on FTedTelemetryPlayerStatistics");
static_assert(sizeof(FTedTelemetryPlayerStatistics) == 0x000068, "Wrong size on FTedTelemetryPlayerStatistics");
static_assert(offsetof(FTedTelemetryPlayerStatistics, GainedCredits) == 0x000000, "Member 'FTedTelemetryPlayerStatistics::GainedCredits' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, GainedCredits_Harvesting) == 0x000004, "Member 'FTedTelemetryPlayerStatistics::GainedCredits_Harvesting' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostCredits) == 0x000008, "Member 'FTedTelemetryPlayerStatistics::LostCredits' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostCredits_UnitProduction) == 0x00000C, "Member 'FTedTelemetryPlayerStatistics::LostCredits_UnitProduction' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostCredits_StructureProduction) == 0x000010, "Member 'FTedTelemetryPlayerStatistics::LostCredits_StructureProduction' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostCredits_PawnUpgradeResearch) == 0x000014, "Member 'FTedTelemetryPlayerStatistics::LostCredits_PawnUpgradeResearch' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostCredits_DoctrineResearch) == 0x000018, "Member 'FTedTelemetryPlayerStatistics::LostCredits_DoctrineResearch' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, GainedMilitaryUnits) == 0x00001C, "Member 'FTedTelemetryPlayerStatistics::GainedMilitaryUnits' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, ProducedMilitaryUnits) == 0x000020, "Member 'FTedTelemetryPlayerStatistics::ProducedMilitaryUnits' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostMilitaryUnits) == 0x000024, "Member 'FTedTelemetryPlayerStatistics::LostMilitaryUnits' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, MilitaryUnitKillCount) == 0x000028, "Member 'FTedTelemetryPlayerStatistics::MilitaryUnitKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, GainedStructures) == 0x00002C, "Member 'FTedTelemetryPlayerStatistics::GainedStructures' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, ProducedStructures) == 0x000030, "Member 'FTedTelemetryPlayerStatistics::ProducedStructures' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, LostStructures) == 0x000034, "Member 'FTedTelemetryPlayerStatistics::LostStructures' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, StructureKillCount) == 0x000038, "Member 'FTedTelemetryPlayerStatistics::StructureKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, GainedRequisitionPoints) == 0x00003C, "Member 'FTedTelemetryPlayerStatistics::GainedRequisitionPoints' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, IntelGot) == 0x000040, "Member 'FTedTelemetryPlayerStatistics::IntelGot' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, IntelLost) == 0x000044, "Member 'FTedTelemetryPlayerStatistics::IntelLost' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, PopulationDistributionPerMinute) == 0x000048, "Member 'FTedTelemetryPlayerStatistics::PopulationDistributionPerMinute' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerStatistics, DynActivePlans) == 0x000058, "Member 'FTedTelemetryPlayerStatistics::DynActivePlans' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryObjectiveData
// 0x0018 (0x0018 - 0x0000)
struct FTedTelemetryObjectiveData final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSecondary;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ActivationNum;                                     // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryObjectiveData) == 0x000008, "Wrong alignment on FTedTelemetryObjectiveData");
static_assert(sizeof(FTedTelemetryObjectiveData) == 0x000018, "Wrong size on FTedTelemetryObjectiveData");
static_assert(offsetof(FTedTelemetryObjectiveData, DisplayName) == 0x000000, "Member 'FTedTelemetryObjectiveData::DisplayName' has a wrong offset!");
static_assert(offsetof(FTedTelemetryObjectiveData, bIsSecondary) == 0x000010, "Member 'FTedTelemetryObjectiveData::bIsSecondary' has a wrong offset!");
static_assert(offsetof(FTedTelemetryObjectiveData, ActivationNum) == 0x000011, "Member 'FTedTelemetryObjectiveData::ActivationNum' has a wrong offset!");
static_assert(offsetof(FTedTelemetryObjectiveData, StartTime) == 0x000014, "Member 'FTedTelemetryObjectiveData::StartTime' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryOwnedPawnStatistics
// 0x00B0 (0x00B0 - 0x0000)
struct FTedTelemetryOwnedPawnStatistics final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMilitary;                                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsStructure;                                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProducedCount;                                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProductionCost;                                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LostCount;                                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoldCount;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitDamageDealt;                                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnitKillCount;                                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StructureDamageDealt;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StructureKillCount;                                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReceivedDamage;                                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProvidedHealing;                                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReceivedHealing;                                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GainedExperience;                                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstalledUpgradesCount;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfUsedAbilities;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x54];                                      // 0x005C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryOwnedPawnStatistics) == 0x000008, "Wrong alignment on FTedTelemetryOwnedPawnStatistics");
static_assert(sizeof(FTedTelemetryOwnedPawnStatistics) == 0x0000B0, "Wrong size on FTedTelemetryOwnedPawnStatistics");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, Name) == 0x000000, "Member 'FTedTelemetryOwnedPawnStatistics::Name' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, Category) == 0x000010, "Member 'FTedTelemetryOwnedPawnStatistics::Category' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, bIsMilitary) == 0x000020, "Member 'FTedTelemetryOwnedPawnStatistics::bIsMilitary' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, bIsStructure) == 0x000021, "Member 'FTedTelemetryOwnedPawnStatistics::bIsStructure' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, ProducedCount) == 0x000024, "Member 'FTedTelemetryOwnedPawnStatistics::ProducedCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, ProductionCost) == 0x000028, "Member 'FTedTelemetryOwnedPawnStatistics::ProductionCost' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, LostCount) == 0x00002C, "Member 'FTedTelemetryOwnedPawnStatistics::LostCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, SoldCount) == 0x000030, "Member 'FTedTelemetryOwnedPawnStatistics::SoldCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, UnitDamageDealt) == 0x000034, "Member 'FTedTelemetryOwnedPawnStatistics::UnitDamageDealt' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, UnitKillCount) == 0x000038, "Member 'FTedTelemetryOwnedPawnStatistics::UnitKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, StructureDamageDealt) == 0x00003C, "Member 'FTedTelemetryOwnedPawnStatistics::StructureDamageDealt' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, StructureKillCount) == 0x000040, "Member 'FTedTelemetryOwnedPawnStatistics::StructureKillCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, ReceivedDamage) == 0x000044, "Member 'FTedTelemetryOwnedPawnStatistics::ReceivedDamage' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, ProvidedHealing) == 0x000048, "Member 'FTedTelemetryOwnedPawnStatistics::ProvidedHealing' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, ReceivedHealing) == 0x00004C, "Member 'FTedTelemetryOwnedPawnStatistics::ReceivedHealing' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, GainedExperience) == 0x000050, "Member 'FTedTelemetryOwnedPawnStatistics::GainedExperience' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, InstalledUpgradesCount) == 0x000054, "Member 'FTedTelemetryOwnedPawnStatistics::InstalledUpgradesCount' has a wrong offset!");
static_assert(offsetof(FTedTelemetryOwnedPawnStatistics, AmountOfUsedAbilities) == 0x000058, "Member 'FTedTelemetryOwnedPawnStatistics::AmountOfUsedAbilities' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetrySupportPowerTrackingOptions
// 0x0004 (0x0004 - 0x0000)
struct FTedTelemetrySupportPowerTrackingOptions final
{
public:
	bool                                          bTrackActorEndPlay;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackActorDeath;                                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackShotProjectiles;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckNavLocationOnDeath;                          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetrySupportPowerTrackingOptions) == 0x000001, "Wrong alignment on FTedTelemetrySupportPowerTrackingOptions");
static_assert(sizeof(FTedTelemetrySupportPowerTrackingOptions) == 0x000004, "Wrong size on FTedTelemetrySupportPowerTrackingOptions");
static_assert(offsetof(FTedTelemetrySupportPowerTrackingOptions, bTrackActorEndPlay) == 0x000000, "Member 'FTedTelemetrySupportPowerTrackingOptions::bTrackActorEndPlay' has a wrong offset!");
static_assert(offsetof(FTedTelemetrySupportPowerTrackingOptions, bTrackActorDeath) == 0x000001, "Member 'FTedTelemetrySupportPowerTrackingOptions::bTrackActorDeath' has a wrong offset!");
static_assert(offsetof(FTedTelemetrySupportPowerTrackingOptions, bTrackShotProjectiles) == 0x000002, "Member 'FTedTelemetrySupportPowerTrackingOptions::bTrackShotProjectiles' has a wrong offset!");
static_assert(offsetof(FTedTelemetrySupportPowerTrackingOptions, bCheckNavLocationOnDeath) == 0x000003, "Member 'FTedTelemetrySupportPowerTrackingOptions::bCheckNavLocationOnDeath' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryTrackedSupportPowerData
// 0x0048 (0x0048 - 0x0000)
struct FTedTelemetryTrackedSupportPowerData final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          AssociatedActors;                                  // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ATedPawn>>        KilledPawns;                                       // 0x0010(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         TotalDamageDealt;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotProjectiles;                                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CommandLocation;                                   // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedTelemetrySupportPowerTrackingOptions Options;                                         // 0x0040(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryTrackedSupportPowerData) == 0x000008, "Wrong alignment on FTedTelemetryTrackedSupportPowerData");
static_assert(sizeof(FTedTelemetryTrackedSupportPowerData) == 0x000048, "Wrong size on FTedTelemetryTrackedSupportPowerData");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, AssociatedActors) == 0x000000, "Member 'FTedTelemetryTrackedSupportPowerData::AssociatedActors' has a wrong offset!");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, KilledPawns) == 0x000010, "Member 'FTedTelemetryTrackedSupportPowerData::KilledPawns' has a wrong offset!");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, TotalDamageDealt) == 0x000020, "Member 'FTedTelemetryTrackedSupportPowerData::TotalDamageDealt' has a wrong offset!");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, ShotProjectiles) == 0x000024, "Member 'FTedTelemetryTrackedSupportPowerData::ShotProjectiles' has a wrong offset!");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, CommandLocation) == 0x000028, "Member 'FTedTelemetryTrackedSupportPowerData::CommandLocation' has a wrong offset!");
static_assert(offsetof(FTedTelemetryTrackedSupportPowerData, Options) == 0x000040, "Member 'FTedTelemetryTrackedSupportPowerData::Options' has a wrong offset!");

// ScriptStruct Tempest.TedMatchDurations
// 0x000C (0x000C - 0x0000)
struct FTedMatchDurations final
{
public:
	float                                         MaxCredits;                                        // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPopulation;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPower;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedMatchDurations) == 0x000004, "Wrong alignment on FTedMatchDurations");
static_assert(sizeof(FTedMatchDurations) == 0x00000C, "Wrong size on FTedMatchDurations");
static_assert(offsetof(FTedMatchDurations, MaxCredits) == 0x000000, "Member 'FTedMatchDurations::MaxCredits' has a wrong offset!");
static_assert(offsetof(FTedMatchDurations, MaxPopulation) == 0x000004, "Member 'FTedMatchDurations::MaxPopulation' has a wrong offset!");
static_assert(offsetof(FTedMatchDurations, LowPower) == 0x000008, "Member 'FTedMatchDurations::LowPower' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryPlayerMatchData
// 0x0258 (0x0258 - 0x0000)
struct FTedTelemetryPlayerMatchData final
{
public:
	struct FClientMatchProgressBiEvent_MatchProgressDetails Progress;                                // 0x0000(0x001C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedTelemetryPlayerStatistics          PlayerStatistics;                                  // 0x0020(0x0068)(NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FTedTelemetryOwnedPawnStatistics> OwnedPawnsStatistics;         // 0x0088(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FTedTelemetryEnemyPawnStatistics> EnemyPawnsStatistics;         // 0x00D8(0x0050)(NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class UTedObjectiveObj>, struct FTedTelemetryObjectiveData> ObjectiveData;   // 0x0128(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FServerMatchActivityProgressBiEvent_QuadrantsDetails> QuadrantsDetails;       // 0x0178(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FTedTelemetryTrackedSupportPowerData> ActiveSupportPowers;      // 0x01C8(0x0050)(NativeAccessSpecifierPublic)
	struct FTedTelemetryActiveCutscene            ActiveCutscene;                                    // 0x0218(0x0018)(NativeAccessSpecifierPublic)
	struct FMatchTelemetry                        NetData;                                           // 0x0230(0x0018)(NativeAccessSpecifierPublic)
	struct FTedMatchDurations                     MatchDurations;                                    // 0x0248(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bMatchStartWasSent;                                // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchEndWasSent;                                  // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_256[0x2];                                      // 0x0256(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryPlayerMatchData) == 0x000008, "Wrong alignment on FTedTelemetryPlayerMatchData");
static_assert(sizeof(FTedTelemetryPlayerMatchData) == 0x000258, "Wrong size on FTedTelemetryPlayerMatchData");
static_assert(offsetof(FTedTelemetryPlayerMatchData, Progress) == 0x000000, "Member 'FTedTelemetryPlayerMatchData::Progress' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, PlayerStatistics) == 0x000020, "Member 'FTedTelemetryPlayerMatchData::PlayerStatistics' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, OwnedPawnsStatistics) == 0x000088, "Member 'FTedTelemetryPlayerMatchData::OwnedPawnsStatistics' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, EnemyPawnsStatistics) == 0x0000D8, "Member 'FTedTelemetryPlayerMatchData::EnemyPawnsStatistics' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, ObjectiveData) == 0x000128, "Member 'FTedTelemetryPlayerMatchData::ObjectiveData' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, QuadrantsDetails) == 0x000178, "Member 'FTedTelemetryPlayerMatchData::QuadrantsDetails' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, ActiveSupportPowers) == 0x0001C8, "Member 'FTedTelemetryPlayerMatchData::ActiveSupportPowers' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, ActiveCutscene) == 0x000218, "Member 'FTedTelemetryPlayerMatchData::ActiveCutscene' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, NetData) == 0x000230, "Member 'FTedTelemetryPlayerMatchData::NetData' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, MatchDurations) == 0x000248, "Member 'FTedTelemetryPlayerMatchData::MatchDurations' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, bMatchStartWasSent) == 0x000254, "Member 'FTedTelemetryPlayerMatchData::bMatchStartWasSent' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerMatchData, bMatchEndWasSent) == 0x000255, "Member 'FTedTelemetryPlayerMatchData::bMatchEndWasSent' has a wrong offset!");

// ScriptStruct Tempest.TedThemeMovie
// 0x0050 (0x0050 - 0x0000)
struct FTedThemeMovie final
{
public:
	TMap<ETedFaction, class UFileMediaSource*>    Movies;                                            // 0x0000(0x0050)(Edit, EditFixedSize, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedThemeMovie) == 0x000008, "Wrong alignment on FTedThemeMovie");
static_assert(sizeof(FTedThemeMovie) == 0x000050, "Wrong size on FTedThemeMovie");
static_assert(offsetof(FTedThemeMovie, Movies) == 0x000000, "Member 'FTedThemeMovie::Movies' has a wrong offset!");

// ScriptStruct Tempest.TedNewsTransitionConfig
// 0x0018 (0x0018 - 0x0000)
struct FTedNewsTransitionConfig final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   EaseFunction;                                      // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseBlendExp;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EaseSteps;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedNewsTransitionConfig) == 0x000008, "Wrong alignment on FTedNewsTransitionConfig");
static_assert(sizeof(FTedNewsTransitionConfig) == 0x000018, "Wrong size on FTedNewsTransitionConfig");
static_assert(offsetof(FTedNewsTransitionConfig, Duration) == 0x000000, "Member 'FTedNewsTransitionConfig::Duration' has a wrong offset!");
static_assert(offsetof(FTedNewsTransitionConfig, EaseFunction) == 0x000004, "Member 'FTedNewsTransitionConfig::EaseFunction' has a wrong offset!");
static_assert(offsetof(FTedNewsTransitionConfig, EaseBlendExp) == 0x000008, "Member 'FTedNewsTransitionConfig::EaseBlendExp' has a wrong offset!");
static_assert(offsetof(FTedNewsTransitionConfig, EaseSteps) == 0x00000C, "Member 'FTedNewsTransitionConfig::EaseSteps' has a wrong offset!");
static_assert(offsetof(FTedNewsTransitionConfig, Curve) == 0x000010, "Member 'FTedNewsTransitionConfig::Curve' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityProgressBiEvent_EventContext
// 0x0018 (0x0018 - 0x0000)
struct FServerMatchActivityProgressBiEvent_EventContext final
{
public:
	int32                                         activityMinute;                                    // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerMatchActivityProgressBiEvent_QuadrantsDetails> QuadrantsDetails;            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityProgressBiEvent_EventContext) == 0x000008, "Wrong alignment on FServerMatchActivityProgressBiEvent_EventContext");
static_assert(sizeof(FServerMatchActivityProgressBiEvent_EventContext) == 0x000018, "Wrong size on FServerMatchActivityProgressBiEvent_EventContext");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_EventContext, activityMinute) == 0x000000, "Member 'FServerMatchActivityProgressBiEvent_EventContext::activityMinute' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent_EventContext, QuadrantsDetails) == 0x000008, "Member 'FServerMatchActivityProgressBiEvent_EventContext::QuadrantsDetails' has a wrong offset!");

// ScriptStruct Tempest.TedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements
// 0x0118 (0x0118 - 0x0000)
struct FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements final
{
public:
	struct FTedPrerequisiteContainer              Prerequisite;                                      // 0x0000(0x0110)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   PrerequisiteComparison;                            // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements) == 0x000008, "Wrong alignment on FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements");
static_assert(sizeof(FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements) == 0x000118, "Wrong size on FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements");
static_assert(offsetof(FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements, Prerequisite) == 0x000000, "Member 'FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements::Prerequisite' has a wrong offset!");
static_assert(offsetof(FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements, ExpectedAmount) == 0x000110, "Member 'FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements, PrerequisiteComparison) == 0x000114, "Member 'FTedObjectiveCondition_HasPrerequisites_PrerequisiteRequirements::PrerequisiteComparison' has a wrong offset!");

// ScriptStruct Tempest.RepGraphActorClassSettings
// 0x0030 (0x0030 - 0x0000)
struct FRepGraphActorClassSettings final
{
public:
	struct FSoftClassPath                         ActorClass;                                        // 0x0000(0x0020)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddClassRepInfoToMap;                             // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EClassRepNodeMapping                          ClassNodeMapping;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddToRPC_Multicast_OpenChannelForClassMap;        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRPC_Multicast_OpenChannelForClass;                // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepGraphActorClassSettings) == 0x000008, "Wrong alignment on FRepGraphActorClassSettings");
static_assert(sizeof(FRepGraphActorClassSettings) == 0x000030, "Wrong size on FRepGraphActorClassSettings");
static_assert(offsetof(FRepGraphActorClassSettings, ActorClass) == 0x000000, "Member 'FRepGraphActorClassSettings::ActorClass' has a wrong offset!");
static_assert(offsetof(FRepGraphActorClassSettings, bAddClassRepInfoToMap) == 0x000020, "Member 'FRepGraphActorClassSettings::bAddClassRepInfoToMap' has a wrong offset!");
static_assert(offsetof(FRepGraphActorClassSettings, ClassNodeMapping) == 0x000024, "Member 'FRepGraphActorClassSettings::ClassNodeMapping' has a wrong offset!");
static_assert(offsetof(FRepGraphActorClassSettings, bAddToRPC_Multicast_OpenChannelForClassMap) == 0x000028, "Member 'FRepGraphActorClassSettings::bAddToRPC_Multicast_OpenChannelForClassMap' has a wrong offset!");
static_assert(offsetof(FRepGraphActorClassSettings, bRPC_Multicast_OpenChannelForClass) == 0x000029, "Member 'FRepGraphActorClassSettings::bRPC_Multicast_OpenChannelForClass' has a wrong offset!");

// ScriptStruct Tempest.TedObjectivePanelContent
// 0x0030 (0x0030 - 0x0000)
struct FTedObjectivePanelContent final
{
public:
	class UObject*                                content;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedObjectiveObj*                       ParentObjective;                                   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CachedDisplayText;                                 // 0x0018(0x0010)(NativeAccessSpecifierPublic)
	EObjectiveState                               State;                                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IndentLevel;                                       // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedObjectivePanelContent) == 0x000008, "Wrong alignment on FTedObjectivePanelContent");
static_assert(sizeof(FTedObjectivePanelContent) == 0x000030, "Wrong size on FTedObjectivePanelContent");
static_assert(offsetof(FTedObjectivePanelContent, content) == 0x000000, "Member 'FTedObjectivePanelContent::content' has a wrong offset!");
static_assert(offsetof(FTedObjectivePanelContent, ParentObjective) == 0x000008, "Member 'FTedObjectivePanelContent::ParentObjective' has a wrong offset!");
static_assert(offsetof(FTedObjectivePanelContent, SortOrder) == 0x000010, "Member 'FTedObjectivePanelContent::SortOrder' has a wrong offset!");
static_assert(offsetof(FTedObjectivePanelContent, CachedDisplayText) == 0x000018, "Member 'FTedObjectivePanelContent::CachedDisplayText' has a wrong offset!");
static_assert(offsetof(FTedObjectivePanelContent, State) == 0x000028, "Member 'FTedObjectivePanelContent::State' has a wrong offset!");
static_assert(offsetof(FTedObjectivePanelContent, IndentLevel) == 0x000029, "Member 'FTedObjectivePanelContent::IndentLevel' has a wrong offset!");

// ScriptStruct Tempest.TedObjectiveInstance
// 0x0020 (0x0020 - 0x0000)
struct FTedObjectiveInstance final
{
public:
	EObjectiveState                               State;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedObjectiveConditionBase*             Condition;                                         // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedObjectiveObj*                       Definition;                                        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedObjectiveObj*                       Parent;                                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedObjectiveInstance) == 0x000008, "Wrong alignment on FTedObjectiveInstance");
static_assert(sizeof(FTedObjectiveInstance) == 0x000020, "Wrong size on FTedObjectiveInstance");
static_assert(offsetof(FTedObjectiveInstance, State) == 0x000000, "Member 'FTedObjectiveInstance::State' has a wrong offset!");
static_assert(offsetof(FTedObjectiveInstance, Condition) == 0x000008, "Member 'FTedObjectiveInstance::Condition' has a wrong offset!");
static_assert(offsetof(FTedObjectiveInstance, Definition) == 0x000010, "Member 'FTedObjectiveInstance::Definition' has a wrong offset!");
static_assert(offsetof(FTedObjectiveInstance, Parent) == 0x000018, "Member 'FTedObjectiveInstance::Parent' has a wrong offset!");

// ScriptStruct Tempest.TedObjectiveAnnouncement
// 0x0058 (0x0058 - 0x0000)
struct FTedObjectiveAnnouncement final
{
public:
	ETedObjectiveAnnouncementType                 Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Primary;                                           // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Secondary;                                         // 0x0030(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedObjectiveAnnouncement) == 0x000008, "Wrong alignment on FTedObjectiveAnnouncement");
static_assert(sizeof(FTedObjectiveAnnouncement) == 0x000058, "Wrong size on FTedObjectiveAnnouncement");
static_assert(offsetof(FTedObjectiveAnnouncement, Type) == 0x000000, "Member 'FTedObjectiveAnnouncement::Type' has a wrong offset!");
static_assert(offsetof(FTedObjectiveAnnouncement, Primary) == 0x000008, "Member 'FTedObjectiveAnnouncement::Primary' has a wrong offset!");
static_assert(offsetof(FTedObjectiveAnnouncement, Secondary) == 0x000030, "Member 'FTedObjectiveAnnouncement::Secondary' has a wrong offset!");

// ScriptStruct Tempest.BuildingsStatistics_EnemyBuildingsDetails
// 0x0040 (0x0040 - 0x0000)
struct FBuildingsStatistics_EnemyBuildingsDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         interacted;                                        // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         destroyed;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dealtDmg;                                          // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotUnitDmg;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotUnitKills;                                      // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotBuildDmg;                                       // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotBuildKills;                                     // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingsStatistics_EnemyBuildingsDetails) == 0x000008, "Wrong alignment on FBuildingsStatistics_EnemyBuildingsDetails");
static_assert(sizeof(FBuildingsStatistics_EnemyBuildingsDetails) == 0x000040, "Wrong size on FBuildingsStatistics_EnemyBuildingsDetails");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, Name) == 0x000000, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::Name' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, Category) == 0x000010, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::Category' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, isMilitary) == 0x000020, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::isMilitary' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, interacted) == 0x000024, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::interacted' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, destroyed) == 0x000028, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::destroyed' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, dealtDmg) == 0x00002C, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::dealtDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, gotUnitDmg) == 0x000030, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::gotUnitDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, gotUnitKills) == 0x000034, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::gotUnitKills' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, gotBuildDmg) == 0x000038, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::gotBuildDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_EnemyBuildingsDetails, gotBuildKills) == 0x00003C, "Member 'FBuildingsStatistics_EnemyBuildingsDetails::gotBuildKills' has a wrong offset!");

// ScriptStruct Tempest.TedObjectiveCauseOfFailureData
// 0x0018 (0x0018 - 0x0000)
struct FTedObjectiveCauseOfFailureData final
{
public:
	class UTedObjectiveObj*                       ObjectiveCausingFailure;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ObjectiveTitleOverride;                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedObjectiveCauseOfFailureData) == 0x000008, "Wrong alignment on FTedObjectiveCauseOfFailureData");
static_assert(sizeof(FTedObjectiveCauseOfFailureData) == 0x000018, "Wrong size on FTedObjectiveCauseOfFailureData");
static_assert(offsetof(FTedObjectiveCauseOfFailureData, ObjectiveCausingFailure) == 0x000000, "Member 'FTedObjectiveCauseOfFailureData::ObjectiveCausingFailure' has a wrong offset!");
static_assert(offsetof(FTedObjectiveCauseOfFailureData, ObjectiveTitleOverride) == 0x000008, "Member 'FTedObjectiveCauseOfFailureData::ObjectiveTitleOverride' has a wrong offset!");

// ScriptStruct Tempest.TedOnlineFriendData
// 0x0048 (0x0048 - 0x0000)
struct FTedOnlineFriendData final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RealName;                                          // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraId;                                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedOnlineFriendState                         State;                                             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedOnlineFriendData) == 0x000008, "Wrong alignment on FTedOnlineFriendData");
static_assert(sizeof(FTedOnlineFriendData) == 0x000048, "Wrong size on FTedOnlineFriendData");
static_assert(offsetof(FTedOnlineFriendData, DisplayName) == 0x000000, "Member 'FTedOnlineFriendData::DisplayName' has a wrong offset!");
static_assert(offsetof(FTedOnlineFriendData, RealName) == 0x000010, "Member 'FTedOnlineFriendData::RealName' has a wrong offset!");
static_assert(offsetof(FTedOnlineFriendData, HydraId) == 0x000020, "Member 'FTedOnlineFriendData::HydraId' has a wrong offset!");
static_assert(offsetof(FTedOnlineFriendData, SteamId) == 0x000030, "Member 'FTedOnlineFriendData::SteamId' has a wrong offset!");
static_assert(offsetof(FTedOnlineFriendData, State) == 0x000040, "Member 'FTedOnlineFriendData::State' has a wrong offset!");

// ScriptStruct Tempest.TedGameStateData
// 0x0018 (0x0018 - 0x0000)
struct FTedGameStateData final
{
public:
	ETedGameState                                 GameState;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedServerType                                ServerType;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameStateData) == 0x000008, "Wrong alignment on FTedGameStateData");
static_assert(sizeof(FTedGameStateData) == 0x000018, "Wrong size on FTedGameStateData");
static_assert(offsetof(FTedGameStateData, GameState) == 0x000000, "Member 'FTedGameStateData::GameState' has a wrong offset!");
static_assert(offsetof(FTedGameStateData, ServerType) == 0x000001, "Member 'FTedGameStateData::ServerType' has a wrong offset!");
static_assert(offsetof(FTedGameStateData, MapName) == 0x000008, "Member 'FTedGameStateData::MapName' has a wrong offset!");

// ScriptStruct Tempest.TedGameInviteData
// 0x0040 (0x0040 - 0x0000)
struct FTedGameInviteData final
{
public:
	class FString                                 SteamId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinParty;                                        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PartyLeaderHydraId;                                // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJoinLobby;                                        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SessionString;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedGameInviteData) == 0x000008, "Wrong alignment on FTedGameInviteData");
static_assert(sizeof(FTedGameInviteData) == 0x000040, "Wrong size on FTedGameInviteData");
static_assert(offsetof(FTedGameInviteData, SteamId) == 0x000000, "Member 'FTedGameInviteData::SteamId' has a wrong offset!");
static_assert(offsetof(FTedGameInviteData, bJoinParty) == 0x000010, "Member 'FTedGameInviteData::bJoinParty' has a wrong offset!");
static_assert(offsetof(FTedGameInviteData, PartyLeaderHydraId) == 0x000018, "Member 'FTedGameInviteData::PartyLeaderHydraId' has a wrong offset!");
static_assert(offsetof(FTedGameInviteData, bJoinLobby) == 0x000028, "Member 'FTedGameInviteData::bJoinLobby' has a wrong offset!");
static_assert(offsetof(FTedGameInviteData, SessionString) == 0x000030, "Member 'FTedGameInviteData::SessionString' has a wrong offset!");

// ScriptStruct Tempest.MatchLoadout
// 0x0038 (0x0038 - 0x0000)
struct FMatchLoadout final
{
public:
	int32                                         freeArmoryCurrency;                                // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         armoryOpenSlots;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         armoryPerks;                                       // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         freeDoctrinePoints;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         doctrinePerks;                                     // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Spectators;                                        // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchLoadout) == 0x000008, "Wrong alignment on FMatchLoadout");
static_assert(sizeof(FMatchLoadout) == 0x000038, "Wrong size on FMatchLoadout");
static_assert(offsetof(FMatchLoadout, freeArmoryCurrency) == 0x000000, "Member 'FMatchLoadout::freeArmoryCurrency' has a wrong offset!");
static_assert(offsetof(FMatchLoadout, armoryOpenSlots) == 0x000004, "Member 'FMatchLoadout::armoryOpenSlots' has a wrong offset!");
static_assert(offsetof(FMatchLoadout, armoryPerks) == 0x000008, "Member 'FMatchLoadout::armoryPerks' has a wrong offset!");
static_assert(offsetof(FMatchLoadout, freeDoctrinePoints) == 0x000018, "Member 'FMatchLoadout::freeDoctrinePoints' has a wrong offset!");
static_assert(offsetof(FMatchLoadout, doctrinePerks) == 0x000020, "Member 'FMatchLoadout::doctrinePerks' has a wrong offset!");
static_assert(offsetof(FMatchLoadout, Spectators) == 0x000030, "Member 'FMatchLoadout::Spectators' has a wrong offset!");

// ScriptStruct Tempest.TedSpectatorInviteData
// 0x0018 (0x0018 - 0x0000)
struct FTedSpectatorInviteData final
{
public:
	class FString                                 ConnectionString;                                  // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatorsNum;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatorsMax;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSpectatorInviteData) == 0x000008, "Wrong alignment on FTedSpectatorInviteData");
static_assert(sizeof(FTedSpectatorInviteData) == 0x000018, "Wrong size on FTedSpectatorInviteData");
static_assert(offsetof(FTedSpectatorInviteData, ConnectionString) == 0x000000, "Member 'FTedSpectatorInviteData::ConnectionString' has a wrong offset!");
static_assert(offsetof(FTedSpectatorInviteData, SpectatorsNum) == 0x000010, "Member 'FTedSpectatorInviteData::SpectatorsNum' has a wrong offset!");
static_assert(offsetof(FTedSpectatorInviteData, SpectatorsMax) == 0x000014, "Member 'FTedSpectatorInviteData::SpectatorsMax' has a wrong offset!");

// ScriptStruct Tempest.TedSelectionDetailsGarrisonedPawnsBackground
// 0x00E0 (0x00E0 - 0x0000)
struct FTedSelectionDetailsGarrisonedPawnsBackground final
{
public:
	uint8                                         min_0;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         max_0;                                             // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0xE];                                        // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSelectionDetailsGarrisonedPawnsBackground) == 0x000010, "Wrong alignment on FTedSelectionDetailsGarrisonedPawnsBackground");
static_assert(sizeof(FTedSelectionDetailsGarrisonedPawnsBackground) == 0x0000E0, "Wrong size on FTedSelectionDetailsGarrisonedPawnsBackground");
static_assert(offsetof(FTedSelectionDetailsGarrisonedPawnsBackground, min_0) == 0x000000, "Member 'FTedSelectionDetailsGarrisonedPawnsBackground::min_0' has a wrong offset!");
static_assert(offsetof(FTedSelectionDetailsGarrisonedPawnsBackground, max_0) == 0x000001, "Member 'FTedSelectionDetailsGarrisonedPawnsBackground::max_0' has a wrong offset!");
static_assert(offsetof(FTedSelectionDetailsGarrisonedPawnsBackground, Brush) == 0x000010, "Member 'FTedSelectionDetailsGarrisonedPawnsBackground::Brush' has a wrong offset!");

// ScriptStruct Tempest.TedFriendStateChangeData
// 0x00A0 (0x00A0 - 0x0000)
struct FTedFriendStateChangeData final
{
public:
	uint64                                        SteamId;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFriendStateChangeType                     EventType;                                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x97];                                       // 0x0009(0x0097)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedFriendStateChangeData) == 0x000008, "Wrong alignment on FTedFriendStateChangeData");
static_assert(sizeof(FTedFriendStateChangeData) == 0x0000A0, "Wrong size on FTedFriendStateChangeData");
static_assert(offsetof(FTedFriendStateChangeData, SteamId) == 0x000000, "Member 'FTedFriendStateChangeData::SteamId' has a wrong offset!");
static_assert(offsetof(FTedFriendStateChangeData, EventType) == 0x000008, "Member 'FTedFriendStateChangeData::EventType' has a wrong offset!");

// ScriptStruct Tempest.TedConvertIdData
// 0x0020 (0x0020 - 0x0000)
struct FTedConvertIdData final
{
public:
	class FString                                 HydraId;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConvertIdData) == 0x000008, "Wrong alignment on FTedConvertIdData");
static_assert(sizeof(FTedConvertIdData) == 0x000020, "Wrong size on FTedConvertIdData");
static_assert(offsetof(FTedConvertIdData, HydraId) == 0x000000, "Member 'FTedConvertIdData::HydraId' has a wrong offset!");
static_assert(offsetof(FTedConvertIdData, SteamId) == 0x000010, "Member 'FTedConvertIdData::SteamId' has a wrong offset!");

// ScriptStruct Tempest.TedRankedMapState
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FTedRankedMapState final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedRankedMapState) == 0x000008, "Wrong alignment on FTedRankedMapState");
static_assert(sizeof(FTedRankedMapState) == 0x000010, "Wrong size on FTedRankedMapState");

// ScriptStruct Tempest.TedLevelPreloadScenario
// 0x0020 (0x0020 - 0x0000)
struct FTedLevelPreloadScenario final
{
public:
	TArray<struct FDirectoryPath>                 PathsToLoad;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                ObjectsToLoad;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLevelPreloadScenario) == 0x000008, "Wrong alignment on FTedLevelPreloadScenario");
static_assert(sizeof(FTedLevelPreloadScenario) == 0x000020, "Wrong size on FTedLevelPreloadScenario");
static_assert(offsetof(FTedLevelPreloadScenario, PathsToLoad) == 0x000000, "Member 'FTedLevelPreloadScenario::PathsToLoad' has a wrong offset!");
static_assert(offsetof(FTedLevelPreloadScenario, ObjectsToLoad) == 0x000010, "Member 'FTedLevelPreloadScenario::ObjectsToLoad' has a wrong offset!");

// ScriptStruct Tempest.TedScoreScreenGraphParticipantCharts
// 0x0050 (0x0050 - 0x0000)
struct FTedScoreScreenGraphParticipantCharts final
{
public:
	TMap<ETedPlayerDataStat, struct FTedChartData> Charts;                                           // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedScoreScreenGraphParticipantCharts) == 0x000008, "Wrong alignment on FTedScoreScreenGraphParticipantCharts");
static_assert(sizeof(FTedScoreScreenGraphParticipantCharts) == 0x000050, "Wrong size on FTedScoreScreenGraphParticipantCharts");
static_assert(offsetof(FTedScoreScreenGraphParticipantCharts, Charts) == 0x000000, "Member 'FTedScoreScreenGraphParticipantCharts::Charts' has a wrong offset!");

// ScriptStruct Tempest.PlayerHydraInfo
// 0x0040 (0x0040 - 0x0000)
struct FPlayerHydraInfo final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerHydraInfo) == 0x000008, "Wrong alignment on FPlayerHydraInfo");
static_assert(sizeof(FPlayerHydraInfo) == 0x000040, "Wrong size on FPlayerHydraInfo");
static_assert(offsetof(FPlayerHydraInfo, UserId) == 0x000000, "Member 'FPlayerHydraInfo::UserId' has a wrong offset!");
static_assert(offsetof(FPlayerHydraInfo, SessionId) == 0x000010, "Member 'FPlayerHydraInfo::SessionId' has a wrong offset!");
static_assert(offsetof(FPlayerHydraInfo, Platform) == 0x000020, "Member 'FPlayerHydraInfo::Platform' has a wrong offset!");
static_assert(offsetof(FPlayerHydraInfo, Provider) == 0x000030, "Member 'FPlayerHydraInfo::Provider' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryPlayerContext
// 0x0078 (0x0078 - 0x0000)
struct FTedTelemetryPlayerContext final
{
public:
	ETedPlayerID                                  PlayerID;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    Team;                                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   Faction;                                           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerHydraInfo                       HydraInfo;                                         // 0x0008(0x0040)(NativeAccessSpecifierPublic)
	uint8                                         StartingPositionIdx;                               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SlotName;                                          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBot;                                            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHost;                                           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTelemetryPlayerContext) == 0x000008, "Wrong alignment on FTedTelemetryPlayerContext");
static_assert(sizeof(FTedTelemetryPlayerContext) == 0x000078, "Wrong size on FTedTelemetryPlayerContext");
static_assert(offsetof(FTedTelemetryPlayerContext, PlayerID) == 0x000000, "Member 'FTedTelemetryPlayerContext::PlayerID' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, Team) == 0x000001, "Member 'FTedTelemetryPlayerContext::Team' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, Faction) == 0x000002, "Member 'FTedTelemetryPlayerContext::Faction' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, HydraInfo) == 0x000008, "Member 'FTedTelemetryPlayerContext::HydraInfo' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, StartingPositionIdx) == 0x000048, "Member 'FTedTelemetryPlayerContext::StartingPositionIdx' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, SlotName) == 0x000050, "Member 'FTedTelemetryPlayerContext::SlotName' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, Color) == 0x000060, "Member 'FTedTelemetryPlayerContext::Color' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, bIsBot) == 0x000070, "Member 'FTedTelemetryPlayerContext::bIsBot' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerContext, bIsHost) == 0x000071, "Member 'FTedTelemetryPlayerContext::bIsHost' has a wrong offset!");

// ScriptStruct Tempest.TedPerFactionQueueLimit
// 0x0030 (0x0030 - 0x0000)
struct FTedPerFactionQueueLimit final
{
public:
	ETedFaction                                   Faction;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AffectedFactories;                                 // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Limit;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPerFactionQueueLimit) == 0x000008, "Wrong alignment on FTedPerFactionQueueLimit");
static_assert(sizeof(FTedPerFactionQueueLimit) == 0x000030, "Wrong size on FTedPerFactionQueueLimit");
static_assert(offsetof(FTedPerFactionQueueLimit, Faction) == 0x000000, "Member 'FTedPerFactionQueueLimit::Faction' has a wrong offset!");
static_assert(offsetof(FTedPerFactionQueueLimit, AffectedFactories) == 0x000008, "Member 'FTedPerFactionQueueLimit::AffectedFactories' has a wrong offset!");
static_assert(offsetof(FTedPerFactionQueueLimit, Limit) == 0x000028, "Member 'FTedPerFactionQueueLimit::Limit' has a wrong offset!");

// ScriptStruct Tempest.TedLeaderboardUserRep
// 0x0020 (0x0020 - 0x0000)
struct FTedLeaderboardUserRep final
{
public:
	ETedPlayerID                                  PlayerID;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankedRow;                                         // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPlayerController*                   TempPC;                                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedLeaderboardUserRep) == 0x000008, "Wrong alignment on FTedLeaderboardUserRep");
static_assert(sizeof(FTedLeaderboardUserRep) == 0x000020, "Wrong size on FTedLeaderboardUserRep");
static_assert(offsetof(FTedLeaderboardUserRep, PlayerID) == 0x000000, "Member 'FTedLeaderboardUserRep::PlayerID' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUserRep, TeamID) == 0x000001, "Member 'FTedLeaderboardUserRep::TeamID' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUserRep, bIsWinner) == 0x000002, "Member 'FTedLeaderboardUserRep::bIsWinner' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUserRep, RankedRow) == 0x000008, "Member 'FTedLeaderboardUserRep::RankedRow' has a wrong offset!");
static_assert(offsetof(FTedLeaderboardUserRep, TempPC) == 0x000018, "Member 'FTedLeaderboardUserRep::TempPC' has a wrong offset!");

// ScriptStruct Tempest.LeaderboardCacheKey
// 0x0002 (0x0002 - 0x0000)
struct FLeaderboardCacheKey final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardCacheKey) == 0x000001, "Wrong alignment on FLeaderboardCacheKey");
static_assert(sizeof(FLeaderboardCacheKey) == 0x000002, "Wrong size on FLeaderboardCacheKey");

// ScriptStruct Tempest.TedOnlinePlayerProfileWidgetContextParams
// 0x0010 (0x0010 - 0x0000)
struct FTedOnlinePlayerProfileWidgetContextParams final
{
public:
	bool                                          bWasOpenedFromLeaderboards;                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ScrollToPage;                                      // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowBackgroundShadow;                             // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedOnlinePlayerProfileWidgetContextParams) == 0x000004, "Wrong alignment on FTedOnlinePlayerProfileWidgetContextParams");
static_assert(sizeof(FTedOnlinePlayerProfileWidgetContextParams) == 0x000010, "Wrong size on FTedOnlinePlayerProfileWidgetContextParams");
static_assert(offsetof(FTedOnlinePlayerProfileWidgetContextParams, bWasOpenedFromLeaderboards) == 0x000000, "Member 'FTedOnlinePlayerProfileWidgetContextParams::bWasOpenedFromLeaderboards' has a wrong offset!");
static_assert(offsetof(FTedOnlinePlayerProfileWidgetContextParams, ScrollToPage) == 0x000004, "Member 'FTedOnlinePlayerProfileWidgetContextParams::ScrollToPage' has a wrong offset!");
static_assert(offsetof(FTedOnlinePlayerProfileWidgetContextParams, bShowBackgroundShadow) == 0x00000C, "Member 'FTedOnlinePlayerProfileWidgetContextParams::bShowBackgroundShadow' has a wrong offset!");

// ScriptStruct Tempest.CursorTraceResult
// 0x0048 (0x0048 - 0x0000)
struct FCursorTraceResult final
{
public:
	bool                                          bHasValidLocation;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TileCenter;                                        // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          TileCoords;                                        // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCursorTraceResult) == 0x000008, "Wrong alignment on FCursorTraceResult");
static_assert(sizeof(FCursorTraceResult) == 0x000048, "Wrong size on FCursorTraceResult");
static_assert(offsetof(FCursorTraceResult, bHasValidLocation) == 0x000000, "Member 'FCursorTraceResult::bHasValidLocation' has a wrong offset!");
static_assert(offsetof(FCursorTraceResult, Location) == 0x000008, "Member 'FCursorTraceResult::Location' has a wrong offset!");
static_assert(offsetof(FCursorTraceResult, TileCenter) == 0x000020, "Member 'FCursorTraceResult::TileCenter' has a wrong offset!");
static_assert(offsetof(FCursorTraceResult, TileCoords) == 0x000038, "Member 'FCursorTraceResult::TileCoords' has a wrong offset!");
static_assert(offsetof(FCursorTraceResult, Actor) == 0x000040, "Member 'FCursorTraceResult::Actor' has a wrong offset!");

// ScriptStruct Tempest.TedUserLastMatchStats
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTedUserLastMatchStats final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUserLastMatchStats) == 0x000004, "Wrong alignment on FTedUserLastMatchStats");
static_assert(sizeof(FTedUserLastMatchStats) == 0x00000C, "Wrong size on FTedUserLastMatchStats");

// ScriptStruct Tempest.InterpolationInfo
// 0x00D0 (0x00D0 - 0x0000)
struct alignas(0x10) FInterpolationInfo final
{
public:
	uint8                                         Pad_0[0xD0];                                       // 0x0000(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInterpolationInfo) == 0x000010, "Wrong alignment on FInterpolationInfo");
static_assert(sizeof(FInterpolationInfo) == 0x0000D0, "Wrong size on FInterpolationInfo");

// ScriptStruct Tempest.TedReconnectPlayerStateInfo
// 0x0010 (0x0010 - 0x0000)
struct FTedReconnectPlayerStateInfo final
{
public:
	class APlayerState*                           InactivePS;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              DisconnectTime;                                    // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedReconnectPlayerStateInfo) == 0x000008, "Wrong alignment on FTedReconnectPlayerStateInfo");
static_assert(sizeof(FTedReconnectPlayerStateInfo) == 0x000010, "Wrong size on FTedReconnectPlayerStateInfo");
static_assert(offsetof(FTedReconnectPlayerStateInfo, InactivePS) == 0x000000, "Member 'FTedReconnectPlayerStateInfo::InactivePS' has a wrong offset!");
static_assert(offsetof(FTedReconnectPlayerStateInfo, DisconnectTime) == 0x000008, "Member 'FTedReconnectPlayerStateInfo::DisconnectTime' has a wrong offset!");

// ScriptStruct Tempest.TedReconnectTimers
// 0x0020 (0x0020 - 0x0000)
struct FTedReconnectTimers final
{
public:
	float                                         TotalReconnectTime;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalReconnectTime_Ranked;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ReconnectInterval;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalPostDisconnectTime;                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalDeliDiscInfoTime;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TotalServerAckTime;                                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxDisconnectsForPlayer;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxDisconnectsTimeSpan;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedReconnectTimers) == 0x000004, "Wrong alignment on FTedReconnectTimers");
static_assert(sizeof(FTedReconnectTimers) == 0x000020, "Wrong size on FTedReconnectTimers");
static_assert(offsetof(FTedReconnectTimers, TotalReconnectTime) == 0x000000, "Member 'FTedReconnectTimers::TotalReconnectTime' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, TotalReconnectTime_Ranked) == 0x000004, "Member 'FTedReconnectTimers::TotalReconnectTime_Ranked' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, ReconnectInterval) == 0x000008, "Member 'FTedReconnectTimers::ReconnectInterval' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, TotalPostDisconnectTime) == 0x00000C, "Member 'FTedReconnectTimers::TotalPostDisconnectTime' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, TotalDeliDiscInfoTime) == 0x000010, "Member 'FTedReconnectTimers::TotalDeliDiscInfoTime' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, TotalServerAckTime) == 0x000014, "Member 'FTedReconnectTimers::TotalServerAckTime' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, MaxDisconnectsForPlayer) == 0x000018, "Member 'FTedReconnectTimers::MaxDisconnectsForPlayer' has a wrong offset!");
static_assert(offsetof(FTedReconnectTimers, MaxDisconnectsTimeSpan) == 0x00001C, "Member 'FTedReconnectTimers::MaxDisconnectsTimeSpan' has a wrong offset!");

// ScriptStruct Tempest.TedReconnectMatchConfig
// 0x0003 (0x0003 - 0x0000)
struct FTedReconnectMatchConfig final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                RankedTeam;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPostDisconnectBehavior                    PostDisconnectBehavior;                            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedReconnectMatchConfig) == 0x000001, "Wrong alignment on FTedReconnectMatchConfig");
static_assert(sizeof(FTedReconnectMatchConfig) == 0x000003, "Wrong size on FTedReconnectMatchConfig");
static_assert(offsetof(FTedReconnectMatchConfig, ServerType) == 0x000000, "Member 'FTedReconnectMatchConfig::ServerType' has a wrong offset!");
static_assert(offsetof(FTedReconnectMatchConfig, RankedTeam) == 0x000001, "Member 'FTedReconnectMatchConfig::RankedTeam' has a wrong offset!");
static_assert(offsetof(FTedReconnectMatchConfig, PostDisconnectBehavior) == 0x000002, "Member 'FTedReconnectMatchConfig::PostDisconnectBehavior' has a wrong offset!");

// ScriptStruct Tempest.MetaStates
// 0x0018 (0x0018 - 0x0000)
struct FMetaStates final
{
public:
	int32                                         campaignMatches;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unrankedMatches;                                   // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unrankedWinrate;                                   // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankedMatches;                                     // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         rankedWinrate;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMR;                                               // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMetaStates) == 0x000004, "Wrong alignment on FMetaStates");
static_assert(sizeof(FMetaStates) == 0x000018, "Wrong size on FMetaStates");
static_assert(offsetof(FMetaStates, campaignMatches) == 0x000000, "Member 'FMetaStates::campaignMatches' has a wrong offset!");
static_assert(offsetof(FMetaStates, unrankedMatches) == 0x000004, "Member 'FMetaStates::unrankedMatches' has a wrong offset!");
static_assert(offsetof(FMetaStates, unrankedWinrate) == 0x000008, "Member 'FMetaStates::unrankedWinrate' has a wrong offset!");
static_assert(offsetof(FMetaStates, rankedMatches) == 0x00000C, "Member 'FMetaStates::rankedMatches' has a wrong offset!");
static_assert(offsetof(FMetaStates, rankedWinrate) == 0x000010, "Member 'FMetaStates::rankedWinrate' has a wrong offset!");
static_assert(offsetof(FMetaStates, MMR) == 0x000014, "Member 'FMetaStates::MMR' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryPlayerData
// 0x02E8 (0x02E8 - 0x0000)
struct FTedTelemetryPlayerData final
{
public:
	struct FTedTelemetryPlayerContext             Context;                                           // 0x0000(0x0078)(NativeAccessSpecifierPublic)
	struct FMetaStates                            Rankings;                                          // 0x0078(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
	struct FTedTelemetryPlayerMatchData           MatchData;                                         // 0x0090(0x0258)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryPlayerData) == 0x000008, "Wrong alignment on FTedTelemetryPlayerData");
static_assert(sizeof(FTedTelemetryPlayerData) == 0x0002E8, "Wrong size on FTedTelemetryPlayerData");
static_assert(offsetof(FTedTelemetryPlayerData, Context) == 0x000000, "Member 'FTedTelemetryPlayerData::Context' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerData, Rankings) == 0x000078, "Member 'FTedTelemetryPlayerData::Rankings' has a wrong offset!");
static_assert(offsetof(FTedTelemetryPlayerData, MatchData) == 0x000090, "Member 'FTedTelemetryPlayerData::MatchData' has a wrong offset!");

// ScriptStruct Tempest.TedOnlineSessionPlayerContent
// 0x0018 (0x0018 - 0x0000)
struct FTedOnlineSessionPlayerContent final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class ALobbyBeaconPlayerState*                LobbyPlayerState;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedOnlineSessionPlayerContent) == 0x000008, "Wrong alignment on FTedOnlineSessionPlayerContent");
static_assert(sizeof(FTedOnlineSessionPlayerContent) == 0x000018, "Wrong size on FTedOnlineSessionPlayerContent");
static_assert(offsetof(FTedOnlineSessionPlayerContent, Name) == 0x000000, "Member 'FTedOnlineSessionPlayerContent::Name' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionPlayerContent, LobbyPlayerState) == 0x000010, "Member 'FTedOnlineSessionPlayerContent::LobbyPlayerState' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerSettingsBiEvent_Motd
// 0x0001 (0x0001 - 0x0000)
struct FClientBannerSettingsBiEvent_Motd final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerSettingsBiEvent_Motd) == 0x000001, "Wrong alignment on FClientBannerSettingsBiEvent_Motd");
static_assert(sizeof(FClientBannerSettingsBiEvent_Motd) == 0x000001, "Wrong size on FClientBannerSettingsBiEvent_Motd");
static_assert(offsetof(FClientBannerSettingsBiEvent_Motd, IsOpen) == 0x000000, "Member 'FClientBannerSettingsBiEvent_Motd::IsOpen' has a wrong offset!");

// ScriptStruct Tempest.TedOnlineSessionSettingsContent
// 0x0040 (0x0040 - 0x0000)
struct FTedOnlineSessionSettingsContent final
{
public:
	ETedSessionSettingKey                         Key_SessionSetting;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   Key_MemberSetting;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FText>                           AvailableValues;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bNumeric : 1;                                      // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bImplemented : 1;                                  // 0x0038(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedOnlineSessionSettingsContent) == 0x000008, "Wrong alignment on FTedOnlineSessionSettingsContent");
static_assert(sizeof(FTedOnlineSessionSettingsContent) == 0x000040, "Wrong size on FTedOnlineSessionSettingsContent");
static_assert(offsetof(FTedOnlineSessionSettingsContent, Key_SessionSetting) == 0x000000, "Member 'FTedOnlineSessionSettingsContent::Key_SessionSetting' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionSettingsContent, Key_MemberSetting) == 0x000001, "Member 'FTedOnlineSessionSettingsContent::Key_MemberSetting' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionSettingsContent, Text) == 0x000008, "Member 'FTedOnlineSessionSettingsContent::Text' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionSettingsContent, Description) == 0x000018, "Member 'FTedOnlineSessionSettingsContent::Description' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionSettingsContent, AvailableValues) == 0x000028, "Member 'FTedOnlineSessionSettingsContent::AvailableValues' has a wrong offset!");
static_assert(offsetof(FTedOnlineSessionSettingsContent, Value) == 0x00003C, "Member 'FTedOnlineSessionSettingsContent::Value' has a wrong offset!");

// ScriptStruct Tempest.TedOnlineSessionSettingsWrapper
// 0x0001 (0x0001 - 0x0000)
struct FTedOnlineSessionSettingsWrapper
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedOnlineSessionSettingsWrapper) == 0x000001, "Wrong alignment on FTedOnlineSessionSettingsWrapper");
static_assert(sizeof(FTedOnlineSessionSettingsWrapper) == 0x000001, "Wrong size on FTedOnlineSessionSettingsWrapper");
static_assert(offsetof(FTedOnlineSessionSettingsWrapper, ServerType) == 0x000000, "Member 'FTedOnlineSessionSettingsWrapper::ServerType' has a wrong offset!");

// ScriptStruct Tempest.TedHostOnlineSessionSettingsWrapper
// 0x0067 (0x0068 - 0x0001)
struct FTedHostOnlineSessionSettingsWrapper final : public FTedOnlineSessionSettingsWrapper
{
public:
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapInfoPath;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostName;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Players;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Spectators;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyPassword;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedHostOnlineSessionSettingsWrapper) == 0x000008, "Wrong alignment on FTedHostOnlineSessionSettingsWrapper");
static_assert(sizeof(FTedHostOnlineSessionSettingsWrapper) == 0x000068, "Wrong size on FTedHostOnlineSessionSettingsWrapper");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, MapInfoPath) == 0x000008, "Member 'FTedHostOnlineSessionSettingsWrapper::MapInfoPath' has a wrong offset!");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, HostName) == 0x000018, "Member 'FTedHostOnlineSessionSettingsWrapper::HostName' has a wrong offset!");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, Players) == 0x000028, "Member 'FTedHostOnlineSessionSettingsWrapper::Players' has a wrong offset!");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, Spectators) == 0x00002C, "Member 'FTedHostOnlineSessionSettingsWrapper::Spectators' has a wrong offset!");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, LobbyName) == 0x000030, "Member 'FTedHostOnlineSessionSettingsWrapper::LobbyName' has a wrong offset!");
static_assert(offsetof(FTedHostOnlineSessionSettingsWrapper, LobbyPassword) == 0x000040, "Member 'FTedHostOnlineSessionSettingsWrapper::LobbyPassword' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataTagDislpayName
// 0x0018 (0x0018 - 0x0000)
struct FTedPlayerDataTagDislpayName final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Name;                                              // 0x0008(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataTagDislpayName) == 0x000008, "Wrong alignment on FTedPlayerDataTagDislpayName");
static_assert(sizeof(FTedPlayerDataTagDislpayName) == 0x000018, "Wrong size on FTedPlayerDataTagDislpayName");
static_assert(offsetof(FTedPlayerDataTagDislpayName, Tag) == 0x000000, "Member 'FTedPlayerDataTagDislpayName::Tag' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataTagDislpayName, Name) == 0x000008, "Member 'FTedPlayerDataTagDislpayName::Name' has a wrong offset!");

// ScriptStruct Tempest.TedOnlineSessionSearchResultWrappper
// 0x0120 (0x0120 - 0x0000)
struct alignas(0x08) FTedOnlineSessionSearchResultWrappper final
{
public:
	uint8                                         Pad_0[0x120];                                      // 0x0000(0x0120)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedOnlineSessionSearchResultWrappper) == 0x000008, "Wrong alignment on FTedOnlineSessionSearchResultWrappper");
static_assert(sizeof(FTedOnlineSessionSearchResultWrappper) == 0x000120, "Wrong size on FTedOnlineSessionSearchResultWrappper");

// ScriptStruct Tempest.TedStructureMIDParameterValues
// 0x00F0 (0x00F0 - 0x0000)
struct FTedStructureMIDParameterValues final
{
public:
	TMap<struct FMaterialParameterInfo, float>    ScalarParameterValues;                             // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FMaterialParameterInfo, struct FLinearColor> VectorParameterValues;                  // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<struct FMaterialParameterInfo, TSoftObjectPtr<class UTexture>> TextureParameterValues;      // 0x00A0(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureMIDParameterValues) == 0x000008, "Wrong alignment on FTedStructureMIDParameterValues");
static_assert(sizeof(FTedStructureMIDParameterValues) == 0x0000F0, "Wrong size on FTedStructureMIDParameterValues");
static_assert(offsetof(FTedStructureMIDParameterValues, ScalarParameterValues) == 0x000000, "Member 'FTedStructureMIDParameterValues::ScalarParameterValues' has a wrong offset!");
static_assert(offsetof(FTedStructureMIDParameterValues, VectorParameterValues) == 0x000050, "Member 'FTedStructureMIDParameterValues::VectorParameterValues' has a wrong offset!");
static_assert(offsetof(FTedStructureMIDParameterValues, TextureParameterValues) == 0x0000A0, "Member 'FTedStructureMIDParameterValues::TextureParameterValues' has a wrong offset!");

// ScriptStruct Tempest.TedSessionSetting
// 0x001C (0x0028 - 0x000C)
struct alignas(0x08) FTedSessionSetting final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x1C];                                       // 0x000C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedSessionSetting) == 0x000008, "Wrong alignment on FTedSessionSetting");
static_assert(sizeof(FTedSessionSetting) == 0x000028, "Wrong size on FTedSessionSetting");

// ScriptStruct Tempest.TedSessionSettingArray
// 0x0010 (0x0118 - 0x0108)
struct FTedSessionSettingArray final : public FFastArraySerializer
{
public:
	TArray<struct FTedSessionSetting>             Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSessionSettingArray) == 0x000008, "Wrong alignment on FTedSessionSettingArray");
static_assert(sizeof(FTedSessionSettingArray) == 0x000118, "Wrong size on FTedSessionSettingArray");
static_assert(offsetof(FTedSessionSettingArray, Items) == 0x000108, "Member 'FTedSessionSettingArray::Items' has a wrong offset!");

// ScriptStruct Tempest.TedSessionMemberSetting
// 0x001C (0x0028 - 0x000C)
struct alignas(0x08) FTedSessionMemberSetting final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x1C];                                       // 0x000C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedSessionMemberSetting) == 0x000008, "Wrong alignment on FTedSessionMemberSetting");
static_assert(sizeof(FTedSessionMemberSetting) == 0x000028, "Wrong size on FTedSessionMemberSetting");

// ScriptStruct Tempest.TedAlwaysRelevantActorInfo
// 0x0018 (0x0018 - 0x0000)
struct FTedAlwaysRelevantActorInfo final
{
public:
	class UNetConnection*                         Connection;                                        // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LastViewer;                                        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 LastViewTarget;                                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedAlwaysRelevantActorInfo) == 0x000008, "Wrong alignment on FTedAlwaysRelevantActorInfo");
static_assert(sizeof(FTedAlwaysRelevantActorInfo) == 0x000018, "Wrong size on FTedAlwaysRelevantActorInfo");
static_assert(offsetof(FTedAlwaysRelevantActorInfo, Connection) == 0x000000, "Member 'FTedAlwaysRelevantActorInfo::Connection' has a wrong offset!");
static_assert(offsetof(FTedAlwaysRelevantActorInfo, LastViewer) == 0x000008, "Member 'FTedAlwaysRelevantActorInfo::LastViewer' has a wrong offset!");
static_assert(offsetof(FTedAlwaysRelevantActorInfo, LastViewTarget) == 0x000010, "Member 'FTedAlwaysRelevantActorInfo::LastViewTarget' has a wrong offset!");

// ScriptStruct Tempest.TedSessionMemberSettingArray
// 0x0010 (0x0118 - 0x0108)
struct FTedSessionMemberSettingArray final : public FFastArraySerializer
{
public:
	TArray<struct FTedSessionMemberSetting>       Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSessionMemberSettingArray) == 0x000008, "Wrong alignment on FTedSessionMemberSettingArray");
static_assert(sizeof(FTedSessionMemberSettingArray) == 0x000118, "Wrong size on FTedSessionMemberSettingArray");
static_assert(offsetof(FTedSessionMemberSettingArray, Items) == 0x000108, "Member 'FTedSessionMemberSettingArray::Items' has a wrong offset!");

// ScriptStruct Tempest.ClientDlcConfirmedBiEvent_Dlc
// 0x0010 (0x0010 - 0x0000)
struct FClientDlcConfirmedBiEvent_Dlc final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDlcConfirmedBiEvent_Dlc) == 0x000008, "Wrong alignment on FClientDlcConfirmedBiEvent_Dlc");
static_assert(sizeof(FClientDlcConfirmedBiEvent_Dlc) == 0x000010, "Wrong size on FClientDlcConfirmedBiEvent_Dlc");
static_assert(offsetof(FClientDlcConfirmedBiEvent_Dlc, Name) == 0x000000, "Member 'FClientDlcConfirmedBiEvent_Dlc::Name' has a wrong offset!");

// ScriptStruct Tempest.ClientDlcConfirmedBiEvent
// 0x0010 (0x0010 - 0x0000)
struct FClientDlcConfirmedBiEvent final
{
public:
	struct FClientDlcConfirmedBiEvent_Dlc         dlc;                                               // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDlcConfirmedBiEvent) == 0x000008, "Wrong alignment on FClientDlcConfirmedBiEvent");
static_assert(sizeof(FClientDlcConfirmedBiEvent) == 0x000010, "Wrong size on FClientDlcConfirmedBiEvent");
static_assert(offsetof(FClientDlcConfirmedBiEvent, dlc) == 0x000000, "Member 'FClientDlcConfirmedBiEvent::dlc' has a wrong offset!");

// ScriptStruct Tempest.TedSessionMemberSettingsContainer
// 0x0124 (0x0130 - 0x000C)
struct FTedSessionMemberSettingsContainer final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedSessionMemberSettingArray          Settings;                                          // 0x0010(0x0118)(NativeAccessSpecifierPrivate)
	class ALobbyBeaconPlayerState*                PlayerState;                                       // 0x0128(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedSessionMemberSettingsContainer) == 0x000008, "Wrong alignment on FTedSessionMemberSettingsContainer");
static_assert(sizeof(FTedSessionMemberSettingsContainer) == 0x000130, "Wrong size on FTedSessionMemberSettingsContainer");
static_assert(offsetof(FTedSessionMemberSettingsContainer, Settings) == 0x000010, "Member 'FTedSessionMemberSettingsContainer::Settings' has a wrong offset!");
static_assert(offsetof(FTedSessionMemberSettingsContainer, PlayerState) == 0x000128, "Member 'FTedSessionMemberSettingsContainer::PlayerState' has a wrong offset!");

// ScriptStruct Tempest.TedSessionMemberSettingsContainerArray
// 0x0010 (0x0118 - 0x0108)
struct FTedSessionMemberSettingsContainerArray final : public FFastArraySerializer
{
public:
	TArray<struct FTedSessionMemberSettingsContainer> Items;                                         // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSessionMemberSettingsContainerArray) == 0x000008, "Wrong alignment on FTedSessionMemberSettingsContainerArray");
static_assert(sizeof(FTedSessionMemberSettingsContainerArray) == 0x000118, "Wrong size on FTedSessionMemberSettingsContainerArray");
static_assert(offsetof(FTedSessionMemberSettingsContainerArray, Items) == 0x000108, "Member 'FTedSessionMemberSettingsContainerArray::Items' has a wrong offset!");

// ScriptStruct Tempest.LobbyStatusMemberData
// 0x0050 (0x0050 - 0x0000)
struct FLobbyStatusMemberData final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    TeamID;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UniqueID;                                          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HydraId;                                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdmin;                                            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLobbyStatusMemberData) == 0x000008, "Wrong alignment on FLobbyStatusMemberData");
static_assert(sizeof(FLobbyStatusMemberData) == 0x000050, "Wrong size on FLobbyStatusMemberData");
static_assert(offsetof(FLobbyStatusMemberData, DisplayName) == 0x000000, "Member 'FLobbyStatusMemberData::DisplayName' has a wrong offset!");
static_assert(offsetof(FLobbyStatusMemberData, TeamID) == 0x000010, "Member 'FLobbyStatusMemberData::TeamID' has a wrong offset!");
static_assert(offsetof(FLobbyStatusMemberData, UniqueID) == 0x000018, "Member 'FLobbyStatusMemberData::UniqueID' has a wrong offset!");
static_assert(offsetof(FLobbyStatusMemberData, HydraId) == 0x000028, "Member 'FLobbyStatusMemberData::HydraId' has a wrong offset!");
static_assert(offsetof(FLobbyStatusMemberData, SteamId) == 0x000038, "Member 'FLobbyStatusMemberData::SteamId' has a wrong offset!");
static_assert(offsetof(FLobbyStatusMemberData, bAdmin) == 0x000048, "Member 'FLobbyStatusMemberData::bAdmin' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatEntries
// 0x0018 (0x0018 - 0x0000)
struct FTedPlayerDataStatEntries final
{
public:
	struct FGameplayTag                           ContextTag;                                        // 0x0000(0x0008)(SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTedPlayerDataStatEntry>        Entries;                                           // 0x0008(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataStatEntries) == 0x000008, "Wrong alignment on FTedPlayerDataStatEntries");
static_assert(sizeof(FTedPlayerDataStatEntries) == 0x000018, "Wrong size on FTedPlayerDataStatEntries");
static_assert(offsetof(FTedPlayerDataStatEntries, ContextTag) == 0x000000, "Member 'FTedPlayerDataStatEntries::ContextTag' has a wrong offset!");
static_assert(offsetof(FTedPlayerDataStatEntries, Entries) == 0x000008, "Member 'FTedPlayerDataStatEntries::Entries' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatContainer
// 0x0010 (0x0010 - 0x0000)
struct FTedPlayerDataStatContainer final
{
public:
	TArray<struct FTedPlayerDataStatEntries>      Stats;                                             // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataStatContainer) == 0x000008, "Wrong alignment on FTedPlayerDataStatContainer");
static_assert(sizeof(FTedPlayerDataStatContainer) == 0x000010, "Wrong size on FTedPlayerDataStatContainer");
static_assert(offsetof(FTedPlayerDataStatContainer, Stats) == 0x000000, "Member 'FTedPlayerDataStatContainer::Stats' has a wrong offset!");

// ScriptStruct Tempest.TedBackendLayerSettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTedBackendLayerSettings final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedBackendLayerSettings) == 0x000008, "Wrong alignment on FTedBackendLayerSettings");
static_assert(sizeof(FTedBackendLayerSettings) == 0x000018, "Wrong size on FTedBackendLayerSettings");

// ScriptStruct Tempest.BuildingsStatistics_PlayerBuildingsDetails
// 0x0058 (0x0058 - 0x0000)
struct FBuildingsStatistics_PlayerBuildingsDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          isMilitary;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Created;                                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         cost;                                              // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lost;                                              // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         sold;                                              // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitDmg;                                           // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         unitKills;                                         // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildDmg;                                          // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         buildKills;                                        // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         receivedDmg;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         dealtHeal;                                         // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         receivedHeal;                                      // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         upgrades;                                          // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBuildingsStatistics_PlayerBuildingsDetails) == 0x000008, "Wrong alignment on FBuildingsStatistics_PlayerBuildingsDetails");
static_assert(sizeof(FBuildingsStatistics_PlayerBuildingsDetails) == 0x000058, "Wrong size on FBuildingsStatistics_PlayerBuildingsDetails");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, Name) == 0x000000, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::Name' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, Category) == 0x000010, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::Category' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, isMilitary) == 0x000020, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::isMilitary' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, Created) == 0x000024, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::Created' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, cost) == 0x000028, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::cost' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, Lost) == 0x00002C, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::Lost' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, sold) == 0x000030, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::sold' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, unitDmg) == 0x000034, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::unitDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, unitKills) == 0x000038, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::unitKills' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, buildDmg) == 0x00003C, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::buildDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, buildKills) == 0x000040, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::buildKills' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, receivedDmg) == 0x000044, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::receivedDmg' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, dealtHeal) == 0x000048, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::dealtHeal' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, receivedHeal) == 0x00004C, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::receivedHeal' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics_PlayerBuildingsDetails, upgrades) == 0x000050, "Member 'FBuildingsStatistics_PlayerBuildingsDetails::upgrades' has a wrong offset!");

// ScriptStruct Tempest.BuildingsStatistics
// 0x0020 (0x0020 - 0x0000)
struct FBuildingsStatistics final
{
public:
	TArray<struct FBuildingsStatistics_PlayerBuildingsDetails> playerBuildingsDetails;               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuildingsStatistics_EnemyBuildingsDetails> enemyBuildingsDetails;                 // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBuildingsStatistics) == 0x000008, "Wrong alignment on FBuildingsStatistics");
static_assert(sizeof(FBuildingsStatistics) == 0x000020, "Wrong size on FBuildingsStatistics");
static_assert(offsetof(FBuildingsStatistics, playerBuildingsDetails) == 0x000000, "Member 'FBuildingsStatistics::playerBuildingsDetails' has a wrong offset!");
static_assert(offsetof(FBuildingsStatistics, enemyBuildingsDetails) == 0x000010, "Member 'FBuildingsStatistics::enemyBuildingsDetails' has a wrong offset!");

// ScriptStruct Tempest.TedPartyRemoteActionData
// 0x0002 (0x0002 - 0x0000)
struct FTedPartyRemoteActionData final
{
public:
	ETedPartyRemoteActionType                     ActionType;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   FactionType;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPartyRemoteActionData) == 0x000001, "Wrong alignment on FTedPartyRemoteActionData");
static_assert(sizeof(FTedPartyRemoteActionData) == 0x000002, "Wrong size on FTedPartyRemoteActionData");
static_assert(offsetof(FTedPartyRemoteActionData, ActionType) == 0x000000, "Member 'FTedPartyRemoteActionData::ActionType' has a wrong offset!");
static_assert(offsetof(FTedPartyRemoteActionData, FactionType) == 0x000001, "Member 'FTedPartyRemoteActionData::FactionType' has a wrong offset!");

// ScriptStruct Tempest.PatrolPointPreview
// 0x0030 (0x0030 - 0x0000)
struct FPatrolPointPreview final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     PatrolPointIndicator;                              // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     BeamIndicator;                                     // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ATedPawnCommandPreview_Patrol> Command;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolPointPreview) == 0x000008, "Wrong alignment on FPatrolPointPreview");
static_assert(sizeof(FPatrolPointPreview) == 0x000030, "Wrong size on FPatrolPointPreview");
static_assert(offsetof(FPatrolPointPreview, Location) == 0x000000, "Member 'FPatrolPointPreview::Location' has a wrong offset!");
static_assert(offsetof(FPatrolPointPreview, PatrolPointIndicator) == 0x000018, "Member 'FPatrolPointPreview::PatrolPointIndicator' has a wrong offset!");
static_assert(offsetof(FPatrolPointPreview, BeamIndicator) == 0x000020, "Member 'FPatrolPointPreview::BeamIndicator' has a wrong offset!");
static_assert(offsetof(FPatrolPointPreview, Command) == 0x000028, "Member 'FPatrolPointPreview::Command' has a wrong offset!");

// ScriptStruct Tempest.PatrolPointWrapper
// 0x0018 (0x0018 - 0x0000)
struct FPatrolPointWrapper final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPatrolPointPreview>            Patrol;                                            // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPatrolPointWrapper) == 0x000008, "Wrong alignment on FPatrolPointWrapper");
static_assert(sizeof(FPatrolPointWrapper) == 0x000018, "Wrong size on FPatrolPointWrapper");
static_assert(offsetof(FPatrolPointWrapper, Patrol) == 0x000008, "Member 'FPatrolPointWrapper::Patrol' has a wrong offset!");

// ScriptStruct Tempest.CrystalParticleConfig
// 0x0018 (0x0018 - 0x0000)
struct FCrystalParticleConfig final
{
public:
	class UParticleSystem*                        ParticleSystem;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityPerResourceTile;                            // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterPlacementProbability;                        // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOffset;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrystalParticleConfig) == 0x000008, "Wrong alignment on FCrystalParticleConfig");
static_assert(sizeof(FCrystalParticleConfig) == 0x000018, "Wrong size on FCrystalParticleConfig");
static_assert(offsetof(FCrystalParticleConfig, ParticleSystem) == 0x000000, "Member 'FCrystalParticleConfig::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FCrystalParticleConfig, DensityPerResourceTile) == 0x000008, "Member 'FCrystalParticleConfig::DensityPerResourceTile' has a wrong offset!");
static_assert(offsetof(FCrystalParticleConfig, CenterPlacementProbability) == 0x00000C, "Member 'FCrystalParticleConfig::CenterPlacementProbability' has a wrong offset!");
static_assert(offsetof(FCrystalParticleConfig, ZOffset) == 0x000010, "Member 'FCrystalParticleConfig::ZOffset' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_Ability
// 0x0100 (0x0108 - 0x0008)
struct FGameplayCommandDataPayload_Ability final : public FGameplayCommandDataCustomPayload
{
public:
	TSoftClassPtr<class UClass>                   AbilityClass;                                      // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	uint8                                         bUsePayload : 1;                                   // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Payload;                                           // 0x0058(0x00B0)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_Ability) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_Ability");
static_assert(sizeof(FGameplayCommandDataPayload_Ability) == 0x000108, "Wrong size on FGameplayCommandDataPayload_Ability");
static_assert(offsetof(FGameplayCommandDataPayload_Ability, AbilityClass) == 0x000008, "Member 'FGameplayCommandDataPayload_Ability::AbilityClass' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_Ability, AbilityTags) == 0x000030, "Member 'FGameplayCommandDataPayload_Ability::AbilityTags' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_Ability, Payload) == 0x000058, "Member 'FGameplayCommandDataPayload_Ability::Payload' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_UnloadGivenPawns
// 0x0010 (0x0018 - 0x0008)
struct FGameplayCommandDataPayload_UnloadGivenPawns final : public FGameplayCommandDataCustomPayload
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_UnloadGivenPawns) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_UnloadGivenPawns");
static_assert(sizeof(FGameplayCommandDataPayload_UnloadGivenPawns) == 0x000018, "Wrong size on FGameplayCommandDataPayload_UnloadGivenPawns");
static_assert(offsetof(FGameplayCommandDataPayload_UnloadGivenPawns, Pawns) == 0x000008, "Member 'FGameplayCommandDataPayload_UnloadGivenPawns::Pawns' has a wrong offset!");

// ScriptStruct Tempest.PawnToUnloadInfo
// 0x0020 (0x0020 - 0x0000)
struct FPawnToUnloadInfo final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Location2DAndRot;                                  // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnToUnloadInfo) == 0x000008, "Wrong alignment on FPawnToUnloadInfo");
static_assert(sizeof(FPawnToUnloadInfo) == 0x000020, "Wrong size on FPawnToUnloadInfo");
static_assert(offsetof(FPawnToUnloadInfo, Pawn) == 0x000000, "Member 'FPawnToUnloadInfo::Pawn' has a wrong offset!");
static_assert(offsetof(FPawnToUnloadInfo, Location2DAndRot) == 0x000008, "Member 'FPawnToUnloadInfo::Location2DAndRot' has a wrong offset!");

// ScriptStruct Tempest.FiringSocketInfo
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FFiringSocketInfo final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFiringSocketInfo) == 0x000008, "Wrong alignment on FFiringSocketInfo");
static_assert(sizeof(FFiringSocketInfo) == 0x000030, "Wrong size on FFiringSocketInfo");

// ScriptStruct Tempest.ClientBannerOpenWindowBiEvent
// 0x0010 (0x0010 - 0x0000)
struct FClientBannerOpenWindowBiEvent final
{
public:
	struct FCampaign                              Campaign;                                          // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerOpenWindowBiEvent) == 0x000008, "Wrong alignment on FClientBannerOpenWindowBiEvent");
static_assert(sizeof(FClientBannerOpenWindowBiEvent) == 0x000010, "Wrong size on FClientBannerOpenWindowBiEvent");
static_assert(offsetof(FClientBannerOpenWindowBiEvent, Campaign) == 0x000000, "Member 'FClientBannerOpenWindowBiEvent::Campaign' has a wrong offset!");

// ScriptStruct Tempest.TedPawnSkinConfigEntry
// 0x0020 (0x0020 - 0x0000)
struct FTedPawnSkinConfigEntry final
{
public:
	TArray<TSoftObjectPtr<class UMaterialInterface>> Materials;                                      // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	class FString                                 MeshComponentName;                                 // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPawnSkinConfigEntry) == 0x000008, "Wrong alignment on FTedPawnSkinConfigEntry");
static_assert(sizeof(FTedPawnSkinConfigEntry) == 0x000020, "Wrong size on FTedPawnSkinConfigEntry");
static_assert(offsetof(FTedPawnSkinConfigEntry, Materials) == 0x000000, "Member 'FTedPawnSkinConfigEntry::Materials' has a wrong offset!");
static_assert(offsetof(FTedPawnSkinConfigEntry, MeshComponentName) == 0x000010, "Member 'FTedPawnSkinConfigEntry::MeshComponentName' has a wrong offset!");

// ScriptStruct Tempest.TedPawnSkinConfig
// 0x0050 (0x0050 - 0x0000)
struct FTedPawnSkinConfig final
{
public:
	TMap<ETedPawnSkinIndex, struct FTedPawnSkinConfigEntry> Overrides;                               // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPawnSkinConfig) == 0x000008, "Wrong alignment on FTedPawnSkinConfig");
static_assert(sizeof(FTedPawnSkinConfig) == 0x000050, "Wrong size on FTedPawnSkinConfig");
static_assert(offsetof(FTedPawnSkinConfig, Overrides) == 0x000000, "Member 'FTedPawnSkinConfig::Overrides' has a wrong offset!");

// ScriptStruct Tempest.PawnSoundData
// 0x0018 (0x0018 - 0x0000)
struct FPawnSoundData final
{
public:
	struct FGameplayTag                           SoundTag;                                          // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SoundCooldown;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoundSpacing;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPawnSoundData) == 0x000004, "Wrong alignment on FPawnSoundData");
static_assert(sizeof(FPawnSoundData) == 0x000018, "Wrong size on FPawnSoundData");
static_assert(offsetof(FPawnSoundData, SoundTag) == 0x000000, "Member 'FPawnSoundData::SoundTag' has a wrong offset!");
static_assert(offsetof(FPawnSoundData, Priority) == 0x000008, "Member 'FPawnSoundData::Priority' has a wrong offset!");
static_assert(offsetof(FPawnSoundData, SoundCooldown) == 0x00000C, "Member 'FPawnSoundData::SoundCooldown' has a wrong offset!");
static_assert(offsetof(FPawnSoundData, SoundSpacing) == 0x000010, "Member 'FPawnSoundData::SoundSpacing' has a wrong offset!");
static_assert(offsetof(FPawnSoundData, FadeOut) == 0x000014, "Member 'FPawnSoundData::FadeOut' has a wrong offset!");

// ScriptStruct Tempest.TedPhysicalFireLocSocketNames
// 0x0010 (0x0010 - 0x0000)
struct FTedPhysicalFireLocSocketNames final
{
public:
	TArray<class FName>                           SocketNames;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPhysicalFireLocSocketNames) == 0x000008, "Wrong alignment on FTedPhysicalFireLocSocketNames");
static_assert(sizeof(FTedPhysicalFireLocSocketNames) == 0x000010, "Wrong size on FTedPhysicalFireLocSocketNames");
static_assert(offsetof(FTedPhysicalFireLocSocketNames, SocketNames) == 0x000000, "Member 'FTedPhysicalFireLocSocketNames::SocketNames' has a wrong offset!");

// ScriptStruct Tempest.AttackTargetQueryResult
// 0x0050 (0x0050 - 0x0000)
struct FAttackTargetQueryResult final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedAttackTargetInfo                   TargetInfo;                                        // 0x0010(0x0040)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttackTargetQueryResult) == 0x000008, "Wrong alignment on FAttackTargetQueryResult");
static_assert(sizeof(FAttackTargetQueryResult) == 0x000050, "Wrong size on FAttackTargetQueryResult");
static_assert(offsetof(FAttackTargetQueryResult, TargetInfo) == 0x000010, "Member 'FAttackTargetQueryResult::TargetInfo' has a wrong offset!");

// ScriptStruct Tempest.PingData
// 0x0020 (0x0020 - 0x0000)
struct FPingData final
{
public:
	bool                                          bInStorage;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    Location;                                          // 0x0008(0x0018)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPingData) == 0x000008, "Wrong alignment on FPingData");
static_assert(sizeof(FPingData) == 0x000020, "Wrong size on FPingData");
static_assert(offsetof(FPingData, bInStorage) == 0x000000, "Member 'FPingData::bInStorage' has a wrong offset!");
static_assert(offsetof(FPingData, Location) == 0x000008, "Member 'FPingData::Location' has a wrong offset!");

// ScriptStruct Tempest.TedPingActors
// 0x0010 (0x0010 - 0x0000)
struct FTedPingActors final
{
public:
	TArray<class ATedPingActor*>                  PingActors;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPingActors) == 0x000008, "Wrong alignment on FTedPingActors");
static_assert(sizeof(FTedPingActors) == 0x000010, "Wrong size on FTedPingActors");
static_assert(offsetof(FTedPingActors, PingActors) == 0x000000, "Member 'FTedPingActors::PingActors' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_ResearchedDoctrine
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCommandDataPayload_ResearchedDoctrine final : public FGameplayCommandDataCustomPayload
{
public:
	class UTedDoctrineDefinition*                 ResearchedDoctrine;                                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_ResearchedDoctrine) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_ResearchedDoctrine");
static_assert(sizeof(FGameplayCommandDataPayload_ResearchedDoctrine) == 0x000010, "Wrong size on FGameplayCommandDataPayload_ResearchedDoctrine");
static_assert(offsetof(FGameplayCommandDataPayload_ResearchedDoctrine, ResearchedDoctrine) == 0x000008, "Member 'FGameplayCommandDataPayload_ResearchedDoctrine::ResearchedDoctrine' has a wrong offset!");

// ScriptStruct Tempest.PawnDefinitionFilter
// 0x0090 (0x0090 - 0x0000)
struct FPawnDefinitionFilter final
{
public:
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0000(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         RequiredNumber;                                    // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPawnDefinitionFilter) == 0x000008, "Wrong alignment on FPawnDefinitionFilter");
static_assert(sizeof(FPawnDefinitionFilter) == 0x000090, "Wrong size on FPawnDefinitionFilter");
static_assert(offsetof(FPawnDefinitionFilter, TagRequirements) == 0x000000, "Member 'FPawnDefinitionFilter::TagRequirements' has a wrong offset!");
static_assert(offsetof(FPawnDefinitionFilter, RequiredNumber) == 0x000088, "Member 'FPawnDefinitionFilter::RequiredNumber' has a wrong offset!");

// ScriptStruct Tempest.TedPawnGroup
// 0x0058 (0x0058 - 0x0000)
struct FTedPawnGroup final
{
public:
	TSet<class ATedPawn*>                         Pawns;                                             // 0x0000(0x0050)(Protected, NativeAccessSpecifierProtected)
	int32                                         GroupIdx;                                          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPawnGroup) == 0x000008, "Wrong alignment on FTedPawnGroup");
static_assert(sizeof(FTedPawnGroup) == 0x000058, "Wrong size on FTedPawnGroup");
static_assert(offsetof(FTedPawnGroup, Pawns) == 0x000000, "Member 'FTedPawnGroup::Pawns' has a wrong offset!");
static_assert(offsetof(FTedPawnGroup, GroupIdx) == 0x000050, "Member 'FTedPawnGroup::GroupIdx' has a wrong offset!");

// ScriptStruct Tempest.AggregatedInputActionOptions
// 0x0058 (0x0058 - 0x0000)
struct FAggregatedInputActionOptions final
{
public:
	TMap<TSoftObjectPtr<class UInputAction>, struct FGameplayTag> InputActions;                      // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETriggerEvent                                 TriggerEvent;                                      // 0x0050(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAggregatedInputActionOptions) == 0x000008, "Wrong alignment on FAggregatedInputActionOptions");
static_assert(sizeof(FAggregatedInputActionOptions) == 0x000058, "Wrong size on FAggregatedInputActionOptions");
static_assert(offsetof(FAggregatedInputActionOptions, InputActions) == 0x000000, "Member 'FAggregatedInputActionOptions::InputActions' has a wrong offset!");
static_assert(offsetof(FAggregatedInputActionOptions, TriggerEvent) == 0x000050, "Member 'FAggregatedInputActionOptions::TriggerEvent' has a wrong offset!");

// ScriptStruct Tempest.AnnouncementForwardMap
// 0x0050 (0x0050 - 0x0000)
struct FAnnouncementForwardMap final
{
public:
	TMap<struct FGameplayTag, struct FGameplayTagContainer> DefinitionMap;                           // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnnouncementForwardMap) == 0x000008, "Wrong alignment on FAnnouncementForwardMap");
static_assert(sizeof(FAnnouncementForwardMap) == 0x000050, "Wrong size on FAnnouncementForwardMap");
static_assert(offsetof(FAnnouncementForwardMap, DefinitionMap) == 0x000000, "Member 'FAnnouncementForwardMap::DefinitionMap' has a wrong offset!");

// ScriptStruct Tempest.TedConfigRuntimeFloatCurve
// 0x00A8 (0x00A8 - 0x0000)
struct FTedConfigRuntimeFloatCurve final
{
public:
	struct FRichCurve                             EditorCurveData;                                   // 0x0000(0x0080)(NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UCurveFloat>             ExternalCurve;                                     // 0x0080(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedConfigRuntimeFloatCurve) == 0x000008, "Wrong alignment on FTedConfigRuntimeFloatCurve");
static_assert(sizeof(FTedConfigRuntimeFloatCurve) == 0x0000A8, "Wrong size on FTedConfigRuntimeFloatCurve");
static_assert(offsetof(FTedConfigRuntimeFloatCurve, EditorCurveData) == 0x000000, "Member 'FTedConfigRuntimeFloatCurve::EditorCurveData' has a wrong offset!");
static_assert(offsetof(FTedConfigRuntimeFloatCurve, ExternalCurve) == 0x000080, "Member 'FTedConfigRuntimeFloatCurve::ExternalCurve' has a wrong offset!");

// ScriptStruct Tempest.TedConstructionQueueLimit
// 0x0028 (0x0028 - 0x0000)
struct FTedConstructionQueueLimit final
{
public:
	struct FGameplayTagContainer                  AffectedFactories;                                 // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedConstructionQueueLimit) == 0x000008, "Wrong alignment on FTedConstructionQueueLimit");
static_assert(sizeof(FTedConstructionQueueLimit) == 0x000028, "Wrong size on FTedConstructionQueueLimit");
static_assert(offsetof(FTedConstructionQueueLimit, AffectedFactories) == 0x000000, "Member 'FTedConstructionQueueLimit::AffectedFactories' has a wrong offset!");
static_assert(offsetof(FTedConstructionQueueLimit, Amount) == 0x000020, "Member 'FTedConstructionQueueLimit::Amount' has a wrong offset!");

// ScriptStruct Tempest.PendingBuildCompletedNotify
// 0x000C (0x000C - 0x0000)
struct FPendingBuildCompletedNotify final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingBuildCompletedNotify) == 0x000004, "Wrong alignment on FPendingBuildCompletedNotify");
static_assert(sizeof(FPendingBuildCompletedNotify) == 0x00000C, "Wrong size on FPendingBuildCompletedNotify");
static_assert(offsetof(FPendingBuildCompletedNotify, GameplayTag) == 0x000000, "Member 'FPendingBuildCompletedNotify::GameplayTag' has a wrong offset!");
static_assert(offsetof(FPendingBuildCompletedNotify, Count) == 0x000008, "Member 'FPendingBuildCompletedNotify::Count' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerDataStatChartContainer
// 0x0010 (0x0010 - 0x0000)
struct FTedPlayerDataStatChartContainer final
{
public:
	TArray<struct FTedPlayerDataStatChart>        Charts;                                            // 0x0000(0x0010)(ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerDataStatChartContainer) == 0x000008, "Wrong alignment on FTedPlayerDataStatChartContainer");
static_assert(sizeof(FTedPlayerDataStatChartContainer) == 0x000010, "Wrong size on FTedPlayerDataStatChartContainer");
static_assert(offsetof(FTedPlayerDataStatChartContainer, Charts) == 0x000000, "Member 'FTedPlayerDataStatChartContainer::Charts' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_ConstructionElementType
// 0x0028 (0x0030 - 0x0008)
struct FGameplayCommandDataPayload_ConstructionElementType final : public FGameplayCommandDataCustomPayload
{
public:
	struct FTedConstructionElementType            ElementType;                                       // 0x0008(0x0028)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayCommandDataPayload_ConstructionElementType) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_ConstructionElementType");
static_assert(sizeof(FGameplayCommandDataPayload_ConstructionElementType) == 0x000030, "Wrong size on FGameplayCommandDataPayload_ConstructionElementType");
static_assert(offsetof(FGameplayCommandDataPayload_ConstructionElementType, ElementType) == 0x000008, "Member 'FGameplayCommandDataPayload_ConstructionElementType::ElementType' has a wrong offset!");

// ScriptStruct Tempest.TedDoctrineTreesArray
// 0x0018 (0x0018 - 0x0000)
struct FTedDoctrineTreesArray final
{
public:
	ETedFaction                                   Faction;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTedDoctrineTreeDefinition>> Trees;                                  // 0x0008(0x0010)(Edit, EditFixedSize, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedDoctrineTreesArray) == 0x000008, "Wrong alignment on FTedDoctrineTreesArray");
static_assert(sizeof(FTedDoctrineTreesArray) == 0x000018, "Wrong size on FTedDoctrineTreesArray");
static_assert(offsetof(FTedDoctrineTreesArray, Faction) == 0x000000, "Member 'FTedDoctrineTreesArray::Faction' has a wrong offset!");
static_assert(offsetof(FTedDoctrineTreesArray, Trees) == 0x000008, "Member 'FTedDoctrineTreesArray::Trees' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerMatchPresence
// 0x0048 (0x0048 - 0x0000)
struct FTedPlayerMatchPresence final
{
public:
	class ATedPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x40];                                       // 0x0008(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPlayerMatchPresence) == 0x000008, "Wrong alignment on FTedPlayerMatchPresence");
static_assert(sizeof(FTedPlayerMatchPresence) == 0x000048, "Wrong size on FTedPlayerMatchPresence");
static_assert(offsetof(FTedPlayerMatchPresence, PlayerState) == 0x000000, "Member 'FTedPlayerMatchPresence::PlayerState' has a wrong offset!");

// ScriptStruct Tempest.TedPawnScoreScreenConfig
// 0x0060 (0x0060 - 0x0000)
struct FTedPawnScoreScreenConfig final
{
public:
	uint8                                         bShow : 1;                                         // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StatsTagOverride;                                  // 0x0004(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ETedPlayerDataStat, struct FTedPawnMirrorStat> MirrorStatValue;                             // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPawnScoreScreenConfig) == 0x000008, "Wrong alignment on FTedPawnScoreScreenConfig");
static_assert(sizeof(FTedPawnScoreScreenConfig) == 0x000060, "Wrong size on FTedPawnScoreScreenConfig");
static_assert(offsetof(FTedPawnScoreScreenConfig, StatsTagOverride) == 0x000004, "Member 'FTedPawnScoreScreenConfig::StatsTagOverride' has a wrong offset!");
static_assert(offsetof(FTedPawnScoreScreenConfig, MirrorStatValue) == 0x000010, "Member 'FTedPawnScoreScreenConfig::MirrorStatValue' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryDataRep
// 0x0050 (0x0050 - 0x0000)
struct FTedTelemetryDataRep final
{
public:
	TMap<ETedPlayerID, struct FTedMatchStats>     PlayerTelemetryData;                               // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryDataRep) == 0x000008, "Wrong alignment on FTedTelemetryDataRep");
static_assert(sizeof(FTedTelemetryDataRep) == 0x000050, "Wrong size on FTedTelemetryDataRep");
static_assert(offsetof(FTedTelemetryDataRep, PlayerTelemetryData) == 0x000000, "Member 'FTedTelemetryDataRep::PlayerTelemetryData' has a wrong offset!");

// ScriptStruct Tempest.TedPopupButton
// 0x0048 (0x0048 - 0x0000)
struct FTedPopupButton final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const int32 InButtonIndex)> OnClicked;                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class FName                                   ButtonID;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedPopupButton) == 0x000008, "Wrong alignment on FTedPopupButton");
static_assert(sizeof(FTedPopupButton) == 0x000048, "Wrong size on FTedPopupButton");
static_assert(offsetof(FTedPopupButton, Text) == 0x000000, "Member 'FTedPopupButton::Text' has a wrong offset!");
static_assert(offsetof(FTedPopupButton, Description) == 0x000010, "Member 'FTedPopupButton::Description' has a wrong offset!");
static_assert(offsetof(FTedPopupButton, OnClicked) == 0x000020, "Member 'FTedPopupButton::OnClicked' has a wrong offset!");
static_assert(offsetof(FTedPopupButton, ButtonID) == 0x000030, "Member 'FTedPopupButton::ButtonID' has a wrong offset!");

// ScriptStruct Tempest.TedPrerequisiteSettings_TransferMap
// 0x0118 (0x0118 - 0x0000)
struct FTedPrerequisiteSettings_TransferMap final
{
public:
	struct FGameplayTag                           DeprecatedTag;                                     // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPrerequisiteContainer              CorrespondingContainer;                            // 0x0008(0x0110)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPrerequisiteSettings_TransferMap) == 0x000008, "Wrong alignment on FTedPrerequisiteSettings_TransferMap");
static_assert(sizeof(FTedPrerequisiteSettings_TransferMap) == 0x000118, "Wrong size on FTedPrerequisiteSettings_TransferMap");
static_assert(offsetof(FTedPrerequisiteSettings_TransferMap, DeprecatedTag) == 0x000000, "Member 'FTedPrerequisiteSettings_TransferMap::DeprecatedTag' has a wrong offset!");
static_assert(offsetof(FTedPrerequisiteSettings_TransferMap, CorrespondingContainer) == 0x000008, "Member 'FTedPrerequisiteSettings_TransferMap::CorrespondingContainer' has a wrong offset!");

// ScriptStruct Tempest.TPPool
// 0x0028 (0x0028 - 0x0000)
struct FTPPool final
{
public:
	TArray<struct FTPPoolElem>                    FreeElements;                                      // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ATedProjectile*>                 ActiveElements;                                    // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTPPool) == 0x000008, "Wrong alignment on FTPPool");
static_assert(sizeof(FTPPool) == 0x000028, "Wrong size on FTPPool");
static_assert(offsetof(FTPPool, FreeElements) == 0x000000, "Member 'FTPPool::FreeElements' has a wrong offset!");
static_assert(offsetof(FTPPool, ActiveElements) == 0x000010, "Member 'FTPPool::ActiveElements' has a wrong offset!");

// ScriptStruct Tempest.GCueTranslationOverride
// 0x0018 (0x0018 - 0x0000)
struct FGCueTranslationOverride final
{
public:
	struct FGameplayCueTag                        GCueTagToOverride;                                 // 0x0000(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FGCueTranslation>               TranslationOverrides;                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGCueTranslationOverride) == 0x000008, "Wrong alignment on FGCueTranslationOverride");
static_assert(sizeof(FGCueTranslationOverride) == 0x000018, "Wrong size on FGCueTranslationOverride");
static_assert(offsetof(FGCueTranslationOverride, GCueTagToOverride) == 0x000000, "Member 'FGCueTranslationOverride::GCueTagToOverride' has a wrong offset!");
static_assert(offsetof(FGCueTranslationOverride, TranslationOverrides) == 0x000008, "Member 'FGCueTranslationOverride::TranslationOverrides' has a wrong offset!");

// ScriptStruct Tempest.RepCurve_Bool
// 0x0017 (0x0018 - 0x0001)
struct alignas(0x04) FRepCurve_Bool final : public FRepCurveBase
{
public:
	uint8                                         Pad_1[0x17];                                       // 0x0001(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepCurve_Bool) == 0x000004, "Wrong alignment on FRepCurve_Bool");
static_assert(sizeof(FRepCurve_Bool) == 0x000018, "Wrong size on FRepCurve_Bool");

// ScriptStruct Tempest.TedSpawnSettingsCache
// 0x0030 (0x0030 - 0x0000)
struct FTedSpawnSettingsCache final
{
public:
	class UNiagaraSystem*                         PortalNiagaraSystemWorking;                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         PortalNiagaraSystemCompleted;                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PortalSpawnSound;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedPlayerCommand_AirDrop>  AirDropCommandClass;                               // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedPlayerCommand_AirDrop>  AirDropInVolumeCommandClass;                       // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedPlayerCommand_AirDrop>  AirDropInVolumeFadeCommandClass;                   // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedSpawnSettingsCache) == 0x000008, "Wrong alignment on FTedSpawnSettingsCache");
static_assert(sizeof(FTedSpawnSettingsCache) == 0x000030, "Wrong size on FTedSpawnSettingsCache");
static_assert(offsetof(FTedSpawnSettingsCache, PortalNiagaraSystemWorking) == 0x000000, "Member 'FTedSpawnSettingsCache::PortalNiagaraSystemWorking' has a wrong offset!");
static_assert(offsetof(FTedSpawnSettingsCache, PortalNiagaraSystemCompleted) == 0x000008, "Member 'FTedSpawnSettingsCache::PortalNiagaraSystemCompleted' has a wrong offset!");
static_assert(offsetof(FTedSpawnSettingsCache, PortalSpawnSound) == 0x000010, "Member 'FTedSpawnSettingsCache::PortalSpawnSound' has a wrong offset!");
static_assert(offsetof(FTedSpawnSettingsCache, AirDropCommandClass) == 0x000018, "Member 'FTedSpawnSettingsCache::AirDropCommandClass' has a wrong offset!");
static_assert(offsetof(FTedSpawnSettingsCache, AirDropInVolumeCommandClass) == 0x000020, "Member 'FTedSpawnSettingsCache::AirDropInVolumeCommandClass' has a wrong offset!");
static_assert(offsetof(FTedSpawnSettingsCache, AirDropInVolumeFadeCommandClass) == 0x000028, "Member 'FTedSpawnSettingsCache::AirDropInVolumeFadeCommandClass' has a wrong offset!");

// ScriptStruct Tempest.TedPreloadScenario
// 0x0028 (0x0028 - 0x0000)
struct FTedPreloadScenario final
{
public:
	uint8                                         AppliesTo;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreloadUsedFactions;                              // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreloadAllMontages;                               // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreloadAllBehaviorTrees;                          // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDirectoryPath>                 AdditionalPaths;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                AdditionalObjects;                                 // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPreloadScenario) == 0x000008, "Wrong alignment on FTedPreloadScenario");
static_assert(sizeof(FTedPreloadScenario) == 0x000028, "Wrong size on FTedPreloadScenario");
static_assert(offsetof(FTedPreloadScenario, AppliesTo) == 0x000000, "Member 'FTedPreloadScenario::AppliesTo' has a wrong offset!");
static_assert(offsetof(FTedPreloadScenario, bPreloadUsedFactions) == 0x000001, "Member 'FTedPreloadScenario::bPreloadUsedFactions' has a wrong offset!");
static_assert(offsetof(FTedPreloadScenario, bPreloadAllMontages) == 0x000002, "Member 'FTedPreloadScenario::bPreloadAllMontages' has a wrong offset!");
static_assert(offsetof(FTedPreloadScenario, bPreloadAllBehaviorTrees) == 0x000003, "Member 'FTedPreloadScenario::bPreloadAllBehaviorTrees' has a wrong offset!");
static_assert(offsetof(FTedPreloadScenario, AdditionalPaths) == 0x000008, "Member 'FTedPreloadScenario::AdditionalPaths' has a wrong offset!");
static_assert(offsetof(FTedPreloadScenario, AdditionalObjects) == 0x000018, "Member 'FTedPreloadScenario::AdditionalObjects' has a wrong offset!");

// ScriptStruct Tempest.CrystalConfig
// 0x0038 (0x0038 - 0x0000)
struct FCrystalConfig final
{
public:
	class UStaticMesh*                            Mesh;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterPlacementProbability;                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MeshDensity;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RandomRotationOffset;                              // 0x0010(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Embedment;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshRadius;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleOffset;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrystalConfig) == 0x000008, "Wrong alignment on FCrystalConfig");
static_assert(sizeof(FCrystalConfig) == 0x000038, "Wrong size on FCrystalConfig");
static_assert(offsetof(FCrystalConfig, Mesh) == 0x000000, "Member 'FCrystalConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, CenterPlacementProbability) == 0x000008, "Member 'FCrystalConfig::CenterPlacementProbability' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, MeshDensity) == 0x00000C, "Member 'FCrystalConfig::MeshDensity' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, RandomRotationOffset) == 0x000010, "Member 'FCrystalConfig::RandomRotationOffset' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, Embedment) == 0x000028, "Member 'FCrystalConfig::Embedment' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, MeshRadius) == 0x00002C, "Member 'FCrystalConfig::MeshRadius' has a wrong offset!");
static_assert(offsetof(FCrystalConfig, ScaleOffset) == 0x000030, "Member 'FCrystalConfig::ScaleOffset' has a wrong offset!");

// ScriptStruct Tempest.RipenFieldConfig
// 0x0058 (0x0058 - 0x0000)
struct FRipenFieldConfig final
{
public:
	TArray<struct FCrystalConfig>                 CrystalConfigs;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCrystalParticleConfig>         ParticleConfigs;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ParticleLocationUpdateFrequency;                   // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     BaseDecalMaterial;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BaseDecalSize;                                     // 0x0030(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDecalRotationOffset;                           // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileCenterOffset;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResourcePerTile;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceCollisionChannel;                             // 0x0054(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRipenFieldConfig) == 0x000008, "Wrong alignment on FRipenFieldConfig");
static_assert(sizeof(FRipenFieldConfig) == 0x000058, "Wrong size on FRipenFieldConfig");
static_assert(offsetof(FRipenFieldConfig, CrystalConfigs) == 0x000000, "Member 'FRipenFieldConfig::CrystalConfigs' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, ParticleConfigs) == 0x000010, "Member 'FRipenFieldConfig::ParticleConfigs' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, ParticleLocationUpdateFrequency) == 0x000020, "Member 'FRipenFieldConfig::ParticleLocationUpdateFrequency' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, BaseDecalMaterial) == 0x000028, "Member 'FRipenFieldConfig::BaseDecalMaterial' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, BaseDecalSize) == 0x000030, "Member 'FRipenFieldConfig::BaseDecalSize' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, BaseDecalRotationOffset) == 0x000048, "Member 'FRipenFieldConfig::BaseDecalRotationOffset' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, TileCenterOffset) == 0x00004C, "Member 'FRipenFieldConfig::TileCenterOffset' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, ResourcePerTile) == 0x000050, "Member 'FRipenFieldConfig::ResourcePerTile' has a wrong offset!");
static_assert(offsetof(FRipenFieldConfig, TraceCollisionChannel) == 0x000054, "Member 'FRipenFieldConfig::TraceCollisionChannel' has a wrong offset!");

// ScriptStruct Tempest.ScoreScreenRewardValueWidgetVisibility
// 0x000C (0x000C - 0x0000)
struct FScoreScreenRewardValueWidgetVisibility final
{
public:
	EComparison                                   Comparison;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         B;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Passed;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              Failed;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScoreScreenRewardValueWidgetVisibility) == 0x000004, "Wrong alignment on FScoreScreenRewardValueWidgetVisibility");
static_assert(sizeof(FScoreScreenRewardValueWidgetVisibility) == 0x00000C, "Wrong size on FScoreScreenRewardValueWidgetVisibility");
static_assert(offsetof(FScoreScreenRewardValueWidgetVisibility, Comparison) == 0x000000, "Member 'FScoreScreenRewardValueWidgetVisibility::Comparison' has a wrong offset!");
static_assert(offsetof(FScoreScreenRewardValueWidgetVisibility, B) == 0x000004, "Member 'FScoreScreenRewardValueWidgetVisibility::B' has a wrong offset!");
static_assert(offsetof(FScoreScreenRewardValueWidgetVisibility, Passed) == 0x000008, "Member 'FScoreScreenRewardValueWidgetVisibility::Passed' has a wrong offset!");
static_assert(offsetof(FScoreScreenRewardValueWidgetVisibility, Failed) == 0x000009, "Member 'FScoreScreenRewardValueWidgetVisibility::Failed' has a wrong offset!");

// ScriptStruct Tempest.TedScoreScreenMatchParticipant
// 0x0060 (0x0060 - 0x0000)
struct FTedScoreScreenMatchParticipant final
{
public:
	struct FTedGenericDataContainer               Participant;                                       // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FTedGenericDataContainer>       PawnStats;                                         // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedScoreScreenMatchParticipant) == 0x000008, "Wrong alignment on FTedScoreScreenMatchParticipant");
static_assert(sizeof(FTedScoreScreenMatchParticipant) == 0x000060, "Wrong size on FTedScoreScreenMatchParticipant");
static_assert(offsetof(FTedScoreScreenMatchParticipant, Participant) == 0x000000, "Member 'FTedScoreScreenMatchParticipant::Participant' has a wrong offset!");
static_assert(offsetof(FTedScoreScreenMatchParticipant, PawnStats) == 0x000050, "Member 'FTedScoreScreenMatchParticipant::PawnStats' has a wrong offset!");

// ScriptStruct Tempest.TedStructurePlacementData
// 0x0178 (0x0178 - 0x0000)
struct FTedStructurePlacementData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TSet<struct FOffsetCoords>                    PreviewTiles;                                      // 0x0030(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FOffsetCoords>                    PlacementTiles;                                    // 0x0080(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FOffsetCoords>                    ValidTiles;                                        // 0x00D0(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FOffsetCoords>                    InvalidTiles;                                      // 0x0120(0x0050)(NativeAccessSpecifierPublic)
	ETedStructureSpawnOption                      SpawnOptions;                                      // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPlace;                                         // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebug;                                        // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_173[0x5];                                      // 0x0173(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedStructurePlacementData) == 0x000008, "Wrong alignment on FTedStructurePlacementData");
static_assert(sizeof(FTedStructurePlacementData) == 0x000178, "Wrong size on FTedStructurePlacementData");
static_assert(offsetof(FTedStructurePlacementData, Location) == 0x000000, "Member 'FTedStructurePlacementData::Location' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, Rotation) == 0x000018, "Member 'FTedStructurePlacementData::Rotation' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, PreviewTiles) == 0x000030, "Member 'FTedStructurePlacementData::PreviewTiles' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, PlacementTiles) == 0x000080, "Member 'FTedStructurePlacementData::PlacementTiles' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, ValidTiles) == 0x0000D0, "Member 'FTedStructurePlacementData::ValidTiles' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, InvalidTiles) == 0x000120, "Member 'FTedStructurePlacementData::InvalidTiles' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, SpawnOptions) == 0x000170, "Member 'FTedStructurePlacementData::SpawnOptions' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, bCanPlace) == 0x000171, "Member 'FTedStructurePlacementData::bCanPlace' has a wrong offset!");
static_assert(offsetof(FTedStructurePlacementData, bShowDebug) == 0x000172, "Member 'FTedStructurePlacementData::bShowDebug' has a wrong offset!");

// ScriptStruct Tempest.TedStructureWallMeshSetup
// 0x0028 (0x0028 - 0x0000)
struct FTedStructureWallMeshSetup final
{
public:
	class USkeletalMesh*                          NoConnection;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          I;                                                 // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          L;                                                 // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          T;                                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          X;                                                 // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureWallMeshSetup) == 0x000008, "Wrong alignment on FTedStructureWallMeshSetup");
static_assert(sizeof(FTedStructureWallMeshSetup) == 0x000028, "Wrong size on FTedStructureWallMeshSetup");
static_assert(offsetof(FTedStructureWallMeshSetup, NoConnection) == 0x000000, "Member 'FTedStructureWallMeshSetup::NoConnection' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup, I) == 0x000008, "Member 'FTedStructureWallMeshSetup::I' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup, L) == 0x000010, "Member 'FTedStructureWallMeshSetup::L' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup, T) == 0x000018, "Member 'FTedStructureWallMeshSetup::T' has a wrong offset!");
static_assert(offsetof(FTedStructureWallMeshSetup, X) == 0x000020, "Member 'FTedStructureWallMeshSetup::X' has a wrong offset!");

// ScriptStruct Tempest.TedStructureConnection
// 0x0002 (0x0002 - 0x0000)
struct FTedStructureConnection final
{
public:
	ETedStructureConnection                       Shape;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedStructureWallSide                         Rotation;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureConnection) == 0x000001, "Wrong alignment on FTedStructureConnection");
static_assert(sizeof(FTedStructureConnection) == 0x000002, "Wrong size on FTedStructureConnection");
static_assert(offsetof(FTedStructureConnection, Shape) == 0x000000, "Member 'FTedStructureConnection::Shape' has a wrong offset!");
static_assert(offsetof(FTedStructureConnection, Rotation) == 0x000001, "Member 'FTedStructureConnection::Rotation' has a wrong offset!");

// ScriptStruct Tempest.TedStructureUpgradeEffects
// 0x0010 (0x0010 - 0x0000)
struct FTedStructureUpgradeEffects final
{
public:
	class UAnimMontage*                           UpgradeAnimation;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DeconstructAnimation;                              // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedStructureUpgradeEffects) == 0x000008, "Wrong alignment on FTedStructureUpgradeEffects");
static_assert(sizeof(FTedStructureUpgradeEffects) == 0x000010, "Wrong size on FTedStructureUpgradeEffects");
static_assert(offsetof(FTedStructureUpgradeEffects, UpgradeAnimation) == 0x000000, "Member 'FTedStructureUpgradeEffects::UpgradeAnimation' has a wrong offset!");
static_assert(offsetof(FTedStructureUpgradeEffects, DeconstructAnimation) == 0x000008, "Member 'FTedStructureUpgradeEffects::DeconstructAnimation' has a wrong offset!");

// ScriptStruct Tempest.TedTableHeaderContent
// 0x0028 (0x0028 - 0x0000)
struct FTedTableHeaderContent final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         FillPercent;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ColumnGameplayTag;                                 // 0x0014(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasConstantWidth;                                 // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextJustify                                  Justification;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedTableHeaderContent) == 0x000008, "Wrong alignment on FTedTableHeaderContent");
static_assert(sizeof(FTedTableHeaderContent) == 0x000028, "Wrong size on FTedTableHeaderContent");
static_assert(offsetof(FTedTableHeaderContent, Text) == 0x000000, "Member 'FTedTableHeaderContent::Text' has a wrong offset!");
static_assert(offsetof(FTedTableHeaderContent, FillPercent) == 0x000010, "Member 'FTedTableHeaderContent::FillPercent' has a wrong offset!");
static_assert(offsetof(FTedTableHeaderContent, ColumnGameplayTag) == 0x000014, "Member 'FTedTableHeaderContent::ColumnGameplayTag' has a wrong offset!");
static_assert(offsetof(FTedTableHeaderContent, bHasConstantWidth) == 0x00001C, "Member 'FTedTableHeaderContent::bHasConstantWidth' has a wrong offset!");
static_assert(offsetof(FTedTableHeaderContent, Width) == 0x000020, "Member 'FTedTableHeaderContent::Width' has a wrong offset!");
static_assert(offsetof(FTedTableHeaderContent, Justification) == 0x000024, "Member 'FTedTableHeaderContent::Justification' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerClickBiEvent_EventContext
// 0x0004 (0x0004 - 0x0000)
struct FClientBannerClickBiEvent_EventContext final
{
public:
	int32                                         timeSinceImpressionStart;                          // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerClickBiEvent_EventContext) == 0x000004, "Wrong alignment on FClientBannerClickBiEvent_EventContext");
static_assert(sizeof(FClientBannerClickBiEvent_EventContext) == 0x000004, "Wrong size on FClientBannerClickBiEvent_EventContext");
static_assert(offsetof(FClientBannerClickBiEvent_EventContext, timeSinceImpressionStart) == 0x000000, "Member 'FClientBannerClickBiEvent_EventContext::timeSinceImpressionStart' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerImpressionBiEvent_Locale
// 0x0020 (0x0020 - 0x0000)
struct FClientBannerImpressionBiEvent_Locale final
{
public:
	class FString                                 CountryCode;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LanguageCode;                                      // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerImpressionBiEvent_Locale) == 0x000008, "Wrong alignment on FClientBannerImpressionBiEvent_Locale");
static_assert(sizeof(FClientBannerImpressionBiEvent_Locale) == 0x000020, "Wrong size on FClientBannerImpressionBiEvent_Locale");
static_assert(offsetof(FClientBannerImpressionBiEvent_Locale, CountryCode) == 0x000000, "Member 'FClientBannerImpressionBiEvent_Locale::CountryCode' has a wrong offset!");
static_assert(offsetof(FClientBannerImpressionBiEvent_Locale, LanguageCode) == 0x000010, "Member 'FClientBannerImpressionBiEvent_Locale::LanguageCode' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerClickBiEvent
// 0x0018 (0x0018 - 0x0000)
struct FClientBannerClickBiEvent final
{
public:
	struct FCampaign                              Campaign;                                          // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientBannerClickBiEvent_EventContext eventContext;                                      // 0x0010(0x0004)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientBannerClickBiEvent) == 0x000008, "Wrong alignment on FClientBannerClickBiEvent");
static_assert(sizeof(FClientBannerClickBiEvent) == 0x000018, "Wrong size on FClientBannerClickBiEvent");
static_assert(offsetof(FClientBannerClickBiEvent, Campaign) == 0x000000, "Member 'FClientBannerClickBiEvent::Campaign' has a wrong offset!");
static_assert(offsetof(FClientBannerClickBiEvent, eventContext) == 0x000010, "Member 'FClientBannerClickBiEvent::eventContext' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerImpressionBiEvent
// 0x0030 (0x0030 - 0x0000)
struct FClientBannerImpressionBiEvent final
{
public:
	struct FCampaign                              Campaign;                                          // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientBannerImpressionBiEvent_Locale  Locale;                                            // 0x0010(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerImpressionBiEvent) == 0x000008, "Wrong alignment on FClientBannerImpressionBiEvent");
static_assert(sizeof(FClientBannerImpressionBiEvent) == 0x000030, "Wrong size on FClientBannerImpressionBiEvent");
static_assert(offsetof(FClientBannerImpressionBiEvent, Campaign) == 0x000000, "Member 'FClientBannerImpressionBiEvent::Campaign' has a wrong offset!");
static_assert(offsetof(FClientBannerImpressionBiEvent, Locale) == 0x000010, "Member 'FClientBannerImpressionBiEvent::Locale' has a wrong offset!");

// ScriptStruct Tempest.ClientBannerSettingsBiEvent
// 0x0001 (0x0001 - 0x0000)
struct FClientBannerSettingsBiEvent final
{
public:
	struct FClientBannerSettingsBiEvent_Motd      motd;                                              // 0x0000(0x0001)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientBannerSettingsBiEvent) == 0x000001, "Wrong alignment on FClientBannerSettingsBiEvent");
static_assert(sizeof(FClientBannerSettingsBiEvent) == 0x000001, "Wrong size on FClientBannerSettingsBiEvent");
static_assert(offsetof(FClientBannerSettingsBiEvent, motd) == 0x000000, "Member 'FClientBannerSettingsBiEvent::motd' has a wrong offset!");

// ScriptStruct Tempest.TedTelemetryMatchDetails
// 0x0060 (0x0060 - 0x0000)
struct FTedTelemetryMatchDetails final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchMode;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LobbySize;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealPlayers;                                       // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotPlayers;                                        // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Spectators;                                        // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DifficultyMode;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTelemetryMatchDetails) == 0x000008, "Wrong alignment on FTedTelemetryMatchDetails");
static_assert(sizeof(FTedTelemetryMatchDetails) == 0x000060, "Wrong size on FTedTelemetryMatchDetails");
static_assert(offsetof(FTedTelemetryMatchDetails, MatchID) == 0x000000, "Member 'FTedTelemetryMatchDetails::MatchID' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, MapName) == 0x000010, "Member 'FTedTelemetryMatchDetails::MapName' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, MatchMode) == 0x000020, "Member 'FTedTelemetryMatchDetails::MatchMode' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, MatchType) == 0x000030, "Member 'FTedTelemetryMatchDetails::MatchType' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, LobbySize) == 0x000040, "Member 'FTedTelemetryMatchDetails::LobbySize' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, RealPlayers) == 0x000044, "Member 'FTedTelemetryMatchDetails::RealPlayers' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, BotPlayers) == 0x000048, "Member 'FTedTelemetryMatchDetails::BotPlayers' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, Spectators) == 0x00004C, "Member 'FTedTelemetryMatchDetails::Spectators' has a wrong offset!");
static_assert(offsetof(FTedTelemetryMatchDetails, DifficultyMode) == 0x000050, "Member 'FTedTelemetryMatchDetails::DifficultyMode' has a wrong offset!");

// ScriptStruct Tempest.DoctrineStatistics_DoctrineDetails
// 0x0030 (0x0030 - 0x0000)
struct FDoctrineStatistics_DoctrineDetails final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         tier;                                              // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         gotTime;                                           // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         soldTime;                                          // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDoctrineStatistics_DoctrineDetails) == 0x000008, "Wrong alignment on FDoctrineStatistics_DoctrineDetails");
static_assert(sizeof(FDoctrineStatistics_DoctrineDetails) == 0x000030, "Wrong size on FDoctrineStatistics_DoctrineDetails");
static_assert(offsetof(FDoctrineStatistics_DoctrineDetails, Name) == 0x000000, "Member 'FDoctrineStatistics_DoctrineDetails::Name' has a wrong offset!");
static_assert(offsetof(FDoctrineStatistics_DoctrineDetails, Category) == 0x000010, "Member 'FDoctrineStatistics_DoctrineDetails::Category' has a wrong offset!");
static_assert(offsetof(FDoctrineStatistics_DoctrineDetails, tier) == 0x000020, "Member 'FDoctrineStatistics_DoctrineDetails::tier' has a wrong offset!");
static_assert(offsetof(FDoctrineStatistics_DoctrineDetails, gotTime) == 0x000024, "Member 'FDoctrineStatistics_DoctrineDetails::gotTime' has a wrong offset!");
static_assert(offsetof(FDoctrineStatistics_DoctrineDetails, soldTime) == 0x000028, "Member 'FDoctrineStatistics_DoctrineDetails::soldTime' has a wrong offset!");

// ScriptStruct Tempest.ClientLeaderboardScreenBiEvent_LeaderboardDetails
// 0x0028 (0x0028 - 0x0000)
struct FClientLeaderboardScreenBiEvent_LeaderboardDetails final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         currentPlace;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FClientLeaderboardScreenBiEvent_LeaderboardTop> leaderboardTop;                    // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLeaderboardScreenBiEvent_LeaderboardDetails) == 0x000008, "Wrong alignment on FClientLeaderboardScreenBiEvent_LeaderboardDetails");
static_assert(sizeof(FClientLeaderboardScreenBiEvent_LeaderboardDetails) == 0x000028, "Wrong size on FClientLeaderboardScreenBiEvent_LeaderboardDetails");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardDetails, LeaderboardName) == 0x000000, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardDetails::LeaderboardName' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardDetails, currentPlace) == 0x000010, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardDetails::currentPlace' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent_LeaderboardDetails, leaderboardTop) == 0x000018, "Member 'FClientLeaderboardScreenBiEvent_LeaderboardDetails::leaderboardTop' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchStartBiEvent_EventContext
// 0x0018 (0x0018 - 0x0000)
struct FClientMatchStartBiEvent_EventContext final
{
public:
	int32                                         matchTimer;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 matchSearchUid;                                    // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchStartBiEvent_EventContext) == 0x000008, "Wrong alignment on FClientMatchStartBiEvent_EventContext");
static_assert(sizeof(FClientMatchStartBiEvent_EventContext) == 0x000018, "Wrong size on FClientMatchStartBiEvent_EventContext");
static_assert(offsetof(FClientMatchStartBiEvent_EventContext, matchTimer) == 0x000000, "Member 'FClientMatchStartBiEvent_EventContext::matchTimer' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent_EventContext, matchSearchUid) == 0x000008, "Member 'FClientMatchStartBiEvent_EventContext::matchSearchUid' has a wrong offset!");

// ScriptStruct Tempest.ClientSettingsChangeBiEvent_SettingDetails
// 0x0038 (0x0038 - 0x0000)
struct FClientSettingsChangeBiEvent_SettingDetails final
{
public:
	bool                                          isInMatch;                                         // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousState;                                     // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewState;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSettingsChangeBiEvent_SettingDetails) == 0x000008, "Wrong alignment on FClientSettingsChangeBiEvent_SettingDetails");
static_assert(sizeof(FClientSettingsChangeBiEvent_SettingDetails) == 0x000038, "Wrong size on FClientSettingsChangeBiEvent_SettingDetails");
static_assert(offsetof(FClientSettingsChangeBiEvent_SettingDetails, isInMatch) == 0x000000, "Member 'FClientSettingsChangeBiEvent_SettingDetails::isInMatch' has a wrong offset!");
static_assert(offsetof(FClientSettingsChangeBiEvent_SettingDetails, Name) == 0x000008, "Member 'FClientSettingsChangeBiEvent_SettingDetails::Name' has a wrong offset!");
static_assert(offsetof(FClientSettingsChangeBiEvent_SettingDetails, PreviousState) == 0x000018, "Member 'FClientSettingsChangeBiEvent_SettingDetails::PreviousState' has a wrong offset!");
static_assert(offsetof(FClientSettingsChangeBiEvent_SettingDetails, NewState) == 0x000028, "Member 'FClientSettingsChangeBiEvent_SettingDetails::NewState' has a wrong offset!");

// ScriptStruct Tempest.ClientTransactionBiEvent_Reason
// 0x0010 (0x0010 - 0x0000)
struct FClientTransactionBiEvent_Reason final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientTransactionBiEvent_Reason) == 0x000008, "Wrong alignment on FClientTransactionBiEvent_Reason");
static_assert(sizeof(FClientTransactionBiEvent_Reason) == 0x000010, "Wrong size on FClientTransactionBiEvent_Reason");
static_assert(offsetof(FClientTransactionBiEvent_Reason, Name) == 0x000000, "Member 'FClientTransactionBiEvent_Reason::Name' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityBuildBiEvent_EventContext
// 0x0018 (0x0018 - 0x0000)
struct FServerMatchActivityBuildBiEvent_EventContext final
{
public:
	class FString                                 eventTrigger;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         matchTimer;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerMatchActivityBuildBiEvent_EventContext) == 0x000008, "Wrong alignment on FServerMatchActivityBuildBiEvent_EventContext");
static_assert(sizeof(FServerMatchActivityBuildBiEvent_EventContext) == 0x000018, "Wrong size on FServerMatchActivityBuildBiEvent_EventContext");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_EventContext, eventTrigger) == 0x000000, "Member 'FServerMatchActivityBuildBiEvent_EventContext::eventTrigger' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent_EventContext, matchTimer) == 0x000010, "Member 'FServerMatchActivityBuildBiEvent_EventContext::matchTimer' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivitySupportPowerResultBiEvent_EventContext
// 0x0030 (0x0030 - 0x0000)
struct FServerMatchActivitySupportPowerResultBiEvent_EventContext final
{
public:
	class FString                                 Result;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         matchTimer;                                        // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         destroyedUnits;                                    // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         destroyedBuildings;                                // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         totalDamage;                                       // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 abilityName;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivitySupportPowerResultBiEvent_EventContext) == 0x000008, "Wrong alignment on FServerMatchActivitySupportPowerResultBiEvent_EventContext");
static_assert(sizeof(FServerMatchActivitySupportPowerResultBiEvent_EventContext) == 0x000030, "Wrong size on FServerMatchActivitySupportPowerResultBiEvent_EventContext");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, Result) == 0x000000, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::Result' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, matchTimer) == 0x000010, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::matchTimer' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, destroyedUnits) == 0x000014, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::destroyedUnits' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, destroyedBuildings) == 0x000018, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::destroyedBuildings' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, totalDamage) == 0x00001C, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::totalDamage' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent_EventContext, abilityName) == 0x000020, "Member 'FServerMatchActivitySupportPowerResultBiEvent_EventContext::abilityName' has a wrong offset!");

// ScriptStruct Tempest.DoctrineStatistics
// 0x0010 (0x0010 - 0x0000)
struct FDoctrineStatistics final
{
public:
	TArray<struct FDoctrineStatistics_DoctrineDetails> doctrineDetails;                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDoctrineStatistics) == 0x000008, "Wrong alignment on FDoctrineStatistics");
static_assert(sizeof(FDoctrineStatistics) == 0x000010, "Wrong size on FDoctrineStatistics");
static_assert(offsetof(FDoctrineStatistics, doctrineDetails) == 0x000000, "Member 'FDoctrineStatistics::doctrineDetails' has a wrong offset!");

// ScriptStruct Tempest.ExportInfo
// 0x0018 (0x0018 - 0x0000)
struct FExportInfo final
{
public:
	int32                                         Timestamp;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 timestampType;                                     // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExportInfo) == 0x000008, "Wrong alignment on FExportInfo");
static_assert(sizeof(FExportInfo) == 0x000018, "Wrong size on FExportInfo");
static_assert(offsetof(FExportInfo, Timestamp) == 0x000000, "Member 'FExportInfo::Timestamp' has a wrong offset!");
static_assert(offsetof(FExportInfo, timestampType) == 0x000008, "Member 'FExportInfo::timestampType' has a wrong offset!");

// ScriptStruct Tempest.UnitsStatistics
// 0x0020 (0x0020 - 0x0000)
struct FUnitsStatistics final
{
public:
	TArray<struct FUnitsStatistics_PlayerUnitsDetails> playerUnitsDetails;                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUnitsStatistics_EnemyUnitsDetails> enemyUnitsDetails;                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitsStatistics) == 0x000008, "Wrong alignment on FUnitsStatistics");
static_assert(sizeof(FUnitsStatistics) == 0x000020, "Wrong size on FUnitsStatistics");
static_assert(offsetof(FUnitsStatistics, playerUnitsDetails) == 0x000000, "Member 'FUnitsStatistics::playerUnitsDetails' has a wrong offset!");
static_assert(offsetof(FUnitsStatistics, enemyUnitsDetails) == 0x000010, "Member 'FUnitsStatistics::enemyUnitsDetails' has a wrong offset!");

// ScriptStruct Tempest.ClientCampaignProgressBiEvent
// 0x00C8 (0x00C8 - 0x0000)
struct FClientCampaignProgressBiEvent final
{
public:
	struct FClientCampaignProgressBiEvent_EventContext eventContext;                                 // 0x0000(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMissionDetails                        biMissionDetails;                                  // 0x0010(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMetaStates                            biMetaStates;                                      // 0x0038(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0050(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientCampaignProgressBiEvent) == 0x000008, "Wrong alignment on FClientCampaignProgressBiEvent");
static_assert(sizeof(FClientCampaignProgressBiEvent) == 0x0000C8, "Wrong size on FClientCampaignProgressBiEvent");
static_assert(offsetof(FClientCampaignProgressBiEvent, eventContext) == 0x000000, "Member 'FClientCampaignProgressBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientCampaignProgressBiEvent, biMissionDetails) == 0x000010, "Member 'FClientCampaignProgressBiEvent::biMissionDetails' has a wrong offset!");
static_assert(offsetof(FClientCampaignProgressBiEvent, biMetaStates) == 0x000038, "Member 'FClientCampaignProgressBiEvent::biMetaStates' has a wrong offset!");
static_assert(offsetof(FClientCampaignProgressBiEvent, biMatchDetails) == 0x000050, "Member 'FClientCampaignProgressBiEvent::biMatchDetails' has a wrong offset!");

// ScriptStruct Tempest.ClientLeaderboardScreenBiEvent
// 0x0040 (0x0040 - 0x0000)
struct FClientLeaderboardScreenBiEvent final
{
public:
	struct FClientLeaderboardScreenBiEvent_LeaderboardDetails leaderboardDetails;                    // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMetaStates                            biMetaStates;                                      // 0x0028(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLeaderboardScreenBiEvent) == 0x000008, "Wrong alignment on FClientLeaderboardScreenBiEvent");
static_assert(sizeof(FClientLeaderboardScreenBiEvent) == 0x000040, "Wrong size on FClientLeaderboardScreenBiEvent");
static_assert(offsetof(FClientLeaderboardScreenBiEvent, leaderboardDetails) == 0x000000, "Member 'FClientLeaderboardScreenBiEvent::leaderboardDetails' has a wrong offset!");
static_assert(offsetof(FClientLeaderboardScreenBiEvent, biMetaStates) == 0x000028, "Member 'FClientLeaderboardScreenBiEvent::biMetaStates' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchEndBiEvent
// 0x01D8 (0x01D8 - 0x0000)
struct FClientMatchEndBiEvent final
{
public:
	struct FClientMatchEndBiEvent_MatchResults    matchResults;                                      // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMetaStates                            biMetaStates;                                      // 0x0028(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0040(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerSettings                        biPlayerSettings;                                  // 0x00B8(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchStatistics                       biMatchStatistics;                                 // 0x0100(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchTelemetry                        biMatchTelemetry;                                  // 0x0160(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnitsStatistics                       biUnitsStatistics;                                 // 0x0178(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBuildingsStatistics                   biBuildingsStatistics;                             // 0x0198(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDurations                        biMatchDurations;                                  // 0x01B8(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDoctrineStatistics                    biDoctrineStatistics;                              // 0x01C8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchEndBiEvent) == 0x000008, "Wrong alignment on FClientMatchEndBiEvent");
static_assert(sizeof(FClientMatchEndBiEvent) == 0x0001D8, "Wrong size on FClientMatchEndBiEvent");
static_assert(offsetof(FClientMatchEndBiEvent, matchResults) == 0x000000, "Member 'FClientMatchEndBiEvent::matchResults' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biMetaStates) == 0x000028, "Member 'FClientMatchEndBiEvent::biMetaStates' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biMatchDetails) == 0x000040, "Member 'FClientMatchEndBiEvent::biMatchDetails' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biPlayerSettings) == 0x0000B8, "Member 'FClientMatchEndBiEvent::biPlayerSettings' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biMatchStatistics) == 0x000100, "Member 'FClientMatchEndBiEvent::biMatchStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biMatchTelemetry) == 0x000160, "Member 'FClientMatchEndBiEvent::biMatchTelemetry' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biUnitsStatistics) == 0x000178, "Member 'FClientMatchEndBiEvent::biUnitsStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biBuildingsStatistics) == 0x000198, "Member 'FClientMatchEndBiEvent::biBuildingsStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biMatchDurations) == 0x0001B8, "Member 'FClientMatchEndBiEvent::biMatchDurations' has a wrong offset!");
static_assert(offsetof(FClientMatchEndBiEvent, biDoctrineStatistics) == 0x0001C8, "Member 'FClientMatchEndBiEvent::biDoctrineStatistics' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchProgressBiEvent
// 0x01B8 (0x01B8 - 0x0000)
struct FClientMatchProgressBiEvent final
{
public:
	struct FClientMatchProgressBiEvent_MatchProgressDetails matchProgressDetails;                    // 0x0000(0x001C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchDetails                          biMatchDetails;                                    // 0x0020(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerSettings                        biPlayerSettings;                                  // 0x0098(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchStatistics                       biMatchStatistics;                                 // 0x00E0(0x0060)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchTelemetry                        biMatchTelemetry;                                  // 0x0140(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUnitsStatistics                       biUnitsStatistics;                                 // 0x0158(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBuildingsStatistics                   biBuildingsStatistics;                             // 0x0178(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDurations                        biMatchDurations;                                  // 0x0198(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDoctrineStatistics                    biDoctrineStatistics;                              // 0x01A8(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchProgressBiEvent) == 0x000008, "Wrong alignment on FClientMatchProgressBiEvent");
static_assert(sizeof(FClientMatchProgressBiEvent) == 0x0001B8, "Wrong size on FClientMatchProgressBiEvent");
static_assert(offsetof(FClientMatchProgressBiEvent, matchProgressDetails) == 0x000000, "Member 'FClientMatchProgressBiEvent::matchProgressDetails' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biMatchDetails) == 0x000020, "Member 'FClientMatchProgressBiEvent::biMatchDetails' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biPlayerSettings) == 0x000098, "Member 'FClientMatchProgressBiEvent::biPlayerSettings' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biMatchStatistics) == 0x0000E0, "Member 'FClientMatchProgressBiEvent::biMatchStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biMatchTelemetry) == 0x000140, "Member 'FClientMatchProgressBiEvent::biMatchTelemetry' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biUnitsStatistics) == 0x000158, "Member 'FClientMatchProgressBiEvent::biUnitsStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biBuildingsStatistics) == 0x000178, "Member 'FClientMatchProgressBiEvent::biBuildingsStatistics' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biMatchDurations) == 0x000198, "Member 'FClientMatchProgressBiEvent::biMatchDurations' has a wrong offset!");
static_assert(offsetof(FClientMatchProgressBiEvent, biDoctrineStatistics) == 0x0001A8, "Member 'FClientMatchProgressBiEvent::biDoctrineStatistics' has a wrong offset!");

// ScriptStruct Tempest.ClientMatchStartBiEvent
// 0x0148 (0x0148 - 0x0000)
struct FClientMatchStartBiEvent final
{
public:
	struct FClientMatchStartBiEvent_EventContext  eventContext;                                      // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientMatchStartBiEvent_PrematchDetails prematchDetails;                                 // 0x0018(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMetaStates                            biMetaStates;                                      // 0x0038(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0050(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchLoadout                          biMatchLoadout;                                    // 0x00C8(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerSettings                        biPlayerSettings;                                  // 0x0100(0x0048)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientMatchStartBiEvent) == 0x000008, "Wrong alignment on FClientMatchStartBiEvent");
static_assert(sizeof(FClientMatchStartBiEvent) == 0x000148, "Wrong size on FClientMatchStartBiEvent");
static_assert(offsetof(FClientMatchStartBiEvent, eventContext) == 0x000000, "Member 'FClientMatchStartBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent, prematchDetails) == 0x000018, "Member 'FClientMatchStartBiEvent::prematchDetails' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent, biMetaStates) == 0x000038, "Member 'FClientMatchStartBiEvent::biMetaStates' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent, biMatchDetails) == 0x000050, "Member 'FClientMatchStartBiEvent::biMatchDetails' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent, biMatchLoadout) == 0x0000C8, "Member 'FClientMatchStartBiEvent::biMatchLoadout' has a wrong offset!");
static_assert(offsetof(FClientMatchStartBiEvent, biPlayerSettings) == 0x000100, "Member 'FClientMatchStartBiEvent::biPlayerSettings' has a wrong offset!");

// ScriptStruct Tempest.ClientSettingsChangeBiEvent
// 0x0038 (0x0038 - 0x0000)
struct FClientSettingsChangeBiEvent final
{
public:
	struct FClientSettingsChangeBiEvent_SettingDetails settingDetails;                               // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientSettingsChangeBiEvent) == 0x000008, "Wrong alignment on FClientSettingsChangeBiEvent");
static_assert(sizeof(FClientSettingsChangeBiEvent) == 0x000038, "Wrong size on FClientSettingsChangeBiEvent");
static_assert(offsetof(FClientSettingsChangeBiEvent, settingDetails) == 0x000000, "Member 'FClientSettingsChangeBiEvent::settingDetails' has a wrong offset!");

// ScriptStruct Tempest.ClientTransactionBiEvent
// 0x0048 (0x0048 - 0x0000)
struct FClientTransactionBiEvent final
{
public:
	struct FClientTransactionBiEvent_EventContext eventContext;                                      // 0x0000(0x0020)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientTransactionBiEvent_Reason       Reason;                                            // 0x0020(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FClientTransactionBiEvent_Resource     Resource;                                          // 0x0030(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientTransactionBiEvent) == 0x000008, "Wrong alignment on FClientTransactionBiEvent");
static_assert(sizeof(FClientTransactionBiEvent) == 0x000048, "Wrong size on FClientTransactionBiEvent");
static_assert(offsetof(FClientTransactionBiEvent, eventContext) == 0x000000, "Member 'FClientTransactionBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FClientTransactionBiEvent, Reason) == 0x000020, "Member 'FClientTransactionBiEvent::Reason' has a wrong offset!");
static_assert(offsetof(FClientTransactionBiEvent, Resource) == 0x000030, "Member 'FClientTransactionBiEvent::Resource' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityBuildBiEvent
// 0x0150 (0x0150 - 0x0000)
struct FServerMatchActivityBuildBiEvent final
{
public:
	struct FServerMatchActivityBuildBiEvent_EventContext eventContext;                               // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerMatchActivityBuildBiEvent_BuildingDetails buildingDetails;                         // 0x0018(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLocation                              biLocation;                                        // 0x0058(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerProperties                      biPlayerProperties;                                // 0x0068(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerPlayerContext                   biServerPlayerContext;                             // 0x0098(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x00D8(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityBuildBiEvent) == 0x000008, "Wrong alignment on FServerMatchActivityBuildBiEvent");
static_assert(sizeof(FServerMatchActivityBuildBiEvent) == 0x000150, "Wrong size on FServerMatchActivityBuildBiEvent");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, eventContext) == 0x000000, "Member 'FServerMatchActivityBuildBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, buildingDetails) == 0x000018, "Member 'FServerMatchActivityBuildBiEvent::buildingDetails' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, biLocation) == 0x000058, "Member 'FServerMatchActivityBuildBiEvent::biLocation' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, biPlayerProperties) == 0x000068, "Member 'FServerMatchActivityBuildBiEvent::biPlayerProperties' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, biServerPlayerContext) == 0x000098, "Member 'FServerMatchActivityBuildBiEvent::biServerPlayerContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityBuildBiEvent, biMatchDetails) == 0x0000D8, "Member 'FServerMatchActivityBuildBiEvent::biMatchDetails' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivityProgressBiEvent
// 0x0100 (0x0100 - 0x0000)
struct FServerMatchActivityProgressBiEvent final
{
public:
	struct FServerMatchActivityProgressBiEvent_EventContext eventContext;                            // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerProperties                      biPlayerProperties;                                // 0x0018(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerPlayerContext                   biServerPlayerContext;                             // 0x0048(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x0088(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivityProgressBiEvent) == 0x000008, "Wrong alignment on FServerMatchActivityProgressBiEvent");
static_assert(sizeof(FServerMatchActivityProgressBiEvent) == 0x000100, "Wrong size on FServerMatchActivityProgressBiEvent");
static_assert(offsetof(FServerMatchActivityProgressBiEvent, eventContext) == 0x000000, "Member 'FServerMatchActivityProgressBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent, biPlayerProperties) == 0x000018, "Member 'FServerMatchActivityProgressBiEvent::biPlayerProperties' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent, biServerPlayerContext) == 0x000048, "Member 'FServerMatchActivityProgressBiEvent::biServerPlayerContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivityProgressBiEvent, biMatchDetails) == 0x000088, "Member 'FServerMatchActivityProgressBiEvent::biMatchDetails' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchActivitySupportPowerResultBiEvent
// 0x0128 (0x0128 - 0x0000)
struct FServerMatchActivitySupportPowerResultBiEvent final
{
public:
	struct FServerMatchActivitySupportPowerResultBiEvent_EventContext eventContext;                  // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLocation                              biLocation;                                        // 0x0030(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerProperties                      biPlayerProperties;                                // 0x0040(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerPlayerContext                   biServerPlayerContext;                             // 0x0070(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetails;                                    // 0x00B0(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchActivitySupportPowerResultBiEvent) == 0x000008, "Wrong alignment on FServerMatchActivitySupportPowerResultBiEvent");
static_assert(sizeof(FServerMatchActivitySupportPowerResultBiEvent) == 0x000128, "Wrong size on FServerMatchActivitySupportPowerResultBiEvent");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent, eventContext) == 0x000000, "Member 'FServerMatchActivitySupportPowerResultBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent, biLocation) == 0x000030, "Member 'FServerMatchActivitySupportPowerResultBiEvent::biLocation' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent, biPlayerProperties) == 0x000040, "Member 'FServerMatchActivitySupportPowerResultBiEvent::biPlayerProperties' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent, biServerPlayerContext) == 0x000070, "Member 'FServerMatchActivitySupportPowerResultBiEvent::biServerPlayerContext' has a wrong offset!");
static_assert(offsetof(FServerMatchActivitySupportPowerResultBiEvent, biMatchDetails) == 0x0000B0, "Member 'FServerMatchActivitySupportPowerResultBiEvent::biMatchDetails' has a wrong offset!");

// ScriptStruct Tempest.ServerMatchEndBiEvent
// 0x0118 (0x0118 - 0x0000)
struct FServerMatchEndBiEvent final
{
public:
	struct FServerMatchEndBiEvent_EventContext    eventContext;                                      // 0x0000(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FServerPlayerContext                   biServerPlayerContext;                             // 0x0030(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPlayerProperties                      biPlayerProperties;                                // 0x0070(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchDetails                          biMatchDetailsTR;                                  // 0x00A0(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerMatchEndBiEvent) == 0x000008, "Wrong alignment on FServerMatchEndBiEvent");
static_assert(sizeof(FServerMatchEndBiEvent) == 0x000118, "Wrong size on FServerMatchEndBiEvent");
static_assert(offsetof(FServerMatchEndBiEvent, eventContext) == 0x000000, "Member 'FServerMatchEndBiEvent::eventContext' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent, biServerPlayerContext) == 0x000030, "Member 'FServerMatchEndBiEvent::biServerPlayerContext' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent, biPlayerProperties) == 0x000070, "Member 'FServerMatchEndBiEvent::biPlayerProperties' has a wrong offset!");
static_assert(offsetof(FServerMatchEndBiEvent, biMatchDetailsTR) == 0x0000A0, "Member 'FServerMatchEndBiEvent::biMatchDetailsTR' has a wrong offset!");

// ScriptStruct Tempest.TedTextWidgetThemedConfig
// 0x0088 (0x0088 - 0x0000)
struct FTedTextWidgetThemedConfig final
{
public:
	struct FTedTextWidgetConfig                   Default;                                           // 0x0000(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ETedFaction, struct FTedTextWidgetConfig> ThemeOverrides;                                   // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedTextWidgetThemedConfig) == 0x000008, "Wrong alignment on FTedTextWidgetThemedConfig");
static_assert(sizeof(FTedTextWidgetThemedConfig) == 0x000088, "Wrong size on FTedTextWidgetThemedConfig");
static_assert(offsetof(FTedTextWidgetThemedConfig, Default) == 0x000000, "Member 'FTedTextWidgetThemedConfig::Default' has a wrong offset!");
static_assert(offsetof(FTedTextWidgetThemedConfig, ThemeOverrides) == 0x000038, "Member 'FTedTextWidgetThemedConfig::ThemeOverrides' has a wrong offset!");

// ScriptStruct Tempest.TedUI_Transition_Tickable
// 0x000C (0x000C - 0x0000)
struct FTedUI_Transition_Tickable final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Current;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUI_Transition_Tickable) == 0x000004, "Wrong alignment on FTedUI_Transition_Tickable");
static_assert(sizeof(FTedUI_Transition_Tickable) == 0x00000C, "Wrong size on FTedUI_Transition_Tickable");
static_assert(offsetof(FTedUI_Transition_Tickable, Duration) == 0x000000, "Member 'FTedUI_Transition_Tickable::Duration' has a wrong offset!");
static_assert(offsetof(FTedUI_Transition_Tickable, Current) == 0x000004, "Member 'FTedUI_Transition_Tickable::Current' has a wrong offset!");
static_assert(offsetof(FTedUI_Transition_Tickable, Target) == 0x000008, "Member 'FTedUI_Transition_Tickable::Target' has a wrong offset!");

// ScriptStruct Tempest.TedUI_TransitionCurve
// 0x0018 (0x0018 - 0x0000)
struct FTedUI_TransitionCurve final
{
public:
	EEasingFunc                                   EaseFunction;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EaseBlendExp;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EaseSteps;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUI_TransitionCurve) == 0x000008, "Wrong alignment on FTedUI_TransitionCurve");
static_assert(sizeof(FTedUI_TransitionCurve) == 0x000018, "Wrong size on FTedUI_TransitionCurve");
static_assert(offsetof(FTedUI_TransitionCurve, EaseFunction) == 0x000000, "Member 'FTedUI_TransitionCurve::EaseFunction' has a wrong offset!");
static_assert(offsetof(FTedUI_TransitionCurve, EaseBlendExp) == 0x000004, "Member 'FTedUI_TransitionCurve::EaseBlendExp' has a wrong offset!");
static_assert(offsetof(FTedUI_TransitionCurve, EaseSteps) == 0x000008, "Member 'FTedUI_TransitionCurve::EaseSteps' has a wrong offset!");
static_assert(offsetof(FTedUI_TransitionCurve, Curve) == 0x000010, "Member 'FTedUI_TransitionCurve::Curve' has a wrong offset!");

// ScriptStruct Tempest.TedFormattedText
// 0x0060 (0x0060 - 0x0000)
struct FTedFormattedText final
{
public:
	class FText                                   Format;                                            // 0x0000(0x0010)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Arguments;                                         // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedFormattedText) == 0x000008, "Wrong alignment on FTedFormattedText");
static_assert(sizeof(FTedFormattedText) == 0x000060, "Wrong size on FTedFormattedText");
static_assert(offsetof(FTedFormattedText, Format) == 0x000000, "Member 'FTedFormattedText::Format' has a wrong offset!");
static_assert(offsetof(FTedFormattedText, Arguments) == 0x000010, "Member 'FTedFormattedText::Arguments' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_Mines
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCommandDataPayload_Mines final : public FGameplayCommandDataCustomPayload
{
public:
	bool                                          bInitialMine;                                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_Mines) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_Mines");
static_assert(sizeof(FGameplayCommandDataPayload_Mines) == 0x000010, "Wrong size on FGameplayCommandDataPayload_Mines");
static_assert(offsetof(FGameplayCommandDataPayload_Mines, bInitialMine) == 0x000008, "Member 'FGameplayCommandDataPayload_Mines::bInitialMine' has a wrong offset!");

// ScriptStruct Tempest.GameplayCommandDataPayload_GuardLocation
// 0x0008 (0x0010 - 0x0008)
struct FGameplayCommandDataPayload_GuardLocation final : public FGameplayCommandDataCustomPayload
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_GuardLocation) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_GuardLocation");
static_assert(sizeof(FGameplayCommandDataPayload_GuardLocation) == 0x000010, "Wrong size on FGameplayCommandDataPayload_GuardLocation");

// ScriptStruct Tempest.GameplayCommandDataPayload_Patrol
// 0x0018 (0x0020 - 0x0008)
struct FGameplayCommandDataPayload_Patrol final : public FGameplayCommandDataCustomPayload
{
public:
	TArray<struct FVector>                        PatrolPoints;                                      // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bLoopMove;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetupCompleted;                                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplayCommandDataPayload_Patrol) == 0x000008, "Wrong alignment on FGameplayCommandDataPayload_Patrol");
static_assert(sizeof(FGameplayCommandDataPayload_Patrol) == 0x000020, "Wrong size on FGameplayCommandDataPayload_Patrol");
static_assert(offsetof(FGameplayCommandDataPayload_Patrol, PatrolPoints) == 0x000008, "Member 'FGameplayCommandDataPayload_Patrol::PatrolPoints' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_Patrol, bLoopMove) == 0x000018, "Member 'FGameplayCommandDataPayload_Patrol::bLoopMove' has a wrong offset!");
static_assert(offsetof(FGameplayCommandDataPayload_Patrol, bSetupCompleted) == 0x000019, "Member 'FGameplayCommandDataPayload_Patrol::bSetupCompleted' has a wrong offset!");

// ScriptStruct Tempest.RepMoveSnapshot
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FRepMoveSnapshot final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRepMoveSnapshot) == 0x000008, "Wrong alignment on FRepMoveSnapshot");
static_assert(sizeof(FRepMoveSnapshot) == 0x000028, "Wrong size on FRepMoveSnapshot");

// ScriptStruct Tempest.MoveSnapshotRepHistory
// 0x00B8 (0x00B8 - 0x0000)
struct alignas(0x08) FMoveSnapshotRepHistory final
{
public:
	uint8                                         Pad_0[0xB8];                                       // 0x0000(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoveSnapshotRepHistory) == 0x000008, "Wrong alignment on FMoveSnapshotRepHistory");
static_assert(sizeof(FMoveSnapshotRepHistory) == 0x0000B8, "Wrong size on FMoveSnapshotRepHistory");

// ScriptStruct Tempest.UnitSpawnerComponentData
// 0x0060 (0x0060 - 0x0000)
struct FUnitSpawnerComponentData final
{
public:
	class UTedUnitDefinitionAsset*                UnitDefinition;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAliveUnits;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialSpawnCount;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitRespawnTime;                                   // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyUnitsWithOwner;                            // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAttributeMod                          MaxAliveUnitsMod;                                  // 0x0018(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnitSpawnerComponentData) == 0x000008, "Wrong alignment on FUnitSpawnerComponentData");
static_assert(sizeof(FUnitSpawnerComponentData) == 0x000060, "Wrong size on FUnitSpawnerComponentData");
static_assert(offsetof(FUnitSpawnerComponentData, UnitDefinition) == 0x000000, "Member 'FUnitSpawnerComponentData::UnitDefinition' has a wrong offset!");
static_assert(offsetof(FUnitSpawnerComponentData, MaxAliveUnits) == 0x000008, "Member 'FUnitSpawnerComponentData::MaxAliveUnits' has a wrong offset!");
static_assert(offsetof(FUnitSpawnerComponentData, InitialSpawnCount) == 0x00000C, "Member 'FUnitSpawnerComponentData::InitialSpawnCount' has a wrong offset!");
static_assert(offsetof(FUnitSpawnerComponentData, UnitRespawnTime) == 0x000010, "Member 'FUnitSpawnerComponentData::UnitRespawnTime' has a wrong offset!");
static_assert(offsetof(FUnitSpawnerComponentData, bDestroyUnitsWithOwner) == 0x000014, "Member 'FUnitSpawnerComponentData::bDestroyUnitsWithOwner' has a wrong offset!");
static_assert(offsetof(FUnitSpawnerComponentData, MaxAliveUnitsMod) == 0x000018, "Member 'FUnitSpawnerComponentData::MaxAliveUnitsMod' has a wrong offset!");

// ScriptStruct Tempest.VolumeSpawnInstance
// 0x0090 (0x0090 - 0x0000)
struct FVolumeSpawnInstance final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       OffsetSpawnSplineComponent;                        // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVolumeSpawnInstance) == 0x000008, "Wrong alignment on FVolumeSpawnInstance");
static_assert(sizeof(FVolumeSpawnInstance) == 0x000090, "Wrong size on FVolumeSpawnInstance");
static_assert(offsetof(FVolumeSpawnInstance, OffsetSpawnSplineComponent) == 0x000080, "Member 'FVolumeSpawnInstance::OffsetSpawnSplineComponent' has a wrong offset!");

// ScriptStruct Tempest.MoveSnapshot
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FMoveSnapshot final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoveSnapshot) == 0x000008, "Wrong alignment on FMoveSnapshot");
static_assert(sizeof(FMoveSnapshot) == 0x000030, "Wrong size on FMoveSnapshot");

// ScriptStruct Tempest.MoveSnapshotBuffer
// 0x0318 (0x0318 - 0x0000)
struct alignas(0x08) FMoveSnapshotBuffer final
{
public:
	uint8                                         Pad_0[0x318];                                      // 0x0000(0x0318)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoveSnapshotBuffer) == 0x000008, "Wrong alignment on FMoveSnapshotBuffer");
static_assert(sizeof(FMoveSnapshotBuffer) == 0x000318, "Wrong size on FMoveSnapshotBuffer");

// ScriptStruct Tempest.TedUpgradeCondition_HasResource
// 0x0010 (0x0020 - 0x0010)
struct FTedUpgradeCondition_HasResource final : public FTedUpgradeCondition
{
public:
	ETedUpgradeCondition_ResourceType             ResourceType;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResourceAmount;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EComparison                                   ComparisonMethod;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition_HasResource) == 0x000008, "Wrong alignment on FTedUpgradeCondition_HasResource");
static_assert(sizeof(FTedUpgradeCondition_HasResource) == 0x000020, "Wrong size on FTedUpgradeCondition_HasResource");
static_assert(offsetof(FTedUpgradeCondition_HasResource, ResourceType) == 0x000010, "Member 'FTedUpgradeCondition_HasResource::ResourceType' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_HasResource, ResourceAmount) == 0x000014, "Member 'FTedUpgradeCondition_HasResource::ResourceAmount' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_HasResource, ComparisonMethod) == 0x000018, "Member 'FTedUpgradeCondition_HasResource::ComparisonMethod' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition_NotInLowPower
// 0x0000 (0x0010 - 0x0010)
struct FTedUpgradeCondition_NotInLowPower final : public FTedUpgradeCondition
{
};
static_assert(alignof(FTedUpgradeCondition_NotInLowPower) == 0x000008, "Wrong alignment on FTedUpgradeCondition_NotInLowPower");
static_assert(sizeof(FTedUpgradeCondition_NotInLowPower) == 0x000010, "Wrong size on FTedUpgradeCondition_NotInLowPower");

// ScriptStruct Tempest.TedUpgradeCondition_SourcePawnHasPower
// 0x0008 (0x0018 - 0x0010)
struct FTedUpgradeCondition_SourcePawnHasPower final : public FTedUpgradeCondition
{
public:
	bool                                          bRequireAllPawns;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnlyUserDisabled;                                 // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIgnoreLowPowerSlowDown;                           // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition_SourcePawnHasPower) == 0x000008, "Wrong alignment on FTedUpgradeCondition_SourcePawnHasPower");
static_assert(sizeof(FTedUpgradeCondition_SourcePawnHasPower) == 0x000018, "Wrong size on FTedUpgradeCondition_SourcePawnHasPower");
static_assert(offsetof(FTedUpgradeCondition_SourcePawnHasPower, bRequireAllPawns) == 0x000010, "Member 'FTedUpgradeCondition_SourcePawnHasPower::bRequireAllPawns' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_SourcePawnHasPower, bOnlyUserDisabled) == 0x000011, "Member 'FTedUpgradeCondition_SourcePawnHasPower::bOnlyUserDisabled' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_SourcePawnHasPower, bIgnoreLowPowerSlowDown) == 0x000012, "Member 'FTedUpgradeCondition_SourcePawnHasPower::bIgnoreLowPowerSlowDown' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition_PlayerHasTags
// 0x0028 (0x0038 - 0x0010)
struct FTedUpgradeCondition_PlayerHasTags final : public FTedUpgradeCondition
{
public:
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0010(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequireAll;                                       // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition_PlayerHasTags) == 0x000008, "Wrong alignment on FTedUpgradeCondition_PlayerHasTags");
static_assert(sizeof(FTedUpgradeCondition_PlayerHasTags) == 0x000038, "Wrong size on FTedUpgradeCondition_PlayerHasTags");
static_assert(offsetof(FTedUpgradeCondition_PlayerHasTags, RequiredTags) == 0x000010, "Member 'FTedUpgradeCondition_PlayerHasTags::RequiredTags' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_PlayerHasTags, bRequireAll) == 0x000030, "Member 'FTedUpgradeCondition_PlayerHasTags::bRequireAll' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition_PlayerHasUpgrades
// 0x0058 (0x0068 - 0x0010)
struct FTedUpgradeCondition_PlayerHasUpgrades final : public FTedUpgradeCondition
{
public:
	TSet<TSoftObjectPtr<class UTedUpgrade>>       RequiredUpgrades;                                  // 0x0010(0x0050)(Edit, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bRequireAll;                                       // 0x0060(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition_PlayerHasUpgrades) == 0x000008, "Wrong alignment on FTedUpgradeCondition_PlayerHasUpgrades");
static_assert(sizeof(FTedUpgradeCondition_PlayerHasUpgrades) == 0x000068, "Wrong size on FTedUpgradeCondition_PlayerHasUpgrades");
static_assert(offsetof(FTedUpgradeCondition_PlayerHasUpgrades, RequiredUpgrades) == 0x000010, "Member 'FTedUpgradeCondition_PlayerHasUpgrades::RequiredUpgrades' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_PlayerHasUpgrades, bRequireAll) == 0x000060, "Member 'FTedUpgradeCondition_PlayerHasUpgrades::bRequireAll' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeCondition_Combined
// 0x0018 (0x0028 - 0x0010)
struct FTedUpgradeCondition_Combined final : public FTedUpgradeCondition
{
public:
	TArray<struct FTedInstancedStruct>            Conditions;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bRequireAll;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeCondition_Combined) == 0x000008, "Wrong alignment on FTedUpgradeCondition_Combined");
static_assert(sizeof(FTedUpgradeCondition_Combined) == 0x000028, "Wrong size on FTedUpgradeCondition_Combined");
static_assert(offsetof(FTedUpgradeCondition_Combined, Conditions) == 0x000010, "Member 'FTedUpgradeCondition_Combined::Conditions' has a wrong offset!");
static_assert(offsetof(FTedUpgradeCondition_Combined, bRequireAll) == 0x000020, "Member 'FTedUpgradeCondition_Combined::bRequireAll' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessorHandle
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTedUpgradeProcessorHandle final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedUpgradeProcessorHandle) == 0x000004, "Wrong alignment on FTedUpgradeProcessorHandle");
static_assert(sizeof(FTedUpgradeProcessorHandle) == 0x000004, "Wrong size on FTedUpgradeProcessorHandle");

// ScriptStruct Tempest.TedActiveUpgrade
// 0x0040 (0x0040 - 0x0000)
struct FTedActiveUpgrade final
{
public:
	class UTedUpgrade*                            Upgrade;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ATedPlayerState*                        OwningPlayerState;                                 // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ATedPawn*>                       SourcePawns;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTedUpgradeProcessorHandle>     ProcessorsHandles;                                 // 0x0020(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedActiveUpgrade) == 0x000008, "Wrong alignment on FTedActiveUpgrade");
static_assert(sizeof(FTedActiveUpgrade) == 0x000040, "Wrong size on FTedActiveUpgrade");
static_assert(offsetof(FTedActiveUpgrade, Upgrade) == 0x000000, "Member 'FTedActiveUpgrade::Upgrade' has a wrong offset!");
static_assert(offsetof(FTedActiveUpgrade, OwningPlayerState) == 0x000008, "Member 'FTedActiveUpgrade::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(FTedActiveUpgrade, SourcePawns) == 0x000010, "Member 'FTedActiveUpgrade::SourcePawns' has a wrong offset!");
static_assert(offsetof(FTedActiveUpgrade, ProcessorsHandles) == 0x000020, "Member 'FTedActiveUpgrade::ProcessorsHandles' has a wrong offset!");

// ScriptStruct Tempest.TedPlayerUpgradeData
// 0x00A0 (0x00A0 - 0x0000)
struct FTedPlayerUpgradeData final
{
public:
	TSet<struct FTedActiveUpgrade>                ActiveUpgrades;                                    // 0x0000(0x0050)(Transient, NativeAccessSpecifierPublic)
	TSet<class ATedPawn*>                         RegisteredPawns;                                   // 0x0050(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedPlayerUpgradeData) == 0x000008, "Wrong alignment on FTedPlayerUpgradeData");
static_assert(sizeof(FTedPlayerUpgradeData) == 0x0000A0, "Wrong size on FTedPlayerUpgradeData");
static_assert(offsetof(FTedPlayerUpgradeData, ActiveUpgrades) == 0x000000, "Member 'FTedPlayerUpgradeData::ActiveUpgrades' has a wrong offset!");
static_assert(offsetof(FTedPlayerUpgradeData, RegisteredPawns) == 0x000050, "Member 'FTedPlayerUpgradeData::RegisteredPawns' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_Definition
// 0x0058 (0x0078 - 0x0020)
struct FTedUpgradeProcessor_Definition final : public FTedUpgradeProcessor
{
public:
	TSubclassOf<class UTedDefinitionAsset>        DefinitionType;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTedDefinitionIdsFilter                DefinitionIdsFilter;                               // 0x0028(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTedDefinitionPropertyModifier> Modifiers;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FTedDefinitionConditions               Conditions;                                        // 0x0060(0x0018)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_Definition) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_Definition");
static_assert(sizeof(FTedUpgradeProcessor_Definition) == 0x000078, "Wrong size on FTedUpgradeProcessor_Definition");
static_assert(offsetof(FTedUpgradeProcessor_Definition, DefinitionType) == 0x000020, "Member 'FTedUpgradeProcessor_Definition::DefinitionType' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_Definition, DefinitionIdsFilter) == 0x000028, "Member 'FTedUpgradeProcessor_Definition::DefinitionIdsFilter' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_Definition, Modifiers) == 0x000050, "Member 'FTedUpgradeProcessor_Definition::Modifiers' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_Definition, Conditions) == 0x000060, "Member 'FTedUpgradeProcessor_Definition::Conditions' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_GameplayEffect
// 0x0038 (0x0058 - 0x0020)
struct FTedUpgradeProcessor_GameplayEffect final : public FTedUpgradeProcessor
{
public:
	struct FTedDefinitionIdsFilter                DefinitionIdsFilter;                               // 0x0020(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bAppliedOnlyToSourcePawns;                         // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            AppliedGE;                                         // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_GameplayEffect) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_GameplayEffect");
static_assert(sizeof(FTedUpgradeProcessor_GameplayEffect) == 0x000058, "Wrong size on FTedUpgradeProcessor_GameplayEffect");
static_assert(offsetof(FTedUpgradeProcessor_GameplayEffect, DefinitionIdsFilter) == 0x000020, "Member 'FTedUpgradeProcessor_GameplayEffect::DefinitionIdsFilter' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GameplayEffect, bAppliedOnlyToSourcePawns) == 0x000048, "Member 'FTedUpgradeProcessor_GameplayEffect::bAppliedOnlyToSourcePawns' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GameplayEffect, AppliedGE) == 0x000050, "Member 'FTedUpgradeProcessor_GameplayEffect::AppliedGE' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_PlayerTags
// 0x0090 (0x00B0 - 0x0020)
struct FTedUpgradeProcessor_PlayerTags final : public FTedUpgradeProcessor
{
public:
	struct FGameplayTagContainer                  AddedOwnedTags;                                    // 0x0020(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RemovedOwnedTags;                                  // 0x0040(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<struct FTedUpgradeProcessorHandle, struct FGameplayTagContainer> ActuallyRemovedOwnedTags;  // 0x0060(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedUpgradeProcessor_PlayerTags) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_PlayerTags");
static_assert(sizeof(FTedUpgradeProcessor_PlayerTags) == 0x0000B0, "Wrong size on FTedUpgradeProcessor_PlayerTags");
static_assert(offsetof(FTedUpgradeProcessor_PlayerTags, AddedOwnedTags) == 0x000020, "Member 'FTedUpgradeProcessor_PlayerTags::AddedOwnedTags' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_PlayerTags, RemovedOwnedTags) == 0x000040, "Member 'FTedUpgradeProcessor_PlayerTags::RemovedOwnedTags' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_PlayerTags, ActuallyRemovedOwnedTags) == 0x000060, "Member 'FTedUpgradeProcessor_PlayerTags::ActuallyRemovedOwnedTags' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_GenerateResources
// 0x00B0 (0x00D0 - 0x0020)
struct FTedUpgradeProcessor_GenerateResources final : public FTedUpgradeProcessor
{
public:
	int32                                         CreditsGeneration;                                 // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         IntelGeneration;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PowerGeneration;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GenerationInterval;                                // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FTedUpgradeProcessorHandle, struct FTimerHandle> GenerateResourcesHandles;           // 0x0030(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FTedUpgradeProcessorHandle, float> GenerateResourcesNextTickTimes;                   // 0x0080(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FTedUpgradeProcessor_GenerateResources) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_GenerateResources");
static_assert(sizeof(FTedUpgradeProcessor_GenerateResources) == 0x0000D0, "Wrong size on FTedUpgradeProcessor_GenerateResources");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, CreditsGeneration) == 0x000020, "Member 'FTedUpgradeProcessor_GenerateResources::CreditsGeneration' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, IntelGeneration) == 0x000024, "Member 'FTedUpgradeProcessor_GenerateResources::IntelGeneration' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, PowerGeneration) == 0x000028, "Member 'FTedUpgradeProcessor_GenerateResources::PowerGeneration' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, GenerationInterval) == 0x00002C, "Member 'FTedUpgradeProcessor_GenerateResources::GenerationInterval' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, GenerateResourcesHandles) == 0x000030, "Member 'FTedUpgradeProcessor_GenerateResources::GenerateResourcesHandles' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_GenerateResources, GenerateResourcesNextTickTimes) == 0x000080, "Member 'FTedUpgradeProcessor_GenerateResources::GenerateResourcesNextTickTimes' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeProcessor_AddLooseGameplayTags
// 0x0050 (0x0070 - 0x0020)
struct FTedUpgradeProcessor_AddLooseGameplayTags final : public FTedUpgradeProcessor
{
public:
	struct FTedDefinitionIdsFilter                DefinitionIdsFilter;                               // 0x0020(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bAppliedOnlyToSourcePawns;                         // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AddedTags;                                         // 0x0050(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTedUpgradeProcessor_AddLooseGameplayTags) == 0x000008, "Wrong alignment on FTedUpgradeProcessor_AddLooseGameplayTags");
static_assert(sizeof(FTedUpgradeProcessor_AddLooseGameplayTags) == 0x000070, "Wrong size on FTedUpgradeProcessor_AddLooseGameplayTags");
static_assert(offsetof(FTedUpgradeProcessor_AddLooseGameplayTags, DefinitionIdsFilter) == 0x000020, "Member 'FTedUpgradeProcessor_AddLooseGameplayTags::DefinitionIdsFilter' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_AddLooseGameplayTags, bAppliedOnlyToSourcePawns) == 0x000048, "Member 'FTedUpgradeProcessor_AddLooseGameplayTags::bAppliedOnlyToSourcePawns' has a wrong offset!");
static_assert(offsetof(FTedUpgradeProcessor_AddLooseGameplayTags, AddedTags) == 0x000050, "Member 'FTedUpgradeProcessor_AddLooseGameplayTags::AddedTags' has a wrong offset!");

// ScriptStruct Tempest.TedReplicatedUpgradeInfo
// 0x0030 (0x0030 - 0x0000)
struct FTedReplicatedUpgradeInfo final
{
public:
	class UTedUpgrade*                            Upgrade;                                           // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPlayerState*                        OwningPlayerState;                                 // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       SourcePawns;                                       // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<bool>                                  ProcessorActiveStates;                             // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedReplicatedUpgradeInfo) == 0x000008, "Wrong alignment on FTedReplicatedUpgradeInfo");
static_assert(sizeof(FTedReplicatedUpgradeInfo) == 0x000030, "Wrong size on FTedReplicatedUpgradeInfo");
static_assert(offsetof(FTedReplicatedUpgradeInfo, Upgrade) == 0x000000, "Member 'FTedReplicatedUpgradeInfo::Upgrade' has a wrong offset!");
static_assert(offsetof(FTedReplicatedUpgradeInfo, OwningPlayerState) == 0x000008, "Member 'FTedReplicatedUpgradeInfo::OwningPlayerState' has a wrong offset!");
static_assert(offsetof(FTedReplicatedUpgradeInfo, SourcePawns) == 0x000010, "Member 'FTedReplicatedUpgradeInfo::SourcePawns' has a wrong offset!");
static_assert(offsetof(FTedReplicatedUpgradeInfo, ProcessorActiveStates) == 0x000020, "Member 'FTedReplicatedUpgradeInfo::ProcessorActiveStates' has a wrong offset!");

// ScriptStruct Tempest.TedUpgradeExtendedDescription
// 0x0060 (0x0060 - 0x0000)
struct FTedUpgradeExtendedDescription final
{
public:
	class FText                                   Category;                                          // 0x0000(0x0010)(Transient, NativeAccessSpecifierPublic)
	TSet<class UTedEntityDefinitionAsset*>        AffectedDefinitions;                               // 0x0010(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUpgradeExtendedDescription) == 0x000008, "Wrong alignment on FTedUpgradeExtendedDescription");
static_assert(sizeof(FTedUpgradeExtendedDescription) == 0x000060, "Wrong size on FTedUpgradeExtendedDescription");
static_assert(offsetof(FTedUpgradeExtendedDescription, Category) == 0x000000, "Member 'FTedUpgradeExtendedDescription::Category' has a wrong offset!");
static_assert(offsetof(FTedUpgradeExtendedDescription, AffectedDefinitions) == 0x000010, "Member 'FTedUpgradeExtendedDescription::AffectedDefinitions' has a wrong offset!");

// ScriptStruct Tempest.TedAudioSetting
// 0x0030 (0x0030 - 0x0000)
struct FTedAudioSetting
{
public:
	TSoftObjectPtr<class USoundClass>             SoundClass;                                        // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTedAudioSetting) == 0x000008, "Wrong alignment on FTedAudioSetting");
static_assert(sizeof(FTedAudioSetting) == 0x000030, "Wrong size on FTedAudioSetting");
static_assert(offsetof(FTedAudioSetting, SoundClass) == 0x000000, "Member 'FTedAudioSetting::SoundClass' has a wrong offset!");
static_assert(offsetof(FTedAudioSetting, Volume) == 0x000028, "Member 'FTedAudioSetting::Volume' has a wrong offset!");

// ScriptStruct Tempest.TedAudioProjectSetting
// 0x0020 (0x0050 - 0x0030)
struct FTedAudioProjectSetting final : public FTedAudioSetting
{
public:
	class FText                                   Name;                                              // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0010)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedAudioProjectSetting) == 0x000008, "Wrong alignment on FTedAudioProjectSetting");
static_assert(sizeof(FTedAudioProjectSetting) == 0x000050, "Wrong size on FTedAudioProjectSetting");
static_assert(offsetof(FTedAudioProjectSetting, Name) == 0x000030, "Member 'FTedAudioProjectSetting::Name' has a wrong offset!");
static_assert(offsetof(FTedAudioProjectSetting, Description) == 0x000040, "Member 'FTedAudioProjectSetting::Description' has a wrong offset!");

// ScriptStruct Tempest.TedScalingConfig
// 0x000C (0x000C - 0x0000)
struct FTedScalingConfig final
{
public:
	float                                         min_0;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         max_0;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Step;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedScalingConfig) == 0x000004, "Wrong alignment on FTedScalingConfig");
static_assert(sizeof(FTedScalingConfig) == 0x00000C, "Wrong size on FTedScalingConfig");
static_assert(offsetof(FTedScalingConfig, min_0) == 0x000000, "Member 'FTedScalingConfig::min_0' has a wrong offset!");
static_assert(offsetof(FTedScalingConfig, max_0) == 0x000004, "Member 'FTedScalingConfig::max_0' has a wrong offset!");
static_assert(offsetof(FTedScalingConfig, Step) == 0x000008, "Member 'FTedScalingConfig::Step' has a wrong offset!");

// ScriptStruct Tempest.TedUtilsPawnFilter
// 0x00D0 (0x00D0 - 0x0000)
struct FTedUtilsPawnFilter final
{
public:
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0000(0x0088)(Edit, BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DomainFilter;                                      // 0x0088(0x0020)(Edit, BlueprintVisible, SaveGame, NativeAccessSpecifierPublic)
	struct FTedAttitudeFilter                     AttitudeFilter;                                    // 0x00A8(0x0002)(Edit, BlueprintVisible, SaveGame, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATedPawn*>                       WhitelistedPawns;                                  // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       BlacklistedPawns;                                  // 0x00C0(0x0010)(BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTedUtilsPawnFilter) == 0x000008, "Wrong alignment on FTedUtilsPawnFilter");
static_assert(sizeof(FTedUtilsPawnFilter) == 0x0000D0, "Wrong size on FTedUtilsPawnFilter");
static_assert(offsetof(FTedUtilsPawnFilter, TagRequirements) == 0x000000, "Member 'FTedUtilsPawnFilter::TagRequirements' has a wrong offset!");
static_assert(offsetof(FTedUtilsPawnFilter, DomainFilter) == 0x000088, "Member 'FTedUtilsPawnFilter::DomainFilter' has a wrong offset!");
static_assert(offsetof(FTedUtilsPawnFilter, AttitudeFilter) == 0x0000A8, "Member 'FTedUtilsPawnFilter::AttitudeFilter' has a wrong offset!");
static_assert(offsetof(FTedUtilsPawnFilter, WhitelistedPawns) == 0x0000B0, "Member 'FTedUtilsPawnFilter::WhitelistedPawns' has a wrong offset!");
static_assert(offsetof(FTedUtilsPawnFilter, BlacklistedPawns) == 0x0000C0, "Member 'FTedUtilsPawnFilter::BlacklistedPawns' has a wrong offset!");

// ScriptStruct Tempest.WindEffectConfig
// 0x0020 (0x0020 - 0x0000)
struct FWindEffectConfig final
{
public:
	TArray<struct FWindParamData>                 WindParametersData;                                // 0x0000(0x0010)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxNumConcurrentlyPlaying;                         // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanBePreculled : 1;                               // 0x001A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFadeOutOnCulled : 1;                              // 0x001A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindEffectConfig) == 0x000008, "Wrong alignment on FWindEffectConfig");
static_assert(sizeof(FWindEffectConfig) == 0x000020, "Wrong size on FWindEffectConfig");
static_assert(offsetof(FWindEffectConfig, WindParametersData) == 0x000000, "Member 'FWindEffectConfig::WindParametersData' has a wrong offset!");
static_assert(offsetof(FWindEffectConfig, FadeOutTime) == 0x000010, "Member 'FWindEffectConfig::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FWindEffectConfig, Cooldown) == 0x000014, "Member 'FWindEffectConfig::Cooldown' has a wrong offset!");
static_assert(offsetof(FWindEffectConfig, Priority) == 0x000018, "Member 'FWindEffectConfig::Priority' has a wrong offset!");
static_assert(offsetof(FWindEffectConfig, MaxNumConcurrentlyPlaying) == 0x000019, "Member 'FWindEffectConfig::MaxNumConcurrentlyPlaying' has a wrong offset!");

// ScriptStruct Tempest.WindEffectQueueData
// 0x0028 (0x0028 - 0x0000)
struct FWindEffectQueueData final
{
public:
	class UTedWindEffectConfig*                   ConfigAsset;                                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeQueued;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindEffectQueueData) == 0x000008, "Wrong alignment on FWindEffectQueueData");
static_assert(sizeof(FWindEffectQueueData) == 0x000028, "Wrong size on FWindEffectQueueData");
static_assert(offsetof(FWindEffectQueueData, ConfigAsset) == 0x000000, "Member 'FWindEffectQueueData::ConfigAsset' has a wrong offset!");
static_assert(offsetof(FWindEffectQueueData, Location) == 0x000008, "Member 'FWindEffectQueueData::Location' has a wrong offset!");
static_assert(offsetof(FWindEffectQueueData, TimeQueued) == 0x000020, "Member 'FWindEffectQueueData::TimeQueued' has a wrong offset!");

// ScriptStruct Tempest.WindEffectScalabilityState
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FWindEffectScalabilityState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWindEffectScalabilityState) == 0x000004, "Wrong alignment on FWindEffectScalabilityState");
static_assert(sizeof(FWindEffectScalabilityState) == 0x000008, "Wrong size on FWindEffectScalabilityState");

// ScriptStruct Tempest.TempestFieldOverlappedPawnGEData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FTempestFieldOverlappedPawnGEData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTempestFieldOverlappedPawnGEData) == 0x000008, "Wrong alignment on FTempestFieldOverlappedPawnGEData");
static_assert(sizeof(FTempestFieldOverlappedPawnGEData) == 0x000020, "Wrong size on FTempestFieldOverlappedPawnGEData");

// ScriptStruct Tempest.TempestFieldTileRepStage
// 0x0008 (0x0018 - 0x0010)
struct FTempestFieldTileRepStage final : public FOwnedStruct
{
public:
	int32                                         Idx;                                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldGrowthStage                      Stage;                                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTempestFieldTileRepStage) == 0x000008, "Wrong alignment on FTempestFieldTileRepStage");
static_assert(sizeof(FTempestFieldTileRepStage) == 0x000018, "Wrong size on FTempestFieldTileRepStage");
static_assert(offsetof(FTempestFieldTileRepStage, Idx) == 0x000010, "Member 'FTempestFieldTileRepStage::Idx' has a wrong offset!");
static_assert(offsetof(FTempestFieldTileRepStage, Stage) == 0x000014, "Member 'FTempestFieldTileRepStage::Stage' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldRepStage
// 0x0010 (0x0020 - 0x0010)
struct FTempestFieldRepStage final : public FOwnedStruct
{
public:
	TArray<struct FTempestFieldTileRepStage>      RepTileStage;                                      // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTempestFieldRepStage) == 0x000008, "Wrong alignment on FTempestFieldRepStage");
static_assert(sizeof(FTempestFieldRepStage) == 0x000020, "Wrong size on FTempestFieldRepStage");
static_assert(offsetof(FTempestFieldRepStage, RepTileStage) == 0x000010, "Member 'FTempestFieldRepStage::RepTileStage' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldTileRepVisibility
// 0x0060 (0x0070 - 0x0010)
struct FTempestFieldTileRepVisibility final : public FOwnedStruct
{
public:
	int32                                         Idx;                                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x5C];                                      // 0x0014(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTempestFieldTileRepVisibility) == 0x000008, "Wrong alignment on FTempestFieldTileRepVisibility");
static_assert(sizeof(FTempestFieldTileRepVisibility) == 0x000070, "Wrong size on FTempestFieldTileRepVisibility");
static_assert(offsetof(FTempestFieldTileRepVisibility, Idx) == 0x000010, "Member 'FTempestFieldTileRepVisibility::Idx' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldRepVisibility
// 0x0010 (0x0020 - 0x0010)
struct FTempestFieldRepVisibility final : public FOwnedStruct
{
public:
	TArray<struct FTempestFieldTileRepVisibility> RepTileVisibility;                                 // 0x0010(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTempestFieldRepVisibility) == 0x000008, "Wrong alignment on FTempestFieldRepVisibility");
static_assert(sizeof(FTempestFieldRepVisibility) == 0x000020, "Wrong size on FTempestFieldRepVisibility");
static_assert(offsetof(FTempestFieldRepVisibility, RepTileVisibility) == 0x000010, "Member 'FTempestFieldRepVisibility::RepTileVisibility' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldEffectConfig
// 0x0060 (0x0060 - 0x0000)
struct FTempestFieldEffectConfig final
{
public:
	class UFXSystemAsset*                         Effect;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityPerTile;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              EffectSound;                                       // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomXYOffset;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomZOffset;                                     // 0x0028(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RandomRotation;                                    // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomScale;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTempestFieldEffectConfig) == 0x000008, "Wrong alignment on FTempestFieldEffectConfig");
static_assert(sizeof(FTempestFieldEffectConfig) == 0x000060, "Wrong size on FTempestFieldEffectConfig");
static_assert(offsetof(FTempestFieldEffectConfig, Effect) == 0x000000, "Member 'FTempestFieldEffectConfig::Effect' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, DensityPerTile) == 0x000008, "Member 'FTempestFieldEffectConfig::DensityPerTile' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, EffectSound) == 0x000010, "Member 'FTempestFieldEffectConfig::EffectSound' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, RandomXYOffset) == 0x000018, "Member 'FTempestFieldEffectConfig::RandomXYOffset' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, RandomZOffset) == 0x000028, "Member 'FTempestFieldEffectConfig::RandomZOffset' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, RandomRotation) == 0x000038, "Member 'FTempestFieldEffectConfig::RandomRotation' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectConfig, RandomScale) == 0x000050, "Member 'FTempestFieldEffectConfig::RandomScale' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldEffectsConfig
// 0x0050 (0x0050 - 0x0000)
struct FTempestFieldEffectsConfig final
{
public:
	float                                         EffectsSpawnFrequency;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTempestFieldEffectConfig>      EffectConfigs;                                     // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundCue*                              FieldAmbientSound;                                 // 0x0018(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioParam                            AudioParam_ResourcePct;                            // 0x0020(0x0030)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTempestFieldEffectsConfig) == 0x000008, "Wrong alignment on FTempestFieldEffectsConfig");
static_assert(sizeof(FTempestFieldEffectsConfig) == 0x000050, "Wrong size on FTempestFieldEffectsConfig");
static_assert(offsetof(FTempestFieldEffectsConfig, EffectsSpawnFrequency) == 0x000000, "Member 'FTempestFieldEffectsConfig::EffectsSpawnFrequency' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectsConfig, EffectConfigs) == 0x000008, "Member 'FTempestFieldEffectsConfig::EffectConfigs' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectsConfig, FieldAmbientSound) == 0x000018, "Member 'FTempestFieldEffectsConfig::FieldAmbientSound' has a wrong offset!");
static_assert(offsetof(FTempestFieldEffectsConfig, AudioParam_ResourcePct) == 0x000020, "Member 'FTempestFieldEffectsConfig::AudioParam_ResourcePct' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldCraterConfig
// 0x0040 (0x0040 - 0x0000)
struct FTempestFieldCraterConfig final
{
public:
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTempestFieldCraterConfig) == 0x000008, "Wrong alignment on FTempestFieldCraterConfig");
static_assert(sizeof(FTempestFieldCraterConfig) == 0x000040, "Wrong size on FTempestFieldCraterConfig");
static_assert(offsetof(FTempestFieldCraterConfig, Mesh) == 0x000000, "Member 'FTempestFieldCraterConfig::Mesh' has a wrong offset!");
static_assert(offsetof(FTempestFieldCraterConfig, Scale) == 0x000028, "Member 'FTempestFieldCraterConfig::Scale' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldBuildConfig
// 0x00A0 (0x00A0 - 0x0000)
struct FTempestFieldBuildConfig final
{
public:
	TArray<struct FTempestFieldCraterConfig>      SmallCraterConfigs;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FTempestFieldCraterConfig>      BigCraterConfigs;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SplineBranchingProbability;                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineOverlapProbability;                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             SplineMesh;                                        // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineMeshAxis                               SplineAxis;                                        // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SplineRandomScale;                                 // 0x0058(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SplineScalePow;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SplineRandomZOffset;                               // 0x0070(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SplineRandomXYOffset;                              // 0x0080(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTempestFieldElementProxy*>      TileElements;                                      // 0x0090(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTempestFieldBuildConfig) == 0x000008, "Wrong alignment on FTempestFieldBuildConfig");
static_assert(sizeof(FTempestFieldBuildConfig) == 0x0000A0, "Wrong size on FTempestFieldBuildConfig");
static_assert(offsetof(FTempestFieldBuildConfig, SmallCraterConfigs) == 0x000000, "Member 'FTempestFieldBuildConfig::SmallCraterConfigs' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, BigCraterConfigs) == 0x000010, "Member 'FTempestFieldBuildConfig::BigCraterConfigs' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineBranchingProbability) == 0x000020, "Member 'FTempestFieldBuildConfig::SplineBranchingProbability' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineOverlapProbability) == 0x000024, "Member 'FTempestFieldBuildConfig::SplineOverlapProbability' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineMesh) == 0x000028, "Member 'FTempestFieldBuildConfig::SplineMesh' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineAxis) == 0x000050, "Member 'FTempestFieldBuildConfig::SplineAxis' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineRandomScale) == 0x000058, "Member 'FTempestFieldBuildConfig::SplineRandomScale' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineScalePow) == 0x000068, "Member 'FTempestFieldBuildConfig::SplineScalePow' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineRandomZOffset) == 0x000070, "Member 'FTempestFieldBuildConfig::SplineRandomZOffset' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, SplineRandomXYOffset) == 0x000080, "Member 'FTempestFieldBuildConfig::SplineRandomXYOffset' has a wrong offset!");
static_assert(offsetof(FTempestFieldBuildConfig, TileElements) == 0x000090, "Member 'FTempestFieldBuildConfig::TileElements' has a wrong offset!");

// ScriptStruct Tempest.TempestFieldGameplayConfig
// 0x0078 (0x0078 - 0x0000)
struct FTempestFieldGameplayConfig final
{
public:
	float                                         ResourceValues[0x4];                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrowthDuration[0x4];                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotDuration;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            GEAppliedToOverlappingActors;                      // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlacklistFactoryTypeTags;                          // 0x0030(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlacklistEntityTypeTags;                           // 0x0050(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         GEStackingInterval;                                // 0x0070(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTempestFieldGameplayConfig) == 0x000008, "Wrong alignment on FTempestFieldGameplayConfig");
static_assert(sizeof(FTempestFieldGameplayConfig) == 0x000078, "Wrong size on FTempestFieldGameplayConfig");
static_assert(offsetof(FTempestFieldGameplayConfig, ResourceValues) == 0x000000, "Member 'FTempestFieldGameplayConfig::ResourceValues' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, GrowthDuration) == 0x000010, "Member 'FTempestFieldGameplayConfig::GrowthDuration' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, RotDuration) == 0x000020, "Member 'FTempestFieldGameplayConfig::RotDuration' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, GEAppliedToOverlappingActors) == 0x000028, "Member 'FTempestFieldGameplayConfig::GEAppliedToOverlappingActors' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, BlacklistFactoryTypeTags) == 0x000030, "Member 'FTempestFieldGameplayConfig::BlacklistFactoryTypeTags' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, BlacklistEntityTypeTags) == 0x000050, "Member 'FTempestFieldGameplayConfig::BlacklistEntityTypeTags' has a wrong offset!");
static_assert(offsetof(FTempestFieldGameplayConfig, GEStackingInterval) == 0x000070, "Member 'FTempestFieldGameplayConfig::GEStackingInterval' has a wrong offset!");

// ScriptStruct Tempest.UIData_NameAndDescription
// 0x0020 (0x0020 - 0x0000)
struct FUIData_NameAndDescription
{
public:
	class FText                                   Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIData_NameAndDescription) == 0x000008, "Wrong alignment on FUIData_NameAndDescription");
static_assert(sizeof(FUIData_NameAndDescription) == 0x000020, "Wrong size on FUIData_NameAndDescription");
static_assert(offsetof(FUIData_NameAndDescription, Name) == 0x000000, "Member 'FUIData_NameAndDescription::Name' has a wrong offset!");
static_assert(offsetof(FUIData_NameAndDescription, Description) == 0x000010, "Member 'FUIData_NameAndDescription::Description' has a wrong offset!");

// ScriptStruct Tempest.UIData_PlayerDataStat
// 0x0008 (0x0028 - 0x0020)
struct FUIData_PlayerDataStat final : public FUIData_NameAndDescription
{
public:
	ETedPlayerDataStat                            Stat;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIData_PlayerDataStat) == 0x000008, "Wrong alignment on FUIData_PlayerDataStat");
static_assert(sizeof(FUIData_PlayerDataStat) == 0x000028, "Wrong size on FUIData_PlayerDataStat");
static_assert(offsetof(FUIData_PlayerDataStat, Stat) == 0x000020, "Member 'FUIData_PlayerDataStat::Stat' has a wrong offset!");

}

