#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavGrid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum NavGrid.ENavGridGeneratorSnappingMode
// NumValues: 0x0003
enum class ENavGridGeneratorSnappingMode : uint8
{
	NavMesh                                  = 0,
	Geometry                                 = 1,
	ENavGridGeneratorSnappingMode_MAX        = 2,
};

// Enum NavGrid.ENavGridGeneratorValidationMode
// NumValues: 0x0003
enum class ENavGridGeneratorValidationMode : uint8
{
	None                                     = 0,
	NavMesh                                  = 1,
	ENavGridGeneratorValidationMode_MAX      = 2,
};

// Enum NavGrid.ENavGridBuildDebugFlags
// NumValues: 0x0007
enum class ENavGridBuildDebugFlags : uint8
{
	SuccessfulProjections                    = 0,
	FailedProjections                        = 1,
	InvalidEdges                             = 2,
	ProjectionLines                          = 3,
	UnconnectedEdges                         = 4,
	TileNormal                               = 5,
	ENavGridBuildDebugFlags_MAX              = 6,
};

// Enum NavGrid.ENavGridGeometryOverlapMode
// NumValues: 0x0004
enum class ENavGridGeometryOverlapMode : uint8
{
	Disabled                                 = 0,
	AnyVert                                  = 1,
	Center                                   = 2,
	ENavGridGeometryOverlapMode_MAX          = 3,
};

// Enum NavGrid.ECoverProtection
// NumValues: 0x0004
enum class ECoverProtection : uint8
{
	None                                     = 0,
	Partial                                  = 1,
	Full                                     = 2,
	ECoverProtection_MAX                     = 3,
};

// Enum NavGrid.ENavGridEdgeType
// NumValues: 0x0006
enum class ENavGridEdgeType : uint8
{
	Default                                  = 0,
	Verge                                    = 1,
	LowCover                                 = 2,
	HighCover                                = 3,
	InfiniteCover                            = 4,
	MAX                                      = 5,
};

// Enum NavGrid.ENavGridTileTag
// NumValues: 0x000D
enum class ENavGridTileTag : uint8
{
	PartyPlacement                           = 0,
	ExitArea                                 = 1,
	Tag_Reserved1                            = 2,
	Tag_Reserved2                            = 3,
	Tag4                                     = 4,
	Tag5                                     = 5,
	Tag6                                     = 6,
	Tag7                                     = 7,
	Tag8                                     = 8,
	Tag9                                     = 9,
	Tag10                                    = 10,
	Tag11                                    = 11,
	MAX                                      = 12,
};

// Enum NavGrid.ENavGridTileSurfaceType
// NumValues: 0x0011
enum class ENavGridTileSurfaceType : uint8
{
	SurfaceType_Default                      = 0,
	SurfaceType_Unwalkable                   = 1,
	SurfaceType_Reserved1                    = 2,
	SurfaceType_Reserved2                    = 3,
	SurfaceType4                             = 4,
	SurfaceType5                             = 5,
	SurfaceType6                             = 6,
	SurfaceType7                             = 7,
	SurfaceType8                             = 8,
	SurfaceType9                             = 9,
	SurfaceType10                            = 10,
	SurfaceType11                            = 11,
	SurfaceType12                            = 12,
	SurfaceType13                            = 13,
	SurfaceType14                            = 14,
	SurfaceType15                            = 15,
	MAX                                      = 16,
};

// Enum NavGrid.ENavGridTileGeneratorMode
// NumValues: 0x0003
enum class ENavGridTileGeneratorMode : uint8
{
	Precise                                  = 0,
	Smart                                    = 1,
	ENavGridTileGeneratorMode_MAX            = 2,
};

// ScriptStruct NavGrid.AxialCoords
// 0x0008 (0x0008 - 0x0000)
struct FAxialCoords final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAxialCoords) == 0x000004, "Wrong alignment on FAxialCoords");
static_assert(sizeof(FAxialCoords) == 0x000008, "Wrong size on FAxialCoords");
static_assert(offsetof(FAxialCoords, X) == 0x000000, "Member 'FAxialCoords::X' has a wrong offset!");
static_assert(offsetof(FAxialCoords, Y) == 0x000004, "Member 'FAxialCoords::Y' has a wrong offset!");

// ScriptStruct NavGrid.NavGridRelevantData
// 0x00E0 (0x00E0 - 0x0000)
struct FNavGridRelevantData final
{
public:
	TWeakObjectPtr<class AActor>                  LookupActor;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ActorLookupLocations;                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIntPoint>                      ActorLookupCoords;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0xB8];                                      // 0x0028(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridRelevantData) == 0x000008, "Wrong alignment on FNavGridRelevantData");
static_assert(sizeof(FNavGridRelevantData) == 0x0000E0, "Wrong size on FNavGridRelevantData");
static_assert(offsetof(FNavGridRelevantData, LookupActor) == 0x000000, "Member 'FNavGridRelevantData::LookupActor' has a wrong offset!");
static_assert(offsetof(FNavGridRelevantData, ActorLookupLocations) == 0x000008, "Member 'FNavGridRelevantData::ActorLookupLocations' has a wrong offset!");
static_assert(offsetof(FNavGridRelevantData, ActorLookupCoords) == 0x000018, "Member 'FNavGridRelevantData::ActorLookupCoords' has a wrong offset!");

// ScriptStruct NavGrid.NavGridLayerData
// 0x00B0 (0x00B0 - 0x0000)
struct alignas(0x08) FNavGridLayerData final
{
public:
	uint8                                         Pad_0[0xB0];                                       // 0x0000(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridLayerData) == 0x000008, "Wrong alignment on FNavGridLayerData");
static_assert(sizeof(FNavGridLayerData) == 0x0000B0, "Wrong size on FNavGridLayerData");

// ScriptStruct NavGrid.NavGridTileSurfaceName
// 0x000C (0x000C - 0x0000)
struct FNavGridTileSurfaceName final
{
public:
	ENavGridTileSurfaceType                       Type;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavGridTileSurfaceName) == 0x000004, "Wrong alignment on FNavGridTileSurfaceName");
static_assert(sizeof(FNavGridTileSurfaceName) == 0x00000C, "Wrong size on FNavGridTileSurfaceName");
static_assert(offsetof(FNavGridTileSurfaceName, Type) == 0x000000, "Member 'FNavGridTileSurfaceName::Type' has a wrong offset!");
static_assert(offsetof(FNavGridTileSurfaceName, Name) == 0x000004, "Member 'FNavGridTileSurfaceName::Name' has a wrong offset!");

// ScriptStruct NavGrid.SupportedNavAreasSet
// 0x0010 (0x0010 - 0x0000)
struct FSupportedNavAreasSet final
{
public:
	TArray<TSoftClassPtr<class UClass>>           Areas;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportedNavAreasSet) == 0x000008, "Wrong alignment on FSupportedNavAreasSet");
static_assert(sizeof(FSupportedNavAreasSet) == 0x000010, "Wrong size on FSupportedNavAreasSet");
static_assert(offsetof(FSupportedNavAreasSet, Areas) == 0x000000, "Member 'FSupportedNavAreasSet::Areas' has a wrong offset!");

// ScriptStruct NavGrid.NavGridTileTagName
// 0x000C (0x000C - 0x0000)
struct FNavGridTileTagName final
{
public:
	ENavGridTileTag                               Tag;                                               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavGridTileTagName) == 0x000004, "Wrong alignment on FNavGridTileTagName");
static_assert(sizeof(FNavGridTileTagName) == 0x00000C, "Wrong size on FNavGridTileTagName");
static_assert(offsetof(FNavGridTileTagName, Tag) == 0x000000, "Member 'FNavGridTileTagName::Tag' has a wrong offset!");
static_assert(offsetof(FNavGridTileTagName, Name) == 0x000004, "Member 'FNavGridTileTagName::Name' has a wrong offset!");

// ScriptStruct NavGrid.NavGridTileModifier
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FNavGridTileModifier
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridTileModifier) == 0x000008, "Wrong alignment on FNavGridTileModifier");
static_assert(sizeof(FNavGridTileModifier) == 0x000010, "Wrong size on FNavGridTileModifier");

// ScriptStruct NavGrid.NavGridTileModifier_Tag
// 0x0008 (0x0018 - 0x0010)
struct FNavGridTileModifier_Tag final : public FNavGridTileModifier
{
public:
	ENavGridTileTag                               Tag;                                               // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridTileModifier_Tag) == 0x000008, "Wrong alignment on FNavGridTileModifier_Tag");
static_assert(sizeof(FNavGridTileModifier_Tag) == 0x000018, "Wrong size on FNavGridTileModifier_Tag");
static_assert(offsetof(FNavGridTileModifier_Tag, Tag) == 0x000010, "Member 'FNavGridTileModifier_Tag::Tag' has a wrong offset!");

// ScriptStruct NavGrid.NavGridTileModifier_SurfaceType
// 0x0008 (0x0018 - 0x0010)
struct FNavGridTileModifier_SurfaceType final : public FNavGridTileModifier
{
public:
	ENavGridTileSurfaceType                       SurfaceType;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridTileModifier_SurfaceType) == 0x000008, "Wrong alignment on FNavGridTileModifier_SurfaceType");
static_assert(sizeof(FNavGridTileModifier_SurfaceType) == 0x000018, "Wrong size on FNavGridTileModifier_SurfaceType");
static_assert(offsetof(FNavGridTileModifier_SurfaceType, SurfaceType) == 0x000010, "Member 'FNavGridTileModifier_SurfaceType::SurfaceType' has a wrong offset!");

// ScriptStruct NavGrid.NavGridTileModifier_EdgeType
// 0x0008 (0x0018 - 0x0010)
struct FNavGridTileModifier_EdgeType final : public FNavGridTileModifier
{
public:
	ENavGridEdgeType                              EdgeType;                                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EdgeIndex;                                         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNavGridTileModifier_EdgeType) == 0x000008, "Wrong alignment on FNavGridTileModifier_EdgeType");
static_assert(sizeof(FNavGridTileModifier_EdgeType) == 0x000018, "Wrong size on FNavGridTileModifier_EdgeType");
static_assert(offsetof(FNavGridTileModifier_EdgeType, EdgeType) == 0x000010, "Member 'FNavGridTileModifier_EdgeType::EdgeType' has a wrong offset!");
static_assert(offsetof(FNavGridTileModifier_EdgeType, EdgeIndex) == 0x000011, "Member 'FNavGridTileModifier_EdgeType::EdgeIndex' has a wrong offset!");

// ScriptStruct NavGrid.NavGridRaycastQueryParams
// 0x0040 (0x0040 - 0x0000)
struct FNavGridRaycastQueryParams final
{
public:
	struct FVector2D                              LowCoverHeight;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HighCoverHeight;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MinDistZ;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SegDistOffset;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavGridRaycastQueryParams) == 0x000008, "Wrong alignment on FNavGridRaycastQueryParams");
static_assert(sizeof(FNavGridRaycastQueryParams) == 0x000040, "Wrong size on FNavGridRaycastQueryParams");
static_assert(offsetof(FNavGridRaycastQueryParams, LowCoverHeight) == 0x000000, "Member 'FNavGridRaycastQueryParams::LowCoverHeight' has a wrong offset!");
static_assert(offsetof(FNavGridRaycastQueryParams, HighCoverHeight) == 0x000010, "Member 'FNavGridRaycastQueryParams::HighCoverHeight' has a wrong offset!");
static_assert(offsetof(FNavGridRaycastQueryParams, MinDistZ) == 0x000020, "Member 'FNavGridRaycastQueryParams::MinDistZ' has a wrong offset!");
static_assert(offsetof(FNavGridRaycastQueryParams, SegDistOffset) == 0x000030, "Member 'FNavGridRaycastQueryParams::SegDistOffset' has a wrong offset!");

// ScriptStruct NavGrid.NavGridDetailFlags
// 0x0012 (0x0012 - 0x0000)
struct FNavGridDetailFlags final
{
public:
	bool                                          bDrawBoundEdges;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTileEdges;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTriangleEdges;                                // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawFilledTiles;                                  // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTileNormals;                                  // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawWalls;                                        // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawConnections;                                  // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawInvalidConnections;                           // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawTileLabels;                                   // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawEdgeLabels;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawVertexLabels;                                 // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawPathingCost;                                  // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EdgeFilter;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SurfacesFilter;                                    // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TagsFilter;                                        // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavGridDetailFlags) == 0x000002, "Wrong alignment on FNavGridDetailFlags");
static_assert(sizeof(FNavGridDetailFlags) == 0x000012, "Wrong size on FNavGridDetailFlags");
static_assert(offsetof(FNavGridDetailFlags, bDrawBoundEdges) == 0x000000, "Member 'FNavGridDetailFlags::bDrawBoundEdges' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawTileEdges) == 0x000001, "Member 'FNavGridDetailFlags::bDrawTileEdges' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawTriangleEdges) == 0x000002, "Member 'FNavGridDetailFlags::bDrawTriangleEdges' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawFilledTiles) == 0x000003, "Member 'FNavGridDetailFlags::bDrawFilledTiles' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawTileNormals) == 0x000004, "Member 'FNavGridDetailFlags::bDrawTileNormals' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawWalls) == 0x000005, "Member 'FNavGridDetailFlags::bDrawWalls' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawConnections) == 0x000006, "Member 'FNavGridDetailFlags::bDrawConnections' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawInvalidConnections) == 0x000007, "Member 'FNavGridDetailFlags::bDrawInvalidConnections' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawTileLabels) == 0x000008, "Member 'FNavGridDetailFlags::bDrawTileLabels' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawEdgeLabels) == 0x000009, "Member 'FNavGridDetailFlags::bDrawEdgeLabels' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawVertexLabels) == 0x00000A, "Member 'FNavGridDetailFlags::bDrawVertexLabels' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, bDrawPathingCost) == 0x00000B, "Member 'FNavGridDetailFlags::bDrawPathingCost' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, EdgeFilter) == 0x00000C, "Member 'FNavGridDetailFlags::EdgeFilter' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, SurfacesFilter) == 0x00000E, "Member 'FNavGridDetailFlags::SurfacesFilter' has a wrong offset!");
static_assert(offsetof(FNavGridDetailFlags, TagsFilter) == 0x000010, "Member 'FNavGridDetailFlags::TagsFilter' has a wrong offset!");

// ScriptStruct NavGrid.OffsetCoords
// 0x0008 (0x0008 - 0x0000)
struct FOffsetCoords final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOffsetCoords) == 0x000004, "Wrong alignment on FOffsetCoords");
static_assert(sizeof(FOffsetCoords) == 0x000008, "Wrong size on FOffsetCoords");
static_assert(offsetof(FOffsetCoords, X) == 0x000000, "Member 'FOffsetCoords::X' has a wrong offset!");
static_assert(offsetof(FOffsetCoords, Y) == 0x000004, "Member 'FOffsetCoords::Y' has a wrong offset!");

}

