#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Tempest

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Tempest_structs.hpp"
#include "AIModule_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "NubCore_structs.hpp"
#include "Pros_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "Slate_structs.hpp"
#include "ProsSDK_structs.hpp"
#include "RTSColor_structs.hpp"
#include "Hydra5_structs.hpp"
#include "GameplayCommands_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function Tempest.AICommander.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AICommander_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommander_ReceiveTick) == 0x000004, "Wrong alignment on AICommander_ReceiveTick");
static_assert(sizeof(AICommander_ReceiveTick) == 0x000004, "Wrong size on AICommander_ReceiveTick");
static_assert(offsetof(AICommander_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AICommander_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_GetOrderType
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_GetOrderType final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISquadOrderType>          ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_GetOrderType) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_GetOrderType");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_GetOrderType) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_GetOrderType");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetOrderType, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetOrderType::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetOrderType, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetOrderType::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_GetTargetActor
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_GetTargetActor final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_GetTargetActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_GetTargetActor");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_GetTargetActor) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_GetTargetActor");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetActor, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetActor::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetActor, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_GetTargetLocation
// 0x0068 (0x0068 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation) == 0x000068, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_GetTargetRadius
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_GetTargetRadius::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_HasOrderType
// 0x0068 (0x0068 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_HasOrderType final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_HasOrderType) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_HasOrderType");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_HasOrderType) == 0x000068, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_HasOrderType");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasOrderType, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasOrderType::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasOrderType, OrderType) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasOrderType::OrderType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasOrderType, ReturnValue) == 0x000060, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasOrderType::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_HasTarget
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_HasTarget final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_HasTarget) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_HasTarget");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_HasTarget) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_HasTarget");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTarget, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTarget::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTarget, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTarget::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_HasTargetActor
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_HasTargetActor final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_HasTargetActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_HasTargetActor");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_HasTargetActor) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_HasTargetActor");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTargetActor, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTargetActor::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTargetActor, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_HasTargetLocation
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_HasTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_IsValid
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_IsValid final
{
public:
	struct FAISquadOrder                          SquadOrder;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_IsValid) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_IsValid");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_IsValid) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_IsValid");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_IsValid, SquadOrder) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_IsValid::SquadOrder' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_IsValid, ReturnValue) == 0x000058, "Member 'AICommanderFunctionLibrary_AISquadOrder_IsValid::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_Make
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_Make final
{
public:
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAISquadOrder                          ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_Make) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_Make");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_Make) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_Make");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_Make, OrderType) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_Make::OrderType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_Make, ReturnValue) == 0x000008, "Member 'AICommanderFunctionLibrary_AISquadOrder_Make::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_MakeWithActorLocation
// 0x0070 (0x0070 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation final
{
public:
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAISquadOrder                          ReturnValue;                                       // 0x0018(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation) == 0x000070, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation, OrderType) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation::OrderType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation, Actor) == 0x000008, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation::Actor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation, Radius) == 0x000010, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation::Radius' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithActorLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_MakeWithTargetActor
// 0x0098 (0x0098 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor final
{
public:
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAITargetActor                         TargetActor;                                       // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAISquadOrder                          ReturnValue;                                       // 0x0040(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor) == 0x000098, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor, OrderType) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor::OrderType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor, TargetActor) == 0x000008, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor, ReturnValue) == 0x000040, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AISquadOrder_MakeWithTargetLocation
// 0x0078 (0x0078 - 0x0000)
struct AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation final
{
public:
	TSubclassOf<class UAISquadOrderType>          OrderType;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAITargetLocation                      TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAISquadOrder                          ReturnValue;                                       // 0x0020(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation) == 0x000078, "Wrong size on AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation, OrderType) == 0x000000, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation::OrderType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation, TargetLocation) == 0x000008, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation, ReturnValue) == 0x000020, "Member 'AICommanderFunctionLibrary_AISquadOrder_MakeWithTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITarget_MakeFromAITargetActor
// 0x0088 (0x0088 - 0x0000)
struct AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor final
{
public:
	struct FAITargetActor                         AITargetActor;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAITarget                              ReturnValue;                                       // 0x0038(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor");
static_assert(sizeof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor) == 0x000088, "Wrong size on AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor, AITargetActor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor::AITargetActor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor, ReturnValue) == 0x000038, "Member 'AICommanderFunctionLibrary_AITarget_MakeFromAITargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITarget_MakeFromAITargetLocation
// 0x0068 (0x0068 - 0x0000)
struct AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation final
{
public:
	struct FAITargetLocation                      AITargetLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAITarget                              ReturnValue;                                       // 0x0018(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation) == 0x000068, "Wrong size on AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation, AITargetLocation) == 0x000000, "Member 'AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation::AITargetLocation' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AITarget_MakeFromAITargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITarget_MakeWithActorLocation
// 0x0060 (0x0060 - 0x0000)
struct AICommanderFunctionLibrary_AITarget_MakeWithActorLocation final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAITarget                              ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITarget_MakeWithActorLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITarget_MakeWithActorLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AITarget_MakeWithActorLocation) == 0x000060, "Wrong size on AICommanderFunctionLibrary_AITarget_MakeWithActorLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeWithActorLocation, Actor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITarget_MakeWithActorLocation::Actor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeWithActorLocation, Radius) == 0x000008, "Member 'AICommanderFunctionLibrary_AITarget_MakeWithActorLocation::Radius' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITarget_MakeWithActorLocation, ReturnValue) == 0x000010, "Member 'AICommanderFunctionLibrary_AITarget_MakeWithActorLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetActor_GetActor
// 0x0040 (0x0040 - 0x0000)
struct AICommanderFunctionLibrary_AITargetActor_GetActor final
{
public:
	struct FAITargetActor                         TargetActor;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetActor_GetActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetActor_GetActor");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetActor_GetActor) == 0x000040, "Wrong size on AICommanderFunctionLibrary_AITargetActor_GetActor");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_GetActor, TargetActor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetActor_GetActor::TargetActor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_GetActor, ReturnValue) == 0x000038, "Member 'AICommanderFunctionLibrary_AITargetActor_GetActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetActor_IsValid
// 0x0040 (0x0040 - 0x0000)
struct AICommanderFunctionLibrary_AITargetActor_IsValid final
{
public:
	struct FAITargetActor                         TargetActor;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetActor_IsValid) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetActor_IsValid");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetActor_IsValid) == 0x000040, "Wrong size on AICommanderFunctionLibrary_AITargetActor_IsValid");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_IsValid, TargetActor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetActor_IsValid::TargetActor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_IsValid, ReturnValue) == 0x000038, "Member 'AICommanderFunctionLibrary_AITargetActor_IsValid::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetActor_MakeWithActor
// 0x0040 (0x0040 - 0x0000)
struct AICommanderFunctionLibrary_AITargetActor_MakeWithActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAITargetActor                         ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetActor_MakeWithActor) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetActor_MakeWithActor");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetActor_MakeWithActor) == 0x000040, "Wrong size on AICommanderFunctionLibrary_AITargetActor_MakeWithActor");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_MakeWithActor, Actor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetActor_MakeWithActor::Actor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_MakeWithActor, ReturnValue) == 0x000008, "Member 'AICommanderFunctionLibrary_AITargetActor_MakeWithActor::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetActor_MakeWithActorTag
// 0x0048 (0x0048 - 0x0000)
struct AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActorTag;                                          // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAITargetActor                         ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag) == 0x000048, "Wrong size on AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag, ActorTag) == 0x000008, "Member 'AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag::ActorTag' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag, ReturnValue) == 0x000010, "Member 'AICommanderFunctionLibrary_AITargetActor_MakeWithActorTag::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetLocation_GetLocation
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_AITargetLocation_GetLocation final
{
public:
	struct FAITargetLocation                      TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetLocation_GetLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetLocation_GetLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetLocation_GetLocation) == 0x000028, "Wrong size on AICommanderFunctionLibrary_AITargetLocation_GetLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_GetLocation, TargetLocation) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetLocation_GetLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_GetLocation, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AITargetLocation_GetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetLocation_GetRadius
// 0x0020 (0x0020 - 0x0000)
struct AICommanderFunctionLibrary_AITargetLocation_GetRadius final
{
public:
	struct FAITargetLocation                      TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetLocation_GetRadius) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetLocation_GetRadius");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetLocation_GetRadius) == 0x000020, "Wrong size on AICommanderFunctionLibrary_AITargetLocation_GetRadius");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_GetRadius, TargetLocation) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetLocation_GetRadius::TargetLocation' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_GetRadius, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AITargetLocation_GetRadius::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetLocation_IsValid
// 0x0020 (0x0020 - 0x0000)
struct AICommanderFunctionLibrary_AITargetLocation_IsValid final
{
public:
	struct FAITargetLocation                      TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetLocation_IsValid) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetLocation_IsValid");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetLocation_IsValid) == 0x000020, "Wrong size on AICommanderFunctionLibrary_AITargetLocation_IsValid");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_IsValid, TargetLocation) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetLocation_IsValid::TargetLocation' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_IsValid, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AITargetLocation_IsValid::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetLocation_Make
// 0x0030 (0x0030 - 0x0000)
struct AICommanderFunctionLibrary_AITargetLocation_Make final
{
public:
	struct FVector2D                              Location;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAITargetLocation                      ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetLocation_Make) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetLocation_Make");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetLocation_Make) == 0x000030, "Wrong size on AICommanderFunctionLibrary_AITargetLocation_Make");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_Make, Location) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetLocation_Make::Location' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_Make, Radius) == 0x000010, "Member 'AICommanderFunctionLibrary_AITargetLocation_Make::Radius' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_Make, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_AITargetLocation_Make::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.AITargetLocation_MakeWithActorLocation
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAITargetLocation                      ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation");
static_assert(sizeof(AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation) == 0x000028, "Wrong size on AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation, Actor) == 0x000000, "Member 'AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation::Actor' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation, Radius) == 0x000008, "Member 'AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation::Radius' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation, ReturnValue) == 0x000010, "Member 'AICommanderFunctionLibrary_AITargetLocation_MakeWithActorLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.CreateAIMission
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_CreateAIMission final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAIMission>                 MissionClass;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_CreateAIMission) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_CreateAIMission");
static_assert(sizeof(AICommanderFunctionLibrary_CreateAIMission) == 0x000028, "Wrong size on AICommanderFunctionLibrary_CreateAIMission");
static_assert(offsetof(AICommanderFunctionLibrary_CreateAIMission, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_CreateAIMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_CreateAIMission, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_CreateAIMission::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_CreateAIMission, MissionClass) == 0x000010, "Member 'AICommanderFunctionLibrary_CreateAIMission::MissionClass' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_CreateAIMission, bAutoActivate) == 0x000018, "Member 'AICommanderFunctionLibrary_CreateAIMission::bAutoActivate' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_CreateAIMission, ReturnValue) == 0x000020, "Member 'AICommanderFunctionLibrary_CreateAIMission::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionByClass
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionByClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAIMission>                 MissionClass;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionByClass) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionByClass");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionByClass) == 0x000028, "Wrong size on AICommanderFunctionLibrary_FindAIMissionByClass");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByClass, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionByClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByClass, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionByClass::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByClass, MissionClass) == 0x000010, "Member 'AICommanderFunctionLibrary_FindAIMissionByClass::MissionClass' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByClass, bExactMatch) == 0x000018, "Member 'AICommanderFunctionLibrary_FindAIMissionByClass::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByClass, ReturnValue) == 0x000020, "Member 'AICommanderFunctionLibrary_FindAIMissionByClass::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionByHandle
// 0x0018 (0x0018 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionByHandle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIMissionHandle                       MissionHandle;                                     // 0x000C(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAIMission*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionByHandle) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionByHandle");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionByHandle) == 0x000018, "Wrong size on AICommanderFunctionLibrary_FindAIMissionByHandle");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByHandle, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionByHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByHandle, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionByHandle::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByHandle, MissionHandle) == 0x00000C, "Member 'AICommanderFunctionLibrary_FindAIMissionByHandle::MissionHandle' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByHandle, ReturnValue) == 0x000010, "Member 'AICommanderFunctionLibrary_FindAIMissionByHandle::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionByTag
// 0x0020 (0x0020 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionByTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           MissionTag;                                        // 0x000C(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionByTag) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionByTag");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionByTag) == 0x000020, "Wrong size on AICommanderFunctionLibrary_FindAIMissionByTag");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTag, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionByTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTag, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionByTag::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTag, MissionTag) == 0x00000C, "Member 'AICommanderFunctionLibrary_FindAIMissionByTag::MissionTag' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTag, bExactMatch) == 0x000014, "Member 'AICommanderFunctionLibrary_FindAIMissionByTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTag, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_FindAIMissionByTag::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionByTags
// 0x0040 (0x0040 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionByTags final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MissionTags;                                       // 0x0010(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionByTags) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionByTags");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionByTags) == 0x000040, "Wrong size on AICommanderFunctionLibrary_FindAIMissionByTags");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, MissionTags) == 0x000010, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::MissionTags' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, MatchType) == 0x000030, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::MatchType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, bExactMatch) == 0x000031, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionByTags, ReturnValue) == 0x000038, "Member 'AICommanderFunctionLibrary_FindAIMissionByTags::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissions
// 0x0030 (0x0030 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAIMission>                 MissionClass;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAIMission*>                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissions) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissions");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissions) == 0x000030, "Wrong size on AICommanderFunctionLibrary_FindAIMissions");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissions, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissions, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissions::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissions, MissionClass) == 0x000010, "Member 'AICommanderFunctionLibrary_FindAIMissions::MissionClass' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissions, bExactMatch) == 0x000018, "Member 'AICommanderFunctionLibrary_FindAIMissions::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissions, ReturnValue) == 0x000020, "Member 'AICommanderFunctionLibrary_FindAIMissions::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionsByTag
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionsByTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           MissionTag;                                        // 0x000C(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAIMission*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionsByTag) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionsByTag");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionsByTag) == 0x000028, "Wrong size on AICommanderFunctionLibrary_FindAIMissionsByTag");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTag, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTag, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTag::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTag, MissionTag) == 0x00000C, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTag::MissionTag' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTag, bExactMatch) == 0x000014, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTag::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTag, ReturnValue) == 0x000018, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTag::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.FindAIMissionsByTags
// 0x0048 (0x0048 - 0x0000)
struct AICommanderFunctionLibrary_FindAIMissionsByTags final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MissionTags;                                       // 0x0010(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAIMission*>                     ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_FindAIMissionsByTags) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_FindAIMissionsByTags");
static_assert(sizeof(AICommanderFunctionLibrary_FindAIMissionsByTags) == 0x000048, "Wrong size on AICommanderFunctionLibrary_FindAIMissionsByTags");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, MissionTags) == 0x000010, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::MissionTags' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, MatchType) == 0x000030, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::MatchType' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, bExactMatch) == 0x000031, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::bExactMatch' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_FindAIMissionsByTags, ReturnValue) == 0x000038, "Member 'AICommanderFunctionLibrary_FindAIMissionsByTags::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.GetAIMissions
// 0x0020 (0x0020 - 0x0000)
struct AICommanderFunctionLibrary_GetAIMissions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAIMission*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_GetAIMissions) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_GetAIMissions");
static_assert(sizeof(AICommanderFunctionLibrary_GetAIMissions) == 0x000020, "Wrong size on AICommanderFunctionLibrary_GetAIMissions");
static_assert(offsetof(AICommanderFunctionLibrary_GetAIMissions, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_GetAIMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_GetAIMissions, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_GetAIMissions::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_GetAIMissions, ReturnValue) == 0x000010, "Member 'AICommanderFunctionLibrary_GetAIMissions::ReturnValue' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.RemoveAIMission
// 0x0018 (0x0018 - 0x0000)
struct AICommanderFunctionLibrary_RemoveAIMission final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             Mission;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_RemoveAIMission) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_RemoveAIMission");
static_assert(sizeof(AICommanderFunctionLibrary_RemoveAIMission) == 0x000018, "Wrong size on AICommanderFunctionLibrary_RemoveAIMission");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMission, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_RemoveAIMission::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMission, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_RemoveAIMission::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMission, Mission) == 0x000010, "Member 'AICommanderFunctionLibrary_RemoveAIMission::Mission' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.RemoveAIMissionByHandle
// 0x0010 (0x0010 - 0x0000)
struct AICommanderFunctionLibrary_RemoveAIMissionByHandle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAIMissionHandle                       MissionHandle;                                     // 0x000C(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_RemoveAIMissionByHandle) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_RemoveAIMissionByHandle");
static_assert(sizeof(AICommanderFunctionLibrary_RemoveAIMissionByHandle) == 0x000010, "Wrong size on AICommanderFunctionLibrary_RemoveAIMissionByHandle");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMissionByHandle, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_RemoveAIMissionByHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMissionByHandle, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_RemoveAIMissionByHandle::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAIMissionByHandle, MissionHandle) == 0x00000C, "Member 'AICommanderFunctionLibrary_RemoveAIMissionByHandle::MissionHandle' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.RemoveAllAIMissions
// 0x0020 (0x0020 - 0x0000)
struct AICommanderFunctionLibrary_RemoveAllAIMissions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAIMission>                 MissionClass;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICommanderFunctionLibrary_RemoveAllAIMissions) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_RemoveAllAIMissions");
static_assert(sizeof(AICommanderFunctionLibrary_RemoveAllAIMissions) == 0x000020, "Wrong size on AICommanderFunctionLibrary_RemoveAllAIMissions");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAllAIMissions, WorldContextObject) == 0x000000, "Member 'AICommanderFunctionLibrary_RemoveAllAIMissions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAllAIMissions, PlayerID) == 0x000008, "Member 'AICommanderFunctionLibrary_RemoveAllAIMissions::PlayerID' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAllAIMissions, MissionClass) == 0x000010, "Member 'AICommanderFunctionLibrary_RemoveAllAIMissions::MissionClass' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_RemoveAllAIMissions, bExactMatch) == 0x000018, "Member 'AICommanderFunctionLibrary_RemoveAllAIMissions::bExactMatch' has a wrong offset!");

// Function Tempest.AICommanderFunctionLibrary.Skirmish_CalculateWinVal
// 0x0028 (0x0028 - 0x0000)
struct AICommanderFunctionLibrary_Skirmish_CalculateWinVal final
{
public:
	TArray<class ATedPawn*>                       We;                                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       Enemy;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Method;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal) == 0x000008, "Wrong alignment on AICommanderFunctionLibrary_Skirmish_CalculateWinVal");
static_assert(sizeof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal) == 0x000028, "Wrong size on AICommanderFunctionLibrary_Skirmish_CalculateWinVal");
static_assert(offsetof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal, We) == 0x000000, "Member 'AICommanderFunctionLibrary_Skirmish_CalculateWinVal::We' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal, Enemy) == 0x000010, "Member 'AICommanderFunctionLibrary_Skirmish_CalculateWinVal::Enemy' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal, Method) == 0x000020, "Member 'AICommanderFunctionLibrary_Skirmish_CalculateWinVal::Method' has a wrong offset!");
static_assert(offsetof(AICommanderFunctionLibrary_Skirmish_CalculateWinVal, ReturnValue) == 0x000024, "Member 'AICommanderFunctionLibrary_Skirmish_CalculateWinVal::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.AddExperience
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_AddExperience final
{
public:
	float                                         InGainedExperience;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_AddExperience) == 0x000004, "Wrong alignment on TedPawn_AddExperience");
static_assert(sizeof(TedPawn_AddExperience) == 0x000004, "Wrong size on TedPawn_AddExperience");
static_assert(offsetof(TedPawn_AddExperience, InGainedExperience) == 0x000000, "Member 'TedPawn_AddExperience::InGainedExperience' has a wrong offset!");

// Function Tempest.TedPawn.ClearAnimatingAbility
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_ClearAnimatingAbility final
{
public:
	class UGameplayAbility*                       Ability;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ClearAnimatingAbility) == 0x000008, "Wrong alignment on TedPawn_ClearAnimatingAbility");
static_assert(sizeof(TedPawn_ClearAnimatingAbility) == 0x000008, "Wrong size on TedPawn_ClearAnimatingAbility");
static_assert(offsetof(TedPawn_ClearAnimatingAbility, Ability) == 0x000000, "Member 'TedPawn_ClearAnimatingAbility::Ability' has a wrong offset!");

// Function Tempest.TedPawn.Client_R_InterpTo
// 0x00D0 (0x00D0 - 0x0000)
struct TedPawn_Client_R_InterpTo final
{
public:
	struct FTransform                             InitLoc;                                           // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             TargetLoc;                                         // 0x0060(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotTime;                                           // 0x00C0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocTime;                                           // 0x00C4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlignmentDistanceTolerance;                        // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_Client_R_InterpTo) == 0x000010, "Wrong alignment on TedPawn_Client_R_InterpTo");
static_assert(sizeof(TedPawn_Client_R_InterpTo) == 0x0000D0, "Wrong size on TedPawn_Client_R_InterpTo");
static_assert(offsetof(TedPawn_Client_R_InterpTo, InitLoc) == 0x000000, "Member 'TedPawn_Client_R_InterpTo::InitLoc' has a wrong offset!");
static_assert(offsetof(TedPawn_Client_R_InterpTo, TargetLoc) == 0x000060, "Member 'TedPawn_Client_R_InterpTo::TargetLoc' has a wrong offset!");
static_assert(offsetof(TedPawn_Client_R_InterpTo, RotTime) == 0x0000C0, "Member 'TedPawn_Client_R_InterpTo::RotTime' has a wrong offset!");
static_assert(offsetof(TedPawn_Client_R_InterpTo, LocTime) == 0x0000C4, "Member 'TedPawn_Client_R_InterpTo::LocTime' has a wrong offset!");
static_assert(offsetof(TedPawn_Client_R_InterpTo, AlignmentDistanceTolerance) == 0x0000C8, "Member 'TedPawn_Client_R_InterpTo::AlignmentDistanceTolerance' has a wrong offset!");

// Function Tempest.TedPawn.CurrentMontageJumpToSection
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_CurrentMontageJumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_CurrentMontageJumpToSection) == 0x000004, "Wrong alignment on TedPawn_CurrentMontageJumpToSection");
static_assert(sizeof(TedPawn_CurrentMontageJumpToSection) == 0x000008, "Wrong size on TedPawn_CurrentMontageJumpToSection");
static_assert(offsetof(TedPawn_CurrentMontageJumpToSection, SectionName) == 0x000000, "Member 'TedPawn_CurrentMontageJumpToSection::SectionName' has a wrong offset!");

// Function Tempest.TedPawn.CurrentMontageSetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_CurrentMontageSetPlayRate final
{
public:
	float                                         InPlayRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_CurrentMontageSetPlayRate) == 0x000004, "Wrong alignment on TedPawn_CurrentMontageSetPlayRate");
static_assert(sizeof(TedPawn_CurrentMontageSetPlayRate) == 0x000004, "Wrong size on TedPawn_CurrentMontageSetPlayRate");
static_assert(offsetof(TedPawn_CurrentMontageSetPlayRate, InPlayRate) == 0x000000, "Member 'TedPawn_CurrentMontageSetPlayRate::InPlayRate' has a wrong offset!");

// Function Tempest.TedPawn.CurrentMontageStop
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_CurrentMontageStop final
{
public:
	float                                         OverrideBlendOutTime;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_CurrentMontageStop) == 0x000004, "Wrong alignment on TedPawn_CurrentMontageStop");
static_assert(sizeof(TedPawn_CurrentMontageStop) == 0x000004, "Wrong size on TedPawn_CurrentMontageStop");
static_assert(offsetof(TedPawn_CurrentMontageStop, OverrideBlendOutTime) == 0x000000, "Member 'TedPawn_CurrentMontageStop::OverrideBlendOutTime' has a wrong offset!");

// Function Tempest.TedPawn.FindPathGoalLocation
// 0x0050 (0x0050 - 0x0000)
struct TedPawn_FindPathGoalLocation final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_FindPathGoalLocation) == 0x000008, "Wrong alignment on TedPawn_FindPathGoalLocation");
static_assert(sizeof(TedPawn_FindPathGoalLocation) == 0x000050, "Wrong size on TedPawn_FindPathGoalLocation");
static_assert(offsetof(TedPawn_FindPathGoalLocation, StartPoint) == 0x000000, "Member 'TedPawn_FindPathGoalLocation::StartPoint' has a wrong offset!");
static_assert(offsetof(TedPawn_FindPathGoalLocation, EndPoint) == 0x000018, "Member 'TedPawn_FindPathGoalLocation::EndPoint' has a wrong offset!");
static_assert(offsetof(TedPawn_FindPathGoalLocation, OutLocation) == 0x000030, "Member 'TedPawn_FindPathGoalLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(TedPawn_FindPathGoalLocation, ReturnValue) == 0x000048, "Member 'TedPawn_FindPathGoalLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GiveWeapon
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_GiveWeapon final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipNotify;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_GiveWeapon) == 0x000008, "Wrong alignment on TedPawn_GiveWeapon");
static_assert(sizeof(TedPawn_GiveWeapon) == 0x000010, "Wrong size on TedPawn_GiveWeapon");
static_assert(offsetof(TedPawn_GiveWeapon, WeaponClass) == 0x000000, "Member 'TedPawn_GiveWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TedPawn_GiveWeapon, bSkipNotify) == 0x000008, "Member 'TedPawn_GiveWeapon::bSkipNotify' has a wrong offset!");

// Function Tempest.TedPawn.K2_OnWeaponSwitched
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_K2_OnWeaponSwitched final
{
public:
	class UTedWeapon*                             NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedWeapon*                             PreviousWeapon;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_K2_OnWeaponSwitched) == 0x000008, "Wrong alignment on TedPawn_K2_OnWeaponSwitched");
static_assert(sizeof(TedPawn_K2_OnWeaponSwitched) == 0x000010, "Wrong size on TedPawn_K2_OnWeaponSwitched");
static_assert(offsetof(TedPawn_K2_OnWeaponSwitched, NewWeapon) == 0x000000, "Member 'TedPawn_K2_OnWeaponSwitched::NewWeapon' has a wrong offset!");
static_assert(offsetof(TedPawn_K2_OnWeaponSwitched, PreviousWeapon) == 0x000008, "Member 'TedPawn_K2_OnWeaponSwitched::PreviousWeapon' has a wrong offset!");

// Function Tempest.TedPawn.K2_SetCanBeDamaged
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_K2_SetCanBeDamaged final
{
public:
	bool                                          bInCanBeDamaged;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_K2_SetCanBeDamaged) == 0x000001, "Wrong alignment on TedPawn_K2_SetCanBeDamaged");
static_assert(sizeof(TedPawn_K2_SetCanBeDamaged) == 0x000001, "Wrong size on TedPawn_K2_SetCanBeDamaged");
static_assert(offsetof(TedPawn_K2_SetCanBeDamaged, bInCanBeDamaged) == 0x000000, "Member 'TedPawn_K2_SetCanBeDamaged::bInCanBeDamaged' has a wrong offset!");

// Function Tempest.TedPawn.OnFirstPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_OnFirstPlayerStateReplicated final
{
public:
	class ATedPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnFirstPlayerStateReplicated) == 0x000008, "Wrong alignment on TedPawn_OnFirstPlayerStateReplicated");
static_assert(sizeof(TedPawn_OnFirstPlayerStateReplicated) == 0x000008, "Wrong size on TedPawn_OnFirstPlayerStateReplicated");
static_assert(offsetof(TedPawn_OnFirstPlayerStateReplicated, PlayerController) == 0x000000, "Member 'TedPawn_OnFirstPlayerStateReplicated::PlayerController' has a wrong offset!");

// Function Tempest.TedPawn.OnPlayerIDChanged
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_OnPlayerIDChanged final
{
public:
	ETedPlayerID                                  NewPlayerID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnPlayerIDChanged) == 0x000001, "Wrong alignment on TedPawn_OnPlayerIDChanged");
static_assert(sizeof(TedPawn_OnPlayerIDChanged) == 0x000001, "Wrong size on TedPawn_OnPlayerIDChanged");
static_assert(offsetof(TedPawn_OnPlayerIDChanged, NewPlayerID) == 0x000000, "Member 'TedPawn_OnPlayerIDChanged::NewPlayerID' has a wrong offset!");

// Function Tempest.TedPawn.OnRep_AvailableWeaponClasses
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_OnRep_AvailableWeaponClasses final
{
public:
	TArray<TSubclassOf<class UTedWeapon>>         OldAvailableWeaponClasses;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnRep_AvailableWeaponClasses) == 0x000008, "Wrong alignment on TedPawn_OnRep_AvailableWeaponClasses");
static_assert(sizeof(TedPawn_OnRep_AvailableWeaponClasses) == 0x000010, "Wrong size on TedPawn_OnRep_AvailableWeaponClasses");
static_assert(offsetof(TedPawn_OnRep_AvailableWeaponClasses, OldAvailableWeaponClasses) == 0x000000, "Member 'TedPawn_OnRep_AvailableWeaponClasses::OldAvailableWeaponClasses' has a wrong offset!");

// Function Tempest.TedPawn.OnRep_GainedExperience
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_OnRep_GainedExperience final
{
public:
	float                                         PreviousExperience;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnRep_GainedExperience) == 0x000004, "Wrong alignment on TedPawn_OnRep_GainedExperience");
static_assert(sizeof(TedPawn_OnRep_GainedExperience) == 0x000004, "Wrong size on TedPawn_OnRep_GainedExperience");
static_assert(offsetof(TedPawn_OnRep_GainedExperience, PreviousExperience) == 0x000000, "Member 'TedPawn_OnRep_GainedExperience::PreviousExperience' has a wrong offset!");

// Function Tempest.TedPawn.OnRep_UpgradeFlags
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_OnRep_UpgradeFlags final
{
public:
	ETedPawnUpgradeTypeFlags                      PrevUpgradeFlags;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnRep_UpgradeFlags) == 0x000001, "Wrong alignment on TedPawn_OnRep_UpgradeFlags");
static_assert(sizeof(TedPawn_OnRep_UpgradeFlags) == 0x000001, "Wrong size on TedPawn_OnRep_UpgradeFlags");
static_assert(offsetof(TedPawn_OnRep_UpgradeFlags, PrevUpgradeFlags) == 0x000000, "Member 'TedPawn_OnRep_UpgradeFlags::PrevUpgradeFlags' has a wrong offset!");

// Function Tempest.TedPawn.OnRep_Visibility
// 0x0038 (0x0038 - 0x0000)
struct TedPawn_OnRep_Visibility final
{
public:
	struct FTedVisibility                         OldValue;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnRep_Visibility) == 0x000008, "Wrong alignment on TedPawn_OnRep_Visibility");
static_assert(sizeof(TedPawn_OnRep_Visibility) == 0x000038, "Wrong size on TedPawn_OnRep_Visibility");
static_assert(offsetof(TedPawn_OnRep_Visibility, OldValue) == 0x000000, "Member 'TedPawn_OnRep_Visibility::OldValue' has a wrong offset!");

// Function Tempest.TedPawn.OnRep_WeaponInfoCache
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_OnRep_WeaponInfoCache final
{
public:
	TArray<struct FTedWeaponInfo>                 OldWeaponInfoCache;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnRep_WeaponInfoCache) == 0x000008, "Wrong alignment on TedPawn_OnRep_WeaponInfoCache");
static_assert(sizeof(TedPawn_OnRep_WeaponInfoCache) == 0x000010, "Wrong size on TedPawn_OnRep_WeaponInfoCache");
static_assert(offsetof(TedPawn_OnRep_WeaponInfoCache, OldWeaponInfoCache) == 0x000000, "Member 'TedPawn_OnRep_WeaponInfoCache::OldWeaponInfoCache' has a wrong offset!");

// Function Tempest.TedPawn.OnSelectionChanged_Blueprint
// 0x0002 (0x0002 - 0x0000)
struct TedPawn_OnSelectionChanged_Blueprint final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHovered;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_OnSelectionChanged_Blueprint) == 0x000001, "Wrong alignment on TedPawn_OnSelectionChanged_Blueprint");
static_assert(sizeof(TedPawn_OnSelectionChanged_Blueprint) == 0x000002, "Wrong size on TedPawn_OnSelectionChanged_Blueprint");
static_assert(offsetof(TedPawn_OnSelectionChanged_Blueprint, bIsSelected) == 0x000000, "Member 'TedPawn_OnSelectionChanged_Blueprint::bIsSelected' has a wrong offset!");
static_assert(offsetof(TedPawn_OnSelectionChanged_Blueprint, bIsHovered) == 0x000001, "Member 'TedPawn_OnSelectionChanged_Blueprint::bIsHovered' has a wrong offset!");

// Function Tempest.TedPawn.PlayMontage
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_PlayMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeSeconds;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       AnimatingAbility;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_PlayMontage) == 0x000008, "Wrong alignment on TedPawn_PlayMontage");
static_assert(sizeof(TedPawn_PlayMontage) == 0x000028, "Wrong size on TedPawn_PlayMontage");
static_assert(offsetof(TedPawn_PlayMontage, AnimMontage) == 0x000000, "Member 'TedPawn_PlayMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(TedPawn_PlayMontage, PlayRate) == 0x000008, "Member 'TedPawn_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(TedPawn_PlayMontage, StartSectionName) == 0x00000C, "Member 'TedPawn_PlayMontage::StartSectionName' has a wrong offset!");
static_assert(offsetof(TedPawn_PlayMontage, StartTimeSeconds) == 0x000014, "Member 'TedPawn_PlayMontage::StartTimeSeconds' has a wrong offset!");
static_assert(offsetof(TedPawn_PlayMontage, AnimatingAbility) == 0x000018, "Member 'TedPawn_PlayMontage::AnimatingAbility' has a wrong offset!");
static_assert(offsetof(TedPawn_PlayMontage, ReturnValue) == 0x000020, "Member 'TedPawn_PlayMontage::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.ReceiveOnPawnReplaced
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_ReceiveOnPawnReplaced final
{
public:
	class ATedPawn*                               ReplacedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ReceiveOnPawnReplaced) == 0x000008, "Wrong alignment on TedPawn_ReceiveOnPawnReplaced");
static_assert(sizeof(TedPawn_ReceiveOnPawnReplaced) == 0x000008, "Wrong size on TedPawn_ReceiveOnPawnReplaced");
static_assert(offsetof(TedPawn_ReceiveOnPawnReplaced, ReplacedBy) == 0x000000, "Member 'TedPawn_ReceiveOnPawnReplaced::ReplacedBy' has a wrong offset!");

// Function Tempest.TedPawn.ReceiveOnVeterancyLevelChanged
// 0x0002 (0x0002 - 0x0000)
struct TedPawn_ReceiveOnVeterancyLevelChanged final
{
public:
	ETedVeterancyLevel                            NewLevel;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedVeterancyLevel                            PreviousLevel;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ReceiveOnVeterancyLevelChanged) == 0x000001, "Wrong alignment on TedPawn_ReceiveOnVeterancyLevelChanged");
static_assert(sizeof(TedPawn_ReceiveOnVeterancyLevelChanged) == 0x000002, "Wrong size on TedPawn_ReceiveOnVeterancyLevelChanged");
static_assert(offsetof(TedPawn_ReceiveOnVeterancyLevelChanged, NewLevel) == 0x000000, "Member 'TedPawn_ReceiveOnVeterancyLevelChanged::NewLevel' has a wrong offset!");
static_assert(offsetof(TedPawn_ReceiveOnVeterancyLevelChanged, PreviousLevel) == 0x000001, "Member 'TedPawn_ReceiveOnVeterancyLevelChanged::PreviousLevel' has a wrong offset!");

// Function Tempest.TedPawn.ReceiveTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_ReceiveTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ReceiveTakeAnyDamage) == 0x000008, "Wrong alignment on TedPawn_ReceiveTakeAnyDamage");
static_assert(sizeof(TedPawn_ReceiveTakeAnyDamage) == 0x000028, "Wrong size on TedPawn_ReceiveTakeAnyDamage");
static_assert(offsetof(TedPawn_ReceiveTakeAnyDamage, DamagedActor) == 0x000000, "Member 'TedPawn_ReceiveTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TedPawn_ReceiveTakeAnyDamage, Damage) == 0x000008, "Member 'TedPawn_ReceiveTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(TedPawn_ReceiveTakeAnyDamage, DamageType) == 0x000010, "Member 'TedPawn_ReceiveTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TedPawn_ReceiveTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'TedPawn_ReceiveTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TedPawn_ReceiveTakeAnyDamage, DamageCauser) == 0x000020, "Member 'TedPawn_ReceiveTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function Tempest.TedPawn.ReceiveUpdateHealthEffects
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_ReceiveUpdateHealthEffects final
{
public:
	float                                         HealthPct;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ReceiveUpdateHealthEffects) == 0x000004, "Wrong alignment on TedPawn_ReceiveUpdateHealthEffects");
static_assert(sizeof(TedPawn_ReceiveUpdateHealthEffects) == 0x000004, "Wrong size on TedPawn_ReceiveUpdateHealthEffects");
static_assert(offsetof(TedPawn_ReceiveUpdateHealthEffects, HealthPct) == 0x000000, "Member 'TedPawn_ReceiveUpdateHealthEffects::HealthPct' has a wrong offset!");

// Function Tempest.TedPawn.ReceiveUpgradeActivated
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_ReceiveUpgradeActivated final
{
public:
	ETedPawnUpgradeType                           UpgradeType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ReceiveUpgradeActivated) == 0x000001, "Wrong alignment on TedPawn_ReceiveUpgradeActivated");
static_assert(sizeof(TedPawn_ReceiveUpgradeActivated) == 0x000001, "Wrong size on TedPawn_ReceiveUpgradeActivated");
static_assert(offsetof(TedPawn_ReceiveUpgradeActivated, UpgradeType) == 0x000000, "Member 'TedPawn_ReceiveUpgradeActivated::UpgradeType' has a wrong offset!");

// Function Tempest.TedPawn.RemoveWeapon
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_RemoveWeapon final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipNotify;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_RemoveWeapon) == 0x000008, "Wrong alignment on TedPawn_RemoveWeapon");
static_assert(sizeof(TedPawn_RemoveWeapon) == 0x000010, "Wrong size on TedPawn_RemoveWeapon");
static_assert(offsetof(TedPawn_RemoveWeapon, WeaponClass) == 0x000000, "Member 'TedPawn_RemoveWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TedPawn_RemoveWeapon, bSkipNotify) == 0x000008, "Member 'TedPawn_RemoveWeapon::bSkipNotify' has a wrong offset!");

// Function Tempest.TedPawn.SetAttackBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_SetAttackBehaviorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetAttackBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_SetAttackBehaviorEnabled");
static_assert(sizeof(TedPawn_SetAttackBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_SetAttackBehaviorEnabled");
static_assert(offsetof(TedPawn_SetAttackBehaviorEnabled, bEnabled) == 0x000000, "Member 'TedPawn_SetAttackBehaviorEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedPawn.SetCanBeDamagedDuringCinematic
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_SetCanBeDamagedDuringCinematic final
{
public:
	bool                                          bCanBeDamagedDuringCinematic;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetCanBeDamagedDuringCinematic) == 0x000001, "Wrong alignment on TedPawn_SetCanBeDamagedDuringCinematic");
static_assert(sizeof(TedPawn_SetCanBeDamagedDuringCinematic) == 0x000001, "Wrong size on TedPawn_SetCanBeDamagedDuringCinematic");
static_assert(offsetof(TedPawn_SetCanBeDamagedDuringCinematic, bCanBeDamagedDuringCinematic) == 0x000000, "Member 'TedPawn_SetCanBeDamagedDuringCinematic::bCanBeDamagedDuringCinematic' has a wrong offset!");

// Function Tempest.TedPawn.SetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_SetCurrentWeapon final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetCurrentWeapon) == 0x000008, "Wrong alignment on TedPawn_SetCurrentWeapon");
static_assert(sizeof(TedPawn_SetCurrentWeapon) == 0x000008, "Wrong size on TedPawn_SetCurrentWeapon");
static_assert(offsetof(TedPawn_SetCurrentWeapon, WeaponClass) == 0x000000, "Member 'TedPawn_SetCurrentWeapon::WeaponClass' has a wrong offset!");

// Function Tempest.TedPawn.SetEvadeBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_SetEvadeBehaviorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetEvadeBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_SetEvadeBehaviorEnabled");
static_assert(sizeof(TedPawn_SetEvadeBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_SetEvadeBehaviorEnabled");
static_assert(offsetof(TedPawn_SetEvadeBehaviorEnabled, bEnabled) == 0x000000, "Member 'TedPawn_SetEvadeBehaviorEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedPawn.SetIdleBehaviorsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_SetIdleBehaviorsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetIdleBehaviorsEnabled) == 0x000001, "Wrong alignment on TedPawn_SetIdleBehaviorsEnabled");
static_assert(sizeof(TedPawn_SetIdleBehaviorsEnabled) == 0x000001, "Wrong size on TedPawn_SetIdleBehaviorsEnabled");
static_assert(offsetof(TedPawn_SetIdleBehaviorsEnabled, bEnabled) == 0x000000, "Member 'TedPawn_SetIdleBehaviorsEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedPawn.SetInvestigationBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_SetInvestigationBehaviorEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_SetInvestigationBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_SetInvestigationBehaviorEnabled");
static_assert(sizeof(TedPawn_SetInvestigationBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_SetInvestigationBehaviorEnabled");
static_assert(offsetof(TedPawn_SetInvestigationBehaviorEnabled, bEnabled) == 0x000000, "Member 'TedPawn_SetInvestigationBehaviorEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedPawn.StartRechargingWeapons
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_StartRechargingWeapons final
{
public:
	bool                                          bAutoRechargeOnly;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_StartRechargingWeapons) == 0x000001, "Wrong alignment on TedPawn_StartRechargingWeapons");
static_assert(sizeof(TedPawn_StartRechargingWeapons) == 0x000001, "Wrong size on TedPawn_StartRechargingWeapons");
static_assert(offsetof(TedPawn_StartRechargingWeapons, bAutoRechargeOnly) == 0x000000, "Member 'TedPawn_StartRechargingWeapons::bAutoRechargeOnly' has a wrong offset!");

// Function Tempest.TedPawn.StopRechargingWeapons
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_StopRechargingWeapons final
{
public:
	bool                                          bSkipAutoRecharge;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_StopRechargingWeapons) == 0x000001, "Wrong alignment on TedPawn_StopRechargingWeapons");
static_assert(sizeof(TedPawn_StopRechargingWeapons) == 0x000001, "Wrong size on TedPawn_StopRechargingWeapons");
static_assert(offsetof(TedPawn_StopRechargingWeapons, bSkipAutoRecharge) == 0x000000, "Member 'TedPawn_StopRechargingWeapons::bSkipAutoRecharge' has a wrong offset!");

// Function Tempest.TedPawn.UpgradePawn
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_UpgradePawn final
{
public:
	ETedPawnUpgradeTypeFlags                      InUpgradeFlags;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_UpgradePawn) == 0x000001, "Wrong alignment on TedPawn_UpgradePawn");
static_assert(sizeof(TedPawn_UpgradePawn) == 0x000001, "Wrong size on TedPawn_UpgradePawn");
static_assert(offsetof(TedPawn_UpgradePawn, InUpgradeFlags) == 0x000000, "Member 'TedPawn_UpgradePawn::InUpgradeFlags' has a wrong offset!");

// Function Tempest.TedPawn.AreAllIdleBehaviorsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_AreAllIdleBehaviorsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_AreAllIdleBehaviorsEnabled) == 0x000001, "Wrong alignment on TedPawn_AreAllIdleBehaviorsEnabled");
static_assert(sizeof(TedPawn_AreAllIdleBehaviorsEnabled) == 0x000001, "Wrong size on TedPawn_AreAllIdleBehaviorsEnabled");
static_assert(offsetof(TedPawn_AreAllIdleBehaviorsEnabled, ReturnValue) == 0x000000, "Member 'TedPawn_AreAllIdleBehaviorsEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.CanBeDamagedDuringCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_CanBeDamagedDuringCinematicMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_CanBeDamagedDuringCinematicMode) == 0x000001, "Wrong alignment on TedPawn_CanBeDamagedDuringCinematicMode");
static_assert(sizeof(TedPawn_CanBeDamagedDuringCinematicMode) == 0x000001, "Wrong size on TedPawn_CanBeDamagedDuringCinematicMode");
static_assert(offsetof(TedPawn_CanBeDamagedDuringCinematicMode, ReturnValue) == 0x000000, "Member 'TedPawn_CanBeDamagedDuringCinematicMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.CanFire
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_CanFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_CanFire) == 0x000001, "Wrong alignment on TedPawn_CanFire");
static_assert(sizeof(TedPawn_CanFire) == 0x000001, "Wrong size on TedPawn_CanFire");
static_assert(offsetof(TedPawn_CanFire, ReturnValue) == 0x000000, "Member 'TedPawn_CanFire::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.FindBestWeapon
// 0x0030 (0x0030 - 0x0000)
struct TedPawn_FindBestWeapon final
{
public:
	const class ATedPawn*                         Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoWeaponDistanceCheck;                            // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedWeapon*                       ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_FindBestWeapon) == 0x000008, "Wrong alignment on TedPawn_FindBestWeapon");
static_assert(sizeof(TedPawn_FindBestWeapon) == 0x000030, "Wrong size on TedPawn_FindBestWeapon");
static_assert(offsetof(TedPawn_FindBestWeapon, Target) == 0x000000, "Member 'TedPawn_FindBestWeapon::Target' has a wrong offset!");
static_assert(offsetof(TedPawn_FindBestWeapon, TargetLocation) == 0x000008, "Member 'TedPawn_FindBestWeapon::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedPawn_FindBestWeapon, bDoWeaponDistanceCheck) == 0x000020, "Member 'TedPawn_FindBestWeapon::bDoWeaponDistanceCheck' has a wrong offset!");
static_assert(offsetof(TedPawn_FindBestWeapon, ReturnValue) == 0x000028, "Member 'TedPawn_FindBestWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.FindBestWeaponClass
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_FindBestWeaponClass final
{
public:
	const class ATedPawn*                         Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedWeapon>                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_FindBestWeaponClass) == 0x000008, "Wrong alignment on TedPawn_FindBestWeaponClass");
static_assert(sizeof(TedPawn_FindBestWeaponClass) == 0x000028, "Wrong size on TedPawn_FindBestWeaponClass");
static_assert(offsetof(TedPawn_FindBestWeaponClass, Target) == 0x000000, "Member 'TedPawn_FindBestWeaponClass::Target' has a wrong offset!");
static_assert(offsetof(TedPawn_FindBestWeaponClass, TargetLocation) == 0x000008, "Member 'TedPawn_FindBestWeaponClass::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedPawn_FindBestWeaponClass, ReturnValue) == 0x000020, "Member 'TedPawn_FindBestWeaponClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetAnimMontageFromSet
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_GetAnimMontageFromSet final
{
public:
	struct FGameplayTag                           MontageId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetAnimMontageFromSet) == 0x000008, "Wrong alignment on TedPawn_GetAnimMontageFromSet");
static_assert(sizeof(TedPawn_GetAnimMontageFromSet) == 0x000010, "Wrong size on TedPawn_GetAnimMontageFromSet");
static_assert(offsetof(TedPawn_GetAnimMontageFromSet, MontageId) == 0x000000, "Member 'TedPawn_GetAnimMontageFromSet::MontageId' has a wrong offset!");
static_assert(offsetof(TedPawn_GetAnimMontageFromSet, ReturnValue) == 0x000008, "Member 'TedPawn_GetAnimMontageFromSet::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetAnimMontageSetAsset
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetAnimMontageSetAsset final
{
public:
	class UAnimMontageSet*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetAnimMontageSetAsset) == 0x000008, "Wrong alignment on TedPawn_GetAnimMontageSetAsset");
static_assert(sizeof(TedPawn_GetAnimMontageSetAsset) == 0x000008, "Wrong size on TedPawn_GetAnimMontageSetAsset");
static_assert(offsetof(TedPawn_GetAnimMontageSetAsset, ReturnValue) == 0x000000, "Member 'TedPawn_GetAnimMontageSetAsset::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetAvailableWeapon
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_GetAvailableWeapon final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedWeapon*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetAvailableWeapon) == 0x000008, "Wrong alignment on TedPawn_GetAvailableWeapon");
static_assert(sizeof(TedPawn_GetAvailableWeapon) == 0x000018, "Wrong size on TedPawn_GetAvailableWeapon");
static_assert(offsetof(TedPawn_GetAvailableWeapon, WeaponClass) == 0x000000, "Member 'TedPawn_GetAvailableWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TedPawn_GetAvailableWeapon, bExactMatch) == 0x000008, "Member 'TedPawn_GetAvailableWeapon::bExactMatch' has a wrong offset!");
static_assert(offsetof(TedPawn_GetAvailableWeapon, ReturnValue) == 0x000010, "Member 'TedPawn_GetAvailableWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetAvailableWeaponClasses
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_GetAvailableWeaponClasses final
{
public:
	TArray<TSubclassOf<class UTedWeapon>>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetAvailableWeaponClasses) == 0x000008, "Wrong alignment on TedPawn_GetAvailableWeaponClasses");
static_assert(sizeof(TedPawn_GetAvailableWeaponClasses) == 0x000010, "Wrong size on TedPawn_GetAvailableWeaponClasses");
static_assert(offsetof(TedPawn_GetAvailableWeaponClasses, ReturnValue) == 0x000000, "Member 'TedPawn_GetAvailableWeaponClasses::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetAvailableWeapons
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_GetAvailableWeapons final
{
public:
	TArray<class UTedWeapon*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetAvailableWeapons) == 0x000008, "Wrong alignment on TedPawn_GetAvailableWeapons");
static_assert(sizeof(TedPawn_GetAvailableWeapons) == 0x000010, "Wrong size on TedPawn_GetAvailableWeapons");
static_assert(offsetof(TedPawn_GetAvailableWeapons, ReturnValue) == 0x000000, "Member 'TedPawn_GetAvailableWeapons::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetCurrentMontage
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetCurrentMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetCurrentMontage) == 0x000008, "Wrong alignment on TedPawn_GetCurrentMontage");
static_assert(sizeof(TedPawn_GetCurrentMontage) == 0x000008, "Wrong size on TedPawn_GetCurrentMontage");
static_assert(offsetof(TedPawn_GetCurrentMontage, ReturnValue) == 0x000000, "Member 'TedPawn_GetCurrentMontage::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetCurrentWeapon final
{
public:
	class UTedWeapon*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetCurrentWeapon) == 0x000008, "Wrong alignment on TedPawn_GetCurrentWeapon");
static_assert(sizeof(TedPawn_GetCurrentWeapon) == 0x000008, "Wrong size on TedPawn_GetCurrentWeapon");
static_assert(offsetof(TedPawn_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'TedPawn_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetCurrentWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetCurrentWeaponClass final
{
public:
	TSubclassOf<class UTedWeapon>                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetCurrentWeaponClass) == 0x000008, "Wrong alignment on TedPawn_GetCurrentWeaponClass");
static_assert(sizeof(TedPawn_GetCurrentWeaponClass) == 0x000008, "Wrong size on TedPawn_GetCurrentWeaponClass");
static_assert(offsetof(TedPawn_GetCurrentWeaponClass, ReturnValue) == 0x000000, "Member 'TedPawn_GetCurrentWeaponClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetDefinitionId
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetDefinitionId final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetDefinitionId) == 0x000004, "Wrong alignment on TedPawn_GetDefinitionId");
static_assert(sizeof(TedPawn_GetDefinitionId) == 0x000008, "Wrong size on TedPawn_GetDefinitionId");
static_assert(offsetof(TedPawn_GetDefinitionId, ReturnValue) == 0x000000, "Member 'TedPawn_GetDefinitionId::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetEntityDomain
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetEntityDomain final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetEntityDomain) == 0x000004, "Wrong alignment on TedPawn_GetEntityDomain");
static_assert(sizeof(TedPawn_GetEntityDomain) == 0x000008, "Wrong size on TedPawn_GetEntityDomain");
static_assert(offsetof(TedPawn_GetEntityDomain, ReturnValue) == 0x000000, "Member 'TedPawn_GetEntityDomain::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFireTarget
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetFireTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFireTarget) == 0x000008, "Wrong alignment on TedPawn_GetFireTarget");
static_assert(sizeof(TedPawn_GetFireTarget) == 0x000008, "Wrong size on TedPawn_GetFireTarget");
static_assert(offsetof(TedPawn_GetFireTarget, ReturnValue) == 0x000000, "Member 'TedPawn_GetFireTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFireTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_GetFireTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFireTargetLocation) == 0x000008, "Wrong alignment on TedPawn_GetFireTargetLocation");
static_assert(sizeof(TedPawn_GetFireTargetLocation) == 0x000018, "Wrong size on TedPawn_GetFireTargetLocation");
static_assert(offsetof(TedPawn_GetFireTargetLocation, ReturnValue) == 0x000000, "Member 'TedPawn_GetFireTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFocalPoint
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_GetFocalPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFocalPoint) == 0x000008, "Wrong alignment on TedPawn_GetFocalPoint");
static_assert(sizeof(TedPawn_GetFocalPoint) == 0x000018, "Wrong size on TedPawn_GetFocalPoint");
static_assert(offsetof(TedPawn_GetFocalPoint, ReturnValue) == 0x000000, "Member 'TedPawn_GetFocalPoint::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFocusActor
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetFocusActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFocusActor) == 0x000008, "Wrong alignment on TedPawn_GetFocusActor");
static_assert(sizeof(TedPawn_GetFocusActor) == 0x000008, "Wrong size on TedPawn_GetFocusActor");
static_assert(offsetof(TedPawn_GetFocusActor, ReturnValue) == 0x000000, "Member 'TedPawn_GetFocusActor::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFocusLocation
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_GetFocusLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFocusLocation) == 0x000008, "Wrong alignment on TedPawn_GetFocusLocation");
static_assert(sizeof(TedPawn_GetFocusLocation) == 0x000018, "Wrong size on TedPawn_GetFocusLocation");
static_assert(offsetof(TedPawn_GetFocusLocation, ReturnValue) == 0x000000, "Member 'TedPawn_GetFocusLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFocusRotation
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_GetFocusRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFocusRotation) == 0x000008, "Wrong alignment on TedPawn_GetFocusRotation");
static_assert(sizeof(TedPawn_GetFocusRotation) == 0x000018, "Wrong size on TedPawn_GetFocusRotation");
static_assert(offsetof(TedPawn_GetFocusRotation, ReturnValue) == 0x000000, "Member 'TedPawn_GetFocusRotation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFoWRevealRadius
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetFoWRevealRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFoWRevealRadius) == 0x000004, "Wrong alignment on TedPawn_GetFoWRevealRadius");
static_assert(sizeof(TedPawn_GetFoWRevealRadius) == 0x000004, "Wrong size on TedPawn_GetFoWRevealRadius");
static_assert(offsetof(TedPawn_GetFoWRevealRadius, ReturnValue) == 0x000000, "Member 'TedPawn_GetFoWRevealRadius::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetFoWVisionRadius
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetFoWVisionRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetFoWVisionRadius) == 0x000004, "Wrong alignment on TedPawn_GetFoWVisionRadius");
static_assert(sizeof(TedPawn_GetFoWVisionRadius) == 0x000004, "Wrong size on TedPawn_GetFoWVisionRadius");
static_assert(offsetof(TedPawn_GetFoWVisionRadius, ReturnValue) == 0x000000, "Member 'TedPawn_GetFoWVisionRadius::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetGainedExperience
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetGainedExperience final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetGainedExperience) == 0x000004, "Wrong alignment on TedPawn_GetGainedExperience");
static_assert(sizeof(TedPawn_GetGainedExperience) == 0x000004, "Wrong size on TedPawn_GetGainedExperience");
static_assert(offsetof(TedPawn_GetGainedExperience, ReturnValue) == 0x000000, "Member 'TedPawn_GetGainedExperience::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetHealth) == 0x000004, "Wrong alignment on TedPawn_GetHealth");
static_assert(sizeof(TedPawn_GetHealth) == 0x000004, "Wrong size on TedPawn_GetHealth");
static_assert(offsetof(TedPawn_GetHealth, ReturnValue) == 0x000000, "Member 'TedPawn_GetHealth::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetHealthMax
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetHealthMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetHealthMax) == 0x000004, "Wrong alignment on TedPawn_GetHealthMax");
static_assert(sizeof(TedPawn_GetHealthMax) == 0x000004, "Wrong size on TedPawn_GetHealthMax");
static_assert(offsetof(TedPawn_GetHealthMax, ReturnValue) == 0x000000, "Member 'TedPawn_GetHealthMax::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetHealthPct
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetHealthPct final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetHealthPct) == 0x000004, "Wrong alignment on TedPawn_GetHealthPct");
static_assert(sizeof(TedPawn_GetHealthPct) == 0x000004, "Wrong size on TedPawn_GetHealthPct");
static_assert(offsetof(TedPawn_GetHealthPct, ReturnValue) == 0x000000, "Member 'TedPawn_GetHealthPct::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetLastDamageInfo
// 0x0020 (0x0020 - 0x0000)
struct TedPawn_GetLastDamageInfo final
{
public:
	struct FTedPawnDamageInfo                     ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetLastDamageInfo) == 0x000008, "Wrong alignment on TedPawn_GetLastDamageInfo");
static_assert(sizeof(TedPawn_GetLastDamageInfo) == 0x000020, "Wrong size on TedPawn_GetLastDamageInfo");
static_assert(offsetof(TedPawn_GetLastDamageInfo, ReturnValue) == 0x000000, "Member 'TedPawn_GetLastDamageInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetLifeTime
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetLifeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetLifeTime) == 0x000004, "Wrong alignment on TedPawn_GetLifeTime");
static_assert(sizeof(TedPawn_GetLifeTime) == 0x000004, "Wrong size on TedPawn_GetLifeTime");
static_assert(offsetof(TedPawn_GetLifeTime, ReturnValue) == 0x000000, "Member 'TedPawn_GetLifeTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetLoadSound
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_GetLoadSound final
{
public:
	TSoftObjectPtr<class USoundCue>               ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetLoadSound) == 0x000008, "Wrong alignment on TedPawn_GetLoadSound");
static_assert(sizeof(TedPawn_GetLoadSound) == 0x000028, "Wrong size on TedPawn_GetLoadSound");
static_assert(offsetof(TedPawn_GetLoadSound, ReturnValue) == 0x000000, "Member 'TedPawn_GetLoadSound::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetOwningFaction
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_GetOwningFaction final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetOwningFaction) == 0x000001, "Wrong alignment on TedPawn_GetOwningFaction");
static_assert(sizeof(TedPawn_GetOwningFaction) == 0x000001, "Wrong size on TedPawn_GetOwningFaction");
static_assert(offsetof(TedPawn_GetOwningFaction, ReturnValue) == 0x000000, "Member 'TedPawn_GetOwningFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetOwningPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetOwningPlayerController final
{
public:
	class ATedPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetOwningPlayerController) == 0x000008, "Wrong alignment on TedPawn_GetOwningPlayerController");
static_assert(sizeof(TedPawn_GetOwningPlayerController) == 0x000008, "Wrong size on TedPawn_GetOwningPlayerController");
static_assert(offsetof(TedPawn_GetOwningPlayerController, ReturnValue) == 0x000000, "Member 'TedPawn_GetOwningPlayerController::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetOwningPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetOwningPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetOwningPlayerData) == 0x000008, "Wrong alignment on TedPawn_GetOwningPlayerData");
static_assert(sizeof(TedPawn_GetOwningPlayerData) == 0x000008, "Wrong size on TedPawn_GetOwningPlayerData");
static_assert(offsetof(TedPawn_GetOwningPlayerData, ReturnValue) == 0x000000, "Member 'TedPawn_GetOwningPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetOwningPlayerID
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_GetOwningPlayerID final
{
public:
	ETedPlayerID                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetOwningPlayerID) == 0x000001, "Wrong alignment on TedPawn_GetOwningPlayerID");
static_assert(sizeof(TedPawn_GetOwningPlayerID) == 0x000001, "Wrong size on TedPawn_GetOwningPlayerID");
static_assert(offsetof(TedPawn_GetOwningPlayerID, ReturnValue) == 0x000000, "Member 'TedPawn_GetOwningPlayerID::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetOwningPlayerState
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_GetOwningPlayerState final
{
public:
	bool                                          bReturnOriginalOwner;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetOwningPlayerState) == 0x000008, "Wrong alignment on TedPawn_GetOwningPlayerState");
static_assert(sizeof(TedPawn_GetOwningPlayerState) == 0x000010, "Wrong size on TedPawn_GetOwningPlayerState");
static_assert(offsetof(TedPawn_GetOwningPlayerState, bReturnOriginalOwner) == 0x000000, "Member 'TedPawn_GetOwningPlayerState::bReturnOriginalOwner' has a wrong offset!");
static_assert(offsetof(TedPawn_GetOwningPlayerState, ReturnValue) == 0x000008, "Member 'TedPawn_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPawnContainerOwner
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetPawnContainerOwner final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPawnContainerOwner) == 0x000008, "Wrong alignment on TedPawn_GetPawnContainerOwner");
static_assert(sizeof(TedPawn_GetPawnContainerOwner) == 0x000008, "Wrong size on TedPawn_GetPawnContainerOwner");
static_assert(offsetof(TedPawn_GetPawnContainerOwner, ReturnValue) == 0x000000, "Member 'TedPawn_GetPawnContainerOwner::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPawnFactionFromDefinition
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_GetPawnFactionFromDefinition final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPawnFactionFromDefinition) == 0x000001, "Wrong alignment on TedPawn_GetPawnFactionFromDefinition");
static_assert(sizeof(TedPawn_GetPawnFactionFromDefinition) == 0x000001, "Wrong size on TedPawn_GetPawnFactionFromDefinition");
static_assert(offsetof(TedPawn_GetPawnFactionFromDefinition, ReturnValue) == 0x000000, "Member 'TedPawn_GetPawnFactionFromDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPawnUnderAttackAnnouncement
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_GetPawnUnderAttackAnnouncement final
{
public:
	TSubclassOf<class UTedAnnouncement>           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPawnUnderAttackAnnouncement) == 0x000008, "Wrong alignment on TedPawn_GetPawnUnderAttackAnnouncement");
static_assert(sizeof(TedPawn_GetPawnUnderAttackAnnouncement) == 0x000008, "Wrong size on TedPawn_GetPawnUnderAttackAnnouncement");
static_assert(offsetof(TedPawn_GetPawnUnderAttackAnnouncement, ReturnValue) == 0x000000, "Member 'TedPawn_GetPawnUnderAttackAnnouncement::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPhysicalFireStartLoc
// 0x0020 (0x0020 - 0x0000)
struct TedPawn_GetPhysicalFireStartLoc final
{
public:
	class FName                                   PhysicalFireLocSocketNameOverride;                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPhysicalFireStartLoc) == 0x000008, "Wrong alignment on TedPawn_GetPhysicalFireStartLoc");
static_assert(sizeof(TedPawn_GetPhysicalFireStartLoc) == 0x000020, "Wrong size on TedPawn_GetPhysicalFireStartLoc");
static_assert(offsetof(TedPawn_GetPhysicalFireStartLoc, PhysicalFireLocSocketNameOverride) == 0x000000, "Member 'TedPawn_GetPhysicalFireStartLoc::PhysicalFireLocSocketNameOverride' has a wrong offset!");
static_assert(offsetof(TedPawn_GetPhysicalFireStartLoc, ReturnValue) == 0x000008, "Member 'TedPawn_GetPhysicalFireStartLoc::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPower
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPower) == 0x000004, "Wrong alignment on TedPawn_GetPower");
static_assert(sizeof(TedPawn_GetPower) == 0x000004, "Wrong size on TedPawn_GetPower");
static_assert(offsetof(TedPawn_GetPower, ReturnValue) == 0x000000, "Member 'TedPawn_GetPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetPowerBase
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetPowerBase final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetPowerBase) == 0x000004, "Wrong alignment on TedPawn_GetPowerBase");
static_assert(sizeof(TedPawn_GetPowerBase) == 0x000004, "Wrong size on TedPawn_GetPowerBase");
static_assert(offsetof(TedPawn_GetPowerBase, ReturnValue) == 0x000000, "Member 'TedPawn_GetPowerBase::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetRemainingLifeTime
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetRemainingLifeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetRemainingLifeTime) == 0x000004, "Wrong alignment on TedPawn_GetRemainingLifeTime");
static_assert(sizeof(TedPawn_GetRemainingLifeTime) == 0x000004, "Wrong size on TedPawn_GetRemainingLifeTime");
static_assert(offsetof(TedPawn_GetRemainingLifeTime, ReturnValue) == 0x000000, "Member 'TedPawn_GetRemainingLifeTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetTargetingDomains
// 0x0020 (0x0020 - 0x0000)
struct TedPawn_GetTargetingDomains final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetTargetingDomains) == 0x000008, "Wrong alignment on TedPawn_GetTargetingDomains");
static_assert(sizeof(TedPawn_GetTargetingDomains) == 0x000020, "Wrong size on TedPawn_GetTargetingDomains");
static_assert(offsetof(TedPawn_GetTargetingDomains, ReturnValue) == 0x000000, "Member 'TedPawn_GetTargetingDomains::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetUnloadSound
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_GetUnloadSound final
{
public:
	TSoftObjectPtr<class USoundCue>               ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetUnloadSound) == 0x000008, "Wrong alignment on TedPawn_GetUnloadSound");
static_assert(sizeof(TedPawn_GetUnloadSound) == 0x000028, "Wrong size on TedPawn_GetUnloadSound");
static_assert(offsetof(TedPawn_GetUnloadSound, ReturnValue) == 0x000000, "Member 'TedPawn_GetUnloadSound::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetVeterancyLevel
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_GetVeterancyLevel final
{
public:
	ETedVeterancyLevel                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetVeterancyLevel) == 0x000001, "Wrong alignment on TedPawn_GetVeterancyLevel");
static_assert(sizeof(TedPawn_GetVeterancyLevel) == 0x000001, "Wrong size on TedPawn_GetVeterancyLevel");
static_assert(offsetof(TedPawn_GetVeterancyLevel, ReturnValue) == 0x000000, "Member 'TedPawn_GetVeterancyLevel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.GetVeterancyProgressToNextLevel
// 0x0004 (0x0004 - 0x0000)
struct TedPawn_GetVeterancyProgressToNextLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_GetVeterancyProgressToNextLevel) == 0x000004, "Wrong alignment on TedPawn_GetVeterancyProgressToNextLevel");
static_assert(sizeof(TedPawn_GetVeterancyProgressToNextLevel) == 0x000004, "Wrong size on TedPawn_GetVeterancyProgressToNextLevel");
static_assert(offsetof(TedPawn_GetVeterancyProgressToNextLevel, ReturnValue) == 0x000000, "Member 'TedPawn_GetVeterancyProgressToNextLevel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasAmmoForWeapon
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_HasAmmoForWeapon final
{
public:
	const class UTedWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_HasAmmoForWeapon) == 0x000008, "Wrong alignment on TedPawn_HasAmmoForWeapon");
static_assert(sizeof(TedPawn_HasAmmoForWeapon) == 0x000010, "Wrong size on TedPawn_HasAmmoForWeapon");
static_assert(offsetof(TedPawn_HasAmmoForWeapon, Weapon) == 0x000000, "Member 'TedPawn_HasAmmoForWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(TedPawn_HasAmmoForWeapon, ReturnValue) == 0x000008, "Member 'TedPawn_HasAmmoForWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasAnimMontageInSet
// 0x000C (0x000C - 0x0000)
struct TedPawn_HasAnimMontageInSet final
{
public:
	struct FGameplayTag                           MontageId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_HasAnimMontageInSet) == 0x000004, "Wrong alignment on TedPawn_HasAnimMontageInSet");
static_assert(sizeof(TedPawn_HasAnimMontageInSet) == 0x00000C, "Wrong size on TedPawn_HasAnimMontageInSet");
static_assert(offsetof(TedPawn_HasAnimMontageInSet, MontageId) == 0x000000, "Member 'TedPawn_HasAnimMontageInSet::MontageId' has a wrong offset!");
static_assert(offsetof(TedPawn_HasAnimMontageInSet, ReturnValue) == 0x000008, "Member 'TedPawn_HasAnimMontageInSet::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasAnyWeapon
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_HasAnyWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_HasAnyWeapon) == 0x000001, "Wrong alignment on TedPawn_HasAnyWeapon");
static_assert(sizeof(TedPawn_HasAnyWeapon) == 0x000001, "Wrong size on TedPawn_HasAnyWeapon");
static_assert(offsetof(TedPawn_HasAnyWeapon, ReturnValue) == 0x000000, "Member 'TedPawn_HasAnyWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasFireTarget
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_HasFireTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_HasFireTarget) == 0x000001, "Wrong alignment on TedPawn_HasFireTarget");
static_assert(sizeof(TedPawn_HasFireTarget) == 0x000001, "Wrong size on TedPawn_HasFireTarget");
static_assert(offsetof(TedPawn_HasFireTarget, ReturnValue) == 0x000000, "Member 'TedPawn_HasFireTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasFocus
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_HasFocus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_HasFocus) == 0x000001, "Wrong alignment on TedPawn_HasFocus");
static_assert(sizeof(TedPawn_HasFocus) == 0x000001, "Wrong size on TedPawn_HasFocus");
static_assert(offsetof(TedPawn_HasFocus, ReturnValue) == 0x000000, "Member 'TedPawn_HasFocus::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasMaxAmmoForWeapon
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_HasMaxAmmoForWeapon final
{
public:
	const class UTedWeapon*                       Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_HasMaxAmmoForWeapon) == 0x000008, "Wrong alignment on TedPawn_HasMaxAmmoForWeapon");
static_assert(sizeof(TedPawn_HasMaxAmmoForWeapon) == 0x000010, "Wrong size on TedPawn_HasMaxAmmoForWeapon");
static_assert(offsetof(TedPawn_HasMaxAmmoForWeapon, Weapon) == 0x000000, "Member 'TedPawn_HasMaxAmmoForWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(TedPawn_HasMaxAmmoForWeapon, ReturnValue) == 0x000008, "Member 'TedPawn_HasMaxAmmoForWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasUpgrade
// 0x0002 (0x0002 - 0x0000)
struct TedPawn_HasUpgrade final
{
public:
	ETedPawnUpgradeType                           UpgradeType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_HasUpgrade) == 0x000001, "Wrong alignment on TedPawn_HasUpgrade");
static_assert(sizeof(TedPawn_HasUpgrade) == 0x000002, "Wrong size on TedPawn_HasUpgrade");
static_assert(offsetof(TedPawn_HasUpgrade, UpgradeType) == 0x000000, "Member 'TedPawn_HasUpgrade::UpgradeType' has a wrong offset!");
static_assert(offsetof(TedPawn_HasUpgrade, ReturnValue) == 0x000001, "Member 'TedPawn_HasUpgrade::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasWeapon
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_HasWeapon final
{
public:
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_HasWeapon) == 0x000008, "Wrong alignment on TedPawn_HasWeapon");
static_assert(sizeof(TedPawn_HasWeapon) == 0x000010, "Wrong size on TedPawn_HasWeapon");
static_assert(offsetof(TedPawn_HasWeapon, WeaponClass) == 0x000000, "Member 'TedPawn_HasWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(TedPawn_HasWeapon, ReturnValue) == 0x000008, "Member 'TedPawn_HasWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.HasWeaponSelected
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_HasWeaponSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_HasWeaponSelected) == 0x000001, "Wrong alignment on TedPawn_HasWeaponSelected");
static_assert(sizeof(TedPawn_HasWeaponSelected) == 0x000001, "Wrong size on TedPawn_HasWeaponSelected");
static_assert(offsetof(TedPawn_HasWeaponSelected, ReturnValue) == 0x000000, "Member 'TedPawn_HasWeaponSelected::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsAlive) == 0x000001, "Wrong alignment on TedPawn_IsAlive");
static_assert(sizeof(TedPawn_IsAlive) == 0x000001, "Wrong size on TedPawn_IsAlive");
static_assert(offsetof(TedPawn_IsAlive, ReturnValue) == 0x000000, "Member 'TedPawn_IsAlive::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsAttackBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsAttackBehaviorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsAttackBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_IsAttackBehaviorEnabled");
static_assert(sizeof(TedPawn_IsAttackBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_IsAttackBehaviorEnabled");
static_assert(offsetof(TedPawn_IsAttackBehaviorEnabled, ReturnValue) == 0x000000, "Member 'TedPawn_IsAttackBehaviorEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsDamaged
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsDamaged) == 0x000001, "Wrong alignment on TedPawn_IsDamaged");
static_assert(sizeof(TedPawn_IsDamaged) == 0x000001, "Wrong size on TedPawn_IsDamaged");
static_assert(offsetof(TedPawn_IsDamaged, ReturnValue) == 0x000000, "Member 'TedPawn_IsDamaged::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsEvadeBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsEvadeBehaviorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsEvadeBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_IsEvadeBehaviorEnabled");
static_assert(sizeof(TedPawn_IsEvadeBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_IsEvadeBehaviorEnabled");
static_assert(offsetof(TedPawn_IsEvadeBehaviorEnabled, ReturnValue) == 0x000000, "Member 'TedPawn_IsEvadeBehaviorEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsFogOfWarVisible
// 0x0002 (0x0002 - 0x0000)
struct TedPawn_IsFogOfWarVisible final
{
public:
	uint8                                         ChannelId;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsFogOfWarVisible) == 0x000001, "Wrong alignment on TedPawn_IsFogOfWarVisible");
static_assert(sizeof(TedPawn_IsFogOfWarVisible) == 0x000002, "Wrong size on TedPawn_IsFogOfWarVisible");
static_assert(offsetof(TedPawn_IsFogOfWarVisible, ChannelId) == 0x000000, "Member 'TedPawn_IsFogOfWarVisible::ChannelId' has a wrong offset!");
static_assert(offsetof(TedPawn_IsFogOfWarVisible, ReturnValue) == 0x000001, "Member 'TedPawn_IsFogOfWarVisible::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsFogOfWarVisibleFor
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_IsFogOfWarVisibleFor final
{
public:
	const class ATedPlayerController*             TedPC;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_IsFogOfWarVisibleFor) == 0x000008, "Wrong alignment on TedPawn_IsFogOfWarVisibleFor");
static_assert(sizeof(TedPawn_IsFogOfWarVisibleFor) == 0x000010, "Wrong size on TedPawn_IsFogOfWarVisibleFor");
static_assert(offsetof(TedPawn_IsFogOfWarVisibleFor, TedPC) == 0x000000, "Member 'TedPawn_IsFogOfWarVisibleFor::TedPC' has a wrong offset!");
static_assert(offsetof(TedPawn_IsFogOfWarVisibleFor, ReturnValue) == 0x000008, "Member 'TedPawn_IsFogOfWarVisibleFor::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsFogOfWarVisibleForLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsFogOfWarVisibleForLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsFogOfWarVisibleForLocalPlayer) == 0x000001, "Wrong alignment on TedPawn_IsFogOfWarVisibleForLocalPlayer");
static_assert(sizeof(TedPawn_IsFogOfWarVisibleForLocalPlayer) == 0x000001, "Wrong size on TedPawn_IsFogOfWarVisibleForLocalPlayer");
static_assert(offsetof(TedPawn_IsFogOfWarVisibleForLocalPlayer, ReturnValue) == 0x000000, "Member 'TedPawn_IsFogOfWarVisibleForLocalPlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsFogOfWarVisibleForLocalPlayerReal
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsFogOfWarVisibleForLocalPlayerReal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsFogOfWarVisibleForLocalPlayerReal) == 0x000001, "Wrong alignment on TedPawn_IsFogOfWarVisibleForLocalPlayerReal");
static_assert(sizeof(TedPawn_IsFogOfWarVisibleForLocalPlayerReal) == 0x000001, "Wrong size on TedPawn_IsFogOfWarVisibleForLocalPlayerReal");
static_assert(offsetof(TedPawn_IsFogOfWarVisibleForLocalPlayerReal, ReturnValue) == 0x000000, "Member 'TedPawn_IsFogOfWarVisibleForLocalPlayerReal::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsInContainer
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsInContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsInContainer) == 0x000001, "Wrong alignment on TedPawn_IsInContainer");
static_assert(sizeof(TedPawn_IsInContainer) == 0x000001, "Wrong size on TedPawn_IsInContainer");
static_assert(offsetof(TedPawn_IsInContainer, ReturnValue) == 0x000000, "Member 'TedPawn_IsInContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsInEntityDomain
// 0x000C (0x000C - 0x0000)
struct TedPawn_IsInEntityDomain final
{
public:
	struct FGameplayTag                           InEntityDomain;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_IsInEntityDomain) == 0x000004, "Wrong alignment on TedPawn_IsInEntityDomain");
static_assert(sizeof(TedPawn_IsInEntityDomain) == 0x00000C, "Wrong size on TedPawn_IsInEntityDomain");
static_assert(offsetof(TedPawn_IsInEntityDomain, InEntityDomain) == 0x000000, "Member 'TedPawn_IsInEntityDomain::InEntityDomain' has a wrong offset!");
static_assert(offsetof(TedPawn_IsInEntityDomain, ReturnValue) == 0x000008, "Member 'TedPawn_IsInEntityDomain::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsInvestigationBehaviorEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsInvestigationBehaviorEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsInvestigationBehaviorEnabled) == 0x000001, "Wrong alignment on TedPawn_IsInvestigationBehaviorEnabled");
static_assert(sizeof(TedPawn_IsInvestigationBehaviorEnabled) == 0x000001, "Wrong size on TedPawn_IsInvestigationBehaviorEnabled");
static_assert(offsetof(TedPawn_IsInvestigationBehaviorEnabled, ReturnValue) == 0x000000, "Member 'TedPawn_IsInvestigationBehaviorEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsReachargingWeapons
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsReachargingWeapons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsReachargingWeapons) == 0x000001, "Wrong alignment on TedPawn_IsReachargingWeapons");
static_assert(sizeof(TedPawn_IsReachargingWeapons) == 0x000001, "Wrong size on TedPawn_IsReachargingWeapons");
static_assert(offsetof(TedPawn_IsReachargingWeapons, ReturnValue) == 0x000000, "Member 'TedPawn_IsReachargingWeapons::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsResearchingUpgrade
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsResearchingUpgrade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsResearchingUpgrade) == 0x000001, "Wrong alignment on TedPawn_IsResearchingUpgrade");
static_assert(sizeof(TedPawn_IsResearchingUpgrade) == 0x000001, "Wrong size on TedPawn_IsResearchingUpgrade");
static_assert(offsetof(TedPawn_IsResearchingUpgrade, ReturnValue) == 0x000000, "Member 'TedPawn_IsResearchingUpgrade::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsUpgraded
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsUpgraded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsUpgraded) == 0x000001, "Wrong alignment on TedPawn_IsUpgraded");
static_assert(sizeof(TedPawn_IsUpgraded) == 0x000001, "Wrong size on TedPawn_IsUpgraded");
static_assert(offsetof(TedPawn_IsUpgraded, ReturnValue) == 0x000000, "Member 'TedPawn_IsUpgraded::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.IsUpgradeResearchRunning
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_IsUpgradeResearchRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_IsUpgradeResearchRunning) == 0x000001, "Wrong alignment on TedPawn_IsUpgradeResearchRunning");
static_assert(sizeof(TedPawn_IsUpgradeResearchRunning) == 0x000001, "Wrong size on TedPawn_IsUpgradeResearchRunning");
static_assert(offsetof(TedPawn_IsUpgradeResearchRunning, ReturnValue) == 0x000000, "Member 'TedPawn_IsUpgradeResearchRunning::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.K2_GetAnimMontagesFromSet
// 0x0018 (0x0018 - 0x0000)
struct TedPawn_K2_GetAnimMontagesFromSet final
{
public:
	struct FGameplayTag                           MontageId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_K2_GetAnimMontagesFromSet) == 0x000008, "Wrong alignment on TedPawn_K2_GetAnimMontagesFromSet");
static_assert(sizeof(TedPawn_K2_GetAnimMontagesFromSet) == 0x000018, "Wrong size on TedPawn_K2_GetAnimMontagesFromSet");
static_assert(offsetof(TedPawn_K2_GetAnimMontagesFromSet, MontageId) == 0x000000, "Member 'TedPawn_K2_GetAnimMontagesFromSet::MontageId' has a wrong offset!");
static_assert(offsetof(TedPawn_K2_GetAnimMontagesFromSet, ReturnValue) == 0x000008, "Member 'TedPawn_K2_GetAnimMontagesFromSet::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.K2_GetLocalVisibilityChannel
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_K2_GetLocalVisibilityChannel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_K2_GetLocalVisibilityChannel) == 0x000001, "Wrong alignment on TedPawn_K2_GetLocalVisibilityChannel");
static_assert(sizeof(TedPawn_K2_GetLocalVisibilityChannel) == 0x000001, "Wrong size on TedPawn_K2_GetLocalVisibilityChannel");
static_assert(offsetof(TedPawn_K2_GetLocalVisibilityChannel, ReturnValue) == 0x000000, "Member 'TedPawn_K2_GetLocalVisibilityChannel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.K2_WasEverVisibleLocally
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_K2_WasEverVisibleLocally final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_K2_WasEverVisibleLocally) == 0x000001, "Wrong alignment on TedPawn_K2_WasEverVisibleLocally");
static_assert(sizeof(TedPawn_K2_WasEverVisibleLocally) == 0x000001, "Wrong size on TedPawn_K2_WasEverVisibleLocally");
static_assert(offsetof(TedPawn_K2_WasEverVisibleLocally, ReturnValue) == 0x000000, "Member 'TedPawn_K2_WasEverVisibleLocally::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.ShouldRegisterInUpgradeSystem
// 0x0001 (0x0001 - 0x0000)
struct TedPawn_ShouldRegisterInUpgradeSystem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawn_ShouldRegisterInUpgradeSystem) == 0x000001, "Wrong alignment on TedPawn_ShouldRegisterInUpgradeSystem");
static_assert(sizeof(TedPawn_ShouldRegisterInUpgradeSystem) == 0x000001, "Wrong size on TedPawn_ShouldRegisterInUpgradeSystem");
static_assert(offsetof(TedPawn_ShouldRegisterInUpgradeSystem, ReturnValue) == 0x000000, "Member 'TedPawn_ShouldRegisterInUpgradeSystem::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.TedGetActiveEffectCount
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_TedGetActiveEffectCount final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_TedGetActiveEffectCount) == 0x000008, "Wrong alignment on TedPawn_TedGetActiveEffectCount");
static_assert(sizeof(TedPawn_TedGetActiveEffectCount) == 0x000010, "Wrong size on TedPawn_TedGetActiveEffectCount");
static_assert(offsetof(TedPawn_TedGetActiveEffectCount, Effect) == 0x000000, "Member 'TedPawn_TedGetActiveEffectCount::Effect' has a wrong offset!");
static_assert(offsetof(TedPawn_TedGetActiveEffectCount, ReturnValue) == 0x000008, "Member 'TedPawn_TedGetActiveEffectCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.TedHasAnyActiveEffect
// 0x0028 (0x0028 - 0x0000)
struct TedPawn_TedHasAnyActiveEffect final
{
public:
	struct FGameplayTagContainer                  InContainer;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRequireAll;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_TedHasAnyActiveEffect) == 0x000008, "Wrong alignment on TedPawn_TedHasAnyActiveEffect");
static_assert(sizeof(TedPawn_TedHasAnyActiveEffect) == 0x000028, "Wrong size on TedPawn_TedHasAnyActiveEffect");
static_assert(offsetof(TedPawn_TedHasAnyActiveEffect, InContainer) == 0x000000, "Member 'TedPawn_TedHasAnyActiveEffect::InContainer' has a wrong offset!");
static_assert(offsetof(TedPawn_TedHasAnyActiveEffect, bRequireAll) == 0x000020, "Member 'TedPawn_TedHasAnyActiveEffect::bRequireAll' has a wrong offset!");
static_assert(offsetof(TedPawn_TedHasAnyActiveEffect, ReturnValue) == 0x000021, "Member 'TedPawn_TedHasAnyActiveEffect::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.TedIsEffectActive
// 0x0010 (0x0010 - 0x0000)
struct TedPawn_TedIsEffectActive final
{
public:
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_TedIsEffectActive) == 0x000008, "Wrong alignment on TedPawn_TedIsEffectActive");
static_assert(sizeof(TedPawn_TedIsEffectActive) == 0x000010, "Wrong size on TedPawn_TedIsEffectActive");
static_assert(offsetof(TedPawn_TedIsEffectActive, Effect) == 0x000000, "Member 'TedPawn_TedIsEffectActive::Effect' has a wrong offset!");
static_assert(offsetof(TedPawn_TedIsEffectActive, ReturnValue) == 0x000008, "Member 'TedPawn_TedIsEffectActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawn.WasRecentlyRenderedOnScreen
// 0x0008 (0x0008 - 0x0000)
struct TedPawn_WasRecentlyRenderedOnScreen final
{
public:
	float                                         Tolerance;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawn_WasRecentlyRenderedOnScreen) == 0x000004, "Wrong alignment on TedPawn_WasRecentlyRenderedOnScreen");
static_assert(sizeof(TedPawn_WasRecentlyRenderedOnScreen) == 0x000008, "Wrong size on TedPawn_WasRecentlyRenderedOnScreen");
static_assert(offsetof(TedPawn_WasRecentlyRenderedOnScreen, Tolerance) == 0x000000, "Member 'TedPawn_WasRecentlyRenderedOnScreen::Tolerance' has a wrong offset!");
static_assert(offsetof(TedPawn_WasRecentlyRenderedOnScreen, ReturnValue) == 0x000004, "Member 'TedPawn_WasRecentlyRenderedOnScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.Client_OnUnitSpawned
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_Client_OnUnitSpawned final
{
public:
	class ATedUnitBase*                           SpawnedUnit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_Client_OnUnitSpawned) == 0x000008, "Wrong alignment on TedStructureBase_Client_OnUnitSpawned");
static_assert(sizeof(TedStructureBase_Client_OnUnitSpawned) == 0x000008, "Wrong size on TedStructureBase_Client_OnUnitSpawned");
static_assert(offsetof(TedStructureBase_Client_OnUnitSpawned, SpawnedUnit) == 0x000000, "Member 'TedStructureBase_Client_OnUnitSpawned::SpawnedUnit' has a wrong offset!");

// Function Tempest.TedStructureBase.K2_OnUnitSpawned
// 0x0010 (0x0010 - 0x0000)
struct TedStructureBase_K2_OnUnitSpawned final
{
public:
	class ATedUnitBase*                           SpawnedUnit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_K2_OnUnitSpawned) == 0x000008, "Wrong alignment on TedStructureBase_K2_OnUnitSpawned");
static_assert(sizeof(TedStructureBase_K2_OnUnitSpawned) == 0x000010, "Wrong size on TedStructureBase_K2_OnUnitSpawned");
static_assert(offsetof(TedStructureBase_K2_OnUnitSpawned, SpawnedUnit) == 0x000000, "Member 'TedStructureBase_K2_OnUnitSpawned::SpawnedUnit' has a wrong offset!");
static_assert(offsetof(TedStructureBase_K2_OnUnitSpawned, ReturnValue) == 0x000008, "Member 'TedStructureBase_K2_OnUnitSpawned::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.Multicast_OnCaptured
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_Multicast_OnCaptured final
{
public:
	ETedPlayerID                                  NewPlayerID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_Multicast_OnCaptured) == 0x000001, "Wrong alignment on TedStructureBase_Multicast_OnCaptured");
static_assert(sizeof(TedStructureBase_Multicast_OnCaptured) == 0x000001, "Wrong size on TedStructureBase_Multicast_OnCaptured");
static_assert(offsetof(TedStructureBase_Multicast_OnCaptured, NewPlayerID) == 0x000000, "Member 'TedStructureBase_Multicast_OnCaptured::NewPlayerID' has a wrong offset!");

// Function Tempest.TedStructureBase.NetMulticast_OnUnitSpawned
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_NetMulticast_OnUnitSpawned final
{
public:
	class ATedUnitBase*                           SpawnedUnit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_NetMulticast_OnUnitSpawned) == 0x000008, "Wrong alignment on TedStructureBase_NetMulticast_OnUnitSpawned");
static_assert(sizeof(TedStructureBase_NetMulticast_OnUnitSpawned) == 0x000008, "Wrong size on TedStructureBase_NetMulticast_OnUnitSpawned");
static_assert(offsetof(TedStructureBase_NetMulticast_OnUnitSpawned, SpawnedUnit) == 0x000000, "Member 'TedStructureBase_NetMulticast_OnUnitSpawned::SpawnedUnit' has a wrong offset!");

// Function Tempest.TedStructureBase.OnCapturedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_OnCapturedCosmetic final
{
public:
	ETedPlayerID                                  NewPlayerID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_OnCapturedCosmetic) == 0x000001, "Wrong alignment on TedStructureBase_OnCapturedCosmetic");
static_assert(sizeof(TedStructureBase_OnCapturedCosmetic) == 0x000001, "Wrong size on TedStructureBase_OnCapturedCosmetic");
static_assert(offsetof(TedStructureBase_OnCapturedCosmetic, NewPlayerID) == 0x000000, "Member 'TedStructureBase_OnCapturedCosmetic::NewPlayerID' has a wrong offset!");

// Function Tempest.TedStructureBase.ReceiveHandleConstructionVisuals
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_ReceiveHandleConstructionVisuals final
{
public:
	bool                                          bInConstructing;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_ReceiveHandleConstructionVisuals) == 0x000001, "Wrong alignment on TedStructureBase_ReceiveHandleConstructionVisuals");
static_assert(sizeof(TedStructureBase_ReceiveHandleConstructionVisuals) == 0x000001, "Wrong size on TedStructureBase_ReceiveHandleConstructionVisuals");
static_assert(offsetof(TedStructureBase_ReceiveHandleConstructionVisuals, bInConstructing) == 0x000000, "Member 'TedStructureBase_ReceiveHandleConstructionVisuals::bInConstructing' has a wrong offset!");

// Function Tempest.TedStructureBase.ReceiveHandlePowerStateVisuals
// 0x0003 (0x0003 - 0x0000)
struct TedStructureBase_ReceiveHandlePowerStateVisuals final
{
public:
	bool                                          bBlackedOut;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUserPowered;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSufficientPower;                                  // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_ReceiveHandlePowerStateVisuals) == 0x000001, "Wrong alignment on TedStructureBase_ReceiveHandlePowerStateVisuals");
static_assert(sizeof(TedStructureBase_ReceiveHandlePowerStateVisuals) == 0x000003, "Wrong size on TedStructureBase_ReceiveHandlePowerStateVisuals");
static_assert(offsetof(TedStructureBase_ReceiveHandlePowerStateVisuals, bBlackedOut) == 0x000000, "Member 'TedStructureBase_ReceiveHandlePowerStateVisuals::bBlackedOut' has a wrong offset!");
static_assert(offsetof(TedStructureBase_ReceiveHandlePowerStateVisuals, bUserPowered) == 0x000001, "Member 'TedStructureBase_ReceiveHandlePowerStateVisuals::bUserPowered' has a wrong offset!");
static_assert(offsetof(TedStructureBase_ReceiveHandlePowerStateVisuals, bSufficientPower) == 0x000002, "Member 'TedStructureBase_ReceiveHandlePowerStateVisuals::bSufficientPower' has a wrong offset!");

// Function Tempest.TedStructureBase.ReceiveOnCaptured
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_ReceiveOnCaptured final
{
public:
	ETedPlayerID                                  NewPlayerID;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_ReceiveOnCaptured) == 0x000001, "Wrong alignment on TedStructureBase_ReceiveOnCaptured");
static_assert(sizeof(TedStructureBase_ReceiveOnCaptured) == 0x000001, "Wrong size on TedStructureBase_ReceiveOnCaptured");
static_assert(offsetof(TedStructureBase_ReceiveOnCaptured, NewPlayerID) == 0x000000, "Member 'TedStructureBase_ReceiveOnCaptured::NewPlayerID' has a wrong offset!");

// Function Tempest.TedStructureBase.SetConstructionPlayRateOverride
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_SetConstructionPlayRateOverride final
{
public:
	bool                                          bSet;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_SetConstructionPlayRateOverride) == 0x000004, "Wrong alignment on TedStructureBase_SetConstructionPlayRateOverride");
static_assert(sizeof(TedStructureBase_SetConstructionPlayRateOverride) == 0x000008, "Wrong size on TedStructureBase_SetConstructionPlayRateOverride");
static_assert(offsetof(TedStructureBase_SetConstructionPlayRateOverride, bSet) == 0x000000, "Member 'TedStructureBase_SetConstructionPlayRateOverride::bSet' has a wrong offset!");
static_assert(offsetof(TedStructureBase_SetConstructionPlayRateOverride, InPlayRate) == 0x000004, "Member 'TedStructureBase_SetConstructionPlayRateOverride::InPlayRate' has a wrong offset!");

// Function Tempest.TedStructureBase.SetPowerStateFlag
// 0x0002 (0x0002 - 0x0000)
struct TedStructureBase_SetPowerStateFlag final
{
public:
	ETedPowerStateFlag                            InFlag;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnable;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_SetPowerStateFlag) == 0x000001, "Wrong alignment on TedStructureBase_SetPowerStateFlag");
static_assert(sizeof(TedStructureBase_SetPowerStateFlag) == 0x000002, "Wrong size on TedStructureBase_SetPowerStateFlag");
static_assert(offsetof(TedStructureBase_SetPowerStateFlag, InFlag) == 0x000000, "Member 'TedStructureBase_SetPowerStateFlag::InFlag' has a wrong offset!");
static_assert(offsetof(TedStructureBase_SetPowerStateFlag, bInEnable) == 0x000001, "Member 'TedStructureBase_SetPowerStateFlag::bInEnable' has a wrong offset!");

// Function Tempest.TedStructureBase.SetRepairing
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_SetRepairing final
{
public:
	bool                                          bInRepairing;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_SetRepairing) == 0x000001, "Wrong alignment on TedStructureBase_SetRepairing");
static_assert(sizeof(TedStructureBase_SetRepairing) == 0x000001, "Wrong size on TedStructureBase_SetRepairing");
static_assert(offsetof(TedStructureBase_SetRepairing, bInRepairing) == 0x000000, "Member 'TedStructureBase_SetRepairing::bInRepairing' has a wrong offset!");

// Function Tempest.TedStructureBase.SpawnUnit
// 0x0018 (0x0018 - 0x0000)
struct TedStructureBase_SpawnUnit final
{
public:
	TSubclassOf<class ATedUnitBase>               InUnitClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedStructureUnitSpawnMode                    InMode;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedUnitBase*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_SpawnUnit) == 0x000008, "Wrong alignment on TedStructureBase_SpawnUnit");
static_assert(sizeof(TedStructureBase_SpawnUnit) == 0x000018, "Wrong size on TedStructureBase_SpawnUnit");
static_assert(offsetof(TedStructureBase_SpawnUnit, InUnitClass) == 0x000000, "Member 'TedStructureBase_SpawnUnit::InUnitClass' has a wrong offset!");
static_assert(offsetof(TedStructureBase_SpawnUnit, InMode) == 0x000008, "Member 'TedStructureBase_SpawnUnit::InMode' has a wrong offset!");
static_assert(offsetof(TedStructureBase_SpawnUnit, ReturnValue) == 0x000010, "Member 'TedStructureBase_SpawnUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.CanSpawnUnit
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_CanSpawnUnit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_CanSpawnUnit) == 0x000001, "Wrong alignment on TedStructureBase_CanSpawnUnit");
static_assert(sizeof(TedStructureBase_CanSpawnUnit) == 0x000001, "Wrong size on TedStructureBase_CanSpawnUnit");
static_assert(offsetof(TedStructureBase_CanSpawnUnit, ReturnValue) == 0x000000, "Member 'TedStructureBase_CanSpawnUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetAlignment
// 0x0002 (0x0002 - 0x0000)
struct TedStructureBase_GetAlignment final
{
public:
	bool                                          bIgnoreOffset;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedStructureAlignment                        ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetAlignment) == 0x000001, "Wrong alignment on TedStructureBase_GetAlignment");
static_assert(sizeof(TedStructureBase_GetAlignment) == 0x000002, "Wrong size on TedStructureBase_GetAlignment");
static_assert(offsetof(TedStructureBase_GetAlignment, bIgnoreOffset) == 0x000000, "Member 'TedStructureBase_GetAlignment::bIgnoreOffset' has a wrong offset!");
static_assert(offsetof(TedStructureBase_GetAlignment, ReturnValue) == 0x000001, "Member 'TedStructureBase_GetAlignment::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetDefinitionAsset
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_GetDefinitionAsset final
{
public:
	const class UTedStructureDefinitionAsset*     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetDefinitionAsset) == 0x000008, "Wrong alignment on TedStructureBase_GetDefinitionAsset");
static_assert(sizeof(TedStructureBase_GetDefinitionAsset) == 0x000008, "Wrong size on TedStructureBase_GetDefinitionAsset");
static_assert(offsetof(TedStructureBase_GetDefinitionAsset, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetDefinitionAsset::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetNavModifier
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_GetNavModifier final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetNavModifier) == 0x000008, "Wrong alignment on TedStructureBase_GetNavModifier");
static_assert(sizeof(TedStructureBase_GetNavModifier) == 0x000008, "Wrong size on TedStructureBase_GetNavModifier");
static_assert(offsetof(TedStructureBase_GetNavModifier, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetNavModifier::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetPowerStatus
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_GetPowerStatus final
{
public:
	ETedPowerStatus                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetPowerStatus) == 0x000001, "Wrong alignment on TedStructureBase_GetPowerStatus");
static_assert(sizeof(TedStructureBase_GetPowerStatus) == 0x000001, "Wrong size on TedStructureBase_GetPowerStatus");
static_assert(offsetof(TedStructureBase_GetPowerStatus, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetPowerStatus::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureCaptureBeginTime
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureCaptureBeginTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureCaptureBeginTime) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureCaptureBeginTime");
static_assert(sizeof(TedStructureBase_GetStructureCaptureBeginTime) == 0x000004, "Wrong size on TedStructureBase_GetStructureCaptureBeginTime");
static_assert(offsetof(TedStructureBase_GetStructureCaptureBeginTime, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureCaptureBeginTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureCaptureProgress
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureCaptureProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureCaptureProgress) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureCaptureProgress");
static_assert(sizeof(TedStructureBase_GetStructureCaptureProgress) == 0x000004, "Wrong size on TedStructureBase_GetStructureCaptureProgress");
static_assert(offsetof(TedStructureBase_GetStructureCaptureProgress, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureCaptureProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureCaptureTime
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureCaptureTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureCaptureTime) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureCaptureTime");
static_assert(sizeof(TedStructureBase_GetStructureCaptureTime) == 0x000004, "Wrong size on TedStructureBase_GetStructureCaptureTime");
static_assert(offsetof(TedStructureBase_GetStructureCaptureTime, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureCaptureTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureGridSize
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_GetStructureGridSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureGridSize) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureGridSize");
static_assert(sizeof(TedStructureBase_GetStructureGridSize) == 0x000008, "Wrong size on TedStructureBase_GetStructureGridSize");
static_assert(offsetof(TedStructureBase_GetStructureGridSize, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureGridSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureGridSizeAligned
// 0x000C (0x000C - 0x0000)
struct TedStructureBase_GetStructureGridSizeAligned final
{
public:
	ETedStructureAlignment                        InAlignment;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureGridSizeAligned) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureGridSizeAligned");
static_assert(sizeof(TedStructureBase_GetStructureGridSizeAligned) == 0x00000C, "Wrong size on TedStructureBase_GetStructureGridSizeAligned");
static_assert(offsetof(TedStructureBase_GetStructureGridSizeAligned, InAlignment) == 0x000000, "Member 'TedStructureBase_GetStructureGridSizeAligned::InAlignment' has a wrong offset!");
static_assert(offsetof(TedStructureBase_GetStructureGridSizeAligned, ReturnValue) == 0x000004, "Member 'TedStructureBase_GetStructureGridSizeAligned::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureSellBeginTime
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureSellBeginTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureSellBeginTime) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureSellBeginTime");
static_assert(sizeof(TedStructureBase_GetStructureSellBeginTime) == 0x000004, "Wrong size on TedStructureBase_GetStructureSellBeginTime");
static_assert(offsetof(TedStructureBase_GetStructureSellBeginTime, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureSellBeginTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureSellProgress
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureSellProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureSellProgress) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureSellProgress");
static_assert(sizeof(TedStructureBase_GetStructureSellProgress) == 0x000004, "Wrong size on TedStructureBase_GetStructureSellProgress");
static_assert(offsetof(TedStructureBase_GetStructureSellProgress, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureSellProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetStructureSellTime
// 0x0004 (0x0004 - 0x0000)
struct TedStructureBase_GetStructureSellTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetStructureSellTime) == 0x000004, "Wrong alignment on TedStructureBase_GetStructureSellTime");
static_assert(sizeof(TedStructureBase_GetStructureSellTime) == 0x000004, "Wrong size on TedStructureBase_GetStructureSellTime");
static_assert(offsetof(TedStructureBase_GetStructureSellTime, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetStructureSellTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.GetTempStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct TedStructureBase_GetTempStaticMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_GetTempStaticMesh) == 0x000008, "Wrong alignment on TedStructureBase_GetTempStaticMesh");
static_assert(sizeof(TedStructureBase_GetTempStaticMesh) == 0x000008, "Wrong size on TedStructureBase_GetTempStaticMesh");
static_assert(offsetof(TedStructureBase_GetTempStaticMesh, ReturnValue) == 0x000000, "Member 'TedStructureBase_GetTempStaticMesh::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.HasPowerStateFlag
// 0x0002 (0x0002 - 0x0000)
struct TedStructureBase_HasPowerStateFlag final
{
public:
	ETedPowerStateFlag                            InFlag;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_HasPowerStateFlag) == 0x000001, "Wrong alignment on TedStructureBase_HasPowerStateFlag");
static_assert(sizeof(TedStructureBase_HasPowerStateFlag) == 0x000002, "Wrong size on TedStructureBase_HasPowerStateFlag");
static_assert(offsetof(TedStructureBase_HasPowerStateFlag, InFlag) == 0x000000, "Member 'TedStructureBase_HasPowerStateFlag::InFlag' has a wrong offset!");
static_assert(offsetof(TedStructureBase_HasPowerStateFlag, ReturnValue) == 0x000001, "Member 'TedStructureBase_HasPowerStateFlag::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.IsConstructing
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_IsConstructing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_IsConstructing) == 0x000001, "Wrong alignment on TedStructureBase_IsConstructing");
static_assert(sizeof(TedStructureBase_IsConstructing) == 0x000001, "Wrong size on TedStructureBase_IsConstructing");
static_assert(offsetof(TedStructureBase_IsConstructing, ReturnValue) == 0x000000, "Member 'TedStructureBase_IsConstructing::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.IsRepairing
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_IsRepairing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_IsRepairing) == 0x000001, "Wrong alignment on TedStructureBase_IsRepairing");
static_assert(sizeof(TedStructureBase_IsRepairing) == 0x000001, "Wrong size on TedStructureBase_IsRepairing");
static_assert(offsetof(TedStructureBase_IsRepairing, ReturnValue) == 0x000000, "Member 'TedStructureBase_IsRepairing::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.IsStructureBeingCaptured
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_IsStructureBeingCaptured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_IsStructureBeingCaptured) == 0x000001, "Wrong alignment on TedStructureBase_IsStructureBeingCaptured");
static_assert(sizeof(TedStructureBase_IsStructureBeingCaptured) == 0x000001, "Wrong size on TedStructureBase_IsStructureBeingCaptured");
static_assert(offsetof(TedStructureBase_IsStructureBeingCaptured, ReturnValue) == 0x000000, "Member 'TedStructureBase_IsStructureBeingCaptured::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureBase.IsStructureBeingSold
// 0x0001 (0x0001 - 0x0000)
struct TedStructureBase_IsStructureBeingSold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureBase_IsStructureBeingSold) == 0x000001, "Wrong alignment on TedStructureBase_IsStructureBeingSold");
static_assert(sizeof(TedStructureBase_IsStructureBeingSold) == 0x000001, "Wrong size on TedStructureBase_IsStructureBeingSold");
static_assert(offsetof(TedStructureBase_IsStructureBeingSold, ReturnValue) == 0x000000, "Member 'TedStructureBase_IsStructureBeingSold::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureHarvester.OnHarvestingSpeedChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TedStructureHarvester_OnHarvestingSpeedChangedCosmetic final
{
public:
	EStructureHarvesterStage                      NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureHarvester_OnHarvestingSpeedChangedCosmetic) == 0x000001, "Wrong alignment on TedStructureHarvester_OnHarvestingSpeedChangedCosmetic");
static_assert(sizeof(TedStructureHarvester_OnHarvestingSpeedChangedCosmetic) == 0x000001, "Wrong size on TedStructureHarvester_OnHarvestingSpeedChangedCosmetic");
static_assert(offsetof(TedStructureHarvester_OnHarvestingSpeedChangedCosmetic, NewState) == 0x000000, "Member 'TedStructureHarvester_OnHarvestingSpeedChangedCosmetic::NewState' has a wrong offset!");

// Function Tempest.TedStructureHarvester.GetCurrentHarvestingSpeed
// 0x0001 (0x0001 - 0x0000)
struct TedStructureHarvester_GetCurrentHarvestingSpeed final
{
public:
	EStructureHarvesterStage                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureHarvester_GetCurrentHarvestingSpeed) == 0x000001, "Wrong alignment on TedStructureHarvester_GetCurrentHarvestingSpeed");
static_assert(sizeof(TedStructureHarvester_GetCurrentHarvestingSpeed) == 0x000001, "Wrong size on TedStructureHarvester_GetCurrentHarvestingSpeed");
static_assert(offsetof(TedStructureHarvester_GetCurrentHarvestingSpeed, ReturnValue) == 0x000000, "Member 'TedStructureHarvester_GetCurrentHarvestingSpeed::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureRefinery_DYN.GetPawnContainerComponent
// 0x0008 (0x0008 - 0x0000)
struct TedStructureRefinery_DYN_GetPawnContainerComponent final
{
public:
	class UTedPawnContainerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureRefinery_DYN_GetPawnContainerComponent) == 0x000008, "Wrong alignment on TedStructureRefinery_DYN_GetPawnContainerComponent");
static_assert(sizeof(TedStructureRefinery_DYN_GetPawnContainerComponent) == 0x000008, "Wrong size on TedStructureRefinery_DYN_GetPawnContainerComponent");
static_assert(offsetof(TedStructureRefinery_DYN_GetPawnContainerComponent, ReturnValue) == 0x000000, "Member 'TedStructureRefinery_DYN_GetPawnContainerComponent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureRefinery_DYN.GetRefineryExitLocation
// 0x0010 (0x0010 - 0x0000)
struct TedStructureRefinery_DYN_GetRefineryExitLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureRefinery_DYN_GetRefineryExitLocation) == 0x000008, "Wrong alignment on TedStructureRefinery_DYN_GetRefineryExitLocation");
static_assert(sizeof(TedStructureRefinery_DYN_GetRefineryExitLocation) == 0x000010, "Wrong size on TedStructureRefinery_DYN_GetRefineryExitLocation");
static_assert(offsetof(TedStructureRefinery_DYN_GetRefineryExitLocation, ReturnValue) == 0x000000, "Member 'TedStructureRefinery_DYN_GetRefineryExitLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureRefinery_DYN.IsRecallActive
// 0x0001 (0x0001 - 0x0000)
struct TedStructureRefinery_DYN_IsRecallActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureRefinery_DYN_IsRecallActive) == 0x000001, "Wrong alignment on TedStructureRefinery_DYN_IsRecallActive");
static_assert(sizeof(TedStructureRefinery_DYN_IsRecallActive) == 0x000001, "Wrong size on TedStructureRefinery_DYN_IsRecallActive");
static_assert(offsetof(TedStructureRefinery_DYN_IsRecallActive, ReturnValue) == 0x000000, "Member 'TedStructureRefinery_DYN_IsRecallActive::ReturnValue' has a wrong offset!");

// Function Tempest.AIManager_Utility.GetUtilityAIBrain
// 0x0008 (0x0008 - 0x0000)
struct AIManager_Utility_GetUtilityAIBrain final
{
public:
	class UUtilityAIBrain*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIManager_Utility_GetUtilityAIBrain) == 0x000008, "Wrong alignment on AIManager_Utility_GetUtilityAIBrain");
static_assert(sizeof(AIManager_Utility_GetUtilityAIBrain) == 0x000008, "Wrong size on AIManager_Utility_GetUtilityAIBrain");
static_assert(offsetof(AIManager_Utility_GetUtilityAIBrain, ReturnValue) == 0x000000, "Member 'AIManager_Utility_GetUtilityAIBrain::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotFunctionsLibrary.AddHotspotAtLocation
// 0x0030 (0x0030 - 0x0000)
struct TedHotspotFunctionsLibrary_AddHotspotAtLocation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedHotspotConfig*                Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedHotspotHandle                      ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHotspotFunctionsLibrary_AddHotspotAtLocation) == 0x000008, "Wrong alignment on TedHotspotFunctionsLibrary_AddHotspotAtLocation");
static_assert(sizeof(TedHotspotFunctionsLibrary_AddHotspotAtLocation) == 0x000030, "Wrong size on TedHotspotFunctionsLibrary_AddHotspotAtLocation");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAtLocation, WorldContext) == 0x000000, "Member 'TedHotspotFunctionsLibrary_AddHotspotAtLocation::WorldContext' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAtLocation, Config) == 0x000008, "Member 'TedHotspotFunctionsLibrary_AddHotspotAtLocation::Config' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAtLocation, Location) == 0x000010, "Member 'TedHotspotFunctionsLibrary_AddHotspotAtLocation::Location' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAtLocation, ReturnValue) == 0x000028, "Member 'TedHotspotFunctionsLibrary_AddHotspotAtLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotFunctionsLibrary.AddHotspotAttached
// 0x0020 (0x0020 - 0x0000)
struct TedHotspotFunctionsLibrary_AddHotspotAttached final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedHotspotConfig*                Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedHotspotHandle                      ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHotspotFunctionsLibrary_AddHotspotAttached) == 0x000008, "Wrong alignment on TedHotspotFunctionsLibrary_AddHotspotAttached");
static_assert(sizeof(TedHotspotFunctionsLibrary_AddHotspotAttached) == 0x000020, "Wrong size on TedHotspotFunctionsLibrary_AddHotspotAttached");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAttached, WorldContext) == 0x000000, "Member 'TedHotspotFunctionsLibrary_AddHotspotAttached::WorldContext' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAttached, Config) == 0x000008, "Member 'TedHotspotFunctionsLibrary_AddHotspotAttached::Config' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAttached, Target) == 0x000010, "Member 'TedHotspotFunctionsLibrary_AddHotspotAttached::Target' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_AddHotspotAttached, ReturnValue) == 0x000018, "Member 'TedHotspotFunctionsLibrary_AddHotspotAttached::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotFunctionsLibrary.RemoveHotspotByHandle
// 0x0010 (0x0010 - 0x0000)
struct TedHotspotFunctionsLibrary_RemoveHotspotByHandle final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedHotspotHandle                      Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHotspotFunctionsLibrary_RemoveHotspotByHandle) == 0x000008, "Wrong alignment on TedHotspotFunctionsLibrary_RemoveHotspotByHandle");
static_assert(sizeof(TedHotspotFunctionsLibrary_RemoveHotspotByHandle) == 0x000010, "Wrong size on TedHotspotFunctionsLibrary_RemoveHotspotByHandle");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByHandle, WorldContext) == 0x000000, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByHandle::WorldContext' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByHandle, Handle) == 0x000008, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByHandle::Handle' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByHandle, ReturnValue) == 0x00000C, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByHandle::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotFunctionsLibrary.RemoveHotspotByTarget
// 0x0018 (0x0018 - 0x0000)
struct TedHotspotFunctionsLibrary_RemoveHotspotByTarget final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHotspotFunctionsLibrary_RemoveHotspotByTarget) == 0x000008, "Wrong alignment on TedHotspotFunctionsLibrary_RemoveHotspotByTarget");
static_assert(sizeof(TedHotspotFunctionsLibrary_RemoveHotspotByTarget) == 0x000018, "Wrong size on TedHotspotFunctionsLibrary_RemoveHotspotByTarget");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByTarget, WorldContext) == 0x000000, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByTarget::WorldContext' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByTarget, Target) == 0x000008, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByTarget::Target' has a wrong offset!");
static_assert(offsetof(TedHotspotFunctionsLibrary_RemoveHotspotByTarget, ReturnValue) == 0x000010, "Member 'TedHotspotFunctionsLibrary_RemoveHotspotByTarget::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.AddPawnsToSquad
// 0x0010 (0x0010 - 0x0000)
struct AIMission_AddPawnsToSquad final
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_AddPawnsToSquad) == 0x000008, "Wrong alignment on AIMission_AddPawnsToSquad");
static_assert(sizeof(AIMission_AddPawnsToSquad) == 0x000010, "Wrong size on AIMission_AddPawnsToSquad");
static_assert(offsetof(AIMission_AddPawnsToSquad, Pawns) == 0x000000, "Member 'AIMission_AddPawnsToSquad::Pawns' has a wrong offset!");

// Function Tempest.AIMission.AddPawnToSquad
// 0x0008 (0x0008 - 0x0000)
struct AIMission_AddPawnToSquad final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_AddPawnToSquad) == 0x000008, "Wrong alignment on AIMission_AddPawnToSquad");
static_assert(sizeof(AIMission_AddPawnToSquad) == 0x000008, "Wrong size on AIMission_AddPawnToSquad");
static_assert(offsetof(AIMission_AddPawnToSquad, Pawn) == 0x000000, "Member 'AIMission_AddPawnToSquad::Pawn' has a wrong offset!");

// Function Tempest.AIMission.RemovePawnFromSquad
// 0x0008 (0x0008 - 0x0000)
struct AIMission_RemovePawnFromSquad final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RemovePawnFromSquad) == 0x000008, "Wrong alignment on AIMission_RemovePawnFromSquad");
static_assert(sizeof(AIMission_RemovePawnFromSquad) == 0x000008, "Wrong size on AIMission_RemovePawnFromSquad");
static_assert(offsetof(AIMission_RemovePawnFromSquad, Pawn) == 0x000000, "Member 'AIMission_RemovePawnFromSquad::Pawn' has a wrong offset!");

// Function Tempest.AIMission.RemovePawnsFromSquad
// 0x0010 (0x0010 - 0x0000)
struct AIMission_RemovePawnsFromSquad final
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RemovePawnsFromSquad) == 0x000008, "Wrong alignment on AIMission_RemovePawnsFromSquad");
static_assert(sizeof(AIMission_RemovePawnsFromSquad) == 0x000010, "Wrong size on AIMission_RemovePawnsFromSquad");
static_assert(offsetof(AIMission_RemovePawnsFromSquad, Pawns) == 0x000000, "Member 'AIMission_RemovePawnsFromSquad::Pawns' has a wrong offset!");

// Function Tempest.AIMission.SetActive
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetActive final
{
public:
	bool                                          bActive_0;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetActive) == 0x000001, "Wrong alignment on AIMission_SetActive");
static_assert(sizeof(AIMission_SetActive) == 0x000001, "Wrong size on AIMission_SetActive");
static_assert(offsetof(AIMission_SetActive, bActive_0) == 0x000000, "Member 'AIMission_SetActive::bActive_0' has a wrong offset!");

// Function Tempest.AIMission.SetAlwaysRerunSquadBuildOrderOnRestart
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetAlwaysRerunSquadBuildOrderOnRestart final
{
public:
	bool                                          bAlwaysRerunSquadBuildOrderOnRestart_0;            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetAlwaysRerunSquadBuildOrderOnRestart) == 0x000001, "Wrong alignment on AIMission_SetAlwaysRerunSquadBuildOrderOnRestart");
static_assert(sizeof(AIMission_SetAlwaysRerunSquadBuildOrderOnRestart) == 0x000001, "Wrong size on AIMission_SetAlwaysRerunSquadBuildOrderOnRestart");
static_assert(offsetof(AIMission_SetAlwaysRerunSquadBuildOrderOnRestart, bAlwaysRerunSquadBuildOrderOnRestart_0) == 0x000000, "Member 'AIMission_SetAlwaysRerunSquadBuildOrderOnRestart::bAlwaysRerunSquadBuildOrderOnRestart_0' has a wrong offset!");

// Function Tempest.AIMission.SetCanStealSquadMembers
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetCanStealSquadMembers final
{
public:
	bool                                          bCanStealSquadMembers_0;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetCanStealSquadMembers) == 0x000001, "Wrong alignment on AIMission_SetCanStealSquadMembers");
static_assert(sizeof(AIMission_SetCanStealSquadMembers) == 0x000001, "Wrong size on AIMission_SetCanStealSquadMembers");
static_assert(offsetof(AIMission_SetCanStealSquadMembers, bCanStealSquadMembers_0) == 0x000000, "Member 'AIMission_SetCanStealSquadMembers::bCanStealSquadMembers_0' has a wrong offset!");

// Function Tempest.AIMission.SetDiedSquadPawnProductionSettings
// 0x0048 (0x0048 - 0x0000)
struct AIMission_SetDiedSquadPawnProductionSettings final
{
public:
	struct FAIMissionDiedSquadPawnProductionSettings DiedSquadPawnProductionSettings_0;              // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetDiedSquadPawnProductionSettings) == 0x000008, "Wrong alignment on AIMission_SetDiedSquadPawnProductionSettings");
static_assert(sizeof(AIMission_SetDiedSquadPawnProductionSettings) == 0x000048, "Wrong size on AIMission_SetDiedSquadPawnProductionSettings");
static_assert(offsetof(AIMission_SetDiedSquadPawnProductionSettings, DiedSquadPawnProductionSettings_0) == 0x000000, "Member 'AIMission_SetDiedSquadPawnProductionSettings::DiedSquadPawnProductionSettings_0' has a wrong offset!");

// Function Tempest.AIMission.SetFriendlyName
// 0x0010 (0x0010 - 0x0000)
struct AIMission_SetFriendlyName final
{
public:
	class FString                                 FriendlyName_0;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetFriendlyName) == 0x000008, "Wrong alignment on AIMission_SetFriendlyName");
static_assert(sizeof(AIMission_SetFriendlyName) == 0x000010, "Wrong size on AIMission_SetFriendlyName");
static_assert(offsetof(AIMission_SetFriendlyName, FriendlyName_0) == 0x000000, "Member 'AIMission_SetFriendlyName::FriendlyName_0' has a wrong offset!");

// Function Tempest.AIMission.SetMissionPriority
// 0x0004 (0x0004 - 0x0000)
struct AIMission_SetMissionPriority final
{
public:
	int32                                         MissionPriority_0;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetMissionPriority) == 0x000004, "Wrong alignment on AIMission_SetMissionPriority");
static_assert(sizeof(AIMission_SetMissionPriority) == 0x000004, "Wrong size on AIMission_SetMissionPriority");
static_assert(offsetof(AIMission_SetMissionPriority, MissionPriority_0) == 0x000000, "Member 'AIMission_SetMissionPriority::MissionPriority_0' has a wrong offset!");

// Function Tempest.AIMission.SetMissionTags
// 0x0020 (0x0020 - 0x0000)
struct AIMission_SetMissionTags final
{
public:
	struct FGameplayTagContainer                  MissionsTags;                                      // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetMissionTags) == 0x000008, "Wrong alignment on AIMission_SetMissionTags");
static_assert(sizeof(AIMission_SetMissionTags) == 0x000020, "Wrong size on AIMission_SetMissionTags");
static_assert(offsetof(AIMission_SetMissionTags, MissionsTags) == 0x000000, "Member 'AIMission_SetMissionTags::MissionsTags' has a wrong offset!");

// Function Tempest.AIMission.SetRemoveOnFinish
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetRemoveOnFinish final
{
public:
	bool                                          bRemoveOnFinish_0;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetRemoveOnFinish) == 0x000001, "Wrong alignment on AIMission_SetRemoveOnFinish");
static_assert(sizeof(AIMission_SetRemoveOnFinish) == 0x000001, "Wrong size on AIMission_SetRemoveOnFinish");
static_assert(offsetof(AIMission_SetRemoveOnFinish, bRemoveOnFinish_0) == 0x000000, "Member 'AIMission_SetRemoveOnFinish::bRemoveOnFinish_0' has a wrong offset!");

// Function Tempest.AIMission.SetRequestSquadPawnProductionWhenDied
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetRequestSquadPawnProductionWhenDied final
{
public:
	bool                                          bRequestSquadPawnProductionWhenDied_0;             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetRequestSquadPawnProductionWhenDied) == 0x000001, "Wrong alignment on AIMission_SetRequestSquadPawnProductionWhenDied");
static_assert(sizeof(AIMission_SetRequestSquadPawnProductionWhenDied) == 0x000001, "Wrong size on AIMission_SetRequestSquadPawnProductionWhenDied");
static_assert(offsetof(AIMission_SetRequestSquadPawnProductionWhenDied, bRequestSquadPawnProductionWhenDied_0) == 0x000000, "Member 'AIMission_SetRequestSquadPawnProductionWhenDied::bRequestSquadPawnProductionWhenDied_0' has a wrong offset!");

// Function Tempest.AIMission.SetRequiresFullSquad
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetRequiresFullSquad final
{
public:
	bool                                          bRequiresFullSquad_0;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetRequiresFullSquad) == 0x000001, "Wrong alignment on AIMission_SetRequiresFullSquad");
static_assert(sizeof(AIMission_SetRequiresFullSquad) == 0x000001, "Wrong size on AIMission_SetRequiresFullSquad");
static_assert(offsetof(AIMission_SetRequiresFullSquad, bRequiresFullSquad_0) == 0x000000, "Member 'AIMission_SetRequiresFullSquad::bRequiresFullSquad_0' has a wrong offset!");

// Function Tempest.AIMission.SetSquadBuildOrder
// 0x0008 (0x0008 - 0x0000)
struct AIMission_SetSquadBuildOrder final
{
public:
	const class UAIDefinition_BuildOrder*         SquadBuildOrder_0;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetSquadBuildOrder) == 0x000008, "Wrong alignment on AIMission_SetSquadBuildOrder");
static_assert(sizeof(AIMission_SetSquadBuildOrder) == 0x000008, "Wrong size on AIMission_SetSquadBuildOrder");
static_assert(offsetof(AIMission_SetSquadBuildOrder, SquadBuildOrder_0) == 0x000000, "Member 'AIMission_SetSquadBuildOrder::SquadBuildOrder_0' has a wrong offset!");

// Function Tempest.AIMission.SetSquadLocked
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetSquadLocked final
{
public:
	bool                                          bLockSquad_0;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetSquadLocked) == 0x000001, "Wrong alignment on AIMission_SetSquadLocked");
static_assert(sizeof(AIMission_SetSquadLocked) == 0x000001, "Wrong size on AIMission_SetSquadLocked");
static_assert(offsetof(AIMission_SetSquadLocked, bLockSquad_0) == 0x000000, "Member 'AIMission_SetSquadLocked::bLockSquad_0' has a wrong offset!");

// Function Tempest.AIMission.SetSquadProductionLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMission_SetSquadProductionLocation final
{
public:
	struct FAITargetLocation                      SquadProductionLocation_0;                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetSquadProductionLocation) == 0x000008, "Wrong alignment on AIMission_SetSquadProductionLocation");
static_assert(sizeof(AIMission_SetSquadProductionLocation) == 0x000018, "Wrong size on AIMission_SetSquadProductionLocation");
static_assert(offsetof(AIMission_SetSquadProductionLocation, SquadProductionLocation_0) == 0x000000, "Member 'AIMission_SetSquadProductionLocation::SquadProductionLocation_0' has a wrong offset!");

// Function Tempest.AIMission.SetSquadRallyPoint
// 0x0018 (0x0018 - 0x0000)
struct AIMission_SetSquadRallyPoint final
{
public:
	struct FAITargetLocation                      SquadRallyPoint_0;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetSquadRallyPoint) == 0x000008, "Wrong alignment on AIMission_SetSquadRallyPoint");
static_assert(sizeof(AIMission_SetSquadRallyPoint) == 0x000018, "Wrong size on AIMission_SetSquadRallyPoint");
static_assert(offsetof(AIMission_SetSquadRallyPoint, SquadRallyPoint_0) == 0x000000, "Member 'AIMission_SetSquadRallyPoint::SquadRallyPoint_0' has a wrong offset!");

// Function Tempest.AIMission.SetStartWhenReady
// 0x0001 (0x0001 - 0x0000)
struct AIMission_SetStartWhenReady final
{
public:
	bool                                          bStartWhenReady_0;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_SetStartWhenReady) == 0x000001, "Wrong alignment on AIMission_SetStartWhenReady");
static_assert(sizeof(AIMission_SetStartWhenReady) == 0x000001, "Wrong size on AIMission_SetStartWhenReady");
static_assert(offsetof(AIMission_SetStartWhenReady, bStartWhenReady_0) == 0x000000, "Member 'AIMission_SetStartWhenReady::bStartWhenReady_0' has a wrong offset!");

// Function Tempest.AIMission.CanStealSquadMembers
// 0x0001 (0x0001 - 0x0000)
struct AIMission_CanStealSquadMembers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_CanStealSquadMembers) == 0x000001, "Wrong alignment on AIMission_CanStealSquadMembers");
static_assert(sizeof(AIMission_CanStealSquadMembers) == 0x000001, "Wrong size on AIMission_CanStealSquadMembers");
static_assert(offsetof(AIMission_CanStealSquadMembers, ReturnValue) == 0x000000, "Member 'AIMission_CanStealSquadMembers::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetDiedSquadPawnProductionSettings
// 0x0048 (0x0048 - 0x0000)
struct AIMission_GetDiedSquadPawnProductionSettings final
{
public:
	struct FAIMissionDiedSquadPawnProductionSettings ReturnValue;                                    // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetDiedSquadPawnProductionSettings) == 0x000008, "Wrong alignment on AIMission_GetDiedSquadPawnProductionSettings");
static_assert(sizeof(AIMission_GetDiedSquadPawnProductionSettings) == 0x000048, "Wrong size on AIMission_GetDiedSquadPawnProductionSettings");
static_assert(offsetof(AIMission_GetDiedSquadPawnProductionSettings, ReturnValue) == 0x000000, "Member 'AIMission_GetDiedSquadPawnProductionSettings::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct AIMission_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetDisplayName) == 0x000008, "Wrong alignment on AIMission_GetDisplayName");
static_assert(sizeof(AIMission_GetDisplayName) == 0x000010, "Wrong size on AIMission_GetDisplayName");
static_assert(offsetof(AIMission_GetDisplayName, ReturnValue) == 0x000000, "Member 'AIMission_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetFriendlyName
// 0x0010 (0x0010 - 0x0000)
struct AIMission_GetFriendlyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetFriendlyName) == 0x000008, "Wrong alignment on AIMission_GetFriendlyName");
static_assert(sizeof(AIMission_GetFriendlyName) == 0x000010, "Wrong size on AIMission_GetFriendlyName");
static_assert(offsetof(AIMission_GetFriendlyName, ReturnValue) == 0x000000, "Member 'AIMission_GetFriendlyName::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetMissionHandle
// 0x0004 (0x0004 - 0x0000)
struct AIMission_GetMissionHandle final
{
public:
	struct FAIMissionHandle                       ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetMissionHandle) == 0x000004, "Wrong alignment on AIMission_GetMissionHandle");
static_assert(sizeof(AIMission_GetMissionHandle) == 0x000004, "Wrong size on AIMission_GetMissionHandle");
static_assert(offsetof(AIMission_GetMissionHandle, ReturnValue) == 0x000000, "Member 'AIMission_GetMissionHandle::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetMissionPriority
// 0x0004 (0x0004 - 0x0000)
struct AIMission_GetMissionPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetMissionPriority) == 0x000004, "Wrong alignment on AIMission_GetMissionPriority");
static_assert(sizeof(AIMission_GetMissionPriority) == 0x000004, "Wrong size on AIMission_GetMissionPriority");
static_assert(offsetof(AIMission_GetMissionPriority, ReturnValue) == 0x000000, "Member 'AIMission_GetMissionPriority::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetMissionState
// 0x0001 (0x0001 - 0x0000)
struct AIMission_GetMissionState final
{
public:
	EAIMissionState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetMissionState) == 0x000001, "Wrong alignment on AIMission_GetMissionState");
static_assert(sizeof(AIMission_GetMissionState) == 0x000001, "Wrong size on AIMission_GetMissionState");
static_assert(offsetof(AIMission_GetMissionState, ReturnValue) == 0x000000, "Member 'AIMission_GetMissionState::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetMissionTags
// 0x0020 (0x0020 - 0x0000)
struct AIMission_GetMissionTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetMissionTags) == 0x000008, "Wrong alignment on AIMission_GetMissionTags");
static_assert(sizeof(AIMission_GetMissionTags) == 0x000020, "Wrong size on AIMission_GetMissionTags");
static_assert(offsetof(AIMission_GetMissionTags, ReturnValue) == 0x000000, "Member 'AIMission_GetMissionTags::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetSquadBuildOrder
// 0x0008 (0x0008 - 0x0000)
struct AIMission_GetSquadBuildOrder final
{
public:
	const class UAIDefinition_BuildOrder*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetSquadBuildOrder) == 0x000008, "Wrong alignment on AIMission_GetSquadBuildOrder");
static_assert(sizeof(AIMission_GetSquadBuildOrder) == 0x000008, "Wrong size on AIMission_GetSquadBuildOrder");
static_assert(offsetof(AIMission_GetSquadBuildOrder, ReturnValue) == 0x000000, "Member 'AIMission_GetSquadBuildOrder::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetSquadOrder
// 0x0058 (0x0058 - 0x0000)
struct AIMission_GetSquadOrder final
{
public:
	struct FAISquadOrder                          ReturnValue;                                       // 0x0000(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetSquadOrder) == 0x000008, "Wrong alignment on AIMission_GetSquadOrder");
static_assert(sizeof(AIMission_GetSquadOrder) == 0x000058, "Wrong size on AIMission_GetSquadOrder");
static_assert(offsetof(AIMission_GetSquadOrder, ReturnValue) == 0x000000, "Member 'AIMission_GetSquadOrder::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetSquadProductionLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMission_GetSquadProductionLocation final
{
public:
	struct FAITargetLocation                      ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetSquadProductionLocation) == 0x000008, "Wrong alignment on AIMission_GetSquadProductionLocation");
static_assert(sizeof(AIMission_GetSquadProductionLocation) == 0x000018, "Wrong size on AIMission_GetSquadProductionLocation");
static_assert(offsetof(AIMission_GetSquadProductionLocation, ReturnValue) == 0x000000, "Member 'AIMission_GetSquadProductionLocation::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.GetSquadRallyPoint
// 0x0018 (0x0018 - 0x0000)
struct AIMission_GetSquadRallyPoint final
{
public:
	struct FAITargetLocation                      ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_GetSquadRallyPoint) == 0x000008, "Wrong alignment on AIMission_GetSquadRallyPoint");
static_assert(sizeof(AIMission_GetSquadRallyPoint) == 0x000018, "Wrong size on AIMission_GetSquadRallyPoint");
static_assert(offsetof(AIMission_GetSquadRallyPoint, ReturnValue) == 0x000000, "Member 'AIMission_GetSquadRallyPoint::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.HasActiveSquadProduction
// 0x0001 (0x0001 - 0x0000)
struct AIMission_HasActiveSquadProduction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_HasActiveSquadProduction) == 0x000001, "Wrong alignment on AIMission_HasActiveSquadProduction");
static_assert(sizeof(AIMission_HasActiveSquadProduction) == 0x000001, "Wrong size on AIMission_HasActiveSquadProduction");
static_assert(offsetof(AIMission_HasActiveSquadProduction, ReturnValue) == 0x000000, "Member 'AIMission_HasActiveSquadProduction::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.HasPawnInSquad
// 0x0010 (0x0010 - 0x0000)
struct AIMission_HasPawnInSquad final
{
public:
	const class ATedPawn*                         Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_HasPawnInSquad) == 0x000008, "Wrong alignment on AIMission_HasPawnInSquad");
static_assert(sizeof(AIMission_HasPawnInSquad) == 0x000010, "Wrong size on AIMission_HasPawnInSquad");
static_assert(offsetof(AIMission_HasPawnInSquad, Pawn) == 0x000000, "Member 'AIMission_HasPawnInSquad::Pawn' has a wrong offset!");
static_assert(offsetof(AIMission_HasPawnInSquad, ReturnValue) == 0x000008, "Member 'AIMission_HasPawnInSquad::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.HasSquad
// 0x0001 (0x0001 - 0x0000)
struct AIMission_HasSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_HasSquad) == 0x000001, "Wrong alignment on AIMission_HasSquad");
static_assert(sizeof(AIMission_HasSquad) == 0x000001, "Wrong size on AIMission_HasSquad");
static_assert(offsetof(AIMission_HasSquad, ReturnValue) == 0x000000, "Member 'AIMission_HasSquad::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.HasSquadRallyPoint
// 0x0001 (0x0001 - 0x0000)
struct AIMission_HasSquadRallyPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_HasSquadRallyPoint) == 0x000001, "Wrong alignment on AIMission_HasSquadRallyPoint");
static_assert(sizeof(AIMission_HasSquadRallyPoint) == 0x000001, "Wrong size on AIMission_HasSquadRallyPoint");
static_assert(offsetof(AIMission_HasSquadRallyPoint, ReturnValue) == 0x000000, "Member 'AIMission_HasSquadRallyPoint::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.IsActive
// 0x0001 (0x0001 - 0x0000)
struct AIMission_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_IsActive) == 0x000001, "Wrong alignment on AIMission_IsActive");
static_assert(sizeof(AIMission_IsActive) == 0x000001, "Wrong size on AIMission_IsActive");
static_assert(offsetof(AIMission_IsActive, ReturnValue) == 0x000000, "Member 'AIMission_IsActive::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.IsSquadAlive
// 0x0001 (0x0001 - 0x0000)
struct AIMission_IsSquadAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_IsSquadAlive) == 0x000001, "Wrong alignment on AIMission_IsSquadAlive");
static_assert(sizeof(AIMission_IsSquadAlive) == 0x000001, "Wrong size on AIMission_IsSquadAlive");
static_assert(offsetof(AIMission_IsSquadAlive, ReturnValue) == 0x000000, "Member 'AIMission_IsSquadAlive::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.IsSquadLocked
// 0x0001 (0x0001 - 0x0000)
struct AIMission_IsSquadLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_IsSquadLocked) == 0x000001, "Wrong alignment on AIMission_IsSquadLocked");
static_assert(sizeof(AIMission_IsSquadLocked) == 0x000001, "Wrong size on AIMission_IsSquadLocked");
static_assert(offsetof(AIMission_IsSquadLocked, ReturnValue) == 0x000000, "Member 'AIMission_IsSquadLocked::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.IsSquadReady
// 0x0001 (0x0001 - 0x0000)
struct AIMission_IsSquadReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_IsSquadReady) == 0x000001, "Wrong alignment on AIMission_IsSquadReady");
static_assert(sizeof(AIMission_IsSquadReady) == 0x000001, "Wrong size on AIMission_IsSquadReady");
static_assert(offsetof(AIMission_IsSquadReady, ReturnValue) == 0x000000, "Member 'AIMission_IsSquadReady::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.IsSquadWiped
// 0x0001 (0x0001 - 0x0000)
struct AIMission_IsSquadWiped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_IsSquadWiped) == 0x000001, "Wrong alignment on AIMission_IsSquadWiped");
static_assert(sizeof(AIMission_IsSquadWiped) == 0x000001, "Wrong size on AIMission_IsSquadWiped");
static_assert(offsetof(AIMission_IsSquadWiped, ReturnValue) == 0x000000, "Member 'AIMission_IsSquadWiped::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.K2_GetSquadPawns
// 0x0010 (0x0010 - 0x0000)
struct AIMission_K2_GetSquadPawns final
{
public:
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_K2_GetSquadPawns) == 0x000008, "Wrong alignment on AIMission_K2_GetSquadPawns");
static_assert(sizeof(AIMission_K2_GetSquadPawns) == 0x000010, "Wrong size on AIMission_K2_GetSquadPawns");
static_assert(offsetof(AIMission_K2_GetSquadPawns, ReturnValue) == 0x000000, "Member 'AIMission_K2_GetSquadPawns::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.RequiresFullSquad
// 0x0001 (0x0001 - 0x0000)
struct AIMission_RequiresFullSquad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RequiresFullSquad) == 0x000001, "Wrong alignment on AIMission_RequiresFullSquad");
static_assert(sizeof(AIMission_RequiresFullSquad) == 0x000001, "Wrong size on AIMission_RequiresFullSquad");
static_assert(offsetof(AIMission_RequiresFullSquad, ReturnValue) == 0x000000, "Member 'AIMission_RequiresFullSquad::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.ShouldAlwaysRerunSquadBuildOrderOnRestart
// 0x0001 (0x0001 - 0x0000)
struct AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart) == 0x000001, "Wrong alignment on AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart");
static_assert(sizeof(AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart) == 0x000001, "Wrong size on AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart");
static_assert(offsetof(AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart, ReturnValue) == 0x000000, "Member 'AIMission_ShouldAlwaysRerunSquadBuildOrderOnRestart::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.ShouldRemoveOnFinish
// 0x0001 (0x0001 - 0x0000)
struct AIMission_ShouldRemoveOnFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_ShouldRemoveOnFinish) == 0x000001, "Wrong alignment on AIMission_ShouldRemoveOnFinish");
static_assert(sizeof(AIMission_ShouldRemoveOnFinish) == 0x000001, "Wrong size on AIMission_ShouldRemoveOnFinish");
static_assert(offsetof(AIMission_ShouldRemoveOnFinish, ReturnValue) == 0x000000, "Member 'AIMission_ShouldRemoveOnFinish::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.ShouldRequestSquadPawnProductionWhenDied
// 0x0001 (0x0001 - 0x0000)
struct AIMission_ShouldRequestSquadPawnProductionWhenDied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_ShouldRequestSquadPawnProductionWhenDied) == 0x000001, "Wrong alignment on AIMission_ShouldRequestSquadPawnProductionWhenDied");
static_assert(sizeof(AIMission_ShouldRequestSquadPawnProductionWhenDied) == 0x000001, "Wrong size on AIMission_ShouldRequestSquadPawnProductionWhenDied");
static_assert(offsetof(AIMission_ShouldRequestSquadPawnProductionWhenDied, ReturnValue) == 0x000000, "Member 'AIMission_ShouldRequestSquadPawnProductionWhenDied::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission.ShouldStartWhenReady
// 0x0001 (0x0001 - 0x0000)
struct AIMission_ShouldStartWhenReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_ShouldStartWhenReady) == 0x000001, "Wrong alignment on AIMission_ShouldStartWhenReady");
static_assert(sizeof(AIMission_ShouldStartWhenReady) == 0x000001, "Wrong size on AIMission_ShouldStartWhenReady");
static_assert(offsetof(AIMission_ShouldStartWhenReady, ReturnValue) == 0x000000, "Member 'AIMission_ShouldStartWhenReady::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Attack.SetSquadTarget
// 0x0050 (0x0050 - 0x0000)
struct AIMission_Attack_SetSquadTarget final
{
public:
	struct FAITarget                              Target;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Attack_SetSquadTarget) == 0x000008, "Wrong alignment on AIMission_Attack_SetSquadTarget");
static_assert(sizeof(AIMission_Attack_SetSquadTarget) == 0x000050, "Wrong size on AIMission_Attack_SetSquadTarget");
static_assert(offsetof(AIMission_Attack_SetSquadTarget, Target) == 0x000000, "Member 'AIMission_Attack_SetSquadTarget::Target' has a wrong offset!");

// Function Tempest.TedEcsModule_Stealth.K2_SetStealthRevealEnabled
// 0x0010 (0x0010 - 0x0000)
struct TedEcsModule_Stealth_K2_SetStealthRevealEnabled final
{
public:
	class ATedPawn*                               TargetPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEcsModule_Stealth_K2_SetStealthRevealEnabled) == 0x000008, "Wrong alignment on TedEcsModule_Stealth_K2_SetStealthRevealEnabled");
static_assert(sizeof(TedEcsModule_Stealth_K2_SetStealthRevealEnabled) == 0x000010, "Wrong size on TedEcsModule_Stealth_K2_SetStealthRevealEnabled");
static_assert(offsetof(TedEcsModule_Stealth_K2_SetStealthRevealEnabled, TargetPawn) == 0x000000, "Member 'TedEcsModule_Stealth_K2_SetStealthRevealEnabled::TargetPawn' has a wrong offset!");
static_assert(offsetof(TedEcsModule_Stealth_K2_SetStealthRevealEnabled, bEnable) == 0x000008, "Member 'TedEcsModule_Stealth_K2_SetStealthRevealEnabled::bEnable' has a wrong offset!");
static_assert(offsetof(TedEcsModule_Stealth_K2_SetStealthRevealEnabled, Radius) == 0x00000C, "Member 'TedEcsModule_Stealth_K2_SetStealthRevealEnabled::Radius' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.SetMaxCaptureCount
// 0x0004 (0x0004 - 0x0000)
struct AIMission_CaptureStructures_SetMaxCaptureCount final
{
public:
	int32                                         MaxCaptureCount_0;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_CaptureStructures_SetMaxCaptureCount) == 0x000004, "Wrong alignment on AIMission_CaptureStructures_SetMaxCaptureCount");
static_assert(sizeof(AIMission_CaptureStructures_SetMaxCaptureCount) == 0x000004, "Wrong size on AIMission_CaptureStructures_SetMaxCaptureCount");
static_assert(offsetof(AIMission_CaptureStructures_SetMaxCaptureCount, MaxCaptureCount_0) == 0x000000, "Member 'AIMission_CaptureStructures_SetMaxCaptureCount::MaxCaptureCount_0' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.SetTargetStructure
// 0x0008 (0x0008 - 0x0000)
struct AIMission_CaptureStructures_SetTargetStructure final
{
public:
	class ATedStructureBase*                      Structure;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_CaptureStructures_SetTargetStructure) == 0x000008, "Wrong alignment on AIMission_CaptureStructures_SetTargetStructure");
static_assert(sizeof(AIMission_CaptureStructures_SetTargetStructure) == 0x000008, "Wrong size on AIMission_CaptureStructures_SetTargetStructure");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructure, Structure) == 0x000000, "Member 'AIMission_CaptureStructures_SetTargetStructure::Structure' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.SetTargetStructures
// 0x0010 (0x0010 - 0x0000)
struct AIMission_CaptureStructures_SetTargetStructures final
{
public:
	TArray<class ATedStructureBase*>              Structures;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_CaptureStructures_SetTargetStructures) == 0x000008, "Wrong alignment on AIMission_CaptureStructures_SetTargetStructures");
static_assert(sizeof(AIMission_CaptureStructures_SetTargetStructures) == 0x000010, "Wrong size on AIMission_CaptureStructures_SetTargetStructures");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructures, Structures) == 0x000000, "Member 'AIMission_CaptureStructures_SetTargetStructures::Structures' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.SetTargetStructuresByActorTags
// 0x0028 (0x0028 - 0x0000)
struct AIMission_CaptureStructures_SetTargetStructuresByActorTags final
{
public:
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_CaptureStructures_SetTargetStructuresByActorTags) == 0x000008, "Wrong alignment on AIMission_CaptureStructures_SetTargetStructuresByActorTags");
static_assert(sizeof(AIMission_CaptureStructures_SetTargetStructuresByActorTags) == 0x000028, "Wrong size on AIMission_CaptureStructures_SetTargetStructuresByActorTags");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructuresByActorTags, ActorTags) == 0x000000, "Member 'AIMission_CaptureStructures_SetTargetStructuresByActorTags::ActorTags' has a wrong offset!");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructuresByActorTags, bExactMatch) == 0x000020, "Member 'AIMission_CaptureStructures_SetTargetStructuresByActorTags::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.SetTargetStructuresByDefinitionIds
// 0x0028 (0x0028 - 0x0000)
struct AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds final
{
public:
	struct FGameplayTagContainer                  DefinitionIds;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds) == 0x000008, "Wrong alignment on AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds");
static_assert(sizeof(AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds) == 0x000028, "Wrong size on AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds, DefinitionIds) == 0x000000, "Member 'AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds::DefinitionIds' has a wrong offset!");
static_assert(offsetof(AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds, bExactMatch) == 0x000020, "Member 'AIMission_CaptureStructures_SetTargetStructuresByDefinitionIds::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_CaptureStructures.GetMaxCaptureCount
// 0x0004 (0x0004 - 0x0000)
struct AIMission_CaptureStructures_GetMaxCaptureCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_CaptureStructures_GetMaxCaptureCount) == 0x000004, "Wrong alignment on AIMission_CaptureStructures_GetMaxCaptureCount");
static_assert(sizeof(AIMission_CaptureStructures_GetMaxCaptureCount) == 0x000004, "Wrong size on AIMission_CaptureStructures_GetMaxCaptureCount");
static_assert(offsetof(AIMission_CaptureStructures_GetMaxCaptureCount, ReturnValue) == 0x000000, "Member 'AIMission_CaptureStructures_GetMaxCaptureCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedSubtitleTrackInstance.PushSubtitlesToHUD
// 0x0010 (0x0010 - 0x0000)
struct TedSubtitleTrackInstance_PushSubtitlesToHUD final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleTrackInstance_PushSubtitlesToHUD) == 0x000008, "Wrong alignment on TedSubtitleTrackInstance_PushSubtitlesToHUD");
static_assert(sizeof(TedSubtitleTrackInstance_PushSubtitlesToHUD) == 0x000010, "Wrong size on TedSubtitleTrackInstance_PushSubtitlesToHUD");
static_assert(offsetof(TedSubtitleTrackInstance_PushSubtitlesToHUD, Text) == 0x000000, "Member 'TedSubtitleTrackInstance_PushSubtitlesToHUD::Text' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetAISplineRoute
// 0x0008 (0x0008 - 0x0000)
struct AIMission_Convoy_SetAISplineRoute final
{
public:
	const class AAISplineRoute*                   AISplineRoute;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetAISplineRoute) == 0x000008, "Wrong alignment on AIMission_Convoy_SetAISplineRoute");
static_assert(sizeof(AIMission_Convoy_SetAISplineRoute) == 0x000008, "Wrong size on AIMission_Convoy_SetAISplineRoute");
static_assert(offsetof(AIMission_Convoy_SetAISplineRoute, AISplineRoute) == 0x000000, "Member 'AIMission_Convoy_SetAISplineRoute::AISplineRoute' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetConvoyColumnUnit
// 0x0008 (0x0008 - 0x0000)
struct AIMission_Convoy_SetConvoyColumnUnit final
{
public:
	class ATedUnitBase*                           Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetConvoyColumnUnit) == 0x000008, "Wrong alignment on AIMission_Convoy_SetConvoyColumnUnit");
static_assert(sizeof(AIMission_Convoy_SetConvoyColumnUnit) == 0x000008, "Wrong size on AIMission_Convoy_SetConvoyColumnUnit");
static_assert(offsetof(AIMission_Convoy_SetConvoyColumnUnit, Unit) == 0x000000, "Member 'AIMission_Convoy_SetConvoyColumnUnit::Unit' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetConvoyColumnUnits
// 0x0010 (0x0010 - 0x0000)
struct AIMission_Convoy_SetConvoyColumnUnits final
{
public:
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetConvoyColumnUnits) == 0x000008, "Wrong alignment on AIMission_Convoy_SetConvoyColumnUnits");
static_assert(sizeof(AIMission_Convoy_SetConvoyColumnUnits) == 0x000010, "Wrong size on AIMission_Convoy_SetConvoyColumnUnits");
static_assert(offsetof(AIMission_Convoy_SetConvoyColumnUnits, Units) == 0x000000, "Member 'AIMission_Convoy_SetConvoyColumnUnits::Units' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetConvoyColumnUnitsByDefinitionIds
// 0x0028 (0x0028 - 0x0000)
struct AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds final
{
public:
	struct FGameplayTagContainer                  DefinitionIds;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds) == 0x000008, "Wrong alignment on AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds");
static_assert(sizeof(AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds) == 0x000028, "Wrong size on AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds");
static_assert(offsetof(AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds, DefinitionIds) == 0x000000, "Member 'AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds::DefinitionIds' has a wrong offset!");
static_assert(offsetof(AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds, bExactMatch) == 0x000020, "Member 'AIMission_Convoy_SetConvoyColumnUnitsByDefinitionIds::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetConvoyMode
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_SetConvoyMode final
{
public:
	EAIMissionConvoyMode                          ConvoyMode_0;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetConvoyMode) == 0x000001, "Wrong alignment on AIMission_Convoy_SetConvoyMode");
static_assert(sizeof(AIMission_Convoy_SetConvoyMode) == 0x000001, "Wrong size on AIMission_Convoy_SetConvoyMode");
static_assert(offsetof(AIMission_Convoy_SetConvoyMode, ConvoyMode_0) == 0x000000, "Member 'AIMission_Convoy_SetConvoyMode::ConvoyMode_0' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetInfiniteConvoy
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_SetInfiniteConvoy final
{
public:
	bool                                          bInfiniteConvoy;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetInfiniteConvoy) == 0x000001, "Wrong alignment on AIMission_Convoy_SetInfiniteConvoy");
static_assert(sizeof(AIMission_Convoy_SetInfiniteConvoy) == 0x000001, "Wrong size on AIMission_Convoy_SetInfiniteConvoy");
static_assert(offsetof(AIMission_Convoy_SetInfiniteConvoy, bInfiniteConvoy) == 0x000000, "Member 'AIMission_Convoy_SetInfiniteConvoy::bInfiniteConvoy' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetNumRepeats
// 0x0008 (0x0008 - 0x0000)
struct AIMission_Convoy_SetNumRepeats final
{
public:
	int32                                         NumRepeats_0;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartRepeatsCounter;                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_Convoy_SetNumRepeats) == 0x000004, "Wrong alignment on AIMission_Convoy_SetNumRepeats");
static_assert(sizeof(AIMission_Convoy_SetNumRepeats) == 0x000008, "Wrong size on AIMission_Convoy_SetNumRepeats");
static_assert(offsetof(AIMission_Convoy_SetNumRepeats, NumRepeats_0) == 0x000000, "Member 'AIMission_Convoy_SetNumRepeats::NumRepeats_0' has a wrong offset!");
static_assert(offsetof(AIMission_Convoy_SetNumRepeats, bRestartRepeatsCounter) == 0x000004, "Member 'AIMission_Convoy_SetNumRepeats::bRestartRepeatsCounter' has a wrong offset!");

// Function Tempest.AIMission_Convoy.SetStartAtClosestWaypoint
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_SetStartAtClosestWaypoint final
{
public:
	bool                                          bStartAtClosestWaypoint_0;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_SetStartAtClosestWaypoint) == 0x000001, "Wrong alignment on AIMission_Convoy_SetStartAtClosestWaypoint");
static_assert(sizeof(AIMission_Convoy_SetStartAtClosestWaypoint) == 0x000001, "Wrong size on AIMission_Convoy_SetStartAtClosestWaypoint");
static_assert(offsetof(AIMission_Convoy_SetStartAtClosestWaypoint, bStartAtClosestWaypoint_0) == 0x000000, "Member 'AIMission_Convoy_SetStartAtClosestWaypoint::bStartAtClosestWaypoint_0' has a wrong offset!");

// Function Tempest.AIMission_Convoy.GetConvoyColumnUnits
// 0x0010 (0x0010 - 0x0000)
struct AIMission_Convoy_GetConvoyColumnUnits final
{
public:
	TArray<class ATedUnitBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_GetConvoyColumnUnits) == 0x000008, "Wrong alignment on AIMission_Convoy_GetConvoyColumnUnits");
static_assert(sizeof(AIMission_Convoy_GetConvoyColumnUnits) == 0x000010, "Wrong size on AIMission_Convoy_GetConvoyColumnUnits");
static_assert(offsetof(AIMission_Convoy_GetConvoyColumnUnits, ReturnValue) == 0x000000, "Member 'AIMission_Convoy_GetConvoyColumnUnits::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Convoy.GetConvoyMode
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_GetConvoyMode final
{
public:
	EAIMissionConvoyMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_GetConvoyMode) == 0x000001, "Wrong alignment on AIMission_Convoy_GetConvoyMode");
static_assert(sizeof(AIMission_Convoy_GetConvoyMode) == 0x000001, "Wrong size on AIMission_Convoy_GetConvoyMode");
static_assert(offsetof(AIMission_Convoy_GetConvoyMode, ReturnValue) == 0x000000, "Member 'AIMission_Convoy_GetConvoyMode::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Convoy.GetNumRepeats
// 0x0004 (0x0004 - 0x0000)
struct AIMission_Convoy_GetNumRepeats final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_GetNumRepeats) == 0x000004, "Wrong alignment on AIMission_Convoy_GetNumRepeats");
static_assert(sizeof(AIMission_Convoy_GetNumRepeats) == 0x000004, "Wrong size on AIMission_Convoy_GetNumRepeats");
static_assert(offsetof(AIMission_Convoy_GetNumRepeats, ReturnValue) == 0x000000, "Member 'AIMission_Convoy_GetNumRepeats::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Convoy.IsInfiniteConvoy
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_IsInfiniteConvoy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_IsInfiniteConvoy) == 0x000001, "Wrong alignment on AIMission_Convoy_IsInfiniteConvoy");
static_assert(sizeof(AIMission_Convoy_IsInfiniteConvoy) == 0x000001, "Wrong size on AIMission_Convoy_IsInfiniteConvoy");
static_assert(offsetof(AIMission_Convoy_IsInfiniteConvoy, ReturnValue) == 0x000000, "Member 'AIMission_Convoy_IsInfiniteConvoy::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Convoy.ShouldStartAtClosestWaypoint
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Convoy_ShouldStartAtClosestWaypoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Convoy_ShouldStartAtClosestWaypoint) == 0x000001, "Wrong alignment on AIMission_Convoy_ShouldStartAtClosestWaypoint");
static_assert(sizeof(AIMission_Convoy_ShouldStartAtClosestWaypoint) == 0x000001, "Wrong size on AIMission_Convoy_ShouldStartAtClosestWaypoint");
static_assert(offsetof(AIMission_Convoy_ShouldStartAtClosestWaypoint, ReturnValue) == 0x000000, "Member 'AIMission_Convoy_ShouldStartAtClosestWaypoint::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.CanPlayWidgetAnimation
// 0x000C (0x000C - 0x0000)
struct TedUserWidget_CanPlayWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUserWidget_CanPlayWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_CanPlayWidgetAnimation");
static_assert(sizeof(TedUserWidget_CanPlayWidgetAnimation) == 0x00000C, "Wrong size on TedUserWidget_CanPlayWidgetAnimation");
static_assert(offsetof(TedUserWidget_CanPlayWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_CanPlayWidgetAnimation::InAnim' has a wrong offset!");
static_assert(offsetof(TedUserWidget_CanPlayWidgetAnimation, ReturnValue) == 0x000008, "Member 'TedUserWidget_CanPlayWidgetAnimation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.HidePopup
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_HidePopup final
{
public:
	class UTedPopup*                              InPopup;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_HidePopup) == 0x000008, "Wrong alignment on TedUserWidget_HidePopup");
static_assert(sizeof(TedUserWidget_HidePopup) == 0x000008, "Wrong size on TedUserWidget_HidePopup");
static_assert(offsetof(TedUserWidget_HidePopup, InPopup) == 0x000000, "Member 'TedUserWidget_HidePopup::InPopup' has a wrong offset!");

// Function Tempest.TedUserWidget.NotifyWidgetAnimationEnd
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_NotifyWidgetAnimationEnd final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_NotifyWidgetAnimationEnd) == 0x000004, "Wrong alignment on TedUserWidget_NotifyWidgetAnimationEnd");
static_assert(sizeof(TedUserWidget_NotifyWidgetAnimationEnd) == 0x000008, "Wrong size on TedUserWidget_NotifyWidgetAnimationEnd");
static_assert(offsetof(TedUserWidget_NotifyWidgetAnimationEnd, InAnim) == 0x000000, "Member 'TedUserWidget_NotifyWidgetAnimationEnd::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.NotifyWidgetAnimationStart
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_NotifyWidgetAnimationStart final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_NotifyWidgetAnimationStart) == 0x000004, "Wrong alignment on TedUserWidget_NotifyWidgetAnimationStart");
static_assert(sizeof(TedUserWidget_NotifyWidgetAnimationStart) == 0x000008, "Wrong size on TedUserWidget_NotifyWidgetAnimationStart");
static_assert(offsetof(TedUserWidget_NotifyWidgetAnimationStart, InAnim) == 0x000000, "Member 'TedUserWidget_NotifyWidgetAnimationStart::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.OnPlayWidgetAnimation
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_OnPlayWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_OnPlayWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_OnPlayWidgetAnimation");
static_assert(sizeof(TedUserWidget_OnPlayWidgetAnimation) == 0x000008, "Wrong size on TedUserWidget_OnPlayWidgetAnimation");
static_assert(offsetof(TedUserWidget_OnPlayWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_OnPlayWidgetAnimation::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.OnStopWidgetAnimation
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_OnStopWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_OnStopWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_OnStopWidgetAnimation");
static_assert(sizeof(TedUserWidget_OnStopWidgetAnimation) == 0x000008, "Wrong size on TedUserWidget_OnStopWidgetAnimation");
static_assert(offsetof(TedUserWidget_OnStopWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_OnStopWidgetAnimation::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.PlaySoundUI
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_PlaySoundUI final
{
public:
	class USoundCue*                              InSound;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_PlaySoundUI) == 0x000008, "Wrong alignment on TedUserWidget_PlaySoundUI");
static_assert(sizeof(TedUserWidget_PlaySoundUI) == 0x000008, "Wrong size on TedUserWidget_PlaySoundUI");
static_assert(offsetof(TedUserWidget_PlaySoundUI, InSound) == 0x000000, "Member 'TedUserWidget_PlaySoundUI::InSound' has a wrong offset!");

// Function Tempest.TedUserWidget.PlayWidgetAnimation
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_PlayWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_PlayWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_PlayWidgetAnimation");
static_assert(sizeof(TedUserWidget_PlayWidgetAnimation) == 0x000008, "Wrong size on TedUserWidget_PlayWidgetAnimation");
static_assert(offsetof(TedUserWidget_PlayWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_PlayWidgetAnimation::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.StopWidgetAnimation
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_StopWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_StopWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_StopWidgetAnimation");
static_assert(sizeof(TedUserWidget_StopWidgetAnimation) == 0x000008, "Wrong size on TedUserWidget_StopWidgetAnimation");
static_assert(offsetof(TedUserWidget_StopWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_StopWidgetAnimation::InAnim' has a wrong offset!");

// Function Tempest.TedUserWidget.GetAvailableShortcutNames
// 0x0010 (0x0010 - 0x0000)
struct TedUserWidget_GetAvailableShortcutNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_GetAvailableShortcutNames) == 0x000008, "Wrong alignment on TedUserWidget_GetAvailableShortcutNames");
static_assert(sizeof(TedUserWidget_GetAvailableShortcutNames) == 0x000010, "Wrong size on TedUserWidget_GetAvailableShortcutNames");
static_assert(offsetof(TedUserWidget_GetAvailableShortcutNames, ReturnValue) == 0x000000, "Member 'TedUserWidget_GetAvailableShortcutNames::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.GetCustomTooltipDisplayParams
// 0x0070 (0x0070 - 0x0000)
struct TedUserWidget_GetCustomTooltipDisplayParams final
{
public:
	struct FTedTooltipDisplayParams               OutParams;                                         // 0x0000(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_GetCustomTooltipDisplayParams) == 0x000008, "Wrong alignment on TedUserWidget_GetCustomTooltipDisplayParams");
static_assert(sizeof(TedUserWidget_GetCustomTooltipDisplayParams) == 0x000070, "Wrong size on TedUserWidget_GetCustomTooltipDisplayParams");
static_assert(offsetof(TedUserWidget_GetCustomTooltipDisplayParams, OutParams) == 0x000000, "Member 'TedUserWidget_GetCustomTooltipDisplayParams::OutParams' has a wrong offset!");

// Function Tempest.TedUserWidget.GetHUD
// 0x0008 (0x0008 - 0x0000)
struct TedUserWidget_GetHUD final
{
public:
	class ATedHUD*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_GetHUD) == 0x000008, "Wrong alignment on TedUserWidget_GetHUD");
static_assert(sizeof(TedUserWidget_GetHUD) == 0x000008, "Wrong size on TedUserWidget_GetHUD");
static_assert(offsetof(TedUserWidget_GetHUD, ReturnValue) == 0x000000, "Member 'TedUserWidget_GetHUD::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.HasValidSetup
// 0x0001 (0x0001 - 0x0000)
struct TedUserWidget_HasValidSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_HasValidSetup) == 0x000001, "Wrong alignment on TedUserWidget_HasValidSetup");
static_assert(sizeof(TedUserWidget_HasValidSetup) == 0x000001, "Wrong size on TedUserWidget_HasValidSetup");
static_assert(offsetof(TedUserWidget_HasValidSetup, ReturnValue) == 0x000000, "Member 'TedUserWidget_HasValidSetup::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.IsStartupSequenceEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedUserWidget_IsStartupSequenceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_IsStartupSequenceEnabled) == 0x000001, "Wrong alignment on TedUserWidget_IsStartupSequenceEnabled");
static_assert(sizeof(TedUserWidget_IsStartupSequenceEnabled) == 0x000001, "Wrong size on TedUserWidget_IsStartupSequenceEnabled");
static_assert(offsetof(TedUserWidget_IsStartupSequenceEnabled, ReturnValue) == 0x000000, "Member 'TedUserWidget_IsStartupSequenceEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.IsStartupSequenceFinished
// 0x0001 (0x0001 - 0x0000)
struct TedUserWidget_IsStartupSequenceFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_IsStartupSequenceFinished) == 0x000001, "Wrong alignment on TedUserWidget_IsStartupSequenceFinished");
static_assert(sizeof(TedUserWidget_IsStartupSequenceFinished) == 0x000001, "Wrong size on TedUserWidget_IsStartupSequenceFinished");
static_assert(offsetof(TedUserWidget_IsStartupSequenceFinished, ReturnValue) == 0x000000, "Member 'TedUserWidget_IsStartupSequenceFinished::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.OnCanPlayWidgetAnimation
// 0x000C (0x000C - 0x0000)
struct TedUserWidget_OnCanPlayWidgetAnimation final
{
public:
	struct FGameplayTag                           InAnim;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUserWidget_OnCanPlayWidgetAnimation) == 0x000004, "Wrong alignment on TedUserWidget_OnCanPlayWidgetAnimation");
static_assert(sizeof(TedUserWidget_OnCanPlayWidgetAnimation) == 0x00000C, "Wrong size on TedUserWidget_OnCanPlayWidgetAnimation");
static_assert(offsetof(TedUserWidget_OnCanPlayWidgetAnimation, InAnim) == 0x000000, "Member 'TedUserWidget_OnCanPlayWidgetAnimation::InAnim' has a wrong offset!");
static_assert(offsetof(TedUserWidget_OnCanPlayWidgetAnimation, ReturnValue) == 0x000008, "Member 'TedUserWidget_OnCanPlayWidgetAnimation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserWidget.PaintSpline
// 0x0088 (0x0088 - 0x0000)
struct TedUserWidget_PaintSpline final
{
public:
	struct FPaintContext                          InContext;                                         // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InStartLoc;                                        // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InStartDir;                                        // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InEndLoc;                                          // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InEndDir;                                          // 0x0060(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InTint;                                            // 0x0070(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InThickness;                                       // 0x0080(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUserWidget_PaintSpline) == 0x000008, "Wrong alignment on TedUserWidget_PaintSpline");
static_assert(sizeof(TedUserWidget_PaintSpline) == 0x000088, "Wrong size on TedUserWidget_PaintSpline");
static_assert(offsetof(TedUserWidget_PaintSpline, InContext) == 0x000000, "Member 'TedUserWidget_PaintSpline::InContext' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InStartLoc) == 0x000030, "Member 'TedUserWidget_PaintSpline::InStartLoc' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InStartDir) == 0x000040, "Member 'TedUserWidget_PaintSpline::InStartDir' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InEndLoc) == 0x000050, "Member 'TedUserWidget_PaintSpline::InEndLoc' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InEndDir) == 0x000060, "Member 'TedUserWidget_PaintSpline::InEndDir' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InTint) == 0x000070, "Member 'TedUserWidget_PaintSpline::InTint' has a wrong offset!");
static_assert(offsetof(TedUserWidget_PaintSpline, InThickness) == 0x000080, "Member 'TedUserWidget_PaintSpline::InThickness' has a wrong offset!");

// Function Tempest.TedUserWidget.SupportsCustomTooltip
// 0x0001 (0x0001 - 0x0000)
struct TedUserWidget_SupportsCustomTooltip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserWidget_SupportsCustomTooltip) == 0x000001, "Wrong alignment on TedUserWidget_SupportsCustomTooltip");
static_assert(sizeof(TedUserWidget_SupportsCustomTooltip) == 0x000001, "Wrong size on TedUserWidget_SupportsCustomTooltip");
static_assert(offsetof(TedUserWidget_SupportsCustomTooltip, ReturnValue) == 0x000000, "Member 'TedUserWidget_SupportsCustomTooltip::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsMainWidget.OnNewHintTriggered
// 0x0004 (0x0004 - 0x0000)
struct TedHintsMainWidget_OnNewHintTriggered final
{
public:
	int32                                         NewHintsNumber;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsMainWidget_OnNewHintTriggered) == 0x000004, "Wrong alignment on TedHintsMainWidget_OnNewHintTriggered");
static_assert(sizeof(TedHintsMainWidget_OnNewHintTriggered) == 0x000004, "Wrong size on TedHintsMainWidget_OnNewHintTriggered");
static_assert(offsetof(TedHintsMainWidget_OnNewHintTriggered, NewHintsNumber) == 0x000000, "Member 'TedHintsMainWidget_OnNewHintTriggered::NewHintsNumber' has a wrong offset!");

// Function Tempest.TedHintsMainWidget.OnNewHintUIFocusRequested
// 0x0008 (0x0008 - 0x0000)
struct TedHintsMainWidget_OnNewHintUIFocusRequested final
{
public:
	class UTedHintsAsset*                         HintToFocus;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsMainWidget_OnNewHintUIFocusRequested) == 0x000008, "Wrong alignment on TedHintsMainWidget_OnNewHintUIFocusRequested");
static_assert(sizeof(TedHintsMainWidget_OnNewHintUIFocusRequested) == 0x000008, "Wrong size on TedHintsMainWidget_OnNewHintUIFocusRequested");
static_assert(offsetof(TedHintsMainWidget_OnNewHintUIFocusRequested, HintToFocus) == 0x000000, "Member 'TedHintsMainWidget_OnNewHintUIFocusRequested::HintToFocus' has a wrong offset!");

// Function Tempest.AIMission_Defend.SetSquadTarget
// 0x0050 (0x0050 - 0x0000)
struct AIMission_Defend_SetSquadTarget final
{
public:
	struct FAITarget                              Target;                                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Defend_SetSquadTarget) == 0x000008, "Wrong alignment on AIMission_Defend_SetSquadTarget");
static_assert(sizeof(AIMission_Defend_SetSquadTarget) == 0x000050, "Wrong size on AIMission_Defend_SetSquadTarget");
static_assert(offsetof(AIMission_Defend_SetSquadTarget, Target) == 0x000000, "Member 'AIMission_Defend_SetSquadTarget::Target' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.AddPreferredBuildLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMission_EnsurePower_AddPreferredBuildLocation final
{
public:
	struct FAITargetLocation                      Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_AddPreferredBuildLocation) == 0x000008, "Wrong alignment on AIMission_EnsurePower_AddPreferredBuildLocation");
static_assert(sizeof(AIMission_EnsurePower_AddPreferredBuildLocation) == 0x000018, "Wrong size on AIMission_EnsurePower_AddPreferredBuildLocation");
static_assert(offsetof(AIMission_EnsurePower_AddPreferredBuildLocation, Location) == 0x000000, "Member 'AIMission_EnsurePower_AddPreferredBuildLocation::Location' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.RemovePreferredBuildLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMission_EnsurePower_RemovePreferredBuildLocation final
{
public:
	struct FAITargetLocation                      Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_RemovePreferredBuildLocation) == 0x000008, "Wrong alignment on AIMission_EnsurePower_RemovePreferredBuildLocation");
static_assert(sizeof(AIMission_EnsurePower_RemovePreferredBuildLocation) == 0x000018, "Wrong size on AIMission_EnsurePower_RemovePreferredBuildLocation");
static_assert(offsetof(AIMission_EnsurePower_RemovePreferredBuildLocation, Location) == 0x000000, "Member 'AIMission_EnsurePower_RemovePreferredBuildLocation::Location' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.SetInitialBuildPowerDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_EnsurePower_SetInitialBuildPowerDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_SetInitialBuildPowerDelay) == 0x000004, "Wrong alignment on AIMission_EnsurePower_SetInitialBuildPowerDelay");
static_assert(sizeof(AIMission_EnsurePower_SetInitialBuildPowerDelay) == 0x000004, "Wrong size on AIMission_EnsurePower_SetInitialBuildPowerDelay");
static_assert(offsetof(AIMission_EnsurePower_SetInitialBuildPowerDelay, Delay) == 0x000000, "Member 'AIMission_EnsurePower_SetInitialBuildPowerDelay::Delay' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.SetPreferredBuildLocations
// 0x0010 (0x0010 - 0x0000)
struct AIMission_EnsurePower_SetPreferredBuildLocations final
{
public:
	TArray<struct FAITargetLocation>              Locations;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_SetPreferredBuildLocations) == 0x000008, "Wrong alignment on AIMission_EnsurePower_SetPreferredBuildLocations");
static_assert(sizeof(AIMission_EnsurePower_SetPreferredBuildLocations) == 0x000010, "Wrong size on AIMission_EnsurePower_SetPreferredBuildLocations");
static_assert(offsetof(AIMission_EnsurePower_SetPreferredBuildLocations, Locations) == 0x000000, "Member 'AIMission_EnsurePower_SetPreferredBuildLocations::Locations' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.SetSubsequentBuildPowerDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_EnsurePower_SetSubsequentBuildPowerDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_SetSubsequentBuildPowerDelay) == 0x000004, "Wrong alignment on AIMission_EnsurePower_SetSubsequentBuildPowerDelay");
static_assert(sizeof(AIMission_EnsurePower_SetSubsequentBuildPowerDelay) == 0x000004, "Wrong size on AIMission_EnsurePower_SetSubsequentBuildPowerDelay");
static_assert(offsetof(AIMission_EnsurePower_SetSubsequentBuildPowerDelay, Delay) == 0x000000, "Member 'AIMission_EnsurePower_SetSubsequentBuildPowerDelay::Delay' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.GetInitialBuildPowerDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_EnsurePower_GetInitialBuildPowerDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_GetInitialBuildPowerDelay) == 0x000004, "Wrong alignment on AIMission_EnsurePower_GetInitialBuildPowerDelay");
static_assert(sizeof(AIMission_EnsurePower_GetInitialBuildPowerDelay) == 0x000004, "Wrong size on AIMission_EnsurePower_GetInitialBuildPowerDelay");
static_assert(offsetof(AIMission_EnsurePower_GetInitialBuildPowerDelay, ReturnValue) == 0x000000, "Member 'AIMission_EnsurePower_GetInitialBuildPowerDelay::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.GetPreferredBuildLocations
// 0x0010 (0x0010 - 0x0000)
struct AIMission_EnsurePower_GetPreferredBuildLocations final
{
public:
	TArray<struct FAITargetLocation>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_GetPreferredBuildLocations) == 0x000008, "Wrong alignment on AIMission_EnsurePower_GetPreferredBuildLocations");
static_assert(sizeof(AIMission_EnsurePower_GetPreferredBuildLocations) == 0x000010, "Wrong size on AIMission_EnsurePower_GetPreferredBuildLocations");
static_assert(offsetof(AIMission_EnsurePower_GetPreferredBuildLocations, ReturnValue) == 0x000000, "Member 'AIMission_EnsurePower_GetPreferredBuildLocations::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_EnsurePower.GetSubsequentBuildPowerDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_EnsurePower_GetSubsequentBuildPowerDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_EnsurePower_GetSubsequentBuildPowerDelay) == 0x000004, "Wrong alignment on AIMission_EnsurePower_GetSubsequentBuildPowerDelay");
static_assert(sizeof(AIMission_EnsurePower_GetSubsequentBuildPowerDelay) == 0x000004, "Wrong size on AIMission_EnsurePower_GetSubsequentBuildPowerDelay");
static_assert(offsetof(AIMission_EnsurePower_GetSubsequentBuildPowerDelay, ReturnValue) == 0x000000, "Member 'AIMission_EnsurePower_GetSubsequentBuildPowerDelay::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.ActivateSlotState
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelBase_ActivateSlotState final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_ActivateSlotState) == 0x000004, "Wrong alignment on TedContentPanelBase_ActivateSlotState");
static_assert(sizeof(TedContentPanelBase_ActivateSlotState) == 0x000008, "Wrong size on TedContentPanelBase_ActivateSlotState");
static_assert(offsetof(TedContentPanelBase_ActivateSlotState, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_ActivateSlotState::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_ActivateSlotState, InState) == 0x000004, "Member 'TedContentPanelBase_ActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_ActivateSlotState, bInActivate) == 0x000005, "Member 'TedContentPanelBase_ActivateSlotState::bInActivate' has a wrong offset!");

// Function Tempest.TedContentPanelBase.ClearSlotStates
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelBase_ClearSlotStates final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_ClearSlotStates) == 0x000004, "Wrong alignment on TedContentPanelBase_ClearSlotStates");
static_assert(sizeof(TedContentPanelBase_ClearSlotStates) == 0x000004, "Wrong size on TedContentPanelBase_ClearSlotStates");
static_assert(offsetof(TedContentPanelBase_ClearSlotStates, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_ClearSlotStates::InSlotIndex' has a wrong offset!");

// Function Tempest.TedContentPanelBase.HideSlotCustomTooltip
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_HideSlotCustomTooltip final
{
public:
	TSubclassOf<class UTedTooltipWidget>          InTooltipClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSlotIndex;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_HideSlotCustomTooltip) == 0x000008, "Wrong alignment on TedContentPanelBase_HideSlotCustomTooltip");
static_assert(sizeof(TedContentPanelBase_HideSlotCustomTooltip) == 0x000010, "Wrong size on TedContentPanelBase_HideSlotCustomTooltip");
static_assert(offsetof(TedContentPanelBase_HideSlotCustomTooltip, InTooltipClass) == 0x000000, "Member 'TedContentPanelBase_HideSlotCustomTooltip::InTooltipClass' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_HideSlotCustomTooltip, InSlotIndex) == 0x000008, "Member 'TedContentPanelBase_HideSlotCustomTooltip::InSlotIndex' has a wrong offset!");

// Function Tempest.TedContentPanelBase.OnActivateSlotStateInternal
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_OnActivateSlotStateInternal final
{
public:
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_OnActivateSlotStateInternal) == 0x000008, "Wrong alignment on TedContentPanelBase_OnActivateSlotStateInternal");
static_assert(sizeof(TedContentPanelBase_OnActivateSlotStateInternal) == 0x000010, "Wrong size on TedContentPanelBase_OnActivateSlotStateInternal");
static_assert(offsetof(TedContentPanelBase_OnActivateSlotStateInternal, InContentSlot) == 0x000000, "Member 'TedContentPanelBase_OnActivateSlotStateInternal::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_OnActivateSlotStateInternal, InState) == 0x000008, "Member 'TedContentPanelBase_OnActivateSlotStateInternal::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_OnActivateSlotStateInternal, bInActivated) == 0x000009, "Member 'TedContentPanelBase_OnActivateSlotStateInternal::bInActivated' has a wrong offset!");

// Function Tempest.TedContentPanelBase.OnRegisterContentSlot
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_OnRegisterContentSlot final
{
public:
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentPanelRegistration                  InMode;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_OnRegisterContentSlot) == 0x000008, "Wrong alignment on TedContentPanelBase_OnRegisterContentSlot");
static_assert(sizeof(TedContentPanelBase_OnRegisterContentSlot) == 0x000010, "Wrong size on TedContentPanelBase_OnRegisterContentSlot");
static_assert(offsetof(TedContentPanelBase_OnRegisterContentSlot, InContentSlot) == 0x000000, "Member 'TedContentPanelBase_OnRegisterContentSlot::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_OnRegisterContentSlot, InMode) == 0x000008, "Member 'TedContentPanelBase_OnRegisterContentSlot::InMode' has a wrong offset!");

// Function Tempest.TedContentPanelBase.OnShowSlotCustomTooltip
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_OnShowSlotCustomTooltip final
{
public:
	TSubclassOf<class UTedTooltipWidget>          InTooltipClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_OnShowSlotCustomTooltip) == 0x000008, "Wrong alignment on TedContentPanelBase_OnShowSlotCustomTooltip");
static_assert(sizeof(TedContentPanelBase_OnShowSlotCustomTooltip) == 0x000010, "Wrong size on TedContentPanelBase_OnShowSlotCustomTooltip");
static_assert(offsetof(TedContentPanelBase_OnShowSlotCustomTooltip, InTooltipClass) == 0x000000, "Member 'TedContentPanelBase_OnShowSlotCustomTooltip::InTooltipClass' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_OnShowSlotCustomTooltip, InContentSlo) == 0x000008, "Member 'TedContentPanelBase_OnShowSlotCustomTooltip::InContentSlo' has a wrong offset!");

// Function Tempest.TedContentPanelBase.OnTriggerSlotActionInternal
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_OnTriggerSlotActionInternal final
{
public:
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_OnTriggerSlotActionInternal) == 0x000008, "Wrong alignment on TedContentPanelBase_OnTriggerSlotActionInternal");
static_assert(sizeof(TedContentPanelBase_OnTriggerSlotActionInternal) == 0x000010, "Wrong size on TedContentPanelBase_OnTriggerSlotActionInternal");
static_assert(offsetof(TedContentPanelBase_OnTriggerSlotActionInternal, InContentSlot) == 0x000000, "Member 'TedContentPanelBase_OnTriggerSlotActionInternal::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_OnTriggerSlotActionInternal, InAction) == 0x000008, "Member 'TedContentPanelBase_OnTriggerSlotActionInternal::InAction' has a wrong offset!");

// Function Tempest.TedContentPanelBase.OnUnregisterContentSlot
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelBase_OnUnregisterContentSlot final
{
public:
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_OnUnregisterContentSlot) == 0x000008, "Wrong alignment on TedContentPanelBase_OnUnregisterContentSlot");
static_assert(sizeof(TedContentPanelBase_OnUnregisterContentSlot) == 0x000008, "Wrong size on TedContentPanelBase_OnUnregisterContentSlot");
static_assert(offsetof(TedContentPanelBase_OnUnregisterContentSlot, InContentSlot) == 0x000000, "Member 'TedContentPanelBase_OnUnregisterContentSlot::InContentSlot' has a wrong offset!");

// Function Tempest.TedContentPanelBase.RefreshContentSlotUI
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelBase_RefreshContentSlotUI final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_RefreshContentSlotUI) == 0x000004, "Wrong alignment on TedContentPanelBase_RefreshContentSlotUI");
static_assert(sizeof(TedContentPanelBase_RefreshContentSlotUI) == 0x000004, "Wrong size on TedContentPanelBase_RefreshContentSlotUI");
static_assert(offsetof(TedContentPanelBase_RefreshContentSlotUI, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_RefreshContentSlotUI::InSlotIndex' has a wrong offset!");

// Function Tempest.TedContentPanelBase.RefreshUIFor
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_RefreshUIFor final
{
public:
	TArray<class UTedContentPanelSlotBase*>       InSlots;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_RefreshUIFor) == 0x000008, "Wrong alignment on TedContentPanelBase_RefreshUIFor");
static_assert(sizeof(TedContentPanelBase_RefreshUIFor) == 0x000010, "Wrong size on TedContentPanelBase_RefreshUIFor");
static_assert(offsetof(TedContentPanelBase_RefreshUIFor, InSlots) == 0x000000, "Member 'TedContentPanelBase_RefreshUIFor::InSlots' has a wrong offset!");

// Function Tempest.TedContentPanelBase.ShowSlotCustomTooltip
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_ShowSlotCustomTooltip final
{
public:
	TSubclassOf<class UTedTooltipWidget>          InTooltipClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSlotIndex;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_ShowSlotCustomTooltip) == 0x000008, "Wrong alignment on TedContentPanelBase_ShowSlotCustomTooltip");
static_assert(sizeof(TedContentPanelBase_ShowSlotCustomTooltip) == 0x000010, "Wrong size on TedContentPanelBase_ShowSlotCustomTooltip");
static_assert(offsetof(TedContentPanelBase_ShowSlotCustomTooltip, InTooltipClass) == 0x000000, "Member 'TedContentPanelBase_ShowSlotCustomTooltip::InTooltipClass' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_ShowSlotCustomTooltip, InSlotIndex) == 0x000008, "Member 'TedContentPanelBase_ShowSlotCustomTooltip::InSlotIndex' has a wrong offset!");

// Function Tempest.TedContentPanelBase.TriggerSlotAction
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelBase_TriggerSlotAction final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_TriggerSlotAction) == 0x000004, "Wrong alignment on TedContentPanelBase_TriggerSlotAction");
static_assert(sizeof(TedContentPanelBase_TriggerSlotAction) == 0x000008, "Wrong size on TedContentPanelBase_TriggerSlotAction");
static_assert(offsetof(TedContentPanelBase_TriggerSlotAction, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_TriggerSlotAction::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_TriggerSlotAction, InAction) == 0x000004, "Member 'TedContentPanelBase_TriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedContentPanelBase.CanActivateSlotState
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_CanActivateSlotState final
{
public:
	const class UTedContentPanelSlotBase*         InSlotWidget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_CanActivateSlotState) == 0x000008, "Wrong alignment on TedContentPanelBase_CanActivateSlotState");
static_assert(sizeof(TedContentPanelBase_CanActivateSlotState) == 0x000010, "Wrong size on TedContentPanelBase_CanActivateSlotState");
static_assert(offsetof(TedContentPanelBase_CanActivateSlotState, InSlotWidget) == 0x000000, "Member 'TedContentPanelBase_CanActivateSlotState::InSlotWidget' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_CanActivateSlotState, InState) == 0x000008, "Member 'TedContentPanelBase_CanActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_CanActivateSlotState, bInActivate) == 0x000009, "Member 'TedContentPanelBase_CanActivateSlotState::bInActivate' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_CanActivateSlotState, ReturnValue) == 0x00000A, "Member 'TedContentPanelBase_CanActivateSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.CanTriggerSlotAction
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_CanTriggerSlotAction final
{
public:
	const class UTedContentPanelSlotBase*         InSlotWidget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_CanTriggerSlotAction) == 0x000008, "Wrong alignment on TedContentPanelBase_CanTriggerSlotAction");
static_assert(sizeof(TedContentPanelBase_CanTriggerSlotAction) == 0x000010, "Wrong size on TedContentPanelBase_CanTriggerSlotAction");
static_assert(offsetof(TedContentPanelBase_CanTriggerSlotAction, InSlotWidget) == 0x000000, "Member 'TedContentPanelBase_CanTriggerSlotAction::InSlotWidget' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_CanTriggerSlotAction, InAction) == 0x000008, "Member 'TedContentPanelBase_CanTriggerSlotAction::InAction' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_CanTriggerSlotAction, ReturnValue) == 0x000009, "Member 'TedContentPanelBase_CanTriggerSlotAction::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlot
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_GetContentSlot final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedContentPanelSlotBase*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetContentSlot) == 0x000008, "Wrong alignment on TedContentPanelBase_GetContentSlot");
static_assert(sizeof(TedContentPanelBase_GetContentSlot) == 0x000010, "Wrong size on TedContentPanelBase_GetContentSlot");
static_assert(offsetof(TedContentPanelBase_GetContentSlot, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_GetContentSlot::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlot, ReturnValue) == 0x000008, "Member 'TedContentPanelBase_GetContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlotByState
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelBase_GetContentSlotByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetContentSlotByState) == 0x000008, "Wrong alignment on TedContentPanelBase_GetContentSlotByState");
static_assert(sizeof(TedContentPanelBase_GetContentSlotByState) == 0x000010, "Wrong size on TedContentPanelBase_GetContentSlotByState");
static_assert(offsetof(TedContentPanelBase_GetContentSlotByState, InState) == 0x000000, "Member 'TedContentPanelBase_GetContentSlotByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotByState, InIndex) == 0x000004, "Member 'TedContentPanelBase_GetContentSlotByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotByState, ReturnValue) == 0x000008, "Member 'TedContentPanelBase_GetContentSlotByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlotIndexByState
// 0x000C (0x000C - 0x0000)
struct TedContentPanelBase_GetContentSlotIndexByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetContentSlotIndexByState) == 0x000004, "Wrong alignment on TedContentPanelBase_GetContentSlotIndexByState");
static_assert(sizeof(TedContentPanelBase_GetContentSlotIndexByState) == 0x00000C, "Wrong size on TedContentPanelBase_GetContentSlotIndexByState");
static_assert(offsetof(TedContentPanelBase_GetContentSlotIndexByState, InState) == 0x000000, "Member 'TedContentPanelBase_GetContentSlotIndexByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotIndexByState, InIndex) == 0x000004, "Member 'TedContentPanelBase_GetContentSlotIndexByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotIndexByState, ReturnValue) == 0x000008, "Member 'TedContentPanelBase_GetContentSlotIndexByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlots
// 0x0018 (0x0018 - 0x0000)
struct TedContentPanelBase_GetContentSlots final
{
public:
	TArray<class UTedContentPanelSlotBase*>       OutSlots;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_GetContentSlots) == 0x000008, "Wrong alignment on TedContentPanelBase_GetContentSlots");
static_assert(sizeof(TedContentPanelBase_GetContentSlots) == 0x000018, "Wrong size on TedContentPanelBase_GetContentSlots");
static_assert(offsetof(TedContentPanelBase_GetContentSlots, OutSlots) == 0x000000, "Member 'TedContentPanelBase_GetContentSlots::OutSlots' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlots, ReturnValue) == 0x000010, "Member 'TedContentPanelBase_GetContentSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlotsByState
// 0x0020 (0x0020 - 0x0000)
struct TedContentPanelBase_GetContentSlotsByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTedContentPanelSlotBase*>       OutSlots;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_GetContentSlotsByState) == 0x000008, "Wrong alignment on TedContentPanelBase_GetContentSlotsByState");
static_assert(sizeof(TedContentPanelBase_GetContentSlotsByState) == 0x000020, "Wrong size on TedContentPanelBase_GetContentSlotsByState");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsByState, InState) == 0x000000, "Member 'TedContentPanelBase_GetContentSlotsByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsByState, OutSlots) == 0x000008, "Member 'TedContentPanelBase_GetContentSlotsByState::OutSlots' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsByState, ReturnValue) == 0x000018, "Member 'TedContentPanelBase_GetContentSlotsByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlotsCount
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelBase_GetContentSlotsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetContentSlotsCount) == 0x000004, "Wrong alignment on TedContentPanelBase_GetContentSlotsCount");
static_assert(sizeof(TedContentPanelBase_GetContentSlotsCount) == 0x000004, "Wrong size on TedContentPanelBase_GetContentSlotsCount");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsCount, ReturnValue) == 0x000000, "Member 'TedContentPanelBase_GetContentSlotsCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetContentSlotsCountByState
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelBase_GetContentSlotsCountByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetContentSlotsCountByState) == 0x000004, "Wrong alignment on TedContentPanelBase_GetContentSlotsCountByState");
static_assert(sizeof(TedContentPanelBase_GetContentSlotsCountByState) == 0x000008, "Wrong size on TedContentPanelBase_GetContentSlotsCountByState");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsCountByState, InState) == 0x000000, "Member 'TedContentPanelBase_GetContentSlotsCountByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetContentSlotsCountByState, ReturnValue) == 0x000004, "Member 'TedContentPanelBase_GetContentSlotsCountByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.GetSlotCustomTooltipDisplayParams
// 0x0078 (0x0078 - 0x0000)
struct TedContentPanelBase_GetSlotCustomTooltipDisplayParams final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedTooltipDisplayParams               OutParams;                                         // 0x0008(0x0070)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelBase_GetSlotCustomTooltipDisplayParams) == 0x000008, "Wrong alignment on TedContentPanelBase_GetSlotCustomTooltipDisplayParams");
static_assert(sizeof(TedContentPanelBase_GetSlotCustomTooltipDisplayParams) == 0x000078, "Wrong size on TedContentPanelBase_GetSlotCustomTooltipDisplayParams");
static_assert(offsetof(TedContentPanelBase_GetSlotCustomTooltipDisplayParams, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_GetSlotCustomTooltipDisplayParams::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_GetSlotCustomTooltipDisplayParams, OutParams) == 0x000008, "Member 'TedContentPanelBase_GetSlotCustomTooltipDisplayParams::OutParams' has a wrong offset!");

// Function Tempest.TedContentPanelBase.IsAnySlotStateActive
// 0x0060 (0x0060 - 0x0000)
struct TedContentPanelBase_IsAnySlotStateActive final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ETedContentSlotState>                    InStates;                                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_IsAnySlotStateActive) == 0x000008, "Wrong alignment on TedContentPanelBase_IsAnySlotStateActive");
static_assert(sizeof(TedContentPanelBase_IsAnySlotStateActive) == 0x000060, "Wrong size on TedContentPanelBase_IsAnySlotStateActive");
static_assert(offsetof(TedContentPanelBase_IsAnySlotStateActive, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_IsAnySlotStateActive::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_IsAnySlotStateActive, InStates) == 0x000008, "Member 'TedContentPanelBase_IsAnySlotStateActive::InStates' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_IsAnySlotStateActive, ReturnValue) == 0x000058, "Member 'TedContentPanelBase_IsAnySlotStateActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.IsSlotStateActive
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelBase_IsSlotStateActive final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_IsSlotStateActive) == 0x000004, "Wrong alignment on TedContentPanelBase_IsSlotStateActive");
static_assert(sizeof(TedContentPanelBase_IsSlotStateActive) == 0x000008, "Wrong size on TedContentPanelBase_IsSlotStateActive");
static_assert(offsetof(TedContentPanelBase_IsSlotStateActive, InSlotIndex) == 0x000000, "Member 'TedContentPanelBase_IsSlotStateActive::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_IsSlotStateActive, InState) == 0x000004, "Member 'TedContentPanelBase_IsSlotStateActive::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_IsSlotStateActive, ReturnValue) == 0x000005, "Member 'TedContentPanelBase_IsSlotStateActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelBase.K2_GetSlotStateAssetSelector
// 0x0028 (0x0028 - 0x0000)
struct TedContentPanelBase_K2_GetSlotStateAssetSelector final
{
public:
	struct FGameplayTag                           InSelectorKey;                                     // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedContentSlotStateAssetSelector      Out;                                               // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelBase_K2_GetSlotStateAssetSelector) == 0x000008, "Wrong alignment on TedContentPanelBase_K2_GetSlotStateAssetSelector");
static_assert(sizeof(TedContentPanelBase_K2_GetSlotStateAssetSelector) == 0x000028, "Wrong size on TedContentPanelBase_K2_GetSlotStateAssetSelector");
static_assert(offsetof(TedContentPanelBase_K2_GetSlotStateAssetSelector, InSelectorKey) == 0x000000, "Member 'TedContentPanelBase_K2_GetSlotStateAssetSelector::InSelectorKey' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_K2_GetSlotStateAssetSelector, Out) == 0x000008, "Member 'TedContentPanelBase_K2_GetSlotStateAssetSelector::Out' has a wrong offset!");
static_assert(offsetof(TedContentPanelBase_K2_GetSlotStateAssetSelector, ReturnValue) == 0x000020, "Member 'TedContentPanelBase_K2_GetSlotStateAssetSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelDynamic.OnCacheContent
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelDynamic_OnCacheContent final
{
public:
	int32                                         OutExpectedSlotsCount;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelDynamic_OnCacheContent) == 0x000004, "Wrong alignment on TedContentPanelDynamic_OnCacheContent");
static_assert(sizeof(TedContentPanelDynamic_OnCacheContent) == 0x000004, "Wrong size on TedContentPanelDynamic_OnCacheContent");
static_assert(offsetof(TedContentPanelDynamic_OnCacheContent, OutExpectedSlotsCount) == 0x000000, "Member 'TedContentPanelDynamic_OnCacheContent::OutExpectedSlotsCount' has a wrong offset!");

// Function Tempest.TedContentPanelDynamic.GetInnerContentPanelOverride
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelDynamic_GetInnerContentPanelOverride final
{
public:
	const class UTedContentPanelSlotBase*         InContentSlot;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelDynamic_GetInnerContentPanelOverride) == 0x000008, "Wrong alignment on TedContentPanelDynamic_GetInnerContentPanelOverride");
static_assert(sizeof(TedContentPanelDynamic_GetInnerContentPanelOverride) == 0x000010, "Wrong size on TedContentPanelDynamic_GetInnerContentPanelOverride");
static_assert(offsetof(TedContentPanelDynamic_GetInnerContentPanelOverride, InContentSlot) == 0x000000, "Member 'TedContentPanelDynamic_GetInnerContentPanelOverride::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedContentPanelDynamic_GetInnerContentPanelOverride, ReturnValue) == 0x000008, "Member 'TedContentPanelDynamic_GetInnerContentPanelOverride::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelDynamic.GetSlotClassOverride
// 0x0018 (0x0018 - 0x0000)
struct TedContentPanelDynamic_GetSlotClassOverride final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedContentPanelSlotBase>   OutClass;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelDynamic_GetSlotClassOverride) == 0x000008, "Wrong alignment on TedContentPanelDynamic_GetSlotClassOverride");
static_assert(sizeof(TedContentPanelDynamic_GetSlotClassOverride) == 0x000018, "Wrong size on TedContentPanelDynamic_GetSlotClassOverride");
static_assert(offsetof(TedContentPanelDynamic_GetSlotClassOverride, InSlotIndex) == 0x000000, "Member 'TedContentPanelDynamic_GetSlotClassOverride::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelDynamic_GetSlotClassOverride, OutClass) == 0x000008, "Member 'TedContentPanelDynamic_GetSlotClassOverride::OutClass' has a wrong offset!");
static_assert(offsetof(TedContentPanelDynamic_GetSlotClassOverride, ReturnValue) == 0x000010, "Member 'TedContentPanelDynamic_GetSlotClassOverride::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.K2_SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_K2_SetContent final
{
public:
	TArray<class UTedEquipment*>                  InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_K2_SetContent) == 0x000008, "Wrong alignment on TedEquipmentPanel_K2_SetContent");
static_assert(sizeof(TedEquipmentPanel_K2_SetContent) == 0x000010, "Wrong size on TedEquipmentPanel_K2_SetContent");
static_assert(offsetof(TedEquipmentPanel_K2_SetContent, InContent) == 0x000000, "Member 'TedEquipmentPanel_K2_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.OnEditableTextBoxSearchStringChange
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_OnEditableTextBoxSearchStringChange final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_OnEditableTextBoxSearchStringChange) == 0x000008, "Wrong alignment on TedEquipmentPanel_OnEditableTextBoxSearchStringChange");
static_assert(sizeof(TedEquipmentPanel_OnEditableTextBoxSearchStringChange) == 0x000010, "Wrong size on TedEquipmentPanel_OnEditableTextBoxSearchStringChange");
static_assert(offsetof(TedEquipmentPanel_OnEditableTextBoxSearchStringChange, InText) == 0x000000, "Member 'TedEquipmentPanel_OnEditableTextBoxSearchStringChange::InText' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.RequestBuy
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentPanel_RequestBuy final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_RequestBuy) == 0x000008, "Wrong alignment on TedEquipmentPanel_RequestBuy");
static_assert(sizeof(TedEquipmentPanel_RequestBuy) == 0x000008, "Wrong size on TedEquipmentPanel_RequestBuy");
static_assert(offsetof(TedEquipmentPanel_RequestBuy, InEquipmentSlot) == 0x000000, "Member 'TedEquipmentPanel_RequestBuy::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.RequestEquip
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentPanel_RequestEquip final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_RequestEquip) == 0x000008, "Wrong alignment on TedEquipmentPanel_RequestEquip");
static_assert(sizeof(TedEquipmentPanel_RequestEquip) == 0x000008, "Wrong size on TedEquipmentPanel_RequestEquip");
static_assert(offsetof(TedEquipmentPanel_RequestEquip, InEquipmentSlot) == 0x000000, "Member 'TedEquipmentPanel_RequestEquip::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.RequestUnequip
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentPanel_RequestUnequip final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_RequestUnequip) == 0x000008, "Wrong alignment on TedEquipmentPanel_RequestUnequip");
static_assert(sizeof(TedEquipmentPanel_RequestUnequip) == 0x000008, "Wrong size on TedEquipmentPanel_RequestUnequip");
static_assert(offsetof(TedEquipmentPanel_RequestUnequip, InEquipmentSlot) == 0x000000, "Member 'TedEquipmentPanel_RequestUnequip::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.SetFilterType
// 0x0001 (0x0001 - 0x0000)
struct TedEquipmentPanel_SetFilterType final
{
public:
	ETedEquipmentPanelFilterOptionType            InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_SetFilterType) == 0x000001, "Wrong alignment on TedEquipmentPanel_SetFilterType");
static_assert(sizeof(TedEquipmentPanel_SetFilterType) == 0x000001, "Wrong size on TedEquipmentPanel_SetFilterType");
static_assert(offsetof(TedEquipmentPanel_SetFilterType, InType) == 0x000000, "Member 'TedEquipmentPanel_SetFilterType::InType' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.SetSearchString
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_SetSearchString final
{
public:
	class FString                                 InSearchString;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_SetSearchString) == 0x000008, "Wrong alignment on TedEquipmentPanel_SetSearchString");
static_assert(sizeof(TedEquipmentPanel_SetSearchString) == 0x000010, "Wrong size on TedEquipmentPanel_SetSearchString");
static_assert(offsetof(TedEquipmentPanel_SetSearchString, InSearchString) == 0x000000, "Member 'TedEquipmentPanel_SetSearchString::InSearchString' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.CanEquipmentBeEquipped
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_CanEquipmentBeEquipped final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_CanEquipmentBeEquipped) == 0x000008, "Wrong alignment on TedEquipmentPanel_CanEquipmentBeEquipped");
static_assert(sizeof(TedEquipmentPanel_CanEquipmentBeEquipped) == 0x000010, "Wrong size on TedEquipmentPanel_CanEquipmentBeEquipped");
static_assert(offsetof(TedEquipmentPanel_CanEquipmentBeEquipped, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_CanEquipmentBeEquipped::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_CanEquipmentBeEquipped, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_CanEquipmentBeEquipped::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.CanEquipmentBePurchased
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_CanEquipmentBePurchased final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_CanEquipmentBePurchased) == 0x000008, "Wrong alignment on TedEquipmentPanel_CanEquipmentBePurchased");
static_assert(sizeof(TedEquipmentPanel_CanEquipmentBePurchased) == 0x000010, "Wrong size on TedEquipmentPanel_CanEquipmentBePurchased");
static_assert(offsetof(TedEquipmentPanel_CanEquipmentBePurchased, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_CanEquipmentBePurchased::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_CanEquipmentBePurchased, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_CanEquipmentBePurchased::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.GetCurrentFilterType
// 0x0001 (0x0001 - 0x0000)
struct TedEquipmentPanel_GetCurrentFilterType final
{
public:
	ETedEquipmentPanelFilterOptionType            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_GetCurrentFilterType) == 0x000001, "Wrong alignment on TedEquipmentPanel_GetCurrentFilterType");
static_assert(sizeof(TedEquipmentPanel_GetCurrentFilterType) == 0x000001, "Wrong size on TedEquipmentPanel_GetCurrentFilterType");
static_assert(offsetof(TedEquipmentPanel_GetCurrentFilterType, ReturnValue) == 0x000000, "Member 'TedEquipmentPanel_GetCurrentFilterType::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.GetRemainingRequisitionPoints
// 0x0004 (0x0004 - 0x0000)
struct TedEquipmentPanel_GetRemainingRequisitionPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_GetRemainingRequisitionPoints) == 0x000004, "Wrong alignment on TedEquipmentPanel_GetRemainingRequisitionPoints");
static_assert(sizeof(TedEquipmentPanel_GetRemainingRequisitionPoints) == 0x000004, "Wrong size on TedEquipmentPanel_GetRemainingRequisitionPoints");
static_assert(offsetof(TedEquipmentPanel_GetRemainingRequisitionPoints, ReturnValue) == 0x000000, "Member 'TedEquipmentPanel_GetRemainingRequisitionPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.GetSearchString
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_GetSearchString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentPanel_GetSearchString) == 0x000008, "Wrong alignment on TedEquipmentPanel_GetSearchString");
static_assert(sizeof(TedEquipmentPanel_GetSearchString) == 0x000010, "Wrong size on TedEquipmentPanel_GetSearchString");
static_assert(offsetof(TedEquipmentPanel_GetSearchString, ReturnValue) == 0x000000, "Member 'TedEquipmentPanel_GetSearchString::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.HasRequisitionForEquipment
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_HasRequisitionForEquipment final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_HasRequisitionForEquipment) == 0x000008, "Wrong alignment on TedEquipmentPanel_HasRequisitionForEquipment");
static_assert(sizeof(TedEquipmentPanel_HasRequisitionForEquipment) == 0x000010, "Wrong size on TedEquipmentPanel_HasRequisitionForEquipment");
static_assert(offsetof(TedEquipmentPanel_HasRequisitionForEquipment, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_HasRequisitionForEquipment::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_HasRequisitionForEquipment, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_HasRequisitionForEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.HasSpaceForEquipment
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_HasSpaceForEquipment final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_HasSpaceForEquipment) == 0x000008, "Wrong alignment on TedEquipmentPanel_HasSpaceForEquipment");
static_assert(sizeof(TedEquipmentPanel_HasSpaceForEquipment) == 0x000010, "Wrong size on TedEquipmentPanel_HasSpaceForEquipment");
static_assert(offsetof(TedEquipmentPanel_HasSpaceForEquipment, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_HasSpaceForEquipment::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_HasSpaceForEquipment, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_HasSpaceForEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.IsEquipmentEquipped
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_IsEquipmentEquipped final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_IsEquipmentEquipped) == 0x000008, "Wrong alignment on TedEquipmentPanel_IsEquipmentEquipped");
static_assert(sizeof(TedEquipmentPanel_IsEquipmentEquipped) == 0x000010, "Wrong size on TedEquipmentPanel_IsEquipmentEquipped");
static_assert(offsetof(TedEquipmentPanel_IsEquipmentEquipped, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_IsEquipmentEquipped::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_IsEquipmentEquipped, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_IsEquipmentEquipped::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentPanel.IsEquipmentPurchased
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentPanel_IsEquipmentPurchased final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEquipmentPanel_IsEquipmentPurchased) == 0x000008, "Wrong alignment on TedEquipmentPanel_IsEquipmentPurchased");
static_assert(sizeof(TedEquipmentPanel_IsEquipmentPurchased) == 0x000010, "Wrong size on TedEquipmentPanel_IsEquipmentPurchased");
static_assert(offsetof(TedEquipmentPanel_IsEquipmentPurchased, InEquipment) == 0x000000, "Member 'TedEquipmentPanel_IsEquipmentPurchased::InEquipment' has a wrong offset!");
static_assert(offsetof(TedEquipmentPanel_IsEquipmentPurchased, ReturnValue) == 0x000008, "Member 'TedEquipmentPanel_IsEquipmentPurchased::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetInfinitePatrol
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_SetInfinitePatrol final
{
public:
	bool                                          bInfinitePatrol;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetInfinitePatrol) == 0x000001, "Wrong alignment on AIMission_Patrol_SetInfinitePatrol");
static_assert(sizeof(AIMission_Patrol_SetInfinitePatrol) == 0x000001, "Wrong size on AIMission_Patrol_SetInfinitePatrol");
static_assert(offsetof(AIMission_Patrol_SetInfinitePatrol, bInfinitePatrol) == 0x000000, "Member 'AIMission_Patrol_SetInfinitePatrol::bInfinitePatrol' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetNumRepeats
// 0x0008 (0x0008 - 0x0000)
struct AIMission_Patrol_SetNumRepeats final
{
public:
	int32                                         NumRepeats_0;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartRepeatsCounter;                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_Patrol_SetNumRepeats) == 0x000004, "Wrong alignment on AIMission_Patrol_SetNumRepeats");
static_assert(sizeof(AIMission_Patrol_SetNumRepeats) == 0x000008, "Wrong size on AIMission_Patrol_SetNumRepeats");
static_assert(offsetof(AIMission_Patrol_SetNumRepeats, NumRepeats_0) == 0x000000, "Member 'AIMission_Patrol_SetNumRepeats::NumRepeats_0' has a wrong offset!");
static_assert(offsetof(AIMission_Patrol_SetNumRepeats, bRestartRepeatsCounter) == 0x000004, "Member 'AIMission_Patrol_SetNumRepeats::bRestartRepeatsCounter' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetPatrolMode
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_SetPatrolMode final
{
public:
	EAIMissionPatrolMode                          PatrolMode_0;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetPatrolMode) == 0x000001, "Wrong alignment on AIMission_Patrol_SetPatrolMode");
static_assert(sizeof(AIMission_Patrol_SetPatrolMode) == 0x000001, "Wrong size on AIMission_Patrol_SetPatrolMode");
static_assert(offsetof(AIMission_Patrol_SetPatrolMode, PatrolMode_0) == 0x000000, "Member 'AIMission_Patrol_SetPatrolMode::PatrolMode_0' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetStartAtClosestWaypoint
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_SetStartAtClosestWaypoint final
{
public:
	bool                                          bStartAtClosestWaypoint_0;                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetStartAtClosestWaypoint) == 0x000001, "Wrong alignment on AIMission_Patrol_SetStartAtClosestWaypoint");
static_assert(sizeof(AIMission_Patrol_SetStartAtClosestWaypoint) == 0x000001, "Wrong size on AIMission_Patrol_SetStartAtClosestWaypoint");
static_assert(offsetof(AIMission_Patrol_SetStartAtClosestWaypoint, bStartAtClosestWaypoint_0) == 0x000000, "Member 'AIMission_Patrol_SetStartAtClosestWaypoint::bStartAtClosestWaypoint_0' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetWaypoints
// 0x0010 (0x0010 - 0x0000)
struct AIMission_Patrol_SetWaypoints final
{
public:
	TArray<struct FVector>                        Waypoints_0;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetWaypoints) == 0x000008, "Wrong alignment on AIMission_Patrol_SetWaypoints");
static_assert(sizeof(AIMission_Patrol_SetWaypoints) == 0x000010, "Wrong size on AIMission_Patrol_SetWaypoints");
static_assert(offsetof(AIMission_Patrol_SetWaypoints, Waypoints_0) == 0x000000, "Member 'AIMission_Patrol_SetWaypoints::Waypoints_0' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetWaypointsFromActorLocations
// 0x0010 (0x0010 - 0x0000)
struct AIMission_Patrol_SetWaypointsFromActorLocations final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetWaypointsFromActorLocations) == 0x000008, "Wrong alignment on AIMission_Patrol_SetWaypointsFromActorLocations");
static_assert(sizeof(AIMission_Patrol_SetWaypointsFromActorLocations) == 0x000010, "Wrong size on AIMission_Patrol_SetWaypointsFromActorLocations");
static_assert(offsetof(AIMission_Patrol_SetWaypointsFromActorLocations, Actors) == 0x000000, "Member 'AIMission_Patrol_SetWaypointsFromActorLocations::Actors' has a wrong offset!");

// Function Tempest.AIMission_Patrol.SetWaypointsFromAIRoute
// 0x0008 (0x0008 - 0x0000)
struct AIMission_Patrol_SetWaypointsFromAIRoute final
{
public:
	const class AAIRoute*                         AIRoute;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_SetWaypointsFromAIRoute) == 0x000008, "Wrong alignment on AIMission_Patrol_SetWaypointsFromAIRoute");
static_assert(sizeof(AIMission_Patrol_SetWaypointsFromAIRoute) == 0x000008, "Wrong size on AIMission_Patrol_SetWaypointsFromAIRoute");
static_assert(offsetof(AIMission_Patrol_SetWaypointsFromAIRoute, AIRoute) == 0x000000, "Member 'AIMission_Patrol_SetWaypointsFromAIRoute::AIRoute' has a wrong offset!");

// Function Tempest.AIMission_Patrol.GetNumRepeats
// 0x0004 (0x0004 - 0x0000)
struct AIMission_Patrol_GetNumRepeats final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_GetNumRepeats) == 0x000004, "Wrong alignment on AIMission_Patrol_GetNumRepeats");
static_assert(sizeof(AIMission_Patrol_GetNumRepeats) == 0x000004, "Wrong size on AIMission_Patrol_GetNumRepeats");
static_assert(offsetof(AIMission_Patrol_GetNumRepeats, ReturnValue) == 0x000000, "Member 'AIMission_Patrol_GetNumRepeats::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Patrol.GetPatrolMode
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_GetPatrolMode final
{
public:
	EAIMissionPatrolMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_GetPatrolMode) == 0x000001, "Wrong alignment on AIMission_Patrol_GetPatrolMode");
static_assert(sizeof(AIMission_Patrol_GetPatrolMode) == 0x000001, "Wrong size on AIMission_Patrol_GetPatrolMode");
static_assert(offsetof(AIMission_Patrol_GetPatrolMode, ReturnValue) == 0x000000, "Member 'AIMission_Patrol_GetPatrolMode::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Patrol.IsInfinitePatrol
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_IsInfinitePatrol final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_IsInfinitePatrol) == 0x000001, "Wrong alignment on AIMission_Patrol_IsInfinitePatrol");
static_assert(sizeof(AIMission_Patrol_IsInfinitePatrol) == 0x000001, "Wrong size on AIMission_Patrol_IsInfinitePatrol");
static_assert(offsetof(AIMission_Patrol_IsInfinitePatrol, ReturnValue) == 0x000000, "Member 'AIMission_Patrol_IsInfinitePatrol::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Patrol.ShouldStartAtClosestWaypoint
// 0x0001 (0x0001 - 0x0000)
struct AIMission_Patrol_ShouldStartAtClosestWaypoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Patrol_ShouldStartAtClosestWaypoint) == 0x000001, "Wrong alignment on AIMission_Patrol_ShouldStartAtClosestWaypoint");
static_assert(sizeof(AIMission_Patrol_ShouldStartAtClosestWaypoint) == 0x000001, "Wrong size on AIMission_Patrol_ShouldStartAtClosestWaypoint");
static_assert(offsetof(AIMission_Patrol_ShouldStartAtClosestWaypoint, ReturnValue) == 0x000000, "Member 'AIMission_Patrol_ShouldStartAtClosestWaypoint::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.OnStructureActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct AIMission_RebuildStructures_OnStructureActorDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_OnStructureActorDestroyed) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_OnStructureActorDestroyed");
static_assert(sizeof(AIMission_RebuildStructures_OnStructureActorDestroyed) == 0x000008, "Wrong size on AIMission_RebuildStructures_OnStructureActorDestroyed");
static_assert(offsetof(AIMission_RebuildStructures_OnStructureActorDestroyed, Actor) == 0x000000, "Member 'AIMission_RebuildStructures_OnStructureActorDestroyed::Actor' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructure
// 0x0008 (0x0008 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructure final
{
public:
	class ATedStructureBase*                      Structure;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructure) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_RegisterStructure");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructure) == 0x000008, "Wrong size on AIMission_RebuildStructures_RegisterStructure");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructure, Structure) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructure::Structure' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructures
// 0x0010 (0x0010 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructures final
{
public:
	TArray<class ATedStructureBase*>              Structures;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructures) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_RegisterStructures");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructures) == 0x000010, "Wrong size on AIMission_RebuildStructures_RegisterStructures");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructures, Structures) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructures::Structures' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructuresByActorTag
// 0x0028 (0x0028 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructuresByActorTag final
{
public:
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructuresByActorTag) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_RegisterStructuresByActorTag");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructuresByActorTag) == 0x000028, "Wrong size on AIMission_RebuildStructures_RegisterStructuresByActorTag");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByActorTag, ActorTags) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructuresByActorTag::ActorTags' has a wrong offset!");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByActorTag, bExactMatch) == 0x000020, "Member 'AIMission_RebuildStructures_RegisterStructuresByActorTag::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructuresByDefinitionId
// 0x0028 (0x0028 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructuresByDefinitionId final
{
public:
	struct FGameplayTagContainer                  DefinitionIds;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructuresByDefinitionId) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_RegisterStructuresByDefinitionId");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructuresByDefinitionId) == 0x000028, "Wrong size on AIMission_RebuildStructures_RegisterStructuresByDefinitionId");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByDefinitionId, DefinitionIds) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructuresByDefinitionId::DefinitionIds' has a wrong offset!");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByDefinitionId, bExactMatch) == 0x000020, "Member 'AIMission_RebuildStructures_RegisterStructuresByDefinitionId::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructuresByOwnedTags
// 0x0028 (0x0028 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructuresByOwnedTags final
{
public:
	struct FGameplayTagContainer                  Tags;                                              // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	EGameplayContainerMatchType                   MatchType;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructuresByOwnedTags) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_RegisterStructuresByOwnedTags");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructuresByOwnedTags) == 0x000028, "Wrong size on AIMission_RebuildStructures_RegisterStructuresByOwnedTags");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByOwnedTags, Tags) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructuresByOwnedTags::Tags' has a wrong offset!");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByOwnedTags, MatchType) == 0x000020, "Member 'AIMission_RebuildStructures_RegisterStructuresByOwnedTags::MatchType' has a wrong offset!");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByOwnedTags, bExactMatch) == 0x000021, "Member 'AIMission_RebuildStructures_RegisterStructuresByOwnedTags::bExactMatch' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.RegisterStructuresByType
// 0x0001 (0x0001 - 0x0000)
struct AIMission_RebuildStructures_RegisterStructuresByType final
{
public:
	EAIMissionRebuildStructureType                StructureType;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_RegisterStructuresByType) == 0x000001, "Wrong alignment on AIMission_RebuildStructures_RegisterStructuresByType");
static_assert(sizeof(AIMission_RebuildStructures_RegisterStructuresByType) == 0x000001, "Wrong size on AIMission_RebuildStructures_RegisterStructuresByType");
static_assert(offsetof(AIMission_RebuildStructures_RegisterStructuresByType, StructureType) == 0x000000, "Member 'AIMission_RebuildStructures_RegisterStructuresByType::StructureType' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.SetIgnorePrerequisites
// 0x0001 (0x0001 - 0x0000)
struct AIMission_RebuildStructures_SetIgnorePrerequisites final
{
public:
	bool                                          bIgnorePrerequisites_0;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_SetIgnorePrerequisites) == 0x000001, "Wrong alignment on AIMission_RebuildStructures_SetIgnorePrerequisites");
static_assert(sizeof(AIMission_RebuildStructures_SetIgnorePrerequisites) == 0x000001, "Wrong size on AIMission_RebuildStructures_SetIgnorePrerequisites");
static_assert(offsetof(AIMission_RebuildStructures_SetIgnorePrerequisites, bIgnorePrerequisites_0) == 0x000000, "Member 'AIMission_RebuildStructures_SetIgnorePrerequisites::bIgnorePrerequisites_0' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.SetMaxRebuildCount
// 0x0004 (0x0004 - 0x0000)
struct AIMission_RebuildStructures_SetMaxRebuildCount final
{
public:
	int32                                         MaxRebuildCount_0;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_SetMaxRebuildCount) == 0x000004, "Wrong alignment on AIMission_RebuildStructures_SetMaxRebuildCount");
static_assert(sizeof(AIMission_RebuildStructures_SetMaxRebuildCount) == 0x000004, "Wrong size on AIMission_RebuildStructures_SetMaxRebuildCount");
static_assert(offsetof(AIMission_RebuildStructures_SetMaxRebuildCount, MaxRebuildCount_0) == 0x000000, "Member 'AIMission_RebuildStructures_SetMaxRebuildCount::MaxRebuildCount_0' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.SetRebuildDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_RebuildStructures_SetRebuildDelay final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_SetRebuildDelay) == 0x000004, "Wrong alignment on AIMission_RebuildStructures_SetRebuildDelay");
static_assert(sizeof(AIMission_RebuildStructures_SetRebuildDelay) == 0x000004, "Wrong size on AIMission_RebuildStructures_SetRebuildDelay");
static_assert(offsetof(AIMission_RebuildStructures_SetRebuildDelay, Delay) == 0x000000, "Member 'AIMission_RebuildStructures_SetRebuildDelay::Delay' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.UnregisterStructure
// 0x0008 (0x0008 - 0x0000)
struct AIMission_RebuildStructures_UnregisterStructure final
{
public:
	class ATedStructureBase*                      Structure;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_UnregisterStructure) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_UnregisterStructure");
static_assert(sizeof(AIMission_RebuildStructures_UnregisterStructure) == 0x000008, "Wrong size on AIMission_RebuildStructures_UnregisterStructure");
static_assert(offsetof(AIMission_RebuildStructures_UnregisterStructure, Structure) == 0x000000, "Member 'AIMission_RebuildStructures_UnregisterStructure::Structure' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.UnregisterStructures
// 0x0010 (0x0010 - 0x0000)
struct AIMission_RebuildStructures_UnregisterStructures final
{
public:
	TArray<class ATedStructureBase*>              Structures;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_UnregisterStructures) == 0x000008, "Wrong alignment on AIMission_RebuildStructures_UnregisterStructures");
static_assert(sizeof(AIMission_RebuildStructures_UnregisterStructures) == 0x000010, "Wrong size on AIMission_RebuildStructures_UnregisterStructures");
static_assert(offsetof(AIMission_RebuildStructures_UnregisterStructures, Structures) == 0x000000, "Member 'AIMission_RebuildStructures_UnregisterStructures::Structures' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.GetIgnorePrerequisites
// 0x0001 (0x0001 - 0x0000)
struct AIMission_RebuildStructures_GetIgnorePrerequisites final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_GetIgnorePrerequisites) == 0x000001, "Wrong alignment on AIMission_RebuildStructures_GetIgnorePrerequisites");
static_assert(sizeof(AIMission_RebuildStructures_GetIgnorePrerequisites) == 0x000001, "Wrong size on AIMission_RebuildStructures_GetIgnorePrerequisites");
static_assert(offsetof(AIMission_RebuildStructures_GetIgnorePrerequisites, ReturnValue) == 0x000000, "Member 'AIMission_RebuildStructures_GetIgnorePrerequisites::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.GetMaxRebuildCount
// 0x0004 (0x0004 - 0x0000)
struct AIMission_RebuildStructures_GetMaxRebuildCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_GetMaxRebuildCount) == 0x000004, "Wrong alignment on AIMission_RebuildStructures_GetMaxRebuildCount");
static_assert(sizeof(AIMission_RebuildStructures_GetMaxRebuildCount) == 0x000004, "Wrong size on AIMission_RebuildStructures_GetMaxRebuildCount");
static_assert(offsetof(AIMission_RebuildStructures_GetMaxRebuildCount, ReturnValue) == 0x000000, "Member 'AIMission_RebuildStructures_GetMaxRebuildCount::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_RebuildStructures.GetRebuildDelay
// 0x0004 (0x0004 - 0x0000)
struct AIMission_RebuildStructures_GetRebuildDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_RebuildStructures_GetRebuildDelay) == 0x000004, "Wrong alignment on AIMission_RebuildStructures_GetRebuildDelay");
static_assert(sizeof(AIMission_RebuildStructures_GetRebuildDelay) == 0x000004, "Wrong size on AIMission_RebuildStructures_GetRebuildDelay");
static_assert(offsetof(AIMission_RebuildStructures_GetRebuildDelay, ReturnValue) == 0x000000, "Member 'AIMission_RebuildStructures_GetRebuildDelay::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetAvailableKeyBindingsSorted
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetAvailableKeyBindingsSorted final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetAvailableKeyBindingsSorted) == 0x000008, "Wrong alignment on TedCommand_GetAvailableKeyBindingsSorted");
static_assert(sizeof(TedCommand_GetAvailableKeyBindingsSorted) == 0x000010, "Wrong size on TedCommand_GetAvailableKeyBindingsSorted");
static_assert(offsetof(TedCommand_GetAvailableKeyBindingsSorted, ReturnValue) == 0x000000, "Member 'TedCommand_GetAvailableKeyBindingsSorted::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetCreditCost
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetCreditCost final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommand_GetCreditCost) == 0x000008, "Wrong alignment on TedCommand_GetCreditCost");
static_assert(sizeof(TedCommand_GetCreditCost) == 0x000010, "Wrong size on TedCommand_GetCreditCost");
static_assert(offsetof(TedCommand_GetCreditCost, CommandActor) == 0x000000, "Member 'TedCommand_GetCreditCost::CommandActor' has a wrong offset!");
static_assert(offsetof(TedCommand_GetCreditCost, ReturnValue) == 0x000008, "Member 'TedCommand_GetCreditCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetCursorConfig
// 0x0008 (0x0008 - 0x0000)
struct TedCommand_GetCursorConfig final
{
public:
	const class UTedCursorConfig*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetCursorConfig) == 0x000008, "Wrong alignment on TedCommand_GetCursorConfig");
static_assert(sizeof(TedCommand_GetCursorConfig) == 0x000008, "Wrong size on TedCommand_GetCursorConfig");
static_assert(offsetof(TedCommand_GetCursorConfig, ReturnValue) == 0x000000, "Member 'TedCommand_GetCursorConfig::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetDisplayCursor
// 0x0008 (0x0008 - 0x0000)
struct TedCommand_GetDisplayCursor final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetDisplayCursor) == 0x000008, "Wrong alignment on TedCommand_GetDisplayCursor");
static_assert(sizeof(TedCommand_GetDisplayCursor) == 0x000008, "Wrong size on TedCommand_GetDisplayCursor");
static_assert(offsetof(TedCommand_GetDisplayCursor, ReturnValue) == 0x000000, "Member 'TedCommand_GetDisplayCursor::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetDisplayDescription
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetDisplayDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetDisplayDescription) == 0x000008, "Wrong alignment on TedCommand_GetDisplayDescription");
static_assert(sizeof(TedCommand_GetDisplayDescription) == 0x000010, "Wrong size on TedCommand_GetDisplayDescription");
static_assert(offsetof(TedCommand_GetDisplayDescription, ReturnValue) == 0x000000, "Member 'TedCommand_GetDisplayDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetDisplayIcon
// 0x0008 (0x0008 - 0x0000)
struct TedCommand_GetDisplayIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetDisplayIcon) == 0x000008, "Wrong alignment on TedCommand_GetDisplayIcon");
static_assert(sizeof(TedCommand_GetDisplayIcon) == 0x000008, "Wrong size on TedCommand_GetDisplayIcon");
static_assert(offsetof(TedCommand_GetDisplayIcon, ReturnValue) == 0x000000, "Member 'TedCommand_GetDisplayIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetDisplayName) == 0x000008, "Wrong alignment on TedCommand_GetDisplayName");
static_assert(sizeof(TedCommand_GetDisplayName) == 0x000010, "Wrong size on TedCommand_GetDisplayName");
static_assert(offsetof(TedCommand_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedCommand_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetDisplaySection
// 0x0001 (0x0001 - 0x0000)
struct TedCommand_GetDisplaySection final
{
public:
	ETedCommandDisplaySection                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetDisplaySection) == 0x000001, "Wrong alignment on TedCommand_GetDisplaySection");
static_assert(sizeof(TedCommand_GetDisplaySection) == 0x000001, "Wrong size on TedCommand_GetDisplaySection");
static_assert(offsetof(TedCommand_GetDisplaySection, ReturnValue) == 0x000000, "Member 'TedCommand_GetDisplaySection::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetIntelCost
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetIntelCost final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommand_GetIntelCost) == 0x000008, "Wrong alignment on TedCommand_GetIntelCost");
static_assert(sizeof(TedCommand_GetIntelCost) == 0x000010, "Wrong size on TedCommand_GetIntelCost");
static_assert(offsetof(TedCommand_GetIntelCost, CommandActor) == 0x000000, "Member 'TedCommand_GetIntelCost::CommandActor' has a wrong offset!");
static_assert(offsetof(TedCommand_GetIntelCost, ReturnValue) == 0x000008, "Member 'TedCommand_GetIntelCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetIsAlternating
// 0x0001 (0x0001 - 0x0000)
struct TedCommand_GetIsAlternating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommand_GetIsAlternating) == 0x000001, "Wrong alignment on TedCommand_GetIsAlternating");
static_assert(sizeof(TedCommand_GetIsAlternating) == 0x000001, "Wrong size on TedCommand_GetIsAlternating");
static_assert(offsetof(TedCommand_GetIsAlternating, ReturnValue) == 0x000000, "Member 'TedCommand_GetIsAlternating::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetPopulationCost
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetPopulationCost final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommand_GetPopulationCost) == 0x000008, "Wrong alignment on TedCommand_GetPopulationCost");
static_assert(sizeof(TedCommand_GetPopulationCost) == 0x000010, "Wrong size on TedCommand_GetPopulationCost");
static_assert(offsetof(TedCommand_GetPopulationCost, CommandActor) == 0x000000, "Member 'TedCommand_GetPopulationCost::CommandActor' has a wrong offset!");
static_assert(offsetof(TedCommand_GetPopulationCost, ReturnValue) == 0x000008, "Member 'TedCommand_GetPopulationCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommand.GetPowerCost
// 0x0010 (0x0010 - 0x0000)
struct TedCommand_GetPowerCost final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommand_GetPowerCost) == 0x000008, "Wrong alignment on TedCommand_GetPowerCost");
static_assert(sizeof(TedCommand_GetPowerCost) == 0x000010, "Wrong size on TedCommand_GetPowerCost");
static_assert(offsetof(TedCommand_GetPowerCost, CommandActor) == 0x000000, "Member 'TedCommand_GetPowerCost::CommandActor' has a wrong offset!");
static_assert(offsetof(TedCommand_GetPowerCost, ReturnValue) == 0x000008, "Member 'TedCommand_GetPowerCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaFactionPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaFactionPanel_SetContent final
{
public:
	TArray<struct FEncyclopediaFactoryPanelInfo>  NewContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaFactionPanel_SetContent) == 0x000008, "Wrong alignment on TedEncyclopediaFactionPanel_SetContent");
static_assert(sizeof(TedEncyclopediaFactionPanel_SetContent) == 0x000010, "Wrong size on TedEncyclopediaFactionPanel_SetContent");
static_assert(offsetof(TedEncyclopediaFactionPanel_SetContent, NewContent) == 0x000000, "Member 'TedEncyclopediaFactionPanel_SetContent::NewContent' has a wrong offset!");

// Function Tempest.TedEncyclopediaFactionPanel.GetContent
// 0x0020 (0x0020 - 0x0000)
struct TedEncyclopediaFactionPanel_GetContent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEncyclopediaFactoryPanelInfo          ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaFactionPanel_GetContent) == 0x000008, "Wrong alignment on TedEncyclopediaFactionPanel_GetContent");
static_assert(sizeof(TedEncyclopediaFactionPanel_GetContent) == 0x000020, "Wrong size on TedEncyclopediaFactionPanel_GetContent");
static_assert(offsetof(TedEncyclopediaFactionPanel_GetContent, Index_0) == 0x000000, "Member 'TedEncyclopediaFactionPanel_GetContent::Index_0' has a wrong offset!");
static_assert(offsetof(TedEncyclopediaFactionPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedEncyclopediaFactionPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.ActivateState
// 0x0002 (0x0002 - 0x0000)
struct TedContentPanelSlotBase_ActivateState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_ActivateState) == 0x000001, "Wrong alignment on TedContentPanelSlotBase_ActivateState");
static_assert(sizeof(TedContentPanelSlotBase_ActivateState) == 0x000002, "Wrong size on TedContentPanelSlotBase_ActivateState");
static_assert(offsetof(TedContentPanelSlotBase_ActivateState, InState) == 0x000000, "Member 'TedContentPanelSlotBase_ActivateState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_ActivateState, bInActivate) == 0x000001, "Member 'TedContentPanelSlotBase_ActivateState::bInActivate' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.K2_GetParentContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelSlotBase_K2_GetParentContentPanel final
{
public:
	class UTedContentPanelBase*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_K2_GetParentContentPanel) == 0x000008, "Wrong alignment on TedContentPanelSlotBase_K2_GetParentContentPanel");
static_assert(sizeof(TedContentPanelSlotBase_K2_GetParentContentPanel) == 0x000008, "Wrong size on TedContentPanelSlotBase_K2_GetParentContentPanel");
static_assert(offsetof(TedContentPanelSlotBase_K2_GetParentContentPanel, ReturnValue) == 0x000000, "Member 'TedContentPanelSlotBase_K2_GetParentContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.K2_GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelSlotBase_K2_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_K2_GetSlotIndex) == 0x000004, "Wrong alignment on TedContentPanelSlotBase_K2_GetSlotIndex");
static_assert(sizeof(TedContentPanelSlotBase_K2_GetSlotIndex) == 0x000004, "Wrong size on TedContentPanelSlotBase_K2_GetSlotIndex");
static_assert(offsetof(TedContentPanelSlotBase_K2_GetSlotIndex, ReturnValue) == 0x000000, "Member 'TedContentPanelSlotBase_K2_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.OnActivateState
// 0x0002 (0x0002 - 0x0000)
struct TedContentPanelSlotBase_OnActivateState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_OnActivateState) == 0x000001, "Wrong alignment on TedContentPanelSlotBase_OnActivateState");
static_assert(sizeof(TedContentPanelSlotBase_OnActivateState) == 0x000002, "Wrong size on TedContentPanelSlotBase_OnActivateState");
static_assert(offsetof(TedContentPanelSlotBase_OnActivateState, InState) == 0x000000, "Member 'TedContentPanelSlotBase_OnActivateState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_OnActivateState, bInActivated) == 0x000001, "Member 'TedContentPanelSlotBase_OnActivateState::bInActivated' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.OnTriggerAction
// 0x0001 (0x0001 - 0x0000)
struct TedContentPanelSlotBase_OnTriggerAction final
{
public:
	ETedContentSlotAction                         InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_OnTriggerAction) == 0x000001, "Wrong alignment on TedContentPanelSlotBase_OnTriggerAction");
static_assert(sizeof(TedContentPanelSlotBase_OnTriggerAction) == 0x000001, "Wrong size on TedContentPanelSlotBase_OnTriggerAction");
static_assert(offsetof(TedContentPanelSlotBase_OnTriggerAction, InAction) == 0x000000, "Member 'TedContentPanelSlotBase_OnTriggerAction::InAction' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.TriggerAction
// 0x0001 (0x0001 - 0x0000)
struct TedContentPanelSlotBase_TriggerAction final
{
public:
	ETedContentSlotAction                         InAction;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_TriggerAction) == 0x000001, "Wrong alignment on TedContentPanelSlotBase_TriggerAction");
static_assert(sizeof(TedContentPanelSlotBase_TriggerAction) == 0x000001, "Wrong size on TedContentPanelSlotBase_TriggerAction");
static_assert(offsetof(TedContentPanelSlotBase_TriggerAction, InAction) == 0x000000, "Member 'TedContentPanelSlotBase_TriggerAction::InAction' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.GetMaterialsSupportingStates
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelSlotBase_GetMaterialsSupportingStates final
{
public:
	TArray<class UMaterialInstanceDynamic*>       OutMIDs;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_GetMaterialsSupportingStates) == 0x000008, "Wrong alignment on TedContentPanelSlotBase_GetMaterialsSupportingStates");
static_assert(sizeof(TedContentPanelSlotBase_GetMaterialsSupportingStates) == 0x000010, "Wrong size on TedContentPanelSlotBase_GetMaterialsSupportingStates");
static_assert(offsetof(TedContentPanelSlotBase_GetMaterialsSupportingStates, OutMIDs) == 0x000000, "Member 'TedContentPanelSlotBase_GetMaterialsSupportingStates::OutMIDs' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.GetParentContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelSlotBase_GetParentContentPanel final
{
public:
	class UTedContentPanelBase*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_GetParentContentPanel) == 0x000008, "Wrong alignment on TedContentPanelSlotBase_GetParentContentPanel");
static_assert(sizeof(TedContentPanelSlotBase_GetParentContentPanel) == 0x000008, "Wrong size on TedContentPanelSlotBase_GetParentContentPanel");
static_assert(offsetof(TedContentPanelSlotBase_GetParentContentPanel, ReturnValue) == 0x000000, "Member 'TedContentPanelSlotBase_GetParentContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.GetSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct TedContentPanelSlotBase_GetSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_GetSlotIndex) == 0x000004, "Wrong alignment on TedContentPanelSlotBase_GetSlotIndex");
static_assert(sizeof(TedContentPanelSlotBase_GetSlotIndex) == 0x000004, "Wrong size on TedContentPanelSlotBase_GetSlotIndex");
static_assert(offsetof(TedContentPanelSlotBase_GetSlotIndex, ReturnValue) == 0x000000, "Member 'TedContentPanelSlotBase_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.IsStateActive
// 0x0002 (0x0002 - 0x0000)
struct TedContentPanelSlotBase_IsStateActive final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelSlotBase_IsStateActive) == 0x000001, "Wrong alignment on TedContentPanelSlotBase_IsStateActive");
static_assert(sizeof(TedContentPanelSlotBase_IsStateActive) == 0x000002, "Wrong size on TedContentPanelSlotBase_IsStateActive");
static_assert(offsetof(TedContentPanelSlotBase_IsStateActive, InState) == 0x000000, "Member 'TedContentPanelSlotBase_IsStateActive::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_IsStateActive, ReturnValue) == 0x000001, "Member 'TedContentPanelSlotBase_IsStateActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.K2_GetAssetSelector
// 0x0028 (0x0028 - 0x0000)
struct TedContentPanelSlotBase_K2_GetAssetSelector final
{
public:
	struct FGameplayTag                           InSelectorKey;                                     // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedContentSlotStateAssetSelector      Out;                                               // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelSlotBase_K2_GetAssetSelector) == 0x000008, "Wrong alignment on TedContentPanelSlotBase_K2_GetAssetSelector");
static_assert(sizeof(TedContentPanelSlotBase_K2_GetAssetSelector) == 0x000028, "Wrong size on TedContentPanelSlotBase_K2_GetAssetSelector");
static_assert(offsetof(TedContentPanelSlotBase_K2_GetAssetSelector, InSelectorKey) == 0x000000, "Member 'TedContentPanelSlotBase_K2_GetAssetSelector::InSelectorKey' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_K2_GetAssetSelector, Out) == 0x000008, "Member 'TedContentPanelSlotBase_K2_GetAssetSelector::Out' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_K2_GetAssetSelector, ReturnValue) == 0x000020, "Member 'TedContentPanelSlotBase_K2_GetAssetSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelSlotBase.RefreshWidgetUsingAssetSelector
// 0x0018 (0x0018 - 0x0000)
struct TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector final
{
public:
	struct FGameplayTag                           InSelectorKey;                                     // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InTargetWidget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector) == 0x000008, "Wrong alignment on TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector");
static_assert(sizeof(TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector) == 0x000018, "Wrong size on TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector");
static_assert(offsetof(TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector, InSelectorKey) == 0x000000, "Member 'TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector::InSelectorKey' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector, InTargetWidget) == 0x000008, "Member 'TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector::InTargetWidget' has a wrong offset!");
static_assert(offsetof(TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector, ReturnValue) == 0x000010, "Member 'TedContentPanelSlotBase_RefreshWidgetUsingAssetSelector::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_Scriptable.SetSquadOrder
// 0x0058 (0x0058 - 0x0000)
struct AIMission_Scriptable_SetSquadOrder final
{
public:
	struct FAISquadOrder                          Order;                                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMission_Scriptable_SetSquadOrder) == 0x000008, "Wrong alignment on AIMission_Scriptable_SetSquadOrder");
static_assert(sizeof(AIMission_Scriptable_SetSquadOrder) == 0x000058, "Wrong size on AIMission_Scriptable_SetSquadOrder");
static_assert(offsetof(AIMission_Scriptable_SetSquadOrder, Order) == 0x000000, "Member 'AIMission_Scriptable_SetSquadOrder::Order' has a wrong offset!");

// Function Tempest.TedPawnsPanel.AddContent
// 0x0018 (0x0018 - 0x0000)
struct TedPawnsPanel_AddContent final
{
public:
	TArray<class ATedPawn*>                       InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshUI;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_AddContent) == 0x000008, "Wrong alignment on TedPawnsPanel_AddContent");
static_assert(sizeof(TedPawnsPanel_AddContent) == 0x000018, "Wrong size on TedPawnsPanel_AddContent");
static_assert(offsetof(TedPawnsPanel_AddContent, InContent) == 0x000000, "Member 'TedPawnsPanel_AddContent::InContent' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_AddContent, bInRefreshUI) == 0x000010, "Member 'TedPawnsPanel_AddContent::bInRefreshUI' has a wrong offset!");

// Function Tempest.TedPawnsPanel.ClearContent
// 0x0001 (0x0001 - 0x0000)
struct TedPawnsPanel_ClearContent final
{
public:
	bool                                          bInRefreshUI;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanel_ClearContent) == 0x000001, "Wrong alignment on TedPawnsPanel_ClearContent");
static_assert(sizeof(TedPawnsPanel_ClearContent) == 0x000001, "Wrong size on TedPawnsPanel_ClearContent");
static_assert(offsetof(TedPawnsPanel_ClearContent, bInRefreshUI) == 0x000000, "Member 'TedPawnsPanel_ClearContent::bInRefreshUI' has a wrong offset!");

// Function Tempest.TedPawnsPanel.ContainsPawnOfClass
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_ContainsPawnOfClass final
{
public:
	TSubclassOf<class ATedPawn>                   InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_ContainsPawnOfClass) == 0x000008, "Wrong alignment on TedPawnsPanel_ContainsPawnOfClass");
static_assert(sizeof(TedPawnsPanel_ContainsPawnOfClass) == 0x000010, "Wrong size on TedPawnsPanel_ContainsPawnOfClass");
static_assert(offsetof(TedPawnsPanel_ContainsPawnOfClass, InClass) == 0x000000, "Member 'TedPawnsPanel_ContainsPawnOfClass::InClass' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_ContainsPawnOfClass, ReturnValue) == 0x000008, "Member 'TedPawnsPanel_ContainsPawnOfClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanel.OnPawnEndPlay_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_OnPawnEndPlay_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_OnPawnEndPlay_Handler) == 0x000008, "Wrong alignment on TedPawnsPanel_OnPawnEndPlay_Handler");
static_assert(sizeof(TedPawnsPanel_OnPawnEndPlay_Handler) == 0x000010, "Wrong size on TedPawnsPanel_OnPawnEndPlay_Handler");
static_assert(offsetof(TedPawnsPanel_OnPawnEndPlay_Handler, InActor) == 0x000000, "Member 'TedPawnsPanel_OnPawnEndPlay_Handler::InActor' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_OnPawnEndPlay_Handler, InEndPlayReason) == 0x000008, "Member 'TedPawnsPanel_OnPawnEndPlay_Handler::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedPawnsPanel.RemoveContent
// 0x0018 (0x0018 - 0x0000)
struct TedPawnsPanel_RemoveContent final
{
public:
	TArray<class ATedPawn*>                       InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshUI;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_RemoveContent) == 0x000008, "Wrong alignment on TedPawnsPanel_RemoveContent");
static_assert(sizeof(TedPawnsPanel_RemoveContent) == 0x000018, "Wrong size on TedPawnsPanel_RemoveContent");
static_assert(offsetof(TedPawnsPanel_RemoveContent, InContent) == 0x000000, "Member 'TedPawnsPanel_RemoveContent::InContent' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_RemoveContent, bInRefreshUI) == 0x000010, "Member 'TedPawnsPanel_RemoveContent::bInRefreshUI' has a wrong offset!");

// Function Tempest.TedPawnsPanel.SetContent
// 0x0018 (0x0018 - 0x0000)
struct TedPawnsPanel_SetContent final
{
public:
	TArray<class ATedPawn*>                       InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshUI;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_SetContent) == 0x000008, "Wrong alignment on TedPawnsPanel_SetContent");
static_assert(sizeof(TedPawnsPanel_SetContent) == 0x000018, "Wrong size on TedPawnsPanel_SetContent");
static_assert(offsetof(TedPawnsPanel_SetContent, InContent) == 0x000000, "Member 'TedPawnsPanel_SetContent::InContent' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_SetContent, bInRefreshUI) == 0x000010, "Member 'TedPawnsPanel_SetContent::bInRefreshUI' has a wrong offset!");

// Function Tempest.TedPawnsPanel.GetAllContent
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_GetAllContent final
{
public:
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanel_GetAllContent) == 0x000008, "Wrong alignment on TedPawnsPanel_GetAllContent");
static_assert(sizeof(TedPawnsPanel_GetAllContent) == 0x000010, "Wrong size on TedPawnsPanel_GetAllContent");
static_assert(offsetof(TedPawnsPanel_GetAllContent, ReturnValue) == 0x000000, "Member 'TedPawnsPanel_GetAllContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanel.GetContentIndex
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_GetContentIndex final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnsPanel_GetContentIndex) == 0x000008, "Wrong alignment on TedPawnsPanel_GetContentIndex");
static_assert(sizeof(TedPawnsPanel_GetContentIndex) == 0x000010, "Wrong size on TedPawnsPanel_GetContentIndex");
static_assert(offsetof(TedPawnsPanel_GetContentIndex, InPawn) == 0x000000, "Member 'TedPawnsPanel_GetContentIndex::InPawn' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_GetContentIndex, ReturnValue) == 0x000008, "Member 'TedPawnsPanel_GetContentIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanel.GetContentSlotByContent
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_GetContentSlotByContent final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanel_GetContentSlotByContent) == 0x000008, "Wrong alignment on TedPawnsPanel_GetContentSlotByContent");
static_assert(sizeof(TedPawnsPanel_GetContentSlotByContent) == 0x000010, "Wrong size on TedPawnsPanel_GetContentSlotByContent");
static_assert(offsetof(TedPawnsPanel_GetContentSlotByContent, InPawn) == 0x000000, "Member 'TedPawnsPanel_GetContentSlotByContent::InPawn' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_GetContentSlotByContent, ReturnValue) == 0x000008, "Member 'TedPawnsPanel_GetContentSlotByContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanel.GetSlotContent
// 0x0010 (0x0010 - 0x0000)
struct TedPawnsPanel_GetSlotContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPawn*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanel_GetSlotContent) == 0x000008, "Wrong alignment on TedPawnsPanel_GetSlotContent");
static_assert(sizeof(TedPawnsPanel_GetSlotContent) == 0x000010, "Wrong size on TedPawnsPanel_GetSlotContent");
static_assert(offsetof(TedPawnsPanel_GetSlotContent, InSlotIndex) == 0x000000, "Member 'TedPawnsPanel_GetSlotContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPawnsPanel_GetSlotContent, ReturnValue) == 0x000008, "Member 'TedPawnsPanel_GetSlotContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanel.ShouldGeneratePawnDamagedEvents
// 0x0001 (0x0001 - 0x0000)
struct TedPawnsPanel_ShouldGeneratePawnDamagedEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanel_ShouldGeneratePawnDamagedEvents) == 0x000001, "Wrong alignment on TedPawnsPanel_ShouldGeneratePawnDamagedEvents");
static_assert(sizeof(TedPawnsPanel_ShouldGeneratePawnDamagedEvents) == 0x000001, "Wrong size on TedPawnsPanel_ShouldGeneratePawnDamagedEvents");
static_assert(offsetof(TedPawnsPanel_ShouldGeneratePawnDamagedEvents, ReturnValue) == 0x000000, "Member 'TedPawnsPanel_ShouldGeneratePawnDamagedEvents::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.SetCurrentRow
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionDetailsPawnsGrid_SetCurrentRow final
{
public:
	int32                                         InRow;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_SetCurrentRow) == 0x000004, "Wrong alignment on TedSelectionDetailsPawnsGrid_SetCurrentRow");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_SetCurrentRow) == 0x000004, "Wrong size on TedSelectionDetailsPawnsGrid_SetCurrentRow");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_SetCurrentRow, InRow) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_SetCurrentRow::InRow' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.SwitchRow
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsPawnsGrid_SwitchRow final
{
public:
	bool                                          bInUp;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_SwitchRow) == 0x000001, "Wrong alignment on TedSelectionDetailsPawnsGrid_SwitchRow");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_SwitchRow) == 0x000001, "Wrong size on TedSelectionDetailsPawnsGrid_SwitchRow");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_SwitchRow, bInUp) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_SwitchRow::bInUp' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.CanSwitch
// 0x0002 (0x0002 - 0x0000)
struct TedSelectionDetailsPawnsGrid_CanSwitch final
{
public:
	bool                                          bInUp;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_CanSwitch) == 0x000001, "Wrong alignment on TedSelectionDetailsPawnsGrid_CanSwitch");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_CanSwitch) == 0x000002, "Wrong size on TedSelectionDetailsPawnsGrid_CanSwitch");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_CanSwitch, bInUp) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_CanSwitch::bInUp' has a wrong offset!");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_CanSwitch, ReturnValue) == 0x000001, "Member 'TedSelectionDetailsPawnsGrid_CanSwitch::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.CanSwitchDown
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsPawnsGrid_CanSwitchDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_CanSwitchDown) == 0x000001, "Wrong alignment on TedSelectionDetailsPawnsGrid_CanSwitchDown");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_CanSwitchDown) == 0x000001, "Wrong size on TedSelectionDetailsPawnsGrid_CanSwitchDown");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_CanSwitchDown, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_CanSwitchDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.CanSwitchUp
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsPawnsGrid_CanSwitchUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_CanSwitchUp) == 0x000001, "Wrong alignment on TedSelectionDetailsPawnsGrid_CanSwitchUp");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_CanSwitchUp) == 0x000001, "Wrong size on TedSelectionDetailsPawnsGrid_CanSwitchUp");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_CanSwitchUp, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_CanSwitchUp::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsPawnsGrid.GetLastAvailableRowToSwitch
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch) == 0x000004, "Wrong alignment on TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch");
static_assert(sizeof(TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch) == 0x000004, "Wrong size on TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch");
static_assert(offsetof(TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsPawnsGrid_GetLastAvailableRowToSwitch::ReturnValue' has a wrong offset!");

// Function Tempest.AIMission_SeekPlayerStructures.SetSquadStructureTarget
// 0x0028 (0x0028 - 0x0000)
struct AIMission_SeekPlayerStructures_SetSquadStructureTarget final
{
public:
	struct FGameplayTagContainer                  Targets;                                           // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         InMaxStructures;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMission_SeekPlayerStructures_SetSquadStructureTarget) == 0x000008, "Wrong alignment on AIMission_SeekPlayerStructures_SetSquadStructureTarget");
static_assert(sizeof(AIMission_SeekPlayerStructures_SetSquadStructureTarget) == 0x000028, "Wrong size on AIMission_SeekPlayerStructures_SetSquadStructureTarget");
static_assert(offsetof(AIMission_SeekPlayerStructures_SetSquadStructureTarget, Targets) == 0x000000, "Member 'AIMission_SeekPlayerStructures_SetSquadStructureTarget::Targets' has a wrong offset!");
static_assert(offsetof(AIMission_SeekPlayerStructures_SetSquadStructureTarget, InMaxStructures) == 0x000020, "Member 'AIMission_SeekPlayerStructures_SetSquadStructureTarget::InMaxStructures' has a wrong offset!");

// Function Tempest.TedDefinitionAsset.GetAssetIdentifierFromDefinition
// 0x0030 (0x0030 - 0x0000)
struct TedDefinitionAsset_GetAssetIdentifierFromDefinition final
{
public:
	TSoftObjectPtr<class UTedDefinitionAsset>     Definition;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionAsset_GetAssetIdentifierFromDefinition) == 0x000008, "Wrong alignment on TedDefinitionAsset_GetAssetIdentifierFromDefinition");
static_assert(sizeof(TedDefinitionAsset_GetAssetIdentifierFromDefinition) == 0x000030, "Wrong size on TedDefinitionAsset_GetAssetIdentifierFromDefinition");
static_assert(offsetof(TedDefinitionAsset_GetAssetIdentifierFromDefinition, Definition) == 0x000000, "Member 'TedDefinitionAsset_GetAssetIdentifierFromDefinition::Definition' has a wrong offset!");
static_assert(offsetof(TedDefinitionAsset_GetAssetIdentifierFromDefinition, ReturnValue) == 0x000028, "Member 'TedDefinitionAsset_GetAssetIdentifierFromDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedEntityDefinitionAsset.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedEntityDefinitionAsset_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEntityDefinitionAsset_GetDescription) == 0x000008, "Wrong alignment on TedEntityDefinitionAsset_GetDescription");
static_assert(sizeof(TedEntityDefinitionAsset_GetDescription) == 0x000010, "Wrong size on TedEntityDefinitionAsset_GetDescription");
static_assert(offsetof(TedEntityDefinitionAsset_GetDescription, ReturnValue) == 0x000000, "Member 'TedEntityDefinitionAsset_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.AIRoute.GetWaypoints
// 0x0010 (0x0010 - 0x0000)
struct AIRoute_GetWaypoints final
{
public:
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIRoute_GetWaypoints) == 0x000008, "Wrong alignment on AIRoute_GetWaypoints");
static_assert(sizeof(AIRoute_GetWaypoints) == 0x000010, "Wrong size on AIRoute_GetWaypoints");
static_assert(offsetof(AIRoute_GetWaypoints, ReturnValue) == 0x000000, "Member 'AIRoute_GetWaypoints::ReturnValue' has a wrong offset!");

// Function Tempest.AISplineRoute.GetWaypoints
// 0x0010 (0x0010 - 0x0000)
struct AISplineRoute_GetWaypoints final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISplineRoute_GetWaypoints) == 0x000008, "Wrong alignment on AISplineRoute_GetWaypoints");
static_assert(sizeof(AISplineRoute_GetWaypoints) == 0x000010, "Wrong size on AISplineRoute_GetWaypoints");
static_assert(offsetof(AISplineRoute_GetWaypoints, ReturnValue) == 0x000000, "Member 'AISplineRoute_GetWaypoints::ReturnValue' has a wrong offset!");

// Function Tempest.AISplineRoute.GetWaypoints2D
// 0x0010 (0x0010 - 0x0000)
struct AISplineRoute_GetWaypoints2D final
{
public:
	TArray<struct FVector2D>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISplineRoute_GetWaypoints2D) == 0x000008, "Wrong alignment on AISplineRoute_GetWaypoints2D");
static_assert(sizeof(AISplineRoute_GetWaypoints2D) == 0x000010, "Wrong size on AISplineRoute_GetWaypoints2D");
static_assert(offsetof(AISplineRoute_GetWaypoints2D, ReturnValue) == 0x000000, "Member 'AISplineRoute_GetWaypoints2D::ReturnValue' has a wrong offset!");

// Function Tempest.TedTooltipWidget.GetTargetWidget
// 0x0008 (0x0008 - 0x0000)
struct TedTooltipWidget_GetTargetWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTooltipWidget_GetTargetWidget) == 0x000008, "Wrong alignment on TedTooltipWidget_GetTargetWidget");
static_assert(sizeof(TedTooltipWidget_GetTargetWidget) == 0x000008, "Wrong size on TedTooltipWidget_GetTargetWidget");
static_assert(offsetof(TedTooltipWidget_GetTargetWidget, ReturnValue) == 0x000000, "Member 'TedTooltipWidget_GetTargetWidget::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetails_InfoSlots_Tooltip_Defense.SetTargetPawn
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn) == 0x000008, "Wrong alignment on TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn");
static_assert(sizeof(TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn) == 0x000008, "Wrong size on TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn, InPawn) == 0x000000, "Member 'TedSelectionDetails_InfoSlots_Tooltip_Defense_SetTargetPawn::InPawn' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentSlotTooltip_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetDescription) == 0x000008, "Wrong alignment on TedEquipmentSlotTooltip_GetDescription");
static_assert(sizeof(TedEquipmentSlotTooltip_GetDescription) == 0x000010, "Wrong size on TedEquipmentSlotTooltip_GetDescription");
static_assert(offsetof(TedEquipmentSlotTooltip_GetDescription, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetEquipmentSlot
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentSlotTooltip_GetEquipmentSlot final
{
public:
	const class UTedEquipmentSlot*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetEquipmentSlot) == 0x000008, "Wrong alignment on TedEquipmentSlotTooltip_GetEquipmentSlot");
static_assert(sizeof(TedEquipmentSlotTooltip_GetEquipmentSlot) == 0x000008, "Wrong size on TedEquipmentSlotTooltip_GetEquipmentSlot");
static_assert(offsetof(TedEquipmentSlotTooltip_GetEquipmentSlot, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetEquipmentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentSlotTooltip_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetIcon) == 0x000008, "Wrong alignment on TedEquipmentSlotTooltip_GetIcon");
static_assert(sizeof(TedEquipmentSlotTooltip_GetIcon) == 0x000008, "Wrong size on TedEquipmentSlotTooltip_GetIcon");
static_assert(offsetof(TedEquipmentSlotTooltip_GetIcon, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetInventorySpaceCost
// 0x0004 (0x0004 - 0x0000)
struct TedEquipmentSlotTooltip_GetInventorySpaceCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetInventorySpaceCost) == 0x000004, "Wrong alignment on TedEquipmentSlotTooltip_GetInventorySpaceCost");
static_assert(sizeof(TedEquipmentSlotTooltip_GetInventorySpaceCost) == 0x000004, "Wrong size on TedEquipmentSlotTooltip_GetInventorySpaceCost");
static_assert(offsetof(TedEquipmentSlotTooltip_GetInventorySpaceCost, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetInventorySpaceCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetRequisitionCost
// 0x0004 (0x0004 - 0x0000)
struct TedEquipmentSlotTooltip_GetRequisitionCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetRequisitionCost) == 0x000004, "Wrong alignment on TedEquipmentSlotTooltip_GetRequisitionCost");
static_assert(sizeof(TedEquipmentSlotTooltip_GetRequisitionCost) == 0x000004, "Wrong size on TedEquipmentSlotTooltip_GetRequisitionCost");
static_assert(offsetof(TedEquipmentSlotTooltip_GetRequisitionCost, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetRequisitionCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlotTooltip.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentSlotTooltip_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlotTooltip_GetTitle) == 0x000008, "Wrong alignment on TedEquipmentSlotTooltip_GetTitle");
static_assert(sizeof(TedEquipmentSlotTooltip_GetTitle) == 0x000010, "Wrong size on TedEquipmentSlotTooltip_GetTitle");
static_assert(offsetof(TedEquipmentSlotTooltip_GetTitle, ReturnValue) == 0x000000, "Member 'TedEquipmentSlotTooltip_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaSubsystem.AllAssetsUnlocked
// 0x0001 (0x0001 - 0x0000)
struct TedEncyclopediaSubsystem_AllAssetsUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaSubsystem_AllAssetsUnlocked) == 0x000001, "Wrong alignment on TedEncyclopediaSubsystem_AllAssetsUnlocked");
static_assert(sizeof(TedEncyclopediaSubsystem_AllAssetsUnlocked) == 0x000001, "Wrong size on TedEncyclopediaSubsystem_AllAssetsUnlocked");
static_assert(offsetof(TedEncyclopediaSubsystem_AllAssetsUnlocked, ReturnValue) == 0x000000, "Member 'TedEncyclopediaSubsystem_AllAssetsUnlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaSubsystem.GetAssetStatus
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaSubsystem_GetAssetStatus final
{
public:
	class UTedEncyclopediaDefinitionAsset*        Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEncyclopediaAssetStatus                      ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEncyclopediaSubsystem_GetAssetStatus) == 0x000008, "Wrong alignment on TedEncyclopediaSubsystem_GetAssetStatus");
static_assert(sizeof(TedEncyclopediaSubsystem_GetAssetStatus) == 0x000010, "Wrong size on TedEncyclopediaSubsystem_GetAssetStatus");
static_assert(offsetof(TedEncyclopediaSubsystem_GetAssetStatus, Asset) == 0x000000, "Member 'TedEncyclopediaSubsystem_GetAssetStatus::Asset' has a wrong offset!");
static_assert(offsetof(TedEncyclopediaSubsystem_GetAssetStatus, ReturnValue) == 0x000008, "Member 'TedEncyclopediaSubsystem_GetAssetStatus::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaSubsystem.IsUnLocked
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaSubsystem_IsUnLocked final
{
public:
	class UTedEncyclopediaDefinitionAsset*        Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedEncyclopediaSubsystem_IsUnLocked) == 0x000008, "Wrong alignment on TedEncyclopediaSubsystem_IsUnLocked");
static_assert(sizeof(TedEncyclopediaSubsystem_IsUnLocked) == 0x000010, "Wrong size on TedEncyclopediaSubsystem_IsUnLocked");
static_assert(offsetof(TedEncyclopediaSubsystem_IsUnLocked, Asset) == 0x000000, "Member 'TedEncyclopediaSubsystem_IsUnLocked::Asset' has a wrong offset!");
static_assert(offsetof(TedEncyclopediaSubsystem_IsUnLocked, ReturnValue) == 0x000008, "Member 'TedEncyclopediaSubsystem_IsUnLocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaSubsystem.MarkAsRead
// 0x0008 (0x0008 - 0x0000)
struct TedEncyclopediaSubsystem_MarkAsRead final
{
public:
	class UTedEncyclopediaDefinitionAsset*        NewAsset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaSubsystem_MarkAsRead) == 0x000008, "Wrong alignment on TedEncyclopediaSubsystem_MarkAsRead");
static_assert(sizeof(TedEncyclopediaSubsystem_MarkAsRead) == 0x000008, "Wrong size on TedEncyclopediaSubsystem_MarkAsRead");
static_assert(offsetof(TedEncyclopediaSubsystem_MarkAsRead, NewAsset) == 0x000000, "Member 'TedEncyclopediaSubsystem_MarkAsRead::NewAsset' has a wrong offset!");

// Function Tempest.TedContentPanelStatic.SetRuntimeContext
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelStatic_SetRuntimeContext final
{
public:
	class UObject*                                InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelStatic_SetRuntimeContext) == 0x000008, "Wrong alignment on TedContentPanelStatic_SetRuntimeContext");
static_assert(sizeof(TedContentPanelStatic_SetRuntimeContext) == 0x000008, "Wrong size on TedContentPanelStatic_SetRuntimeContext");
static_assert(offsetof(TedContentPanelStatic_SetRuntimeContext, InContext) == 0x000000, "Member 'TedContentPanelStatic_SetRuntimeContext::InContext' has a wrong offset!");

// Function Tempest.TedContentPanelStatic.GetRuntimeContext
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelStatic_GetRuntimeContext final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelStatic_GetRuntimeContext) == 0x000008, "Wrong alignment on TedContentPanelStatic_GetRuntimeContext");
static_assert(sizeof(TedContentPanelStatic_GetRuntimeContext) == 0x000008, "Wrong size on TedContentPanelStatic_GetRuntimeContext");
static_assert(offsetof(TedContentPanelStatic_GetRuntimeContext, ReturnValue) == 0x000000, "Member 'TedContentPanelStatic_GetRuntimeContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedFogOfWarManager.DisableFogOfWarReveal
// 0x0010 (0x0010 - 0x0000)
struct TedFogOfWarManager_DisableFogOfWarReveal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoWAgentHandle                        InFoWAgentHandle;                                  // 0x0008(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFogOfWarManager_DisableFogOfWarReveal) == 0x000008, "Wrong alignment on TedFogOfWarManager_DisableFogOfWarReveal");
static_assert(sizeof(TedFogOfWarManager_DisableFogOfWarReveal) == 0x000010, "Wrong size on TedFogOfWarManager_DisableFogOfWarReveal");
static_assert(offsetof(TedFogOfWarManager_DisableFogOfWarReveal, WorldContextObject) == 0x000000, "Member 'TedFogOfWarManager_DisableFogOfWarReveal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_DisableFogOfWarReveal, InFoWAgentHandle) == 0x000008, "Member 'TedFogOfWarManager_DisableFogOfWarReveal::InFoWAgentHandle' has a wrong offset!");

// Function Tempest.TedFogOfWarManager.RevealFogOfWar
// 0x0040 (0x0040 - 0x0000)
struct TedFogOfWarManager_RevealFogOfWar final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevealRadius;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisionRadius;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ChannelId;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RevealTime;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoWAgentHandle                        ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFogOfWarManager_RevealFogOfWar) == 0x000008, "Wrong alignment on TedFogOfWarManager_RevealFogOfWar");
static_assert(sizeof(TedFogOfWarManager_RevealFogOfWar) == 0x000040, "Wrong size on TedFogOfWarManager_RevealFogOfWar");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, WorldContextObject) == 0x000000, "Member 'TedFogOfWarManager_RevealFogOfWar::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, RevealRadius) == 0x000008, "Member 'TedFogOfWarManager_RevealFogOfWar::RevealRadius' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, VisionRadius) == 0x00000C, "Member 'TedFogOfWarManager_RevealFogOfWar::VisionRadius' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, ChannelId) == 0x000010, "Member 'TedFogOfWarManager_RevealFogOfWar::ChannelId' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, RevealTime) == 0x000014, "Member 'TedFogOfWarManager_RevealFogOfWar::RevealTime' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, Location) == 0x000018, "Member 'TedFogOfWarManager_RevealFogOfWar::Location' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, TargetActor) == 0x000030, "Member 'TedFogOfWarManager_RevealFogOfWar::TargetActor' has a wrong offset!");
static_assert(offsetof(TedFogOfWarManager_RevealFogOfWar, ReturnValue) == 0x000038, "Member 'TedFogOfWarManager_RevealFogOfWar::ReturnValue' has a wrong offset!");

// Function Tempest.TedFogOfWarManager.OnAttachActorDied
// 0x0008 (0x0008 - 0x0000)
struct TedFogOfWarManager_OnAttachActorDied final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFogOfWarManager_OnAttachActorDied) == 0x000008, "Wrong alignment on TedFogOfWarManager_OnAttachActorDied");
static_assert(sizeof(TedFogOfWarManager_OnAttachActorDied) == 0x000008, "Wrong size on TedFogOfWarManager_OnAttachActorDied");
static_assert(offsetof(TedFogOfWarManager_OnAttachActorDied, InActor) == 0x000000, "Member 'TedFogOfWarManager_OnAttachActorDied::InActor' has a wrong offset!");

// Function Tempest.TedGameModeBase.GameTestStartCapturingBroadcast
// 0x0018 (0x0018 - 0x0000)
struct TedGameModeBase_GameTestStartCapturingBroadcast final
{
public:
	int32                                         CapturingIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CaptureName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameModeBase_GameTestStartCapturingBroadcast) == 0x000008, "Wrong alignment on TedGameModeBase_GameTestStartCapturingBroadcast");
static_assert(sizeof(TedGameModeBase_GameTestStartCapturingBroadcast) == 0x000018, "Wrong size on TedGameModeBase_GameTestStartCapturingBroadcast");
static_assert(offsetof(TedGameModeBase_GameTestStartCapturingBroadcast, CapturingIndex) == 0x000000, "Member 'TedGameModeBase_GameTestStartCapturingBroadcast::CapturingIndex' has a wrong offset!");
static_assert(offsetof(TedGameModeBase_GameTestStartCapturingBroadcast, CaptureName) == 0x000008, "Member 'TedGameModeBase_GameTestStartCapturingBroadcast::CaptureName' has a wrong offset!");

// Function Tempest.TedGameModeBase.GameTestStopCapturingBroadcast
// 0x0018 (0x0018 - 0x0000)
struct TedGameModeBase_GameTestStopCapturingBroadcast final
{
public:
	int32                                         CapturingIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CaptureName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameModeBase_GameTestStopCapturingBroadcast) == 0x000008, "Wrong alignment on TedGameModeBase_GameTestStopCapturingBroadcast");
static_assert(sizeof(TedGameModeBase_GameTestStopCapturingBroadcast) == 0x000018, "Wrong size on TedGameModeBase_GameTestStopCapturingBroadcast");
static_assert(offsetof(TedGameModeBase_GameTestStopCapturingBroadcast, CapturingIndex) == 0x000000, "Member 'TedGameModeBase_GameTestStopCapturingBroadcast::CapturingIndex' has a wrong offset!");
static_assert(offsetof(TedGameModeBase_GameTestStopCapturingBroadcast, CaptureName) == 0x000008, "Member 'TedGameModeBase_GameTestStopCapturingBroadcast::CaptureName' has a wrong offset!");

// Function Tempest.TedGameMode.K2_GetGameDifficulty
// 0x0010 (0x0010 - 0x0000)
struct TedGameMode_K2_GetGameDifficulty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameMode_K2_GetGameDifficulty) == 0x000008, "Wrong alignment on TedGameMode_K2_GetGameDifficulty");
static_assert(sizeof(TedGameMode_K2_GetGameDifficulty) == 0x000010, "Wrong size on TedGameMode_K2_GetGameDifficulty");
static_assert(offsetof(TedGameMode_K2_GetGameDifficulty, WorldContextObject) == 0x000000, "Member 'TedGameMode_K2_GetGameDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedGameMode_K2_GetGameDifficulty, ReturnValue) == 0x000008, "Member 'TedGameMode_K2_GetGameDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameMode.K2_GetGameDifficultySwitch
// 0x0010 (0x0010 - 0x0000)
struct TedGameMode_K2_GetGameDifficultySwitch final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            Difficulty;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameMode_K2_GetGameDifficultySwitch) == 0x000008, "Wrong alignment on TedGameMode_K2_GetGameDifficultySwitch");
static_assert(sizeof(TedGameMode_K2_GetGameDifficultySwitch) == 0x000010, "Wrong size on TedGameMode_K2_GetGameDifficultySwitch");
static_assert(offsetof(TedGameMode_K2_GetGameDifficultySwitch, WorldContextObject) == 0x000000, "Member 'TedGameMode_K2_GetGameDifficultySwitch::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedGameMode_K2_GetGameDifficultySwitch, Difficulty) == 0x000008, "Member 'TedGameMode_K2_GetGameDifficultySwitch::Difficulty' has a wrong offset!");

// Function Tempest.TedGameMode.K2_GetSupportsDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TedGameMode_K2_GetSupportsDifficulty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameMode_K2_GetSupportsDifficulty) == 0x000001, "Wrong alignment on TedGameMode_K2_GetSupportsDifficulty");
static_assert(sizeof(TedGameMode_K2_GetSupportsDifficulty) == 0x000001, "Wrong size on TedGameMode_K2_GetSupportsDifficulty");
static_assert(offsetof(TedGameMode_K2_GetSupportsDifficulty, ReturnValue) == 0x000000, "Member 'TedGameMode_K2_GetSupportsDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.AddContent
// 0x0038 (0x0038 - 0x0000)
struct TedGameCreationPlayersPanel_AddContent final
{
public:
	struct FTedGameCreationPlayer                 InContent;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInSkipRefresContent;                              // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_AddContent) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_AddContent");
static_assert(sizeof(TedGameCreationPlayersPanel_AddContent) == 0x000038, "Wrong size on TedGameCreationPlayersPanel_AddContent");
static_assert(offsetof(TedGameCreationPlayersPanel_AddContent, InContent) == 0x000000, "Member 'TedGameCreationPlayersPanel_AddContent::InContent' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_AddContent, bInSkipRefresContent) == 0x000030, "Member 'TedGameCreationPlayersPanel_AddContent::bInSkipRefresContent' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.InsertContent
// 0x0040 (0x0040 - 0x0000)
struct TedGameCreationPlayersPanel_InsertContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGameCreationPlayer                 InContent;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInSkipRefresContent;                              // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_InsertContent) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_InsertContent");
static_assert(sizeof(TedGameCreationPlayersPanel_InsertContent) == 0x000040, "Wrong size on TedGameCreationPlayersPanel_InsertContent");
static_assert(offsetof(TedGameCreationPlayersPanel_InsertContent, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_InsertContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_InsertContent, InContent) == 0x000008, "Member 'TedGameCreationPlayersPanel_InsertContent::InContent' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_InsertContent, bInSkipRefresContent) == 0x000038, "Member 'TedGameCreationPlayersPanel_InsertContent::bInSkipRefresContent' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.OverrideTitle
// 0x0010 (0x0010 - 0x0000)
struct TedGameCreationPlayersPanel_OverrideTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_OverrideTitle) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_OverrideTitle");
static_assert(sizeof(TedGameCreationPlayersPanel_OverrideTitle) == 0x000010, "Wrong size on TedGameCreationPlayersPanel_OverrideTitle");
static_assert(offsetof(TedGameCreationPlayersPanel_OverrideTitle, InTitle) == 0x000000, "Member 'TedGameCreationPlayersPanel_OverrideTitle::InTitle' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.RemoveContent
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_RemoveContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSkipRefresContent;                              // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_RemoveContent) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_RemoveContent");
static_assert(sizeof(TedGameCreationPlayersPanel_RemoveContent) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_RemoveContent");
static_assert(offsetof(TedGameCreationPlayersPanel_RemoveContent, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_RemoveContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_RemoveContent, bInSkipRefresContent) == 0x000004, "Member 'TedGameCreationPlayersPanel_RemoveContent::bInSkipRefresContent' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_RemoveContent, ReturnValue) == 0x000005, "Member 'TedGameCreationPlayersPanel_RemoveContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.RequestRemovePlayer
// 0x0004 (0x0004 - 0x0000)
struct TedGameCreationPlayersPanel_RequestRemovePlayer final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_RequestRemovePlayer) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_RequestRemovePlayer");
static_assert(sizeof(TedGameCreationPlayersPanel_RequestRemovePlayer) == 0x000004, "Wrong size on TedGameCreationPlayersPanel_RequestRemovePlayer");
static_assert(offsetof(TedGameCreationPlayersPanel_RequestRemovePlayer, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_RequestRemovePlayer::InSlotIndex' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.SetContent
// 0x0018 (0x0018 - 0x0000)
struct TedGameCreationPlayersPanel_SetContent final
{
public:
	struct FTedGameCreationTeam                   InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInSkipRefresContent;                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_SetContent) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_SetContent");
static_assert(sizeof(TedGameCreationPlayersPanel_SetContent) == 0x000018, "Wrong size on TedGameCreationPlayersPanel_SetContent");
static_assert(offsetof(TedGameCreationPlayersPanel_SetContent, InContent) == 0x000000, "Member 'TedGameCreationPlayersPanel_SetContent::InContent' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_SetContent, bInSkipRefresContent) == 0x000010, "Member 'TedGameCreationPlayersPanel_SetContent::bInSkipRefresContent' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.SetContentInSlot
// 0x0038 (0x0038 - 0x0000)
struct TedGameCreationPlayersPanel_SetContentInSlot final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGameCreationPlayer                 InContent;                                         // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_SetContentInSlot) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_SetContentInSlot");
static_assert(sizeof(TedGameCreationPlayersPanel_SetContentInSlot) == 0x000038, "Wrong size on TedGameCreationPlayersPanel_SetContentInSlot");
static_assert(offsetof(TedGameCreationPlayersPanel_SetContentInSlot, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_SetContentInSlot::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_SetContentInSlot, InContent) == 0x000008, "Member 'TedGameCreationPlayersPanel_SetContentInSlot::InContent' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.SetLabel
// 0x0018 (0x0018 - 0x0000)
struct TedGameCreationPlayersPanel_SetLabel final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InLabel;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_SetLabel) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_SetLabel");
static_assert(sizeof(TedGameCreationPlayersPanel_SetLabel) == 0x000018, "Wrong size on TedGameCreationPlayersPanel_SetLabel");
static_assert(offsetof(TedGameCreationPlayersPanel_SetLabel, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_SetLabel::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_SetLabel, InLabel) == 0x000008, "Member 'TedGameCreationPlayersPanel_SetLabel::InLabel' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.CanRequestAddBotPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_CanRequestAddBotPlayer final
{
public:
	int32                                         InPlayerIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_CanRequestAddBotPlayer) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_CanRequestAddBotPlayer");
static_assert(sizeof(TedGameCreationPlayersPanel_CanRequestAddBotPlayer) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_CanRequestAddBotPlayer");
static_assert(offsetof(TedGameCreationPlayersPanel_CanRequestAddBotPlayer, InPlayerIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_CanRequestAddBotPlayer::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_CanRequestAddBotPlayer, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_CanRequestAddBotPlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetAvatar
// 0x0010 (0x0010 - 0x0000)
struct TedGameCreationPlayersPanel_GetAvatar final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_GetAvatar) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_GetAvatar");
static_assert(sizeof(TedGameCreationPlayersPanel_GetAvatar) == 0x000010, "Wrong size on TedGameCreationPlayersPanel_GetAvatar");
static_assert(offsetof(TedGameCreationPlayersPanel_GetAvatar, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetAvatar::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_GetAvatar, ReturnValue) == 0x000008, "Member 'TedGameCreationPlayersPanel_GetAvatar::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedGameCreationPlayersPanel_GetContent final
{
public:
	struct FTedGameCreationTeam                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_GetContent) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_GetContent");
static_assert(sizeof(TedGameCreationPlayersPanel_GetContent) == 0x000010, "Wrong size on TedGameCreationPlayersPanel_GetContent");
static_assert(offsetof(TedGameCreationPlayersPanel_GetContent, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetLabel
// 0x0018 (0x0018 - 0x0000)
struct TedGameCreationPlayersPanel_GetLabel final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_GetLabel) == 0x000008, "Wrong alignment on TedGameCreationPlayersPanel_GetLabel");
static_assert(sizeof(TedGameCreationPlayersPanel_GetLabel) == 0x000018, "Wrong size on TedGameCreationPlayersPanel_GetLabel");
static_assert(offsetof(TedGameCreationPlayersPanel_GetLabel, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetLabel::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_GetLabel, ReturnValue) == 0x000008, "Member 'TedGameCreationPlayersPanel_GetLabel::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetPlayerSettingValue
// 0x0010 (0x0010 - 0x0000)
struct TedGameCreationPlayersPanel_GetPlayerSettingValue final
{
public:
	int32                                         InPlayerIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_GetPlayerSettingValue) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_GetPlayerSettingValue");
static_assert(sizeof(TedGameCreationPlayersPanel_GetPlayerSettingValue) == 0x000010, "Wrong size on TedGameCreationPlayersPanel_GetPlayerSettingValue");
static_assert(offsetof(TedGameCreationPlayersPanel_GetPlayerSettingValue, InPlayerIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetPlayerSettingValue::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_GetPlayerSettingValue, InKey) == 0x000004, "Member 'TedGameCreationPlayersPanel_GetPlayerSettingValue::InKey' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_GetPlayerSettingValue, OutValue) == 0x000008, "Member 'TedGameCreationPlayersPanel_GetPlayerSettingValue::OutValue' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_GetPlayerSettingValue, ReturnValue) == 0x00000C, "Member 'TedGameCreationPlayersPanel_GetPlayerSettingValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetPlayersNum
// 0x0004 (0x0004 - 0x0000)
struct TedGameCreationPlayersPanel_GetPlayersNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_GetPlayersNum) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_GetPlayersNum");
static_assert(sizeof(TedGameCreationPlayersPanel_GetPlayersNum) == 0x000004, "Wrong size on TedGameCreationPlayersPanel_GetPlayersNum");
static_assert(offsetof(TedGameCreationPlayersPanel_GetPlayersNum, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetPlayersNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersPanel_GetTeam final
{
public:
	ETedTeamID                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_GetTeam) == 0x000001, "Wrong alignment on TedGameCreationPlayersPanel_GetTeam");
static_assert(sizeof(TedGameCreationPlayersPanel_GetTeam) == 0x000001, "Wrong size on TedGameCreationPlayersPanel_GetTeam");
static_assert(offsetof(TedGameCreationPlayersPanel_GetTeam, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersPanel_GetTeam::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.HasPlayerSetting
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_HasPlayerSetting final
{
public:
	int32                                         InPlayerIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_HasPlayerSetting) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_HasPlayerSetting");
static_assert(sizeof(TedGameCreationPlayersPanel_HasPlayerSetting) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_HasPlayerSetting");
static_assert(offsetof(TedGameCreationPlayersPanel_HasPlayerSetting, InPlayerIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_HasPlayerSetting::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_HasPlayerSetting, InKey) == 0x000004, "Member 'TedGameCreationPlayersPanel_HasPlayerSetting::InKey' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_HasPlayerSetting, ReturnValue) == 0x000005, "Member 'TedGameCreationPlayersPanel_HasPlayerSetting::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsAdmin
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_IsAdmin final
{
public:
	int32                                         InPlayerIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsAdmin) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsAdmin");
static_assert(sizeof(TedGameCreationPlayersPanel_IsAdmin) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_IsAdmin");
static_assert(offsetof(TedGameCreationPlayersPanel_IsAdmin, InPlayerIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsAdmin::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsAdmin, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsAdmin::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsBot
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_IsBot final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsBot) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsBot");
static_assert(sizeof(TedGameCreationPlayersPanel_IsBot) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_IsBot");
static_assert(offsetof(TedGameCreationPlayersPanel_IsBot, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsBot::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsBot, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsBot::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsEmpty
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_IsEmpty final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsEmpty) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsEmpty");
static_assert(sizeof(TedGameCreationPlayersPanel_IsEmpty) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_IsEmpty");
static_assert(offsetof(TedGameCreationPlayersPanel_IsEmpty, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsEmpty::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsEmpty, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsHuman
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_IsHuman final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsHuman) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsHuman");
static_assert(sizeof(TedGameCreationPlayersPanel_IsHuman) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_IsHuman");
static_assert(offsetof(TedGameCreationPlayersPanel_IsHuman, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsHuman::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsHuman, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsHuman::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsPlayerSettingValueUsed
// 0x000C (0x000C - 0x0000)
struct TedGameCreationPlayersPanel_IsPlayerSettingValueUsed final
{
public:
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsPlayerSettingValueUsed) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsPlayerSettingValueUsed");
static_assert(sizeof(TedGameCreationPlayersPanel_IsPlayerSettingValueUsed) == 0x00000C, "Wrong size on TedGameCreationPlayersPanel_IsPlayerSettingValueUsed");
static_assert(offsetof(TedGameCreationPlayersPanel_IsPlayerSettingValueUsed, InKey) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsPlayerSettingValueUsed::InKey' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsPlayerSettingValueUsed, InValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsPlayerSettingValueUsed::InValue' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsPlayerSettingValueUsed, ReturnValue) == 0x000008, "Member 'TedGameCreationPlayersPanel_IsPlayerSettingValueUsed::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsReady
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersPanel_IsReady final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersPanel_IsReady) == 0x000004, "Wrong alignment on TedGameCreationPlayersPanel_IsReady");
static_assert(sizeof(TedGameCreationPlayersPanel_IsReady) == 0x000008, "Wrong size on TedGameCreationPlayersPanel_IsReady");
static_assert(offsetof(TedGameCreationPlayersPanel_IsReady, InSlotIndex) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsReady::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersPanel_IsReady, ReturnValue) == 0x000004, "Member 'TedGameCreationPlayersPanel_IsReady::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersPanel.IsTeamRelevant
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersPanel_IsTeamRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersPanel_IsTeamRelevant) == 0x000001, "Wrong alignment on TedGameCreationPlayersPanel_IsTeamRelevant");
static_assert(sizeof(TedGameCreationPlayersPanel_IsTeamRelevant) == 0x000001, "Wrong size on TedGameCreationPlayersPanel_IsTeamRelevant");
static_assert(offsetof(TedGameCreationPlayersPanel_IsTeamRelevant, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersPanel_IsTeamRelevant::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.AreLeaderboardsAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_AreLeaderboardsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_AreLeaderboardsAvailable) == 0x000001, "Wrong alignment on TedFeatures_AreLeaderboardsAvailable");
static_assert(sizeof(TedFeatures_AreLeaderboardsAvailable) == 0x000001, "Wrong size on TedFeatures_AreLeaderboardsAvailable");
static_assert(offsetof(TedFeatures_AreLeaderboardsAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_AreLeaderboardsAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.DoesPlayerProfileShowEmptyRatingsAndPlacements
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements) == 0x000001, "Wrong alignment on TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements");
static_assert(sizeof(TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements) == 0x000001, "Wrong size on TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements");
static_assert(offsetof(TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements, ReturnValue) == 0x000000, "Member 'TedFeatures_DoesPlayerProfileShowEmptyRatingsAndPlacements::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsAnyOfGameBranch
// 0x0018 (0x0018 - 0x0000)
struct TedFeatures_IsAnyOfGameBranch final
{
public:
	TArray<ETedBranch>                            InBranches;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFeatures_IsAnyOfGameBranch) == 0x000008, "Wrong alignment on TedFeatures_IsAnyOfGameBranch");
static_assert(sizeof(TedFeatures_IsAnyOfGameBranch) == 0x000018, "Wrong size on TedFeatures_IsAnyOfGameBranch");
static_assert(offsetof(TedFeatures_IsAnyOfGameBranch, InBranches) == 0x000000, "Member 'TedFeatures_IsAnyOfGameBranch::InBranches' has a wrong offset!");
static_assert(offsetof(TedFeatures_IsAnyOfGameBranch, ReturnValue) == 0x000010, "Member 'TedFeatures_IsAnyOfGameBranch::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsCampaignAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsCampaignAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsCampaignAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsCampaignAvailable");
static_assert(sizeof(TedFeatures_IsCampaignAvailable) == 0x000001, "Wrong size on TedFeatures_IsCampaignAvailable");
static_assert(offsetof(TedFeatures_IsCampaignAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsCampaignAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsCampaignMissionSelectAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsCampaignMissionSelectAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsCampaignMissionSelectAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsCampaignMissionSelectAvailable");
static_assert(sizeof(TedFeatures_IsCampaignMissionSelectAvailable) == 0x000001, "Wrong size on TedFeatures_IsCampaignMissionSelectAvailable");
static_assert(offsetof(TedFeatures_IsCampaignMissionSelectAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsCampaignMissionSelectAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsCheatMenuAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsCheatMenuAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsCheatMenuAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsCheatMenuAvailable");
static_assert(sizeof(TedFeatures_IsCheatMenuAvailable) == 0x000001, "Wrong size on TedFeatures_IsCheatMenuAvailable");
static_assert(offsetof(TedFeatures_IsCheatMenuAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsCheatMenuAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsCodexAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsCodexAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsCodexAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsCodexAvailable");
static_assert(sizeof(TedFeatures_IsCodexAvailable) == 0x000001, "Wrong size on TedFeatures_IsCodexAvailable");
static_assert(offsetof(TedFeatures_IsCodexAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsCodexAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsCustomMultiplayerAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsCustomMultiplayerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsCustomMultiplayerAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsCustomMultiplayerAvailable");
static_assert(sizeof(TedFeatures_IsCustomMultiplayerAvailable) == 0x000001, "Wrong size on TedFeatures_IsCustomMultiplayerAvailable");
static_assert(offsetof(TedFeatures_IsCustomMultiplayerAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsCustomMultiplayerAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsFriendsAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsFriendsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsFriendsAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsFriendsAvailable");
static_assert(sizeof(TedFeatures_IsFriendsAvailable) == 0x000001, "Wrong size on TedFeatures_IsFriendsAvailable");
static_assert(offsetof(TedFeatures_IsFriendsAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsFriendsAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsGameBranch
// 0x0002 (0x0002 - 0x0000)
struct TedFeatures_IsGameBranch final
{
public:
	ETedBranch                                    InBranch;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsGameBranch) == 0x000001, "Wrong alignment on TedFeatures_IsGameBranch");
static_assert(sizeof(TedFeatures_IsGameBranch) == 0x000002, "Wrong size on TedFeatures_IsGameBranch");
static_assert(offsetof(TedFeatures_IsGameBranch, InBranch) == 0x000000, "Member 'TedFeatures_IsGameBranch::InBranch' has a wrong offset!");
static_assert(offsetof(TedFeatures_IsGameBranch, ReturnValue) == 0x000001, "Member 'TedFeatures_IsGameBranch::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsGlobalBuildQueueAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsGlobalBuildQueueAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsGlobalBuildQueueAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsGlobalBuildQueueAvailable");
static_assert(sizeof(TedFeatures_IsGlobalBuildQueueAvailable) == 0x000001, "Wrong size on TedFeatures_IsGlobalBuildQueueAvailable");
static_assert(offsetof(TedFeatures_IsGlobalBuildQueueAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsGlobalBuildQueueAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsMapBanAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsMapBanAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsMapBanAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsMapBanAvailable");
static_assert(sizeof(TedFeatures_IsMapBanAvailable) == 0x000001, "Wrong size on TedFeatures_IsMapBanAvailable");
static_assert(offsetof(TedFeatures_IsMapBanAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsMapBanAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsMultiplayerAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsMultiplayerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsMultiplayerAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsMultiplayerAvailable");
static_assert(sizeof(TedFeatures_IsMultiplayerAvailable) == 0x000001, "Wrong size on TedFeatures_IsMultiplayerAvailable");
static_assert(offsetof(TedFeatures_IsMultiplayerAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsMultiplayerAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsNetworkRequiredToRunGame
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsNetworkRequiredToRunGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsNetworkRequiredToRunGame) == 0x000001, "Wrong alignment on TedFeatures_IsNetworkRequiredToRunGame");
static_assert(sizeof(TedFeatures_IsNetworkRequiredToRunGame) == 0x000001, "Wrong size on TedFeatures_IsNetworkRequiredToRunGame");
static_assert(offsetof(TedFeatures_IsNetworkRequiredToRunGame, ReturnValue) == 0x000000, "Member 'TedFeatures_IsNetworkRequiredToRunGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsNotAnyOfGameBranch
// 0x0018 (0x0018 - 0x0000)
struct TedFeatures_IsNotAnyOfGameBranch final
{
public:
	TArray<ETedBranch>                            InBranches;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFeatures_IsNotAnyOfGameBranch) == 0x000008, "Wrong alignment on TedFeatures_IsNotAnyOfGameBranch");
static_assert(sizeof(TedFeatures_IsNotAnyOfGameBranch) == 0x000018, "Wrong size on TedFeatures_IsNotAnyOfGameBranch");
static_assert(offsetof(TedFeatures_IsNotAnyOfGameBranch, InBranches) == 0x000000, "Member 'TedFeatures_IsNotAnyOfGameBranch::InBranches' has a wrong offset!");
static_assert(offsetof(TedFeatures_IsNotAnyOfGameBranch, ReturnValue) == 0x000010, "Member 'TedFeatures_IsNotAnyOfGameBranch::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsNotGameBranch
// 0x0002 (0x0002 - 0x0000)
struct TedFeatures_IsNotGameBranch final
{
public:
	ETedBranch                                    InBranch;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsNotGameBranch) == 0x000001, "Wrong alignment on TedFeatures_IsNotGameBranch");
static_assert(sizeof(TedFeatures_IsNotGameBranch) == 0x000002, "Wrong size on TedFeatures_IsNotGameBranch");
static_assert(offsetof(TedFeatures_IsNotGameBranch, InBranch) == 0x000000, "Member 'TedFeatures_IsNotGameBranch::InBranch' has a wrong offset!");
static_assert(offsetof(TedFeatures_IsNotGameBranch, ReturnValue) == 0x000001, "Member 'TedFeatures_IsNotGameBranch::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsPartyAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsPartyAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsPartyAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsPartyAvailable");
static_assert(sizeof(TedFeatures_IsPartyAvailable) == 0x000001, "Wrong size on TedFeatures_IsPartyAvailable");
static_assert(offsetof(TedFeatures_IsPartyAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsPartyAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsPlayerProfileAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsPlayerProfileAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsPlayerProfileAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsPlayerProfileAvailable");
static_assert(sizeof(TedFeatures_IsPlayerProfileAvailable) == 0x000001, "Wrong size on TedFeatures_IsPlayerProfileAvailable");
static_assert(offsetof(TedFeatures_IsPlayerProfileAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsPlayerProfileAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsQrCodeAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsQrCodeAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsQrCodeAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsQrCodeAvailable");
static_assert(sizeof(TedFeatures_IsQrCodeAvailable) == 0x000001, "Wrong size on TedFeatures_IsQrCodeAvailable");
static_assert(offsetof(TedFeatures_IsQrCodeAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsQrCodeAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsRandomFactionAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsRandomFactionAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsRandomFactionAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsRandomFactionAvailable");
static_assert(sizeof(TedFeatures_IsRandomFactionAvailable) == 0x000001, "Wrong size on TedFeatures_IsRandomFactionAvailable");
static_assert(offsetof(TedFeatures_IsRandomFactionAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsRandomFactionAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsRankedMultiplayerAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsRankedMultiplayerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsRankedMultiplayerAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsRankedMultiplayerAvailable");
static_assert(sizeof(TedFeatures_IsRankedMultiplayerAvailable) == 0x000001, "Wrong size on TedFeatures_IsRankedMultiplayerAvailable");
static_assert(offsetof(TedFeatures_IsRankedMultiplayerAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsRankedMultiplayerAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsReplayAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsReplayAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsReplayAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsReplayAvailable");
static_assert(sizeof(TedFeatures_IsReplayAvailable) == 0x000001, "Wrong size on TedFeatures_IsReplayAvailable");
static_assert(offsetof(TedFeatures_IsReplayAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsReplayAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsSkirmishAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsSkirmishAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsSkirmishAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsSkirmishAvailable");
static_assert(sizeof(TedFeatures_IsSkirmishAvailable) == 0x000001, "Wrong size on TedFeatures_IsSkirmishAvailable");
static_assert(offsetof(TedFeatures_IsSkirmishAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsSkirmishAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsSpectatorAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsSpectatorAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsSpectatorAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsSpectatorAvailable");
static_assert(sizeof(TedFeatures_IsSpectatorAvailable) == 0x000001, "Wrong size on TedFeatures_IsSpectatorAvailable");
static_assert(offsetof(TedFeatures_IsSpectatorAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsSpectatorAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsSuperWeaponAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsSuperWeaponAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsSuperWeaponAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsSuperWeaponAvailable");
static_assert(sizeof(TedFeatures_IsSuperWeaponAvailable) == 0x000001, "Wrong size on TedFeatures_IsSuperWeaponAvailable");
static_assert(offsetof(TedFeatures_IsSuperWeaponAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsSuperWeaponAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsUnrankedMultiplayerAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsUnrankedMultiplayerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsUnrankedMultiplayerAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsUnrankedMultiplayerAvailable");
static_assert(sizeof(TedFeatures_IsUnrankedMultiplayerAvailable) == 0x000001, "Wrong size on TedFeatures_IsUnrankedMultiplayerAvailable");
static_assert(offsetof(TedFeatures_IsUnrankedMultiplayerAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsUnrankedMultiplayerAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedFeatures.IsVetiAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedFeatures_IsVetiAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFeatures_IsVetiAvailable) == 0x000001, "Wrong alignment on TedFeatures_IsVetiAvailable");
static_assert(sizeof(TedFeatures_IsVetiAvailable) == 0x000001, "Wrong size on TedFeatures_IsVetiAvailable");
static_assert(offsetof(TedFeatures_IsVetiAvailable, ReturnValue) == 0x000000, "Member 'TedFeatures_IsVetiAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitCommand_GuardLocation.CreateGuardLocationCommandData
// 0x0070 (0x0070 - 0x0000)
struct TedUnitCommand_GuardLocation_CreateGuardLocationCommandData final
{
public:
	TSubclassOf<class UTedUnitCommand_GuardLocation> CommandClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0028(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData) == 0x000008, "Wrong alignment on TedUnitCommand_GuardLocation_CreateGuardLocationCommandData");
static_assert(sizeof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData) == 0x000070, "Wrong size on TedUnitCommand_GuardLocation_CreateGuardLocationCommandData");
static_assert(offsetof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData, CommandClass) == 0x000000, "Member 'TedUnitCommand_GuardLocation_CreateGuardLocationCommandData::CommandClass' has a wrong offset!");
static_assert(offsetof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData, Location) == 0x000008, "Member 'TedUnitCommand_GuardLocation_CreateGuardLocationCommandData::Location' has a wrong offset!");
static_assert(offsetof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData, Radius) == 0x000020, "Member 'TedUnitCommand_GuardLocation_CreateGuardLocationCommandData::Radius' has a wrong offset!");
static_assert(offsetof(TedUnitCommand_GuardLocation_CreateGuardLocationCommandData, ReturnValue) == 0x000028, "Member 'TedUnitCommand_GuardLocation_CreateGuardLocationCommandData::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementReplicationManager.Client_ReceiveMovementSnapshotBatch
// 0x0028 (0x0028 - 0x0000)
struct TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch final
{
public:
	struct FRepMoveSnapshotBatch                  MoveSnapshotBatch;                                 // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch) == 0x000008, "Wrong alignment on TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch");
static_assert(sizeof(TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch) == 0x000028, "Wrong size on TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch");
static_assert(offsetof(TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch, MoveSnapshotBatch) == 0x000000, "Member 'TedUnitMovementReplicationManager_Client_ReceiveMovementSnapshotBatch::MoveSnapshotBatch' has a wrong offset!");

// Function Tempest.TedUnitMovementReplicationManager.OnRep_RegisteredUnits
// 0x0010 (0x0010 - 0x0000)
struct TedUnitMovementReplicationManager_OnRep_RegisteredUnits final
{
public:
	TArray<class ATedUnitBase*>                   OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementReplicationManager_OnRep_RegisteredUnits) == 0x000008, "Wrong alignment on TedUnitMovementReplicationManager_OnRep_RegisteredUnits");
static_assert(sizeof(TedUnitMovementReplicationManager_OnRep_RegisteredUnits) == 0x000010, "Wrong size on TedUnitMovementReplicationManager_OnRep_RegisteredUnits");
static_assert(offsetof(TedUnitMovementReplicationManager_OnRep_RegisteredUnits, OldValue) == 0x000000, "Member 'TedUnitMovementReplicationManager_OnRep_RegisteredUnits::OldValue' has a wrong offset!");

// Function Tempest.TedUnitMovementReplicationManager.Server_ReceiveMovementSnapshotBatchAck
// 0x0004 (0x0004 - 0x0000)
struct TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck final
{
public:
	int32                                         BatchID;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck) == 0x000004, "Wrong alignment on TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck");
static_assert(sizeof(TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck) == 0x000004, "Wrong size on TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck");
static_assert(offsetof(TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck, BatchID) == 0x000000, "Member 'TedUnitMovementReplicationManager_Server_ReceiveMovementSnapshotBatchAck::BatchID' has a wrong offset!");

// Function Tempest.TedUnitMovementReplicationManager.Server_ReceiveUnitRegisteredAck
// 0x0010 (0x0010 - 0x0000)
struct TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck final
{
public:
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck) == 0x000008, "Wrong alignment on TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck");
static_assert(sizeof(TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck) == 0x000010, "Wrong size on TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck");
static_assert(offsetof(TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck, Units) == 0x000000, "Member 'TedUnitMovementReplicationManager_Server_ReceiveUnitRegisteredAck::Units' has a wrong offset!");

// Function Tempest.TedDropDown.AddOption
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_AddOption final
{
public:
	int32                                         InOptionValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDropDown_AddOption) == 0x000004, "Wrong alignment on TedDropDown_AddOption");
static_assert(sizeof(TedDropDown_AddOption) == 0x000008, "Wrong size on TedDropDown_AddOption");
static_assert(offsetof(TedDropDown_AddOption, InOptionValue) == 0x000000, "Member 'TedDropDown_AddOption::InOptionValue' has a wrong offset!");
static_assert(offsetof(TedDropDown_AddOption, ReturnValue) == 0x000004, "Member 'TedDropDown_AddOption::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetOrCreateArrowMID
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_GetOrCreateArrowMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetOrCreateArrowMID) == 0x000008, "Wrong alignment on TedDropDown_GetOrCreateArrowMID");
static_assert(sizeof(TedDropDown_GetOrCreateArrowMID) == 0x000008, "Wrong size on TedDropDown_GetOrCreateArrowMID");
static_assert(offsetof(TedDropDown_GetOrCreateArrowMID, ReturnValue) == 0x000000, "Member 'TedDropDown_GetOrCreateArrowMID::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.RemoveOption
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_RemoveOption final
{
public:
	int32                                         InOptionValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDropDown_RemoveOption) == 0x000004, "Wrong alignment on TedDropDown_RemoveOption");
static_assert(sizeof(TedDropDown_RemoveOption) == 0x000008, "Wrong size on TedDropDown_RemoveOption");
static_assert(offsetof(TedDropDown_RemoveOption, InOptionValue) == 0x000000, "Member 'TedDropDown_RemoveOption::InOptionValue' has a wrong offset!");
static_assert(offsetof(TedDropDown_RemoveOption, ReturnValue) == 0x000004, "Member 'TedDropDown_RemoveOption::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.SelectOptionByIndex
// 0x0004 (0x0004 - 0x0000)
struct TedDropDown_SelectOptionByIndex final
{
public:
	int32                                         InOptionIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_SelectOptionByIndex) == 0x000004, "Wrong alignment on TedDropDown_SelectOptionByIndex");
static_assert(sizeof(TedDropDown_SelectOptionByIndex) == 0x000004, "Wrong size on TedDropDown_SelectOptionByIndex");
static_assert(offsetof(TedDropDown_SelectOptionByIndex, InOptionIndex) == 0x000000, "Member 'TedDropDown_SelectOptionByIndex::InOptionIndex' has a wrong offset!");

// Function Tempest.TedDropDown.SelectOptionByValue
// 0x0004 (0x0004 - 0x0000)
struct TedDropDown_SelectOptionByValue final
{
public:
	int32                                         InOptionValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_SelectOptionByValue) == 0x000004, "Wrong alignment on TedDropDown_SelectOptionByValue");
static_assert(sizeof(TedDropDown_SelectOptionByValue) == 0x000004, "Wrong size on TedDropDown_SelectOptionByValue");
static_assert(offsetof(TedDropDown_SelectOptionByValue, InOptionValue) == 0x000000, "Member 'TedDropDown_SelectOptionByValue::InOptionValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetArrowMID
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_GetArrowMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetArrowMID) == 0x000008, "Wrong alignment on TedDropDown_GetArrowMID");
static_assert(sizeof(TedDropDown_GetArrowMID) == 0x000008, "Wrong size on TedDropDown_GetArrowMID");
static_assert(offsetof(TedDropDown_GetArrowMID, ReturnValue) == 0x000000, "Member 'TedDropDown_GetArrowMID::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetOptionIndex
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_GetOptionIndex final
{
public:
	int32                                         InOptionValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetOptionIndex) == 0x000004, "Wrong alignment on TedDropDown_GetOptionIndex");
static_assert(sizeof(TedDropDown_GetOptionIndex) == 0x000008, "Wrong size on TedDropDown_GetOptionIndex");
static_assert(offsetof(TedDropDown_GetOptionIndex, InOptionValue) == 0x000000, "Member 'TedDropDown_GetOptionIndex::InOptionValue' has a wrong offset!");
static_assert(offsetof(TedDropDown_GetOptionIndex, ReturnValue) == 0x000004, "Member 'TedDropDown_GetOptionIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetOptionsCount
// 0x0004 (0x0004 - 0x0000)
struct TedDropDown_GetOptionsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetOptionsCount) == 0x000004, "Wrong alignment on TedDropDown_GetOptionsCount");
static_assert(sizeof(TedDropDown_GetOptionsCount) == 0x000004, "Wrong size on TedDropDown_GetOptionsCount");
static_assert(offsetof(TedDropDown_GetOptionsCount, ReturnValue) == 0x000000, "Member 'TedDropDown_GetOptionsCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetOptionValue
// 0x0008 (0x0008 - 0x0000)
struct TedDropDown_GetOptionValue final
{
public:
	int32                                         InOptionIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetOptionValue) == 0x000004, "Wrong alignment on TedDropDown_GetOptionValue");
static_assert(sizeof(TedDropDown_GetOptionValue) == 0x000008, "Wrong size on TedDropDown_GetOptionValue");
static_assert(offsetof(TedDropDown_GetOptionValue, InOptionIndex) == 0x000000, "Member 'TedDropDown_GetOptionValue::InOptionIndex' has a wrong offset!");
static_assert(offsetof(TedDropDown_GetOptionValue, ReturnValue) == 0x000004, "Member 'TedDropDown_GetOptionValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetOptionValueText
// 0x0018 (0x0018 - 0x0000)
struct TedDropDown_GetOptionValueText final
{
public:
	int32                                         InOptionValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetOptionValueText) == 0x000008, "Wrong alignment on TedDropDown_GetOptionValueText");
static_assert(sizeof(TedDropDown_GetOptionValueText) == 0x000018, "Wrong size on TedDropDown_GetOptionValueText");
static_assert(offsetof(TedDropDown_GetOptionValueText, InOptionValue) == 0x000000, "Member 'TedDropDown_GetOptionValueText::InOptionValue' has a wrong offset!");
static_assert(offsetof(TedDropDown_GetOptionValueText, ReturnValue) == 0x000008, "Member 'TedDropDown_GetOptionValueText::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct TedDropDown_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on TedDropDown_GetSelectedOptionIndex");
static_assert(sizeof(TedDropDown_GetSelectedOptionIndex) == 0x000004, "Wrong size on TedDropDown_GetSelectedOptionIndex");
static_assert(offsetof(TedDropDown_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'TedDropDown_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.GetSelectedOptionValue
// 0x0004 (0x0004 - 0x0000)
struct TedDropDown_GetSelectedOptionValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_GetSelectedOptionValue) == 0x000004, "Wrong alignment on TedDropDown_GetSelectedOptionValue");
static_assert(sizeof(TedDropDown_GetSelectedOptionValue) == 0x000004, "Wrong size on TedDropDown_GetSelectedOptionValue");
static_assert(offsetof(TedDropDown_GetSelectedOptionValue, ReturnValue) == 0x000000, "Member 'TedDropDown_GetSelectedOptionValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedDropDown.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct TedDropDown_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDown_IsOpen) == 0x000001, "Wrong alignment on TedDropDown_IsOpen");
static_assert(sizeof(TedDropDown_IsOpen) == 0x000001, "Wrong size on TedDropDown_IsOpen");
static_assert(offsetof(TedDropDown_IsOpen, ReturnValue) == 0x000000, "Member 'TedDropDown_IsOpen::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameplayCueNotify_HitActor.OnNiagaraFinished
// 0x0008 (0x0008 - 0x0000)
struct TedGameplayCueNotify_HitActor_OnNiagaraFinished final
{
public:
	class UNiagaraComponent*                      ParticleSC;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameplayCueNotify_HitActor_OnNiagaraFinished) == 0x000008, "Wrong alignment on TedGameplayCueNotify_HitActor_OnNiagaraFinished");
static_assert(sizeof(TedGameplayCueNotify_HitActor_OnNiagaraFinished) == 0x000008, "Wrong size on TedGameplayCueNotify_HitActor_OnNiagaraFinished");
static_assert(offsetof(TedGameplayCueNotify_HitActor_OnNiagaraFinished, ParticleSC) == 0x000000, "Member 'TedGameplayCueNotify_HitActor_OnNiagaraFinished::ParticleSC' has a wrong offset!");

// Function Tempest.TedGameplayCueNotify_HitActor.OnParticleFinished
// 0x0008 (0x0008 - 0x0000)
struct TedGameplayCueNotify_HitActor_OnParticleFinished final
{
public:
	class UParticleSystemComponent*               ParticleSC;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameplayCueNotify_HitActor_OnParticleFinished) == 0x000008, "Wrong alignment on TedGameplayCueNotify_HitActor_OnParticleFinished");
static_assert(sizeof(TedGameplayCueNotify_HitActor_OnParticleFinished) == 0x000008, "Wrong size on TedGameplayCueNotify_HitActor_OnParticleFinished");
static_assert(offsetof(TedGameplayCueNotify_HitActor_OnParticleFinished, ParticleSC) == 0x000000, "Member 'TedGameplayCueNotify_HitActor_OnParticleFinished::ParticleSC' has a wrong offset!");

// Function Tempest.TedGameplayCueNotify_HitActor.OnSoundFinished
// 0x0008 (0x0008 - 0x0000)
struct TedGameplayCueNotify_HitActor_OnSoundFinished final
{
public:
	class UAudioComponent*                        AudioComp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameplayCueNotify_HitActor_OnSoundFinished) == 0x000008, "Wrong alignment on TedGameplayCueNotify_HitActor_OnSoundFinished");
static_assert(sizeof(TedGameplayCueNotify_HitActor_OnSoundFinished) == 0x000008, "Wrong size on TedGameplayCueNotify_HitActor_OnSoundFinished");
static_assert(offsetof(TedGameplayCueNotify_HitActor_OnSoundFinished, AudioComp) == 0x000000, "Member 'TedGameplayCueNotify_HitActor_OnSoundFinished::AudioComp' has a wrong offset!");

// Function Tempest.TedGameplayCueNotify_HitActor.K2_GetFXAssetConfigs
// 0x00F0 (0x00F0 - 0x0000)
struct TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GCueParams;                                        // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FGCueParticleConfig>            ReturnValue;                                       // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs) == 0x000008, "Wrong alignment on TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs");
static_assert(sizeof(TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs) == 0x0000F0, "Wrong size on TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs");
static_assert(offsetof(TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs, TargetActor) == 0x000000, "Member 'TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs::TargetActor' has a wrong offset!");
static_assert(offsetof(TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs, GCueParams) == 0x000008, "Member 'TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs::GCueParams' has a wrong offset!");
static_assert(offsetof(TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs, ReturnValue) == 0x0000E0, "Member 'TedGameplayCueNotify_HitActor_K2_GetFXAssetConfigs::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameMode_MP.OnInactivePlayerStateEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedGameMode_MP_OnInactivePlayerStateEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameMode_MP_OnInactivePlayerStateEndPlay) == 0x000008, "Wrong alignment on TedGameMode_MP_OnInactivePlayerStateEndPlay");
static_assert(sizeof(TedGameMode_MP_OnInactivePlayerStateEndPlay) == 0x000010, "Wrong size on TedGameMode_MP_OnInactivePlayerStateEndPlay");
static_assert(offsetof(TedGameMode_MP_OnInactivePlayerStateEndPlay, InActor) == 0x000000, "Member 'TedGameMode_MP_OnInactivePlayerStateEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedGameMode_MP_OnInactivePlayerStateEndPlay, InEndPlayReason) == 0x000008, "Member 'TedGameMode_MP_OnInactivePlayerStateEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.CanContinueCampaign
// 0x0010 (0x0010 - 0x0000)
struct TedGameProgressFunctionLibrary_CanContinueCampaign final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_CanContinueCampaign) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_CanContinueCampaign");
static_assert(sizeof(TedGameProgressFunctionLibrary_CanContinueCampaign) == 0x000010, "Wrong size on TedGameProgressFunctionLibrary_CanContinueCampaign");
static_assert(offsetof(TedGameProgressFunctionLibrary_CanContinueCampaign, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_CanContinueCampaign::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_CanContinueCampaign, ReturnValue) == 0x000008, "Member 'TedGameProgressFunctionLibrary_CanContinueCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.ContinueCampaignFromBriefing
// 0x0020 (0x0020 - 0x0000)
struct TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing");
static_assert(sizeof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing) == 0x000020, "Wrong size on TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing, InMap) == 0x000010, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing::InMap' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing, ReturnValue) == 0x000018, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefing::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.ContinueCampaignFromBriefingWithDifficulty
// 0x0020 (0x0020 - 0x0000)
struct TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            InDifficulty;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty");
static_assert(sizeof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty) == 0x000020, "Wrong size on TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty, InMap) == 0x000010, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty::InMap' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty, InDifficulty) == 0x000018, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty::InDifficulty' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty, ReturnValue) == 0x000019, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromBriefingWithDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.ContinueCampaignFromMap
// 0x0020 (0x0020 - 0x0000)
struct TedGameProgressFunctionLibrary_ContinueCampaignFromMap final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOpenMap;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_ContinueCampaignFromMap");
static_assert(sizeof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap) == 0x000020, "Wrong size on TedGameProgressFunctionLibrary_ContinueCampaignFromMap");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromMap::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromMap::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap, InMap) == 0x000010, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromMap::InMap' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap, bInOpenMap) == 0x000018, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromMap::bInOpenMap' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_ContinueCampaignFromMap, ReturnValue) == 0x000019, "Member 'TedGameProgressFunctionLibrary_ContinueCampaignFromMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.GetCampaignLatestUnlockedMap
// 0x0018 (0x0018 - 0x0000)
struct TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap");
static_assert(sizeof(TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap) == 0x000018, "Wrong size on TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap, ReturnValue) == 0x000010, "Member 'TedGameProgressFunctionLibrary_GetCampaignLatestUnlockedMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.GetCurrentCampaign
// 0x0010 (0x0010 - 0x0000)
struct TedGameProgressFunctionLibrary_GetCurrentCampaign final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameProgressFunctionLibrary_GetCurrentCampaign) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_GetCurrentCampaign");
static_assert(sizeof(TedGameProgressFunctionLibrary_GetCurrentCampaign) == 0x000010, "Wrong size on TedGameProgressFunctionLibrary_GetCurrentCampaign");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCurrentCampaign, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_GetCurrentCampaign::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCurrentCampaign, ReturnValue) == 0x000008, "Member 'TedGameProgressFunctionLibrary_GetCurrentCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.GetCurrentCampaignMap
// 0x0010 (0x0010 - 0x0000)
struct TedGameProgressFunctionLibrary_GetCurrentCampaignMap final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameProgressFunctionLibrary_GetCurrentCampaignMap) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_GetCurrentCampaignMap");
static_assert(sizeof(TedGameProgressFunctionLibrary_GetCurrentCampaignMap) == 0x000010, "Wrong size on TedGameProgressFunctionLibrary_GetCurrentCampaignMap");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCurrentCampaignMap, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_GetCurrentCampaignMap::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_GetCurrentCampaignMap, ReturnValue) == 0x000008, "Member 'TedGameProgressFunctionLibrary_GetCurrentCampaignMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.IsAnyCampaignStarted
// 0x0010 (0x0010 - 0x0000)
struct TedGameProgressFunctionLibrary_IsAnyCampaignStarted final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_IsAnyCampaignStarted) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_IsAnyCampaignStarted");
static_assert(sizeof(TedGameProgressFunctionLibrary_IsAnyCampaignStarted) == 0x000010, "Wrong size on TedGameProgressFunctionLibrary_IsAnyCampaignStarted");
static_assert(offsetof(TedGameProgressFunctionLibrary_IsAnyCampaignStarted, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_IsAnyCampaignStarted::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_IsAnyCampaignStarted, ReturnValue) == 0x000008, "Member 'TedGameProgressFunctionLibrary_IsAnyCampaignStarted::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.IsCampaignStarted
// 0x0018 (0x0018 - 0x0000)
struct TedGameProgressFunctionLibrary_IsCampaignStarted final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_IsCampaignStarted) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_IsCampaignStarted");
static_assert(sizeof(TedGameProgressFunctionLibrary_IsCampaignStarted) == 0x000018, "Wrong size on TedGameProgressFunctionLibrary_IsCampaignStarted");
static_assert(offsetof(TedGameProgressFunctionLibrary_IsCampaignStarted, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_IsCampaignStarted::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_IsCampaignStarted, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_IsCampaignStarted::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_IsCampaignStarted, ReturnValue) == 0x000010, "Member 'TedGameProgressFunctionLibrary_IsCampaignStarted::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.SimulateGameProgress
// 0x0010 (0x0010 - 0x0000)
struct TedGameProgressFunctionLibrary_SimulateGameProgress final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedSimulatedGameProgress*        InSimulatedProgress;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameProgressFunctionLibrary_SimulateGameProgress) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_SimulateGameProgress");
static_assert(sizeof(TedGameProgressFunctionLibrary_SimulateGameProgress) == 0x000010, "Wrong size on TedGameProgressFunctionLibrary_SimulateGameProgress");
static_assert(offsetof(TedGameProgressFunctionLibrary_SimulateGameProgress, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_SimulateGameProgress::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_SimulateGameProgress, InSimulatedProgress) == 0x000008, "Member 'TedGameProgressFunctionLibrary_SimulateGameProgress::InSimulatedProgress' has a wrong offset!");

// Function Tempest.TedGameProgressFunctionLibrary.StartCampaign
// 0x0018 (0x0018 - 0x0000)
struct TedGameProgressFunctionLibrary_StartCampaign final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOpenMap;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            InDifficulty;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameProgressFunctionLibrary_StartCampaign) == 0x000008, "Wrong alignment on TedGameProgressFunctionLibrary_StartCampaign");
static_assert(sizeof(TedGameProgressFunctionLibrary_StartCampaign) == 0x000018, "Wrong size on TedGameProgressFunctionLibrary_StartCampaign");
static_assert(offsetof(TedGameProgressFunctionLibrary_StartCampaign, InWorldContext) == 0x000000, "Member 'TedGameProgressFunctionLibrary_StartCampaign::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_StartCampaign, InCampaign) == 0x000008, "Member 'TedGameProgressFunctionLibrary_StartCampaign::InCampaign' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_StartCampaign, bInOpenMap) == 0x000010, "Member 'TedGameProgressFunctionLibrary_StartCampaign::bInOpenMap' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_StartCampaign, InDifficulty) == 0x000011, "Member 'TedGameProgressFunctionLibrary_StartCampaign::InDifficulty' has a wrong offset!");
static_assert(offsetof(TedGameProgressFunctionLibrary_StartCampaign, ReturnValue) == 0x000012, "Member 'TedGameProgressFunctionLibrary_StartCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.GetContent
// 0x0058 (0x0058 - 0x0000)
struct TedGenericDataContentSlot_GetContent final
{
public:
	struct FTedGenericDataContainer               OutContent;                                        // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_GetContent) == 0x000008, "Wrong alignment on TedGenericDataContentSlot_GetContent");
static_assert(sizeof(TedGenericDataContentSlot_GetContent) == 0x000058, "Wrong size on TedGenericDataContentSlot_GetContent");
static_assert(offsetof(TedGenericDataContentSlot_GetContent, OutContent) == 0x000000, "Member 'TedGenericDataContentSlot_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_GetContent, ReturnValue) == 0x000050, "Member 'TedGenericDataContentSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.GetGenericDataContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedGenericDataContentSlot_GetGenericDataContentPanel final
{
public:
	class UTedGenericDataContentPanel*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGenericDataContentSlot_GetGenericDataContentPanel) == 0x000008, "Wrong alignment on TedGenericDataContentSlot_GetGenericDataContentPanel");
static_assert(sizeof(TedGenericDataContentSlot_GetGenericDataContentPanel) == 0x000008, "Wrong size on TedGenericDataContentSlot_GetGenericDataContentPanel");
static_assert(offsetof(TedGenericDataContentSlot_GetGenericDataContentPanel, ReturnValue) == 0x000000, "Member 'TedGenericDataContentSlot_GetGenericDataContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.K2_GetContentValue_Float
// 0x0010 (0x0010 - 0x0000)
struct TedGenericDataContentSlot_K2_GetContentValue_Float final
{
public:
	struct FGameplayTag                           InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_K2_GetContentValue_Float) == 0x000004, "Wrong alignment on TedGenericDataContentSlot_K2_GetContentValue_Float");
static_assert(sizeof(TedGenericDataContentSlot_K2_GetContentValue_Float) == 0x000010, "Wrong size on TedGenericDataContentSlot_K2_GetContentValue_Float");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Float, InKey) == 0x000000, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Float::InKey' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Float, OutValue) == 0x000008, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Float::OutValue' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Float, ReturnValue) == 0x00000C, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Float::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.K2_GetContentValue_Int32
// 0x0010 (0x0010 - 0x0000)
struct TedGenericDataContentSlot_K2_GetContentValue_Int32 final
{
public:
	struct FGameplayTag                           InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_K2_GetContentValue_Int32) == 0x000004, "Wrong alignment on TedGenericDataContentSlot_K2_GetContentValue_Int32");
static_assert(sizeof(TedGenericDataContentSlot_K2_GetContentValue_Int32) == 0x000010, "Wrong size on TedGenericDataContentSlot_K2_GetContentValue_Int32");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Int32, InKey) == 0x000000, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Int32::InKey' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Int32, OutValue) == 0x000008, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Int32::OutValue' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Int32, ReturnValue) == 0x00000C, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Int32::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.K2_GetContentValue_Object
// 0x0020 (0x0020 - 0x0000)
struct TedGenericDataContentSlot_K2_GetContentValue_Object final
{
public:
	struct FGameplayTag                           InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    InOutputType;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutValue;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_K2_GetContentValue_Object) == 0x000008, "Wrong alignment on TedGenericDataContentSlot_K2_GetContentValue_Object");
static_assert(sizeof(TedGenericDataContentSlot_K2_GetContentValue_Object) == 0x000020, "Wrong size on TedGenericDataContentSlot_K2_GetContentValue_Object");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Object, InKey) == 0x000000, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Object::InKey' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Object, InOutputType) == 0x000008, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Object::InOutputType' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Object, OutValue) == 0x000010, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Object::OutValue' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Object, ReturnValue) == 0x000018, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Object::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.K2_GetContentValue_SlateBrush
// 0x00F0 (0x00F0 - 0x0000)
struct TedGenericDataContentSlot_K2_GetContentValue_SlateBrush final
{
public:
	struct FGameplayTag                           InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            OutValue;                                          // 0x0010(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_K2_GetContentValue_SlateBrush) == 0x000010, "Wrong alignment on TedGenericDataContentSlot_K2_GetContentValue_SlateBrush");
static_assert(sizeof(TedGenericDataContentSlot_K2_GetContentValue_SlateBrush) == 0x0000F0, "Wrong size on TedGenericDataContentSlot_K2_GetContentValue_SlateBrush");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_SlateBrush, InKey) == 0x000000, "Member 'TedGenericDataContentSlot_K2_GetContentValue_SlateBrush::InKey' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_SlateBrush, OutValue) == 0x000010, "Member 'TedGenericDataContentSlot_K2_GetContentValue_SlateBrush::OutValue' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_SlateBrush, ReturnValue) == 0x0000E0, "Member 'TedGenericDataContentSlot_K2_GetContentValue_SlateBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentSlot.K2_GetContentValue_Text
// 0x0020 (0x0020 - 0x0000)
struct TedGenericDataContentSlot_K2_GetContentValue_Text final
{
public:
	struct FGameplayTag                           InKey;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutValue;                                          // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentSlot_K2_GetContentValue_Text) == 0x000008, "Wrong alignment on TedGenericDataContentSlot_K2_GetContentValue_Text");
static_assert(sizeof(TedGenericDataContentSlot_K2_GetContentValue_Text) == 0x000020, "Wrong size on TedGenericDataContentSlot_K2_GetContentValue_Text");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Text, InKey) == 0x000000, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Text::InKey' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Text, OutValue) == 0x000008, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Text::OutValue' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentSlot_K2_GetContentValue_Text, ReturnValue) == 0x000018, "Member 'TedGenericDataContentSlot_K2_GetContentValue_Text::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameVersionWidget.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct TedGameVersionWidget_GetGameVersion final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameVersionWidget_GetGameVersion) == 0x000008, "Wrong alignment on TedGameVersionWidget_GetGameVersion");
static_assert(sizeof(TedGameVersionWidget_GetGameVersion) == 0x000010, "Wrong size on TedGameVersionWidget_GetGameVersion");
static_assert(offsetof(TedGameVersionWidget_GetGameVersion, ReturnValue) == 0x000000, "Member 'TedGameVersionWidget_GetGameVersion::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopupButtonsSlot.GetButtonsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedPopupButtonsSlot_GetButtonsPanel final
{
public:
	class UTedPopupButtonsPanel*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopupButtonsSlot_GetButtonsPanel) == 0x000008, "Wrong alignment on TedPopupButtonsSlot_GetButtonsPanel");
static_assert(sizeof(TedPopupButtonsSlot_GetButtonsPanel) == 0x000008, "Wrong size on TedPopupButtonsSlot_GetButtonsPanel");
static_assert(offsetof(TedPopupButtonsSlot_GetButtonsPanel, ReturnValue) == 0x000000, "Member 'TedPopupButtonsSlot_GetButtonsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopupButtonsSlot.GetContentDescription
// 0x0010 (0x0010 - 0x0000)
struct TedPopupButtonsSlot_GetContentDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopupButtonsSlot_GetContentDescription) == 0x000008, "Wrong alignment on TedPopupButtonsSlot_GetContentDescription");
static_assert(sizeof(TedPopupButtonsSlot_GetContentDescription) == 0x000010, "Wrong size on TedPopupButtonsSlot_GetContentDescription");
static_assert(offsetof(TedPopupButtonsSlot_GetContentDescription, ReturnValue) == 0x000000, "Member 'TedPopupButtonsSlot_GetContentDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopupButtonsSlot.GetContentText
// 0x0010 (0x0010 - 0x0000)
struct TedPopupButtonsSlot_GetContentText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopupButtonsSlot_GetContentText) == 0x000008, "Wrong alignment on TedPopupButtonsSlot_GetContentText");
static_assert(sizeof(TedPopupButtonsSlot_GetContentText) == 0x000010, "Wrong size on TedPopupButtonsSlot_GetContentText");
static_assert(offsetof(TedPopupButtonsSlot_GetContentText, ReturnValue) == 0x000000, "Member 'TedPopupButtonsSlot_GetContentText::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlowingButton.GetGlowTextBlocks
// 0x0010 (0x0010 - 0x0000)
struct TedGlowingButton_GetGlowTextBlocks final
{
public:
	TArray<class UTextBlock*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlowingButton_GetGlowTextBlocks) == 0x000008, "Wrong alignment on TedGlowingButton_GetGlowTextBlocks");
static_assert(sizeof(TedGlowingButton_GetGlowTextBlocks) == 0x000010, "Wrong size on TedGlowingButton_GetGlowTextBlocks");
static_assert(offsetof(TedGlowingButton_GetGlowTextBlocks, ReturnValue) == 0x000000, "Member 'TedGlowingButton_GetGlowTextBlocks::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlowingButton.SetGlowText
// 0x0010 (0x0010 - 0x0000)
struct TedGlowingButton_SetGlowText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlowingButton_SetGlowText) == 0x000008, "Wrong alignment on TedGlowingButton_SetGlowText");
static_assert(sizeof(TedGlowingButton_SetGlowText) == 0x000010, "Wrong size on TedGlowingButton_SetGlowText");
static_assert(offsetof(TedGlowingButton_SetGlowText, Text) == 0x000000, "Member 'TedGlowingButton_SetGlowText::Text' has a wrong offset!");

// Function Tempest.TedProjectile.GetDamageGESpec
// 0x0010 (0x0010 - 0x0000)
struct TedProjectile_GetDamageGESpec final
{
public:
	struct FGameplayEffectSpecHandle              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedProjectile_GetDamageGESpec) == 0x000008, "Wrong alignment on TedProjectile_GetDamageGESpec");
static_assert(sizeof(TedProjectile_GetDamageGESpec) == 0x000010, "Wrong size on TedProjectile_GetDamageGESpec");
static_assert(offsetof(TedProjectile_GetDamageGESpec, ReturnValue) == 0x000000, "Member 'TedProjectile_GetDamageGESpec::ReturnValue' has a wrong offset!");

// Function Tempest.TedProjectile.GetDestination
// 0x0018 (0x0018 - 0x0000)
struct TedProjectile_GetDestination final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedProjectile_GetDestination) == 0x000008, "Wrong alignment on TedProjectile_GetDestination");
static_assert(sizeof(TedProjectile_GetDestination) == 0x000018, "Wrong size on TedProjectile_GetDestination");
static_assert(offsetof(TedProjectile_GetDestination, ReturnValue) == 0x000000, "Member 'TedProjectile_GetDestination::ReturnValue' has a wrong offset!");

// Function Tempest.TedProjectile.GetStart
// 0x0018 (0x0018 - 0x0000)
struct TedProjectile_GetStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedProjectile_GetStart) == 0x000008, "Wrong alignment on TedProjectile_GetStart");
static_assert(sizeof(TedProjectile_GetStart) == 0x000018, "Wrong size on TedProjectile_GetStart");
static_assert(offsetof(TedProjectile_GetStart, ReturnValue) == 0x000000, "Member 'TedProjectile_GetStart::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorkerButton.K2_OnSingleWorkerHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct TedWorkerButton_K2_OnSingleWorkerHealthChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkerButton_K2_OnSingleWorkerHealthChanged) == 0x000004, "Wrong alignment on TedWorkerButton_K2_OnSingleWorkerHealthChanged");
static_assert(sizeof(TedWorkerButton_K2_OnSingleWorkerHealthChanged) == 0x000008, "Wrong size on TedWorkerButton_K2_OnSingleWorkerHealthChanged");
static_assert(offsetof(TedWorkerButton_K2_OnSingleWorkerHealthChanged, OldValue) == 0x000000, "Member 'TedWorkerButton_K2_OnSingleWorkerHealthChanged::OldValue' has a wrong offset!");
static_assert(offsetof(TedWorkerButton_K2_OnSingleWorkerHealthChanged, NewValue) == 0x000004, "Member 'TedWorkerButton_K2_OnSingleWorkerHealthChanged::NewValue' has a wrong offset!");

// Function Tempest.TedWorkerButton.SetWorkerData
// 0x0008 (0x0008 - 0x0000)
struct TedWorkerButton_SetWorkerData final
{
public:
	class ATedPawn*                               WorkerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkerButton_SetWorkerData) == 0x000008, "Wrong alignment on TedWorkerButton_SetWorkerData");
static_assert(sizeof(TedWorkerButton_SetWorkerData) == 0x000008, "Wrong size on TedWorkerButton_SetWorkerData");
static_assert(offsetof(TedWorkerButton_SetWorkerData, WorkerPawn) == 0x000000, "Member 'TedWorkerButton_SetWorkerData::WorkerPawn' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.EnableCurve
// 0x0001 (0x0001 - 0x0000)
struct TedTextBlock_TypeWriter_EnableCurve final
{
public:
	bool                                          bInEnable;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_EnableCurve) == 0x000001, "Wrong alignment on TedTextBlock_TypeWriter_EnableCurve");
static_assert(sizeof(TedTextBlock_TypeWriter_EnableCurve) == 0x000001, "Wrong size on TedTextBlock_TypeWriter_EnableCurve");
static_assert(offsetof(TedTextBlock_TypeWriter_EnableCurve, bInEnable) == 0x000000, "Member 'TedTextBlock_TypeWriter_EnableCurve::bInEnable' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetCurrentText
// 0x0010 (0x0010 - 0x0000)
struct TedTextBlock_TypeWriter_GetCurrentText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetCurrentText) == 0x000008, "Wrong alignment on TedTextBlock_TypeWriter_GetCurrentText");
static_assert(sizeof(TedTextBlock_TypeWriter_GetCurrentText) == 0x000010, "Wrong size on TedTextBlock_TypeWriter_GetCurrentText");
static_assert(offsetof(TedTextBlock_TypeWriter_GetCurrentText, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetCurrentText::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.K2_SetActualText
// 0x0010 (0x0010 - 0x0000)
struct TedTextBlock_TypeWriter_K2_SetActualText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_K2_SetActualText) == 0x000008, "Wrong alignment on TedTextBlock_TypeWriter_K2_SetActualText");
static_assert(sizeof(TedTextBlock_TypeWriter_K2_SetActualText) == 0x000010, "Wrong size on TedTextBlock_TypeWriter_K2_SetActualText");
static_assert(offsetof(TedTextBlock_TypeWriter_K2_SetActualText, InText) == 0x000000, "Member 'TedTextBlock_TypeWriter_K2_SetActualText::InText' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.SetCurve
// 0x0088 (0x0088 - 0x0000)
struct TedTextBlock_TypeWriter_SetCurve final
{
public:
	struct FRuntimeFloatCurve                     InCurve;                                           // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_SetCurve) == 0x000008, "Wrong alignment on TedTextBlock_TypeWriter_SetCurve");
static_assert(sizeof(TedTextBlock_TypeWriter_SetCurve) == 0x000088, "Wrong size on TedTextBlock_TypeWriter_SetCurve");
static_assert(offsetof(TedTextBlock_TypeWriter_SetCurve, InCurve) == 0x000000, "Member 'TedTextBlock_TypeWriter_SetCurve::InCurve' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.SetCurveFromAsset
// 0x0008 (0x0008 - 0x0000)
struct TedTextBlock_TypeWriter_SetCurveFromAsset final
{
public:
	class UCurveFloat*                            InCurve;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_SetCurveFromAsset) == 0x000008, "Wrong alignment on TedTextBlock_TypeWriter_SetCurveFromAsset");
static_assert(sizeof(TedTextBlock_TypeWriter_SetCurveFromAsset) == 0x000008, "Wrong size on TedTextBlock_TypeWriter_SetCurveFromAsset");
static_assert(offsetof(TedTextBlock_TypeWriter_SetCurveFromAsset, InCurve) == 0x000000, "Member 'TedTextBlock_TypeWriter_SetCurveFromAsset::InCurve' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.SetDuration
// 0x0004 (0x0004 - 0x0000)
struct TedTextBlock_TypeWriter_SetDuration final
{
public:
	float                                         InDuration;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_SetDuration) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_SetDuration");
static_assert(sizeof(TedTextBlock_TypeWriter_SetDuration) == 0x000004, "Wrong size on TedTextBlock_TypeWriter_SetDuration");
static_assert(offsetof(TedTextBlock_TypeWriter_SetDuration, InDuration) == 0x000000, "Member 'TedTextBlock_TypeWriter_SetDuration::InDuration' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.CanAnimateDuringPause
// 0x0001 (0x0001 - 0x0000)
struct TedTextBlock_TypeWriter_CanAnimateDuringPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_CanAnimateDuringPause) == 0x000001, "Wrong alignment on TedTextBlock_TypeWriter_CanAnimateDuringPause");
static_assert(sizeof(TedTextBlock_TypeWriter_CanAnimateDuringPause) == 0x000001, "Wrong size on TedTextBlock_TypeWriter_CanAnimateDuringPause");
static_assert(offsetof(TedTextBlock_TypeWriter_CanAnimateDuringPause, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_CanAnimateDuringPause::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct TedTextBlock_TypeWriter_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetDuration) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_GetDuration");
static_assert(sizeof(TedTextBlock_TypeWriter_GetDuration) == 0x000004, "Wrong size on TedTextBlock_TypeWriter_GetDuration");
static_assert(offsetof(TedTextBlock_TypeWriter_GetDuration, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetDuration::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct TedTextBlock_TypeWriter_GetElapsedTime final
{
public:
	bool                                          bInClampToDuration;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetElapsedTime) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_GetElapsedTime");
static_assert(sizeof(TedTextBlock_TypeWriter_GetElapsedTime) == 0x000008, "Wrong size on TedTextBlock_TypeWriter_GetElapsedTime");
static_assert(offsetof(TedTextBlock_TypeWriter_GetElapsedTime, bInClampToDuration) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetElapsedTime::bInClampToDuration' has a wrong offset!");
static_assert(offsetof(TedTextBlock_TypeWriter_GetElapsedTime, ReturnValue) == 0x000004, "Member 'TedTextBlock_TypeWriter_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct TedTextBlock_TypeWriter_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetProgress) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_GetProgress");
static_assert(sizeof(TedTextBlock_TypeWriter_GetProgress) == 0x000004, "Wrong size on TedTextBlock_TypeWriter_GetProgress");
static_assert(offsetof(TedTextBlock_TypeWriter_GetProgress, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct TedTextBlock_TypeWriter_GetRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetRemainingTime) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_GetRemainingTime");
static_assert(sizeof(TedTextBlock_TypeWriter_GetRemainingTime) == 0x000004, "Wrong size on TedTextBlock_TypeWriter_GetRemainingTime");
static_assert(offsetof(TedTextBlock_TypeWriter_GetRemainingTime, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.GetStartTime
// 0x0004 (0x0004 - 0x0000)
struct TedTextBlock_TypeWriter_GetStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_GetStartTime) == 0x000004, "Wrong alignment on TedTextBlock_TypeWriter_GetStartTime");
static_assert(sizeof(TedTextBlock_TypeWriter_GetStartTime) == 0x000004, "Wrong size on TedTextBlock_TypeWriter_GetStartTime");
static_assert(offsetof(TedTextBlock_TypeWriter_GetStartTime, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_GetStartTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct TedTextBlock_TypeWriter_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_IsRunning) == 0x000001, "Wrong alignment on TedTextBlock_TypeWriter_IsRunning");
static_assert(sizeof(TedTextBlock_TypeWriter_IsRunning) == 0x000001, "Wrong size on TedTextBlock_TypeWriter_IsRunning");
static_assert(offsetof(TedTextBlock_TypeWriter_IsRunning, ReturnValue) == 0x000000, "Member 'TedTextBlock_TypeWriter_IsRunning::ReturnValue' has a wrong offset!");

// Function Tempest.TedTextBlock_TypeWriter_VO.StartVO
// 0x0020 (0x0020 - 0x0000)
struct TedTextBlock_TypeWriter_VO_StartVO final
{
public:
	class USoundBase*                             InVO;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextBlock_TypeWriter_VO_StartVO) == 0x000008, "Wrong alignment on TedTextBlock_TypeWriter_VO_StartVO");
static_assert(sizeof(TedTextBlock_TypeWriter_VO_StartVO) == 0x000020, "Wrong size on TedTextBlock_TypeWriter_VO_StartVO");
static_assert(offsetof(TedTextBlock_TypeWriter_VO_StartVO, InVO) == 0x000000, "Member 'TedTextBlock_TypeWriter_VO_StartVO::InVO' has a wrong offset!");
static_assert(offsetof(TedTextBlock_TypeWriter_VO_StartVO, InText) == 0x000008, "Member 'TedTextBlock_TypeWriter_VO_StartVO::InText' has a wrong offset!");
static_assert(offsetof(TedTextBlock_TypeWriter_VO_StartVO, ReturnValue) == 0x000018, "Member 'TedTextBlock_TypeWriter_VO_StartVO::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotConfig.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct TedHotspotConfig_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHotspotConfig_GetDuration) == 0x000004, "Wrong alignment on TedHotspotConfig_GetDuration");
static_assert(sizeof(TedHotspotConfig_GetDuration) == 0x000004, "Wrong size on TedHotspotConfig_GetDuration");
static_assert(offsetof(TedHotspotConfig_GetDuration, ReturnValue) == 0x000000, "Member 'TedHotspotConfig_GetDuration::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotConfig.GetHotspotRadius
// 0x0004 (0x0004 - 0x0000)
struct TedHotspotConfig_GetHotspotRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHotspotConfig_GetHotspotRadius) == 0x000004, "Wrong alignment on TedHotspotConfig_GetHotspotRadius");
static_assert(sizeof(TedHotspotConfig_GetHotspotRadius) == 0x000004, "Wrong size on TedHotspotConfig_GetHotspotRadius");
static_assert(offsetof(TedHotspotConfig_GetHotspotRadius, ReturnValue) == 0x000000, "Member 'TedHotspotConfig_GetHotspotRadius::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotConfig.GetPriority
// 0x0004 (0x0004 - 0x0000)
struct TedHotspotConfig_GetPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHotspotConfig_GetPriority) == 0x000004, "Wrong alignment on TedHotspotConfig_GetPriority");
static_assert(sizeof(TedHotspotConfig_GetPriority) == 0x000004, "Wrong size on TedHotspotConfig_GetPriority");
static_assert(offsetof(TedHotspotConfig_GetPriority, ReturnValue) == 0x000000, "Member 'TedHotspotConfig_GetPriority::ReturnValue' has a wrong offset!");

// Function Tempest.TedHotspotConfig.IsUsingTargetLocation
// 0x0001 (0x0001 - 0x0000)
struct TedHotspotConfig_IsUsingTargetLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHotspotConfig_IsUsingTargetLocation) == 0x000001, "Wrong alignment on TedHotspotConfig_IsUsingTargetLocation");
static_assert(sizeof(TedHotspotConfig_IsUsingTargetLocation) == 0x000001, "Wrong size on TedHotspotConfig_IsUsingTargetLocation");
static_assert(offsetof(TedHotspotConfig_IsUsingTargetLocation, ReturnValue) == 0x000000, "Member 'TedHotspotConfig_IsUsingTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedCampaignSlotsPanel.SlotRequest_Delete
// 0x0004 (0x0004 - 0x0000)
struct TedCampaignSlotsPanel_SlotRequest_Delete final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCampaignSlotsPanel_SlotRequest_Delete) == 0x000004, "Wrong alignment on TedCampaignSlotsPanel_SlotRequest_Delete");
static_assert(sizeof(TedCampaignSlotsPanel_SlotRequest_Delete) == 0x000004, "Wrong size on TedCampaignSlotsPanel_SlotRequest_Delete");
static_assert(offsetof(TedCampaignSlotsPanel_SlotRequest_Delete, SlotIndex) == 0x000000, "Member 'TedCampaignSlotsPanel_SlotRequest_Delete::SlotIndex' has a wrong offset!");

// Function Tempest.TedCampaignSlotsPanel.GetSlotContentData
// 0x0010 (0x0010 - 0x0000)
struct TedCampaignSlotsPanel_GetSlotContentData final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedSavedGameProfileInfo*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCampaignSlotsPanel_GetSlotContentData) == 0x000008, "Wrong alignment on TedCampaignSlotsPanel_GetSlotContentData");
static_assert(sizeof(TedCampaignSlotsPanel_GetSlotContentData) == 0x000010, "Wrong size on TedCampaignSlotsPanel_GetSlotContentData");
static_assert(offsetof(TedCampaignSlotsPanel_GetSlotContentData, SlotIndex) == 0x000000, "Member 'TedCampaignSlotsPanel_GetSlotContentData::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedCampaignSlotsPanel_GetSlotContentData, ReturnValue) == 0x000008, "Member 'TedCampaignSlotsPanel_GetSlotContentData::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.AbbreviateTextBeyondLength
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_AbbreviateTextBeyondLength final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InLength;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_AbbreviateTextBeyondLength) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_AbbreviateTextBeyondLength");
static_assert(sizeof(TedUIFunctionsLibrary_AbbreviateTextBeyondLength) == 0x000028, "Wrong size on TedUIFunctionsLibrary_AbbreviateTextBeyondLength");
static_assert(offsetof(TedUIFunctionsLibrary_AbbreviateTextBeyondLength, InText) == 0x000000, "Member 'TedUIFunctionsLibrary_AbbreviateTextBeyondLength::InText' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_AbbreviateTextBeyondLength, InLength) == 0x000010, "Member 'TedUIFunctionsLibrary_AbbreviateTextBeyondLength::InLength' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_AbbreviateTextBeyondLength, ReturnValue) == 0x000018, "Member 'TedUIFunctionsLibrary_AbbreviateTextBeyondLength::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.BotDifficultyAsLocalizedText
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_BotDifficultyAsLocalizedText final
{
public:
	ETedBotDifficulty                             Difficulty;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_BotDifficultyAsLocalizedText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_BotDifficultyAsLocalizedText");
static_assert(sizeof(TedUIFunctionsLibrary_BotDifficultyAsLocalizedText) == 0x000018, "Wrong size on TedUIFunctionsLibrary_BotDifficultyAsLocalizedText");
static_assert(offsetof(TedUIFunctionsLibrary_BotDifficultyAsLocalizedText, Difficulty) == 0x000000, "Member 'TedUIFunctionsLibrary_BotDifficultyAsLocalizedText::Difficulty' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_BotDifficultyAsLocalizedText, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_BotDifficultyAsLocalizedText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.BranchUITheme
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_BranchUITheme final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_BranchUITheme) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_BranchUITheme");
static_assert(sizeof(TedUIFunctionsLibrary_BranchUITheme) == 0x000010, "Wrong size on TedUIFunctionsLibrary_BranchUITheme");
static_assert(offsetof(TedUIFunctionsLibrary_BranchUITheme, WorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_BranchUITheme::WorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_BranchUITheme, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_BranchUITheme::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.CalculateMinimapLocation
// 0x0068 (0x0068 - 0x0000)
struct TedUIFunctionsLibrary_CalculateMinimapLocation final
{
public:
	struct FBox                                   InWorldBounds;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              InWorldLocation;                                   // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InMinimapSize;                                     // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutResult;                                         // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_CalculateMinimapLocation) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_CalculateMinimapLocation");
static_assert(sizeof(TedUIFunctionsLibrary_CalculateMinimapLocation) == 0x000068, "Wrong size on TedUIFunctionsLibrary_CalculateMinimapLocation");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateMinimapLocation, InWorldBounds) == 0x000000, "Member 'TedUIFunctionsLibrary_CalculateMinimapLocation::InWorldBounds' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateMinimapLocation, InWorldLocation) == 0x000038, "Member 'TedUIFunctionsLibrary_CalculateMinimapLocation::InWorldLocation' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateMinimapLocation, InMinimapSize) == 0x000048, "Member 'TedUIFunctionsLibrary_CalculateMinimapLocation::InMinimapSize' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateMinimapLocation, OutResult) == 0x000058, "Member 'TedUIFunctionsLibrary_CalculateMinimapLocation::OutResult' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.CalculateTextSize
// 0x0080 (0x0080 - 0x0000)
struct TedUIFunctionsLibrary_CalculateTextSize final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         InFont;                                            // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_CalculateTextSize) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_CalculateTextSize");
static_assert(sizeof(TedUIFunctionsLibrary_CalculateTextSize) == 0x000080, "Wrong size on TedUIFunctionsLibrary_CalculateTextSize");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateTextSize, InText) == 0x000000, "Member 'TedUIFunctionsLibrary_CalculateTextSize::InText' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateTextSize, InFont) == 0x000010, "Member 'TedUIFunctionsLibrary_CalculateTextSize::InFont' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CalculateTextSize, ReturnValue) == 0x000070, "Member 'TedUIFunctionsLibrary_CalculateTextSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.CapitalizeFirstLetter
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_CapitalizeFirstLetter final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_CapitalizeFirstLetter) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_CapitalizeFirstLetter");
static_assert(sizeof(TedUIFunctionsLibrary_CapitalizeFirstLetter) == 0x000020, "Wrong size on TedUIFunctionsLibrary_CapitalizeFirstLetter");
static_assert(offsetof(TedUIFunctionsLibrary_CapitalizeFirstLetter, InString) == 0x000000, "Member 'TedUIFunctionsLibrary_CapitalizeFirstLetter::InString' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CapitalizeFirstLetter, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_CapitalizeFirstLetter::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.CleanupPlayerName
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_CleanupPlayerName final
{
public:
	class FString                                 InPlayerName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InMaxLength;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_CleanupPlayerName) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_CleanupPlayerName");
static_assert(sizeof(TedUIFunctionsLibrary_CleanupPlayerName) == 0x000028, "Wrong size on TedUIFunctionsLibrary_CleanupPlayerName");
static_assert(offsetof(TedUIFunctionsLibrary_CleanupPlayerName, InPlayerName) == 0x000000, "Member 'TedUIFunctionsLibrary_CleanupPlayerName::InPlayerName' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CleanupPlayerName, InMaxLength) == 0x000010, "Member 'TedUIFunctionsLibrary_CleanupPlayerName::InMaxLength' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_CleanupPlayerName, ReturnValue) == 0x000018, "Member 'TedUIFunctionsLibrary_CleanupPlayerName::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.DifficultyAsText
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_DifficultyAsText final
{
public:
	ETedGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_DifficultyAsText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_DifficultyAsText");
static_assert(sizeof(TedUIFunctionsLibrary_DifficultyAsText) == 0x000018, "Wrong size on TedUIFunctionsLibrary_DifficultyAsText");
static_assert(offsetof(TedUIFunctionsLibrary_DifficultyAsText, Difficulty) == 0x000000, "Member 'TedUIFunctionsLibrary_DifficultyAsText::Difficulty' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_DifficultyAsText, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_DifficultyAsText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.EvaluateRowAndColumn_Columns
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InColumns;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRow;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutColumn;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns");
static_assert(sizeof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns) == 0x000010, "Wrong size on TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns, InSlotIndex) == 0x000000, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns, InColumns) == 0x000004, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns::InColumns' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns, OutRow) == 0x000008, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns::OutRow' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns, OutColumn) == 0x00000C, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Columns::OutColumn' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.EvaluateRowAndColumn_Rows
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRows;                                            // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRow;                                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutColumn;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows");
static_assert(sizeof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows) == 0x000010, "Wrong size on TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows, InSlotIndex) == 0x000000, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows, InRows) == 0x000004, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows::InRows' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows, OutRow) == 0x000008, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows::OutRow' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows, OutColumn) == 0x00000C, "Member 'TedUIFunctionsLibrary_EvaluateRowAndColumn_Rows::OutColumn' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.FindChildrenOfType
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_FindChildrenOfType final
{
public:
	const class UUserWidget*                      Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UWidget*>                        ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_FindChildrenOfType) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_FindChildrenOfType");
static_assert(sizeof(TedUIFunctionsLibrary_FindChildrenOfType) == 0x000020, "Wrong size on TedUIFunctionsLibrary_FindChildrenOfType");
static_assert(offsetof(TedUIFunctionsLibrary_FindChildrenOfType, Widget) == 0x000000, "Member 'TedUIFunctionsLibrary_FindChildrenOfType::Widget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_FindChildrenOfType, Class_0) == 0x000008, "Member 'TedUIFunctionsLibrary_FindChildrenOfType::Class_0' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_FindChildrenOfType, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_FindChildrenOfType::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetBrushFromSelector
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetBrushFromSelector final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateBrushAsset*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetBrushFromSelector) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetBrushFromSelector");
static_assert(sizeof(TedUIFunctionsLibrary_GetBrushFromSelector) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetBrushFromSelector");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector, InState) == 0x000018, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector::InState' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetBrushFromSelector_ContentSlot
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTedContentPanelSlotBase*         InWidget;                                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateBrushAsset*                       ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot");
static_assert(sizeof(TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot, InWidget) == 0x000018, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetBrushFromSelector_ContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetCampaignDifficulty
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_GetCampaignDifficulty final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetCampaignDifficulty) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetCampaignDifficulty");
static_assert(sizeof(TedUIFunctionsLibrary_GetCampaignDifficulty) == 0x000010, "Wrong size on TedUIFunctionsLibrary_GetCampaignDifficulty");
static_assert(offsetof(TedUIFunctionsLibrary_GetCampaignDifficulty, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetCampaignDifficulty::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetCampaignDifficulty, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetCampaignDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetChordDisplayText
// 0x0038 (0x0038 - 0x0000)
struct TedUIFunctionsLibrary_GetChordDisplayText final
{
public:
	struct FInputChord                            InChord;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetChordDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetChordDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetChordDisplayText) == 0x000038, "Wrong size on TedUIFunctionsLibrary_GetChordDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayText, InChord) == 0x000000, "Member 'TedUIFunctionsLibrary_GetChordDisplayText::InChord' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayText, bInLong) == 0x000020, "Member 'TedUIFunctionsLibrary_GetChordDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayText, ReturnValue) == 0x000028, "Member 'TedUIFunctionsLibrary_GetChordDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetChordDisplayTextLoose
// 0x0048 (0x0048 - 0x0000)
struct TedUIFunctionsLibrary_GetChordDisplayTextLoose final
{
public:
	struct FKey                                   InPrimaryKey;                                      // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InSecondaryKey;                                    // 0x0018(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInShift;                                          // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCtrl;                                           // 0x0031(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAlt;                                            // 0x0032(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0033(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0038(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetChordDisplayTextLoose) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetChordDisplayTextLoose");
static_assert(sizeof(TedUIFunctionsLibrary_GetChordDisplayTextLoose) == 0x000048, "Wrong size on TedUIFunctionsLibrary_GetChordDisplayTextLoose");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, InPrimaryKey) == 0x000000, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::InPrimaryKey' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, InSecondaryKey) == 0x000018, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::InSecondaryKey' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, bInShift) == 0x000030, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::bInShift' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, bInCtrl) == 0x000031, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::bInCtrl' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, bInAlt) == 0x000032, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::bInAlt' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, bInLong) == 0x000033, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetChordDisplayTextLoose, ReturnValue) == 0x000038, "Member 'TedUIFunctionsLibrary_GetChordDisplayTextLoose::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetCompletedMapRequisitionReward
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetCompletedMapRequisitionReward final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      MapInfo;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GainedRequisition;                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalRequisition;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            Difficulty;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetCompletedMapRequisitionReward");
static_assert(sizeof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetCompletedMapRequisitionReward");
static_assert(offsetof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetCompletedMapRequisitionReward::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward, MapInfo) == 0x000008, "Member 'TedUIFunctionsLibrary_GetCompletedMapRequisitionReward::MapInfo' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward, GainedRequisition) == 0x000010, "Member 'TedUIFunctionsLibrary_GetCompletedMapRequisitionReward::GainedRequisition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward, TotalRequisition) == 0x000014, "Member 'TedUIFunctionsLibrary_GetCompletedMapRequisitionReward::TotalRequisition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetCompletedMapRequisitionReward, Difficulty) == 0x000018, "Member 'TedUIFunctionsLibrary_GetCompletedMapRequisitionReward::Difficulty' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetDateTimeShort
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetDateTimeShort final
{
public:
	struct FDateTime                              InDateTime;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetDateTimeShort) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetDateTimeShort");
static_assert(sizeof(TedUIFunctionsLibrary_GetDateTimeShort) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetDateTimeShort");
static_assert(offsetof(TedUIFunctionsLibrary_GetDateTimeShort, InDateTime) == 0x000000, "Member 'TedUIFunctionsLibrary_GetDateTimeShort::InDateTime' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetDateTimeShort, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetDateTimeShort::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetFactionName
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetFactionName final
{
public:
	ETedFaction                                   InFaction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetFactionName) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetFactionName");
static_assert(sizeof(TedUIFunctionsLibrary_GetFactionName) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetFactionName");
static_assert(offsetof(TedUIFunctionsLibrary_GetFactionName, InFaction) == 0x000000, "Member 'TedUIFunctionsLibrary_GetFactionName::InFaction' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetFactionName, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetFactionName::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetFormattedText
// 0x0070 (0x0070 - 0x0000)
struct TedUIFunctionsLibrary_GetFormattedText final
{
public:
	struct FTedFormattedText                      InText;                                            // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetFormattedText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetFormattedText");
static_assert(sizeof(TedUIFunctionsLibrary_GetFormattedText) == 0x000070, "Wrong size on TedUIFunctionsLibrary_GetFormattedText");
static_assert(offsetof(TedUIFunctionsLibrary_GetFormattedText, InText) == 0x000000, "Member 'TedUIFunctionsLibrary_GetFormattedText::InText' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetFormattedText, ReturnValue) == 0x000060, "Member 'TedUIFunctionsLibrary_GetFormattedText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetHighestCompletedMapDifficulty
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      MapInfo;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty");
static_assert(sizeof(TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty");
static_assert(offsetof(TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty, MapInfo) == 0x000008, "Member 'TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty::MapInfo' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetHighestCompletedMapDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputActionChord
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetInputActionChord final
{
public:
	class FName                                   InInputActionName;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputActionChord) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputActionChord");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputActionChord) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetInputActionChord");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionChord, InInputActionName) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputActionChord::InInputActionName' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionChord, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputActionChord::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputActionDisplayText
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetInputActionDisplayText final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULocalPlayer*                     InLocalPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputActionDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputActionDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputActionDisplayText) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetInputActionDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionDisplayText, InputAction) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputActionDisplayText::InputAction' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionDisplayText, InLocalPlayer) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputActionDisplayText::InLocalPlayer' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionDisplayText, bInLong) == 0x000010, "Member 'TedUIFunctionsLibrary_GetInputActionDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionDisplayText, ReturnValue) == 0x000018, "Member 'TedUIFunctionsLibrary_GetInputActionDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputActionKey
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetInputActionKey final
{
public:
	const class UInputAction*                     InputAction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULocalPlayer*                     InLocalPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputActionKey) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputActionKey");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputActionKey) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetInputActionKey");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionKey, InputAction) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputActionKey::InputAction' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionKey, InLocalPlayer) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputActionKey::InLocalPlayer' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionKey, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetInputActionKey::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputActionMappingDisplayText
// 0x0040 (0x0040 - 0x0000)
struct TedUIFunctionsLibrary_GetInputActionMappingDisplayText final
{
public:
	struct FInputActionKeyMapping                 InMapping;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputActionMappingDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputActionMappingDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputActionMappingDisplayText) == 0x000040, "Wrong size on TedUIFunctionsLibrary_GetInputActionMappingDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionMappingDisplayText, InMapping) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputActionMappingDisplayText::InMapping' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionMappingDisplayText, bInLong) == 0x000028, "Member 'TedUIFunctionsLibrary_GetInputActionMappingDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputActionMappingDisplayText, ReturnValue) == 0x000030, "Member 'TedUIFunctionsLibrary_GetInputActionMappingDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputAxisKey
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetInputAxisKey final
{
public:
	class FName                                   InInputAxisName;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputAxisKey) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputAxisKey");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputAxisKey) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetInputAxisKey");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputAxisKey, InInputAxisName) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputAxisKey::InInputAxisName' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputAxisKey, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputAxisKey::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputAxisMappingDisplayText
// 0x0040 (0x0040 - 0x0000)
struct TedUIFunctionsLibrary_GetInputAxisMappingDisplayText final
{
public:
	struct FInputAxisKeyMapping                   InMapping;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputAxisMappingDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputAxisMappingDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputAxisMappingDisplayText) == 0x000040, "Wrong size on TedUIFunctionsLibrary_GetInputAxisMappingDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputAxisMappingDisplayText, InMapping) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputAxisMappingDisplayText::InMapping' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputAxisMappingDisplayText, bInLong) == 0x000028, "Member 'TedUIFunctionsLibrary_GetInputAxisMappingDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputAxisMappingDisplayText, ReturnValue) == 0x000030, "Member 'TedUIFunctionsLibrary_GetInputAxisMappingDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputDisplayText
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetInputDisplayText final
{
public:
	class FName                                   InInputName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAction;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputDisplayText) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetInputDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputDisplayText, InInputName) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputDisplayText::InInputName' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputDisplayText, bInAction) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputDisplayText::bInAction' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputDisplayText, bInLong) == 0x000009, "Member 'TedUIFunctionsLibrary_GetInputDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputDisplayText, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetInputDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputMappingKey
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetInputMappingKey final
{
public:
	class FName                                   InMappingName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ULocalPlayer*                     InLocalPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputMappingKey) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputMappingKey");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputMappingKey) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetInputMappingKey");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputMappingKey, InMappingName) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputMappingKey::InMappingName' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputMappingKey, InLocalPlayer) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputMappingKey::InLocalPlayer' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputMappingKey, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetInputMappingKey::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetInputShortcut_Action
// 0x0030 (0x0030 - 0x0000)
struct TedUIFunctionsLibrary_GetInputShortcut_Action final
{
public:
	class FName                                   InKeyBinding;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputChord                            OutShortcut;                                       // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetInputShortcut_Action) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetInputShortcut_Action");
static_assert(sizeof(TedUIFunctionsLibrary_GetInputShortcut_Action) == 0x000030, "Wrong size on TedUIFunctionsLibrary_GetInputShortcut_Action");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputShortcut_Action, InKeyBinding) == 0x000000, "Member 'TedUIFunctionsLibrary_GetInputShortcut_Action::InKeyBinding' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputShortcut_Action, OutShortcut) == 0x000008, "Member 'TedUIFunctionsLibrary_GetInputShortcut_Action::OutShortcut' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetInputShortcut_Action, ReturnValue) == 0x000028, "Member 'TedUIFunctionsLibrary_GetInputShortcut_Action::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetKeyDisplayText
// 0x0030 (0x0030 - 0x0000)
struct TedUIFunctionsLibrary_GetKeyDisplayText final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetKeyDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetKeyDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetKeyDisplayText) == 0x000030, "Wrong size on TedUIFunctionsLibrary_GetKeyDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetKeyDisplayText, InKey) == 0x000000, "Member 'TedUIFunctionsLibrary_GetKeyDisplayText::InKey' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetKeyDisplayText, bInLong) == 0x000018, "Member 'TedUIFunctionsLibrary_GetKeyDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetKeyDisplayText, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetKeyDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetMapProgressData
// 0x0030 (0x0030 - 0x0000)
struct TedUIFunctionsLibrary_GetMapProgressData final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      MapInfo;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FObjectivesData                        OutObjectivesData;                                 // 0x0010(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetMapProgressData) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetMapProgressData");
static_assert(sizeof(TedUIFunctionsLibrary_GetMapProgressData) == 0x000030, "Wrong size on TedUIFunctionsLibrary_GetMapProgressData");
static_assert(offsetof(TedUIFunctionsLibrary_GetMapProgressData, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetMapProgressData::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMapProgressData, MapInfo) == 0x000008, "Member 'TedUIFunctionsLibrary_GetMapProgressData::MapInfo' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMapProgressData, OutObjectivesData) == 0x000010, "Member 'TedUIFunctionsLibrary_GetMapProgressData::OutObjectivesData' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetMaterialFromSelector
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetMaterialFromSelector final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetMaterialFromSelector) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetMaterialFromSelector");
static_assert(sizeof(TedUIFunctionsLibrary_GetMaterialFromSelector) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetMaterialFromSelector");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector, InState) == 0x000018, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector::InState' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetMaterialFromSelector_ContentSlot
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTedContentPanelSlotBase*         InWidget;                                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot");
static_assert(sizeof(TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot, InWidget) == 0x000018, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetMaterialFromSelector_ContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetNameForBot
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetNameForBot final
{
public:
	ETedBotDifficulty                             InDifficulty;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetNameForBot) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetNameForBot");
static_assert(sizeof(TedUIFunctionsLibrary_GetNameForBot) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetNameForBot");
static_assert(offsetof(TedUIFunctionsLibrary_GetNameForBot, InDifficulty) == 0x000000, "Member 'TedUIFunctionsLibrary_GetNameForBot::InDifficulty' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetNameForBot, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetNameForBot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetOuterWidget
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetOuterWidget final
{
public:
	const class UUserWidget*                      InChild;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UWidget>                    OuterWidgetClass;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetOuterWidget) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetOuterWidget");
static_assert(sizeof(TedUIFunctionsLibrary_GetOuterWidget) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetOuterWidget");
static_assert(offsetof(TedUIFunctionsLibrary_GetOuterWidget, InChild) == 0x000000, "Member 'TedUIFunctionsLibrary_GetOuterWidget::InChild' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetOuterWidget, OuterWidgetClass) == 0x000008, "Member 'TedUIFunctionsLibrary_GetOuterWidget::OuterWidgetClass' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetOuterWidget, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetOuterWidget::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetPanelSlotPadding
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetPanelSlotPadding final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetPanelSlotPadding) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetPanelSlotPadding");
static_assert(sizeof(TedUIFunctionsLibrary_GetPanelSlotPadding) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetPanelSlotPadding");
static_assert(offsetof(TedUIFunctionsLibrary_GetPanelSlotPadding, InWidget) == 0x000000, "Member 'TedUIFunctionsLibrary_GetPanelSlotPadding::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPanelSlotPadding, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetPanelSlotPadding::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetPerceivedPlayerColor
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetPerceivedPlayerColor final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetPerceivedPlayerColor) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetPerceivedPlayerColor");
static_assert(sizeof(TedUIFunctionsLibrary_GetPerceivedPlayerColor) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetPerceivedPlayerColor");
static_assert(offsetof(TedUIFunctionsLibrary_GetPerceivedPlayerColor, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetPerceivedPlayerColor::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPerceivedPlayerColor, PlayerID) == 0x000008, "Member 'TedUIFunctionsLibrary_GetPerceivedPlayerColor::PlayerID' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPerceivedPlayerColor, ReturnValue) == 0x00000C, "Member 'TedUIFunctionsLibrary_GetPerceivedPlayerColor::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetPlayerName
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetPlayerName final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayerIndex;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InMaxLength;                                       // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAddElipsis;                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetPlayerName) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetPlayerName");
static_assert(sizeof(TedUIFunctionsLibrary_GetPlayerName) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetPlayerName");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerName, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetPlayerName::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerName, InPlayerIndex) == 0x000008, "Member 'TedUIFunctionsLibrary_GetPlayerName::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerName, InMaxLength) == 0x00000C, "Member 'TedUIFunctionsLibrary_GetPlayerName::InMaxLength' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerName, bShouldAddElipsis) == 0x00000D, "Member 'TedUIFunctionsLibrary_GetPlayerName::bShouldAddElipsis' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerName, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetPlayerNameFromPlayerState
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetPlayerNameFromPlayerState final
{
public:
	const class APlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InMaxLength;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAddElipsis;                                 // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetPlayerNameFromPlayerState");
static_assert(sizeof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetPlayerNameFromPlayerState");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState, InPlayerState) == 0x000000, "Member 'TedUIFunctionsLibrary_GetPlayerNameFromPlayerState::InPlayerState' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState, InMaxLength) == 0x000008, "Member 'TedUIFunctionsLibrary_GetPlayerNameFromPlayerState::InMaxLength' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState, bShouldAddElipsis) == 0x000009, "Member 'TedUIFunctionsLibrary_GetPlayerNameFromPlayerState::bShouldAddElipsis' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetPlayerNameFromPlayerState, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetPlayerNameFromPlayerState::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetShortcutChordDisplayText
// 0x0060 (0x0060 - 0x0000)
struct TedUIFunctionsLibrary_GetShortcutChordDisplayText final
{
public:
	struct FTedShortcutChordUI                    InShortcutChord;                                   // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreSecondary;                                // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0049(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetShortcutChordDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetShortcutChordDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetShortcutChordDisplayText) == 0x000060, "Wrong size on TedUIFunctionsLibrary_GetShortcutChordDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutChordDisplayText, InShortcutChord) == 0x000000, "Member 'TedUIFunctionsLibrary_GetShortcutChordDisplayText::InShortcutChord' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutChordDisplayText, bInIgnoreSecondary) == 0x000048, "Member 'TedUIFunctionsLibrary_GetShortcutChordDisplayText::bInIgnoreSecondary' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutChordDisplayText, bInLong) == 0x000049, "Member 'TedUIFunctionsLibrary_GetShortcutChordDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutChordDisplayText, ReturnValue) == 0x000050, "Member 'TedUIFunctionsLibrary_GetShortcutChordDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetShortcutDisplayText
// 0x0038 (0x0038 - 0x0000)
struct TedUIFunctionsLibrary_GetShortcutDisplayText final
{
public:
	struct FTedShortcutUI                         InShortcut;                                        // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInLong;                                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetShortcutDisplayText) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetShortcutDisplayText");
static_assert(sizeof(TedUIFunctionsLibrary_GetShortcutDisplayText) == 0x000038, "Wrong size on TedUIFunctionsLibrary_GetShortcutDisplayText");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutDisplayText, InShortcut) == 0x000000, "Member 'TedUIFunctionsLibrary_GetShortcutDisplayText::InShortcut' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutDisplayText, bInLong) == 0x000020, "Member 'TedUIFunctionsLibrary_GetShortcutDisplayText::bInLong' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetShortcutDisplayText, ReturnValue) == 0x000028, "Member 'TedUIFunctionsLibrary_GetShortcutDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetStyleFromSelector
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetStyleFromSelector final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USlateWidgetStyleAsset*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetStyleFromSelector) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetStyleFromSelector");
static_assert(sizeof(TedUIFunctionsLibrary_GetStyleFromSelector) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetStyleFromSelector");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector, InState) == 0x000018, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector::InState' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetStyleFromSelector_ContentSlot
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTedContentPanelSlotBase*         InWidget;                                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USlateWidgetStyleAsset*                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot");
static_assert(sizeof(TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot, InWidget) == 0x000018, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetStyleFromSelector_ContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetTeamName
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_GetTeamName final
{
public:
	ETedTeamID                                    InTeam;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetTeamName) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetTeamName");
static_assert(sizeof(TedUIFunctionsLibrary_GetTeamName) == 0x000018, "Wrong size on TedUIFunctionsLibrary_GetTeamName");
static_assert(offsetof(TedUIFunctionsLibrary_GetTeamName, InTeam) == 0x000000, "Member 'TedUIFunctionsLibrary_GetTeamName::InTeam' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTeamName, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetTeamName::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetTextureFromSelector
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetTextureFromSelector final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetTextureFromSelector) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetTextureFromSelector");
static_assert(sizeof(TedUIFunctionsLibrary_GetTextureFromSelector) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetTextureFromSelector");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector, InState) == 0x000018, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector::InState' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetTextureFromSelector_ContentSlot
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot final
{
public:
	struct FTedContentSlotStateAssetSelector      InSelector;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UTedContentPanelSlotBase*         InWidget;                                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot");
static_assert(sizeof(TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot) == 0x000028, "Wrong size on TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot, InSelector) == 0x000000, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot::InSelector' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot, InWidget) == 0x000018, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_GetTextureFromSelector_ContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetThemedMovie
// 0x0060 (0x0060 - 0x0000)
struct TedUIFunctionsLibrary_GetThemedMovie final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedThemeMovie                         InMovie;                                           // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 ReturnValue;                                       // 0x0058(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetThemedMovie) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetThemedMovie");
static_assert(sizeof(TedUIFunctionsLibrary_GetThemedMovie) == 0x000060, "Wrong size on TedUIFunctionsLibrary_GetThemedMovie");
static_assert(offsetof(TedUIFunctionsLibrary_GetThemedMovie, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetThemedMovie::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetThemedMovie, InMovie) == 0x000008, "Member 'TedUIFunctionsLibrary_GetThemedMovie::InMovie' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetThemedMovie, ReturnValue) == 0x000058, "Member 'TedUIFunctionsLibrary_GetThemedMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetTotalPanelSlotPaddingBetween
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UWidget*                          InRootWidget;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween");
static_assert(sizeof(TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween) == 0x000020, "Wrong size on TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween");
static_assert(offsetof(TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween, InWidget) == 0x000000, "Member 'TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween::InWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween, InRootWidget) == 0x000008, "Member 'TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween::InRootWidget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween, ReturnValue) == 0x000010, "Member 'TedUIFunctionsLibrary_GetTotalPanelSlotPaddingBetween::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetUITheme
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_GetUITheme final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_GetUITheme) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_GetUITheme");
static_assert(sizeof(TedUIFunctionsLibrary_GetUITheme) == 0x000010, "Wrong size on TedUIFunctionsLibrary_GetUITheme");
static_assert(offsetof(TedUIFunctionsLibrary_GetUITheme, WorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_GetUITheme::WorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetUITheme, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_GetUITheme::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.GetUnitCardWeaponWidthWidth
// 0x000C (0x000C - 0x0000)
struct TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth final
{
public:
	float                                         OutFixedWidth;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMinWidth;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMaxWidth;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth");
static_assert(sizeof(TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth) == 0x00000C, "Wrong size on TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth");
static_assert(offsetof(TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth, OutFixedWidth) == 0x000000, "Member 'TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth::OutFixedWidth' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth, OutMinWidth) == 0x000004, "Member 'TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth::OutMinWidth' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth, OutMaxWidth) == 0x000008, "Member 'TedUIFunctionsLibrary_GetUnitCardWeaponWidthWidth::OutMaxWidth' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.HideMeshWidget
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_HideMeshWidget final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Source;                                            // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_HideMeshWidget) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_HideMeshWidget");
static_assert(sizeof(TedUIFunctionsLibrary_HideMeshWidget) == 0x000010, "Wrong size on TedUIFunctionsLibrary_HideMeshWidget");
static_assert(offsetof(TedUIFunctionsLibrary_HideMeshWidget, WorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_HideMeshWidget::WorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_HideMeshWidget, Source) == 0x000008, "Member 'TedUIFunctionsLibrary_HideMeshWidget::Source' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsAnyMoviePlaying
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_IsAnyMoviePlaying final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsAnyMoviePlaying) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_IsAnyMoviePlaying");
static_assert(sizeof(TedUIFunctionsLibrary_IsAnyMoviePlaying) == 0x000010, "Wrong size on TedUIFunctionsLibrary_IsAnyMoviePlaying");
static_assert(offsetof(TedUIFunctionsLibrary_IsAnyMoviePlaying, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_IsAnyMoviePlaying::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsAnyMoviePlaying, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_IsAnyMoviePlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsInputChordValid
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_IsInputChordValid final
{
public:
	struct FInputChord                            InChord;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsInputChordValid) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_IsInputChordValid");
static_assert(sizeof(TedUIFunctionsLibrary_IsInputChordValid) == 0x000028, "Wrong size on TedUIFunctionsLibrary_IsInputChordValid");
static_assert(offsetof(TedUIFunctionsLibrary_IsInputChordValid, InChord) == 0x000000, "Member 'TedUIFunctionsLibrary_IsInputChordValid::InChord' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsInputChordValid, ReturnValue) == 0x000020, "Member 'TedUIFunctionsLibrary_IsInputChordValid::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsMoviePlaying
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_IsMoviePlaying final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieType                                 InMovieType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsMoviePlaying) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_IsMoviePlaying");
static_assert(sizeof(TedUIFunctionsLibrary_IsMoviePlaying) == 0x000010, "Wrong size on TedUIFunctionsLibrary_IsMoviePlaying");
static_assert(offsetof(TedUIFunctionsLibrary_IsMoviePlaying, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_IsMoviePlaying::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsMoviePlaying, InMovieType) == 0x000008, "Member 'TedUIFunctionsLibrary_IsMoviePlaying::InMovieType' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsMoviePlaying, ReturnValue) == 0x000009, "Member 'TedUIFunctionsLibrary_IsMoviePlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsSlateBrushDefault
// 0x00E0 (0x00E0 - 0x0000)
struct TedUIFunctionsLibrary_IsSlateBrushDefault final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsSlateBrushDefault) == 0x000010, "Wrong alignment on TedUIFunctionsLibrary_IsSlateBrushDefault");
static_assert(sizeof(TedUIFunctionsLibrary_IsSlateBrushDefault) == 0x0000E0, "Wrong size on TedUIFunctionsLibrary_IsSlateBrushDefault");
static_assert(offsetof(TedUIFunctionsLibrary_IsSlateBrushDefault, InBrush) == 0x000000, "Member 'TedUIFunctionsLibrary_IsSlateBrushDefault::InBrush' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsSlateBrushDefault, ReturnValue) == 0x0000D0, "Member 'TedUIFunctionsLibrary_IsSlateBrushDefault::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsWidgetRendered
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_IsWidgetRendered final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsWidgetRendered) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_IsWidgetRendered");
static_assert(sizeof(TedUIFunctionsLibrary_IsWidgetRendered) == 0x000010, "Wrong size on TedUIFunctionsLibrary_IsWidgetRendered");
static_assert(offsetof(TedUIFunctionsLibrary_IsWidgetRendered, Widget) == 0x000000, "Member 'TedUIFunctionsLibrary_IsWidgetRendered::Widget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsWidgetRendered, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_IsWidgetRendered::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.IsWidgetVisible
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_IsWidgetVisible final
{
public:
	const class UWidget*                          Widget;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_IsWidgetVisible) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_IsWidgetVisible");
static_assert(sizeof(TedUIFunctionsLibrary_IsWidgetVisible) == 0x000010, "Wrong size on TedUIFunctionsLibrary_IsWidgetVisible");
static_assert(offsetof(TedUIFunctionsLibrary_IsWidgetVisible, Widget) == 0x000000, "Member 'TedUIFunctionsLibrary_IsWidgetVisible::Widget' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_IsWidgetVisible, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_IsWidgetVisible::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.PauseMovie
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_PauseMovie final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieType                                 InMovieType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_PauseMovie) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_PauseMovie");
static_assert(sizeof(TedUIFunctionsLibrary_PauseMovie) == 0x000010, "Wrong size on TedUIFunctionsLibrary_PauseMovie");
static_assert(offsetof(TedUIFunctionsLibrary_PauseMovie, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_PauseMovie::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_PauseMovie, InMovieType) == 0x000008, "Member 'TedUIFunctionsLibrary_PauseMovie::InMovieType' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.PopulatePanelWithUpgradeDescriptions
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions final
{
public:
	class UTedContentPanelInstanced*              InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedUpgrade*                      InUpgrade;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPlayerState*                  InContextPlayerState;                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions");
static_assert(sizeof(TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions) == 0x000018, "Wrong size on TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions");
static_assert(offsetof(TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions, InPanel) == 0x000000, "Member 'TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions::InPanel' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions, InUpgrade) == 0x000008, "Member 'TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions::InUpgrade' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions, InContextPlayerState) == 0x000010, "Member 'TedUIFunctionsLibrary_PopulatePanelWithUpgradeDescriptions::InContextPlayerState' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.ReplaceTooltipParamsHeaderAndDescription
// 0x0100 (0x0100 - 0x0000)
struct TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription final
{
public:
	struct FTedTooltipDisplayParams               InTooltip;                                         // 0x0000(0x0070)(Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FText                                   InHeader;                                          // 0x0070(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InDescription;                                     // 0x0080(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedTooltipDisplayParams               ReturnValue;                                       // 0x0090(0x0070)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription");
static_assert(sizeof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription) == 0x000100, "Wrong size on TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription");
static_assert(offsetof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription, InTooltip) == 0x000000, "Member 'TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription::InTooltip' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription, InHeader) == 0x000070, "Member 'TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription::InHeader' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription, InDescription) == 0x000080, "Member 'TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription::InDescription' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription, ReturnValue) == 0x000090, "Member 'TedUIFunctionsLibrary_ReplaceTooltipParamsHeaderAndDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.ResumeMovie
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_ResumeMovie final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieType                                 InMovieType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_ResumeMovie) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_ResumeMovie");
static_assert(sizeof(TedUIFunctionsLibrary_ResumeMovie) == 0x000010, "Wrong size on TedUIFunctionsLibrary_ResumeMovie");
static_assert(offsetof(TedUIFunctionsLibrary_ResumeMovie, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_ResumeMovie::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ResumeMovie, InMovieType) == 0x000008, "Member 'TedUIFunctionsLibrary_ResumeMovie::InMovieType' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.ShouldAnyChildrenBeVisible
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible final
{
public:
	const class UPanelWidget*                     InPanel;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible");
static_assert(sizeof(TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible) == 0x000010, "Wrong size on TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible");
static_assert(offsetof(TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible, InPanel) == 0x000000, "Member 'TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible::InPanel' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible, ReturnValue) == 0x000008, "Member 'TedUIFunctionsLibrary_ShouldAnyChildrenBeVisible::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.ShouldShowEULA
// 0x0001 (0x0001 - 0x0000)
struct TedUIFunctionsLibrary_ShouldShowEULA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_ShouldShowEULA) == 0x000001, "Wrong alignment on TedUIFunctionsLibrary_ShouldShowEULA");
static_assert(sizeof(TedUIFunctionsLibrary_ShouldShowEULA) == 0x000001, "Wrong size on TedUIFunctionsLibrary_ShouldShowEULA");
static_assert(offsetof(TedUIFunctionsLibrary_ShouldShowEULA, ReturnValue) == 0x000000, "Member 'TedUIFunctionsLibrary_ShouldShowEULA::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.ShowMeshWidget
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_ShowMeshWidget final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Source;                                            // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Target;                                            // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ContextObject;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_ShowMeshWidget) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_ShowMeshWidget");
static_assert(sizeof(TedUIFunctionsLibrary_ShowMeshWidget) == 0x000020, "Wrong size on TedUIFunctionsLibrary_ShowMeshWidget");
static_assert(offsetof(TedUIFunctionsLibrary_ShowMeshWidget, WorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_ShowMeshWidget::WorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ShowMeshWidget, Source) == 0x000008, "Member 'TedUIFunctionsLibrary_ShowMeshWidget::Source' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ShowMeshWidget, Target) == 0x000010, "Member 'TedUIFunctionsLibrary_ShowMeshWidget::Target' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_ShowMeshWidget, ContextObject) == 0x000018, "Member 'TedUIFunctionsLibrary_ShowMeshWidget::ContextObject' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.StopMovie
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_StopMovie final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieType                                 InMovieType;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_StopMovie) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_StopMovie");
static_assert(sizeof(TedUIFunctionsLibrary_StopMovie) == 0x000010, "Wrong size on TedUIFunctionsLibrary_StopMovie");
static_assert(offsetof(TedUIFunctionsLibrary_StopMovie, InWorldContext) == 0x000000, "Member 'TedUIFunctionsLibrary_StopMovie::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_StopMovie, InMovieType) == 0x000008, "Member 'TedUIFunctionsLibrary_StopMovie::InMovieType' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.SynchronizeWrapAtWithSizeBoxWidth
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth final
{
public:
	class UTextBlock*                             InTextBlock;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USizeBox*                         InSizeBox;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth");
static_assert(sizeof(TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth) == 0x000010, "Wrong size on TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth");
static_assert(offsetof(TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth, InTextBlock) == 0x000000, "Member 'TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth::InTextBlock' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth, InSizeBox) == 0x000008, "Member 'TedUIFunctionsLibrary_SynchronizeWrapAtWithSizeBoxWidth::InSizeBox' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_GetState
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_GetState final
{
public:
	struct FTedUI_Transition_Tickable             InTransition;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_GetState) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_GetState");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_GetState) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_GetState");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_GetState, InTransition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_GetState::InTransition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_GetState, ReturnValue) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_GetState::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_GetStateExec
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_GetStateExec final
{
public:
	struct FTedUI_Transition_Tickable             InTransition;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_GetStateExec) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_GetStateExec");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_GetStateExec) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_GetStateExec");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_GetStateExec, InTransition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_GetStateExec::InTransition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_GetStateExec, ReturnValue) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_GetStateExec::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_Reset
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_Reset final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_Reset) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_Reset");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_Reset) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_Reset");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Reset, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_Reset::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Reset, InValue) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_Reset::InValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_SetDuration
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_SetDuration final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDuration;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_SetDuration) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_SetDuration");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_SetDuration) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_SetDuration");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetDuration, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_SetDuration::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetDuration, InDuration) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_SetDuration::InDuration' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_SetTarget
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_SetTarget final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTarget;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_SetTarget) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_SetTarget");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_SetTarget) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_SetTarget");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetTarget, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_SetTarget::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetTarget, InTarget) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_SetTarget::InTarget' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_SetTargetByDirection
// 0x0010 (0x0010 - 0x0000)
struct TedUIFunctionsLibrary_Transition_SetTargetByDirection final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInForward;                                        // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_SetTargetByDirection) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_SetTargetByDirection");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_SetTargetByDirection) == 0x000010, "Wrong size on TedUIFunctionsLibrary_Transition_SetTargetByDirection");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetTargetByDirection, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_SetTargetByDirection::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_SetTargetByDirection, bInForward) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_SetTargetByDirection::bInForward' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_Tick
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_Transition_Tick final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaSeconds;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurrent;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_Tick) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_Tick");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_Tick) == 0x000018, "Wrong size on TedUIFunctionsLibrary_Transition_Tick");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Tick, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_Tick::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Tick, InDeltaSeconds) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_Tick::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Tick, OutCurrent) == 0x000010, "Member 'TedUIFunctionsLibrary_Transition_Tick::OutCurrent' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_Tick, ReturnValue) == 0x000014, "Member 'TedUIFunctionsLibrary_Transition_Tick::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.Transition_TickExec
// 0x0018 (0x0018 - 0x0000)
struct TedUIFunctionsLibrary_Transition_TickExec final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaSeconds;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurrent;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_Transition_TickExec) == 0x000004, "Wrong alignment on TedUIFunctionsLibrary_Transition_TickExec");
static_assert(sizeof(TedUIFunctionsLibrary_Transition_TickExec) == 0x000018, "Wrong size on TedUIFunctionsLibrary_Transition_TickExec");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_TickExec, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_Transition_TickExec::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_TickExec, InDeltaSeconds) == 0x00000C, "Member 'TedUIFunctionsLibrary_Transition_TickExec::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_TickExec, OutCurrent) == 0x000010, "Member 'TedUIFunctionsLibrary_Transition_TickExec::OutCurrent' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_Transition_TickExec, ReturnValue) == 0x000014, "Member 'TedUIFunctionsLibrary_Transition_TickExec::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.TransitionCurve_GetValue
// 0x0020 (0x0020 - 0x0000)
struct TedUIFunctionsLibrary_TransitionCurve_GetValue final
{
public:
	struct FTedUI_TransitionCurve                 InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InAlpha;                                           // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_TransitionCurve_GetValue) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_TransitionCurve_GetValue");
static_assert(sizeof(TedUIFunctionsLibrary_TransitionCurve_GetValue) == 0x000020, "Wrong size on TedUIFunctionsLibrary_TransitionCurve_GetValue");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValue, InCurve) == 0x000000, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValue::InCurve' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValue, InAlpha) == 0x000018, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValue::InAlpha' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValue, ReturnValue) == 0x00001C, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.TransitionCurve_GetValueByTransition
// 0x0028 (0x0028 - 0x0000)
struct TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition final
{
public:
	struct FTedUI_TransitionCurve                 InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedUI_Transition_Tickable             InTransition;                                      // 0x0018(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition");
static_assert(sizeof(TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition) == 0x000028, "Wrong size on TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition, InCurve) == 0x000000, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition::InCurve' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition, InTransition) == 0x000018, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition::InTransition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition, ReturnValue) == 0x000024, "Member 'TedUIFunctionsLibrary_TransitionCurve_GetValueByTransition::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.TransitionCurve_Tick
// 0x0038 (0x0038 - 0x0000)
struct TedUIFunctionsLibrary_TransitionCurve_Tick final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUI_TransitionCurve                 InCurve;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaSeconds;                                    // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurrent;                                        // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurveValue;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_TransitionCurve_Tick) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_TransitionCurve_Tick");
static_assert(sizeof(TedUIFunctionsLibrary_TransitionCurve_Tick) == 0x000038, "Wrong size on TedUIFunctionsLibrary_TransitionCurve_Tick");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, InCurve) == 0x000010, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::InCurve' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, InDeltaSeconds) == 0x000028, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, OutCurrent) == 0x00002C, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::OutCurrent' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, OutCurveValue) == 0x000030, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::OutCurveValue' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_Tick, ReturnValue) == 0x000034, "Member 'TedUIFunctionsLibrary_TransitionCurve_Tick::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIFunctionsLibrary.TransitionCurve_TickExec
// 0x0038 (0x0038 - 0x0000)
struct TedUIFunctionsLibrary_TransitionCurve_TickExec final
{
public:
	struct FTedUI_Transition_Tickable             Transition;                                        // 0x0000(0x000C)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUI_TransitionCurve                 InCurve;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InDeltaSeconds;                                    // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurrent;                                        // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurveValue;                                     // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedUI_TransitionState                        ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUIFunctionsLibrary_TransitionCurve_TickExec) == 0x000008, "Wrong alignment on TedUIFunctionsLibrary_TransitionCurve_TickExec");
static_assert(sizeof(TedUIFunctionsLibrary_TransitionCurve_TickExec) == 0x000038, "Wrong size on TedUIFunctionsLibrary_TransitionCurve_TickExec");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, Transition) == 0x000000, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::Transition' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, InCurve) == 0x000010, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::InCurve' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, InDeltaSeconds) == 0x000028, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::InDeltaSeconds' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, OutCurrent) == 0x00002C, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::OutCurrent' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, OutCurveValue) == 0x000030, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::OutCurveValue' has a wrong offset!");
static_assert(offsetof(TedUIFunctionsLibrary_TransitionCurve_TickExec, ReturnValue) == 0x000034, "Member 'TedUIFunctionsLibrary_TransitionCurve_TickExec::ReturnValue' has a wrong offset!");

// Function Tempest.EffectsAnimationCurve.GetAnimationTime
// 0x0004 (0x0004 - 0x0000)
struct EffectsAnimationCurve_GetAnimationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsAnimationCurve_GetAnimationTime) == 0x000004, "Wrong alignment on EffectsAnimationCurve_GetAnimationTime");
static_assert(sizeof(EffectsAnimationCurve_GetAnimationTime) == 0x000004, "Wrong size on EffectsAnimationCurve_GetAnimationTime");
static_assert(offsetof(EffectsAnimationCurve_GetAnimationTime, ReturnValue) == 0x000000, "Member 'EffectsAnimationCurve_GetAnimationTime::ReturnValue' has a wrong offset!");

// Function Tempest.EffectsAnimationCurve.GetDisplacementXValue
// 0x0008 (0x0008 - 0x0000)
struct EffectsAnimationCurve_GetDisplacementXValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsAnimationCurve_GetDisplacementXValue) == 0x000004, "Wrong alignment on EffectsAnimationCurve_GetDisplacementXValue");
static_assert(sizeof(EffectsAnimationCurve_GetDisplacementXValue) == 0x000008, "Wrong size on EffectsAnimationCurve_GetDisplacementXValue");
static_assert(offsetof(EffectsAnimationCurve_GetDisplacementXValue, InTime) == 0x000000, "Member 'EffectsAnimationCurve_GetDisplacementXValue::InTime' has a wrong offset!");
static_assert(offsetof(EffectsAnimationCurve_GetDisplacementXValue, ReturnValue) == 0x000004, "Member 'EffectsAnimationCurve_GetDisplacementXValue::ReturnValue' has a wrong offset!");

// Function Tempest.EffectsAnimationCurve.GetDisplacementYValue
// 0x0008 (0x0008 - 0x0000)
struct EffectsAnimationCurve_GetDisplacementYValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsAnimationCurve_GetDisplacementYValue) == 0x000004, "Wrong alignment on EffectsAnimationCurve_GetDisplacementYValue");
static_assert(sizeof(EffectsAnimationCurve_GetDisplacementYValue) == 0x000008, "Wrong size on EffectsAnimationCurve_GetDisplacementYValue");
static_assert(offsetof(EffectsAnimationCurve_GetDisplacementYValue, InTime) == 0x000000, "Member 'EffectsAnimationCurve_GetDisplacementYValue::InTime' has a wrong offset!");
static_assert(offsetof(EffectsAnimationCurve_GetDisplacementYValue, ReturnValue) == 0x000004, "Member 'EffectsAnimationCurve_GetDisplacementYValue::ReturnValue' has a wrong offset!");

// Function Tempest.EffectsAnimationCurve.GetOpacityValue
// 0x0008 (0x0008 - 0x0000)
struct EffectsAnimationCurve_GetOpacityValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsAnimationCurve_GetOpacityValue) == 0x000004, "Wrong alignment on EffectsAnimationCurve_GetOpacityValue");
static_assert(sizeof(EffectsAnimationCurve_GetOpacityValue) == 0x000008, "Wrong size on EffectsAnimationCurve_GetOpacityValue");
static_assert(offsetof(EffectsAnimationCurve_GetOpacityValue, InTime) == 0x000000, "Member 'EffectsAnimationCurve_GetOpacityValue::InTime' has a wrong offset!");
static_assert(offsetof(EffectsAnimationCurve_GetOpacityValue, ReturnValue) == 0x000004, "Member 'EffectsAnimationCurve_GetOpacityValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.GetWidgetBackPriorities
// 0x0050 (0x0050 - 0x0000)
struct TedMenuScreenWidget_GetWidgetBackPriorities final
{
public:
	TMap<class UWidget*, uint8>                   ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenWidget_GetWidgetBackPriorities) == 0x000008, "Wrong alignment on TedMenuScreenWidget_GetWidgetBackPriorities");
static_assert(sizeof(TedMenuScreenWidget_GetWidgetBackPriorities) == 0x000050, "Wrong size on TedMenuScreenWidget_GetWidgetBackPriorities");
static_assert(offsetof(TedMenuScreenWidget_GetWidgetBackPriorities, ReturnValue) == 0x000000, "Member 'TedMenuScreenWidget_GetWidgetBackPriorities::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.GoBack
// 0x0001 (0x0001 - 0x0000)
struct TedMenuScreenWidget_GoBack final
{
public:
	bool                                          bFoundWidgetWithGoBackPriority;                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenWidget_GoBack) == 0x000001, "Wrong alignment on TedMenuScreenWidget_GoBack");
static_assert(sizeof(TedMenuScreenWidget_GoBack) == 0x000001, "Wrong size on TedMenuScreenWidget_GoBack");
static_assert(offsetof(TedMenuScreenWidget_GoBack, bFoundWidgetWithGoBackPriority) == 0x000000, "Member 'TedMenuScreenWidget_GoBack::bFoundWidgetWithGoBackPriority' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.OnClose
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenWidget_OnClose final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenWidget_OnClose) == 0x000008, "Wrong alignment on TedMenuScreenWidget_OnClose");
static_assert(sizeof(TedMenuScreenWidget_OnClose) == 0x000010, "Wrong size on TedMenuScreenWidget_OnClose");
static_assert(offsetof(TedMenuScreenWidget_OnClose, InContext) == 0x000000, "Member 'TedMenuScreenWidget_OnClose::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenWidget_OnClose, bInInstant) == 0x000008, "Member 'TedMenuScreenWidget_OnClose::bInInstant' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.OnOpen
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenWidget_OnOpen final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenWidget_OnOpen) == 0x000008, "Wrong alignment on TedMenuScreenWidget_OnOpen");
static_assert(sizeof(TedMenuScreenWidget_OnOpen) == 0x000010, "Wrong size on TedMenuScreenWidget_OnOpen");
static_assert(offsetof(TedMenuScreenWidget_OnOpen, InContext) == 0x000000, "Member 'TedMenuScreenWidget_OnOpen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenWidget_OnOpen, bInInstant) == 0x000008, "Member 'TedMenuScreenWidget_OnOpen::bInInstant' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.OnWidgetHiddenOnGoBack
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenWidget_OnWidgetHiddenOnGoBack final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InPriority;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenWidget_OnWidgetHiddenOnGoBack) == 0x000008, "Wrong alignment on TedMenuScreenWidget_OnWidgetHiddenOnGoBack");
static_assert(sizeof(TedMenuScreenWidget_OnWidgetHiddenOnGoBack) == 0x000010, "Wrong size on TedMenuScreenWidget_OnWidgetHiddenOnGoBack");
static_assert(offsetof(TedMenuScreenWidget_OnWidgetHiddenOnGoBack, InWidget) == 0x000000, "Member 'TedMenuScreenWidget_OnWidgetHiddenOnGoBack::InWidget' has a wrong offset!");
static_assert(offsetof(TedMenuScreenWidget_OnWidgetHiddenOnGoBack, InPriority) == 0x000008, "Member 'TedMenuScreenWidget_OnWidgetHiddenOnGoBack::InPriority' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.ShowCosmeticCinematicsBars
// 0x0001 (0x0001 - 0x0000)
struct TedMenuScreenWidget_ShowCosmeticCinematicsBars final
{
public:
	bool                                          ShowBar;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenWidget_ShowCosmeticCinematicsBars) == 0x000001, "Wrong alignment on TedMenuScreenWidget_ShowCosmeticCinematicsBars");
static_assert(sizeof(TedMenuScreenWidget_ShowCosmeticCinematicsBars) == 0x000001, "Wrong size on TedMenuScreenWidget_ShowCosmeticCinematicsBars");
static_assert(offsetof(TedMenuScreenWidget_ShowCosmeticCinematicsBars, ShowBar) == 0x000000, "Member 'TedMenuScreenWidget_ShowCosmeticCinematicsBars::ShowBar' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.CanClose
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenWidget_CanClose final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenWidget_CanClose) == 0x000008, "Wrong alignment on TedMenuScreenWidget_CanClose");
static_assert(sizeof(TedMenuScreenWidget_CanClose) == 0x000010, "Wrong size on TedMenuScreenWidget_CanClose");
static_assert(offsetof(TedMenuScreenWidget_CanClose, InContext) == 0x000000, "Member 'TedMenuScreenWidget_CanClose::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenWidget_CanClose, ReturnValue) == 0x000008, "Member 'TedMenuScreenWidget_CanClose::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.CanGoBack
// 0x0001 (0x0001 - 0x0000)
struct TedMenuScreenWidget_CanGoBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenWidget_CanGoBack) == 0x000001, "Wrong alignment on TedMenuScreenWidget_CanGoBack");
static_assert(sizeof(TedMenuScreenWidget_CanGoBack) == 0x000001, "Wrong size on TedMenuScreenWidget_CanGoBack");
static_assert(offsetof(TedMenuScreenWidget_CanGoBack, ReturnValue) == 0x000000, "Member 'TedMenuScreenWidget_CanGoBack::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenWidget.CanOpen
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenWidget_CanOpen final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenWidget_CanOpen) == 0x000008, "Wrong alignment on TedMenuScreenWidget_CanOpen");
static_assert(sizeof(TedMenuScreenWidget_CanOpen) == 0x000010, "Wrong size on TedMenuScreenWidget_CanOpen");
static_assert(offsetof(TedMenuScreenWidget_CanOpen, InContext) == 0x000000, "Member 'TedMenuScreenWidget_CanOpen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenWidget_CanOpen, ReturnValue) == 0x000008, "Member 'TedMenuScreenWidget_CanOpen::ReturnValue' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.DescribeDifficultyOptionsForPopup
// 0x0018 (0x0018 - 0x0000)
struct TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup) == 0x000008, "Wrong alignment on TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup");
static_assert(sizeof(TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup) == 0x000018, "Wrong size on TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup");
static_assert(offsetof(TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup, Option) == 0x000000, "Member 'TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup::Option' has a wrong offset!");
static_assert(offsetof(TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup, ReturnValue) == 0x000008, "Member 'TedFactionCampaignWidget_DescribeDifficultyOptionsForPopup::ReturnValue' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.HandlePopupCalled
// 0x0001 (0x0001 - 0x0000)
struct TedFactionCampaignWidget_HandlePopupCalled final
{
public:
	EPopupAction                                  Action;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_HandlePopupCalled) == 0x000001, "Wrong alignment on TedFactionCampaignWidget_HandlePopupCalled");
static_assert(sizeof(TedFactionCampaignWidget_HandlePopupCalled) == 0x000001, "Wrong size on TedFactionCampaignWidget_HandlePopupCalled");
static_assert(offsetof(TedFactionCampaignWidget_HandlePopupCalled, Action) == 0x000000, "Member 'TedFactionCampaignWidget_HandlePopupCalled::Action' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnButtonsPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedFactionCampaignWidget_OnButtonsPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFactionCampaignWidget_OnButtonsPanelSlotAction) == 0x000008, "Wrong alignment on TedFactionCampaignWidget_OnButtonsPanelSlotAction");
static_assert(sizeof(TedFactionCampaignWidget_OnButtonsPanelSlotAction) == 0x000018, "Wrong size on TedFactionCampaignWidget_OnButtonsPanelSlotAction");
static_assert(offsetof(TedFactionCampaignWidget_OnButtonsPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedFactionCampaignWidget_OnButtonsPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedFactionCampaignWidget_OnButtonsPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedFactionCampaignWidget_OnButtonsPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedFactionCampaignWidget_OnButtonsPanelSlotAction, InAction) == 0x000010, "Member 'TedFactionCampaignWidget_OnButtonsPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnCreateCampaignClicked
// 0x0004 (0x0004 - 0x0000)
struct TedFactionCampaignWidget_OnCreateCampaignClicked final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_OnCreateCampaignClicked) == 0x000004, "Wrong alignment on TedFactionCampaignWidget_OnCreateCampaignClicked");
static_assert(sizeof(TedFactionCampaignWidget_OnCreateCampaignClicked) == 0x000004, "Wrong size on TedFactionCampaignWidget_OnCreateCampaignClicked");
static_assert(offsetof(TedFactionCampaignWidget_OnCreateCampaignClicked, Idx) == 0x000000, "Member 'TedFactionCampaignWidget_OnCreateCampaignClicked::Idx' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnDeleteCampaignClicked
// 0x0004 (0x0004 - 0x0000)
struct TedFactionCampaignWidget_OnDeleteCampaignClicked final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_OnDeleteCampaignClicked) == 0x000004, "Wrong alignment on TedFactionCampaignWidget_OnDeleteCampaignClicked");
static_assert(sizeof(TedFactionCampaignWidget_OnDeleteCampaignClicked) == 0x000004, "Wrong size on TedFactionCampaignWidget_OnDeleteCampaignClicked");
static_assert(offsetof(TedFactionCampaignWidget_OnDeleteCampaignClicked, Idx) == 0x000000, "Member 'TedFactionCampaignWidget_OnDeleteCampaignClicked::Idx' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnDeleteSaveClicked
// 0x0004 (0x0004 - 0x0000)
struct TedFactionCampaignWidget_OnDeleteSaveClicked final
{
public:
	int32                                         PopupButtonIdx;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_OnDeleteSaveClicked) == 0x000004, "Wrong alignment on TedFactionCampaignWidget_OnDeleteSaveClicked");
static_assert(sizeof(TedFactionCampaignWidget_OnDeleteSaveClicked) == 0x000004, "Wrong size on TedFactionCampaignWidget_OnDeleteSaveClicked");
static_assert(offsetof(TedFactionCampaignWidget_OnDeleteSaveClicked, PopupButtonIdx) == 0x000000, "Member 'TedFactionCampaignWidget_OnDeleteSaveClicked::PopupButtonIdx' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnRenameCampaignClicked
// 0x0004 (0x0004 - 0x0000)
struct TedFactionCampaignWidget_OnRenameCampaignClicked final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_OnRenameCampaignClicked) == 0x000004, "Wrong alignment on TedFactionCampaignWidget_OnRenameCampaignClicked");
static_assert(sizeof(TedFactionCampaignWidget_OnRenameCampaignClicked) == 0x000004, "Wrong size on TedFactionCampaignWidget_OnRenameCampaignClicked");
static_assert(offsetof(TedFactionCampaignWidget_OnRenameCampaignClicked, Idx) == 0x000000, "Member 'TedFactionCampaignWidget_OnRenameCampaignClicked::Idx' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.OnSaveSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedFactionCampaignWidget_OnSaveSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedFactionCampaignWidget_OnSaveSlotAction) == 0x000008, "Wrong alignment on TedFactionCampaignWidget_OnSaveSlotAction");
static_assert(sizeof(TedFactionCampaignWidget_OnSaveSlotAction) == 0x000018, "Wrong size on TedFactionCampaignWidget_OnSaveSlotAction");
static_assert(offsetof(TedFactionCampaignWidget_OnSaveSlotAction, InContentPanel) == 0x000000, "Member 'TedFactionCampaignWidget_OnSaveSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedFactionCampaignWidget_OnSaveSlotAction, InContentSlot) == 0x000008, "Member 'TedFactionCampaignWidget_OnSaveSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedFactionCampaignWidget_OnSaveSlotAction, InAction) == 0x000010, "Member 'TedFactionCampaignWidget_OnSaveSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.PopupCancel
// 0x0004 (0x0004 - 0x0000)
struct TedFactionCampaignWidget_PopupCancel final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_PopupCancel) == 0x000004, "Wrong alignment on TedFactionCampaignWidget_PopupCancel");
static_assert(sizeof(TedFactionCampaignWidget_PopupCancel) == 0x000004, "Wrong size on TedFactionCampaignWidget_PopupCancel");
static_assert(offsetof(TedFactionCampaignWidget_PopupCancel, Idx) == 0x000000, "Member 'TedFactionCampaignWidget_PopupCancel::Idx' has a wrong offset!");

// Function Tempest.TedFactionCampaignWidget.AreThereValidCampaignSlots
// 0x0001 (0x0001 - 0x0000)
struct TedFactionCampaignWidget_AreThereValidCampaignSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedFactionCampaignWidget_AreThereValidCampaignSlots) == 0x000001, "Wrong alignment on TedFactionCampaignWidget_AreThereValidCampaignSlots");
static_assert(sizeof(TedFactionCampaignWidget_AreThereValidCampaignSlots) == 0x000001, "Wrong size on TedFactionCampaignWidget_AreThereValidCampaignSlots");
static_assert(offsetof(TedFactionCampaignWidget_AreThereValidCampaignSlots, ReturnValue) == 0x000000, "Member 'TedFactionCampaignWidget_AreThereValidCampaignSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.CalcVelocity
// 0x0010 (0x0010 - 0x0000)
struct TedUnitMovementComponent_CalcVelocity final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFluid;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakingDeceleration;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_CalcVelocity) == 0x000004, "Wrong alignment on TedUnitMovementComponent_CalcVelocity");
static_assert(sizeof(TedUnitMovementComponent_CalcVelocity) == 0x000010, "Wrong size on TedUnitMovementComponent_CalcVelocity");
static_assert(offsetof(TedUnitMovementComponent_CalcVelocity, DeltaTime) == 0x000000, "Member 'TedUnitMovementComponent_CalcVelocity::DeltaTime' has a wrong offset!");
static_assert(offsetof(TedUnitMovementComponent_CalcVelocity, Friction) == 0x000004, "Member 'TedUnitMovementComponent_CalcVelocity::Friction' has a wrong offset!");
static_assert(offsetof(TedUnitMovementComponent_CalcVelocity, bFluid) == 0x000008, "Member 'TedUnitMovementComponent_CalcVelocity::bFluid' has a wrong offset!");
static_assert(offsetof(TedUnitMovementComponent_CalcVelocity, BrakingDeceleration) == 0x00000C, "Member 'TedUnitMovementComponent_CalcVelocity::BrakingDeceleration' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.SetMovementMode
// 0x0002 (0x0002 - 0x0000)
struct TedUnitMovementComponent_SetMovementMode final
{
public:
	EMovementMode                                 NewMovementMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewCustomMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_SetMovementMode) == 0x000001, "Wrong alignment on TedUnitMovementComponent_SetMovementMode");
static_assert(sizeof(TedUnitMovementComponent_SetMovementMode) == 0x000002, "Wrong size on TedUnitMovementComponent_SetMovementMode");
static_assert(offsetof(TedUnitMovementComponent_SetMovementMode, NewMovementMode) == 0x000000, "Member 'TedUnitMovementComponent_SetMovementMode::NewMovementMode' has a wrong offset!");
static_assert(offsetof(TedUnitMovementComponent_SetMovementMode, NewCustomMode) == 0x000001, "Member 'TedUnitMovementComponent_SetMovementMode::NewCustomMode' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.GetCurrentAcceleration
// 0x0018 (0x0018 - 0x0000)
struct TedUnitMovementComponent_GetCurrentAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_GetCurrentAcceleration) == 0x000008, "Wrong alignment on TedUnitMovementComponent_GetCurrentAcceleration");
static_assert(sizeof(TedUnitMovementComponent_GetCurrentAcceleration) == 0x000018, "Wrong size on TedUnitMovementComponent_GetCurrentAcceleration");
static_assert(offsetof(TedUnitMovementComponent_GetCurrentAcceleration, ReturnValue) == 0x000000, "Member 'TedUnitMovementComponent_GetCurrentAcceleration::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.GetMaxAcceleration
// 0x0004 (0x0004 - 0x0000)
struct TedUnitMovementComponent_GetMaxAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong alignment on TedUnitMovementComponent_GetMaxAcceleration");
static_assert(sizeof(TedUnitMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong size on TedUnitMovementComponent_GetMaxAcceleration");
static_assert(offsetof(TedUnitMovementComponent_GetMaxAcceleration, ReturnValue) == 0x000000, "Member 'TedUnitMovementComponent_GetMaxAcceleration::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.GetMaxBrakingDeceleration
// 0x0004 (0x0004 - 0x0000)
struct TedUnitMovementComponent_GetMaxBrakingDeceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_GetMaxBrakingDeceleration) == 0x000004, "Wrong alignment on TedUnitMovementComponent_GetMaxBrakingDeceleration");
static_assert(sizeof(TedUnitMovementComponent_GetMaxBrakingDeceleration) == 0x000004, "Wrong size on TedUnitMovementComponent_GetMaxBrakingDeceleration");
static_assert(offsetof(TedUnitMovementComponent_GetMaxBrakingDeceleration, ReturnValue) == 0x000000, "Member 'TedUnitMovementComponent_GetMaxBrakingDeceleration::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.GetMovementMode
// 0x0001 (0x0001 - 0x0000)
struct TedUnitMovementComponent_GetMovementMode final
{
public:
	EMovementMode                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_GetMovementMode) == 0x000001, "Wrong alignment on TedUnitMovementComponent_GetMovementMode");
static_assert(sizeof(TedUnitMovementComponent_GetMovementMode) == 0x000001, "Wrong size on TedUnitMovementComponent_GetMovementMode");
static_assert(offsetof(TedUnitMovementComponent_GetMovementMode, ReturnValue) == 0x000000, "Member 'TedUnitMovementComponent_GetMovementMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitMovementComponent.GetUnitOwner
// 0x0008 (0x0008 - 0x0000)
struct TedUnitMovementComponent_GetUnitOwner final
{
public:
	class ATedUnitBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitMovementComponent_GetUnitOwner) == 0x000008, "Wrong alignment on TedUnitMovementComponent_GetUnitOwner");
static_assert(sizeof(TedUnitMovementComponent_GetUnitOwner) == 0x000008, "Wrong size on TedUnitMovementComponent_GetUnitOwner");
static_assert(offsetof(TedUnitMovementComponent_GetUnitOwner, ReturnValue) == 0x000000, "Member 'TedUnitMovementComponent_GetUnitOwner::ReturnValue' has a wrong offset!");

// Function Tempest.FactionSelectionMenuScreenWidget.CacheSelectedCampaign
// 0x0008 (0x0008 - 0x0000)
struct FactionSelectionMenuScreenWidget_CacheSelectedCampaign final
{
public:
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionSelectionMenuScreenWidget_CacheSelectedCampaign) == 0x000008, "Wrong alignment on FactionSelectionMenuScreenWidget_CacheSelectedCampaign");
static_assert(sizeof(FactionSelectionMenuScreenWidget_CacheSelectedCampaign) == 0x000008, "Wrong size on FactionSelectionMenuScreenWidget_CacheSelectedCampaign");
static_assert(offsetof(FactionSelectionMenuScreenWidget_CacheSelectedCampaign, InCampaign) == 0x000000, "Member 'FactionSelectionMenuScreenWidget_CacheSelectedCampaign::InCampaign' has a wrong offset!");

// Function Tempest.FactionSelectionMenuScreenWidget.CacheSelectedDifficulty
// 0x0001 (0x0001 - 0x0000)
struct FactionSelectionMenuScreenWidget_CacheSelectedDifficulty final
{
public:
	ETedGameDifficulty                            InDifficulty;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionSelectionMenuScreenWidget_CacheSelectedDifficulty) == 0x000001, "Wrong alignment on FactionSelectionMenuScreenWidget_CacheSelectedDifficulty");
static_assert(sizeof(FactionSelectionMenuScreenWidget_CacheSelectedDifficulty) == 0x000001, "Wrong size on FactionSelectionMenuScreenWidget_CacheSelectedDifficulty");
static_assert(offsetof(FactionSelectionMenuScreenWidget_CacheSelectedDifficulty, InDifficulty) == 0x000000, "Member 'FactionSelectionMenuScreenWidget_CacheSelectedDifficulty::InDifficulty' has a wrong offset!");

// Function Tempest.FactionSelectionMenuScreenWidget.GetSelectedCampaign
// 0x0008 (0x0008 - 0x0000)
struct FactionSelectionMenuScreenWidget_GetSelectedCampaign final
{
public:
	const class UTedCampaignInfo*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionSelectionMenuScreenWidget_GetSelectedCampaign) == 0x000008, "Wrong alignment on FactionSelectionMenuScreenWidget_GetSelectedCampaign");
static_assert(sizeof(FactionSelectionMenuScreenWidget_GetSelectedCampaign) == 0x000008, "Wrong size on FactionSelectionMenuScreenWidget_GetSelectedCampaign");
static_assert(offsetof(FactionSelectionMenuScreenWidget_GetSelectedCampaign, ReturnValue) == 0x000000, "Member 'FactionSelectionMenuScreenWidget_GetSelectedCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.FactionSelectionMenuScreenWidget.WasAnyCampaignStarted
// 0x0001 (0x0001 - 0x0000)
struct FactionSelectionMenuScreenWidget_WasAnyCampaignStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FactionSelectionMenuScreenWidget_WasAnyCampaignStarted) == 0x000001, "Wrong alignment on FactionSelectionMenuScreenWidget_WasAnyCampaignStarted");
static_assert(sizeof(FactionSelectionMenuScreenWidget_WasAnyCampaignStarted) == 0x000001, "Wrong size on FactionSelectionMenuScreenWidget_WasAnyCampaignStarted");
static_assert(offsetof(FactionSelectionMenuScreenWidget_WasAnyCampaignStarted, ReturnValue) == 0x000000, "Member 'FactionSelectionMenuScreenWidget_WasAnyCampaignStarted::ReturnValue' has a wrong offset!");

// Function Tempest.FactionSelectionMenuScreenWidget.WasCampaignStarted
// 0x0010 (0x0010 - 0x0000)
struct FactionSelectionMenuScreenWidget_WasCampaignStarted final
{
public:
	const class UTedCampaignInfo*                 InCampaign;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FactionSelectionMenuScreenWidget_WasCampaignStarted) == 0x000008, "Wrong alignment on FactionSelectionMenuScreenWidget_WasCampaignStarted");
static_assert(sizeof(FactionSelectionMenuScreenWidget_WasCampaignStarted) == 0x000010, "Wrong size on FactionSelectionMenuScreenWidget_WasCampaignStarted");
static_assert(offsetof(FactionSelectionMenuScreenWidget_WasCampaignStarted, InCampaign) == 0x000000, "Member 'FactionSelectionMenuScreenWidget_WasCampaignStarted::InCampaign' has a wrong offset!");
static_assert(offsetof(FactionSelectionMenuScreenWidget_WasCampaignStarted, ReturnValue) == 0x000008, "Member 'FactionSelectionMenuScreenWidget_WasCampaignStarted::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUDInstancedBarWidget.ColorLookupResolved
// 0x0008 (0x0008 - 0x0000)
struct TedHUDInstancedBarWidget_ColorLookupResolved final
{
public:
	const class URTSColorSubsystem*               InSubsystem;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUDInstancedBarWidget_ColorLookupResolved) == 0x000008, "Wrong alignment on TedHUDInstancedBarWidget_ColorLookupResolved");
static_assert(sizeof(TedHUDInstancedBarWidget_ColorLookupResolved) == 0x000008, "Wrong size on TedHUDInstancedBarWidget_ColorLookupResolved");
static_assert(offsetof(TedHUDInstancedBarWidget_ColorLookupResolved, InSubsystem) == 0x000000, "Member 'TedHUDInstancedBarWidget_ColorLookupResolved::InSubsystem' has a wrong offset!");

// Function Tempest.TedImageSequenceSource.GetSound
// 0x0008 (0x0008 - 0x0000)
struct TedImageSequenceSource_GetSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedImageSequenceSource_GetSound) == 0x000008, "Wrong alignment on TedImageSequenceSource_GetSound");
static_assert(sizeof(TedImageSequenceSource_GetSound) == 0x000008, "Wrong size on TedImageSequenceSource_GetSound");
static_assert(offsetof(TedImageSequenceSource_GetSound, ReturnValue) == 0x000000, "Member 'TedImageSequenceSource_GetSound::ReturnValue' has a wrong offset!");

// Function Tempest.GEEC_RestoreHealthOnFatalDamage.OnPawnTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage) == 0x000008, "Wrong alignment on GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage");
static_assert(sizeof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage) == 0x000028, "Wrong size on GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage");
static_assert(offsetof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage, DamagedActor) == 0x000000, "Member 'GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage, Damage) == 0x000008, "Member 'GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage, DamageType) == 0x000010, "Member 'GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage, DamageCauser) == 0x000020, "Member 'GEEC_RestoreHealthOnFatalDamage_OnPawnTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.Clear
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_Clear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_Clear) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_Clear");
static_assert(sizeof(TedMoviePlayerWidgetV2_Clear) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_Clear");
static_assert(offsetof(TedMoviePlayerWidgetV2_Clear, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_Clear::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.Finish
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_Finish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_Finish) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_Finish");
static_assert(sizeof(TedMoviePlayerWidgetV2_Finish) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_Finish");
static_assert(offsetof(TedMoviePlayerWidgetV2_Finish, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_Finish::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_OnFinish
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_OnFinish final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_OnFinish) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_OnFinish");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_OnFinish) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_K2_OnFinish");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_OnFinish, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_OnFinish::InMovie' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_OnPause
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_OnPause final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_OnPause) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_OnPause");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_OnPause) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_K2_OnPause");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_OnPause, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_OnPause::InMovie' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_OnResume
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_OnResume final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_OnResume) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_OnResume");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_OnResume) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_K2_OnResume");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_OnResume, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_OnResume::InMovie' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_OnStart
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_OnStart final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_OnStart) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_OnStart");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_OnStart) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_K2_OnStart");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_OnStart, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_OnStart::InMovie' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_Start
// 0x0020 (0x0020 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_Start final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilent;                                         // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieGamePauseInteraction                 InPauseInteraction;                                // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMoviePlayerConfig*            InConfigOverride;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_Start) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_Start");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_Start) == 0x000020, "Wrong size on TedMoviePlayerWidgetV2_K2_Start");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_Start::InMovie' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, bInLoop) == 0x000008, "Member 'TedMoviePlayerWidgetV2_K2_Start::bInLoop' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, bInSilent) == 0x000009, "Member 'TedMoviePlayerWidgetV2_K2_Start::bInSilent' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, InPauseInteraction) == 0x00000A, "Member 'TedMoviePlayerWidgetV2_K2_Start::InPauseInteraction' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, InConfigOverride) == 0x000010, "Member 'TedMoviePlayerWidgetV2_K2_Start::InConfigOverride' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_Start, ReturnValue) == 0x000018, "Member 'TedMoviePlayerWidgetV2_K2_Start::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.K2_StartThemed
// 0x0068 (0x0068 - 0x0000)
struct TedMoviePlayerWidgetV2_K2_StartThemed final
{
public:
	struct FTedThemeMovie                         InMovie;                                           // 0x0000(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilent;                                         // 0x0051(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieGamePauseInteraction                 InPauseInteraction;                                // 0x0052(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMoviePlayerConfig*            InConfigOverride;                                  // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMoviePlayerWidgetV2_K2_StartThemed) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_K2_StartThemed");
static_assert(sizeof(TedMoviePlayerWidgetV2_K2_StartThemed) == 0x000068, "Wrong size on TedMoviePlayerWidgetV2_K2_StartThemed");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, InMovie) == 0x000000, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::InMovie' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, bInLoop) == 0x000050, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::bInLoop' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, bInSilent) == 0x000051, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::bInSilent' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, InPauseInteraction) == 0x000052, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::InPauseInteraction' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, InConfigOverride) == 0x000058, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::InConfigOverride' has a wrong offset!");
static_assert(offsetof(TedMoviePlayerWidgetV2_K2_StartThemed, ReturnValue) == 0x000060, "Member 'TedMoviePlayerWidgetV2_K2_StartThemed::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.Pause
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_Pause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_Pause) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_Pause");
static_assert(sizeof(TedMoviePlayerWidgetV2_Pause) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_Pause");
static_assert(offsetof(TedMoviePlayerWidgetV2_Pause, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_Pause::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.Resume
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_Resume final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_Resume) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_Resume");
static_assert(sizeof(TedMoviePlayerWidgetV2_Resume) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_Resume");
static_assert(offsetof(TedMoviePlayerWidgetV2_Resume, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_Resume::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.DetermineBrush
// 0x00D0 (0x00D0 - 0x0000)
struct TedMoviePlayerWidgetV2_DetermineBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_DetermineBrush) == 0x000010, "Wrong alignment on TedMoviePlayerWidgetV2_DetermineBrush");
static_assert(sizeof(TedMoviePlayerWidgetV2_DetermineBrush) == 0x0000D0, "Wrong size on TedMoviePlayerWidgetV2_DetermineBrush");
static_assert(offsetof(TedMoviePlayerWidgetV2_DetermineBrush, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_DetermineBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.DetermineVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_DetermineVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_DetermineVisibility) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_DetermineVisibility");
static_assert(sizeof(TedMoviePlayerWidgetV2_DetermineVisibility) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_DetermineVisibility");
static_assert(offsetof(TedMoviePlayerWidgetV2_DetermineVisibility, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_DetermineVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.GetMovieMaterialMID
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_GetMovieMaterialMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_GetMovieMaterialMID) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_GetMovieMaterialMID");
static_assert(sizeof(TedMoviePlayerWidgetV2_GetMovieMaterialMID) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_GetMovieMaterialMID");
static_assert(offsetof(TedMoviePlayerWidgetV2_GetMovieMaterialMID, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_GetMovieMaterialMID::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.GetStartedMovie
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerWidgetV2_GetStartedMovie final
{
public:
	const class UFileMediaSource*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_GetStartedMovie) == 0x000008, "Wrong alignment on TedMoviePlayerWidgetV2_GetStartedMovie");
static_assert(sizeof(TedMoviePlayerWidgetV2_GetStartedMovie) == 0x000008, "Wrong size on TedMoviePlayerWidgetV2_GetStartedMovie");
static_assert(offsetof(TedMoviePlayerWidgetV2_GetStartedMovie, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_GetStartedMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_IsPaused) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_IsPaused");
static_assert(sizeof(TedMoviePlayerWidgetV2_IsPaused) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_IsPaused");
static_assert(offsetof(TedMoviePlayerWidgetV2_IsPaused, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_IsPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_IsPlaying) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_IsPlaying");
static_assert(sizeof(TedMoviePlayerWidgetV2_IsPlaying) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_IsPlaying");
static_assert(offsetof(TedMoviePlayerWidgetV2_IsPlaying, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_IsPlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.IsPlayingEditorPreview
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_IsPlayingEditorPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_IsPlayingEditorPreview) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_IsPlayingEditorPreview");
static_assert(sizeof(TedMoviePlayerWidgetV2_IsPlayingEditorPreview) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_IsPlayingEditorPreview");
static_assert(offsetof(TedMoviePlayerWidgetV2_IsPlayingEditorPreview, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_IsPlayingEditorPreview::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerWidgetV2.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerWidgetV2_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerWidgetV2_IsStarted) == 0x000001, "Wrong alignment on TedMoviePlayerWidgetV2_IsStarted");
static_assert(sizeof(TedMoviePlayerWidgetV2_IsStarted) == 0x000001, "Wrong size on TedMoviePlayerWidgetV2_IsStarted");
static_assert(offsetof(TedMoviePlayerWidgetV2_IsStarted, ReturnValue) == 0x000000, "Member 'TedMoviePlayerWidgetV2_IsStarted::ReturnValue' has a wrong offset!");

// Function Tempest.HintsSettings.GetHintMaxLifetime
// 0x0004 (0x0004 - 0x0000)
struct HintsSettings_GetHintMaxLifetime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintsSettings_GetHintMaxLifetime) == 0x000004, "Wrong alignment on HintsSettings_GetHintMaxLifetime");
static_assert(sizeof(HintsSettings_GetHintMaxLifetime) == 0x000004, "Wrong size on HintsSettings_GetHintMaxLifetime");
static_assert(offsetof(HintsSettings_GetHintMaxLifetime, ReturnValue) == 0x000000, "Member 'HintsSettings_GetHintMaxLifetime::ReturnValue' has a wrong offset!");

// Function Tempest.HintsSettings.GetWorldDisplayDefaultClass
// 0x0008 (0x0008 - 0x0000)
struct HintsSettings_GetWorldDisplayDefaultClass final
{
public:
	TSubclassOf<class ATedWorldHintActor>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintsSettings_GetWorldDisplayDefaultClass) == 0x000008, "Wrong alignment on HintsSettings_GetWorldDisplayDefaultClass");
static_assert(sizeof(HintsSettings_GetWorldDisplayDefaultClass) == 0x000008, "Wrong size on HintsSettings_GetWorldDisplayDefaultClass");
static_assert(offsetof(HintsSettings_GetWorldDisplayDefaultClass, ReturnValue) == 0x000000, "Member 'HintsSettings_GetWorldDisplayDefaultClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataContentPanel.AddContent
// 0x0050 (0x0050 - 0x0000)
struct TedGenericDataContentPanel_AddContent final
{
public:
	struct FTedGenericDataContainer               InEntry;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGenericDataContentPanel_AddContent) == 0x000008, "Wrong alignment on TedGenericDataContentPanel_AddContent");
static_assert(sizeof(TedGenericDataContentPanel_AddContent) == 0x000050, "Wrong size on TedGenericDataContentPanel_AddContent");
static_assert(offsetof(TedGenericDataContentPanel_AddContent, InEntry) == 0x000000, "Member 'TedGenericDataContentPanel_AddContent::InEntry' has a wrong offset!");

// Function Tempest.TedGenericDataContentPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedGenericDataContentPanel_SetContent final
{
public:
	TArray<struct FTedGenericDataContainer>       InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGenericDataContentPanel_SetContent) == 0x000008, "Wrong alignment on TedGenericDataContentPanel_SetContent");
static_assert(sizeof(TedGenericDataContentPanel_SetContent) == 0x000010, "Wrong size on TedGenericDataContentPanel_SetContent");
static_assert(offsetof(TedGenericDataContentPanel_SetContent, InContent) == 0x000000, "Member 'TedGenericDataContentPanel_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedGenericDataContentPanel.GetContent
// 0x0060 (0x0060 - 0x0000)
struct TedGenericDataContentPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGenericDataContainer               OutContent;                                        // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataContentPanel_GetContent) == 0x000008, "Wrong alignment on TedGenericDataContentPanel_GetContent");
static_assert(sizeof(TedGenericDataContentPanel_GetContent) == 0x000060, "Wrong size on TedGenericDataContentPanel_GetContent");
static_assert(offsetof(TedGenericDataContentPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedGenericDataContentPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentPanel_GetContent, OutContent) == 0x000008, "Member 'TedGenericDataContentPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedGenericDataContentPanel_GetContent, ReturnValue) == 0x000058, "Member 'TedGenericDataContentPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerProfileLeaderboardPositionsPanel.GetSlotContent
// 0x001C (0x001C - 0x0000)
struct TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   OutFaction;                                        // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutLeaderboardPos1v1;                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutLeaderboardPos2v2;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRating1v1;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRating2v2;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent) == 0x000004, "Wrong alignment on TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent");
static_assert(sizeof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent) == 0x00001C, "Wrong size on TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, SlotIndex) == 0x000000, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, OutFaction) == 0x000004, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::OutFaction' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, OutLeaderboardPos1v1) == 0x000008, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::OutLeaderboardPos1v1' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, OutLeaderboardPos2v2) == 0x00000C, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::OutLeaderboardPos2v2' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, OutRating1v1) == 0x000010, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::OutRating1v1' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, OutRating2v2) == 0x000014, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::OutRating2v2' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent, bSuccess) == 0x000018, "Member 'TedPlayerProfileLeaderboardPositionsPanel_GetSlotContent::bSuccess' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetEquipmentPointsValueText
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundScreen_GetEquipmentPointsValueText final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInGroupped;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_GetEquipmentPointsValueText) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetEquipmentPointsValueText");
static_assert(sizeof(TedCommandCompoundScreen_GetEquipmentPointsValueText) == 0x000018, "Wrong size on TedCommandCompoundScreen_GetEquipmentPointsValueText");
static_assert(offsetof(TedCommandCompoundScreen_GetEquipmentPointsValueText, InValue) == 0x000000, "Member 'TedCommandCompoundScreen_GetEquipmentPointsValueText::InValue' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetEquipmentPointsValueText, bInGroupped) == 0x000004, "Member 'TedCommandCompoundScreen_GetEquipmentPointsValueText::bInGroupped' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetEquipmentPointsValueText, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetEquipmentPointsValueText::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetRemainingDoctrinePoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetRemainingDoctrinePoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetRemainingDoctrinePoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetRemainingDoctrinePoints");
static_assert(sizeof(TedCommandCompoundScreen_GetRemainingDoctrinePoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetRemainingDoctrinePoints");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingDoctrinePoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetRemainingDoctrinePoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingDoctrinePoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetRemainingDoctrinePoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetRemainingDoctrineResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetRemainingDoctrineResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetRemainingDoctrineResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetRemainingDoctrineResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetRemainingDoctrineResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetRemainingDoctrineResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingDoctrineResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetRemainingDoctrineResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingDoctrineResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetRemainingDoctrineResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetRemainingEquipmentPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetRemainingEquipmentPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetRemainingEquipmentPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetRemainingEquipmentPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetRemainingEquipmentPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetRemainingEquipmentPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetRemainingEquipmentResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetRemainingEquipmentResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetRemainingEquipmentResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetRemainingEquipmentResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetRemainingEquipmentResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetRemainingEquipmentResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetRemainingEquipmentSpace
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetRemainingEquipmentSpace final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetRemainingEquipmentSpace) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetRemainingEquipmentSpace");
static_assert(sizeof(TedCommandCompoundScreen_GetRemainingEquipmentSpace) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetRemainingEquipmentSpace");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentSpace, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentSpace::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetRemainingEquipmentSpace, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetRemainingEquipmentSpace::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetTotalDoctrinePoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetTotalDoctrinePoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetTotalDoctrinePoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetTotalDoctrinePoints");
static_assert(sizeof(TedCommandCompoundScreen_GetTotalDoctrinePoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetTotalDoctrinePoints");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalDoctrinePoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetTotalDoctrinePoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalDoctrinePoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetTotalDoctrinePoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetTotalDoctrineResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetTotalDoctrineResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetTotalDoctrineResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetTotalDoctrineResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetTotalDoctrineResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetTotalDoctrineResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalDoctrineResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetTotalDoctrineResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalDoctrineResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetTotalDoctrineResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetTotalEquipmentPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetTotalEquipmentPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetTotalEquipmentPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetTotalEquipmentPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetTotalEquipmentPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetTotalEquipmentPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetTotalEquipmentPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetTotalEquipmentPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetTotalEquipmentResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetTotalEquipmentResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetTotalEquipmentResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetTotalEquipmentResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetTotalEquipmentResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetTotalEquipmentResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetTotalEquipmentResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetTotalEquipmentResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetTotalEquipmentSpace
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetTotalEquipmentSpace final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetTotalEquipmentSpace) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetTotalEquipmentSpace");
static_assert(sizeof(TedCommandCompoundScreen_GetTotalEquipmentSpace) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetTotalEquipmentSpace");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentSpace, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetTotalEquipmentSpace::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetTotalEquipmentSpace, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetTotalEquipmentSpace::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetUsedDoctrinePoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetUsedDoctrinePoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetUsedDoctrinePoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetUsedDoctrinePoints");
static_assert(sizeof(TedCommandCompoundScreen_GetUsedDoctrinePoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetUsedDoctrinePoints");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedDoctrinePoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetUsedDoctrinePoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedDoctrinePoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetUsedDoctrinePoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetUsedDoctrineResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetUsedDoctrineResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetUsedDoctrineResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetUsedDoctrineResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetUsedDoctrineResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetUsedDoctrineResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedDoctrineResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetUsedDoctrineResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedDoctrineResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetUsedDoctrineResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetUsedEquipmentPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetUsedEquipmentPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetUsedEquipmentPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetUsedEquipmentPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetUsedEquipmentPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetUsedEquipmentPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetUsedEquipmentPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetUsedEquipmentPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetUsedEquipmentResetPoints
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetUsedEquipmentResetPoints final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetUsedEquipmentResetPoints) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetUsedEquipmentResetPoints");
static_assert(sizeof(TedCommandCompoundScreen_GetUsedEquipmentResetPoints) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetUsedEquipmentResetPoints");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentResetPoints, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetUsedEquipmentResetPoints::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentResetPoints, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetUsedEquipmentResetPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GetUsedEquipmentSpace
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GetUsedEquipmentSpace final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_GetUsedEquipmentSpace) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GetUsedEquipmentSpace");
static_assert(sizeof(TedCommandCompoundScreen_GetUsedEquipmentSpace) == 0x000010, "Wrong size on TedCommandCompoundScreen_GetUsedEquipmentSpace");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentSpace, InWorldContext) == 0x000000, "Member 'TedCommandCompoundScreen_GetUsedEquipmentSpace::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_GetUsedEquipmentSpace, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_GetUsedEquipmentSpace::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.HasJustPlayedLastMap
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_HasJustPlayedLastMap final
{
public:
	const class UTedGameProgressSubsystem*        GameProgress;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_HasJustPlayedLastMap) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_HasJustPlayedLastMap");
static_assert(sizeof(TedCommandCompoundScreen_HasJustPlayedLastMap) == 0x000010, "Wrong size on TedCommandCompoundScreen_HasJustPlayedLastMap");
static_assert(offsetof(TedCommandCompoundScreen_HasJustPlayedLastMap, GameProgress) == 0x000000, "Member 'TedCommandCompoundScreen_HasJustPlayedLastMap::GameProgress' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_HasJustPlayedLastMap, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_HasJustPlayedLastMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.OnActivateNavigationSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundScreen_OnActivateNavigationSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_OnActivateNavigationSlotState) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_OnActivateNavigationSlotState");
static_assert(sizeof(TedCommandCompoundScreen_OnActivateNavigationSlotState) == 0x000018, "Wrong size on TedCommandCompoundScreen_OnActivateNavigationSlotState");
static_assert(offsetof(TedCommandCompoundScreen_OnActivateNavigationSlotState, InContentPanel) == 0x000000, "Member 'TedCommandCompoundScreen_OnActivateNavigationSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnActivateNavigationSlotState, InContentSlot) == 0x000008, "Member 'TedCommandCompoundScreen_OnActivateNavigationSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnActivateNavigationSlotState, InState) == 0x000010, "Member 'TedCommandCompoundScreen_OnActivateNavigationSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnActivateNavigationSlotState, bInActivated) == 0x000011, "Member 'TedCommandCompoundScreen_OnActivateNavigationSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.OnDesktopBackgroundIntroFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished");
static_assert(sizeof(TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished) == 0x000010, "Wrong size on TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished, InWidget) == 0x000000, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished, InSource) == 0x000008, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundIntroFinished::InSource' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.OnDesktopBackgroundRelevantWidgetAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd");
static_assert(sizeof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd) == 0x000010, "Wrong size on TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd, InWidget) == 0x000000, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd, InAnimation) == 0x000008, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimEnd::InAnimation' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.OnDesktopBackgroundRelevantWidgetAnimStart
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart");
static_assert(sizeof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart) == 0x000010, "Wrong size on TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart, InWidget) == 0x000000, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart, InAnimation) == 0x000008, "Member 'TedCommandCompoundScreen_OnDesktopBackgroundRelevantWidgetAnimStart::InAnimation' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.OpenPage
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundScreen_OpenPage final
{
public:
	class UWidget*                                InPage;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_OpenPage) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_OpenPage");
static_assert(sizeof(TedCommandCompoundScreen_OpenPage) == 0x000008, "Wrong size on TedCommandCompoundScreen_OpenPage");
static_assert(offsetof(TedCommandCompoundScreen_OpenPage, InPage) == 0x000000, "Member 'TedCommandCompoundScreen_OpenPage::InPage' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.PlayDesktopBackgroundAnim
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundScreen_PlayDesktopBackgroundAnim final
{
public:
	ETedCommandCompoundDesktopBackgroundAnim      InAnim;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_PlayDesktopBackgroundAnim) == 0x000001, "Wrong alignment on TedCommandCompoundScreen_PlayDesktopBackgroundAnim");
static_assert(sizeof(TedCommandCompoundScreen_PlayDesktopBackgroundAnim) == 0x000001, "Wrong size on TedCommandCompoundScreen_PlayDesktopBackgroundAnim");
static_assert(offsetof(TedCommandCompoundScreen_PlayDesktopBackgroundAnim, InAnim) == 0x000000, "Member 'TedCommandCompoundScreen_PlayDesktopBackgroundAnim::InAnim' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.StartMission
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundScreen_StartMission final
{
public:
	const class UTedMapInfo*                      MapInfo;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_StartMission) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_StartMission");
static_assert(sizeof(TedCommandCompoundScreen_StartMission) == 0x000008, "Wrong size on TedCommandCompoundScreen_StartMission");
static_assert(offsetof(TedCommandCompoundScreen_StartMission, MapInfo) == 0x000000, "Member 'TedCommandCompoundScreen_StartMission::MapInfo' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.GatherDesktopBackgroundRelevantWidgets
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets final
{
public:
	TArray<class UTedUserWidget*>                 OutWidgets;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets");
static_assert(sizeof(TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets) == 0x000010, "Wrong size on TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets");
static_assert(offsetof(TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets, OutWidgets) == 0x000000, "Member 'TedCommandCompoundScreen_GatherDesktopBackgroundRelevantWidgets::OutWidgets' has a wrong offset!");

// Function Tempest.TedCommandCompoundScreen.ShouldAutoplayBriefing
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundScreen_ShouldAutoplayBriefing final
{
public:
	class UTedMapInfo*                            MapInfo;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundScreen_ShouldAutoplayBriefing) == 0x000008, "Wrong alignment on TedCommandCompoundScreen_ShouldAutoplayBriefing");
static_assert(sizeof(TedCommandCompoundScreen_ShouldAutoplayBriefing) == 0x000010, "Wrong size on TedCommandCompoundScreen_ShouldAutoplayBriefing");
static_assert(offsetof(TedCommandCompoundScreen_ShouldAutoplayBriefing, MapInfo) == 0x000000, "Member 'TedCommandCompoundScreen_ShouldAutoplayBriefing::MapInfo' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundScreen_ShouldAutoplayBriefing, ReturnValue) == 0x000008, "Member 'TedCommandCompoundScreen_ShouldAutoplayBriefing::ReturnValue' has a wrong offset!");

// Function Tempest.LightingBPBase.CheckIfSelected
// 0x0001 (0x0001 - 0x0000)
struct LightingBPBase_CheckIfSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingBPBase_CheckIfSelected) == 0x000001, "Wrong alignment on LightingBPBase_CheckIfSelected");
static_assert(sizeof(LightingBPBase_CheckIfSelected) == 0x000001, "Wrong size on LightingBPBase_CheckIfSelected");
static_assert(offsetof(LightingBPBase_CheckIfSelected, ReturnValue) == 0x000000, "Member 'LightingBPBase_CheckIfSelected::ReturnValue' has a wrong offset!");

// Function Tempest.LightingBPBase.UpdateLightPreset
// 0x0020 (0x0020 - 0x0000)
struct LightingBPBase_UpdateLightPreset final
{
public:
	class ULightingPreset*                        LightPreset;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirLight;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingBPBase_UpdateLightPreset) == 0x000008, "Wrong alignment on LightingBPBase_UpdateLightPreset");
static_assert(sizeof(LightingBPBase_UpdateLightPreset) == 0x000020, "Wrong size on LightingBPBase_UpdateLightPreset");
static_assert(offsetof(LightingBPBase_UpdateLightPreset, LightPreset) == 0x000000, "Member 'LightingBPBase_UpdateLightPreset::LightPreset' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateLightPreset, DirLight) == 0x000008, "Member 'LightingBPBase_UpdateLightPreset::DirLight' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateLightPreset, SkyLight) == 0x000010, "Member 'LightingBPBase_UpdateLightPreset::SkyLight' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateLightPreset, HeightFog) == 0x000018, "Member 'LightingBPBase_UpdateLightPreset::HeightFog' has a wrong offset!");

// Function Tempest.LightingBPBase.UpdatePostProcessPreset
// 0x0700 (0x0700 - 0x0000)
struct LightingBPBase_UpdatePostProcessPreset final
{
public:
	class UPostProcessPreset*                     PostProcessPreset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PostProcessSettings;                               // 0x0010(0x06F0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingBPBase_UpdatePostProcessPreset) == 0x000010, "Wrong alignment on LightingBPBase_UpdatePostProcessPreset");
static_assert(sizeof(LightingBPBase_UpdatePostProcessPreset) == 0x000700, "Wrong size on LightingBPBase_UpdatePostProcessPreset");
static_assert(offsetof(LightingBPBase_UpdatePostProcessPreset, PostProcessPreset) == 0x000000, "Member 'LightingBPBase_UpdatePostProcessPreset::PostProcessPreset' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdatePostProcessPreset, PostProcessSettings) == 0x000010, "Member 'LightingBPBase_UpdatePostProcessPreset::PostProcessSettings' has a wrong offset!");

// Function Tempest.LightingBPBase.UpdateSceneComponents
// 0x0020 (0x0020 - 0x0000)
struct LightingBPBase_UpdateSceneComponents final
{
public:
	class ULightingPreset*                        LightPreset;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirLight;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingBPBase_UpdateSceneComponents) == 0x000008, "Wrong alignment on LightingBPBase_UpdateSceneComponents");
static_assert(sizeof(LightingBPBase_UpdateSceneComponents) == 0x000020, "Wrong size on LightingBPBase_UpdateSceneComponents");
static_assert(offsetof(LightingBPBase_UpdateSceneComponents, LightPreset) == 0x000000, "Member 'LightingBPBase_UpdateSceneComponents::LightPreset' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateSceneComponents, DirLight) == 0x000008, "Member 'LightingBPBase_UpdateSceneComponents::DirLight' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateSceneComponents, SkyLight) == 0x000010, "Member 'LightingBPBase_UpdateSceneComponents::SkyLight' has a wrong offset!");
static_assert(offsetof(LightingBPBase_UpdateSceneComponents, HeightFog) == 0x000018, "Member 'LightingBPBase_UpdateSceneComponents::HeightFog' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnConstructionQueuesChange_Handler
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerDataWidget_OnConstructionQueuesChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerDataConstructionQueues       InPrevious;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedPlayerDataConstructionQueues       InCurrent;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnConstructionQueuesChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler) == 0x000038, "Wrong size on TedPlayerDataWidget_OnConstructionQueuesChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler, InCurrent) == 0x000020, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnConstructionQueuesChange_Handler_Native
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerDataConstructionQueues       InPrevious;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedPlayerDataConstructionQueues       InCurrent;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native) == 0x000038, "Wrong size on TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native, InCurrent) == 0x000020, "Member 'TedPlayerDataWidget_OnConstructionQueuesChange_Handler_Native::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnDoctrineResearchQueueChange_Handler
// 0x0048 (0x0048 - 0x0000)
struct TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedDoctrineResearchQueue              InPrevious;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedDoctrineResearchQueue              InCurrent;                                         // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler) == 0x000048, "Wrong size on TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler, InCurrent) == 0x000028, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnDoctrineResearchQueueChange_Handler_Native
// 0x0048 (0x0048 - 0x0000)
struct TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedDoctrineResearchQueue              InPrevious;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedDoctrineResearchQueue              InCurrent;                                         // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native) == 0x000048, "Wrong size on TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native, InCurrent) == 0x000028, "Member 'TedPlayerDataWidget_OnDoctrineResearchQueueChange_Handler_Native::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnLockedTechDataChange_Handler
// 0x0058 (0x0058 - 0x0000)
struct TedPlayerDataWidget_OnLockedTechDataChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerLockedTechData               InPrevious;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedPlayerLockedTechData               InCurrent;                                         // 0x0030(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnLockedTechDataChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnLockedTechDataChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnLockedTechDataChange_Handler) == 0x000058, "Wrong size on TedPlayerDataWidget_OnLockedTechDataChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler, InCurrent) == 0x000030, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnLockedTechDataChange_Handler_Native
// 0x0058 (0x0058 - 0x0000)
struct TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerLockedTechData               InPrevious;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedPlayerLockedTechData               InCurrent;                                         // 0x0030(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native) == 0x000058, "Wrong size on TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native, InCurrent) == 0x000030, "Member 'TedPlayerDataWidget_OnLockedTechDataChange_Handler_Native::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnOwnedTagsChange_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnOwnedTagsChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnOwnedTagsChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnOwnedTagsChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnOwnedTagsChange_Handler) == 0x000008, "Wrong size on TedPlayerDataWidget_OnOwnedTagsChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnOwnedTagsChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnOwnedTagsChange_Handler::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnOwnedTagsChange_Handler_Native
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native) == 0x000008, "Wrong size on TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnOwnedTagsChange_Handler_Native::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnReplicatePlayerState_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnReplicatePlayerState_Handler final
{
public:
	class ATedPlayerController*                   InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnReplicatePlayerState_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnReplicatePlayerState_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnReplicatePlayerState_Handler) == 0x000008, "Wrong size on TedPlayerDataWidget_OnReplicatePlayerState_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnReplicatePlayerState_Handler, InPlayerController) == 0x000000, "Member 'TedPlayerDataWidget_OnReplicatePlayerState_Handler::InPlayerController' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnResourcesChange_Handler
// 0x0048 (0x0048 - 0x0000)
struct TedPlayerDataWidget_OnResourcesChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InPrevious;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InCurrent;                                         // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnResourcesChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnResourcesChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnResourcesChange_Handler) == 0x000048, "Wrong size on TedPlayerDataWidget_OnResourcesChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler, InCurrent) == 0x000028, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnResourcesChange_Handler_Native
// 0x0048 (0x0048 - 0x0000)
struct TedPlayerDataWidget_OnResourcesChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InPrevious;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InCurrent;                                         // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnResourcesChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnResourcesChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnResourcesChange_Handler_Native) == 0x000048, "Wrong size on TedPlayerDataWidget_OnResourcesChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler_Native::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler_Native, InPrevious) == 0x000008, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler_Native::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnResourcesChange_Handler_Native, InCurrent) == 0x000028, "Member 'TedPlayerDataWidget_OnResourcesChange_Handler_Native::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnStructuresChange_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnStructuresChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnStructuresChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnStructuresChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnStructuresChange_Handler) == 0x000008, "Wrong size on TedPlayerDataWidget_OnStructuresChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnStructuresChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnStructuresChange_Handler::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnStructuresChange_Handler_Native
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnStructuresChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnStructuresChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnStructuresChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnStructuresChange_Handler_Native) == 0x000008, "Wrong size on TedPlayerDataWidget_OnStructuresChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnStructuresChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnStructuresChange_Handler_Native::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnTargetPlayerDataChange
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerDataWidget_OnTargetPlayerDataChange final
{
public:
	class UTedPlayerData*                         InPrevious;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedPlayerData*                         InCurrent;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnTargetPlayerDataChange) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnTargetPlayerDataChange");
static_assert(sizeof(TedPlayerDataWidget_OnTargetPlayerDataChange) == 0x000010, "Wrong size on TedPlayerDataWidget_OnTargetPlayerDataChange");
static_assert(offsetof(TedPlayerDataWidget_OnTargetPlayerDataChange, InPrevious) == 0x000000, "Member 'TedPlayerDataWidget_OnTargetPlayerDataChange::InPrevious' has a wrong offset!");
static_assert(offsetof(TedPlayerDataWidget_OnTargetPlayerDataChange, InCurrent) == 0x000008, "Member 'TedPlayerDataWidget_OnTargetPlayerDataChange::InCurrent' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnUnitsChange_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnUnitsChange_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnUnitsChange_Handler) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnUnitsChange_Handler");
static_assert(sizeof(TedPlayerDataWidget_OnUnitsChange_Handler) == 0x000008, "Wrong size on TedPlayerDataWidget_OnUnitsChange_Handler");
static_assert(offsetof(TedPlayerDataWidget_OnUnitsChange_Handler, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnUnitsChange_Handler::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.OnUnitsChange_Handler_Native
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_OnUnitsChange_Handler_Native final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_OnUnitsChange_Handler_Native) == 0x000008, "Wrong alignment on TedPlayerDataWidget_OnUnitsChange_Handler_Native");
static_assert(sizeof(TedPlayerDataWidget_OnUnitsChange_Handler_Native) == 0x000008, "Wrong size on TedPlayerDataWidget_OnUnitsChange_Handler_Native");
static_assert(offsetof(TedPlayerDataWidget_OnUnitsChange_Handler_Native, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_OnUnitsChange_Handler_Native::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.SetTargetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_SetTargetPlayerData final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_SetTargetPlayerData) == 0x000008, "Wrong alignment on TedPlayerDataWidget_SetTargetPlayerData");
static_assert(sizeof(TedPlayerDataWidget_SetTargetPlayerData) == 0x000008, "Wrong size on TedPlayerDataWidget_SetTargetPlayerData");
static_assert(offsetof(TedPlayerDataWidget_SetTargetPlayerData, InPlayerData) == 0x000000, "Member 'TedPlayerDataWidget_SetTargetPlayerData::InPlayerData' has a wrong offset!");

// Function Tempest.TedPlayerDataWidget.GetTargetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataWidget_GetTargetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataWidget_GetTargetPlayerData) == 0x000008, "Wrong alignment on TedPlayerDataWidget_GetTargetPlayerData");
static_assert(sizeof(TedPlayerDataWidget_GetTargetPlayerData) == 0x000008, "Wrong size on TedPlayerDataWidget_GetTargetPlayerData");
static_assert(offsetof(TedPlayerDataWidget_GetTargetPlayerData, ReturnValue) == 0x000000, "Member 'TedPlayerDataWidget_GetTargetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedAwaitingOtherPlayers.OnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedAwaitingOtherPlayers_OnEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAwaitingOtherPlayers_OnEndPlay) == 0x000008, "Wrong alignment on TedAwaitingOtherPlayers_OnEndPlay");
static_assert(sizeof(TedAwaitingOtherPlayers_OnEndPlay) == 0x000010, "Wrong size on TedAwaitingOtherPlayers_OnEndPlay");
static_assert(offsetof(TedAwaitingOtherPlayers_OnEndPlay, Actor) == 0x000000, "Member 'TedAwaitingOtherPlayers_OnEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(TedAwaitingOtherPlayers_OnEndPlay, EndPlayReason) == 0x000008, "Member 'TedAwaitingOtherPlayers_OnEndPlay::EndPlayReason' has a wrong offset!");

// Function Tempest.ProfanitySettings.GetCultures
// 0x0010 (0x0010 - 0x0000)
struct ProfanitySettings_GetCultures final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfanitySettings_GetCultures) == 0x000008, "Wrong alignment on ProfanitySettings_GetCultures");
static_assert(sizeof(ProfanitySettings_GetCultures) == 0x000010, "Wrong size on ProfanitySettings_GetCultures");
static_assert(offsetof(ProfanitySettings_GetCultures, ReturnValue) == 0x000000, "Member 'ProfanitySettings_GetCultures::ReturnValue' has a wrong offset!");

// Function Tempest.ProfanitySystem.CensorString
// 0x0028 (0x0028 - 0x0000)
struct ProfanitySystem_CensorString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutString;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfanitySystem_CensorString) == 0x000008, "Wrong alignment on ProfanitySystem_CensorString");
static_assert(sizeof(ProfanitySystem_CensorString) == 0x000028, "Wrong size on ProfanitySystem_CensorString");
static_assert(offsetof(ProfanitySystem_CensorString, InString) == 0x000000, "Member 'ProfanitySystem_CensorString::InString' has a wrong offset!");
static_assert(offsetof(ProfanitySystem_CensorString, OutString) == 0x000010, "Member 'ProfanitySystem_CensorString::OutString' has a wrong offset!");
static_assert(offsetof(ProfanitySystem_CensorString, ReturnValue) == 0x000020, "Member 'ProfanitySystem_CensorString::ReturnValue' has a wrong offset!");

// Function Tempest.ProfanitySystem.CensorText
// 0x0028 (0x0028 - 0x0000)
struct ProfanitySystem_CensorText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfanitySystem_CensorText) == 0x000008, "Wrong alignment on ProfanitySystem_CensorText");
static_assert(sizeof(ProfanitySystem_CensorText) == 0x000028, "Wrong size on ProfanitySystem_CensorText");
static_assert(offsetof(ProfanitySystem_CensorText, InText) == 0x000000, "Member 'ProfanitySystem_CensorText::InText' has a wrong offset!");
static_assert(offsetof(ProfanitySystem_CensorText, OutText) == 0x000010, "Member 'ProfanitySystem_CensorText::OutText' has a wrong offset!");
static_assert(offsetof(ProfanitySystem_CensorText, ReturnValue) == 0x000020, "Member 'ProfanitySystem_CensorText::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerControllerBase.ServerDebugAddExperience
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerControllerBase_ServerDebugAddExperience final
{
public:
	float                                         experience;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerControllerBase_ServerDebugAddExperience) == 0x000004, "Wrong alignment on TedPlayerControllerBase_ServerDebugAddExperience");
static_assert(sizeof(TedPlayerControllerBase_ServerDebugAddExperience) == 0x000004, "Wrong size on TedPlayerControllerBase_ServerDebugAddExperience");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugAddExperience, experience) == 0x000000, "Member 'TedPlayerControllerBase_ServerDebugAddExperience::experience' has a wrong offset!");

// Function Tempest.TedPlayerControllerBase.ServerDebugSpawnUnit
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerControllerBase_ServerDebugSpawnUnit final
{
public:
	TSubclassOf<class ATedUnitBase>               UnitClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerControllerBase_ServerDebugSpawnUnit) == 0x000008, "Wrong alignment on TedPlayerControllerBase_ServerDebugSpawnUnit");
static_assert(sizeof(TedPlayerControllerBase_ServerDebugSpawnUnit) == 0x000030, "Wrong size on TedPlayerControllerBase_ServerDebugSpawnUnit");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugSpawnUnit, UnitClass) == 0x000000, "Member 'TedPlayerControllerBase_ServerDebugSpawnUnit::UnitClass' has a wrong offset!");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugSpawnUnit, NumToSpawn) == 0x000008, "Member 'TedPlayerControllerBase_ServerDebugSpawnUnit::NumToSpawn' has a wrong offset!");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugSpawnUnit, Location) == 0x000010, "Member 'TedPlayerControllerBase_ServerDebugSpawnUnit::Location' has a wrong offset!");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugSpawnUnit, PlayerID) == 0x000028, "Member 'TedPlayerControllerBase_ServerDebugSpawnUnit::PlayerID' has a wrong offset!");

// Function Tempest.TedPlayerControllerBase.ServerDebugTeleportSelectedUnits
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerControllerBase_ServerDebugTeleportSelectedUnits final
{
public:
	struct FVector2D                              CursorLocation;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerControllerBase_ServerDebugTeleportSelectedUnits) == 0x000008, "Wrong alignment on TedPlayerControllerBase_ServerDebugTeleportSelectedUnits");
static_assert(sizeof(TedPlayerControllerBase_ServerDebugTeleportSelectedUnits) == 0x000020, "Wrong size on TedPlayerControllerBase_ServerDebugTeleportSelectedUnits");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugTeleportSelectedUnits, CursorLocation) == 0x000000, "Member 'TedPlayerControllerBase_ServerDebugTeleportSelectedUnits::CursorLocation' has a wrong offset!");
static_assert(offsetof(TedPlayerControllerBase_ServerDebugTeleportSelectedUnits, Units) == 0x000010, "Member 'TedPlayerControllerBase_ServerDebugTeleportSelectedUnits::Units' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_AddPawnGroupToSelection
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_AddPawnGroupToSelection final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_AddPawnGroupToSelection) == 0x000008, "Wrong alignment on TedPlayerController_Action_AddPawnGroupToSelection");
static_assert(sizeof(TedPlayerController_Action_AddPawnGroupToSelection) == 0x000020, "Wrong size on TedPlayerController_Action_AddPawnGroupToSelection");
static_assert(offsetof(TedPlayerController_Action_AddPawnGroupToSelection, Value) == 0x000000, "Member 'TedPlayerController_Action_AddPawnGroupToSelection::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_BuildingGridSlot
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_BuildingGridSlot final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_BuildingGridSlot) == 0x000008, "Wrong alignment on TedPlayerController_Action_BuildingGridSlot");
static_assert(sizeof(TedPlayerController_Action_BuildingGridSlot) == 0x000020, "Wrong size on TedPlayerController_Action_BuildingGridSlot");
static_assert(offsetof(TedPlayerController_Action_BuildingGridSlot, Value) == 0x000000, "Member 'TedPlayerController_Action_BuildingGridSlot::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Camera_Rotate_Left
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Camera_Rotate_Left final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Camera_Rotate_Left) == 0x000008, "Wrong alignment on TedPlayerController_Action_Camera_Rotate_Left");
static_assert(sizeof(TedPlayerController_Action_Camera_Rotate_Left) == 0x000020, "Wrong size on TedPlayerController_Action_Camera_Rotate_Left");
static_assert(offsetof(TedPlayerController_Action_Camera_Rotate_Left, Value) == 0x000000, "Member 'TedPlayerController_Action_Camera_Rotate_Left::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Camera_Rotate_Right
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Camera_Rotate_Right final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Camera_Rotate_Right) == 0x000008, "Wrong alignment on TedPlayerController_Action_Camera_Rotate_Right");
static_assert(sizeof(TedPlayerController_Action_Camera_Rotate_Right) == 0x000020, "Wrong size on TedPlayerController_Action_Camera_Rotate_Right");
static_assert(offsetof(TedPlayerController_Action_Camera_Rotate_Right, Value) == 0x000000, "Member 'TedPlayerController_Action_Camera_Rotate_Right::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_CreatePawnGroup
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_CreatePawnGroup final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_CreatePawnGroup) == 0x000008, "Wrong alignment on TedPlayerController_Action_CreatePawnGroup");
static_assert(sizeof(TedPlayerController_Action_CreatePawnGroup) == 0x000020, "Wrong size on TedPlayerController_Action_CreatePawnGroup");
static_assert(offsetof(TedPlayerController_Action_CreatePawnGroup, Value) == 0x000000, "Member 'TedPlayerController_Action_CreatePawnGroup::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_CreateUniquePawnGroup
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_CreateUniquePawnGroup final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_CreateUniquePawnGroup) == 0x000008, "Wrong alignment on TedPlayerController_Action_CreateUniquePawnGroup");
static_assert(sizeof(TedPlayerController_Action_CreateUniquePawnGroup) == 0x000020, "Wrong size on TedPlayerController_Action_CreateUniquePawnGroup");
static_assert(offsetof(TedPlayerController_Action_CreateUniquePawnGroup, Value) == 0x000000, "Member 'TedPlayerController_Action_CreateUniquePawnGroup::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_FreeLook
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_FreeLook final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_FreeLook) == 0x000008, "Wrong alignment on TedPlayerController_Action_FreeLook");
static_assert(sizeof(TedPlayerController_Action_FreeLook) == 0x000020, "Wrong size on TedPlayerController_Action_FreeLook");
static_assert(offsetof(TedPlayerController_Action_FreeLook, Value) == 0x000000, "Member 'TedPlayerController_Action_FreeLook::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_IssueCommand
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_IssueCommand final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_IssueCommand) == 0x000008, "Wrong alignment on TedPlayerController_Action_IssueCommand");
static_assert(sizeof(TedPlayerController_Action_IssueCommand) == 0x000020, "Wrong size on TedPlayerController_Action_IssueCommand");
static_assert(offsetof(TedPlayerController_Action_IssueCommand, Value) == 0x000000, "Member 'TedPlayerController_Action_IssueCommand::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_JumpToCameraLocation
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_JumpToCameraLocation final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_JumpToCameraLocation) == 0x000008, "Wrong alignment on TedPlayerController_Action_JumpToCameraLocation");
static_assert(sizeof(TedPlayerController_Action_JumpToCameraLocation) == 0x000020, "Wrong size on TedPlayerController_Action_JumpToCameraLocation");
static_assert(offsetof(TedPlayerController_Action_JumpToCameraLocation, Value) == 0x000000, "Member 'TedPlayerController_Action_JumpToCameraLocation::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Modifier_Alt
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Modifier_Alt final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Modifier_Alt) == 0x000008, "Wrong alignment on TedPlayerController_Action_Modifier_Alt");
static_assert(sizeof(TedPlayerController_Action_Modifier_Alt) == 0x000020, "Wrong size on TedPlayerController_Action_Modifier_Alt");
static_assert(offsetof(TedPlayerController_Action_Modifier_Alt, Value) == 0x000000, "Member 'TedPlayerController_Action_Modifier_Alt::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Modifier_Ctrl
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Modifier_Ctrl final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Modifier_Ctrl) == 0x000008, "Wrong alignment on TedPlayerController_Action_Modifier_Ctrl");
static_assert(sizeof(TedPlayerController_Action_Modifier_Ctrl) == 0x000020, "Wrong size on TedPlayerController_Action_Modifier_Ctrl");
static_assert(offsetof(TedPlayerController_Action_Modifier_Ctrl, Value) == 0x000000, "Member 'TedPlayerController_Action_Modifier_Ctrl::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Modifier_Shift
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Modifier_Shift final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Modifier_Shift) == 0x000008, "Wrong alignment on TedPlayerController_Action_Modifier_Shift");
static_assert(sizeof(TedPlayerController_Action_Modifier_Shift) == 0x000020, "Wrong size on TedPlayerController_Action_Modifier_Shift");
static_assert(offsetof(TedPlayerController_Action_Modifier_Shift, Value) == 0x000000, "Member 'TedPlayerController_Action_Modifier_Shift::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_MoveCamera
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_MoveCamera final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_MoveCamera) == 0x000008, "Wrong alignment on TedPlayerController_Action_MoveCamera");
static_assert(sizeof(TedPlayerController_Action_MoveCamera) == 0x000020, "Wrong size on TedPlayerController_Action_MoveCamera");
static_assert(offsetof(TedPlayerController_Action_MoveCamera, Value) == 0x000000, "Member 'TedPlayerController_Action_MoveCamera::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_MoveCameraFreeLook
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_MoveCameraFreeLook final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_MoveCameraFreeLook) == 0x000008, "Wrong alignment on TedPlayerController_Action_MoveCameraFreeLook");
static_assert(sizeof(TedPlayerController_Action_MoveCameraFreeLook) == 0x000020, "Wrong size on TedPlayerController_Action_MoveCameraFreeLook");
static_assert(offsetof(TedPlayerController_Action_MoveCameraFreeLook, Value) == 0x000000, "Member 'TedPlayerController_Action_MoveCameraFreeLook::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_OpenChat
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_OpenChat final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_OpenChat) == 0x000008, "Wrong alignment on TedPlayerController_Action_OpenChat");
static_assert(sizeof(TedPlayerController_Action_OpenChat) == 0x000020, "Wrong size on TedPlayerController_Action_OpenChat");
static_assert(offsetof(TedPlayerController_Action_OpenChat, Value) == 0x000000, "Member 'TedPlayerController_Action_OpenChat::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_PingClearSelection
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_PingClearSelection final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_PingClearSelection) == 0x000008, "Wrong alignment on TedPlayerController_Action_PingClearSelection");
static_assert(sizeof(TedPlayerController_Action_PingClearSelection) == 0x000020, "Wrong size on TedPlayerController_Action_PingClearSelection");
static_assert(offsetof(TedPlayerController_Action_PingClearSelection, Value) == 0x000000, "Member 'TedPlayerController_Action_PingClearSelection::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_PlacePing
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_PlacePing final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_PlacePing) == 0x000008, "Wrong alignment on TedPlayerController_Action_PlacePing");
static_assert(sizeof(TedPlayerController_Action_PlacePing) == 0x000020, "Wrong size on TedPlayerController_Action_PlacePing");
static_assert(offsetof(TedPlayerController_Action_PlacePing, Value) == 0x000000, "Member 'TedPlayerController_Action_PlacePing::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_RepairCommand
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_RepairCommand final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_RepairCommand) == 0x000008, "Wrong alignment on TedPlayerController_Action_RepairCommand");
static_assert(sizeof(TedPlayerController_Action_RepairCommand) == 0x000020, "Wrong size on TedPlayerController_Action_RepairCommand");
static_assert(offsetof(TedPlayerController_Action_RepairCommand, Value) == 0x000000, "Member 'TedPlayerController_Action_RepairCommand::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_RotateStructure
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_RotateStructure final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_RotateStructure) == 0x000008, "Wrong alignment on TedPlayerController_Action_RotateStructure");
static_assert(sizeof(TedPlayerController_Action_RotateStructure) == 0x000020, "Wrong size on TedPlayerController_Action_RotateStructure");
static_assert(offsetof(TedPlayerController_Action_RotateStructure, Value) == 0x000000, "Member 'TedPlayerController_Action_RotateStructure::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_Select
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_Select final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_Select) == 0x000008, "Wrong alignment on TedPlayerController_Action_Select");
static_assert(sizeof(TedPlayerController_Action_Select) == 0x000020, "Wrong size on TedPlayerController_Action_Select");
static_assert(offsetof(TedPlayerController_Action_Select, Value) == 0x000000, "Member 'TedPlayerController_Action_Select::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SelectAllUnits
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_SelectAllUnits final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SelectAllUnits) == 0x000008, "Wrong alignment on TedPlayerController_Action_SelectAllUnits");
static_assert(sizeof(TedPlayerController_Action_SelectAllUnits) == 0x000020, "Wrong size on TedPlayerController_Action_SelectAllUnits");
static_assert(offsetof(TedPlayerController_Action_SelectAllUnits, Value) == 0x000000, "Member 'TedPlayerController_Action_SelectAllUnits::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SelectAllUnitsOnScreen
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_SelectAllUnitsOnScreen final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SelectAllUnitsOnScreen) == 0x000008, "Wrong alignment on TedPlayerController_Action_SelectAllUnitsOnScreen");
static_assert(sizeof(TedPlayerController_Action_SelectAllUnitsOnScreen) == 0x000020, "Wrong size on TedPlayerController_Action_SelectAllUnitsOnScreen");
static_assert(offsetof(TedPlayerController_Action_SelectAllUnitsOnScreen, Value) == 0x000000, "Member 'TedPlayerController_Action_SelectAllUnitsOnScreen::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SelectBuildingGridCategory
// 0x0028 (0x0028 - 0x0000)
struct TedPlayerController_Action_SelectBuildingGridCategory final
{
public:
	struct FInputActionValue                      InValue;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InCategory;                                        // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SelectBuildingGridCategory) == 0x000008, "Wrong alignment on TedPlayerController_Action_SelectBuildingGridCategory");
static_assert(sizeof(TedPlayerController_Action_SelectBuildingGridCategory) == 0x000028, "Wrong size on TedPlayerController_Action_SelectBuildingGridCategory");
static_assert(offsetof(TedPlayerController_Action_SelectBuildingGridCategory, InValue) == 0x000000, "Member 'TedPlayerController_Action_SelectBuildingGridCategory::InValue' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Action_SelectBuildingGridCategory, InCategory) == 0x000020, "Member 'TedPlayerController_Action_SelectBuildingGridCategory::InCategory' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SelectPawnGroup
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_SelectPawnGroup final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SelectPawnGroup) == 0x000008, "Wrong alignment on TedPlayerController_Action_SelectPawnGroup");
static_assert(sizeof(TedPlayerController_Action_SelectPawnGroup) == 0x000020, "Wrong size on TedPlayerController_Action_SelectPawnGroup");
static_assert(offsetof(TedPlayerController_Action_SelectPawnGroup, Value) == 0x000000, "Member 'TedPlayerController_Action_SelectPawnGroup::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SellCommand
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_SellCommand final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SellCommand) == 0x000008, "Wrong alignment on TedPlayerController_Action_SellCommand");
static_assert(sizeof(TedPlayerController_Action_SellCommand) == 0x000020, "Wrong size on TedPlayerController_Action_SellCommand");
static_assert(offsetof(TedPlayerController_Action_SellCommand, Value) == 0x000000, "Member 'TedPlayerController_Action_SellCommand::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SetRallyPoint_BuildingGridCategory
// 0x0028 (0x0028 - 0x0000)
struct TedPlayerController_Action_SetRallyPoint_BuildingGridCategory final
{
public:
	struct FInputActionValue                      InValue;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InCategory;                                        // 0x0020(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SetRallyPoint_BuildingGridCategory) == 0x000008, "Wrong alignment on TedPlayerController_Action_SetRallyPoint_BuildingGridCategory");
static_assert(sizeof(TedPlayerController_Action_SetRallyPoint_BuildingGridCategory) == 0x000028, "Wrong size on TedPlayerController_Action_SetRallyPoint_BuildingGridCategory");
static_assert(offsetof(TedPlayerController_Action_SetRallyPoint_BuildingGridCategory, InValue) == 0x000000, "Member 'TedPlayerController_Action_SetRallyPoint_BuildingGridCategory::InValue' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Action_SetRallyPoint_BuildingGridCategory, InCategory) == 0x000020, "Member 'TedPlayerController_Action_SetRallyPoint_BuildingGridCategory::InCategory' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_ShowControlsInfo
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_ShowControlsInfo final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_ShowControlsInfo) == 0x000008, "Wrong alignment on TedPlayerController_Action_ShowControlsInfo");
static_assert(sizeof(TedPlayerController_Action_ShowControlsInfo) == 0x000020, "Wrong size on TedPlayerController_Action_ShowControlsInfo");
static_assert(offsetof(TedPlayerController_Action_ShowControlsInfo, Value) == 0x000000, "Member 'TedPlayerController_Action_ShowControlsInfo::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_SwitchChatMode
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_SwitchChatMode final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_SwitchChatMode) == 0x000008, "Wrong alignment on TedPlayerController_Action_SwitchChatMode");
static_assert(sizeof(TedPlayerController_Action_SwitchChatMode) == 0x000020, "Wrong size on TedPlayerController_Action_SwitchChatMode");
static_assert(offsetof(TedPlayerController_Action_SwitchChatMode, Value) == 0x000000, "Member 'TedPlayerController_Action_SwitchChatMode::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_TeleportToPawnGroup
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_TeleportToPawnGroup final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_TeleportToPawnGroup) == 0x000008, "Wrong alignment on TedPlayerController_Action_TeleportToPawnGroup");
static_assert(sizeof(TedPlayerController_Action_TeleportToPawnGroup) == 0x000020, "Wrong size on TedPlayerController_Action_TeleportToPawnGroup");
static_assert(offsetof(TedPlayerController_Action_TeleportToPawnGroup, Value) == 0x000000, "Member 'TedPlayerController_Action_TeleportToPawnGroup::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.Action_TogglePowerCommand
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Action_TogglePowerCommand final
{
public:
	struct FInputActionValue                      Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Action_TogglePowerCommand) == 0x000008, "Wrong alignment on TedPlayerController_Action_TogglePowerCommand");
static_assert(sizeof(TedPlayerController_Action_TogglePowerCommand) == 0x000020, "Wrong size on TedPlayerController_Action_TogglePowerCommand");
static_assert(offsetof(TedPlayerController_Action_TogglePowerCommand, Value) == 0x000000, "Member 'TedPlayerController_Action_TogglePowerCommand::Value' has a wrong offset!");

// Function Tempest.TedPlayerController.ChangePrimarySelectionType
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_ChangePrimarySelectionType final
{
public:
	bool                                          bPrimaryToLast;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ChangePrimarySelectionType) == 0x000001, "Wrong alignment on TedPlayerController_ChangePrimarySelectionType");
static_assert(sizeof(TedPlayerController_ChangePrimarySelectionType) == 0x000001, "Wrong size on TedPlayerController_ChangePrimarySelectionType");
static_assert(offsetof(TedPlayerController_ChangePrimarySelectionType, bPrimaryToLast) == 0x000000, "Member 'TedPlayerController_ChangePrimarySelectionType::bPrimaryToLast' has a wrong offset!");

// Function Tempest.TedPlayerController.Client_MatchEnded
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Client_MatchEnded final
{
public:
	class FString                                 InMatchID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InEndGameFocusActor;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_Client_MatchEnded) == 0x000008, "Wrong alignment on TedPlayerController_Client_MatchEnded");
static_assert(sizeof(TedPlayerController_Client_MatchEnded) == 0x000020, "Wrong size on TedPlayerController_Client_MatchEnded");
static_assert(offsetof(TedPlayerController_Client_MatchEnded, InMatchID) == 0x000000, "Member 'TedPlayerController_Client_MatchEnded::InMatchID' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Client_MatchEnded, InEndGameFocusActor) == 0x000010, "Member 'TedPlayerController_Client_MatchEnded::InEndGameFocusActor' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Client_MatchEnded, bIsWinner) == 0x000018, "Member 'TedPlayerController_Client_MatchEnded::bIsWinner' has a wrong offset!");

// Function Tempest.TedPlayerController.Client_MatchStarted
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_Client_MatchStarted final
{
public:
	class FString                                 InMatchID;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Client_MatchStarted) == 0x000008, "Wrong alignment on TedPlayerController_Client_MatchStarted");
static_assert(sizeof(TedPlayerController_Client_MatchStarted) == 0x000010, "Wrong size on TedPlayerController_Client_MatchStarted");
static_assert(offsetof(TedPlayerController_Client_MatchStarted, InMatchID) == 0x000000, "Member 'TedPlayerController_Client_MatchStarted::InMatchID' has a wrong offset!");

// Function Tempest.TedPlayerController.Client_ToggleWaitingForOtherPlayersPopup
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Timeout;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMatchID;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup) == 0x000008, "Wrong alignment on TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup");
static_assert(sizeof(TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup) == 0x000018, "Wrong size on TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup");
static_assert(offsetof(TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup, bShow) == 0x000000, "Member 'TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup::bShow' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup, Timeout) == 0x000004, "Member 'TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup::Timeout' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup, InMatchID) == 0x000008, "Member 'TedPlayerController_Client_ToggleWaitingForOtherPlayersPopup::InMatchID' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientAcceptCommandRequest
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_ClientAcceptCommandRequest final
{
public:
	struct FTedCommandRequestID                   RequestId;                                         // 0x0000(0x0001)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ClientAcceptCommandRequest) == 0x000001, "Wrong alignment on TedPlayerController_ClientAcceptCommandRequest");
static_assert(sizeof(TedPlayerController_ClientAcceptCommandRequest) == 0x000001, "Wrong size on TedPlayerController_ClientAcceptCommandRequest");
static_assert(offsetof(TedPlayerController_ClientAcceptCommandRequest, RequestId) == 0x000000, "Member 'TedPlayerController_ClientAcceptCommandRequest::RequestId' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientCommandFinished
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_ClientCommandFinished final
{
public:
	const class AActor*                           CommandActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 Command;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommandActorsNum;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnTedCommandExecutedResult                   Result;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_ClientCommandFinished) == 0x000008, "Wrong alignment on TedPlayerController_ClientCommandFinished");
static_assert(sizeof(TedPlayerController_ClientCommandFinished) == 0x000018, "Wrong size on TedPlayerController_ClientCommandFinished");
static_assert(offsetof(TedPlayerController_ClientCommandFinished, CommandActor) == 0x000000, "Member 'TedPlayerController_ClientCommandFinished::CommandActor' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ClientCommandFinished, Command) == 0x000008, "Member 'TedPlayerController_ClientCommandFinished::Command' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ClientCommandFinished, CommandActorsNum) == 0x000010, "Member 'TedPlayerController_ClientCommandFinished::CommandActorsNum' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ClientCommandFinished, Result) == 0x000014, "Member 'TedPlayerController_ClientCommandFinished::Result' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientDenyCommandRequest
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_ClientDenyCommandRequest final
{
public:
	struct FTedCommandRequestID                   RequestId;                                         // 0x0000(0x0001)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ClientDenyCommandRequest) == 0x000001, "Wrong alignment on TedPlayerController_ClientDenyCommandRequest");
static_assert(sizeof(TedPlayerController_ClientDenyCommandRequest) == 0x000001, "Wrong size on TedPlayerController_ClientDenyCommandRequest");
static_assert(offsetof(TedPlayerController_ClientDenyCommandRequest, RequestId) == 0x000000, "Member 'TedPlayerController_ClientDenyCommandRequest::RequestId' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientRefreshMatchHistoryData
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_ClientRefreshMatchHistoryData final
{
public:
	class AActor*                                 EndGameFocus;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWinner;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_ClientRefreshMatchHistoryData) == 0x000008, "Wrong alignment on TedPlayerController_ClientRefreshMatchHistoryData");
static_assert(sizeof(TedPlayerController_ClientRefreshMatchHistoryData) == 0x000010, "Wrong size on TedPlayerController_ClientRefreshMatchHistoryData");
static_assert(offsetof(TedPlayerController_ClientRefreshMatchHistoryData, EndGameFocus) == 0x000000, "Member 'TedPlayerController_ClientRefreshMatchHistoryData::EndGameFocus' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ClientRefreshMatchHistoryData, bIsWinner) == 0x000008, "Member 'TedPlayerController_ClientRefreshMatchHistoryData::bIsWinner' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientReportServerTime
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_ClientReportServerTime final
{
public:
	double                                        RequestWorldTime;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ServerTime;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ClientReportServerTime) == 0x000008, "Wrong alignment on TedPlayerController_ClientReportServerTime");
static_assert(sizeof(TedPlayerController_ClientReportServerTime) == 0x000010, "Wrong size on TedPlayerController_ClientReportServerTime");
static_assert(offsetof(TedPlayerController_ClientReportServerTime, RequestWorldTime) == 0x000000, "Member 'TedPlayerController_ClientReportServerTime::RequestWorldTime' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ClientReportServerTime, ServerTime) == 0x000008, "Member 'TedPlayerController_ClientReportServerTime::ServerTime' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientReturnPing
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ClientReturnPing final
{
public:
	double                                        Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ClientReturnPing) == 0x000008, "Wrong alignment on TedPlayerController_ClientReturnPing");
static_assert(sizeof(TedPlayerController_ClientReturnPing) == 0x000008, "Wrong size on TedPlayerController_ClientReturnPing");
static_assert(offsetof(TedPlayerController_ClientReturnPing, Timestamp) == 0x000000, "Member 'TedPlayerController_ClientReturnPing::Timestamp' has a wrong offset!");

// Function Tempest.TedPlayerController.DebugActivateUpgrade
// 0x000C (0x000C - 0x0000)
struct TedPlayerController_DebugActivateUpgrade final
{
public:
	class FName                                   UpgradeName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwningPlayerID;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_DebugActivateUpgrade) == 0x000004, "Wrong alignment on TedPlayerController_DebugActivateUpgrade");
static_assert(sizeof(TedPlayerController_DebugActivateUpgrade) == 0x00000C, "Wrong size on TedPlayerController_DebugActivateUpgrade");
static_assert(offsetof(TedPlayerController_DebugActivateUpgrade, UpgradeName) == 0x000000, "Member 'TedPlayerController_DebugActivateUpgrade::UpgradeName' has a wrong offset!");
static_assert(offsetof(TedPlayerController_DebugActivateUpgrade, bEnable) == 0x000008, "Member 'TedPlayerController_DebugActivateUpgrade::bEnable' has a wrong offset!");
static_assert(offsetof(TedPlayerController_DebugActivateUpgrade, OwningPlayerID) == 0x000009, "Member 'TedPlayerController_DebugActivateUpgrade::OwningPlayerID' has a wrong offset!");

// Function Tempest.TedPlayerController.DebugSpawnPawn
// 0x000C (0x000C - 0x0000)
struct TedPlayerController_DebugSpawnPawn final
{
public:
	class FName                                   PawnDefinitionID;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwningPlayerID;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amount;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_DebugSpawnPawn) == 0x000004, "Wrong alignment on TedPlayerController_DebugSpawnPawn");
static_assert(sizeof(TedPlayerController_DebugSpawnPawn) == 0x00000C, "Wrong size on TedPlayerController_DebugSpawnPawn");
static_assert(offsetof(TedPlayerController_DebugSpawnPawn, PawnDefinitionID) == 0x000000, "Member 'TedPlayerController_DebugSpawnPawn::PawnDefinitionID' has a wrong offset!");
static_assert(offsetof(TedPlayerController_DebugSpawnPawn, OwningPlayerID) == 0x000008, "Member 'TedPlayerController_DebugSpawnPawn::OwningPlayerID' has a wrong offset!");
static_assert(offsetof(TedPlayerController_DebugSpawnPawn, Amount) == 0x000009, "Member 'TedPlayerController_DebugSpawnPawn::Amount' has a wrong offset!");

// Function Tempest.TedPlayerController.ExitCurrentGame
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_ExitCurrentGame final
{
public:
	bool                                          bShutdown;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ExitCurrentGame) == 0x000001, "Wrong alignment on TedPlayerController_ExitCurrentGame");
static_assert(sizeof(TedPlayerController_ExitCurrentGame) == 0x000001, "Wrong size on TedPlayerController_ExitCurrentGame");
static_assert(offsetof(TedPlayerController_ExitCurrentGame, bShutdown) == 0x000000, "Member 'TedPlayerController_ExitCurrentGame::bShutdown' has a wrong offset!");

// Function Tempest.TedPlayerController.InputRedirect
// 0x0070 (0x0070 - 0x0000)
struct TedPlayerController_InputRedirect final
{
public:
	struct FInputActionInstance                   InInputActionInstance;                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FName                                   InAssociatedFunctionName;                          // 0x0060(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAssociatedGameplayTag;                           // 0x0068(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_InputRedirect) == 0x000008, "Wrong alignment on TedPlayerController_InputRedirect");
static_assert(sizeof(TedPlayerController_InputRedirect) == 0x000070, "Wrong size on TedPlayerController_InputRedirect");
static_assert(offsetof(TedPlayerController_InputRedirect, InInputActionInstance) == 0x000000, "Member 'TedPlayerController_InputRedirect::InInputActionInstance' has a wrong offset!");
static_assert(offsetof(TedPlayerController_InputRedirect, InAssociatedFunctionName) == 0x000060, "Member 'TedPlayerController_InputRedirect::InAssociatedFunctionName' has a wrong offset!");
static_assert(offsetof(TedPlayerController_InputRedirect, InAssociatedGameplayTag) == 0x000068, "Member 'TedPlayerController_InputRedirect::InAssociatedGameplayTag' has a wrong offset!");

// Function Tempest.TedPlayerController.KillAllPawns
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_KillAllPawns final
{
public:
	TArray<class ATedPawn*>                       InPawns;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_KillAllPawns) == 0x000008, "Wrong alignment on TedPlayerController_KillAllPawns");
static_assert(sizeof(TedPlayerController_KillAllPawns) == 0x000010, "Wrong size on TedPlayerController_KillAllPawns");
static_assert(offsetof(TedPlayerController_KillAllPawns, InPawns) == 0x000000, "Member 'TedPlayerController_KillAllPawns::InPawns' has a wrong offset!");

// Function Tempest.TedPlayerController.PreloadAssets
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_PreloadAssets final
{
public:
	TArray<TSoftClassPtr<class UClass>>           Class_0;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_PreloadAssets) == 0x000008, "Wrong alignment on TedPlayerController_PreloadAssets");
static_assert(sizeof(TedPlayerController_PreloadAssets) == 0x000010, "Wrong size on TedPlayerController_PreloadAssets");
static_assert(offsetof(TedPlayerController_PreloadAssets, Class_0) == 0x000000, "Member 'TedPlayerController_PreloadAssets::Class_0' has a wrong offset!");

// Function Tempest.TedPlayerController.Server_PlacePing
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_Server_PlacePing final
{
public:
	struct FVector2D_NetQuantize                  InPlace;                                           // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Server_PlacePing) == 0x000008, "Wrong alignment on TedPlayerController_Server_PlacePing");
static_assert(sizeof(TedPlayerController_Server_PlacePing) == 0x000010, "Wrong size on TedPlayerController_Server_PlacePing");
static_assert(offsetof(TedPlayerController_Server_PlacePing, InPlace) == 0x000000, "Member 'TedPlayerController_Server_PlacePing::InPlace' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerBouncePing
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ServerBouncePing final
{
public:
	double                                        Timestamp;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerBouncePing) == 0x000008, "Wrong alignment on TedPlayerController_ServerBouncePing");
static_assert(sizeof(TedPlayerController_ServerBouncePing) == 0x000008, "Wrong size on TedPlayerController_ServerBouncePing");
static_assert(offsetof(TedPlayerController_ServerBouncePing, Timestamp) == 0x000000, "Member 'TedPlayerController_ServerBouncePing::Timestamp' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugActivateUpgrade
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_ServerDebugActivateUpgrade final
{
public:
	const class UTedUpgrade*                      Upgrade;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ATedPlayerState*                  OwningPlayerState;                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugActivateUpgrade) == 0x000008, "Wrong alignment on TedPlayerController_ServerDebugActivateUpgrade");
static_assert(sizeof(TedPlayerController_ServerDebugActivateUpgrade) == 0x000018, "Wrong size on TedPlayerController_ServerDebugActivateUpgrade");
static_assert(offsetof(TedPlayerController_ServerDebugActivateUpgrade, Upgrade) == 0x000000, "Member 'TedPlayerController_ServerDebugActivateUpgrade::Upgrade' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugActivateUpgrade, bEnable) == 0x000008, "Member 'TedPlayerController_ServerDebugActivateUpgrade::bEnable' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugActivateUpgrade, OwningPlayerState) == 0x000010, "Member 'TedPlayerController_ServerDebugActivateUpgrade::OwningPlayerState' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugSpawnPawn
// 0x0028 (0x0028 - 0x0000)
struct TedPlayerController_ServerDebugSpawnPawn final
{
public:
	TSubclassOf<class ATedPawn>                   PawnClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  OwningPlayerID;                                    // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amount;                                            // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_ServerDebugSpawnPawn) == 0x000008, "Wrong alignment on TedPlayerController_ServerDebugSpawnPawn");
static_assert(sizeof(TedPlayerController_ServerDebugSpawnPawn) == 0x000028, "Wrong size on TedPlayerController_ServerDebugSpawnPawn");
static_assert(offsetof(TedPlayerController_ServerDebugSpawnPawn, PawnClass) == 0x000000, "Member 'TedPlayerController_ServerDebugSpawnPawn::PawnClass' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugSpawnPawn, Location) == 0x000008, "Member 'TedPlayerController_ServerDebugSpawnPawn::Location' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugSpawnPawn, OwningPlayerID) == 0x000020, "Member 'TedPlayerController_ServerDebugSpawnPawn::OwningPlayerID' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugSpawnPawn, Amount) == 0x000021, "Member 'TedPlayerController_ServerDebugSpawnPawn::Amount' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerIssueCommandRequest
// 0x0070 (0x0070 - 0x0000)
struct TedPlayerController_ServerIssueCommandRequest final
{
public:
	struct FTedCommandRequest                     CommandRequest;                                    // 0x0000(0x0070)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerIssueCommandRequest) == 0x000008, "Wrong alignment on TedPlayerController_ServerIssueCommandRequest");
static_assert(sizeof(TedPlayerController_ServerIssueCommandRequest) == 0x000070, "Wrong size on TedPlayerController_ServerIssueCommandRequest");
static_assert(offsetof(TedPlayerController_ServerIssueCommandRequest, CommandRequest) == 0x000000, "Member 'TedPlayerController_ServerIssueCommandRequest::CommandRequest' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerRequestServerTime
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ServerRequestServerTime final
{
public:
	double                                        RequestWorldTime;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerRequestServerTime) == 0x000008, "Wrong alignment on TedPlayerController_ServerRequestServerTime");
static_assert(sizeof(TedPlayerController_ServerRequestServerTime) == 0x000008, "Wrong size on TedPlayerController_ServerRequestServerTime");
static_assert(offsetof(TedPlayerController_ServerRequestServerTime, RequestWorldTime) == 0x000000, "Member 'TedPlayerController_ServerRequestServerTime::RequestWorldTime' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerSelectionChanged
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_ServerSelectionChanged final
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ETedSelectionOp                               Op;                                                // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_ServerSelectionChanged) == 0x000008, "Wrong alignment on TedPlayerController_ServerSelectionChanged");
static_assert(sizeof(TedPlayerController_ServerSelectionChanged) == 0x000018, "Wrong size on TedPlayerController_ServerSelectionChanged");
static_assert(offsetof(TedPlayerController_ServerSelectionChanged, Pawns) == 0x000000, "Member 'TedPlayerController_ServerSelectionChanged::Pawns' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerSelectionChanged, Op) == 0x000010, "Member 'TedPlayerController_ServerSelectionChanged::Op' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerSetAutocastCommandEnabled
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_ServerSetAutocastCommandEnabled final
{
public:
	TSubclassOf<class UTedCommand>                CommandClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerController_ServerSetAutocastCommandEnabled) == 0x000008, "Wrong alignment on TedPlayerController_ServerSetAutocastCommandEnabled");
static_assert(sizeof(TedPlayerController_ServerSetAutocastCommandEnabled) == 0x000010, "Wrong size on TedPlayerController_ServerSetAutocastCommandEnabled");
static_assert(offsetof(TedPlayerController_ServerSetAutocastCommandEnabled, CommandClass) == 0x000000, "Member 'TedPlayerController_ServerSetAutocastCommandEnabled::CommandClass' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerSetAutocastCommandEnabled, bEnabled) == 0x000008, "Member 'TedPlayerController_ServerSetAutocastCommandEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerUpdatePing
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerController_ServerUpdatePing final
{
public:
	float                                         ExactPing;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerUpdatePing) == 0x000004, "Wrong alignment on TedPlayerController_ServerUpdatePing");
static_assert(sizeof(TedPlayerController_ServerUpdatePing) == 0x000004, "Wrong size on TedPlayerController_ServerUpdatePing");
static_assert(offsetof(TedPlayerController_ServerUpdatePing, ExactPing) == 0x000000, "Member 'TedPlayerController_ServerUpdatePing::ExactPing' has a wrong offset!");

// Function Tempest.TedPlayerController.CacheReconnectMatchConfig
// 0x0003 (0x0003 - 0x0000)
struct TedPlayerController_CacheReconnectMatchConfig final
{
public:
	struct FTedReconnectMatchConfig               InRMC;                                             // 0x0000(0x0003)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_CacheReconnectMatchConfig) == 0x000001, "Wrong alignment on TedPlayerController_CacheReconnectMatchConfig");
static_assert(sizeof(TedPlayerController_CacheReconnectMatchConfig) == 0x000003, "Wrong size on TedPlayerController_CacheReconnectMatchConfig");
static_assert(offsetof(TedPlayerController_CacheReconnectMatchConfig, InRMC) == 0x000000, "Member 'TedPlayerController_CacheReconnectMatchConfig::InRMC' has a wrong offset!");

// Function Tempest.TedPlayerController.CacheTeamID
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_CacheTeamID final
{
public:
	ETedTeamID                                    InTeamID;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_CacheTeamID) == 0x000001, "Wrong alignment on TedPlayerController_CacheTeamID");
static_assert(sizeof(TedPlayerController_CacheTeamID) == 0x000001, "Wrong size on TedPlayerController_CacheTeamID");
static_assert(offsetof(TedPlayerController_CacheTeamID, InTeamID) == 0x000000, "Member 'TedPlayerController_CacheTeamID::InTeamID' has a wrong offset!");

// Function Tempest.TedPlayerController.Client_OnPlayersRatingsUpdated
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_Client_OnPlayersRatingsUpdated final
{
public:
	TArray<struct FTedLeaderboardUserRep>         InUserRatingsBeforeMatch;                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FTedLeaderboardUserRep>         InUserRatingsAfterMatch;                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_Client_OnPlayersRatingsUpdated) == 0x000008, "Wrong alignment on TedPlayerController_Client_OnPlayersRatingsUpdated");
static_assert(sizeof(TedPlayerController_Client_OnPlayersRatingsUpdated) == 0x000020, "Wrong size on TedPlayerController_Client_OnPlayersRatingsUpdated");
static_assert(offsetof(TedPlayerController_Client_OnPlayersRatingsUpdated, InUserRatingsBeforeMatch) == 0x000000, "Member 'TedPlayerController_Client_OnPlayersRatingsUpdated::InUserRatingsBeforeMatch' has a wrong offset!");
static_assert(offsetof(TedPlayerController_Client_OnPlayersRatingsUpdated, InUserRatingsAfterMatch) == 0x000010, "Member 'TedPlayerController_Client_OnPlayersRatingsUpdated::InUserRatingsAfterMatch' has a wrong offset!");

// Function Tempest.TedPlayerController.ClientDebugSetCVarTimers
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_ClientDebugSetCVarTimers final
{
public:
	struct FTedReconnectTimers                    InCVarTimers;                                      // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ClientDebugSetCVarTimers) == 0x000004, "Wrong alignment on TedPlayerController_ClientDebugSetCVarTimers");
static_assert(sizeof(TedPlayerController_ClientDebugSetCVarTimers) == 0x000020, "Wrong size on TedPlayerController_ClientDebugSetCVarTimers");
static_assert(offsetof(TedPlayerController_ClientDebugSetCVarTimers, InCVarTimers) == 0x000000, "Member 'TedPlayerController_ClientDebugSetCVarTimers::InCVarTimers' has a wrong offset!");

// Function Tempest.TedPlayerController.GetHoveredPawns
// 0x0050 (0x0050 - 0x0000)
struct TedPlayerController_GetHoveredPawns final
{
public:
	TSet<class ATedPawn*>                         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetHoveredPawns) == 0x000008, "Wrong alignment on TedPlayerController_GetHoveredPawns");
static_assert(sizeof(TedPlayerController_GetHoveredPawns) == 0x000050, "Wrong size on TedPlayerController_GetHoveredPawns");
static_assert(offsetof(TedPlayerController_GetHoveredPawns, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetHoveredPawns::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_GetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetPlayerData) == 0x000008, "Wrong alignment on TedPlayerController_GetPlayerData");
static_assert(sizeof(TedPlayerController_GetPlayerData) == 0x000008, "Wrong size on TedPlayerController_GetPlayerData");
static_assert(offsetof(TedPlayerController_GetPlayerData, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetPlayerFaction
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_GetPlayerFaction final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetPlayerFaction) == 0x000001, "Wrong alignment on TedPlayerController_GetPlayerFaction");
static_assert(sizeof(TedPlayerController_GetPlayerFaction) == 0x000001, "Wrong size on TedPlayerController_GetPlayerFaction");
static_assert(offsetof(TedPlayerController_GetPlayerFaction, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetPlayerFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetPlayerHUD
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_GetPlayerHUD final
{
public:
	class ATedHUD*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetPlayerHUD) == 0x000008, "Wrong alignment on TedPlayerController_GetPlayerHUD");
static_assert(sizeof(TedPlayerController_GetPlayerHUD) == 0x000008, "Wrong size on TedPlayerController_GetPlayerHUD");
static_assert(offsetof(TedPlayerController_GetPlayerHUD, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetPlayerHUD::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetPlayerId
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_GetPlayerId final
{
public:
	ETedPlayerID                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetPlayerId) == 0x000001, "Wrong alignment on TedPlayerController_GetPlayerId");
static_assert(sizeof(TedPlayerController_GetPlayerId) == 0x000001, "Wrong size on TedPlayerController_GetPlayerId");
static_assert(offsetof(TedPlayerController_GetPlayerId, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetPlayerId::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetSelectedPawns
// 0x0050 (0x0050 - 0x0000)
struct TedPlayerController_GetSelectedPawns final
{
public:
	TSet<class ATedPawn*>                         ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetSelectedPawns) == 0x000008, "Wrong alignment on TedPlayerController_GetSelectedPawns");
static_assert(sizeof(TedPlayerController_GetSelectedPawns) == 0x000050, "Wrong size on TedPlayerController_GetSelectedPawns");
static_assert(offsetof(TedPlayerController_GetSelectedPawns, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetSelectedPawns::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetSelectedStructures
// 0x0050 (0x0050 - 0x0000)
struct TedPlayerController_GetSelectedStructures final
{
public:
	TSet<class ATedStructureBase*>                ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetSelectedStructures) == 0x000008, "Wrong alignment on TedPlayerController_GetSelectedStructures");
static_assert(sizeof(TedPlayerController_GetSelectedStructures) == 0x000050, "Wrong size on TedPlayerController_GetSelectedStructures");
static_assert(offsetof(TedPlayerController_GetSelectedStructures, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetSelectedStructures::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.GetSelectedUnits
// 0x0050 (0x0050 - 0x0000)
struct TedPlayerController_GetSelectedUnits final
{
public:
	TSet<class ATedUnitBase*>                     ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_GetSelectedUnits) == 0x000008, "Wrong alignment on TedPlayerController_GetSelectedUnits");
static_assert(sizeof(TedPlayerController_GetSelectedUnits) == 0x000050, "Wrong size on TedPlayerController_GetSelectedUnits");
static_assert(offsetof(TedPlayerController_GetSelectedUnits, ReturnValue) == 0x000000, "Member 'TedPlayerController_GetSelectedUnits::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.HasAnythingSelected
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_HasAnythingSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_HasAnythingSelected) == 0x000001, "Wrong alignment on TedPlayerController_HasAnythingSelected");
static_assert(sizeof(TedPlayerController_HasAnythingSelected) == 0x000001, "Wrong size on TedPlayerController_HasAnythingSelected");
static_assert(offsetof(TedPlayerController_HasAnythingSelected, ReturnValue) == 0x000000, "Member 'TedPlayerController_HasAnythingSelected::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.HasMatchEnded
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_HasMatchEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_HasMatchEnded) == 0x000001, "Wrong alignment on TedPlayerController_HasMatchEnded");
static_assert(sizeof(TedPlayerController_HasMatchEnded) == 0x000001, "Wrong size on TedPlayerController_HasMatchEnded");
static_assert(offsetof(TedPlayerController_HasMatchEnded, ReturnValue) == 0x000000, "Member 'TedPlayerController_HasMatchEnded::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.HasMatchStarted
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_HasMatchStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_HasMatchStarted) == 0x000001, "Wrong alignment on TedPlayerController_HasMatchStarted");
static_assert(sizeof(TedPlayerController_HasMatchStarted) == 0x000001, "Wrong size on TedPlayerController_HasMatchStarted");
static_assert(offsetof(TedPlayerController_HasMatchStarted, ReturnValue) == 0x000000, "Member 'TedPlayerController_HasMatchStarted::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.IsOnlyASpectator
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_IsOnlyASpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_IsOnlyASpectator) == 0x000001, "Wrong alignment on TedPlayerController_IsOnlyASpectator");
static_assert(sizeof(TedPlayerController_IsOnlyASpectator) == 0x000001, "Wrong size on TedPlayerController_IsOnlyASpectator");
static_assert(offsetof(TedPlayerController_IsOnlyASpectator, ReturnValue) == 0x000000, "Member 'TedPlayerController_IsOnlyASpectator::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.IsSpectator
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_IsSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_IsSpectator) == 0x000001, "Wrong alignment on TedPlayerController_IsSpectator");
static_assert(sizeof(TedPlayerController_IsSpectator) == 0x000001, "Wrong size on TedPlayerController_IsSpectator");
static_assert(offsetof(TedPlayerController_IsSpectator, ReturnValue) == 0x000000, "Member 'TedPlayerController_IsSpectator::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.IsWinner
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_IsWinner final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_IsWinner) == 0x000001, "Wrong alignment on TedPlayerController_IsWinner");
static_assert(sizeof(TedPlayerController_IsWinner) == 0x000001, "Wrong size on TedPlayerController_IsWinner");
static_assert(offsetof(TedPlayerController_IsWinner, ReturnValue) == 0x000000, "Member 'TedPlayerController_IsWinner::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugKillEnemyPawns
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerController_ServerDebugKillEnemyPawns final
{
public:
	int32                                         InOpt;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugKillEnemyPawns) == 0x000004, "Wrong alignment on TedPlayerController_ServerDebugKillEnemyPawns");
static_assert(sizeof(TedPlayerController_ServerDebugKillEnemyPawns) == 0x000004, "Wrong size on TedPlayerController_ServerDebugKillEnemyPawns");
static_assert(offsetof(TedPlayerController_ServerDebugKillEnemyPawns, InOpt) == 0x000000, "Member 'TedPlayerController_ServerDebugKillEnemyPawns::InOpt' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugKillEnemyStructures
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerController_ServerDebugKillEnemyStructures final
{
public:
	int32                                         InOpt;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugKillEnemyStructures) == 0x000004, "Wrong alignment on TedPlayerController_ServerDebugKillEnemyStructures");
static_assert(sizeof(TedPlayerController_ServerDebugKillEnemyStructures) == 0x000004, "Wrong size on TedPlayerController_ServerDebugKillEnemyStructures");
static_assert(offsetof(TedPlayerController_ServerDebugKillEnemyStructures, InOpt) == 0x000000, "Member 'TedPlayerController_ServerDebugKillEnemyStructures::InOpt' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugKillEnemyUnits
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerController_ServerDebugKillEnemyUnits final
{
public:
	int32                                         InOpt;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugKillEnemyUnits) == 0x000004, "Wrong alignment on TedPlayerController_ServerDebugKillEnemyUnits");
static_assert(sizeof(TedPlayerController_ServerDebugKillEnemyUnits) == 0x000004, "Wrong size on TedPlayerController_ServerDebugKillEnemyUnits");
static_assert(offsetof(TedPlayerController_ServerDebugKillEnemyUnits, InOpt) == 0x000000, "Member 'TedPlayerController_ServerDebugKillEnemyUnits::InOpt' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugKillOwnedPawns
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerController_ServerDebugKillOwnedPawns final
{
public:
	int32                                         InOpt;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugKillOwnedPawns) == 0x000004, "Wrong alignment on TedPlayerController_ServerDebugKillOwnedPawns");
static_assert(sizeof(TedPlayerController_ServerDebugKillOwnedPawns) == 0x000004, "Wrong size on TedPlayerController_ServerDebugKillOwnedPawns");
static_assert(offsetof(TedPlayerController_ServerDebugKillOwnedPawns, InOpt) == 0x000000, "Member 'TedPlayerController_ServerDebugKillOwnedPawns::InOpt' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugPrintPlayerStates
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_ServerDebugPrintPlayerStates final
{
public:
	class FString                                 FuncName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOnlyPlayers;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOnlyArrays;                                      // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugPrintPlayerStates) == 0x000008, "Wrong alignment on TedPlayerController_ServerDebugPrintPlayerStates");
static_assert(sizeof(TedPlayerController_ServerDebugPrintPlayerStates) == 0x000018, "Wrong size on TedPlayerController_ServerDebugPrintPlayerStates");
static_assert(offsetof(TedPlayerController_ServerDebugPrintPlayerStates, FuncName) == 0x000000, "Member 'TedPlayerController_ServerDebugPrintPlayerStates::FuncName' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugPrintPlayerStates, InOnlyPlayers) == 0x000010, "Member 'TedPlayerController_ServerDebugPrintPlayerStates::InOnlyPlayers' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugPrintPlayerStates, InOnlyArrays) == 0x000014, "Member 'TedPlayerController_ServerDebugPrintPlayerStates::InOnlyArrays' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugSetCVarTimers
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerController_ServerDebugSetCVarTimers final
{
public:
	struct FTedReconnectTimers                    InCVarTimers;                                      // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugSetCVarTimers) == 0x000004, "Wrong alignment on TedPlayerController_ServerDebugSetCVarTimers");
static_assert(sizeof(TedPlayerController_ServerDebugSetCVarTimers) == 0x000020, "Wrong size on TedPlayerController_ServerDebugSetCVarTimers");
static_assert(offsetof(TedPlayerController_ServerDebugSetCVarTimers, InCVarTimers) == 0x000000, "Member 'TedPlayerController_ServerDebugSetCVarTimers::InCVarTimers' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDebugSetNetSim
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerController_ServerDebugSetNetSim final
{
public:
	TArray<class FString>                         InArgs;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDebugSetNetSim) == 0x000008, "Wrong alignment on TedPlayerController_ServerDebugSetNetSim");
static_assert(sizeof(TedPlayerController_ServerDebugSetNetSim) == 0x000018, "Wrong size on TedPlayerController_ServerDebugSetNetSim");
static_assert(offsetof(TedPlayerController_ServerDebugSetNetSim, InArgs) == 0x000000, "Member 'TedPlayerController_ServerDebugSetNetSim::InArgs' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerDebugSetNetSim, InWorld) == 0x000010, "Member 'TedPlayerController_ServerDebugSetNetSim::InWorld' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerDestroyDeliDiscPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ServerDestroyDeliDiscPlayer final
{
public:
	const class ATedPlayerController*             InTedPC;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerDestroyDeliDiscPlayer) == 0x000008, "Wrong alignment on TedPlayerController_ServerDestroyDeliDiscPlayer");
static_assert(sizeof(TedPlayerController_ServerDestroyDeliDiscPlayer) == 0x000008, "Wrong size on TedPlayerController_ServerDestroyDeliDiscPlayer");
static_assert(offsetof(TedPlayerController_ServerDestroyDeliDiscPlayer, InTedPC) == 0x000000, "Member 'TedPlayerController_ServerDestroyDeliDiscPlayer::InTedPC' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerSyncPlayerStateNetGUIDs
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ServerSyncPlayerStateNetGUIDs final
{
public:
	const class ATedPlayerController*             InTedPC;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerSyncPlayerStateNetGUIDs) == 0x000008, "Wrong alignment on TedPlayerController_ServerSyncPlayerStateNetGUIDs");
static_assert(sizeof(TedPlayerController_ServerSyncPlayerStateNetGUIDs) == 0x000008, "Wrong size on TedPlayerController_ServerSyncPlayerStateNetGUIDs");
static_assert(offsetof(TedPlayerController_ServerSyncPlayerStateNetGUIDs, InTedPC) == 0x000000, "Member 'TedPlayerController_ServerSyncPlayerStateNetGUIDs::InTedPC' has a wrong offset!");

// Function Tempest.TedPlayerController.ServerSyncStateValidate
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_ServerSyncStateValidate final
{
public:
	ETedReconnectState                            InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSyncTime;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_ServerSyncStateValidate) == 0x000004, "Wrong alignment on TedPlayerController_ServerSyncStateValidate");
static_assert(sizeof(TedPlayerController_ServerSyncStateValidate) == 0x000008, "Wrong size on TedPlayerController_ServerSyncStateValidate");
static_assert(offsetof(TedPlayerController_ServerSyncStateValidate, InState) == 0x000000, "Member 'TedPlayerController_ServerSyncStateValidate::InState' has a wrong offset!");
static_assert(offsetof(TedPlayerController_ServerSyncStateValidate, InSyncTime) == 0x000004, "Member 'TedPlayerController_ServerSyncStateValidate::InSyncTime' has a wrong offset!");

// Function Tempest.TedPlayerController.SetReconnectState
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_SetReconnectState final
{
public:
	ETedReconnectState                            InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_SetReconnectState) == 0x000001, "Wrong alignment on TedPlayerController_SetReconnectState");
static_assert(sizeof(TedPlayerController_SetReconnectState) == 0x000001, "Wrong size on TedPlayerController_SetReconnectState");
static_assert(offsetof(TedPlayerController_SetReconnectState, InState) == 0x000000, "Member 'TedPlayerController_SetReconnectState::InState' has a wrong offset!");

// Function Tempest.TedPlayerController.SyncPlayerStateNetGUIDs
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerController_SyncPlayerStateNetGUIDs final
{
public:
	TArray<uint64>                                InPlayerStateNetGUIDs;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_SyncPlayerStateNetGUIDs) == 0x000008, "Wrong alignment on TedPlayerController_SyncPlayerStateNetGUIDs");
static_assert(sizeof(TedPlayerController_SyncPlayerStateNetGUIDs) == 0x000010, "Wrong size on TedPlayerController_SyncPlayerStateNetGUIDs");
static_assert(offsetof(TedPlayerController_SyncPlayerStateNetGUIDs, InPlayerStateNetGUIDs) == 0x000000, "Member 'TedPlayerController_SyncPlayerStateNetGUIDs::InPlayerStateNetGUIDs' has a wrong offset!");

// Function Tempest.TedPlayerController.SyncStateExecute
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_SyncStateExecute final
{
public:
	ETedReconnectState                            InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InSyncTime;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_SyncStateExecute) == 0x000004, "Wrong alignment on TedPlayerController_SyncStateExecute");
static_assert(sizeof(TedPlayerController_SyncStateExecute) == 0x000008, "Wrong size on TedPlayerController_SyncStateExecute");
static_assert(offsetof(TedPlayerController_SyncStateExecute, InState) == 0x000000, "Member 'TedPlayerController_SyncStateExecute::InState' has a wrong offset!");
static_assert(offsetof(TedPlayerController_SyncStateExecute, InSyncTime) == 0x000004, "Member 'TedPlayerController_SyncStateExecute::InSyncTime' has a wrong offset!");

// Function Tempest.TedPlayerController.UpdateSpectatorInviteInRichPresence
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerController_UpdateSpectatorInviteInRichPresence final
{
public:
	int32                                         InSpectatorsNum;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSpectatorsMax;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_UpdateSpectatorInviteInRichPresence) == 0x000004, "Wrong alignment on TedPlayerController_UpdateSpectatorInviteInRichPresence");
static_assert(sizeof(TedPlayerController_UpdateSpectatorInviteInRichPresence) == 0x000008, "Wrong size on TedPlayerController_UpdateSpectatorInviteInRichPresence");
static_assert(offsetof(TedPlayerController_UpdateSpectatorInviteInRichPresence, InSpectatorsNum) == 0x000000, "Member 'TedPlayerController_UpdateSpectatorInviteInRichPresence::InSpectatorsNum' has a wrong offset!");
static_assert(offsetof(TedPlayerController_UpdateSpectatorInviteInRichPresence, InSpectatorsMax) == 0x000004, "Member 'TedPlayerController_UpdateSpectatorInviteInRichPresence::InSpectatorsMax' has a wrong offset!");

// Function Tempest.TedBotPlayerController.GetBotPC
// 0x0018 (0x0018 - 0x0000)
struct TedBotPlayerController_GetBotPC final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedBotPlayerController*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBotPlayerController_GetBotPC) == 0x000008, "Wrong alignment on TedBotPlayerController_GetBotPC");
static_assert(sizeof(TedBotPlayerController_GetBotPC) == 0x000018, "Wrong size on TedBotPlayerController_GetBotPC");
static_assert(offsetof(TedBotPlayerController_GetBotPC, WorldContextObject) == 0x000000, "Member 'TedBotPlayerController_GetBotPC::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_GetBotPC, PlayerID) == 0x000008, "Member 'TedBotPlayerController_GetBotPC::PlayerID' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_GetBotPC, ReturnValue) == 0x000010, "Member 'TedBotPlayerController_GetBotPC::ReturnValue' has a wrong offset!");

// Function Tempest.TedBotPlayerController.TEMP_IssueAICommand
// 0x0038 (0x0038 - 0x0000)
struct TedBotPlayerController_TEMP_IssueAICommand final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           Unit;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedAICommandType                             CommadType;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBotPlayerController_TEMP_IssueAICommand) == 0x000008, "Wrong alignment on TedBotPlayerController_TEMP_IssueAICommand");
static_assert(sizeof(TedBotPlayerController_TEMP_IssueAICommand) == 0x000038, "Wrong size on TedBotPlayerController_TEMP_IssueAICommand");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommand, WorldContextObject) == 0x000000, "Member 'TedBotPlayerController_TEMP_IssueAICommand::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommand, Unit) == 0x000008, "Member 'TedBotPlayerController_TEMP_IssueAICommand::Unit' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommand, CommadType) == 0x000010, "Member 'TedBotPlayerController_TEMP_IssueAICommand::CommadType' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommand, Target) == 0x000018, "Member 'TedBotPlayerController_TEMP_IssueAICommand::Target' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommand, TargetLocation) == 0x000020, "Member 'TedBotPlayerController_TEMP_IssueAICommand::TargetLocation' has a wrong offset!");

// Function Tempest.TedBotPlayerController.TEMP_IssueAICommandByClass
// 0x0038 (0x0038 - 0x0000)
struct TedBotPlayerController_TEMP_IssueAICommandByClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           Unit;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBotPlayerController_TEMP_IssueAICommandByClass) == 0x000008, "Wrong alignment on TedBotPlayerController_TEMP_IssueAICommandByClass");
static_assert(sizeof(TedBotPlayerController_TEMP_IssueAICommandByClass) == 0x000038, "Wrong size on TedBotPlayerController_TEMP_IssueAICommandByClass");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommandByClass, WorldContextObject) == 0x000000, "Member 'TedBotPlayerController_TEMP_IssueAICommandByClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommandByClass, Unit) == 0x000008, "Member 'TedBotPlayerController_TEMP_IssueAICommandByClass::Unit' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommandByClass, Class_0) == 0x000010, "Member 'TedBotPlayerController_TEMP_IssueAICommandByClass::Class_0' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommandByClass, Target) == 0x000018, "Member 'TedBotPlayerController_TEMP_IssueAICommandByClass::Target' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueAICommandByClass, TargetLocation) == 0x000020, "Member 'TedBotPlayerController_TEMP_IssueAICommandByClass::TargetLocation' has a wrong offset!");

// Function Tempest.TedBotPlayerController.TEMP_IssueBatchAICommand
// 0x0040 (0x0040 - 0x0000)
struct TedBotPlayerController_TEMP_IssueBatchAICommand final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	ETedAICommandType                             CommadType;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBotPlayerController_TEMP_IssueBatchAICommand) == 0x000008, "Wrong alignment on TedBotPlayerController_TEMP_IssueBatchAICommand");
static_assert(sizeof(TedBotPlayerController_TEMP_IssueBatchAICommand) == 0x000040, "Wrong size on TedBotPlayerController_TEMP_IssueBatchAICommand");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommand, WorldContextObject) == 0x000000, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommand::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommand, Units) == 0x000008, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommand::Units' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommand, CommadType) == 0x000018, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommand::CommadType' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommand, Target) == 0x000020, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommand::Target' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommand, TargetLocation) == 0x000028, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommand::TargetLocation' has a wrong offset!");

// Function Tempest.TedBotPlayerController.TEMP_IssueBatchAICommandByClass
// 0x0040 (0x0040 - 0x0000)
struct TedBotPlayerController_TEMP_IssueBatchAICommandByClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                Class_0;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass) == 0x000008, "Wrong alignment on TedBotPlayerController_TEMP_IssueBatchAICommandByClass");
static_assert(sizeof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass) == 0x000040, "Wrong size on TedBotPlayerController_TEMP_IssueBatchAICommandByClass");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass, WorldContextObject) == 0x000000, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommandByClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass, Units) == 0x000008, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommandByClass::Units' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass, Class_0) == 0x000018, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommandByClass::Class_0' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass, Target) == 0x000020, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommandByClass::Target' has a wrong offset!");
static_assert(offsetof(TedBotPlayerController_TEMP_IssueBatchAICommandByClass, TargetLocation) == 0x000028, "Member 'TedBotPlayerController_TEMP_IssueBatchAICommandByClass::TargetLocation' has a wrong offset!");

// Function Tempest.ResourcesTooltipWidget.OnReplicatePlayerState_Handler
// 0x0008 (0x0008 - 0x0000)
struct ResourcesTooltipWidget_OnReplicatePlayerState_Handler final
{
public:
	class ATedPlayerController*                   InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ResourcesTooltipWidget_OnReplicatePlayerState_Handler) == 0x000008, "Wrong alignment on ResourcesTooltipWidget_OnReplicatePlayerState_Handler");
static_assert(sizeof(ResourcesTooltipWidget_OnReplicatePlayerState_Handler) == 0x000008, "Wrong size on ResourcesTooltipWidget_OnReplicatePlayerState_Handler");
static_assert(offsetof(ResourcesTooltipWidget_OnReplicatePlayerState_Handler, InPlayerController) == 0x000000, "Member 'ResourcesTooltipWidget_OnReplicatePlayerState_Handler::InPlayerController' has a wrong offset!");

// Function Tempest.SkirmishAICommander.OnPawnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SkirmishAICommander_OnPawnDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkirmishAICommander_OnPawnDestroyed) == 0x000008, "Wrong alignment on SkirmishAICommander_OnPawnDestroyed");
static_assert(sizeof(SkirmishAICommander_OnPawnDestroyed) == 0x000008, "Wrong size on SkirmishAICommander_OnPawnDestroyed");
static_assert(offsetof(SkirmishAICommander_OnPawnDestroyed, InActor) == 0x000000, "Member 'SkirmishAICommander_OnPawnDestroyed::InActor' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.OnRefreshPrerequisites
// 0x0020 (0x0020 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites final
{
public:
	TArray<class FText>                           InNotOwnedPrerequisites;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           InOwnedPrerequisites;                              // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites) == 0x000020, "Wrong size on TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites, InNotOwnedPrerequisites) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites::InNotOwnedPrerequisites' has a wrong offset!");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites, InOwnedPrerequisites) == 0x000010, "Member 'TedBuildingGridSlotTooltipDisplay_OnRefreshPrerequisites::InOwnedPrerequisites' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_AdditionalCredits
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_AdditionalTime
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_AdditionalTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_Credits
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_Credits final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_Credits) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_Credits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_Credits) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_Credits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_Credits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_Intel
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_Intel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_Intel) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_Intel");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_Intel) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_Intel");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_Intel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_Population
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_Population final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_Population) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_Population");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_Population) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_Population");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_Population, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_Population::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_Power
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_Power final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_Power) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_Power");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_Power) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_Power");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_Power, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_Power::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostText_Time
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostText_Time final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostText_Time) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostText_Time");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostText_Time) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostText_Time");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostText_Time, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostText_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostValue_AdditionalCredits
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostValue_AdditionalTime
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostValue_AdditionalTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostValue_Credits
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostValue_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostValue_Intel
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostValue_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostValue_Time
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostValue_Time final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Time) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostValue_Time");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Time) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostValue_Time");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostValue_Time, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostValue_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_AdditionalCredits
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_AdditionalTime
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_AdditionalTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Commando
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Commando::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Credits
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Intel
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Population
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Population::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Power
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Power::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Specialist
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Specialist::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetCostVisibility_Time
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetCostVisibility_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetDescription) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetDescription");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetDescription) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetDescription");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetDescription, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetDisplayName) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetDisplayName");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetDisplayName) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetDisplayName");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIcon) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIcon");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIcon) == 0x000008, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIcon");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIcon, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_CommandoLimitReached
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_CommandoLimitReached::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_MissingTech
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_MissingTech::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_NoConstruction
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoConstruction::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_NoPower
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_NoPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_PopulationFull
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_PopulationFull::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueValue_SpecialistLimitReached
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueValue_SpecialistLimitReached::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_CommandoLimitReached
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_CommandoLimitReached::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_MissingIntel
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingIntel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_MissingTech
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_MissingTech::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_NoConstruction
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoConstruction::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_NoPower
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_NoPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_PopulationFull
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_PopulationFull::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetIssueVisibility_SpecialistLimitReached
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetIssueVisibility_SpecialistLimitReached::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetMissingAirPadsIssueVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetMissingAirPadsIssueVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetPopulationCost
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetPopulationCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetPopulationCost) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetPopulationCost");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetPopulationCost) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetPopulationCost");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetPopulationCost, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetPopulationCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetPowerCost
// 0x0004 (0x0004 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetPowerCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetPowerCost) == 0x000004, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetPowerCost");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetPowerCost) == 0x000004, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetPowerCost");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetPowerCost, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetPowerCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.GetShortcutText
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_GetShortcutText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_GetShortcutText) == 0x000008, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_GetShortcutText");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_GetShortcutText) == 0x000010, "Wrong size on TedBuildingGridSlotTooltipDisplay_GetShortcutText");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_GetShortcutText, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_GetShortcutText::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotTooltipDisplay.HasPlayerInsufficientIntel
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel) == 0x000001, "Wrong alignment on TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel");
static_assert(sizeof(TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel) == 0x000001, "Wrong size on TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel");
static_assert(offsetof(TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotTooltipDisplay_HasPlayerInsufficientIntel::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAction.ClearSourceValue
// 0x0080 (0x0080 - 0x0000)
struct TedSettingsSlot_InputAction_ClearSourceValue final
{
public:
	struct FPlayerKeyMapping                      InValue;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAction_ClearSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAction_ClearSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAction_ClearSourceValue) == 0x000080, "Wrong size on TedSettingsSlot_InputAction_ClearSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAction_ClearSourceValue, InValue) == 0x000000, "Member 'TedSettingsSlot_InputAction_ClearSourceValue::InValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAction.OnTriggerMappingSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsSlot_InputAction_OnTriggerMappingSlotAction final
{
public:
	class UTedContentPanelBase*                   InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InSlot;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsSlot_InputAction_OnTriggerMappingSlotAction) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAction_OnTriggerMappingSlotAction");
static_assert(sizeof(TedSettingsSlot_InputAction_OnTriggerMappingSlotAction) == 0x000018, "Wrong size on TedSettingsSlot_InputAction_OnTriggerMappingSlotAction");
static_assert(offsetof(TedSettingsSlot_InputAction_OnTriggerMappingSlotAction, InPanel) == 0x000000, "Member 'TedSettingsSlot_InputAction_OnTriggerMappingSlotAction::InPanel' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAction_OnTriggerMappingSlotAction, InSlot) == 0x000008, "Member 'TedSettingsSlot_InputAction_OnTriggerMappingSlotAction::InSlot' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAction_OnTriggerMappingSlotAction, InAction) == 0x000010, "Member 'TedSettingsSlot_InputAction_OnTriggerMappingSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAction.SetSourceValue
// 0x0080 (0x0080 - 0x0000)
struct TedSettingsSlot_InputAction_SetSourceValue final
{
public:
	struct FPlayerKeyMapping                      InValue;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAction_SetSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAction_SetSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAction_SetSourceValue) == 0x000080, "Wrong size on TedSettingsSlot_InputAction_SetSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAction_SetSourceValue, InValue) == 0x000000, "Member 'TedSettingsSlot_InputAction_SetSourceValue::InValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAction.GetSourceValue
// 0x0088 (0x0088 - 0x0000)
struct TedSettingsSlot_InputAction_GetSourceValue final
{
public:
	int32                                         InMappingIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerKeyMapping                      ReturnValue;                                       // 0x0008(0x0080)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAction_GetSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAction_GetSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAction_GetSourceValue) == 0x000088, "Wrong size on TedSettingsSlot_InputAction_GetSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAction_GetSourceValue, InMappingIndex) == 0x000000, "Member 'TedSettingsSlot_InputAction_GetSourceValue::InMappingIndex' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAction_GetSourceValue, ReturnValue) == 0x000008, "Member 'TedSettingsSlot_InputAction_GetSourceValue::ReturnValue' has a wrong offset!");

// Function Tempest.SoftActorPtrFunctions.GetActor
// 0x0030 (0x0030 - 0x0000)
struct SoftActorPtrFunctions_GetActor final
{
public:
	struct FSoftActorPtr                          Actor;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoftActorPtrFunctions_GetActor) == 0x000008, "Wrong alignment on SoftActorPtrFunctions_GetActor");
static_assert(sizeof(SoftActorPtrFunctions_GetActor) == 0x000030, "Wrong size on SoftActorPtrFunctions_GetActor");
static_assert(offsetof(SoftActorPtrFunctions_GetActor, Actor) == 0x000000, "Member 'SoftActorPtrFunctions_GetActor::Actor' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_GetActor, ReturnValue) == 0x000028, "Member 'SoftActorPtrFunctions_GetActor::ReturnValue' has a wrong offset!");

// Function Tempest.SoftActorPtrFunctions.GetActorOfClass
// 0x0038 (0x0038 - 0x0000)
struct SoftActorPtrFunctions_GetActorOfClass final
{
public:
	struct FSoftActorPtr                          Actor;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Out;                                               // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoftActorPtrFunctions_GetActorOfClass) == 0x000008, "Wrong alignment on SoftActorPtrFunctions_GetActorOfClass");
static_assert(sizeof(SoftActorPtrFunctions_GetActorOfClass) == 0x000038, "Wrong size on SoftActorPtrFunctions_GetActorOfClass");
static_assert(offsetof(SoftActorPtrFunctions_GetActorOfClass, Actor) == 0x000000, "Member 'SoftActorPtrFunctions_GetActorOfClass::Actor' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_GetActorOfClass, Class_0) == 0x000028, "Member 'SoftActorPtrFunctions_GetActorOfClass::Class_0' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_GetActorOfClass, Out) == 0x000030, "Member 'SoftActorPtrFunctions_GetActorOfClass::Out' has a wrong offset!");

// Function Tempest.SoftActorPtrFunctions.IsEmpty
// 0x0030 (0x0030 - 0x0000)
struct SoftActorPtrFunctions_IsEmpty final
{
public:
	struct FSoftActorPtr                          Actor;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoftActorPtrFunctions_IsEmpty) == 0x000008, "Wrong alignment on SoftActorPtrFunctions_IsEmpty");
static_assert(sizeof(SoftActorPtrFunctions_IsEmpty) == 0x000030, "Wrong size on SoftActorPtrFunctions_IsEmpty");
static_assert(offsetof(SoftActorPtrFunctions_IsEmpty, Actor) == 0x000000, "Member 'SoftActorPtrFunctions_IsEmpty::Actor' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_IsEmpty, ReturnValue) == 0x000028, "Member 'SoftActorPtrFunctions_IsEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.SoftActorPtrFunctions.MakeLiteralSoftActorPtr
// 0x0050 (0x0050 - 0x0000)
struct SoftActorPtrFunctions_MakeLiteralSoftActorPtr final
{
public:
	struct FSoftActorPtr                          Actor;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftActorPtr                          Out;                                               // 0x0028(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoftActorPtrFunctions_MakeLiteralSoftActorPtr) == 0x000008, "Wrong alignment on SoftActorPtrFunctions_MakeLiteralSoftActorPtr");
static_assert(sizeof(SoftActorPtrFunctions_MakeLiteralSoftActorPtr) == 0x000050, "Wrong size on SoftActorPtrFunctions_MakeLiteralSoftActorPtr");
static_assert(offsetof(SoftActorPtrFunctions_MakeLiteralSoftActorPtr, Actor) == 0x000000, "Member 'SoftActorPtrFunctions_MakeLiteralSoftActorPtr::Actor' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_MakeLiteralSoftActorPtr, Out) == 0x000028, "Member 'SoftActorPtrFunctions_MakeLiteralSoftActorPtr::Out' has a wrong offset!");

// Function Tempest.SoftActorPtrFunctions.ToString
// 0x0038 (0x0038 - 0x0000)
struct SoftActorPtrFunctions_ToString final
{
public:
	struct FSoftActorPtr                          Actor;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoftActorPtrFunctions_ToString) == 0x000008, "Wrong alignment on SoftActorPtrFunctions_ToString");
static_assert(sizeof(SoftActorPtrFunctions_ToString) == 0x000038, "Wrong size on SoftActorPtrFunctions_ToString");
static_assert(offsetof(SoftActorPtrFunctions_ToString, Actor) == 0x000000, "Member 'SoftActorPtrFunctions_ToString::Actor' has a wrong offset!");
static_assert(offsetof(SoftActorPtrFunctions_ToString, ReturnValue) == 0x000028, "Member 'SoftActorPtrFunctions_ToString::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridFactoryTypesPanel.ActivateSlotByFactoryType
// 0x000C (0x000C - 0x0000)
struct TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType final
{
public:
	struct FGameplayTag                           InFactoryType;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType) == 0x000004, "Wrong alignment on TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType");
static_assert(sizeof(TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType) == 0x00000C, "Wrong size on TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType, InFactoryType) == 0x000000, "Member 'TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType::InFactoryType' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType, InState) == 0x000008, "Member 'TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType::InState' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType, bInActivate) == 0x000009, "Member 'TedBuildingGridFactoryTypesPanel_ActivateSlotByFactoryType::bInActivate' has a wrong offset!");

// Function Tempest.TedBuildingGridFactoryTypesPanel.GetContent
// 0x0048 (0x0048 - 0x0000)
struct TedBuildingGridFactoryTypesPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedBuildingGridFactoryTypesPanelContent OutContent;                                      // 0x0008(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridFactoryTypesPanel_GetContent) == 0x000008, "Wrong alignment on TedBuildingGridFactoryTypesPanel_GetContent");
static_assert(sizeof(TedBuildingGridFactoryTypesPanel_GetContent) == 0x000048, "Wrong size on TedBuildingGridFactoryTypesPanel_GetContent");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedBuildingGridFactoryTypesPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetContent, OutContent) == 0x000008, "Member 'TedBuildingGridFactoryTypesPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetContent, ReturnValue) == 0x000040, "Member 'TedBuildingGridFactoryTypesPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridFactoryTypesPanel.GetFactoryTypeIndex
// 0x000C (0x000C - 0x0000)
struct TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex final
{
public:
	struct FGameplayTag                           InFactoryType;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex) == 0x000004, "Wrong alignment on TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex");
static_assert(sizeof(TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex) == 0x00000C, "Wrong size on TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex, InFactoryType) == 0x000000, "Member 'TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex::InFactoryType' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex, ReturnValue) == 0x000008, "Member 'TedBuildingGridFactoryTypesPanel_GetFactoryTypeIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridFactoryTypesPanel.GetSelectedContent
// 0x0040 (0x0040 - 0x0000)
struct TedBuildingGridFactoryTypesPanel_GetSelectedContent final
{
public:
	struct FTedBuildingGridFactoryTypesPanelContent OutContent;                                      // 0x0000(0x0038)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridFactoryTypesPanel_GetSelectedContent) == 0x000008, "Wrong alignment on TedBuildingGridFactoryTypesPanel_GetSelectedContent");
static_assert(sizeof(TedBuildingGridFactoryTypesPanel_GetSelectedContent) == 0x000040, "Wrong size on TedBuildingGridFactoryTypesPanel_GetSelectedContent");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetSelectedContent, OutContent) == 0x000000, "Member 'TedBuildingGridFactoryTypesPanel_GetSelectedContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetSelectedContent, ReturnValue) == 0x000038, "Member 'TedBuildingGridFactoryTypesPanel_GetSelectedContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridFactoryTypesPanel.GetTargetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridFactoryTypesPanel_GetTargetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridFactoryTypesPanel_GetTargetPlayerData) == 0x000008, "Wrong alignment on TedBuildingGridFactoryTypesPanel_GetTargetPlayerData");
static_assert(sizeof(TedBuildingGridFactoryTypesPanel_GetTargetPlayerData) == 0x000008, "Wrong size on TedBuildingGridFactoryTypesPanel_GetTargetPlayerData");
static_assert(offsetof(TedBuildingGridFactoryTypesPanel_GetTargetPlayerData, ReturnValue) == 0x000000, "Member 'TedBuildingGridFactoryTypesPanel_GetTargetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.ApplyCommandCost
// 0x0001 (0x0001 - 0x0000)
struct TedAbilityBase_ApplyCommandCost final
{
public:
	bool                                          bApply;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_ApplyCommandCost) == 0x000001, "Wrong alignment on TedAbilityBase_ApplyCommandCost");
static_assert(sizeof(TedAbilityBase_ApplyCommandCost) == 0x000001, "Wrong size on TedAbilityBase_ApplyCommandCost");
static_assert(offsetof(TedAbilityBase_ApplyCommandCost, bApply) == 0x000000, "Member 'TedAbilityBase_ApplyCommandCost::bApply' has a wrong offset!");

// Function Tempest.TedAbilityBase.FinishCommand
// 0x0001 (0x0001 - 0x0000)
struct TedAbilityBase_FinishCommand final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_FinishCommand) == 0x000001, "Wrong alignment on TedAbilityBase_FinishCommand");
static_assert(sizeof(TedAbilityBase_FinishCommand) == 0x000001, "Wrong size on TedAbilityBase_FinishCommand");
static_assert(offsetof(TedAbilityBase_FinishCommand, bSuccess) == 0x000000, "Member 'TedAbilityBase_FinishCommand::bSuccess' has a wrong offset!");

// Function Tempest.TedAbilityBase.MontagePlay
// 0x0018 (0x0018 - 0x0000)
struct TedAbilityBase_MontagePlay final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSectionName;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_MontagePlay) == 0x000008, "Wrong alignment on TedAbilityBase_MontagePlay");
static_assert(sizeof(TedAbilityBase_MontagePlay) == 0x000018, "Wrong size on TedAbilityBase_MontagePlay");
static_assert(offsetof(TedAbilityBase_MontagePlay, AnimMontage) == 0x000000, "Member 'TedAbilityBase_MontagePlay::AnimMontage' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_MontagePlay, PlayRate) == 0x000008, "Member 'TedAbilityBase_MontagePlay::PlayRate' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_MontagePlay, StartSectionName) == 0x00000C, "Member 'TedAbilityBase_MontagePlay::StartSectionName' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_MontagePlay, ReturnValue) == 0x000014, "Member 'TedAbilityBase_MontagePlay::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetPawnsInRange
// 0x0108 (0x0108 - 0x0000)
struct TedAbilityBase_GetPawnsInRange final
{
public:
	const class AActor*                           AvatarActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUtilsPawnFilter                    Filter;                                            // 0x0010(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       OutPawns;                                          // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x00F0(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetPawnsInRange) == 0x000008, "Wrong alignment on TedAbilityBase_GetPawnsInRange");
static_assert(sizeof(TedAbilityBase_GetPawnsInRange) == 0x000108, "Wrong size on TedAbilityBase_GetPawnsInRange");
static_assert(offsetof(TedAbilityBase_GetPawnsInRange, AvatarActor) == 0x000000, "Member 'TedAbilityBase_GetPawnsInRange::AvatarActor' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_GetPawnsInRange, Range) == 0x000008, "Member 'TedAbilityBase_GetPawnsInRange::Range' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_GetPawnsInRange, Filter) == 0x000010, "Member 'TedAbilityBase_GetPawnsInRange::Filter' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_GetPawnsInRange, OutPawns) == 0x0000E0, "Member 'TedAbilityBase_GetPawnsInRange::OutPawns' has a wrong offset!");
static_assert(offsetof(TedAbilityBase_GetPawnsInRange, Location) == 0x0000F0, "Member 'TedAbilityBase_GetPawnsInRange::Location' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetTedAbilityComponentFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct TedAbilityBase_GetTedAbilityComponentFromActorInfo final
{
public:
	class UTedAbilityComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetTedAbilityComponentFromActorInfo) == 0x000008, "Wrong alignment on TedAbilityBase_GetTedAbilityComponentFromActorInfo");
static_assert(sizeof(TedAbilityBase_GetTedAbilityComponentFromActorInfo) == 0x000008, "Wrong size on TedAbilityBase_GetTedAbilityComponentFromActorInfo");
static_assert(offsetof(TedAbilityBase_GetTedAbilityComponentFromActorInfo, ReturnValue) == 0x000000, "Member 'TedAbilityBase_GetTedAbilityComponentFromActorInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetTedAIControllerFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct TedAbilityBase_GetTedAIControllerFromActorInfo final
{
public:
	class ATedAIController*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetTedAIControllerFromActorInfo) == 0x000008, "Wrong alignment on TedAbilityBase_GetTedAIControllerFromActorInfo");
static_assert(sizeof(TedAbilityBase_GetTedAIControllerFromActorInfo) == 0x000008, "Wrong size on TedAbilityBase_GetTedAIControllerFromActorInfo");
static_assert(offsetof(TedAbilityBase_GetTedAIControllerFromActorInfo, ReturnValue) == 0x000000, "Member 'TedAbilityBase_GetTedAIControllerFromActorInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetTedPawnFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct TedAbilityBase_GetTedPawnFromActorInfo final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetTedPawnFromActorInfo) == 0x000008, "Wrong alignment on TedAbilityBase_GetTedPawnFromActorInfo");
static_assert(sizeof(TedAbilityBase_GetTedPawnFromActorInfo) == 0x000008, "Wrong size on TedAbilityBase_GetTedPawnFromActorInfo");
static_assert(offsetof(TedAbilityBase_GetTedPawnFromActorInfo, ReturnValue) == 0x000000, "Member 'TedAbilityBase_GetTedPawnFromActorInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetTedStructureFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct TedAbilityBase_GetTedStructureFromActorInfo final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetTedStructureFromActorInfo) == 0x000008, "Wrong alignment on TedAbilityBase_GetTedStructureFromActorInfo");
static_assert(sizeof(TedAbilityBase_GetTedStructureFromActorInfo) == 0x000008, "Wrong size on TedAbilityBase_GetTedStructureFromActorInfo");
static_assert(offsetof(TedAbilityBase_GetTedStructureFromActorInfo, ReturnValue) == 0x000000, "Member 'TedAbilityBase_GetTedStructureFromActorInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.GetTedUnitFromActorInfo
// 0x0008 (0x0008 - 0x0000)
struct TedAbilityBase_GetTedUnitFromActorInfo final
{
public:
	class ATedUnitBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_GetTedUnitFromActorInfo) == 0x000008, "Wrong alignment on TedAbilityBase_GetTedUnitFromActorInfo");
static_assert(sizeof(TedAbilityBase_GetTedUnitFromActorInfo) == 0x000008, "Wrong size on TedAbilityBase_GetTedUnitFromActorInfo");
static_assert(offsetof(TedAbilityBase_GetTedUnitFromActorInfo, ReturnValue) == 0x000000, "Member 'TedAbilityBase_GetTedUnitFromActorInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityBase.K2_IsActive
// 0x0001 (0x0001 - 0x0000)
struct TedAbilityBase_K2_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityBase_K2_IsActive) == 0x000001, "Wrong alignment on TedAbilityBase_K2_IsActive");
static_assert(sizeof(TedAbilityBase_K2_IsActive) == 0x000001, "Wrong size on TedAbilityBase_K2_IsActive");
static_assert(offsetof(TedAbilityBase_K2_IsActive, ReturnValue) == 0x000000, "Member 'TedAbilityBase_K2_IsActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityComponent.AddGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct TedAbilityComponent_AddGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityComponent_AddGameplayCueLocal) == 0x000008, "Wrong alignment on TedAbilityComponent_AddGameplayCueLocal");
static_assert(sizeof(TedAbilityComponent_AddGameplayCueLocal) == 0x0000E0, "Wrong size on TedAbilityComponent_AddGameplayCueLocal");
static_assert(offsetof(TedAbilityComponent_AddGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'TedAbilityComponent_AddGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_AddGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'TedAbilityComponent_AddGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function Tempest.TedAbilityComponent.ExecuteDamageGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct TedAbilityComponent_ExecuteDamageGameplayCueLocal final
{
public:
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityComponent_ExecuteDamageGameplayCueLocal) == 0x000008, "Wrong alignment on TedAbilityComponent_ExecuteDamageGameplayCueLocal");
static_assert(sizeof(TedAbilityComponent_ExecuteDamageGameplayCueLocal) == 0x0000E0, "Wrong size on TedAbilityComponent_ExecuteDamageGameplayCueLocal");
static_assert(offsetof(TedAbilityComponent_ExecuteDamageGameplayCueLocal, DamageTypeClass) == 0x000000, "Member 'TedAbilityComponent_ExecuteDamageGameplayCueLocal::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_ExecuteDamageGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'TedAbilityComponent_ExecuteDamageGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function Tempest.TedAbilityComponent.ExecuteGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct TedAbilityComponent_ExecuteGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityComponent_ExecuteGameplayCueLocal) == 0x000008, "Wrong alignment on TedAbilityComponent_ExecuteGameplayCueLocal");
static_assert(sizeof(TedAbilityComponent_ExecuteGameplayCueLocal) == 0x0000E0, "Wrong size on TedAbilityComponent_ExecuteGameplayCueLocal");
static_assert(offsetof(TedAbilityComponent_ExecuteGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'TedAbilityComponent_ExecuteGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_ExecuteGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'TedAbilityComponent_ExecuteGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function Tempest.TedAbilityComponent.RemoveGameplayCueLocal
// 0x00E0 (0x00E0 - 0x0000)
struct TedAbilityComponent_RemoveGameplayCueLocal final
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GameplayCueParameters;                             // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityComponent_RemoveGameplayCueLocal) == 0x000008, "Wrong alignment on TedAbilityComponent_RemoveGameplayCueLocal");
static_assert(sizeof(TedAbilityComponent_RemoveGameplayCueLocal) == 0x0000E0, "Wrong size on TedAbilityComponent_RemoveGameplayCueLocal");
static_assert(offsetof(TedAbilityComponent_RemoveGameplayCueLocal, GameplayCueTag) == 0x000000, "Member 'TedAbilityComponent_RemoveGameplayCueLocal::GameplayCueTag' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_RemoveGameplayCueLocal, GameplayCueParameters) == 0x000008, "Member 'TedAbilityComponent_RemoveGameplayCueLocal::GameplayCueParameters' has a wrong offset!");

// Function Tempest.TedAbilityComponent.IsAbilityActive
// 0x000C (0x000C - 0x0000)
struct TedAbilityComponent_IsAbilityActive final
{
public:
	struct FGameplayTag                           AbilityTag;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAbilityComponent_IsAbilityActive) == 0x000004, "Wrong alignment on TedAbilityComponent_IsAbilityActive");
static_assert(sizeof(TedAbilityComponent_IsAbilityActive) == 0x00000C, "Wrong size on TedAbilityComponent_IsAbilityActive");
static_assert(offsetof(TedAbilityComponent_IsAbilityActive, AbilityTag) == 0x000000, "Member 'TedAbilityComponent_IsAbilityActive::AbilityTag' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_IsAbilityActive, bExactMatch) == 0x000008, "Member 'TedAbilityComponent_IsAbilityActive::bExactMatch' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_IsAbilityActive, ReturnValue) == 0x000009, "Member 'TedAbilityComponent_IsAbilityActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityComponent.IsAnyAbilityActive
// 0x0028 (0x0028 - 0x0000)
struct TedAbilityComponent_IsAnyAbilityActive final
{
public:
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bExactMatch;                                       // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAbilityComponent_IsAnyAbilityActive) == 0x000008, "Wrong alignment on TedAbilityComponent_IsAnyAbilityActive");
static_assert(sizeof(TedAbilityComponent_IsAnyAbilityActive) == 0x000028, "Wrong size on TedAbilityComponent_IsAnyAbilityActive");
static_assert(offsetof(TedAbilityComponent_IsAnyAbilityActive, AbilityTags) == 0x000000, "Member 'TedAbilityComponent_IsAnyAbilityActive::AbilityTags' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_IsAnyAbilityActive, bExactMatch) == 0x000020, "Member 'TedAbilityComponent_IsAnyAbilityActive::bExactMatch' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_IsAnyAbilityActive, ReturnValue) == 0x000021, "Member 'TedAbilityComponent_IsAnyAbilityActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityComponent.MakeDamageEffectContext
// 0x0020 (0x0020 - 0x0000)
struct TedAbilityComponent_MakeDamageEffectContext final
{
public:
	TSubclassOf<class UTedDamageType>             DamageType;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityComponent_MakeDamageEffectContext) == 0x000008, "Wrong alignment on TedAbilityComponent_MakeDamageEffectContext");
static_assert(sizeof(TedAbilityComponent_MakeDamageEffectContext) == 0x000020, "Wrong size on TedAbilityComponent_MakeDamageEffectContext");
static_assert(offsetof(TedAbilityComponent_MakeDamageEffectContext, DamageType) == 0x000000, "Member 'TedAbilityComponent_MakeDamageEffectContext::DamageType' has a wrong offset!");
static_assert(offsetof(TedAbilityComponent_MakeDamageEffectContext, ReturnValue) == 0x000008, "Member 'TedAbilityComponent_MakeDamageEffectContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityHelpers.EffectContextGetDamageTypeClass
// 0x0020 (0x0020 - 0x0000)
struct TedAbilityHelpers_EffectContextGetDamageTypeClass final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityHelpers_EffectContextGetDamageTypeClass) == 0x000008, "Wrong alignment on TedAbilityHelpers_EffectContextGetDamageTypeClass");
static_assert(sizeof(TedAbilityHelpers_EffectContextGetDamageTypeClass) == 0x000020, "Wrong size on TedAbilityHelpers_EffectContextGetDamageTypeClass");
static_assert(offsetof(TedAbilityHelpers_EffectContextGetDamageTypeClass, EffectContext) == 0x000000, "Member 'TedAbilityHelpers_EffectContextGetDamageTypeClass::EffectContext' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_EffectContextGetDamageTypeClass, ReturnValue) == 0x000018, "Member 'TedAbilityHelpers_EffectContextGetDamageTypeClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityHelpers.EffectContextHasDamageTypeClass
// 0x0020 (0x0020 - 0x0000)
struct TedAbilityHelpers_EffectContextHasDamageTypeClass final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAbilityHelpers_EffectContextHasDamageTypeClass) == 0x000008, "Wrong alignment on TedAbilityHelpers_EffectContextHasDamageTypeClass");
static_assert(sizeof(TedAbilityHelpers_EffectContextHasDamageTypeClass) == 0x000020, "Wrong size on TedAbilityHelpers_EffectContextHasDamageTypeClass");
static_assert(offsetof(TedAbilityHelpers_EffectContextHasDamageTypeClass, EffectContext) == 0x000000, "Member 'TedAbilityHelpers_EffectContextHasDamageTypeClass::EffectContext' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_EffectContextHasDamageTypeClass, ReturnValue) == 0x000018, "Member 'TedAbilityHelpers_EffectContextHasDamageTypeClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityHelpers.EffectContextSetDamageTypeClass
// 0x0038 (0x0038 - 0x0000)
struct TedAbilityHelpers_EffectContextSetDamageTypeClass final
{
public:
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayEffectContextHandle           ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityHelpers_EffectContextSetDamageTypeClass) == 0x000008, "Wrong alignment on TedAbilityHelpers_EffectContextSetDamageTypeClass");
static_assert(sizeof(TedAbilityHelpers_EffectContextSetDamageTypeClass) == 0x000038, "Wrong size on TedAbilityHelpers_EffectContextSetDamageTypeClass");
static_assert(offsetof(TedAbilityHelpers_EffectContextSetDamageTypeClass, EffectContext) == 0x000000, "Member 'TedAbilityHelpers_EffectContextSetDamageTypeClass::EffectContext' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_EffectContextSetDamageTypeClass, DamageTypeClass) == 0x000018, "Member 'TedAbilityHelpers_EffectContextSetDamageTypeClass::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_EffectContextSetDamageTypeClass, ReturnValue) == 0x000020, "Member 'TedAbilityHelpers_EffectContextSetDamageTypeClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityHelpers.GetLastTagName
// 0x0010 (0x0010 - 0x0000)
struct TedAbilityHelpers_GetLastTagName final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityHelpers_GetLastTagName) == 0x000004, "Wrong alignment on TedAbilityHelpers_GetLastTagName");
static_assert(sizeof(TedAbilityHelpers_GetLastTagName) == 0x000010, "Wrong size on TedAbilityHelpers_GetLastTagName");
static_assert(offsetof(TedAbilityHelpers_GetLastTagName, Tag) == 0x000000, "Member 'TedAbilityHelpers_GetLastTagName::Tag' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_GetLastTagName, ReturnValue) == 0x000008, "Member 'TedAbilityHelpers_GetLastTagName::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbilityHelpers.GetTedAbilitySystemComponent
// 0x0010 (0x0010 - 0x0000)
struct TedAbilityHelpers_GetTedAbilitySystemComponent final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedAbilityComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityHelpers_GetTedAbilitySystemComponent) == 0x000008, "Wrong alignment on TedAbilityHelpers_GetTedAbilitySystemComponent");
static_assert(sizeof(TedAbilityHelpers_GetTedAbilitySystemComponent) == 0x000010, "Wrong size on TedAbilityHelpers_GetTedAbilitySystemComponent");
static_assert(offsetof(TedAbilityHelpers_GetTedAbilitySystemComponent, Actor) == 0x000000, "Member 'TedAbilityHelpers_GetTedAbilitySystemComponent::Actor' has a wrong offset!");
static_assert(offsetof(TedAbilityHelpers_GetTedAbilitySystemComponent, ReturnValue) == 0x000008, "Member 'TedAbilityHelpers_GetTedAbilitySystemComponent::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnEditableTextBoxChange
// 0x0010 (0x0010 - 0x0000)
struct TedSettingsSlot_Slider_OnEditableTextBoxChange final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Slider_OnEditableTextBoxChange) == 0x000008, "Wrong alignment on TedSettingsSlot_Slider_OnEditableTextBoxChange");
static_assert(sizeof(TedSettingsSlot_Slider_OnEditableTextBoxChange) == 0x000010, "Wrong size on TedSettingsSlot_Slider_OnEditableTextBoxChange");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextBoxChange, InText) == 0x000000, "Member 'TedSettingsSlot_Slider_OnEditableTextBoxChange::InText' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnEditableTextBoxCommited
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsSlot_Slider_OnEditableTextBoxCommited final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsSlot_Slider_OnEditableTextBoxCommited) == 0x000008, "Wrong alignment on TedSettingsSlot_Slider_OnEditableTextBoxCommited");
static_assert(sizeof(TedSettingsSlot_Slider_OnEditableTextBoxCommited) == 0x000018, "Wrong size on TedSettingsSlot_Slider_OnEditableTextBoxCommited");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextBoxCommited, InText) == 0x000000, "Member 'TedSettingsSlot_Slider_OnEditableTextBoxCommited::InText' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextBoxCommited, InCommitMethod) == 0x000010, "Member 'TedSettingsSlot_Slider_OnEditableTextBoxCommited::InCommitMethod' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnEditableTextChange
// 0x0010 (0x0010 - 0x0000)
struct TedSettingsSlot_Slider_OnEditableTextChange final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Slider_OnEditableTextChange) == 0x000008, "Wrong alignment on TedSettingsSlot_Slider_OnEditableTextChange");
static_assert(sizeof(TedSettingsSlot_Slider_OnEditableTextChange) == 0x000010, "Wrong size on TedSettingsSlot_Slider_OnEditableTextChange");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextChange, InText) == 0x000000, "Member 'TedSettingsSlot_Slider_OnEditableTextChange::InText' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnEditableTextCommited
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsSlot_Slider_OnEditableTextCommited final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsSlot_Slider_OnEditableTextCommited) == 0x000008, "Wrong alignment on TedSettingsSlot_Slider_OnEditableTextCommited");
static_assert(sizeof(TedSettingsSlot_Slider_OnEditableTextCommited) == 0x000018, "Wrong size on TedSettingsSlot_Slider_OnEditableTextCommited");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextCommited, InText) == 0x000000, "Member 'TedSettingsSlot_Slider_OnEditableTextCommited::InText' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_Slider_OnEditableTextCommited, InCommitMethod) == 0x000010, "Member 'TedSettingsSlot_Slider_OnEditableTextCommited::InCommitMethod' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnSlideValueChange
// 0x0004 (0x0004 - 0x0000)
struct TedSettingsSlot_Slider_OnSlideValueChange final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Slider_OnSlideValueChange) == 0x000004, "Wrong alignment on TedSettingsSlot_Slider_OnSlideValueChange");
static_assert(sizeof(TedSettingsSlot_Slider_OnSlideValueChange) == 0x000004, "Wrong size on TedSettingsSlot_Slider_OnSlideValueChange");
static_assert(offsetof(TedSettingsSlot_Slider_OnSlideValueChange, InValue) == 0x000000, "Member 'TedSettingsSlot_Slider_OnSlideValueChange::InValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Slider.OnValueChange
// 0x0004 (0x0004 - 0x0000)
struct TedSettingsSlot_Slider_OnValueChange final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Slider_OnValueChange) == 0x000004, "Wrong alignment on TedSettingsSlot_Slider_OnValueChange");
static_assert(sizeof(TedSettingsSlot_Slider_OnValueChange) == 0x000004, "Wrong size on TedSettingsSlot_Slider_OnValueChange");
static_assert(offsetof(TedSettingsSlot_Slider_OnValueChange, InValue) == 0x000000, "Member 'TedSettingsSlot_Slider_OnValueChange::InValue' has a wrong offset!");

// Function Tempest.TedAbilityTask_PlayMontageAndWaitForEvent.PlayMontageAndWaitForEvent
// 0x0058 (0x0058 - 0x0000)
struct TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TaskInstanceName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay_0;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  EventTags_0;                                       // 0x0018(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Rate_0;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartSection_0;                                    // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAbilityEnds_0;                            // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimRootMotionTranslationScale_0;                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedAbilityTask_PlayMontageAndWaitForEvent* ReturnValue;                                   // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent) == 0x000008, "Wrong alignment on TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent");
static_assert(sizeof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent) == 0x000058, "Wrong size on TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, OwningAbility) == 0x000000, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::OwningAbility' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, TaskInstanceName) == 0x000008, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::TaskInstanceName' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, MontageToPlay_0) == 0x000010, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::MontageToPlay_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, EventTags_0) == 0x000018, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::EventTags_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, Rate_0) == 0x000038, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::Rate_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, StartSection_0) == 0x00003C, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::StartSection_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, bStopWhenAbilityEnds_0) == 0x000044, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::bStopWhenAbilityEnds_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, AnimRootMotionTranslationScale_0) == 0x000048, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::AnimRootMotionTranslationScale_0' has a wrong offset!");
static_assert(offsetof(TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent, ReturnValue) == 0x000050, "Member 'TedAbilityTask_PlayMontageAndWaitForEvent_PlayMontageAndWaitForEvent::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.HandlePopupButtonClick_Ok
// 0x0004 (0x0004 - 0x0000)
struct TedSkirmishCreationScreen_HandlePopupButtonClick_Ok final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_HandlePopupButtonClick_Ok) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_HandlePopupButtonClick_Ok");
static_assert(sizeof(TedSkirmishCreationScreen_HandlePopupButtonClick_Ok) == 0x000004, "Wrong size on TedSkirmishCreationScreen_HandlePopupButtonClick_Ok");
static_assert(offsetof(TedSkirmishCreationScreen_HandlePopupButtonClick_Ok, InButtonIndex) == 0x000000, "Member 'TedSkirmishCreationScreen_HandlePopupButtonClick_Ok::InButtonIndex' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.K2_SetMapSelectorFilter
// 0x0010 (0x0010 - 0x0000)
struct TedSkirmishCreationScreen_K2_SetMapSelectorFilter final
{
public:
	struct FInt32Range                            InRange;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_K2_SetMapSelectorFilter) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_K2_SetMapSelectorFilter");
static_assert(sizeof(TedSkirmishCreationScreen_K2_SetMapSelectorFilter) == 0x000010, "Wrong size on TedSkirmishCreationScreen_K2_SetMapSelectorFilter");
static_assert(offsetof(TedSkirmishCreationScreen_K2_SetMapSelectorFilter, InRange) == 0x000000, "Member 'TedSkirmishCreationScreen_K2_SetMapSelectorFilter::InRange' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.OnFrameButtonTriggerSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction");
static_assert(sizeof(TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction) == 0x000018, "Wrong size on TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction");
static_assert(offsetof(TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction, InContentPanel) == 0x000000, "Member 'TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction, InContentSlot) == 0x000008, "Member 'TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction, InAction) == 0x000010, "Member 'TedSkirmishCreationScreen_OnFrameButtonTriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.OnPlayerSettingChange
// 0x0018 (0x0018 - 0x0000)
struct TedSkirmishCreationScreen_OnPlayerSettingChange final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InContentSlotIndex;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNewValue;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOldValue;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_OnPlayerSettingChange) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_OnPlayerSettingChange");
static_assert(sizeof(TedSkirmishCreationScreen_OnPlayerSettingChange) == 0x000018, "Wrong size on TedSkirmishCreationScreen_OnPlayerSettingChange");
static_assert(offsetof(TedSkirmishCreationScreen_OnPlayerSettingChange, InPlayersPanel) == 0x000000, "Member 'TedSkirmishCreationScreen_OnPlayerSettingChange::InPlayersPanel' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnPlayerSettingChange, InContentSlotIndex) == 0x000008, "Member 'TedSkirmishCreationScreen_OnPlayerSettingChange::InContentSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnPlayerSettingChange, InKey) == 0x00000C, "Member 'TedSkirmishCreationScreen_OnPlayerSettingChange::InKey' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnPlayerSettingChange, InNewValue) == 0x000010, "Member 'TedSkirmishCreationScreen_OnPlayerSettingChange::InNewValue' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnPlayerSettingChange, InOldValue) == 0x000014, "Member 'TedSkirmishCreationScreen_OnPlayerSettingChange::InOldValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.OnRequestAddBotPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedSkirmishCreationScreen_OnRequestAddBotPlayer final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_OnRequestAddBotPlayer) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_OnRequestAddBotPlayer");
static_assert(sizeof(TedSkirmishCreationScreen_OnRequestAddBotPlayer) == 0x000008, "Wrong size on TedSkirmishCreationScreen_OnRequestAddBotPlayer");
static_assert(offsetof(TedSkirmishCreationScreen_OnRequestAddBotPlayer, InPlayersPanel) == 0x000000, "Member 'TedSkirmishCreationScreen_OnRequestAddBotPlayer::InPlayersPanel' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.OnRequestAddHumanPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedSkirmishCreationScreen_OnRequestAddHumanPlayer final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_OnRequestAddHumanPlayer) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_OnRequestAddHumanPlayer");
static_assert(sizeof(TedSkirmishCreationScreen_OnRequestAddHumanPlayer) == 0x000008, "Wrong size on TedSkirmishCreationScreen_OnRequestAddHumanPlayer");
static_assert(offsetof(TedSkirmishCreationScreen_OnRequestAddHumanPlayer, InPlayersPanel) == 0x000000, "Member 'TedSkirmishCreationScreen_OnRequestAddHumanPlayer::InPlayersPanel' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.OnRequestRemovePlayer
// 0x0010 (0x0010 - 0x0000)
struct TedSkirmishCreationScreen_OnRequestRemovePlayer final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InContentSlotIndex;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSkirmishCreationScreen_OnRequestRemovePlayer) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_OnRequestRemovePlayer");
static_assert(sizeof(TedSkirmishCreationScreen_OnRequestRemovePlayer) == 0x000010, "Wrong size on TedSkirmishCreationScreen_OnRequestRemovePlayer");
static_assert(offsetof(TedSkirmishCreationScreen_OnRequestRemovePlayer, InPlayersPanel) == 0x000000, "Member 'TedSkirmishCreationScreen_OnRequestRemovePlayer::InPlayersPanel' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_OnRequestRemovePlayer, InContentSlotIndex) == 0x000008, "Member 'TedSkirmishCreationScreen_OnRequestRemovePlayer::InContentSlotIndex' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.RefreshAnySkirmishSavesAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable final
{
public:
	bool                                          bSuccess;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable) == 0x000001, "Wrong alignment on TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable");
static_assert(sizeof(TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable) == 0x000001, "Wrong size on TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable");
static_assert(offsetof(TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable, bSuccess) == 0x000000, "Member 'TedSkirmishCreationScreen_RefreshAnySkirmishSavesAvailable::bSuccess' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.SelectMap
// 0x0008 (0x0008 - 0x0000)
struct TedSkirmishCreationScreen_SelectMap final
{
public:
	const class UTedMapInfo*                      InMap;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_SelectMap) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_SelectMap");
static_assert(sizeof(TedSkirmishCreationScreen_SelectMap) == 0x000008, "Wrong size on TedSkirmishCreationScreen_SelectMap");
static_assert(offsetof(TedSkirmishCreationScreen_SelectMap, InMap) == 0x000000, "Member 'TedSkirmishCreationScreen_SelectMap::InMap' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetCurrentPlayersNum
// 0x0004 (0x0004 - 0x0000)
struct TedSkirmishCreationScreen_GetCurrentPlayersNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_GetCurrentPlayersNum) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_GetCurrentPlayersNum");
static_assert(sizeof(TedSkirmishCreationScreen_GetCurrentPlayersNum) == 0x000004, "Wrong size on TedSkirmishCreationScreen_GetCurrentPlayersNum");
static_assert(offsetof(TedSkirmishCreationScreen_GetCurrentPlayersNum, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_GetCurrentPlayersNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetGameSettings
// 0x0010 (0x0010 - 0x0000)
struct TedSkirmishCreationScreen_GetGameSettings final
{
public:
	struct FTedGameCreationSettings               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_GetGameSettings) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_GetGameSettings");
static_assert(sizeof(TedSkirmishCreationScreen_GetGameSettings) == 0x000010, "Wrong size on TedSkirmishCreationScreen_GetGameSettings");
static_assert(offsetof(TedSkirmishCreationScreen_GetGameSettings, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_GetGameSettings::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetGameSettingValue
// 0x000C (0x000C - 0x0000)
struct TedSkirmishCreationScreen_GetGameSettingValue final
{
public:
	ETedSessionSettingKey                         InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSkirmishCreationScreen_GetGameSettingValue) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_GetGameSettingValue");
static_assert(sizeof(TedSkirmishCreationScreen_GetGameSettingValue) == 0x00000C, "Wrong size on TedSkirmishCreationScreen_GetGameSettingValue");
static_assert(offsetof(TedSkirmishCreationScreen_GetGameSettingValue, InKey) == 0x000000, "Member 'TedSkirmishCreationScreen_GetGameSettingValue::InKey' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_GetGameSettingValue, OutValue) == 0x000004, "Member 'TedSkirmishCreationScreen_GetGameSettingValue::OutValue' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_GetGameSettingValue, ReturnValue) == 0x000008, "Member 'TedSkirmishCreationScreen_GetGameSettingValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetMaxPlayersInGame
// 0x0004 (0x0004 - 0x0000)
struct TedSkirmishCreationScreen_GetMaxPlayersInGame final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_GetMaxPlayersInGame) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_GetMaxPlayersInGame");
static_assert(sizeof(TedSkirmishCreationScreen_GetMaxPlayersInGame) == 0x000004, "Wrong size on TedSkirmishCreationScreen_GetMaxPlayersInGame");
static_assert(offsetof(TedSkirmishCreationScreen_GetMaxPlayersInGame, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_GetMaxPlayersInGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetMaxPlayersOnCurrentMap
// 0x0004 (0x0004 - 0x0000)
struct TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap) == 0x000004, "Wrong alignment on TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap");
static_assert(sizeof(TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap) == 0x000004, "Wrong size on TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap");
static_assert(offsetof(TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_GetMaxPlayersOnCurrentMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.GetSelectedMap
// 0x0008 (0x0008 - 0x0000)
struct TedSkirmishCreationScreen_GetSelectedMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_GetSelectedMap) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_GetSelectedMap");
static_assert(sizeof(TedSkirmishCreationScreen_GetSelectedMap) == 0x000008, "Wrong size on TedSkirmishCreationScreen_GetSelectedMap");
static_assert(offsetof(TedSkirmishCreationScreen_GetSelectedMap, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_GetSelectedMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.HasGameSetting
// 0x0002 (0x0002 - 0x0000)
struct TedSkirmishCreationScreen_HasGameSetting final
{
public:
	ETedSessionSettingKey                         InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_HasGameSetting) == 0x000001, "Wrong alignment on TedSkirmishCreationScreen_HasGameSetting");
static_assert(sizeof(TedSkirmishCreationScreen_HasGameSetting) == 0x000002, "Wrong size on TedSkirmishCreationScreen_HasGameSetting");
static_assert(offsetof(TedSkirmishCreationScreen_HasGameSetting, InKey) == 0x000000, "Member 'TedSkirmishCreationScreen_HasGameSetting::InKey' has a wrong offset!");
static_assert(offsetof(TedSkirmishCreationScreen_HasGameSetting, ReturnValue) == 0x000001, "Member 'TedSkirmishCreationScreen_HasGameSetting::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.IsSelectingMap
// 0x0001 (0x0001 - 0x0000)
struct TedSkirmishCreationScreen_IsSelectingMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_IsSelectingMap) == 0x000001, "Wrong alignment on TedSkirmishCreationScreen_IsSelectingMap");
static_assert(sizeof(TedSkirmishCreationScreen_IsSelectingMap) == 0x000001, "Wrong size on TedSkirmishCreationScreen_IsSelectingMap");
static_assert(offsetof(TedSkirmishCreationScreen_IsSelectingMap, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_IsSelectingMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkirmishCreationScreen.K2_GetDefaultMap
// 0x0008 (0x0008 - 0x0000)
struct TedSkirmishCreationScreen_K2_GetDefaultMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkirmishCreationScreen_K2_GetDefaultMap) == 0x000008, "Wrong alignment on TedSkirmishCreationScreen_K2_GetDefaultMap");
static_assert(sizeof(TedSkirmishCreationScreen_K2_GetDefaultMap) == 0x000008, "Wrong size on TedSkirmishCreationScreen_K2_GetDefaultMap");
static_assert(offsetof(TedSkirmishCreationScreen_K2_GetDefaultMap, ReturnValue) == 0x000000, "Member 'TedSkirmishCreationScreen_K2_GetDefaultMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_ApplyAoEGE.ApplyGEToPawnsInRange
// 0x0020 (0x0020 - 0x0000)
struct TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange final
{
public:
	struct FVector                                EffectLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange) == 0x000008, "Wrong alignment on TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange");
static_assert(sizeof(TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange) == 0x000020, "Wrong size on TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange");
static_assert(offsetof(TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange, EffectLocation) == 0x000000, "Member 'TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange::EffectLocation' has a wrong offset!");
static_assert(offsetof(TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange, EffectRadius) == 0x000018, "Member 'TedAbility_ApplyAoEGE_ApplyGEToPawnsInRange::EffectRadius' has a wrong offset!");

// Function Tempest.TedAbility_Montage.HandleMontageNotifyBegin
// 0x0028 (0x0028 - 0x0000)
struct TedAbility_Montage_HandleMontageNotifyBegin final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointPayload;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_HandleMontageNotifyBegin) == 0x000008, "Wrong alignment on TedAbility_Montage_HandleMontageNotifyBegin");
static_assert(sizeof(TedAbility_Montage_HandleMontageNotifyBegin) == 0x000028, "Wrong size on TedAbility_Montage_HandleMontageNotifyBegin");
static_assert(offsetof(TedAbility_Montage_HandleMontageNotifyBegin, NotifyName) == 0x000000, "Member 'TedAbility_Montage_HandleMontageNotifyBegin::NotifyName' has a wrong offset!");
static_assert(offsetof(TedAbility_Montage_HandleMontageNotifyBegin, BranchingPointPayload) == 0x000008, "Member 'TedAbility_Montage_HandleMontageNotifyBegin::BranchingPointPayload' has a wrong offset!");

// Function Tempest.TedAbility_Montage.HandleMontageNotifyEnd
// 0x0028 (0x0028 - 0x0000)
struct TedAbility_Montage_HandleMontageNotifyEnd final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBranchingPointNotifyPayload           BranchingPointPayload;                             // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_HandleMontageNotifyEnd) == 0x000008, "Wrong alignment on TedAbility_Montage_HandleMontageNotifyEnd");
static_assert(sizeof(TedAbility_Montage_HandleMontageNotifyEnd) == 0x000028, "Wrong size on TedAbility_Montage_HandleMontageNotifyEnd");
static_assert(offsetof(TedAbility_Montage_HandleMontageNotifyEnd, NotifyName) == 0x000000, "Member 'TedAbility_Montage_HandleMontageNotifyEnd::NotifyName' has a wrong offset!");
static_assert(offsetof(TedAbility_Montage_HandleMontageNotifyEnd, BranchingPointPayload) == 0x000008, "Member 'TedAbility_Montage_HandleMontageNotifyEnd::BranchingPointPayload' has a wrong offset!");

// Function Tempest.TedAbility_Montage.OnMontageNotifyBegin
// 0x0008 (0x0008 - 0x0000)
struct TedAbility_Montage_OnMontageNotifyBegin final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_OnMontageNotifyBegin) == 0x000004, "Wrong alignment on TedAbility_Montage_OnMontageNotifyBegin");
static_assert(sizeof(TedAbility_Montage_OnMontageNotifyBegin) == 0x000008, "Wrong size on TedAbility_Montage_OnMontageNotifyBegin");
static_assert(offsetof(TedAbility_Montage_OnMontageNotifyBegin, NotifyName) == 0x000000, "Member 'TedAbility_Montage_OnMontageNotifyBegin::NotifyName' has a wrong offset!");

// Function Tempest.TedAbility_Montage.OnMontageNotifyEnd
// 0x0008 (0x0008 - 0x0000)
struct TedAbility_Montage_OnMontageNotifyEnd final
{
public:
	class FName                                   NotifyName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_OnMontageNotifyEnd) == 0x000004, "Wrong alignment on TedAbility_Montage_OnMontageNotifyEnd");
static_assert(sizeof(TedAbility_Montage_OnMontageNotifyEnd) == 0x000008, "Wrong size on TedAbility_Montage_OnMontageNotifyEnd");
static_assert(offsetof(TedAbility_Montage_OnMontageNotifyEnd, NotifyName) == 0x000000, "Member 'TedAbility_Montage_OnMontageNotifyEnd::NotifyName' has a wrong offset!");

// Function Tempest.TedAbility_Montage.GetMontageData
// 0x0060 (0x0060 - 0x0000)
struct TedAbility_Montage_GetMontageData final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FAbilityMontageData                    ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_GetMontageData) == 0x000008, "Wrong alignment on TedAbility_Montage_GetMontageData");
static_assert(sizeof(TedAbility_Montage_GetMontageData) == 0x000060, "Wrong size on TedAbility_Montage_GetMontageData");
static_assert(offsetof(TedAbility_Montage_GetMontageData, ActorInfo) == 0x000000, "Member 'TedAbility_Montage_GetMontageData::ActorInfo' has a wrong offset!");
static_assert(offsetof(TedAbility_Montage_GetMontageData, ReturnValue) == 0x000048, "Member 'TedAbility_Montage_GetMontageData::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_Montage.K2_GetMontageData
// 0x0018 (0x0018 - 0x0000)
struct TedAbility_Montage_K2_GetMontageData final
{
public:
	struct FAbilityMontageData                    ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Montage_K2_GetMontageData) == 0x000008, "Wrong alignment on TedAbility_Montage_K2_GetMontageData");
static_assert(sizeof(TedAbility_Montage_K2_GetMontageData) == 0x000018, "Wrong size on TedAbility_Montage_K2_GetMontageData");
static_assert(offsetof(TedAbility_Montage_K2_GetMontageData, ReturnValue) == 0x000000, "Member 'TedAbility_Montage_K2_GetMontageData::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorkersWidget.OnCollapseButtonPanelActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedWorkersWidget_OnCollapseButtonPanelActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState) == 0x000008, "Wrong alignment on TedWorkersWidget_OnCollapseButtonPanelActivateSlotState");
static_assert(sizeof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState) == 0x000018, "Wrong size on TedWorkersWidget_OnCollapseButtonPanelActivateSlotState");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState, InContentPanel) == 0x000000, "Member 'TedWorkersWidget_OnCollapseButtonPanelActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState, InContentSlot) == 0x000008, "Member 'TedWorkersWidget_OnCollapseButtonPanelActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState, InState) == 0x000010, "Member 'TedWorkersWidget_OnCollapseButtonPanelActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelActivateSlotState, bInActivated) == 0x000011, "Member 'TedWorkersWidget_OnCollapseButtonPanelActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedWorkersWidget.OnCollapseButtonPanelTriggerSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction) == 0x000008, "Wrong alignment on TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction");
static_assert(sizeof(TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction) == 0x000018, "Wrong size on TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction, InContentPanel) == 0x000000, "Member 'TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction, InContentSlot) == 0x000008, "Member 'TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction, InAction) == 0x000010, "Member 'TedWorkersWidget_OnCollapseButtonPanelTriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedWorkersWidget.OnWorkersPanelContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedWorkersWidget_OnWorkersPanelContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkersWidget_OnWorkersPanelContentChange) == 0x000008, "Wrong alignment on TedWorkersWidget_OnWorkersPanelContentChange");
static_assert(sizeof(TedWorkersWidget_OnWorkersPanelContentChange) == 0x000008, "Wrong size on TedWorkersWidget_OnWorkersPanelContentChange");
static_assert(offsetof(TedWorkersWidget_OnWorkersPanelContentChange, InContentPanel) == 0x000000, "Member 'TedWorkersWidget_OnWorkersPanelContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedWorkersWidget.OnWorkersPanelTriggerSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedWorkersWidget_OnWorkersPanelTriggerSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorkersWidget_OnWorkersPanelTriggerSlotAction) == 0x000008, "Wrong alignment on TedWorkersWidget_OnWorkersPanelTriggerSlotAction");
static_assert(sizeof(TedWorkersWidget_OnWorkersPanelTriggerSlotAction) == 0x000018, "Wrong size on TedWorkersWidget_OnWorkersPanelTriggerSlotAction");
static_assert(offsetof(TedWorkersWidget_OnWorkersPanelTriggerSlotAction, InContentPanel) == 0x000000, "Member 'TedWorkersWidget_OnWorkersPanelTriggerSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnWorkersPanelTriggerSlotAction, InContentSlot) == 0x000008, "Member 'TedWorkersWidget_OnWorkersPanelTriggerSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_OnWorkersPanelTriggerSlotAction, InAction) == 0x000010, "Member 'TedWorkersWidget_OnWorkersPanelTriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedWorkersWidget.SetExpansion
// 0x0001 (0x0001 - 0x0000)
struct TedWorkersWidget_SetExpansion final
{
public:
	bool                                          bInExpanded;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkersWidget_SetExpansion) == 0x000001, "Wrong alignment on TedWorkersWidget_SetExpansion");
static_assert(sizeof(TedWorkersWidget_SetExpansion) == 0x000001, "Wrong size on TedWorkersWidget_SetExpansion");
static_assert(offsetof(TedWorkersWidget_SetExpansion, bInExpanded) == 0x000000, "Member 'TedWorkersWidget_SetExpansion::bInExpanded' has a wrong offset!");

// Function Tempest.TedWorkersWidget.GetWorkersCount
// 0x0004 (0x0004 - 0x0000)
struct TedWorkersWidget_GetWorkersCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkersWidget_GetWorkersCount) == 0x000004, "Wrong alignment on TedWorkersWidget_GetWorkersCount");
static_assert(sizeof(TedWorkersWidget_GetWorkersCount) == 0x000004, "Wrong size on TedWorkersWidget_GetWorkersCount");
static_assert(offsetof(TedWorkersWidget_GetWorkersCount, ReturnValue) == 0x000000, "Member 'TedWorkersWidget_GetWorkersCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorkersWidget.IsExpanded
// 0x0001 (0x0001 - 0x0000)
struct TedWorkersWidget_IsExpanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkersWidget_IsExpanded) == 0x000001, "Wrong alignment on TedWorkersWidget_IsExpanded");
static_assert(sizeof(TedWorkersWidget_IsExpanded) == 0x000001, "Wrong size on TedWorkersWidget_IsExpanded");
static_assert(offsetof(TedWorkersWidget_IsExpanded, ReturnValue) == 0x000000, "Member 'TedWorkersWidget_IsExpanded::ReturnValue' has a wrong offset!");

// Function Tempest.TedResizableBox.GetBoxPosition
// 0x0010 (0x0010 - 0x0000)
struct TedResizableBox_GetBoxPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_GetBoxPosition) == 0x000008, "Wrong alignment on TedResizableBox_GetBoxPosition");
static_assert(sizeof(TedResizableBox_GetBoxPosition) == 0x000010, "Wrong size on TedResizableBox_GetBoxPosition");
static_assert(offsetof(TedResizableBox_GetBoxPosition, ReturnValue) == 0x000000, "Member 'TedResizableBox_GetBoxPosition::ReturnValue' has a wrong offset!");

// Function Tempest.TedResizableBox.GetBoxSize
// 0x0010 (0x0010 - 0x0000)
struct TedResizableBox_GetBoxSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_GetBoxSize) == 0x000008, "Wrong alignment on TedResizableBox_GetBoxSize");
static_assert(sizeof(TedResizableBox_GetBoxSize) == 0x000010, "Wrong size on TedResizableBox_GetBoxSize");
static_assert(offsetof(TedResizableBox_GetBoxSize, ReturnValue) == 0x000000, "Member 'TedResizableBox_GetBoxSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedResizableBox.GetInnerContentDesiredSize
// 0x0010 (0x0010 - 0x0000)
struct TedResizableBox_GetInnerContentDesiredSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_GetInnerContentDesiredSize) == 0x000008, "Wrong alignment on TedResizableBox_GetInnerContentDesiredSize");
static_assert(sizeof(TedResizableBox_GetInnerContentDesiredSize) == 0x000010, "Wrong size on TedResizableBox_GetInnerContentDesiredSize");
static_assert(offsetof(TedResizableBox_GetInnerContentDesiredSize, ReturnValue) == 0x000000, "Member 'TedResizableBox_GetInnerContentDesiredSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedResizableBox.SetBoxPosition
// 0x0010 (0x0010 - 0x0000)
struct TedResizableBox_SetBoxPosition final
{
public:
	struct FVector2D                              NewPosition;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_SetBoxPosition) == 0x000008, "Wrong alignment on TedResizableBox_SetBoxPosition");
static_assert(sizeof(TedResizableBox_SetBoxPosition) == 0x000010, "Wrong size on TedResizableBox_SetBoxPosition");
static_assert(offsetof(TedResizableBox_SetBoxPosition, NewPosition) == 0x000000, "Member 'TedResizableBox_SetBoxPosition::NewPosition' has a wrong offset!");

// Function Tempest.TedResizableBox.SetBoxSize
// 0x0010 (0x0010 - 0x0000)
struct TedResizableBox_SetBoxSize final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_SetBoxSize) == 0x000008, "Wrong alignment on TedResizableBox_SetBoxSize");
static_assert(sizeof(TedResizableBox_SetBoxSize) == 0x000010, "Wrong size on TedResizableBox_SetBoxSize");
static_assert(offsetof(TedResizableBox_SetBoxSize, NewSize) == 0x000000, "Member 'TedResizableBox_SetBoxSize::NewSize' has a wrong offset!");

// Function Tempest.TedResizableBox.SetResizingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedResizableBox_SetResizingEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_SetResizingEnabled) == 0x000001, "Wrong alignment on TedResizableBox_SetResizingEnabled");
static_assert(sizeof(TedResizableBox_SetResizingEnabled) == 0x000001, "Wrong size on TedResizableBox_SetResizingEnabled");
static_assert(offsetof(TedResizableBox_SetResizingEnabled, bEnabled) == 0x000000, "Member 'TedResizableBox_SetResizingEnabled::bEnabled' has a wrong offset!");

// Function Tempest.TedResizableBox.GetDragger
// 0x0008 (0x0008 - 0x0000)
struct TedResizableBox_GetDragger final
{
public:
	class UTedResizableBoxControl*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_GetDragger) == 0x000008, "Wrong alignment on TedResizableBox_GetDragger");
static_assert(sizeof(TedResizableBox_GetDragger) == 0x000008, "Wrong size on TedResizableBox_GetDragger");
static_assert(offsetof(TedResizableBox_GetDragger, ReturnValue) == 0x000000, "Member 'TedResizableBox_GetDragger::ReturnValue' has a wrong offset!");

// Function Tempest.TedResizableBox.GetResizeIndicator
// 0x0008 (0x0008 - 0x0000)
struct TedResizableBox_GetResizeIndicator final
{
public:
	class UTedResizableBoxControl*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedResizableBox_GetResizeIndicator) == 0x000008, "Wrong alignment on TedResizableBox_GetResizeIndicator");
static_assert(sizeof(TedResizableBox_GetResizeIndicator) == 0x000008, "Wrong size on TedResizableBox_GetResizeIndicator");
static_assert(offsetof(TedResizableBox_GetResizeIndicator, ReturnValue) == 0x000000, "Member 'TedResizableBox_GetResizeIndicator::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget.GetChatWindow
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_GetChatWindow final
{
public:
	class UTedChatWindow*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_GetChatWindow) == 0x000008, "Wrong alignment on TedChatPartyWidget_GetChatWindow");
static_assert(sizeof(TedChatPartyWidget_GetChatWindow) == 0x000008, "Wrong size on TedChatPartyWidget_GetChatWindow");
static_assert(offsetof(TedChatPartyWidget_GetChatWindow, ReturnValue) == 0x000000, "Member 'TedChatPartyWidget_GetChatWindow::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget.OnChatMessageCommitted
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyWidget_OnChatMessageCommitted final
{
public:
	class FText                                   TextCommitted;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethod;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_OnChatMessageCommitted) == 0x000008, "Wrong alignment on TedChatPartyWidget_OnChatMessageCommitted");
static_assert(sizeof(TedChatPartyWidget_OnChatMessageCommitted) == 0x000018, "Wrong size on TedChatPartyWidget_OnChatMessageCommitted");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageCommitted, TextCommitted) == 0x000000, "Member 'TedChatPartyWidget_OnChatMessageCommitted::TextCommitted' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageCommitted, CommitMethod) == 0x000010, "Member 'TedChatPartyWidget_OnChatMessageCommitted::CommitMethod' has a wrong offset!");

// Function Tempest.TedChatPartyWidget.OnChatMessageReceived
// 0x0078 (0x0078 - 0x0000)
struct TedChatPartyWidget_OnChatMessageReceived final
{
public:
	struct FTedChatMessage                        Message;                                           // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
	int32                                         position;                                          // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_OnChatMessageReceived) == 0x000008, "Wrong alignment on TedChatPartyWidget_OnChatMessageReceived");
static_assert(sizeof(TedChatPartyWidget_OnChatMessageReceived) == 0x000078, "Wrong size on TedChatPartyWidget_OnChatMessageReceived");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageReceived, Message) == 0x000000, "Member 'TedChatPartyWidget_OnChatMessageReceived::Message' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageReceived, position) == 0x000070, "Member 'TedChatPartyWidget_OnChatMessageReceived::position' has a wrong offset!");

// Function Tempest.TedChatPartyWidget.OnChatMessageRemoved
// 0x0078 (0x0078 - 0x0000)
struct TedChatPartyWidget_OnChatMessageRemoved final
{
public:
	struct FTedChatMessage                        Message;                                           // 0x0000(0x0070)(Parm, NativeAccessSpecifierPublic)
	int32                                         position;                                          // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_OnChatMessageRemoved) == 0x000008, "Wrong alignment on TedChatPartyWidget_OnChatMessageRemoved");
static_assert(sizeof(TedChatPartyWidget_OnChatMessageRemoved) == 0x000078, "Wrong size on TedChatPartyWidget_OnChatMessageRemoved");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageRemoved, Message) == 0x000000, "Member 'TedChatPartyWidget_OnChatMessageRemoved::Message' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_OnChatMessageRemoved, position) == 0x000070, "Member 'TedChatPartyWidget_OnChatMessageRemoved::position' has a wrong offset!");

// Function Tempest.TedChatPartyWidget.GetHeader
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_GetHeader final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_GetHeader) == 0x000008, "Wrong alignment on TedChatPartyWidget_GetHeader");
static_assert(sizeof(TedChatPartyWidget_GetHeader) == 0x000008, "Wrong size on TedChatPartyWidget_GetHeader");
static_assert(offsetof(TedChatPartyWidget_GetHeader, ReturnValue) == 0x000000, "Member 'TedChatPartyWidget_GetHeader::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_InGame.GetHeaderButtonsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_InGame_GetHeaderButtonsPanel final
{
public:
	class UTedContentPanelInstanced*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_InGame_GetHeaderButtonsPanel) == 0x000008, "Wrong alignment on TedChatPartyWidget_InGame_GetHeaderButtonsPanel");
static_assert(sizeof(TedChatPartyWidget_InGame_GetHeaderButtonsPanel) == 0x000008, "Wrong size on TedChatPartyWidget_InGame_GetHeaderButtonsPanel");
static_assert(offsetof(TedChatPartyWidget_InGame_GetHeaderButtonsPanel, ReturnValue) == 0x000000, "Member 'TedChatPartyWidget_InGame_GetHeaderButtonsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_InGame.OnHeaderButtonSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyWidget_InGame_OnHeaderButtonSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_InGame_OnHeaderButtonSlotAction) == 0x000008, "Wrong alignment on TedChatPartyWidget_InGame_OnHeaderButtonSlotAction");
static_assert(sizeof(TedChatPartyWidget_InGame_OnHeaderButtonSlotAction) == 0x000018, "Wrong size on TedChatPartyWidget_InGame_OnHeaderButtonSlotAction");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonSlotAction, InContentPanel) == 0x000000, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonSlotAction, InContentSlot) == 0x000008, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonSlotAction, InAction) == 0x000010, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_InGame.OnHeaderButtonStateActivated
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyWidget_InGame_OnHeaderButtonStateActivated final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated) == 0x000008, "Wrong alignment on TedChatPartyWidget_InGame_OnHeaderButtonStateActivated");
static_assert(sizeof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated) == 0x000018, "Wrong size on TedChatPartyWidget_InGame_OnHeaderButtonStateActivated");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated, InContentPanel) == 0x000000, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonStateActivated::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated, InContentSlot) == 0x000008, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonStateActivated::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated, InState) == 0x000010, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonStateActivated::InState' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_InGame_OnHeaderButtonStateActivated, bInActivated) == 0x000011, "Member 'TedChatPartyWidget_InGame_OnHeaderButtonStateActivated::bInActivated' has a wrong offset!");

// Function Tempest.TedAbility_CaptureStructure.CaptureStructure
// 0x0008 (0x0008 - 0x0000)
struct TedAbility_CaptureStructure_CaptureStructure final
{
public:
	class ATedStructureBase*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_CaptureStructure_CaptureStructure) == 0x000008, "Wrong alignment on TedAbility_CaptureStructure_CaptureStructure");
static_assert(sizeof(TedAbility_CaptureStructure_CaptureStructure) == 0x000008, "Wrong size on TedAbility_CaptureStructure_CaptureStructure");
static_assert(offsetof(TedAbility_CaptureStructure_CaptureStructure, Target) == 0x000000, "Member 'TedAbility_CaptureStructure_CaptureStructure::Target' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnActivateButtonState_Handler
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenPage_OnActivateButtonState_Handler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnActivateButtonState_Handler) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnActivateButtonState_Handler");
static_assert(sizeof(TedMenuScreenPage_OnActivateButtonState_Handler) == 0x000018, "Wrong size on TedMenuScreenPage_OnActivateButtonState_Handler");
static_assert(offsetof(TedMenuScreenPage_OnActivateButtonState_Handler, InContentPanel) == 0x000000, "Member 'TedMenuScreenPage_OnActivateButtonState_Handler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateButtonState_Handler, InContentSlot) == 0x000008, "Member 'TedMenuScreenPage_OnActivateButtonState_Handler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateButtonState_Handler, InState) == 0x000010, "Member 'TedMenuScreenPage_OnActivateButtonState_Handler::InState' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateButtonState_Handler, bInActivated) == 0x000011, "Member 'TedMenuScreenPage_OnActivateButtonState_Handler::bInActivated' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnActivateTabState_Handler
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenPage_OnActivateTabState_Handler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnActivateTabState_Handler) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnActivateTabState_Handler");
static_assert(sizeof(TedMenuScreenPage_OnActivateTabState_Handler) == 0x000018, "Wrong size on TedMenuScreenPage_OnActivateTabState_Handler");
static_assert(offsetof(TedMenuScreenPage_OnActivateTabState_Handler, InContentPanel) == 0x000000, "Member 'TedMenuScreenPage_OnActivateTabState_Handler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateTabState_Handler, InContentSlot) == 0x000008, "Member 'TedMenuScreenPage_OnActivateTabState_Handler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateTabState_Handler, InState) == 0x000010, "Member 'TedMenuScreenPage_OnActivateTabState_Handler::InState' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnActivateTabState_Handler, bInActivated) == 0x000011, "Member 'TedMenuScreenPage_OnActivateTabState_Handler::bInActivated' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnClose
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_OnClose final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnClose) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnClose");
static_assert(sizeof(TedMenuScreenPage_OnClose) == 0x000010, "Wrong size on TedMenuScreenPage_OnClose");
static_assert(offsetof(TedMenuScreenPage_OnClose, InContext) == 0x000000, "Member 'TedMenuScreenPage_OnClose::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnClose, bInInstant) == 0x000008, "Member 'TedMenuScreenPage_OnClose::bInInstant' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnInnerPanelContentChange_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_OnInnerPanelContentChange_Handler final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_OnInnerPanelContentChange_Handler) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnInnerPanelContentChange_Handler");
static_assert(sizeof(TedMenuScreenPage_OnInnerPanelContentChange_Handler) == 0x000008, "Wrong size on TedMenuScreenPage_OnInnerPanelContentChange_Handler");
static_assert(offsetof(TedMenuScreenPage_OnInnerPanelContentChange_Handler, InContentPanel) == 0x000000, "Member 'TedMenuScreenPage_OnInnerPanelContentChange_Handler::InContentPanel' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnOpen
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_OnOpen final
{
public:
	const class UObject*                          InContext;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnOpen) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnOpen");
static_assert(sizeof(TedMenuScreenPage_OnOpen) == 0x000010, "Wrong size on TedMenuScreenPage_OnOpen");
static_assert(offsetof(TedMenuScreenPage_OnOpen, InContext) == 0x000000, "Member 'TedMenuScreenPage_OnOpen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnOpen, bInInstant) == 0x000008, "Member 'TedMenuScreenPage_OnOpen::bInInstant' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnRefreshBackground
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_OnRefreshBackground final
{
public:
	const class USlateBrushAsset*                 InBackground;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_OnRefreshBackground) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnRefreshBackground");
static_assert(sizeof(TedMenuScreenPage_OnRefreshBackground) == 0x000008, "Wrong size on TedMenuScreenPage_OnRefreshBackground");
static_assert(offsetof(TedMenuScreenPage_OnRefreshBackground, InBackground) == 0x000000, "Member 'TedMenuScreenPage_OnRefreshBackground::InBackground' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnTriggetButtonAction_Handler
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenPage_OnTriggetButtonAction_Handler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnTriggetButtonAction_Handler) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnTriggetButtonAction_Handler");
static_assert(sizeof(TedMenuScreenPage_OnTriggetButtonAction_Handler) == 0x000018, "Wrong size on TedMenuScreenPage_OnTriggetButtonAction_Handler");
static_assert(offsetof(TedMenuScreenPage_OnTriggetButtonAction_Handler, InContentPanel) == 0x000000, "Member 'TedMenuScreenPage_OnTriggetButtonAction_Handler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnTriggetButtonAction_Handler, InContentSlot) == 0x000008, "Member 'TedMenuScreenPage_OnTriggetButtonAction_Handler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnTriggetButtonAction_Handler, InAction) == 0x000010, "Member 'TedMenuScreenPage_OnTriggetButtonAction_Handler::InAction' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.OnTriggetTabAction_Handler
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenPage_OnTriggetTabAction_Handler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenPage_OnTriggetTabAction_Handler) == 0x000008, "Wrong alignment on TedMenuScreenPage_OnTriggetTabAction_Handler");
static_assert(sizeof(TedMenuScreenPage_OnTriggetTabAction_Handler) == 0x000018, "Wrong size on TedMenuScreenPage_OnTriggetTabAction_Handler");
static_assert(offsetof(TedMenuScreenPage_OnTriggetTabAction_Handler, InContentPanel) == 0x000000, "Member 'TedMenuScreenPage_OnTriggetTabAction_Handler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnTriggetTabAction_Handler, InContentSlot) == 0x000008, "Member 'TedMenuScreenPage_OnTriggetTabAction_Handler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_OnTriggetTabAction_Handler, InAction) == 0x000010, "Member 'TedMenuScreenPage_OnTriggetTabAction_Handler::InAction' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.SetBackground
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_SetBackground final
{
public:
	const class USlateBrushAsset*                 InBackground;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_SetBackground) == 0x000008, "Wrong alignment on TedMenuScreenPage_SetBackground");
static_assert(sizeof(TedMenuScreenPage_SetBackground) == 0x000008, "Wrong size on TedMenuScreenPage_SetBackground");
static_assert(offsetof(TedMenuScreenPage_SetBackground, InBackground) == 0x000000, "Member 'TedMenuScreenPage_SetBackground::InBackground' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.SetButtons
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_SetButtons final
{
public:
	TArray<class UTedUI_InstancedContent*>        InButtons;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_SetButtons) == 0x000008, "Wrong alignment on TedMenuScreenPage_SetButtons");
static_assert(sizeof(TedMenuScreenPage_SetButtons) == 0x000010, "Wrong size on TedMenuScreenPage_SetButtons");
static_assert(offsetof(TedMenuScreenPage_SetButtons, InButtons) == 0x000000, "Member 'TedMenuScreenPage_SetButtons::InButtons' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.SetTabs
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_SetTabs final
{
public:
	TArray<class UTedUI_InstancedContent*>        InTabs;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_SetTabs) == 0x000008, "Wrong alignment on TedMenuScreenPage_SetTabs");
static_assert(sizeof(TedMenuScreenPage_SetTabs) == 0x000010, "Wrong size on TedMenuScreenPage_SetTabs");
static_assert(offsetof(TedMenuScreenPage_SetTabs, InTabs) == 0x000000, "Member 'TedMenuScreenPage_SetTabs::InTabs' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.SetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_SetTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_SetTitle) == 0x000008, "Wrong alignment on TedMenuScreenPage_SetTitle");
static_assert(sizeof(TedMenuScreenPage_SetTitle) == 0x000010, "Wrong size on TedMenuScreenPage_SetTitle");
static_assert(offsetof(TedMenuScreenPage_SetTitle, InTitle) == 0x000000, "Member 'TedMenuScreenPage_SetTitle::InTitle' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.SetTitles
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_SetTitles final
{
public:
	TArray<class FText>                           InTitles;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_SetTitles) == 0x000008, "Wrong alignment on TedMenuScreenPage_SetTitles");
static_assert(sizeof(TedMenuScreenPage_SetTitles) == 0x000010, "Wrong size on TedMenuScreenPage_SetTitles");
static_assert(offsetof(TedMenuScreenPage_SetTitles, InTitles) == 0x000000, "Member 'TedMenuScreenPage_SetTitles::InTitles' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.GetBackground
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_GetBackground final
{
public:
	const class USlateBrushAsset*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_GetBackground) == 0x000008, "Wrong alignment on TedMenuScreenPage_GetBackground");
static_assert(sizeof(TedMenuScreenPage_GetBackground) == 0x000008, "Wrong size on TedMenuScreenPage_GetBackground");
static_assert(offsetof(TedMenuScreenPage_GetBackground, ReturnValue) == 0x000000, "Member 'TedMenuScreenPage_GetBackground::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.GetButtonsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_GetButtonsPanel final
{
public:
	class UTedContentPanelInstanced*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_GetButtonsPanel) == 0x000008, "Wrong alignment on TedMenuScreenPage_GetButtonsPanel");
static_assert(sizeof(TedMenuScreenPage_GetButtonsPanel) == 0x000008, "Wrong size on TedMenuScreenPage_GetButtonsPanel");
static_assert(offsetof(TedMenuScreenPage_GetButtonsPanel, ReturnValue) == 0x000000, "Member 'TedMenuScreenPage_GetButtonsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.GetTabsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenPage_GetTabsPanel final
{
public:
	class UTedContentPanelInstanced*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_GetTabsPanel) == 0x000008, "Wrong alignment on TedMenuScreenPage_GetTabsPanel");
static_assert(sizeof(TedMenuScreenPage_GetTabsPanel) == 0x000008, "Wrong size on TedMenuScreenPage_GetTabsPanel");
static_assert(offsetof(TedMenuScreenPage_GetTabsPanel, ReturnValue) == 0x000000, "Member 'TedMenuScreenPage_GetTabsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenPage_GetTitle final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_GetTitle) == 0x000008, "Wrong alignment on TedMenuScreenPage_GetTitle");
static_assert(sizeof(TedMenuScreenPage_GetTitle) == 0x000018, "Wrong size on TedMenuScreenPage_GetTitle");
static_assert(offsetof(TedMenuScreenPage_GetTitle, InIndex) == 0x000000, "Member 'TedMenuScreenPage_GetTitle::InIndex' has a wrong offset!");
static_assert(offsetof(TedMenuScreenPage_GetTitle, ReturnValue) == 0x000008, "Member 'TedMenuScreenPage_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenPage.GetTitles
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenPage_GetTitles final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenPage_GetTitles) == 0x000008, "Wrong alignment on TedMenuScreenPage_GetTitles");
static_assert(sizeof(TedMenuScreenPage_GetTitles) == 0x000010, "Wrong size on TedMenuScreenPage_GetTitles");
static_assert(offsetof(TedMenuScreenPage_GetTitles, ReturnValue) == 0x000000, "Member 'TedMenuScreenPage_GetTitles::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_DismantleStructure.SpawnUnit
// 0x0010 (0x0010 - 0x0000)
struct TedAbility_DismantleStructure_SpawnUnit final
{
public:
	bool                                          bFinishSpawningManually;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedUnitBase*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_DismantleStructure_SpawnUnit) == 0x000008, "Wrong alignment on TedAbility_DismantleStructure_SpawnUnit");
static_assert(sizeof(TedAbility_DismantleStructure_SpawnUnit) == 0x000010, "Wrong size on TedAbility_DismantleStructure_SpawnUnit");
static_assert(offsetof(TedAbility_DismantleStructure_SpawnUnit, bFinishSpawningManually) == 0x000000, "Member 'TedAbility_DismantleStructure_SpawnUnit::bFinishSpawningManually' has a wrong offset!");
static_assert(offsetof(TedAbility_DismantleStructure_SpawnUnit, ReturnValue) == 0x000008, "Member 'TedAbility_DismantleStructure_SpawnUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.AddLocalMarketingMessage
// 0x0018 (0x0018 - 0x0000)
struct TedChatSubsystem_AddLocalMarketingMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_AddLocalMarketingMessage) == 0x000008, "Wrong alignment on TedChatSubsystem_AddLocalMarketingMessage");
static_assert(sizeof(TedChatSubsystem_AddLocalMarketingMessage) == 0x000018, "Wrong size on TedChatSubsystem_AddLocalMarketingMessage");
static_assert(offsetof(TedChatSubsystem_AddLocalMarketingMessage, Message) == 0x000000, "Member 'TedChatSubsystem_AddLocalMarketingMessage::Message' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_AddLocalMarketingMessage, ReturnValue) == 0x000010, "Member 'TedChatSubsystem_AddLocalMarketingMessage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.AddLocalMessage
// 0x0030 (0x0030 - 0x0000)
struct TedChatSubsystem_AddLocalMessage final
{
public:
	EChatMessageSender                            Sender;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SenderName;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_AddLocalMessage) == 0x000008, "Wrong alignment on TedChatSubsystem_AddLocalMessage");
static_assert(sizeof(TedChatSubsystem_AddLocalMessage) == 0x000030, "Wrong size on TedChatSubsystem_AddLocalMessage");
static_assert(offsetof(TedChatSubsystem_AddLocalMessage, Sender) == 0x000000, "Member 'TedChatSubsystem_AddLocalMessage::Sender' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_AddLocalMessage, SenderName) == 0x000008, "Member 'TedChatSubsystem_AddLocalMessage::SenderName' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_AddLocalMessage, Message) == 0x000018, "Member 'TedChatSubsystem_AddLocalMessage::Message' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_AddLocalMessage, ReturnValue) == 0x000028, "Member 'TedChatSubsystem_AddLocalMessage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.AddLocalSystemMessage
// 0x0018 (0x0018 - 0x0000)
struct TedChatSubsystem_AddLocalSystemMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_AddLocalSystemMessage) == 0x000008, "Wrong alignment on TedChatSubsystem_AddLocalSystemMessage");
static_assert(sizeof(TedChatSubsystem_AddLocalSystemMessage) == 0x000018, "Wrong size on TedChatSubsystem_AddLocalSystemMessage");
static_assert(offsetof(TedChatSubsystem_AddLocalSystemMessage, Message) == 0x000000, "Member 'TedChatSubsystem_AddLocalSystemMessage::Message' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_AddLocalSystemMessage, ReturnValue) == 0x000010, "Member 'TedChatSubsystem_AddLocalSystemMessage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.GetMessageHistory
// 0x0010 (0x0010 - 0x0000)
struct TedChatSubsystem_GetMessageHistory final
{
public:
	TArray<struct FTedChatMessage>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatSubsystem_GetMessageHistory) == 0x000008, "Wrong alignment on TedChatSubsystem_GetMessageHistory");
static_assert(sizeof(TedChatSubsystem_GetMessageHistory) == 0x000010, "Wrong size on TedChatSubsystem_GetMessageHistory");
static_assert(offsetof(TedChatSubsystem_GetMessageHistory, ReturnValue) == 0x000000, "Member 'TedChatSubsystem_GetMessageHistory::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.SendMessage
// 0x0020 (0x0020 - 0x0000)
struct TedChatSubsystem_SendMessage final
{
public:
	EChatMessageSender                            Sender;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InMessage;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_SendMessage) == 0x000008, "Wrong alignment on TedChatSubsystem_SendMessage");
static_assert(sizeof(TedChatSubsystem_SendMessage) == 0x000020, "Wrong size on TedChatSubsystem_SendMessage");
static_assert(offsetof(TedChatSubsystem_SendMessage, Sender) == 0x000000, "Member 'TedChatSubsystem_SendMessage::Sender' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_SendMessage, InMessage) == 0x000008, "Member 'TedChatSubsystem_SendMessage::InMessage' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_SendMessage, ReturnValue) == 0x000018, "Member 'TedChatSubsystem_SendMessage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.SendTeamMessage
// 0x0018 (0x0018 - 0x0000)
struct TedChatSubsystem_SendTeamMessage final
{
public:
	class FString                                 InMessage;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_SendTeamMessage) == 0x000008, "Wrong alignment on TedChatSubsystem_SendTeamMessage");
static_assert(sizeof(TedChatSubsystem_SendTeamMessage) == 0x000018, "Wrong size on TedChatSubsystem_SendTeamMessage");
static_assert(offsetof(TedChatSubsystem_SendTeamMessage, InMessage) == 0x000000, "Member 'TedChatSubsystem_SendTeamMessage::InMessage' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_SendTeamMessage, ReturnValue) == 0x000010, "Member 'TedChatSubsystem_SendTeamMessage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.SendWhisper
// 0x0028 (0x0028 - 0x0000)
struct TedChatSubsystem_SendWhisper final
{
public:
	class FString                                 DestinationPlayerId;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InMessage;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatSubsystem_SendWhisper) == 0x000008, "Wrong alignment on TedChatSubsystem_SendWhisper");
static_assert(sizeof(TedChatSubsystem_SendWhisper) == 0x000028, "Wrong size on TedChatSubsystem_SendWhisper");
static_assert(offsetof(TedChatSubsystem_SendWhisper, DestinationPlayerId) == 0x000000, "Member 'TedChatSubsystem_SendWhisper::DestinationPlayerId' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_SendWhisper, InMessage) == 0x000010, "Member 'TedChatSubsystem_SendWhisper::InMessage' has a wrong offset!");
static_assert(offsetof(TedChatSubsystem_SendWhisper, ReturnValue) == 0x000020, "Member 'TedChatSubsystem_SendWhisper::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatSubsystem.SetSenderType
// 0x0001 (0x0001 - 0x0000)
struct TedChatSubsystem_SetSenderType final
{
public:
	EChatMessageSender                            InSenderType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatSubsystem_SetSenderType) == 0x000001, "Wrong alignment on TedChatSubsystem_SetSenderType");
static_assert(sizeof(TedChatSubsystem_SetSenderType) == 0x000001, "Wrong size on TedChatSubsystem_SetSenderType");
static_assert(offsetof(TedChatSubsystem_SetSenderType, InSenderType) == 0x000000, "Member 'TedChatSubsystem_SetSenderType::InSenderType' has a wrong offset!");

// Function Tempest.UIDataProvider.GetCreditsUIData
// 0x0020 (0x0020 - 0x0000)
struct UIDataProvider_GetCreditsUIData final
{
public:
	struct FUIData_NameAndDescription             ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDataProvider_GetCreditsUIData) == 0x000008, "Wrong alignment on UIDataProvider_GetCreditsUIData");
static_assert(sizeof(UIDataProvider_GetCreditsUIData) == 0x000020, "Wrong size on UIDataProvider_GetCreditsUIData");
static_assert(offsetof(UIDataProvider_GetCreditsUIData, ReturnValue) == 0x000000, "Member 'UIDataProvider_GetCreditsUIData::ReturnValue' has a wrong offset!");

// Function Tempest.UIDataProvider.GetIntelUIData
// 0x0020 (0x0020 - 0x0000)
struct UIDataProvider_GetIntelUIData final
{
public:
	struct FUIData_NameAndDescription             ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDataProvider_GetIntelUIData) == 0x000008, "Wrong alignment on UIDataProvider_GetIntelUIData");
static_assert(sizeof(UIDataProvider_GetIntelUIData) == 0x000020, "Wrong size on UIDataProvider_GetIntelUIData");
static_assert(offsetof(UIDataProvider_GetIntelUIData, ReturnValue) == 0x000000, "Member 'UIDataProvider_GetIntelUIData::ReturnValue' has a wrong offset!");

// Function Tempest.UIDataProvider.GetPlayerDataStatUIData
// 0x0030 (0x0030 - 0x0000)
struct UIDataProvider_GetPlayerDataStatUIData final
{
public:
	ETedPlayerDataStat                            InStat;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIData_NameAndDescription             Out;                                               // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDataProvider_GetPlayerDataStatUIData) == 0x000008, "Wrong alignment on UIDataProvider_GetPlayerDataStatUIData");
static_assert(sizeof(UIDataProvider_GetPlayerDataStatUIData) == 0x000030, "Wrong size on UIDataProvider_GetPlayerDataStatUIData");
static_assert(offsetof(UIDataProvider_GetPlayerDataStatUIData, InStat) == 0x000000, "Member 'UIDataProvider_GetPlayerDataStatUIData::InStat' has a wrong offset!");
static_assert(offsetof(UIDataProvider_GetPlayerDataStatUIData, Out) == 0x000008, "Member 'UIDataProvider_GetPlayerDataStatUIData::Out' has a wrong offset!");
static_assert(offsetof(UIDataProvider_GetPlayerDataStatUIData, ReturnValue) == 0x000028, "Member 'UIDataProvider_GetPlayerDataStatUIData::ReturnValue' has a wrong offset!");

// Function Tempest.UIDataProvider.GetPowerConsumptionUIData
// 0x0020 (0x0020 - 0x0000)
struct UIDataProvider_GetPowerConsumptionUIData final
{
public:
	struct FUIData_NameAndDescription             ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDataProvider_GetPowerConsumptionUIData) == 0x000008, "Wrong alignment on UIDataProvider_GetPowerConsumptionUIData");
static_assert(sizeof(UIDataProvider_GetPowerConsumptionUIData) == 0x000020, "Wrong size on UIDataProvider_GetPowerConsumptionUIData");
static_assert(offsetof(UIDataProvider_GetPowerConsumptionUIData, ReturnValue) == 0x000000, "Member 'UIDataProvider_GetPowerConsumptionUIData::ReturnValue' has a wrong offset!");

// Function Tempest.UIDataProvider.GetPowerUIData
// 0x0020 (0x0020 - 0x0000)
struct UIDataProvider_GetPowerUIData final
{
public:
	struct FUIData_NameAndDescription             ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDataProvider_GetPowerUIData) == 0x000008, "Wrong alignment on UIDataProvider_GetPowerUIData");
static_assert(sizeof(UIDataProvider_GetPowerUIData) == 0x000020, "Wrong size on UIDataProvider_GetPowerUIData");
static_assert(offsetof(UIDataProvider_GetPowerUIData, ReturnValue) == 0x000000, "Member 'UIDataProvider_GetPowerUIData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand.GetCallInTime
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerCommand_GetCallInTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_GetCallInTime) == 0x000004, "Wrong alignment on TedPlayerCommand_GetCallInTime");
static_assert(sizeof(TedPlayerCommand_GetCallInTime) == 0x000004, "Wrong size on TedPlayerCommand_GetCallInTime");
static_assert(offsetof(TedPlayerCommand_GetCallInTime, ReturnValue) == 0x000000, "Member 'TedPlayerCommand_GetCallInTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand.HasCallInTime
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerCommand_HasCallInTime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_HasCallInTime) == 0x000001, "Wrong alignment on TedPlayerCommand_HasCallInTime");
static_assert(sizeof(TedPlayerCommand_HasCallInTime) == 0x000001, "Wrong size on TedPlayerCommand_HasCallInTime");
static_assert(offsetof(TedPlayerCommand_HasCallInTime, ReturnValue) == 0x000000, "Member 'TedPlayerCommand_HasCallInTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.OnMapScreenClosed
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMapScreenComponent_OnMapScreenClosed final
{
public:
	const class UTedCommandCompoundMapScreen*     InMapScreen;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_OnMapScreenClosed) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_OnMapScreenClosed");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_OnMapScreenClosed) == 0x000010, "Wrong size on TedCommandCompoundMapScreenComponent_OnMapScreenClosed");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnMapScreenClosed, InMapScreen) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_OnMapScreenClosed::InMapScreen' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnMapScreenClosed, InContext) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_OnMapScreenClosed::InContext' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.OnMapScreenOpened
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMapScreenComponent_OnMapScreenOpened final
{
public:
	const class UTedCommandCompoundMapScreen*     InMapScreen;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_OnMapScreenOpened) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_OnMapScreenOpened");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_OnMapScreenOpened) == 0x000010, "Wrong size on TedCommandCompoundMapScreenComponent_OnMapScreenOpened");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnMapScreenOpened, InMapScreen) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_OnMapScreenOpened::InMapScreen' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnMapScreenOpened, InContext) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_OnMapScreenOpened::InContext' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.OnSetVisibilityForStage
// 0x00E8 (0x00E8 - 0x0000)
struct TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage final
{
public:
	const class UTedCommandCompoundMapScreen*     InMapScreen;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCommandCompoundMapScreenVisibilityAction  InAction;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCommandCompoundMapScreenStage             InStage;                                           // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedCommandCompoundMapScreenStageSetup InStageSetup;                                      // 0x0010(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage) == 0x0000E8, "Wrong size on TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage, InMapScreen) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage::InMapScreen' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage, InAction) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage::InAction' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage, InStage) == 0x000009, "Member 'TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage::InStage' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage, InStageSetup) == 0x000010, "Member 'TedCommandCompoundMapScreenComponent_OnSetVisibilityForStage::InStageSetup' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.GetAnimDebugString
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundMapScreenComponent_GetAnimDebugString final
{
public:
	class UWidgetAnimation*                       InAnimation;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_GetAnimDebugString) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_GetAnimDebugString");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_GetAnimDebugString) == 0x000018, "Wrong size on TedCommandCompoundMapScreenComponent_GetAnimDebugString");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_GetAnimDebugString, InAnimation) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_GetAnimDebugString::InAnimation' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_GetAnimDebugString, ReturnValue) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_GetAnimDebugString::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.GetComponentType
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreenComponent_GetComponentType final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_GetComponentType) == 0x000004, "Wrong alignment on TedCommandCompoundMapScreenComponent_GetComponentType");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_GetComponentType) == 0x000008, "Wrong size on TedCommandCompoundMapScreenComponent_GetComponentType");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_GetComponentType, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_GetComponentType::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent.OnAppendDebugStrings
// 0x0020 (0x0020 - 0x0000)
struct TedCommandCompoundMapScreenComponent_OnAppendDebugStrings final
{
public:
	class FString                                 InPrefix;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Out;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_OnAppendDebugStrings) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_OnAppendDebugStrings");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_OnAppendDebugStrings) == 0x000020, "Wrong size on TedCommandCompoundMapScreenComponent_OnAppendDebugStrings");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnAppendDebugStrings, InPrefix) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_OnAppendDebugStrings::InPrefix' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_OnAppendDebugStrings, Out) == 0x000010, "Member 'TedCommandCompoundMapScreenComponent_OnAppendDebugStrings::Out' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Missions.GetRelevantMissionDetailsDataBoxTexture
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture) == 0x000008, "Wrong size on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsDataBoxTexture::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Missions.GetRelevantMissionDetailsTextBoxTexture
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture) == 0x000008, "Wrong size on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsTextBoxTexture::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Missions.GetRelevantMissionDetailsVO
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO) == 0x000008, "Wrong size on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsVO::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Missions.GetRelevantMissionDetailsText
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText) == 0x000010, "Wrong size on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionDetailsText::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Missions.GetRelevantMissionMovie
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie final
{
public:
	ETedCommandCompoundMapScreenMovieType         InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFileMediaSource*                 ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie) == 0x000010, "Wrong size on TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie, InType) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie::InType' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie, ReturnValue) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_Missions_GetRelevantMissionMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetDialogueReadState
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetDialogueReadState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetDialogueReadState) == 0x000001, "Wrong alignment on TedCommandCompoundDialoguePanel_GetDialogueReadState");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetDialogueReadState) == 0x000001, "Wrong size on TedCommandCompoundDialoguePanel_GetDialogueReadState");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetDialogueReadState, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetDialogueReadState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.SetBriefing
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundDialoguePanel_SetBriefing final
{
public:
	const class UTedBriefing*                     InBriefing;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_SetBriefing) == 0x000008, "Wrong alignment on TedCommandCompoundDialoguePanel_SetBriefing");
static_assert(sizeof(TedCommandCompoundDialoguePanel_SetBriefing) == 0x000008, "Wrong size on TedCommandCompoundDialoguePanel_SetBriefing");
static_assert(offsetof(TedCommandCompoundDialoguePanel_SetBriefing, InBriefing) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_SetBriefing::InBriefing' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundDialoguePanel_SetContent final
{
public:
	TArray<struct FTedDialogueLine>               InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_SetContent) == 0x000008, "Wrong alignment on TedCommandCompoundDialoguePanel_SetContent");
static_assert(sizeof(TedCommandCompoundDialoguePanel_SetContent) == 0x000010, "Wrong size on TedCommandCompoundDialoguePanel_SetContent");
static_assert(offsetof(TedCommandCompoundDialoguePanel_SetContent, InContent) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetBriefing
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetBriefing final
{
public:
	const class UTedBriefing*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetBriefing) == 0x000008, "Wrong alignment on TedCommandCompoundDialoguePanel_GetBriefing");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetBriefing) == 0x000008, "Wrong size on TedCommandCompoundDialoguePanel_GetBriefing");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetBriefing, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetBriefing::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetContent
// 0x0050 (0x0050 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetContent final
{
public:
	int32                                         InContentIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedDialogueLine                       OutContent;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetContent) == 0x000008, "Wrong alignment on TedCommandCompoundDialoguePanel_GetContent");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetContent) == 0x000050, "Wrong size on TedCommandCompoundDialoguePanel_GetContent");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetContent, InContentIndex) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetContent::InContentIndex' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetContent, OutContent) == 0x000008, "Member 'TedCommandCompoundDialoguePanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetContent, ReturnValue) == 0x000048, "Member 'TedCommandCompoundDialoguePanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetContentIndex
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetContentIndex final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetContentIndex) == 0x000004, "Wrong alignment on TedCommandCompoundDialoguePanel_GetContentIndex");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetContentIndex) == 0x000008, "Wrong size on TedCommandCompoundDialoguePanel_GetContentIndex");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetContentIndex, InSlotIndex) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetContentIndex::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetContentIndex, ReturnValue) == 0x000004, "Member 'TedCommandCompoundDialoguePanel_GetContentIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetPlayingResponseIndex
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetPlayingResponseIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetPlayingResponseIndex) == 0x000004, "Wrong alignment on TedCommandCompoundDialoguePanel_GetPlayingResponseIndex");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetPlayingResponseIndex) == 0x000004, "Wrong size on TedCommandCompoundDialoguePanel_GetPlayingResponseIndex");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetPlayingResponseIndex, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetPlayingResponseIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundDialoguePanel_GetSlotIndex final
{
public:
	int32                                         InContentIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_GetSlotIndex) == 0x000004, "Wrong alignment on TedCommandCompoundDialoguePanel_GetSlotIndex");
static_assert(sizeof(TedCommandCompoundDialoguePanel_GetSlotIndex) == 0x000008, "Wrong size on TedCommandCompoundDialoguePanel_GetSlotIndex");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetSlotIndex, InContentIndex) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_GetSlotIndex::InContentIndex' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_GetSlotIndex, ReturnValue) == 0x000004, "Member 'TedCommandCompoundDialoguePanel_GetSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.IsFinishingOption
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundDialoguePanel_IsFinishingOption final
{
public:
	int32                                         InContentIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundDialoguePanel_IsFinishingOption) == 0x000004, "Wrong alignment on TedCommandCompoundDialoguePanel_IsFinishingOption");
static_assert(sizeof(TedCommandCompoundDialoguePanel_IsFinishingOption) == 0x000008, "Wrong size on TedCommandCompoundDialoguePanel_IsFinishingOption");
static_assert(offsetof(TedCommandCompoundDialoguePanel_IsFinishingOption, InContentIndex) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_IsFinishingOption::InContentIndex' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_IsFinishingOption, ReturnValue) == 0x000004, "Member 'TedCommandCompoundDialoguePanel_IsFinishingOption::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.IsPlayingResponse
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundDialoguePanel_IsPlayingResponse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_IsPlayingResponse) == 0x000001, "Wrong alignment on TedCommandCompoundDialoguePanel_IsPlayingResponse");
static_assert(sizeof(TedCommandCompoundDialoguePanel_IsPlayingResponse) == 0x000001, "Wrong size on TedCommandCompoundDialoguePanel_IsPlayingResponse");
static_assert(offsetof(TedCommandCompoundDialoguePanel_IsPlayingResponse, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_IsPlayingResponse::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDialoguePanel.IsPlayingResponseOfType
// 0x0002 (0x0002 - 0x0000)
struct TedCommandCompoundDialoguePanel_IsPlayingResponseOfType final
{
public:
	ETedDialogueLineType                          InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDialoguePanel_IsPlayingResponseOfType) == 0x000001, "Wrong alignment on TedCommandCompoundDialoguePanel_IsPlayingResponseOfType");
static_assert(sizeof(TedCommandCompoundDialoguePanel_IsPlayingResponseOfType) == 0x000002, "Wrong size on TedCommandCompoundDialoguePanel_IsPlayingResponseOfType");
static_assert(offsetof(TedCommandCompoundDialoguePanel_IsPlayingResponseOfType, InType) == 0x000000, "Member 'TedCommandCompoundDialoguePanel_IsPlayingResponseOfType::InType' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDialoguePanel_IsPlayingResponseOfType, ReturnValue) == 0x000001, "Member 'TedCommandCompoundDialoguePanel_IsPlayingResponseOfType::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_LayMines.LayMinefield
// 0x0018 (0x0018 - 0x0000)
struct TedAbility_LayMines_LayMinefield final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_LayMines_LayMinefield) == 0x000008, "Wrong alignment on TedAbility_LayMines_LayMinefield");
static_assert(sizeof(TedAbility_LayMines_LayMinefield) == 0x000018, "Wrong size on TedAbility_LayMines_LayMinefield");
static_assert(offsetof(TedAbility_LayMines_LayMinefield, InLocation) == 0x000000, "Member 'TedAbility_LayMines_LayMinefield::InLocation' has a wrong offset!");

// Function Tempest.TedCheatManager.Objective_ListAvailable
// 0x0018 (0x0018 - 0x0000)
struct TedCheatManager_Objective_ListAvailable final
{
public:
	bool                                          bLog;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTedObjectiveObj*>               ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_Objective_ListAvailable) == 0x000008, "Wrong alignment on TedCheatManager_Objective_ListAvailable");
static_assert(sizeof(TedCheatManager_Objective_ListAvailable) == 0x000018, "Wrong size on TedCheatManager_Objective_ListAvailable");
static_assert(offsetof(TedCheatManager_Objective_ListAvailable, bLog) == 0x000000, "Member 'TedCheatManager_Objective_ListAvailable::bLog' has a wrong offset!");
static_assert(offsetof(TedCheatManager_Objective_ListAvailable, ReturnValue) == 0x000008, "Member 'TedCheatManager_Objective_ListAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedCheatManager.AddCash
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_AddCash final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_AddCash) == 0x000004, "Wrong alignment on TedCheatManager_AddCash");
static_assert(sizeof(TedCheatManager_AddCash) == 0x000004, "Wrong size on TedCheatManager_AddCash");
static_assert(offsetof(TedCheatManager_AddCash, Value) == 0x000000, "Member 'TedCheatManager_AddCash::Value' has a wrong offset!");

// Function Tempest.TedCheatManager.AddCashCap
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_AddCashCap final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_AddCashCap) == 0x000004, "Wrong alignment on TedCheatManager_AddCashCap");
static_assert(sizeof(TedCheatManager_AddCashCap) == 0x000004, "Wrong size on TedCheatManager_AddCashCap");
static_assert(offsetof(TedCheatManager_AddCashCap, Value) == 0x000000, "Member 'TedCheatManager_AddCashCap::Value' has a wrong offset!");

// Function Tempest.TedCheatManager.AddIntel
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_AddIntel final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_AddIntel) == 0x000004, "Wrong alignment on TedCheatManager_AddIntel");
static_assert(sizeof(TedCheatManager_AddIntel) == 0x000004, "Wrong size on TedCheatManager_AddIntel");
static_assert(offsetof(TedCheatManager_AddIntel, Value) == 0x000000, "Member 'TedCheatManager_AddIntel::Value' has a wrong offset!");

// Function Tempest.TedCheatManager.AddPower
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_AddPower final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_AddPower) == 0x000004, "Wrong alignment on TedCheatManager_AddPower");
static_assert(sizeof(TedCheatManager_AddPower) == 0x000004, "Wrong size on TedCheatManager_AddPower");
static_assert(offsetof(TedCheatManager_AddPower, Value) == 0x000000, "Member 'TedCheatManager_AddPower::Value' has a wrong offset!");

// Function Tempest.TedCheatManager.BlockPlayerUnitDamage
// 0x0001 (0x0001 - 0x0000)
struct TedCheatManager_BlockPlayerUnitDamage final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_BlockPlayerUnitDamage) == 0x000001, "Wrong alignment on TedCheatManager_BlockPlayerUnitDamage");
static_assert(sizeof(TedCheatManager_BlockPlayerUnitDamage) == 0x000001, "Wrong size on TedCheatManager_BlockPlayerUnitDamage");
static_assert(offsetof(TedCheatManager_BlockPlayerUnitDamage, bEnable) == 0x000000, "Member 'TedCheatManager_BlockPlayerUnitDamage::bEnable' has a wrong offset!");

// Function Tempest.TedCheatManager.ChangeDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TedCheatManager_ChangeDifficulty final
{
public:
	uint8                                         InDifficulty;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_ChangeDifficulty) == 0x000001, "Wrong alignment on TedCheatManager_ChangeDifficulty");
static_assert(sizeof(TedCheatManager_ChangeDifficulty) == 0x000001, "Wrong size on TedCheatManager_ChangeDifficulty");
static_assert(offsetof(TedCheatManager_ChangeDifficulty, InDifficulty) == 0x000000, "Member 'TedCheatManager_ChangeDifficulty::InDifficulty' has a wrong offset!");

// Function Tempest.TedCheatManager.DealDamageToSelectedPawns
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_DealDamageToSelectedPawns final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DealDamageToSelectedPawns) == 0x000004, "Wrong alignment on TedCheatManager_DealDamageToSelectedPawns");
static_assert(sizeof(TedCheatManager_DealDamageToSelectedPawns) == 0x000004, "Wrong size on TedCheatManager_DealDamageToSelectedPawns");
static_assert(offsetof(TedCheatManager_DealDamageToSelectedPawns, DamageAmount) == 0x000000, "Member 'TedCheatManager_DealDamageToSelectedPawns::DamageAmount' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugAddExperience
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_DebugAddExperience final
{
public:
	float                                         experience;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugAddExperience) == 0x000004, "Wrong alignment on TedCheatManager_DebugAddExperience");
static_assert(sizeof(TedCheatManager_DebugAddExperience) == 0x000004, "Wrong size on TedCheatManager_DebugAddExperience");
static_assert(offsetof(TedCheatManager_DebugAddExperience, experience) == 0x000000, "Member 'TedCheatManager_DebugAddExperience::experience' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugConstructBlueprintWidget
// 0x0018 (0x0018 - 0x0000)
struct TedCheatManager_DebugConstructBlueprintWidget final
{
public:
	class FString                                 WidgetPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugConstructBlueprintWidget) == 0x000008, "Wrong alignment on TedCheatManager_DebugConstructBlueprintWidget");
static_assert(sizeof(TedCheatManager_DebugConstructBlueprintWidget) == 0x000018, "Wrong size on TedCheatManager_DebugConstructBlueprintWidget");
static_assert(offsetof(TedCheatManager_DebugConstructBlueprintWidget, WidgetPath) == 0x000000, "Member 'TedCheatManager_DebugConstructBlueprintWidget::WidgetPath' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugConstructBlueprintWidget, ZOrder) == 0x000010, "Member 'TedCheatManager_DebugConstructBlueprintWidget::ZOrder' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugEndMission
// 0x0001 (0x0001 - 0x0000)
struct TedCheatManager_DebugEndMission final
{
public:
	bool                                          bVictory;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugEndMission) == 0x000001, "Wrong alignment on TedCheatManager_DebugEndMission");
static_assert(sizeof(TedCheatManager_DebugEndMission) == 0x000001, "Wrong size on TedCheatManager_DebugEndMission");
static_assert(offsetof(TedCheatManager_DebugEndMission, bVictory) == 0x000000, "Member 'TedCheatManager_DebugEndMission::bVictory' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugPlayFullscreenMovie
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_DebugPlayFullscreenMovie final
{
public:
	class FString                                 InAssetName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugPlayFullscreenMovie) == 0x000008, "Wrong alignment on TedCheatManager_DebugPlayFullscreenMovie");
static_assert(sizeof(TedCheatManager_DebugPlayFullscreenMovie) == 0x000010, "Wrong size on TedCheatManager_DebugPlayFullscreenMovie");
static_assert(offsetof(TedCheatManager_DebugPlayFullscreenMovie, InAssetName) == 0x000000, "Member 'TedCheatManager_DebugPlayFullscreenMovie::InAssetName' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugPlayMissionDialogue
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_DebugPlayMissionDialogue final
{
public:
	class FString                                 InAssetName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugPlayMissionDialogue) == 0x000008, "Wrong alignment on TedCheatManager_DebugPlayMissionDialogue");
static_assert(sizeof(TedCheatManager_DebugPlayMissionDialogue) == 0x000010, "Wrong size on TedCheatManager_DebugPlayMissionDialogue");
static_assert(offsetof(TedCheatManager_DebugPlayMissionDialogue, InAssetName) == 0x000000, "Member 'TedCheatManager_DebugPlayMissionDialogue::InAssetName' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugPlayMovie
// 0x0020 (0x0020 - 0x0000)
struct TedCheatManager_DebugPlayMovie final
{
public:
	class FString                                 InAssetName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieType                                 InMovieType;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSilent;                                         // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InFadeIn;                                          // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFadeOut;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieGamePauseInteraction                 InPauseInteraction;                                // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugPlayMovie) == 0x000008, "Wrong alignment on TedCheatManager_DebugPlayMovie");
static_assert(sizeof(TedCheatManager_DebugPlayMovie) == 0x000020, "Wrong size on TedCheatManager_DebugPlayMovie");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, InAssetName) == 0x000000, "Member 'TedCheatManager_DebugPlayMovie::InAssetName' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, InMovieType) == 0x000010, "Member 'TedCheatManager_DebugPlayMovie::InMovieType' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, bInSilent) == 0x000011, "Member 'TedCheatManager_DebugPlayMovie::bInSilent' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, bInLoop) == 0x000012, "Member 'TedCheatManager_DebugPlayMovie::bInLoop' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, InFadeIn) == 0x000014, "Member 'TedCheatManager_DebugPlayMovie::InFadeIn' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, InFadeOut) == 0x000018, "Member 'TedCheatManager_DebugPlayMovie::InFadeOut' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugPlayMovie, InPauseInteraction) == 0x00001C, "Member 'TedCheatManager_DebugPlayMovie::InPauseInteraction' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSetActorComponentTickEnabled
// 0x0018 (0x0018 - 0x0000)
struct TedCheatManager_DebugSetActorComponentTickEnabled final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSetActorComponentTickEnabled) == 0x000008, "Wrong alignment on TedCheatManager_DebugSetActorComponentTickEnabled");
static_assert(sizeof(TedCheatManager_DebugSetActorComponentTickEnabled) == 0x000018, "Wrong size on TedCheatManager_DebugSetActorComponentTickEnabled");
static_assert(offsetof(TedCheatManager_DebugSetActorComponentTickEnabled, ActorClass) == 0x000000, "Member 'TedCheatManager_DebugSetActorComponentTickEnabled::ActorClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetActorComponentTickEnabled, ComponentClass) == 0x000008, "Member 'TedCheatManager_DebugSetActorComponentTickEnabled::ComponentClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetActorComponentTickEnabled, bEnable) == 0x000010, "Member 'TedCheatManager_DebugSetActorComponentTickEnabled::bEnable' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSetActorTickEnabled
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_DebugSetActorTickEnabled final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSetActorTickEnabled) == 0x000008, "Wrong alignment on TedCheatManager_DebugSetActorTickEnabled");
static_assert(sizeof(TedCheatManager_DebugSetActorTickEnabled) == 0x000010, "Wrong size on TedCheatManager_DebugSetActorTickEnabled");
static_assert(offsetof(TedCheatManager_DebugSetActorTickEnabled, ActorClass) == 0x000000, "Member 'TedCheatManager_DebugSetActorTickEnabled::ActorClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetActorTickEnabled, bEnable) == 0x000008, "Member 'TedCheatManager_DebugSetActorTickEnabled::bEnable' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSetAllowPlayerCommands
// 0x0002 (0x0002 - 0x0000)
struct TedCheatManager_DebugSetAllowPlayerCommands final
{
public:
	uint8                                         PlayerID;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllow;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugSetAllowPlayerCommands) == 0x000001, "Wrong alignment on TedCheatManager_DebugSetAllowPlayerCommands");
static_assert(sizeof(TedCheatManager_DebugSetAllowPlayerCommands) == 0x000002, "Wrong size on TedCheatManager_DebugSetAllowPlayerCommands");
static_assert(offsetof(TedCheatManager_DebugSetAllowPlayerCommands, PlayerID) == 0x000000, "Member 'TedCheatManager_DebugSetAllowPlayerCommands::PlayerID' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetAllowPlayerCommands, bAllow) == 0x000001, "Member 'TedCheatManager_DebugSetAllowPlayerCommands::bAllow' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSetComponentTickEnabled
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_DebugSetComponentTickEnabled final
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSetComponentTickEnabled) == 0x000008, "Wrong alignment on TedCheatManager_DebugSetComponentTickEnabled");
static_assert(sizeof(TedCheatManager_DebugSetComponentTickEnabled) == 0x000010, "Wrong size on TedCheatManager_DebugSetComponentTickEnabled");
static_assert(offsetof(TedCheatManager_DebugSetComponentTickEnabled, ComponentClass) == 0x000000, "Member 'TedCheatManager_DebugSetComponentTickEnabled::ComponentClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetComponentTickEnabled, bEnable) == 0x000008, "Member 'TedCheatManager_DebugSetComponentTickEnabled::bEnable' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSetLockedSupportPower
// 0x0018 (0x0018 - 0x0000)
struct TedCheatManager_DebugSetLockedSupportPower final
{
public:
	uint8                                         PlayerID;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SupportPowerCommandType;                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugSetLockedSupportPower) == 0x000008, "Wrong alignment on TedCheatManager_DebugSetLockedSupportPower");
static_assert(sizeof(TedCheatManager_DebugSetLockedSupportPower) == 0x000018, "Wrong size on TedCheatManager_DebugSetLockedSupportPower");
static_assert(offsetof(TedCheatManager_DebugSetLockedSupportPower, PlayerID) == 0x000000, "Member 'TedCheatManager_DebugSetLockedSupportPower::PlayerID' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetLockedSupportPower, bLock) == 0x000001, "Member 'TedCheatManager_DebugSetLockedSupportPower::bLock' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSetLockedSupportPower, SupportPowerCommandType) == 0x000008, "Member 'TedCheatManager_DebugSetLockedSupportPower::SupportPowerCommandType' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSpawnUnit
// 0x0030 (0x0030 - 0x0000)
struct TedCheatManager_DebugSpawnUnit final
{
public:
	TSoftClassPtr<class UClass>                   UnitClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSpawnUnit) == 0x000008, "Wrong alignment on TedCheatManager_DebugSpawnUnit");
static_assert(sizeof(TedCheatManager_DebugSpawnUnit) == 0x000030, "Wrong size on TedCheatManager_DebugSpawnUnit");
static_assert(offsetof(TedCheatManager_DebugSpawnUnit, UnitClass) == 0x000000, "Member 'TedCheatManager_DebugSpawnUnit::UnitClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnit, NumToSpawn) == 0x000028, "Member 'TedCheatManager_DebugSpawnUnit::NumToSpawn' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnit, PlayerID) == 0x00002C, "Member 'TedCheatManager_DebugSpawnUnit::PlayerID' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSpawnUnitByName
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_DebugSpawnUnitByName final
{
public:
	class FName                                   UnitName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSpawnUnitByName) == 0x000004, "Wrong alignment on TedCheatManager_DebugSpawnUnitByName");
static_assert(sizeof(TedCheatManager_DebugSpawnUnitByName) == 0x000010, "Wrong size on TedCheatManager_DebugSpawnUnitByName");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitByName, UnitName) == 0x000000, "Member 'TedCheatManager_DebugSpawnUnitByName::UnitName' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitByName, NumToSpawn) == 0x000008, "Member 'TedCheatManager_DebugSpawnUnitByName::NumToSpawn' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitByName, PlayerID) == 0x00000C, "Member 'TedCheatManager_DebugSpawnUnitByName::PlayerID' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugSpawnUnitDistributed
// 0x0038 (0x0038 - 0x0000)
struct TedCheatManager_DebugSpawnUnitDistributed final
{
public:
	TSoftClassPtr<class UClass>                   UnitClass;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_DebugSpawnUnitDistributed) == 0x000008, "Wrong alignment on TedCheatManager_DebugSpawnUnitDistributed");
static_assert(sizeof(TedCheatManager_DebugSpawnUnitDistributed) == 0x000038, "Wrong size on TedCheatManager_DebugSpawnUnitDistributed");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitDistributed, UnitClass) == 0x000000, "Member 'TedCheatManager_DebugSpawnUnitDistributed::UnitClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitDistributed, NumToSpawn) == 0x000028, "Member 'TedCheatManager_DebugSpawnUnitDistributed::NumToSpawn' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitDistributed, RandomSeed) == 0x00002C, "Member 'TedCheatManager_DebugSpawnUnitDistributed::RandomSeed' has a wrong offset!");
static_assert(offsetof(TedCheatManager_DebugSpawnUnitDistributed, PlayerID) == 0x000030, "Member 'TedCheatManager_DebugSpawnUnitDistributed::PlayerID' has a wrong offset!");

// Function Tempest.TedCheatManager.DebugToggleShowDebugCategory
// 0x0008 (0x0008 - 0x0000)
struct TedCheatManager_DebugToggleShowDebugCategory final
{
public:
	class FName                                   Category;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_DebugToggleShowDebugCategory) == 0x000004, "Wrong alignment on TedCheatManager_DebugToggleShowDebugCategory");
static_assert(sizeof(TedCheatManager_DebugToggleShowDebugCategory) == 0x000008, "Wrong size on TedCheatManager_DebugToggleShowDebugCategory");
static_assert(offsetof(TedCheatManager_DebugToggleShowDebugCategory, Category) == 0x000000, "Member 'TedCheatManager_DebugToggleShowDebugCategory::Category' has a wrong offset!");

// Function Tempest.TedCheatManager.KillUnitsOnScreen
// 0x0002 (0x0002 - 0x0000)
struct TedCheatManager_KillUnitsOnScreen final
{
public:
	EKillAllPawns                                 Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeStructures;                                 // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_KillUnitsOnScreen) == 0x000001, "Wrong alignment on TedCheatManager_KillUnitsOnScreen");
static_assert(sizeof(TedCheatManager_KillUnitsOnScreen) == 0x000002, "Wrong size on TedCheatManager_KillUnitsOnScreen");
static_assert(offsetof(TedCheatManager_KillUnitsOnScreen, Type) == 0x000000, "Member 'TedCheatManager_KillUnitsOnScreen::Type' has a wrong offset!");
static_assert(offsetof(TedCheatManager_KillUnitsOnScreen, IncludeStructures) == 0x000001, "Member 'TedCheatManager_KillUnitsOnScreen::IncludeStructures' has a wrong offset!");

// Function Tempest.TedCheatManager.LoadGame
// 0x0028 (0x0028 - 0x0000)
struct TedCheatManager_LoadGame final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileName;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubDir;                                            // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_LoadGame) == 0x000008, "Wrong alignment on TedCheatManager_LoadGame");
static_assert(sizeof(TedCheatManager_LoadGame) == 0x000028, "Wrong size on TedCheatManager_LoadGame");
static_assert(offsetof(TedCheatManager_LoadGame, SlotName) == 0x000000, "Member 'TedCheatManager_LoadGame::SlotName' has a wrong offset!");
static_assert(offsetof(TedCheatManager_LoadGame, ProfileName) == 0x000008, "Member 'TedCheatManager_LoadGame::ProfileName' has a wrong offset!");
static_assert(offsetof(TedCheatManager_LoadGame, SubDir) == 0x000018, "Member 'TedCheatManager_LoadGame::SubDir' has a wrong offset!");

// Function Tempest.TedCheatManager.MakeShitloadOfSaves
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_MakeShitloadOfSaves final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_MakeShitloadOfSaves) == 0x000004, "Wrong alignment on TedCheatManager_MakeShitloadOfSaves");
static_assert(sizeof(TedCheatManager_MakeShitloadOfSaves) == 0x000004, "Wrong size on TedCheatManager_MakeShitloadOfSaves");
static_assert(offsetof(TedCheatManager_MakeShitloadOfSaves, Amount) == 0x000000, "Member 'TedCheatManager_MakeShitloadOfSaves::Amount' has a wrong offset!");

// Function Tempest.TedCheatManager.Objective_Activate
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_Objective_Activate final
{
public:
	class FString                                 InObjectiveSubstring;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_Objective_Activate) == 0x000008, "Wrong alignment on TedCheatManager_Objective_Activate");
static_assert(sizeof(TedCheatManager_Objective_Activate) == 0x000010, "Wrong size on TedCheatManager_Objective_Activate");
static_assert(offsetof(TedCheatManager_Objective_Activate, InObjectiveSubstring) == 0x000000, "Member 'TedCheatManager_Objective_Activate::InObjectiveSubstring' has a wrong offset!");

// Function Tempest.TedCheatManager.Objective_Deactivate
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_Objective_Deactivate final
{
public:
	class FString                                 InObjectiveSubstring;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_Objective_Deactivate) == 0x000008, "Wrong alignment on TedCheatManager_Objective_Deactivate");
static_assert(sizeof(TedCheatManager_Objective_Deactivate) == 0x000010, "Wrong size on TedCheatManager_Objective_Deactivate");
static_assert(offsetof(TedCheatManager_Objective_Deactivate, InObjectiveSubstring) == 0x000000, "Member 'TedCheatManager_Objective_Deactivate::InObjectiveSubstring' has a wrong offset!");

// Function Tempest.TedCheatManager.Objective_Fail
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_Objective_Fail final
{
public:
	class FString                                 InObjectiveSubstring;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_Objective_Fail) == 0x000008, "Wrong alignment on TedCheatManager_Objective_Fail");
static_assert(sizeof(TedCheatManager_Objective_Fail) == 0x000010, "Wrong size on TedCheatManager_Objective_Fail");
static_assert(offsetof(TedCheatManager_Objective_Fail, InObjectiveSubstring) == 0x000000, "Member 'TedCheatManager_Objective_Fail::InObjectiveSubstring' has a wrong offset!");

// Function Tempest.TedCheatManager.Objective_Succeed
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_Objective_Succeed final
{
public:
	class FString                                 InObjectiveSubstring;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_Objective_Succeed) == 0x000008, "Wrong alignment on TedCheatManager_Objective_Succeed");
static_assert(sizeof(TedCheatManager_Objective_Succeed) == 0x000010, "Wrong size on TedCheatManager_Objective_Succeed");
static_assert(offsetof(TedCheatManager_Objective_Succeed, InObjectiveSubstring) == 0x000000, "Member 'TedCheatManager_Objective_Succeed::InObjectiveSubstring' has a wrong offset!");

// Function Tempest.TedCheatManager.OpenMenuScreen
// 0x0010 (0x0010 - 0x0000)
struct TedCheatManager_OpenMenuScreen final
{
public:
	class FString                                 ScreenSubstring;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_OpenMenuScreen) == 0x000008, "Wrong alignment on TedCheatManager_OpenMenuScreen");
static_assert(sizeof(TedCheatManager_OpenMenuScreen) == 0x000010, "Wrong size on TedCheatManager_OpenMenuScreen");
static_assert(offsetof(TedCheatManager_OpenMenuScreen, ScreenSubstring) == 0x000000, "Member 'TedCheatManager_OpenMenuScreen::ScreenSubstring' has a wrong offset!");

// Function Tempest.TedCheatManager.SaveGame
// 0x0008 (0x0008 - 0x0000)
struct TedCheatManager_SaveGame final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_SaveGame) == 0x000004, "Wrong alignment on TedCheatManager_SaveGame");
static_assert(sizeof(TedCheatManager_SaveGame) == 0x000008, "Wrong size on TedCheatManager_SaveGame");
static_assert(offsetof(TedCheatManager_SaveGame, SlotName) == 0x000000, "Member 'TedCheatManager_SaveGame::SlotName' has a wrong offset!");

// Function Tempest.TedCheatManager.ServerDebugAddExperience
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_ServerDebugAddExperience final
{
public:
	float                                         experience;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_ServerDebugAddExperience) == 0x000004, "Wrong alignment on TedCheatManager_ServerDebugAddExperience");
static_assert(sizeof(TedCheatManager_ServerDebugAddExperience) == 0x000004, "Wrong size on TedCheatManager_ServerDebugAddExperience");
static_assert(offsetof(TedCheatManager_ServerDebugAddExperience, experience) == 0x000000, "Member 'TedCheatManager_ServerDebugAddExperience::experience' has a wrong offset!");

// Function Tempest.TedCheatManager.ServerDebugSpawnUnit
// 0x0030 (0x0030 - 0x0000)
struct TedCheatManager_ServerDebugSpawnUnit final
{
public:
	TSubclassOf<class ATedUnitBase>               UnitClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumToSpawn;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCheatManager_ServerDebugSpawnUnit) == 0x000008, "Wrong alignment on TedCheatManager_ServerDebugSpawnUnit");
static_assert(sizeof(TedCheatManager_ServerDebugSpawnUnit) == 0x000030, "Wrong size on TedCheatManager_ServerDebugSpawnUnit");
static_assert(offsetof(TedCheatManager_ServerDebugSpawnUnit, UnitClass) == 0x000000, "Member 'TedCheatManager_ServerDebugSpawnUnit::UnitClass' has a wrong offset!");
static_assert(offsetof(TedCheatManager_ServerDebugSpawnUnit, NumToSpawn) == 0x000008, "Member 'TedCheatManager_ServerDebugSpawnUnit::NumToSpawn' has a wrong offset!");
static_assert(offsetof(TedCheatManager_ServerDebugSpawnUnit, Location) == 0x000010, "Member 'TedCheatManager_ServerDebugSpawnUnit::Location' has a wrong offset!");
static_assert(offsetof(TedCheatManager_ServerDebugSpawnUnit, PlayerID) == 0x000028, "Member 'TedCheatManager_ServerDebugSpawnUnit::PlayerID' has a wrong offset!");

// Function Tempest.TedCheatManager.ServerDebugTeleportSelectedUnits
// 0x0020 (0x0020 - 0x0000)
struct TedCheatManager_ServerDebugTeleportSelectedUnits final
{
public:
	struct FVector2D                              CursorLocation;                                    // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   Units;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_ServerDebugTeleportSelectedUnits) == 0x000008, "Wrong alignment on TedCheatManager_ServerDebugTeleportSelectedUnits");
static_assert(sizeof(TedCheatManager_ServerDebugTeleportSelectedUnits) == 0x000020, "Wrong size on TedCheatManager_ServerDebugTeleportSelectedUnits");
static_assert(offsetof(TedCheatManager_ServerDebugTeleportSelectedUnits, CursorLocation) == 0x000000, "Member 'TedCheatManager_ServerDebugTeleportSelectedUnits::CursorLocation' has a wrong offset!");
static_assert(offsetof(TedCheatManager_ServerDebugTeleportSelectedUnits, Units) == 0x000010, "Member 'TedCheatManager_ServerDebugTeleportSelectedUnits::Units' has a wrong offset!");

// Function Tempest.TedCheatManager.SetMinimapState
// 0x0001 (0x0001 - 0x0000)
struct TedCheatManager_SetMinimapState final
{
public:
	uint8                                         InMode;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_SetMinimapState) == 0x000001, "Wrong alignment on TedCheatManager_SetMinimapState");
static_assert(sizeof(TedCheatManager_SetMinimapState) == 0x000001, "Wrong size on TedCheatManager_SetMinimapState");
static_assert(offsetof(TedCheatManager_SetMinimapState, InMode) == 0x000000, "Member 'TedCheatManager_SetMinimapState::InMode' has a wrong offset!");

// Function Tempest.TedCheatManager.SetUnitCardWeaponWidth
// 0x0004 (0x0004 - 0x0000)
struct TedCheatManager_SetUnitCardWeaponWidth final
{
public:
	int32                                         FixedWidth;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_SetUnitCardWeaponWidth) == 0x000004, "Wrong alignment on TedCheatManager_SetUnitCardWeaponWidth");
static_assert(sizeof(TedCheatManager_SetUnitCardWeaponWidth) == 0x000004, "Wrong size on TedCheatManager_SetUnitCardWeaponWidth");
static_assert(offsetof(TedCheatManager_SetUnitCardWeaponWidth, FixedWidth) == 0x000000, "Member 'TedCheatManager_SetUnitCardWeaponWidth::FixedWidth' has a wrong offset!");

// Function Tempest.TedCheatManager.SetUnitCardWeaponWidthRange
// 0x0008 (0x0008 - 0x0000)
struct TedCheatManager_SetUnitCardWeaponWidthRange final
{
public:
	int32                                         min_0;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         max_0;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCheatManager_SetUnitCardWeaponWidthRange) == 0x000004, "Wrong alignment on TedCheatManager_SetUnitCardWeaponWidthRange");
static_assert(sizeof(TedCheatManager_SetUnitCardWeaponWidthRange) == 0x000008, "Wrong size on TedCheatManager_SetUnitCardWeaponWidthRange");
static_assert(offsetof(TedCheatManager_SetUnitCardWeaponWidthRange, min_0) == 0x000000, "Member 'TedCheatManager_SetUnitCardWeaponWidthRange::min_0' has a wrong offset!");
static_assert(offsetof(TedCheatManager_SetUnitCardWeaponWidthRange, max_0) == 0x000004, "Member 'TedCheatManager_SetUnitCardWeaponWidthRange::max_0' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.ActivateTabSlotStateByPage
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundNavigation_ActivateTabSlotStateByPage final
{
public:
	class UWidget*                                InPage;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundNavigation_ActivateTabSlotStateByPage) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_ActivateTabSlotStateByPage");
static_assert(sizeof(TedCommandCompoundNavigation_ActivateTabSlotStateByPage) == 0x000010, "Wrong size on TedCommandCompoundNavigation_ActivateTabSlotStateByPage");
static_assert(offsetof(TedCommandCompoundNavigation_ActivateTabSlotStateByPage, InPage) == 0x000000, "Member 'TedCommandCompoundNavigation_ActivateTabSlotStateByPage::InPage' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_ActivateTabSlotStateByPage, InState) == 0x000008, "Member 'TedCommandCompoundNavigation_ActivateTabSlotStateByPage::InState' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_ActivateTabSlotStateByPage, bInActivate) == 0x000009, "Member 'TedCommandCompoundNavigation_ActivateTabSlotStateByPage::bInActivate' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.OnActivateTabSlotStateHandler
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundNavigation_OnActivateTabSlotStateHandler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_OnActivateTabSlotStateHandler");
static_assert(sizeof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler) == 0x000018, "Wrong size on TedCommandCompoundNavigation_OnActivateTabSlotStateHandler");
static_assert(offsetof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler, InContentPanel) == 0x000000, "Member 'TedCommandCompoundNavigation_OnActivateTabSlotStateHandler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler, InContentSlot) == 0x000008, "Member 'TedCommandCompoundNavigation_OnActivateTabSlotStateHandler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler, InState) == 0x000010, "Member 'TedCommandCompoundNavigation_OnActivateTabSlotStateHandler::InState' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_OnActivateTabSlotStateHandler, bInActivated) == 0x000011, "Member 'TedCommandCompoundNavigation_OnActivateTabSlotStateHandler::bInActivated' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.OnTriggerTabSlotActionHandler
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler");
static_assert(sizeof(TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler) == 0x000018, "Wrong size on TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler");
static_assert(offsetof(TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler, InContentPanel) == 0x000000, "Member 'TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler, InContentSlot) == 0x000008, "Member 'TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler, InAction) == 0x000010, "Member 'TedCommandCompoundNavigation_OnTriggerTabSlotActionHandler::InAction' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.GetSelectedTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundNavigation_GetSelectedTabIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_GetSelectedTabIndex) == 0x000004, "Wrong alignment on TedCommandCompoundNavigation_GetSelectedTabIndex");
static_assert(sizeof(TedCommandCompoundNavigation_GetSelectedTabIndex) == 0x000004, "Wrong size on TedCommandCompoundNavigation_GetSelectedTabIndex");
static_assert(offsetof(TedCommandCompoundNavigation_GetSelectedTabIndex, ReturnValue) == 0x000000, "Member 'TedCommandCompoundNavigation_GetSelectedTabIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.GetSelectedTabPage
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundNavigation_GetSelectedTabPage final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_GetSelectedTabPage) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_GetSelectedTabPage");
static_assert(sizeof(TedCommandCompoundNavigation_GetSelectedTabPage) == 0x000008, "Wrong size on TedCommandCompoundNavigation_GetSelectedTabPage");
static_assert(offsetof(TedCommandCompoundNavigation_GetSelectedTabPage, ReturnValue) == 0x000000, "Member 'TedCommandCompoundNavigation_GetSelectedTabPage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.GetSelectedTabSlot
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundNavigation_GetSelectedTabSlot final
{
public:
	class UTedContentPanelSlotBase*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_GetSelectedTabSlot) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_GetSelectedTabSlot");
static_assert(sizeof(TedCommandCompoundNavigation_GetSelectedTabSlot) == 0x000008, "Wrong size on TedCommandCompoundNavigation_GetSelectedTabSlot");
static_assert(offsetof(TedCommandCompoundNavigation_GetSelectedTabSlot, ReturnValue) == 0x000000, "Member 'TedCommandCompoundNavigation_GetSelectedTabSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.GetTabPage
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundNavigation_GetTabPage final
{
public:
	int32                                         InTabIndex;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_GetTabPage) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_GetTabPage");
static_assert(sizeof(TedCommandCompoundNavigation_GetTabPage) == 0x000010, "Wrong size on TedCommandCompoundNavigation_GetTabPage");
static_assert(offsetof(TedCommandCompoundNavigation_GetTabPage, InTabIndex) == 0x000000, "Member 'TedCommandCompoundNavigation_GetTabPage::InTabIndex' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_GetTabPage, ReturnValue) == 0x000008, "Member 'TedCommandCompoundNavigation_GetTabPage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.GetTabsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundNavigation_GetTabsPanel final
{
public:
	class UTedContentPanelBase*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_GetTabsPanel) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_GetTabsPanel");
static_assert(sizeof(TedCommandCompoundNavigation_GetTabsPanel) == 0x000008, "Wrong size on TedCommandCompoundNavigation_GetTabsPanel");
static_assert(offsetof(TedCommandCompoundNavigation_GetTabsPanel, ReturnValue) == 0x000000, "Member 'TedCommandCompoundNavigation_GetTabsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundNavigation.HandleDisabled
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundNavigation_HandleDisabled final
{
public:
	bool                                          bInActivated;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedContentPanelSlotBase*         InSlot;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundNavigation_HandleDisabled) == 0x000008, "Wrong alignment on TedCommandCompoundNavigation_HandleDisabled");
static_assert(sizeof(TedCommandCompoundNavigation_HandleDisabled) == 0x000010, "Wrong size on TedCommandCompoundNavigation_HandleDisabled");
static_assert(offsetof(TedCommandCompoundNavigation_HandleDisabled, bInActivated) == 0x000000, "Member 'TedCommandCompoundNavigation_HandleDisabled::bInActivated' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundNavigation_HandleDisabled, InSlot) == 0x000008, "Member 'TedCommandCompoundNavigation_HandleDisabled::InSlot' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.OnActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState) == 0x000018, "Wrong size on TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState, InContentPanel) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState, InContentSlot) == 0x000008, "Member 'TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState, InState) == 0x000010, "Member 'TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState, bInActivated) == 0x000011, "Member 'TedCommandCompoundLoadoutSocketSlot_OnActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.OnContentPanelChange
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange) == 0x000008, "Wrong size on TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange, InContentPanel) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_OnContentPanelChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.SetTargetContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel final
{
public:
	class UTedContentPanelBase*                   InTargetPanel;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel) == 0x000008, "Wrong size on TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel, InTargetPanel) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_SetTargetContentPanel::InTargetPanel' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.SetTargetContentSlotIndex
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex final
{
public:
	uint8                                         InTargetIndex;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex) == 0x000001, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex) == 0x000001, "Wrong size on TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex, InTargetIndex) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_SetTargetContentSlotIndex::InTargetIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.GetSocketRootPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel final
{
public:
	class UPanelWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel) == 0x000008, "Wrong size on TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel, ReturnValue) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_GetSocketRootPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.GetTargetContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel final
{
public:
	class UTedContentPanelBase*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel) == 0x000008, "Wrong size on TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel, ReturnValue) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_GetTargetContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.GetTargetContentSlot
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot final
{
public:
	class UTedContentPanelSlotBase*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot) == 0x000008, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot) == 0x000008, "Wrong size on TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot, ReturnValue) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundLoadoutSocketSlot.GetTargetContentSlotIndex
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex) == 0x000004, "Wrong alignment on TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex");
static_assert(sizeof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex) == 0x000004, "Wrong size on TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex");
static_assert(offsetof(TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex, ReturnValue) == 0x000000, "Member 'TedCommandCompoundLoadoutSocketSlot_GetTargetContentSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_SpawnUnit.ReceiveSpawnedUnit
// 0x0008 (0x0008 - 0x0000)
struct TedAbility_SpawnUnit_ReceiveSpawnedUnit final
{
public:
	class ATedUnitBase*                           Unit;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_SpawnUnit_ReceiveSpawnedUnit) == 0x000008, "Wrong alignment on TedAbility_SpawnUnit_ReceiveSpawnedUnit");
static_assert(sizeof(TedAbility_SpawnUnit_ReceiveSpawnedUnit) == 0x000008, "Wrong size on TedAbility_SpawnUnit_ReceiveSpawnedUnit");
static_assert(offsetof(TedAbility_SpawnUnit_ReceiveSpawnedUnit, Unit) == 0x000000, "Member 'TedAbility_SpawnUnit_ReceiveSpawnedUnit::Unit' has a wrong offset!");

// Function Tempest.TedAbility_SpawnUnit.SpawnUnits
// 0x0010 (0x0010 - 0x0000)
struct TedAbility_SpawnUnit_SpawnUnits final
{
public:
	struct FVector2D                              LocationOverride;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_SpawnUnit_SpawnUnits) == 0x000008, "Wrong alignment on TedAbility_SpawnUnit_SpawnUnits");
static_assert(sizeof(TedAbility_SpawnUnit_SpawnUnits) == 0x000010, "Wrong size on TedAbility_SpawnUnit_SpawnUnits");
static_assert(offsetof(TedAbility_SpawnUnit_SpawnUnits, LocationOverride) == 0x000000, "Member 'TedAbility_SpawnUnit_SpawnUnits::LocationOverride' has a wrong offset!");

// Function Tempest.TedAbility_SpawnUnit.GetUnitToSpawnData
// 0x0058 (0x0058 - 0x0000)
struct TedAbility_SpawnUnit_GetUnitToSpawnData final
{
public:
	struct FGameplayAbilityActorInfo              ActorInfo;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FUnitToSpawnData>               ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_SpawnUnit_GetUnitToSpawnData) == 0x000008, "Wrong alignment on TedAbility_SpawnUnit_GetUnitToSpawnData");
static_assert(sizeof(TedAbility_SpawnUnit_GetUnitToSpawnData) == 0x000058, "Wrong size on TedAbility_SpawnUnit_GetUnitToSpawnData");
static_assert(offsetof(TedAbility_SpawnUnit_GetUnitToSpawnData, ActorInfo) == 0x000000, "Member 'TedAbility_SpawnUnit_GetUnitToSpawnData::ActorInfo' has a wrong offset!");
static_assert(offsetof(TedAbility_SpawnUnit_GetUnitToSpawnData, ReturnValue) == 0x000048, "Member 'TedAbility_SpawnUnit_GetUnitToSpawnData::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.K2_OnMultiSelectionOwnershipChange
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange final
{
public:
	class ATedPawn*                               InSelectedPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange) == 0x000008, "Wrong alignment on TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange");
static_assert(sizeof(TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange) == 0x000008, "Wrong size on TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange");
static_assert(offsetof(TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange, InSelectedPawn) == 0x000000, "Member 'TedSelectionDetailsController_K2_OnMultiSelectionOwnershipChange::InSelectedPawn' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.K2_OnSingleSelectionOwnershipChange
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange final
{
public:
	class ATedPawn*                               InSelectedPawn;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange) == 0x000008, "Wrong alignment on TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange");
static_assert(sizeof(TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange) == 0x000008, "Wrong size on TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange");
static_assert(offsetof(TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange, InSelectedPawn) == 0x000000, "Member 'TedSelectionDetailsController_K2_OnSingleSelectionOwnershipChange::InSelectedPawn' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.GetFirstSelectedPawn
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsController_GetFirstSelectedPawn final
{
public:
	const class ATedPawn*                         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_GetFirstSelectedPawn) == 0x000008, "Wrong alignment on TedSelectionDetailsController_GetFirstSelectedPawn");
static_assert(sizeof(TedSelectionDetailsController_GetFirstSelectedPawn) == 0x000008, "Wrong size on TedSelectionDetailsController_GetFirstSelectedPawn");
static_assert(offsetof(TedSelectionDetailsController_GetFirstSelectedPawn, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_GetFirstSelectedPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsController_GetPlayerController final
{
public:
	class ATedPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_GetPlayerController) == 0x000008, "Wrong alignment on TedSelectionDetailsController_GetPlayerController");
static_assert(sizeof(TedSelectionDetailsController_GetPlayerController) == 0x000008, "Wrong size on TedSelectionDetailsController_GetPlayerController");
static_assert(offsetof(TedSelectionDetailsController_GetPlayerController, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_GetPlayerController::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.GetSelectedPawns
// 0x0010 (0x0010 - 0x0000)
struct TedSelectionDetailsController_GetSelectedPawns final
{
public:
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_GetSelectedPawns) == 0x000008, "Wrong alignment on TedSelectionDetailsController_GetSelectedPawns");
static_assert(sizeof(TedSelectionDetailsController_GetSelectedPawns) == 0x000010, "Wrong size on TedSelectionDetailsController_GetSelectedPawns");
static_assert(offsetof(TedSelectionDetailsController_GetSelectedPawns, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_GetSelectedPawns::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.GetSelectionSize
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionDetailsController_GetSelectionSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_GetSelectionSize) == 0x000004, "Wrong alignment on TedSelectionDetailsController_GetSelectionSize");
static_assert(sizeof(TedSelectionDetailsController_GetSelectionSize) == 0x000004, "Wrong size on TedSelectionDetailsController_GetSelectionSize");
static_assert(offsetof(TedSelectionDetailsController_GetSelectionSize, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_GetSelectionSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.IsAnythingSelected
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsController_IsAnythingSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_IsAnythingSelected) == 0x000001, "Wrong alignment on TedSelectionDetailsController_IsAnythingSelected");
static_assert(sizeof(TedSelectionDetailsController_IsAnythingSelected) == 0x000001, "Wrong size on TedSelectionDetailsController_IsAnythingSelected");
static_assert(offsetof(TedSelectionDetailsController_IsAnythingSelected, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_IsAnythingSelected::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.IsMultiSelection
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsController_IsMultiSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_IsMultiSelection) == 0x000001, "Wrong alignment on TedSelectionDetailsController_IsMultiSelection");
static_assert(sizeof(TedSelectionDetailsController_IsMultiSelection) == 0x000001, "Wrong size on TedSelectionDetailsController_IsMultiSelection");
static_assert(offsetof(TedSelectionDetailsController_IsMultiSelection, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_IsMultiSelection::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsController.IsSingleSelection
// 0x0001 (0x0001 - 0x0000)
struct TedSelectionDetailsController_IsSingleSelection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsController_IsSingleSelection) == 0x000001, "Wrong alignment on TedSelectionDetailsController_IsSingleSelection");
static_assert(sizeof(TedSelectionDetailsController_IsSingleSelection) == 0x000001, "Wrong size on TedSelectionDetailsController_IsSingleSelection");
static_assert(offsetof(TedSelectionDetailsController_IsSingleSelection, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsController_IsSingleSelection::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_Stealth.EnableStealth
// 0x0001 (0x0001 - 0x0000)
struct TedAbility_Stealth_EnableStealth final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_Stealth_EnableStealth) == 0x000001, "Wrong alignment on TedAbility_Stealth_EnableStealth");
static_assert(sizeof(TedAbility_Stealth_EnableStealth) == 0x000001, "Wrong size on TedAbility_Stealth_EnableStealth");
static_assert(offsetof(TedAbility_Stealth_EnableStealth, bEnable) == 0x000000, "Member 'TedAbility_Stealth_EnableStealth::bEnable' has a wrong offset!");

// Function Tempest.TedAbility_TempestChargeOverflow.OnTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct TedAbility_TempestChargeOverflow_OnTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage) == 0x000008, "Wrong alignment on TedAbility_TempestChargeOverflow_OnTakeAnyDamage");
static_assert(sizeof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage) == 0x000028, "Wrong size on TedAbility_TempestChargeOverflow_OnTakeAnyDamage");
static_assert(offsetof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage, DamagedActor) == 0x000000, "Member 'TedAbility_TempestChargeOverflow_OnTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage, Damage) == 0x000008, "Member 'TedAbility_TempestChargeOverflow_OnTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage, DamageType) == 0x000010, "Member 'TedAbility_TempestChargeOverflow_OnTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'TedAbility_TempestChargeOverflow_OnTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TedAbility_TempestChargeOverflow_OnTakeAnyDamage, DamageCauser) == 0x000020, "Member 'TedAbility_TempestChargeOverflow_OnTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function Tempest.TedSelectionDetails_InfoSlots_Slot_Attack.OnContextChange
// 0x0018 (0x0018 - 0x0000)
struct TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange final
{
public:
	class UTedContentPanelStatic*                 InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InPrevContext;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InNewContext;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange) == 0x000008, "Wrong alignment on TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange");
static_assert(sizeof(TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange) == 0x000018, "Wrong size on TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange, InContentPanel) == 0x000000, "Member 'TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange, InPrevContext) == 0x000008, "Member 'TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange::InPrevContext' has a wrong offset!");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange, InNewContext) == 0x000010, "Member 'TedSelectionDetails_InfoSlots_Slot_Attack_OnContextChange::InNewContext' has a wrong offset!");

// Function Tempest.TedSelectionDetails_InfoSlots_Slot_Attack.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn) == 0x000008, "Wrong alignment on TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn");
static_assert(sizeof(TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn) == 0x000008, "Wrong size on TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedSelectionDetails_InfoSlots_Slot_Attack_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedAbility_UnloadPawns.UnloadPawns
// 0x0010 (0x0010 - 0x0000)
struct TedAbility_UnloadPawns_UnloadPawns final
{
public:
	struct FVector2D                              LocationOverride;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAbility_UnloadPawns_UnloadPawns) == 0x000008, "Wrong alignment on TedAbility_UnloadPawns_UnloadPawns");
static_assert(sizeof(TedAbility_UnloadPawns_UnloadPawns) == 0x000010, "Wrong size on TedAbility_UnloadPawns_UnloadPawns");
static_assert(offsetof(TedAbility_UnloadPawns_UnloadPawns, LocationOverride) == 0x000000, "Member 'TedAbility_UnloadPawns_UnloadPawns::LocationOverride' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrineSlotTooltip_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetDescription) == 0x000008, "Wrong alignment on TedDoctrineSlotTooltip_GetDescription");
static_assert(sizeof(TedDoctrineSlotTooltip_GetDescription) == 0x000010, "Wrong size on TedDoctrineSlotTooltip_GetDescription");
static_assert(offsetof(TedDoctrineSlotTooltip_GetDescription, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetDoctrineSlot
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlotTooltip_GetDoctrineSlot final
{
public:
	const class UTedDoctrineSlot*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetDoctrineSlot) == 0x000008, "Wrong alignment on TedDoctrineSlotTooltip_GetDoctrineSlot");
static_assert(sizeof(TedDoctrineSlotTooltip_GetDoctrineSlot) == 0x000008, "Wrong size on TedDoctrineSlotTooltip_GetDoctrineSlot");
static_assert(offsetof(TedDoctrineSlotTooltip_GetDoctrineSlot, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetDoctrineSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlotTooltip_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetIcon) == 0x000008, "Wrong alignment on TedDoctrineSlotTooltip_GetIcon");
static_assert(sizeof(TedDoctrineSlotTooltip_GetIcon) == 0x000008, "Wrong size on TedDoctrineSlotTooltip_GetIcon");
static_assert(offsetof(TedDoctrineSlotTooltip_GetIcon, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetOnSellRefundedCredits
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlotTooltip_GetOnSellRefundedCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetOnSellRefundedCredits) == 0x000004, "Wrong alignment on TedDoctrineSlotTooltip_GetOnSellRefundedCredits");
static_assert(sizeof(TedDoctrineSlotTooltip_GetOnSellRefundedCredits) == 0x000004, "Wrong size on TedDoctrineSlotTooltip_GetOnSellRefundedCredits");
static_assert(offsetof(TedDoctrineSlotTooltip_GetOnSellRefundedCredits, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetOnSellRefundedCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetResearchCostCredits
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlotTooltip_GetResearchCostCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetResearchCostCredits) == 0x000004, "Wrong alignment on TedDoctrineSlotTooltip_GetResearchCostCredits");
static_assert(sizeof(TedDoctrineSlotTooltip_GetResearchCostCredits) == 0x000004, "Wrong size on TedDoctrineSlotTooltip_GetResearchCostCredits");
static_assert(offsetof(TedDoctrineSlotTooltip_GetResearchCostCredits, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetResearchCostCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetResearchTime
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlotTooltip_GetResearchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetResearchTime) == 0x000004, "Wrong alignment on TedDoctrineSlotTooltip_GetResearchTime");
static_assert(sizeof(TedDoctrineSlotTooltip_GetResearchTime) == 0x000004, "Wrong size on TedDoctrineSlotTooltip_GetResearchTime");
static_assert(offsetof(TedDoctrineSlotTooltip_GetResearchTime, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetResearchTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrineSlotTooltip_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_GetTitle) == 0x000008, "Wrong alignment on TedDoctrineSlotTooltip_GetTitle");
static_assert(sizeof(TedDoctrineSlotTooltip_GetTitle) == 0x000010, "Wrong size on TedDoctrineSlotTooltip_GetTitle");
static_assert(offsetof(TedDoctrineSlotTooltip_GetTitle, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlotTooltip.IsResearchRelevant
// 0x0001 (0x0001 - 0x0000)
struct TedDoctrineSlotTooltip_IsResearchRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlotTooltip_IsResearchRelevant) == 0x000001, "Wrong alignment on TedDoctrineSlotTooltip_IsResearchRelevant");
static_assert(sizeof(TedDoctrineSlotTooltip_IsResearchRelevant) == 0x000001, "Wrong size on TedDoctrineSlotTooltip_IsResearchRelevant");
static_assert(offsetof(TedDoctrineSlotTooltip_IsResearchRelevant, ReturnValue) == 0x000000, "Member 'TedDoctrineSlotTooltip_IsResearchRelevant::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsScreen.K2_OnActivateTabState
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsScreen_K2_OnActivateTabState final
{
public:
	class UTedContentPanelBase*                   InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InSlot;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsScreen_K2_OnActivateTabState) == 0x000008, "Wrong alignment on TedSettingsScreen_K2_OnActivateTabState");
static_assert(sizeof(TedSettingsScreen_K2_OnActivateTabState) == 0x000018, "Wrong size on TedSettingsScreen_K2_OnActivateTabState");
static_assert(offsetof(TedSettingsScreen_K2_OnActivateTabState, InPanel) == 0x000000, "Member 'TedSettingsScreen_K2_OnActivateTabState::InPanel' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_K2_OnActivateTabState, InSlot) == 0x000008, "Member 'TedSettingsScreen_K2_OnActivateTabState::InSlot' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_K2_OnActivateTabState, InState) == 0x000010, "Member 'TedSettingsScreen_K2_OnActivateTabState::InState' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_K2_OnActivateTabState, bInActivated) == 0x000011, "Member 'TedSettingsScreen_K2_OnActivateTabState::bInActivated' has a wrong offset!");

// Function Tempest.TedSettingsScreen.OnActivateTabState
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsScreen_OnActivateTabState final
{
public:
	class UTedContentPanelBase*                   InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InSlot;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsScreen_OnActivateTabState) == 0x000008, "Wrong alignment on TedSettingsScreen_OnActivateTabState");
static_assert(sizeof(TedSettingsScreen_OnActivateTabState) == 0x000018, "Wrong size on TedSettingsScreen_OnActivateTabState");
static_assert(offsetof(TedSettingsScreen_OnActivateTabState, InPanel) == 0x000000, "Member 'TedSettingsScreen_OnActivateTabState::InPanel' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_OnActivateTabState, InSlot) == 0x000008, "Member 'TedSettingsScreen_OnActivateTabState::InSlot' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_OnActivateTabState, InState) == 0x000010, "Member 'TedSettingsScreen_OnActivateTabState::InState' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_OnActivateTabState, bInActivated) == 0x000011, "Member 'TedSettingsScreen_OnActivateTabState::bInActivated' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.OnRefreshRequirements
// 0x0020 (0x0020 - 0x0000)
struct TedCommandsTooltipDisplay_OnRefreshRequirements final
{
public:
	TArray<class FText>                           InNotOwnedRequirements;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FText>                           InOwnedRequirements;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_OnRefreshRequirements) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_OnRefreshRequirements");
static_assert(sizeof(TedCommandsTooltipDisplay_OnRefreshRequirements) == 0x000020, "Wrong size on TedCommandsTooltipDisplay_OnRefreshRequirements");
static_assert(offsetof(TedCommandsTooltipDisplay_OnRefreshRequirements, InNotOwnedRequirements) == 0x000000, "Member 'TedCommandsTooltipDisplay_OnRefreshRequirements::InNotOwnedRequirements' has a wrong offset!");
static_assert(offsetof(TedCommandsTooltipDisplay_OnRefreshRequirements, InOwnedRequirements) == 0x000010, "Member 'TedCommandsTooltipDisplay_OnRefreshRequirements::InOwnedRequirements' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetAltShortcutText_Hint
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetAltShortcutText_Hint final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetAltShortcutText_Hint) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetAltShortcutText_Hint");
static_assert(sizeof(TedCommandsTooltipDisplay_GetAltShortcutText_Hint) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetAltShortcutText_Hint");
static_assert(offsetof(TedCommandsTooltipDisplay_GetAltShortcutText_Hint, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetAltShortcutText_Hint::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetAltShortcutVisibility_HasAutoCast
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast");
static_assert(sizeof(TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast");
static_assert(offsetof(TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetAltShortcutVisibility_HasAutoCast::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCommandCDO
// 0x0008 (0x0008 - 0x0000)
struct TedCommandsTooltipDisplay_GetCommandCDO final
{
public:
	const class UTedCommand*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCommandCDO) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCommandCDO");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCommandCDO) == 0x000008, "Wrong size on TedCommandsTooltipDisplay_GetCommandCDO");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCommandCDO, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCommandCDO::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCommandsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCommandsTooltipDisplay_GetCommandsPanel final
{
public:
	const class UTedCommandsPanel*                ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCommandsPanel) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCommandsPanel");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCommandsPanel) == 0x000008, "Wrong size on TedCommandsTooltipDisplay_GetCommandsPanel");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCommandsPanel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCommandsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostText_Credits
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostText_Credits final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostText_Credits) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCostText_Credits");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostText_Credits) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetCostText_Credits");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostText_Credits, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostText_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostText_Intel
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostText_Intel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostText_Intel) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCostText_Intel");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostText_Intel) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetCostText_Intel");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostText_Intel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostText_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostText_Population
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostText_Population final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostText_Population) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCostText_Population");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostText_Population) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetCostText_Population");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostText_Population, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostText_Population::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostText_Power
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostText_Power final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostText_Power) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCostText_Power");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostText_Power) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetCostText_Power");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostText_Power, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostText_Power::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostText_Time
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostText_Time final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostText_Time) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetCostText_Time");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostText_Time) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetCostText_Time");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostText_Time, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostText_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostValue_Credits
// 0x0004 (0x0004 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostValue_Credits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostValue_Credits) == 0x000004, "Wrong alignment on TedCommandsTooltipDisplay_GetCostValue_Credits");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostValue_Credits) == 0x000004, "Wrong size on TedCommandsTooltipDisplay_GetCostValue_Credits");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostValue_Credits, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostValue_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostValue_Intel
// 0x0004 (0x0004 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostValue_Intel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostValue_Intel) == 0x000004, "Wrong alignment on TedCommandsTooltipDisplay_GetCostValue_Intel");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostValue_Intel) == 0x000004, "Wrong size on TedCommandsTooltipDisplay_GetCostValue_Intel");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostValue_Intel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostValue_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostValue_Time
// 0x0004 (0x0004 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostValue_Time final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostValue_Time) == 0x000004, "Wrong alignment on TedCommandsTooltipDisplay_GetCostValue_Time");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostValue_Time) == 0x000004, "Wrong size on TedCommandsTooltipDisplay_GetCostValue_Time");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostValue_Time, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostValue_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostVisibility_Credits
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostVisibility_Credits final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostVisibility_Credits) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetCostVisibility_Credits");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostVisibility_Credits) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetCostVisibility_Credits");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostVisibility_Credits, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostVisibility_Credits::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostVisibility_Intel
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostVisibility_Intel final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostVisibility_Intel) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetCostVisibility_Intel");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostVisibility_Intel) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetCostVisibility_Intel");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostVisibility_Intel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostVisibility_Intel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostVisibility_Population
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostVisibility_Population final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostVisibility_Population) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetCostVisibility_Population");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostVisibility_Population) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetCostVisibility_Population");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostVisibility_Population, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostVisibility_Population::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostVisibility_Power
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostVisibility_Power final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostVisibility_Power) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetCostVisibility_Power");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostVisibility_Power) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetCostVisibility_Power");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostVisibility_Power, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostVisibility_Power::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetCostVisibility_Time
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetCostVisibility_Time final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetCostVisibility_Time) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetCostVisibility_Time");
static_assert(sizeof(TedCommandsTooltipDisplay_GetCostVisibility_Time) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetCostVisibility_Time");
static_assert(offsetof(TedCommandsTooltipDisplay_GetCostVisibility_Time, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetCostVisibility_Time::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetDescription) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetDescription");
static_assert(sizeof(TedCommandsTooltipDisplay_GetDescription) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetDescription");
static_assert(offsetof(TedCommandsTooltipDisplay_GetDescription, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetDisplayName) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetDisplayName");
static_assert(sizeof(TedCommandsTooltipDisplay_GetDisplayName) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetDisplayName");
static_assert(offsetof(TedCommandsTooltipDisplay_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedCommandsTooltipDisplay_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIcon) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetIcon");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIcon) == 0x000008, "Wrong size on TedCommandsTooltipDisplay_GetIcon");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIcon, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueValue_AbilityBlocked
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueValue_AbilityBlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueValue_DisabledInfo
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueValue_DisabledInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueValue_LowPower
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueValue_LowPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueValue_LowPower) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueValue_LowPower");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueValue_LowPower) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueValue_LowPower");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueValue_LowPower, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueValue_LowPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueValue_MissingPlayerTags
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueValue_MissingPlayerTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueValue_PopulationFull
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueValue_PopulationFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueValue_PopulationFull) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueValue_PopulationFull");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueValue_PopulationFull) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueValue_PopulationFull");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueValue_PopulationFull, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueValue_PopulationFull::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_AbilityBlocked
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_AbilityBlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_DisabledInfo
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_DisabledInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_InsufficientCredits
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_InsufficientIntel
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_InsufficientIntel::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_LowPower
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_LowPower final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_LowPower) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_LowPower");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_LowPower) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_LowPower");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_LowPower, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_LowPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_MissingPlayerTags
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_MissingPlayerTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetIssueVisibility_PopulationFull
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull");
static_assert(sizeof(TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull");
static_assert(offsetof(TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetIssueVisibility_PopulationFull::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetPopulationCost
// 0x0004 (0x0004 - 0x0000)
struct TedCommandsTooltipDisplay_GetPopulationCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetPopulationCost) == 0x000004, "Wrong alignment on TedCommandsTooltipDisplay_GetPopulationCost");
static_assert(sizeof(TedCommandsTooltipDisplay_GetPopulationCost) == 0x000004, "Wrong size on TedCommandsTooltipDisplay_GetPopulationCost");
static_assert(offsetof(TedCommandsTooltipDisplay_GetPopulationCost, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetPopulationCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetPowerCost
// 0x0004 (0x0004 - 0x0000)
struct TedCommandsTooltipDisplay_GetPowerCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetPowerCost) == 0x000004, "Wrong alignment on TedCommandsTooltipDisplay_GetPowerCost");
static_assert(sizeof(TedCommandsTooltipDisplay_GetPowerCost) == 0x000004, "Wrong size on TedCommandsTooltipDisplay_GetPowerCost");
static_assert(offsetof(TedCommandsTooltipDisplay_GetPowerCost, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetPowerCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetShortcutText
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetShortcutText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetShortcutText) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetShortcutText");
static_assert(sizeof(TedCommandsTooltipDisplay_GetShortcutText) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetShortcutText");
static_assert(offsetof(TedCommandsTooltipDisplay_GetShortcutText, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetShortcutText::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.GetValue_DisabledInfo
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsTooltipDisplay_GetValue_DisabledInfo final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_GetValue_DisabledInfo) == 0x000008, "Wrong alignment on TedCommandsTooltipDisplay_GetValue_DisabledInfo");
static_assert(sizeof(TedCommandsTooltipDisplay_GetValue_DisabledInfo) == 0x000010, "Wrong size on TedCommandsTooltipDisplay_GetValue_DisabledInfo");
static_assert(offsetof(TedCommandsTooltipDisplay_GetValue_DisabledInfo, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_GetValue_DisabledInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.HasPlayerInsufficientCredits
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_HasPlayerInsufficientCredits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_HasPlayerInsufficientCredits) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_HasPlayerInsufficientCredits");
static_assert(sizeof(TedCommandsTooltipDisplay_HasPlayerInsufficientCredits) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_HasPlayerInsufficientCredits");
static_assert(offsetof(TedCommandsTooltipDisplay_HasPlayerInsufficientCredits, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_HasPlayerInsufficientCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsTooltipDisplay.HasPlayerInsufficientIntel
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsTooltipDisplay_HasPlayerInsufficientIntel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsTooltipDisplay_HasPlayerInsufficientIntel) == 0x000001, "Wrong alignment on TedCommandsTooltipDisplay_HasPlayerInsufficientIntel");
static_assert(sizeof(TedCommandsTooltipDisplay_HasPlayerInsufficientIntel) == 0x000001, "Wrong size on TedCommandsTooltipDisplay_HasPlayerInsufficientIntel");
static_assert(offsetof(TedCommandsTooltipDisplay_HasPlayerInsufficientIntel, ReturnValue) == 0x000000, "Member 'TedCommandsTooltipDisplay_HasPlayerInsufficientIntel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopup.CanHide
// 0x0001 (0x0001 - 0x0000)
struct TedPopup_CanHide final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_CanHide) == 0x000001, "Wrong alignment on TedPopup_CanHide");
static_assert(sizeof(TedPopup_CanHide) == 0x000001, "Wrong size on TedPopup_CanHide");
static_assert(offsetof(TedPopup_CanHide, ReturnValue) == 0x000000, "Member 'TedPopup_CanHide::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopup.K2_OnErrorShown
// 0x0010 (0x0010 - 0x0000)
struct TedPopup_K2_OnErrorShown final
{
public:
	class FText                                   ErrorMessage;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_K2_OnErrorShown) == 0x000008, "Wrong alignment on TedPopup_K2_OnErrorShown");
static_assert(sizeof(TedPopup_K2_OnErrorShown) == 0x000010, "Wrong size on TedPopup_K2_OnErrorShown");
static_assert(offsetof(TedPopup_K2_OnErrorShown, ErrorMessage) == 0x000000, "Member 'TedPopup_K2_OnErrorShown::ErrorMessage' has a wrong offset!");

// Function Tempest.TedPopup.SetIdentifier
// 0x0008 (0x0008 - 0x0000)
struct TedPopup_SetIdentifier final
{
public:
	class FName                                   InIdentifier;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_SetIdentifier) == 0x000004, "Wrong alignment on TedPopup_SetIdentifier");
static_assert(sizeof(TedPopup_SetIdentifier) == 0x000008, "Wrong size on TedPopup_SetIdentifier");
static_assert(offsetof(TedPopup_SetIdentifier, InIdentifier) == 0x000000, "Member 'TedPopup_SetIdentifier::InIdentifier' has a wrong offset!");

// Function Tempest.TedPopup.ShowError
// 0x0010 (0x0010 - 0x0000)
struct TedPopup_ShowError final
{
public:
	class FText                                   ErrorMessage;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_ShowError) == 0x000008, "Wrong alignment on TedPopup_ShowError");
static_assert(sizeof(TedPopup_ShowError) == 0x000010, "Wrong size on TedPopup_ShowError");
static_assert(offsetof(TedPopup_ShowError, ErrorMessage) == 0x000000, "Member 'TedPopup_ShowError::ErrorMessage' has a wrong offset!");

// Function Tempest.TedPopup.GetBodyText
// 0x0010 (0x0010 - 0x0000)
struct TedPopup_GetBodyText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_GetBodyText) == 0x000008, "Wrong alignment on TedPopup_GetBodyText");
static_assert(sizeof(TedPopup_GetBodyText) == 0x000010, "Wrong size on TedPopup_GetBodyText");
static_assert(offsetof(TedPopup_GetBodyText, ReturnValue) == 0x000000, "Member 'TedPopup_GetBodyText::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopup.GetDropDownTitleText
// 0x0010 (0x0010 - 0x0000)
struct TedPopup_GetDropDownTitleText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_GetDropDownTitleText) == 0x000008, "Wrong alignment on TedPopup_GetDropDownTitleText");
static_assert(sizeof(TedPopup_GetDropDownTitleText) == 0x000010, "Wrong size on TedPopup_GetDropDownTitleText");
static_assert(offsetof(TedPopup_GetDropDownTitleText, ReturnValue) == 0x000000, "Member 'TedPopup_GetDropDownTitleText::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopup.GetHeaderText
// 0x0010 (0x0010 - 0x0000)
struct TedPopup_GetHeaderText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_GetHeaderText) == 0x000008, "Wrong alignment on TedPopup_GetHeaderText");
static_assert(sizeof(TedPopup_GetHeaderText) == 0x000010, "Wrong size on TedPopup_GetHeaderText");
static_assert(offsetof(TedPopup_GetHeaderText, ReturnValue) == 0x000000, "Member 'TedPopup_GetHeaderText::ReturnValue' has a wrong offset!");

// Function Tempest.TedPopup.GetIdentifier
// 0x0008 (0x0008 - 0x0000)
struct TedPopup_GetIdentifier final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopup_GetIdentifier) == 0x000004, "Wrong alignment on TedPopup_GetIdentifier");
static_assert(sizeof(TedPopup_GetIdentifier) == 0x000008, "Wrong size on TedPopup_GetIdentifier");
static_assert(offsetof(TedPopup_GetIdentifier, ReturnValue) == 0x000000, "Member 'TedPopup_GetIdentifier::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.ChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_ChangeState final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_ChangeState) == 0x000008, "Wrong alignment on TedConformationBase_ChangeState");
static_assert(sizeof(TedConformationBase_ChangeState) == 0x000018, "Wrong size on TedConformationBase_ChangeState");
static_assert(offsetof(TedConformationBase_ChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_ChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_ChangeState, InState) == 0x000008, "Member 'TedConformationBase_ChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_ChangeState, InValue) == 0x000010, "Member 'TedConformationBase_ChangeState::InValue' has a wrong offset!");
static_assert(offsetof(TedConformationBase_ChangeState, InDelay) == 0x000014, "Member 'TedConformationBase_ChangeState::InDelay' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_ChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_K2_ChangeState final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDelay;                                           // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_K2_ChangeState) == 0x000008, "Wrong alignment on TedConformationBase_K2_ChangeState");
static_assert(sizeof(TedConformationBase_K2_ChangeState) == 0x000018, "Wrong size on TedConformationBase_K2_ChangeState");
static_assert(offsetof(TedConformationBase_K2_ChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_K2_ChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_ChangeState, InState) == 0x000008, "Member 'TedConformationBase_K2_ChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_ChangeState, InValue) == 0x000010, "Member 'TedConformationBase_K2_ChangeState::InValue' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_ChangeState, InDelay) == 0x000014, "Member 'TedConformationBase_K2_ChangeState::InDelay' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_RequestChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_K2_RequestChangeState final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_K2_RequestChangeState) == 0x000008, "Wrong alignment on TedConformationBase_K2_RequestChangeState");
static_assert(sizeof(TedConformationBase_K2_RequestChangeState) == 0x000018, "Wrong size on TedConformationBase_K2_RequestChangeState");
static_assert(offsetof(TedConformationBase_K2_RequestChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_K2_RequestChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_RequestChangeState, InState) == 0x000008, "Member 'TedConformationBase_K2_RequestChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_RequestChangeState, InValue) == 0x000010, "Member 'TedConformationBase_K2_RequestChangeState::InValue' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_ShowPreview
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_K2_ShowPreview final
{
public:
	const class AActor*                           InInstigator;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_K2_ShowPreview) == 0x000008, "Wrong alignment on TedConformationBase_K2_ShowPreview");
static_assert(sizeof(TedConformationBase_K2_ShowPreview) == 0x000018, "Wrong size on TedConformationBase_K2_ShowPreview");
static_assert(offsetof(TedConformationBase_K2_ShowPreview, InInstigator) == 0x000000, "Member 'TedConformationBase_K2_ShowPreview::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_ShowPreview, InState) == 0x000008, "Member 'TedConformationBase_K2_ShowPreview::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_ShowPreview, InValue) == 0x000010, "Member 'TedConformationBase_K2_ShowPreview::InValue' has a wrong offset!");

// Function Tempest.TedConformationBase.OnRequestChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_OnRequestChangeState final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_OnRequestChangeState) == 0x000008, "Wrong alignment on TedConformationBase_OnRequestChangeState");
static_assert(sizeof(TedConformationBase_OnRequestChangeState) == 0x000018, "Wrong size on TedConformationBase_OnRequestChangeState");
static_assert(offsetof(TedConformationBase_OnRequestChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_OnRequestChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_OnRequestChangeState, InState) == 0x000008, "Member 'TedConformationBase_OnRequestChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_OnRequestChangeState, InValue) == 0x000010, "Member 'TedConformationBase_OnRequestChangeState::InValue' has a wrong offset!");

// Function Tempest.TedConformationBase.OnStateChangeCosmetic
// 0x000C (0x000C - 0x0000)
struct TedConformationBase_OnStateChangeCosmetic final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_OnStateChangeCosmetic) == 0x000004, "Wrong alignment on TedConformationBase_OnStateChangeCosmetic");
static_assert(sizeof(TedConformationBase_OnStateChangeCosmetic) == 0x00000C, "Wrong size on TedConformationBase_OnStateChangeCosmetic");
static_assert(offsetof(TedConformationBase_OnStateChangeCosmetic, InState) == 0x000000, "Member 'TedConformationBase_OnStateChangeCosmetic::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_OnStateChangeCosmetic, InValue) == 0x000008, "Member 'TedConformationBase_OnStateChangeCosmetic::InValue' has a wrong offset!");

// Function Tempest.TedConformationBase.RequestChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_RequestChangeState final
{
public:
	class AActor*                                 InInstigator;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_RequestChangeState) == 0x000008, "Wrong alignment on TedConformationBase_RequestChangeState");
static_assert(sizeof(TedConformationBase_RequestChangeState) == 0x000018, "Wrong size on TedConformationBase_RequestChangeState");
static_assert(offsetof(TedConformationBase_RequestChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_RequestChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_RequestChangeState, InState) == 0x000008, "Member 'TedConformationBase_RequestChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_RequestChangeState, InValue) == 0x000010, "Member 'TedConformationBase_RequestChangeState::InValue' has a wrong offset!");
static_assert(offsetof(TedConformationBase_RequestChangeState, ReturnValue) == 0x000014, "Member 'TedConformationBase_RequestChangeState::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.ShowPreview
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_ShowPreview final
{
public:
	const class AActor*                           InInstigator;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_ShowPreview) == 0x000008, "Wrong alignment on TedConformationBase_ShowPreview");
static_assert(sizeof(TedConformationBase_ShowPreview) == 0x000018, "Wrong size on TedConformationBase_ShowPreview");
static_assert(offsetof(TedConformationBase_ShowPreview, InInstigator) == 0x000000, "Member 'TedConformationBase_ShowPreview::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_ShowPreview, InState) == 0x000008, "Member 'TedConformationBase_ShowPreview::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_ShowPreview, InValue) == 0x000010, "Member 'TedConformationBase_ShowPreview::InValue' has a wrong offset!");

// Function Tempest.TedConformationBase.CanChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_CanChangeState final
{
public:
	const class AActor*                           InInstigator;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_CanChangeState) == 0x000008, "Wrong alignment on TedConformationBase_CanChangeState");
static_assert(sizeof(TedConformationBase_CanChangeState) == 0x000018, "Wrong size on TedConformationBase_CanChangeState");
static_assert(offsetof(TedConformationBase_CanChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_CanChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_CanChangeState, InState) == 0x000008, "Member 'TedConformationBase_CanChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_CanChangeState, InValue) == 0x000010, "Member 'TedConformationBase_CanChangeState::InValue' has a wrong offset!");
static_assert(offsetof(TedConformationBase_CanChangeState, ReturnValue) == 0x000014, "Member 'TedConformationBase_CanChangeState::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.GetConformationPreviewMesh
// 0x0070 (0x0070 - 0x0000)
struct TedConformationBase_GetConformationPreviewMesh final
{
public:
	struct FTransform                             Offset;                                            // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStreamableRenderAsset*                 ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_GetConformationPreviewMesh) == 0x000010, "Wrong alignment on TedConformationBase_GetConformationPreviewMesh");
static_assert(sizeof(TedConformationBase_GetConformationPreviewMesh) == 0x000070, "Wrong size on TedConformationBase_GetConformationPreviewMesh");
static_assert(offsetof(TedConformationBase_GetConformationPreviewMesh, Offset) == 0x000000, "Member 'TedConformationBase_GetConformationPreviewMesh::Offset' has a wrong offset!");
static_assert(offsetof(TedConformationBase_GetConformationPreviewMesh, ReturnValue) == 0x000060, "Member 'TedConformationBase_GetConformationPreviewMesh::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.GetLocationsForActivator
// 0x0010 (0x0010 - 0x0000)
struct TedConformationBase_GetLocationsForActivator final
{
public:
	TArray<struct FVector>                        OutLocations;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_GetLocationsForActivator) == 0x000008, "Wrong alignment on TedConformationBase_GetLocationsForActivator");
static_assert(sizeof(TedConformationBase_GetLocationsForActivator) == 0x000010, "Wrong size on TedConformationBase_GetLocationsForActivator");
static_assert(offsetof(TedConformationBase_GetLocationsForActivator, OutLocations) == 0x000000, "Member 'TedConformationBase_GetLocationsForActivator::OutLocations' has a wrong offset!");

// Function Tempest.TedConformationBase.GetNavAreaModifier
// 0x0008 (0x0008 - 0x0000)
struct TedConformationBase_GetNavAreaModifier final
{
public:
	class UNavModifierComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_GetNavAreaModifier) == 0x000008, "Wrong alignment on TedConformationBase_GetNavAreaModifier");
static_assert(sizeof(TedConformationBase_GetNavAreaModifier) == 0x000008, "Wrong size on TedConformationBase_GetNavAreaModifier");
static_assert(offsetof(TedConformationBase_GetNavAreaModifier, ReturnValue) == 0x000000, "Member 'TedConformationBase_GetNavAreaModifier::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.GetStateCurve
// 0x0024 (0x0024 - 0x0000)
struct TedConformationBase_GetStateCurve final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRepCurve_Float                        OutData;                                           // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_GetStateCurve) == 0x000004, "Wrong alignment on TedConformationBase_GetStateCurve");
static_assert(sizeof(TedConformationBase_GetStateCurve) == 0x000024, "Wrong size on TedConformationBase_GetStateCurve");
static_assert(offsetof(TedConformationBase_GetStateCurve, InState) == 0x000000, "Member 'TedConformationBase_GetStateCurve::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_GetStateCurve, OutData) == 0x000008, "Member 'TedConformationBase_GetStateCurve::OutData' has a wrong offset!");
static_assert(offsetof(TedConformationBase_GetStateCurve, ReturnValue) == 0x000020, "Member 'TedConformationBase_GetStateCurve::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.GetStateValue
// 0x000C (0x000C - 0x0000)
struct TedConformationBase_GetStateValue final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_GetStateValue) == 0x000004, "Wrong alignment on TedConformationBase_GetStateValue");
static_assert(sizeof(TedConformationBase_GetStateValue) == 0x00000C, "Wrong size on TedConformationBase_GetStateValue");
static_assert(offsetof(TedConformationBase_GetStateValue, InState) == 0x000000, "Member 'TedConformationBase_GetStateValue::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_GetStateValue, ReturnValue) == 0x000008, "Member 'TedConformationBase_GetStateValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.HasBegunPlay
// 0x0001 (0x0001 - 0x0000)
struct TedConformationBase_HasBegunPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_HasBegunPlay) == 0x000001, "Wrong alignment on TedConformationBase_HasBegunPlay");
static_assert(sizeof(TedConformationBase_HasBegunPlay) == 0x000001, "Wrong size on TedConformationBase_HasBegunPlay");
static_assert(offsetof(TedConformationBase_HasBegunPlay, ReturnValue) == 0x000000, "Member 'TedConformationBase_HasBegunPlay::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.IsStateChangeInProgress
// 0x000C (0x000C - 0x0000)
struct TedConformationBase_IsStateChangeInProgress final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_IsStateChangeInProgress) == 0x000004, "Wrong alignment on TedConformationBase_IsStateChangeInProgress");
static_assert(sizeof(TedConformationBase_IsStateChangeInProgress) == 0x00000C, "Wrong size on TedConformationBase_IsStateChangeInProgress");
static_assert(offsetof(TedConformationBase_IsStateChangeInProgress, InState) == 0x000000, "Member 'TedConformationBase_IsStateChangeInProgress::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_IsStateChangeInProgress, ReturnValue) == 0x000008, "Member 'TedConformationBase_IsStateChangeInProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.IsStateSupported
// 0x000C (0x000C - 0x0000)
struct TedConformationBase_IsStateSupported final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_IsStateSupported) == 0x000004, "Wrong alignment on TedConformationBase_IsStateSupported");
static_assert(sizeof(TedConformationBase_IsStateSupported) == 0x00000C, "Wrong size on TedConformationBase_IsStateSupported");
static_assert(offsetof(TedConformationBase_IsStateSupported, InState) == 0x000000, "Member 'TedConformationBase_IsStateSupported::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_IsStateSupported, ReturnValue) == 0x000008, "Member 'TedConformationBase_IsStateSupported::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_CanChangeState
// 0x0018 (0x0018 - 0x0000)
struct TedConformationBase_K2_CanChangeState final
{
public:
	const class AActor*                           InInstigator;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InState;                                           // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_K2_CanChangeState) == 0x000008, "Wrong alignment on TedConformationBase_K2_CanChangeState");
static_assert(sizeof(TedConformationBase_K2_CanChangeState) == 0x000018, "Wrong size on TedConformationBase_K2_CanChangeState");
static_assert(offsetof(TedConformationBase_K2_CanChangeState, InInstigator) == 0x000000, "Member 'TedConformationBase_K2_CanChangeState::InInstigator' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_CanChangeState, InState) == 0x000008, "Member 'TedConformationBase_K2_CanChangeState::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_CanChangeState, InValue) == 0x000010, "Member 'TedConformationBase_K2_CanChangeState::InValue' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_CanChangeState, ReturnValue) == 0x000014, "Member 'TedConformationBase_K2_CanChangeState::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_GetStateCurve
// 0x0024 (0x0024 - 0x0000)
struct TedConformationBase_K2_GetStateCurve final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRepCurve_Float                        OutData;                                           // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedConformationBase_K2_GetStateCurve) == 0x000004, "Wrong alignment on TedConformationBase_K2_GetStateCurve");
static_assert(sizeof(TedConformationBase_K2_GetStateCurve) == 0x000024, "Wrong size on TedConformationBase_K2_GetStateCurve");
static_assert(offsetof(TedConformationBase_K2_GetStateCurve, InState) == 0x000000, "Member 'TedConformationBase_K2_GetStateCurve::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_GetStateCurve, OutData) == 0x000008, "Member 'TedConformationBase_K2_GetStateCurve::OutData' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_GetStateCurve, ReturnValue) == 0x000020, "Member 'TedConformationBase_K2_GetStateCurve::ReturnValue' has a wrong offset!");

// Function Tempest.TedConformationBase.K2_GetStateValue
// 0x000C (0x000C - 0x0000)
struct TedConformationBase_K2_GetStateValue final
{
public:
	struct FGameplayTag                           InState;                                           // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedConformationBase_K2_GetStateValue) == 0x000004, "Wrong alignment on TedConformationBase_K2_GetStateValue");
static_assert(sizeof(TedConformationBase_K2_GetStateValue) == 0x00000C, "Wrong size on TedConformationBase_K2_GetStateValue");
static_assert(offsetof(TedConformationBase_K2_GetStateValue, InState) == 0x000000, "Member 'TedConformationBase_K2_GetStateValue::InState' has a wrong offset!");
static_assert(offsetof(TedConformationBase_K2_GetStateValue, ReturnValue) == 0x000008, "Member 'TedConformationBase_K2_GetStateValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandVisualActor.DestroyActorDelayed
// 0x0004 (0x0004 - 0x0000)
struct TedCommandVisualActor_DestroyActorDelayed final
{
public:
	float                                         DelayOverride;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandVisualActor_DestroyActorDelayed) == 0x000004, "Wrong alignment on TedCommandVisualActor_DestroyActorDelayed");
static_assert(sizeof(TedCommandVisualActor_DestroyActorDelayed) == 0x000004, "Wrong size on TedCommandVisualActor_DestroyActorDelayed");
static_assert(offsetof(TedCommandVisualActor_DestroyActorDelayed, DelayOverride) == 0x000000, "Member 'TedCommandVisualActor_DestroyActorDelayed::DelayOverride' has a wrong offset!");

// Function Tempest.TedCommandVisualActor.OnRep_Visibility
// 0x0038 (0x0038 - 0x0000)
struct TedCommandVisualActor_OnRep_Visibility final
{
public:
	struct FTedVisibility                         OldValue;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandVisualActor_OnRep_Visibility) == 0x000008, "Wrong alignment on TedCommandVisualActor_OnRep_Visibility");
static_assert(sizeof(TedCommandVisualActor_OnRep_Visibility) == 0x000038, "Wrong size on TedCommandVisualActor_OnRep_Visibility");
static_assert(offsetof(TedCommandVisualActor_OnRep_Visibility, OldValue) == 0x000000, "Member 'TedCommandVisualActor_OnRep_Visibility::OldValue' has a wrong offset!");

// Function Tempest.TedCommandVisualActor.GetCommandRange
// 0x0004 (0x0004 - 0x0000)
struct TedCommandVisualActor_GetCommandRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandVisualActor_GetCommandRange) == 0x000004, "Wrong alignment on TedCommandVisualActor_GetCommandRange");
static_assert(sizeof(TedCommandVisualActor_GetCommandRange) == 0x000004, "Wrong size on TedCommandVisualActor_GetCommandRange");
static_assert(offsetof(TedCommandVisualActor_GetCommandRange, ReturnValue) == 0x000000, "Member 'TedCommandVisualActor_GetCommandRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandVisualActor.GetOwningPlayerState
// 0x0008 (0x0008 - 0x0000)
struct TedCommandVisualActor_GetOwningPlayerState final
{
public:
	class ATedPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandVisualActor_GetOwningPlayerState) == 0x000008, "Wrong alignment on TedCommandVisualActor_GetOwningPlayerState");
static_assert(sizeof(TedCommandVisualActor_GetOwningPlayerState) == 0x000008, "Wrong size on TedCommandVisualActor_GetOwningPlayerState");
static_assert(offsetof(TedCommandVisualActor_GetOwningPlayerState, ReturnValue) == 0x000000, "Member 'TedCommandVisualActor_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetAlternatingActiveSlotState
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsPanel_GetAlternatingActiveSlotState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetAlternatingActiveSlotState) == 0x000001, "Wrong alignment on TedCommandsPanel_GetAlternatingActiveSlotState");
static_assert(sizeof(TedCommandsPanel_GetAlternatingActiveSlotState) == 0x000001, "Wrong size on TedCommandsPanel_GetAlternatingActiveSlotState");
static_assert(offsetof(TedCommandsPanel_GetAlternatingActiveSlotState, ReturnValue) == 0x000000, "Member 'TedCommandsPanel_GetAlternatingActiveSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetAutocastSlotState
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsPanel_GetAutocastSlotState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetAutocastSlotState) == 0x000001, "Wrong alignment on TedCommandsPanel_GetAutocastSlotState");
static_assert(sizeof(TedCommandsPanel_GetAutocastSlotState) == 0x000001, "Wrong size on TedCommandsPanel_GetAutocastSlotState");
static_assert(offsetof(TedCommandsPanel_GetAutocastSlotState, ReturnValue) == 0x000000, "Member 'TedCommandsPanel_GetAutocastSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetDurationActiveSlotState
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsPanel_GetDurationActiveSlotState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetDurationActiveSlotState) == 0x000001, "Wrong alignment on TedCommandsPanel_GetDurationActiveSlotState");
static_assert(sizeof(TedCommandsPanel_GetDurationActiveSlotState) == 0x000001, "Wrong size on TedCommandsPanel_GetDurationActiveSlotState");
static_assert(offsetof(TedCommandsPanel_GetDurationActiveSlotState, ReturnValue) == 0x000000, "Member 'TedCommandsPanel_GetDurationActiveSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetMissingPrerequisitesSlotState
// 0x0001 (0x0001 - 0x0000)
struct TedCommandsPanel_GetMissingPrerequisitesSlotState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetMissingPrerequisitesSlotState) == 0x000001, "Wrong alignment on TedCommandsPanel_GetMissingPrerequisitesSlotState");
static_assert(sizeof(TedCommandsPanel_GetMissingPrerequisitesSlotState) == 0x000001, "Wrong size on TedCommandsPanel_GetMissingPrerequisitesSlotState");
static_assert(offsetof(TedCommandsPanel_GetMissingPrerequisitesSlotState, ReturnValue) == 0x000000, "Member 'TedCommandsPanel_GetMissingPrerequisitesSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetContentIndex
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsPanel_GetContentIndex final
{
public:
	TSubclassOf<class UTedCommand>                InContent;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandsPanel_GetContentIndex) == 0x000008, "Wrong alignment on TedCommandsPanel_GetContentIndex");
static_assert(sizeof(TedCommandsPanel_GetContentIndex) == 0x000010, "Wrong size on TedCommandsPanel_GetContentIndex");
static_assert(offsetof(TedCommandsPanel_GetContentIndex, InContent) == 0x000000, "Member 'TedCommandsPanel_GetContentIndex::InContent' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetContentIndex, ReturnValue) == 0x000008, "Member 'TedCommandsPanel_GetContentIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetCooldown
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsPanel_GetCooldown final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCooldownAlpha;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandsPanel_GetCooldown) == 0x000004, "Wrong alignment on TedCommandsPanel_GetCooldown");
static_assert(sizeof(TedCommandsPanel_GetCooldown) == 0x000010, "Wrong size on TedCommandsPanel_GetCooldown");
static_assert(offsetof(TedCommandsPanel_GetCooldown, InSlotIndex) == 0x000000, "Member 'TedCommandsPanel_GetCooldown::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetCooldown, OutCooldownAlpha) == 0x000004, "Member 'TedCommandsPanel_GetCooldown::OutCooldownAlpha' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetCooldown, OutDuration) == 0x000008, "Member 'TedCommandsPanel_GetCooldown::OutDuration' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetCooldown, ReturnValue) == 0x00000C, "Member 'TedCommandsPanel_GetCooldown::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetShortcut
// 0x0030 (0x0030 - 0x0000)
struct TedCommandsPanel_GetShortcut final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputChord                            OutShortcut;                                       // 0x0008(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandsPanel_GetShortcut) == 0x000008, "Wrong alignment on TedCommandsPanel_GetShortcut");
static_assert(sizeof(TedCommandsPanel_GetShortcut) == 0x000030, "Wrong size on TedCommandsPanel_GetShortcut");
static_assert(offsetof(TedCommandsPanel_GetShortcut, InSlotIndex) == 0x000000, "Member 'TedCommandsPanel_GetShortcut::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetShortcut, OutShortcut) == 0x000008, "Member 'TedCommandsPanel_GetShortcut::OutShortcut' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetShortcut, ReturnValue) == 0x000028, "Member 'TedCommandsPanel_GetShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetSlotContent
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsPanel_GetSlotContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedCommand>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetSlotContent) == 0x000008, "Wrong alignment on TedCommandsPanel_GetSlotContent");
static_assert(sizeof(TedCommandsPanel_GetSlotContent) == 0x000010, "Wrong size on TedCommandsPanel_GetSlotContent");
static_assert(offsetof(TedCommandsPanel_GetSlotContent, InSlotIndex) == 0x000000, "Member 'TedCommandsPanel_GetSlotContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContent, ReturnValue) == 0x000008, "Member 'TedCommandsPanel_GetSlotContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetSlotContentByMappingName
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsPanel_GetSlotContentByMappingName final
{
public:
	class FName                                   MappingName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetSlotContentByMappingName) == 0x000008, "Wrong alignment on TedCommandsPanel_GetSlotContentByMappingName");
static_assert(sizeof(TedCommandsPanel_GetSlotContentByMappingName) == 0x000010, "Wrong size on TedCommandsPanel_GetSlotContentByMappingName");
static_assert(offsetof(TedCommandsPanel_GetSlotContentByMappingName, MappingName) == 0x000000, "Member 'TedCommandsPanel_GetSlotContentByMappingName::MappingName' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentByMappingName, ReturnValue) == 0x000008, "Member 'TedCommandsPanel_GetSlotContentByMappingName::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetSlotContentCDO
// 0x0010 (0x0010 - 0x0000)
struct TedCommandsPanel_GetSlotContentCDO final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedCommand*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandsPanel_GetSlotContentCDO) == 0x000008, "Wrong alignment on TedCommandsPanel_GetSlotContentCDO");
static_assert(sizeof(TedCommandsPanel_GetSlotContentCDO) == 0x000010, "Wrong size on TedCommandsPanel_GetSlotContentCDO");
static_assert(offsetof(TedCommandsPanel_GetSlotContentCDO, InSlotIndex) == 0x000000, "Member 'TedCommandsPanel_GetSlotContentCDO::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentCDO, ReturnValue) == 0x000008, "Member 'TedCommandsPanel_GetSlotContentCDO::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandsPanel.GetSlotContentUIData
// 0x0038 (0x0038 - 0x0000)
struct TedCommandsPanel_GetSlotContentUIData final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             OutIcon;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutName;                                           // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandsPanel_GetSlotContentUIData) == 0x000008, "Wrong alignment on TedCommandsPanel_GetSlotContentUIData");
static_assert(sizeof(TedCommandsPanel_GetSlotContentUIData) == 0x000038, "Wrong size on TedCommandsPanel_GetSlotContentUIData");
static_assert(offsetof(TedCommandsPanel_GetSlotContentUIData, InSlotIndex) == 0x000000, "Member 'TedCommandsPanel_GetSlotContentUIData::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentUIData, OutIcon) == 0x000008, "Member 'TedCommandsPanel_GetSlotContentUIData::OutIcon' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentUIData, OutName) == 0x000010, "Member 'TedCommandsPanel_GetSlotContentUIData::OutName' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentUIData, OutDescription) == 0x000020, "Member 'TedCommandsPanel_GetSlotContentUIData::OutDescription' has a wrong offset!");
static_assert(offsetof(TedCommandsPanel_GetSlotContentUIData, ReturnValue) == 0x000030, "Member 'TedCommandsPanel_GetSlotContentUIData::ReturnValue' has a wrong offset!");

// Function Tempest.TedCompletedStructuresSlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedCompletedStructuresSlot_GetParentPanel final
{
public:
	class UTedCompletedStructuresPanel*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCompletedStructuresSlot_GetParentPanel) == 0x000008, "Wrong alignment on TedCompletedStructuresSlot_GetParentPanel");
static_assert(sizeof(TedCompletedStructuresSlot_GetParentPanel) == 0x000008, "Wrong size on TedCompletedStructuresSlot_GetParentPanel");
static_assert(offsetof(TedCompletedStructuresSlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedCompletedStructuresSlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetMapInfoByNameSafe
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfo_GetMapInfoByNameSafe final
{
public:
	class FName                                   InMapInfoName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetMapInfoByNameSafe) == 0x000008, "Wrong alignment on TedMapInfo_GetMapInfoByNameSafe");
static_assert(sizeof(TedMapInfo_GetMapInfoByNameSafe) == 0x000010, "Wrong size on TedMapInfo_GetMapInfoByNameSafe");
static_assert(offsetof(TedMapInfo_GetMapInfoByNameSafe, InMapInfoName) == 0x000000, "Member 'TedMapInfo_GetMapInfoByNameSafe::InMapInfoName' has a wrong offset!");
static_assert(offsetof(TedMapInfo_GetMapInfoByNameSafe, ReturnValue) == 0x000008, "Member 'TedMapInfo_GetMapInfoByNameSafe::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.K2_GetCurrentMapInfo
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfo_K2_GetCurrentMapInfo final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_K2_GetCurrentMapInfo) == 0x000008, "Wrong alignment on TedMapInfo_K2_GetCurrentMapInfo");
static_assert(sizeof(TedMapInfo_K2_GetCurrentMapInfo) == 0x000010, "Wrong size on TedMapInfo_K2_GetCurrentMapInfo");
static_assert(offsetof(TedMapInfo_K2_GetCurrentMapInfo, InWorldContext) == 0x000000, "Member 'TedMapInfo_K2_GetCurrentMapInfo::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedMapInfo_K2_GetCurrentMapInfo, ReturnValue) == 0x000008, "Member 'TedMapInfo_K2_GetCurrentMapInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetCampaignSlotThumbnail
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfo_GetCampaignSlotThumbnail final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetCampaignSlotThumbnail) == 0x000008, "Wrong alignment on TedMapInfo_GetCampaignSlotThumbnail");
static_assert(sizeof(TedMapInfo_GetCampaignSlotThumbnail) == 0x000008, "Wrong size on TedMapInfo_GetCampaignSlotThumbnail");
static_assert(offsetof(TedMapInfo_GetCampaignSlotThumbnail, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetCampaignSlotThumbnail::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetAmountOfMainObjectives
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfo_GetAmountOfMainObjectives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetAmountOfMainObjectives) == 0x000004, "Wrong alignment on TedMapInfo_GetAmountOfMainObjectives");
static_assert(sizeof(TedMapInfo_GetAmountOfMainObjectives) == 0x000004, "Wrong size on TedMapInfo_GetAmountOfMainObjectives");
static_assert(offsetof(TedMapInfo_GetAmountOfMainObjectives, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetAmountOfMainObjectives::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetAmountOfSecondaryObjectives
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfo_GetAmountOfSecondaryObjectives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetAmountOfSecondaryObjectives) == 0x000004, "Wrong alignment on TedMapInfo_GetAmountOfSecondaryObjectives");
static_assert(sizeof(TedMapInfo_GetAmountOfSecondaryObjectives) == 0x000004, "Wrong size on TedMapInfo_GetAmountOfSecondaryObjectives");
static_assert(offsetof(TedMapInfo_GetAmountOfSecondaryObjectives, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetAmountOfSecondaryObjectives::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetBotPlayersNum
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfo_GetBotPlayersNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetBotPlayersNum) == 0x000004, "Wrong alignment on TedMapInfo_GetBotPlayersNum");
static_assert(sizeof(TedMapInfo_GetBotPlayersNum) == 0x000004, "Wrong size on TedMapInfo_GetBotPlayersNum");
static_assert(offsetof(TedMapInfo_GetBotPlayersNum, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetBotPlayersNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetBriefing
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfo_GetBriefing final
{
public:
	const class UTedBriefing*                     ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetBriefing) == 0x000008, "Wrong alignment on TedMapInfo_GetBriefing");
static_assert(sizeof(TedMapInfo_GetBriefing) == 0x000008, "Wrong size on TedMapInfo_GetBriefing");
static_assert(offsetof(TedMapInfo_GetBriefing, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetBriefing::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetCachedWorldBounds
// 0x0038 (0x0038 - 0x0000)
struct TedMapInfo_GetCachedWorldBounds final
{
public:
	struct FBox                                   ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetCachedWorldBounds) == 0x000008, "Wrong alignment on TedMapInfo_GetCachedWorldBounds");
static_assert(sizeof(TedMapInfo_GetCachedWorldBounds) == 0x000038, "Wrong size on TedMapInfo_GetCachedWorldBounds");
static_assert(offsetof(TedMapInfo_GetCachedWorldBounds, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetCachedWorldBounds::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfo_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetDescription) == 0x000008, "Wrong alignment on TedMapInfo_GetDescription");
static_assert(sizeof(TedMapInfo_GetDescription) == 0x000010, "Wrong size on TedMapInfo_GetDescription");
static_assert(offsetof(TedMapInfo_GetDescription, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfo_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetDisplayName) == 0x000008, "Wrong alignment on TedMapInfo_GetDisplayName");
static_assert(sizeof(TedMapInfo_GetDisplayName) == 0x000010, "Wrong size on TedMapInfo_GetDisplayName");
static_assert(offsetof(TedMapInfo_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetHumanPlayerSlots
// 0x0018 (0x0018 - 0x0000)
struct TedMapInfo_GetHumanPlayerSlots final
{
public:
	TArray<struct FTedPlayerSlot>                 OutSlots;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapInfo_GetHumanPlayerSlots) == 0x000008, "Wrong alignment on TedMapInfo_GetHumanPlayerSlots");
static_assert(sizeof(TedMapInfo_GetHumanPlayerSlots) == 0x000018, "Wrong size on TedMapInfo_GetHumanPlayerSlots");
static_assert(offsetof(TedMapInfo_GetHumanPlayerSlots, OutSlots) == 0x000000, "Member 'TedMapInfo_GetHumanPlayerSlots::OutSlots' has a wrong offset!");
static_assert(offsetof(TedMapInfo_GetHumanPlayerSlots, ReturnValue) == 0x000010, "Member 'TedMapInfo_GetHumanPlayerSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetHumanPlayersNum
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfo_GetHumanPlayersNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetHumanPlayersNum) == 0x000004, "Wrong alignment on TedMapInfo_GetHumanPlayersNum");
static_assert(sizeof(TedMapInfo_GetHumanPlayersNum) == 0x000004, "Wrong size on TedMapInfo_GetHumanPlayersNum");
static_assert(offsetof(TedMapInfo_GetHumanPlayersNum, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetHumanPlayersNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetLocation
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfo_GetLocation final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetLocation) == 0x000008, "Wrong alignment on TedMapInfo_GetLocation");
static_assert(sizeof(TedMapInfo_GetLocation) == 0x000010, "Wrong size on TedMapInfo_GetLocation");
static_assert(offsetof(TedMapInfo_GetLocation, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetMapRequisitionPoints
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfo_GetMapRequisitionPoints final
{
public:
	ETedGameDifficulty                            Difficulty;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetMapRequisitionPoints) == 0x000004, "Wrong alignment on TedMapInfo_GetMapRequisitionPoints");
static_assert(sizeof(TedMapInfo_GetMapRequisitionPoints) == 0x000008, "Wrong size on TedMapInfo_GetMapRequisitionPoints");
static_assert(offsetof(TedMapInfo_GetMapRequisitionPoints, Difficulty) == 0x000000, "Member 'TedMapInfo_GetMapRequisitionPoints::Difficulty' has a wrong offset!");
static_assert(offsetof(TedMapInfo_GetMapRequisitionPoints, ReturnValue) == 0x000004, "Member 'TedMapInfo_GetMapRequisitionPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetMapScreenSetup
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfo_GetMapScreenSetup final
{
public:
	const class UTedCommandCompoundMapScreenSetup* ReturnValue;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetMapScreenSetup) == 0x000008, "Wrong alignment on TedMapInfo_GetMapScreenSetup");
static_assert(sizeof(TedMapInfo_GetMapScreenSetup) == 0x000008, "Wrong size on TedMapInfo_GetMapScreenSetup");
static_assert(offsetof(TedMapInfo_GetMapScreenSetup, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetMapScreenSetup::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetMinimap
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfo_GetMinimap final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetMinimap) == 0x000008, "Wrong alignment on TedMapInfo_GetMinimap");
static_assert(sizeof(TedMapInfo_GetMinimap) == 0x000008, "Wrong size on TedMapInfo_GetMinimap");
static_assert(offsetof(TedMapInfo_GetMinimap, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetMinimap::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.GetPlayersNum
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfo_GetPlayersNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_GetPlayersNum) == 0x000004, "Wrong alignment on TedMapInfo_GetPlayersNum");
static_assert(sizeof(TedMapInfo_GetPlayersNum) == 0x000004, "Wrong size on TedMapInfo_GetPlayersNum");
static_assert(offsetof(TedMapInfo_GetPlayersNum, ReturnValue) == 0x000000, "Member 'TedMapInfo_GetPlayersNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfo.IsFinale
// 0x0001 (0x0001 - 0x0000)
struct TedMapInfo_IsFinale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfo_IsFinale) == 0x000001, "Wrong alignment on TedMapInfo_IsFinale");
static_assert(sizeof(TedMapInfo_IsFinale) == 0x000001, "Wrong size on TedMapInfo_IsFinale");
static_assert(offsetof(TedMapInfo_IsFinale, ReturnValue) == 0x000000, "Member 'TedMapInfo_IsFinale::ReturnValue' has a wrong offset!");

// Function Tempest.TedAchievementSubsystem.AddAchievementValue
// 0x0010 (0x0010 - 0x0000)
struct TedAchievementSubsystem_AddAchievementValue final
{
public:
	TSubclassOf<class UTedAchievementEntry>       AchievementClass;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAchievementSubsystem_AddAchievementValue) == 0x000008, "Wrong alignment on TedAchievementSubsystem_AddAchievementValue");
static_assert(sizeof(TedAchievementSubsystem_AddAchievementValue) == 0x000010, "Wrong size on TedAchievementSubsystem_AddAchievementValue");
static_assert(offsetof(TedAchievementSubsystem_AddAchievementValue, AchievementClass) == 0x000000, "Member 'TedAchievementSubsystem_AddAchievementValue::AchievementClass' has a wrong offset!");
static_assert(offsetof(TedAchievementSubsystem_AddAchievementValue, Value) == 0x000008, "Member 'TedAchievementSubsystem_AddAchievementValue::Value' has a wrong offset!");

// Function Tempest.TedAchievementSubsystem.SetAchievementValue
// 0x0010 (0x0010 - 0x0000)
struct TedAchievementSubsystem_SetAchievementValue final
{
public:
	TSubclassOf<class UTedAchievementEntry>       AchievementClass;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAchievementSubsystem_SetAchievementValue) == 0x000008, "Wrong alignment on TedAchievementSubsystem_SetAchievementValue");
static_assert(sizeof(TedAchievementSubsystem_SetAchievementValue) == 0x000010, "Wrong size on TedAchievementSubsystem_SetAchievementValue");
static_assert(offsetof(TedAchievementSubsystem_SetAchievementValue, AchievementClass) == 0x000000, "Member 'TedAchievementSubsystem_SetAchievementValue::AchievementClass' has a wrong offset!");
static_assert(offsetof(TedAchievementSubsystem_SetAchievementValue, Value) == 0x000008, "Member 'TedAchievementSubsystem_SetAchievementValue::Value' has a wrong offset!");

// Function Tempest.TedAchievementSubsystem.UnlockAchievement
// 0x0008 (0x0008 - 0x0000)
struct TedAchievementSubsystem_UnlockAchievement final
{
public:
	TSubclassOf<class UTedAchievementEntry>       AchievementClass;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAchievementSubsystem_UnlockAchievement) == 0x000008, "Wrong alignment on TedAchievementSubsystem_UnlockAchievement");
static_assert(sizeof(TedAchievementSubsystem_UnlockAchievement) == 0x000008, "Wrong size on TedAchievementSubsystem_UnlockAchievement");
static_assert(offsetof(TedAchievementSubsystem_UnlockAchievement, AchievementClass) == 0x000000, "Member 'TedAchievementSubsystem_UnlockAchievement::AchievementClass' has a wrong offset!");

// Function Tempest.TedUnitQueueInterface.CanEnqueue
// 0x0010 (0x0010 - 0x0000)
struct TedUnitQueueInterface_CanEnqueue final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUnitQueueInterface_CanEnqueue) == 0x000008, "Wrong alignment on TedUnitQueueInterface_CanEnqueue");
static_assert(sizeof(TedUnitQueueInterface_CanEnqueue) == 0x000010, "Wrong size on TedUnitQueueInterface_CanEnqueue");
static_assert(offsetof(TedUnitQueueInterface_CanEnqueue, Unit) == 0x000000, "Member 'TedUnitQueueInterface_CanEnqueue::Unit' has a wrong offset!");
static_assert(offsetof(TedUnitQueueInterface_CanEnqueue, ReturnValue) == 0x000008, "Member 'TedUnitQueueInterface_CanEnqueue::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitQueueInterface.IsQueued
// 0x0010 (0x0010 - 0x0000)
struct TedUnitQueueInterface_IsQueued final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUnitQueueInterface_IsQueued) == 0x000008, "Wrong alignment on TedUnitQueueInterface_IsQueued");
static_assert(sizeof(TedUnitQueueInterface_IsQueued) == 0x000010, "Wrong size on TedUnitQueueInterface_IsQueued");
static_assert(offsetof(TedUnitQueueInterface_IsQueued, Unit) == 0x000000, "Member 'TedUnitQueueInterface_IsQueued::Unit' has a wrong offset!");
static_assert(offsetof(TedUnitQueueInterface_IsQueued, ReturnValue) == 0x000008, "Member 'TedUnitQueueInterface_IsQueued::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureNeighborBase.K2_OnRefreshConnections
// 0x0002 (0x0002 - 0x0000)
struct TedStructureNeighborBase_K2_OnRefreshConnections final
{
public:
	struct FTedStructureConnection                InPreset;                                          // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureNeighborBase_K2_OnRefreshConnections) == 0x000001, "Wrong alignment on TedStructureNeighborBase_K2_OnRefreshConnections");
static_assert(sizeof(TedStructureNeighborBase_K2_OnRefreshConnections) == 0x000002, "Wrong size on TedStructureNeighborBase_K2_OnRefreshConnections");
static_assert(offsetof(TedStructureNeighborBase_K2_OnRefreshConnections, InPreset) == 0x000000, "Member 'TedStructureNeighborBase_K2_OnRefreshConnections::InPreset' has a wrong offset!");

// Function Tempest.TedStructureNeighborBase.K2_OnStartProceduralAnim
// 0x0001 (0x0001 - 0x0000)
struct TedStructureNeighborBase_K2_OnStartProceduralAnim final
{
public:
	ETedNeighborAnim                              Anim;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureNeighborBase_K2_OnStartProceduralAnim) == 0x000001, "Wrong alignment on TedStructureNeighborBase_K2_OnStartProceduralAnim");
static_assert(sizeof(TedStructureNeighborBase_K2_OnStartProceduralAnim) == 0x000001, "Wrong size on TedStructureNeighborBase_K2_OnStartProceduralAnim");
static_assert(offsetof(TedStructureNeighborBase_K2_OnStartProceduralAnim, Anim) == 0x000000, "Member 'TedStructureNeighborBase_K2_OnStartProceduralAnim::Anim' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.AddActorToActorTag
// 0x0018 (0x0018 - 0x0000)
struct TedActorTagFunctionLibrary_AddActorToActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_AddActorToActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_AddActorToActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_AddActorToActorTag) == 0x000018, "Wrong size on TedActorTagFunctionLibrary_AddActorToActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_AddActorToActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_AddActorToActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_AddActorToActorTag, Actor) == 0x000008, "Member 'TedActorTagFunctionLibrary_AddActorToActorTag::Actor' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_AddActorToActorTag, Tag) == 0x000010, "Member 'TedActorTagFunctionLibrary_AddActorToActorTag::Tag' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.ClearActorsUnderActorTag
// 0x0010 (0x0010 - 0x0000)
struct TedActorTagFunctionLibrary_ClearActorsUnderActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_ClearActorsUnderActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_ClearActorsUnderActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_ClearActorsUnderActorTag) == 0x000010, "Wrong size on TedActorTagFunctionLibrary_ClearActorsUnderActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_ClearActorsUnderActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_ClearActorsUnderActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_ClearActorsUnderActorTag, Tag) == 0x000008, "Member 'TedActorTagFunctionLibrary_ClearActorsUnderActorTag::Tag' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.GetActorByActorTag
// 0x0020 (0x0020 - 0x0000)
struct TedActorTagFunctionLibrary_GetActorByActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_GetActorByActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_GetActorByActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_GetActorByActorTag) == 0x000020, "Wrong size on TedActorTagFunctionLibrary_GetActorByActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorByActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_GetActorByActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorByActorTag, Tag) == 0x000008, "Member 'TedActorTagFunctionLibrary_GetActorByActorTag::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorByActorTag, Class_0) == 0x000010, "Member 'TedActorTagFunctionLibrary_GetActorByActorTag::Class_0' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorByActorTag, ReturnValue) == 0x000018, "Member 'TedActorTagFunctionLibrary_GetActorByActorTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.GetActorsByActorTag
// 0x0030 (0x0030 - 0x0000)
struct TedActorTagFunctionLibrary_GetActorsByActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagFunctionLibrary_GetActorsByActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_GetActorsByActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_GetActorsByActorTag) == 0x000030, "Wrong size on TedActorTagFunctionLibrary_GetActorsByActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTag, Tag) == 0x000008, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTag::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTag, Class_0) == 0x000010, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTag::Class_0' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTag, OutActors) == 0x000018, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTag::OutActors' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTag, ReturnValue) == 0x000028, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.GetActorsByActorTags
// 0x0048 (0x0048 - 0x0000)
struct TedActorTagFunctionLibrary_GetActorsByActorTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagFunctionLibrary_GetActorsByActorTags) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_GetActorsByActorTags");
static_assert(sizeof(TedActorTagFunctionLibrary_GetActorsByActorTags) == 0x000048, "Wrong size on TedActorTagFunctionLibrary_GetActorsByActorTags");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTags, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTags, Tags) == 0x000008, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTags::Tags' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTags, Class_0) == 0x000028, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTags::Class_0' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTags, OutActors) == 0x000030, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTags::OutActors' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTags, ReturnValue) == 0x000040, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.GetActorsByActorTagTree
// 0x0030 (0x0030 - 0x0000)
struct TedActorTagFunctionLibrary_GetActorsByActorTagTree final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagFunctionLibrary_GetActorsByActorTagTree) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_GetActorsByActorTagTree");
static_assert(sizeof(TedActorTagFunctionLibrary_GetActorsByActorTagTree) == 0x000030, "Wrong size on TedActorTagFunctionLibrary_GetActorsByActorTagTree");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTagTree, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTagTree::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTagTree, Tag) == 0x000008, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTagTree::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTagTree, Class_0) == 0x000010, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTagTree::Class_0' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTagTree, OutActors) == 0x000018, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTagTree::OutActors' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorsByActorTagTree, ReturnValue) == 0x000028, "Member 'TedActorTagFunctionLibrary_GetActorsByActorTagTree::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.GetActorTag
// 0x0018 (0x0018 - 0x0000)
struct TedActorTagFunctionLibrary_GetActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutTag;                                            // 0x0010(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_GetActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_GetActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_GetActorTag) == 0x000018, "Wrong size on TedActorTagFunctionLibrary_GetActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_GetActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorTag, Actor) == 0x000008, "Member 'TedActorTagFunctionLibrary_GetActorTag::Actor' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_GetActorTag, OutTag) == 0x000010, "Member 'TedActorTagFunctionLibrary_GetActorTag::OutTag' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.OnAddActorToActorTag
// 0x0028 (0x0028 - 0x0000)
struct TedActorTagFunctionLibrary_OnAddActorToActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedActorTagEventAction                       Action;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGameplayTag& InActorTag, class AActor* InActor, class AActor* InSecondActor)> Handler; // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagFunctionLibrary_OnAddActorToActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_OnAddActorToActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_OnAddActorToActorTag) == 0x000028, "Wrong size on TedActorTagFunctionLibrary_OnAddActorToActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_OnAddActorToActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_OnAddActorToActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnAddActorToActorTag, Action) == 0x000008, "Member 'TedActorTagFunctionLibrary_OnAddActorToActorTag::Action' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnAddActorToActorTag, Tag) == 0x00000C, "Member 'TedActorTagFunctionLibrary_OnAddActorToActorTag::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnAddActorToActorTag, Handler) == 0x000014, "Member 'TedActorTagFunctionLibrary_OnAddActorToActorTag::Handler' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.OnRemoveActorFromActorTag
// 0x0028 (0x0028 - 0x0000)
struct TedActorTagFunctionLibrary_OnRemoveActorFromActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedActorTagEventAction                       Action;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tag;                                               // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FGameplayTag& InActorTag, class AActor* InActor, class AActor* InSecondActor)> Handler; // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_OnRemoveActorFromActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag) == 0x000028, "Wrong size on TedActorTagFunctionLibrary_OnRemoveActorFromActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_OnRemoveActorFromActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag, Action) == 0x000008, "Member 'TedActorTagFunctionLibrary_OnRemoveActorFromActorTag::Action' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag, Tag) == 0x00000C, "Member 'TedActorTagFunctionLibrary_OnRemoveActorFromActorTag::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_OnRemoveActorFromActorTag, Handler) == 0x000014, "Member 'TedActorTagFunctionLibrary_OnRemoveActorFromActorTag::Handler' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.RemoveActorFromActorTag
// 0x0010 (0x0010 - 0x0000)
struct TedActorTagFunctionLibrary_RemoveActorFromActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_RemoveActorFromActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_RemoveActorFromActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_RemoveActorFromActorTag) == 0x000010, "Wrong size on TedActorTagFunctionLibrary_RemoveActorFromActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_RemoveActorFromActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_RemoveActorFromActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_RemoveActorFromActorTag, Actor) == 0x000008, "Member 'TedActorTagFunctionLibrary_RemoveActorFromActorTag::Actor' has a wrong offset!");

// Function Tempest.TedActorTagFunctionLibrary.SetActorUnderActorTag
// 0x0018 (0x0018 - 0x0000)
struct TedActorTagFunctionLibrary_SetActorUnderActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedActorTagFunctionLibrary_SetActorUnderActorTag) == 0x000008, "Wrong alignment on TedActorTagFunctionLibrary_SetActorUnderActorTag");
static_assert(sizeof(TedActorTagFunctionLibrary_SetActorUnderActorTag) == 0x000018, "Wrong size on TedActorTagFunctionLibrary_SetActorUnderActorTag");
static_assert(offsetof(TedActorTagFunctionLibrary_SetActorUnderActorTag, InWorldContext) == 0x000000, "Member 'TedActorTagFunctionLibrary_SetActorUnderActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_SetActorUnderActorTag, Tag) == 0x000008, "Member 'TedActorTagFunctionLibrary_SetActorUnderActorTag::Tag' has a wrong offset!");
static_assert(offsetof(TedActorTagFunctionLibrary_SetActorUnderActorTag, Actor) == 0x000010, "Member 'TedActorTagFunctionLibrary_SetActorUnderActorTag::Actor' has a wrong offset!");

// Function Tempest.TedActorTagSubsystem.K2_ActorHasAllMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags) == 0x000008, "Wrong alignment on TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags");
static_assert(sizeof(TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags) == 0x000030, "Wrong size on TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags, Actor) == 0x000000, "Member 'TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags, GameplayTags) == 0x000008, "Member 'TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'TedActorTagSubsystem_K2_ActorHasAllMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagSubsystem.K2_ActorHasAnyMatchingGameplayTags
// 0x0030 (0x0030 - 0x0000)
struct TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags) == 0x000008, "Wrong alignment on TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags");
static_assert(sizeof(TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags) == 0x000030, "Wrong size on TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags, Actor) == 0x000000, "Member 'TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags::Actor' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags, GameplayTags) == 0x000008, "Member 'TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags::GameplayTags' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags, ReturnValue) == 0x000028, "Member 'TedActorTagSubsystem_K2_ActorHasAnyMatchingGameplayTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagSubsystem.K2_ActorHasMatchingGameplayTag
// 0x0018 (0x0018 - 0x0000)
struct TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag) == 0x000008, "Wrong alignment on TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag");
static_assert(sizeof(TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag) == 0x000018, "Wrong size on TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag, Actor) == 0x000000, "Member 'TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag::Actor' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag, GameplayTag) == 0x000008, "Member 'TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag::GameplayTag' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag, ReturnValue) == 0x000010, "Member 'TedActorTagSubsystem_K2_ActorHasMatchingGameplayTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedActorTagSubsystem.OnActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedActorTagSubsystem_OnActorEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedActorTagSubsystem_OnActorEndPlay) == 0x000008, "Wrong alignment on TedActorTagSubsystem_OnActorEndPlay");
static_assert(sizeof(TedActorTagSubsystem_OnActorEndPlay) == 0x000010, "Wrong size on TedActorTagSubsystem_OnActorEndPlay");
static_assert(offsetof(TedActorTagSubsystem_OnActorEndPlay, InActor) == 0x000000, "Member 'TedActorTagSubsystem_OnActorEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedActorTagSubsystem_OnActorEndPlay, InEndPlayReason) == 0x000008, "Member 'TedActorTagSubsystem_OnActorEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedLobbyBeaconPlayerState.GetUniqueId
// 0x0030 (0x0030 - 0x0000)
struct TedLobbyBeaconPlayerState_GetUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconPlayerState_GetUniqueId) == 0x000008, "Wrong alignment on TedLobbyBeaconPlayerState_GetUniqueId");
static_assert(sizeof(TedLobbyBeaconPlayerState_GetUniqueId) == 0x000030, "Wrong size on TedLobbyBeaconPlayerState_GetUniqueId");
static_assert(offsetof(TedLobbyBeaconPlayerState_GetUniqueId, ReturnValue) == 0x000000, "Member 'TedLobbyBeaconPlayerState_GetUniqueId::ReturnValue' has a wrong offset!");

// Function Tempest.TedCompletedStructuresController.OnPanelContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedCompletedStructuresController_OnPanelContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCompletedStructuresController_OnPanelContentChange) == 0x000008, "Wrong alignment on TedCompletedStructuresController_OnPanelContentChange");
static_assert(sizeof(TedCompletedStructuresController_OnPanelContentChange) == 0x000008, "Wrong size on TedCompletedStructuresController_OnPanelContentChange");
static_assert(offsetof(TedCompletedStructuresController_OnPanelContentChange, InContentPanel) == 0x000000, "Member 'TedCompletedStructuresController_OnPanelContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedCompletedStructuresController.OnPanelTriggerSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedCompletedStructuresController_OnPanelTriggerSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCompletedStructuresController_OnPanelTriggerSlotAction) == 0x000008, "Wrong alignment on TedCompletedStructuresController_OnPanelTriggerSlotAction");
static_assert(sizeof(TedCompletedStructuresController_OnPanelTriggerSlotAction) == 0x000018, "Wrong size on TedCompletedStructuresController_OnPanelTriggerSlotAction");
static_assert(offsetof(TedCompletedStructuresController_OnPanelTriggerSlotAction, InContentPanel) == 0x000000, "Member 'TedCompletedStructuresController_OnPanelTriggerSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_OnPanelTriggerSlotAction, InContentSlot) == 0x000008, "Member 'TedCompletedStructuresController_OnPanelTriggerSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_OnPanelTriggerSlotAction, InAction) == 0x000010, "Member 'TedCompletedStructuresController_OnPanelTriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedCompletedStructuresController.Refresh
// 0x0018 (0x0018 - 0x0000)
struct TedCompletedStructuresController_Refresh final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCompletedStructuresController_Refresh) == 0x000008, "Wrong alignment on TedCompletedStructuresController_Refresh");
static_assert(sizeof(TedCompletedStructuresController_Refresh) == 0x000018, "Wrong size on TedCompletedStructuresController_Refresh");
static_assert(offsetof(TedCompletedStructuresController_Refresh, InContentPanel) == 0x000000, "Member 'TedCompletedStructuresController_Refresh::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_Refresh, InContentSlot) == 0x000008, "Member 'TedCompletedStructuresController_Refresh::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_Refresh, InState) == 0x000010, "Member 'TedCompletedStructuresController_Refresh::InState' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_Refresh, bInActivated) == 0x000011, "Member 'TedCompletedStructuresController_Refresh::bInActivated' has a wrong offset!");

// Function Tempest.TedCompletedStructuresController.ToggleExpansionButtonVisibility
// 0x0018 (0x0018 - 0x0000)
struct TedCompletedStructuresController_ToggleExpansionButtonVisibility final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCompletedStructuresController_ToggleExpansionButtonVisibility) == 0x000008, "Wrong alignment on TedCompletedStructuresController_ToggleExpansionButtonVisibility");
static_assert(sizeof(TedCompletedStructuresController_ToggleExpansionButtonVisibility) == 0x000018, "Wrong size on TedCompletedStructuresController_ToggleExpansionButtonVisibility");
static_assert(offsetof(TedCompletedStructuresController_ToggleExpansionButtonVisibility, InContentPanel) == 0x000000, "Member 'TedCompletedStructuresController_ToggleExpansionButtonVisibility::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_ToggleExpansionButtonVisibility, InContentSlot) == 0x000008, "Member 'TedCompletedStructuresController_ToggleExpansionButtonVisibility::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCompletedStructuresController_ToggleExpansionButtonVisibility, InAction) == 0x000010, "Member 'TedCompletedStructuresController_ToggleExpansionButtonVisibility::InAction' has a wrong offset!");

// Function Tempest.TedAIController.GetCommandTargetActor
// 0x0008 (0x0008 - 0x0000)
struct TedAIController_GetCommandTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_GetCommandTargetActor) == 0x000008, "Wrong alignment on TedAIController_GetCommandTargetActor");
static_assert(sizeof(TedAIController_GetCommandTargetActor) == 0x000008, "Wrong size on TedAIController_GetCommandTargetActor");
static_assert(offsetof(TedAIController_GetCommandTargetActor, ReturnValue) == 0x000000, "Member 'TedAIController_GetCommandTargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.GetCommandTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct TedAIController_GetCommandTargetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_GetCommandTargetLocation) == 0x000008, "Wrong alignment on TedAIController_GetCommandTargetLocation");
static_assert(sizeof(TedAIController_GetCommandTargetLocation) == 0x000018, "Wrong size on TedAIController_GetCommandTargetLocation");
static_assert(offsetof(TedAIController_GetCommandTargetLocation, ReturnValue) == 0x000000, "Member 'TedAIController_GetCommandTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.GetCurrentCommandWithBehavior
// 0x0008 (0x0008 - 0x0000)
struct TedAIController_GetCurrentCommandWithBehavior final
{
public:
	TSubclassOf<class UTedPawnCommandWithBehavior> ReturnValue;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_GetCurrentCommandWithBehavior) == 0x000008, "Wrong alignment on TedAIController_GetCurrentCommandWithBehavior");
static_assert(sizeof(TedAIController_GetCurrentCommandWithBehavior) == 0x000008, "Wrong size on TedAIController_GetCurrentCommandWithBehavior");
static_assert(offsetof(TedAIController_GetCurrentCommandWithBehavior, ReturnValue) == 0x000000, "Member 'TedAIController_GetCurrentCommandWithBehavior::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.GetLeashLocation
// 0x0018 (0x0018 - 0x0000)
struct TedAIController_GetLeashLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_GetLeashLocation) == 0x000008, "Wrong alignment on TedAIController_GetLeashLocation");
static_assert(sizeof(TedAIController_GetLeashLocation) == 0x000018, "Wrong size on TedAIController_GetLeashLocation");
static_assert(offsetof(TedAIController_GetLeashLocation, ReturnValue) == 0x000000, "Member 'TedAIController_GetLeashLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.GetUtilityAIBrain
// 0x0008 (0x0008 - 0x0000)
struct TedAIController_GetUtilityAIBrain final
{
public:
	class UUtilityAIBrain*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_GetUtilityAIBrain) == 0x000008, "Wrong alignment on TedAIController_GetUtilityAIBrain");
static_assert(sizeof(TedAIController_GetUtilityAIBrain) == 0x000008, "Wrong size on TedAIController_GetUtilityAIBrain");
static_assert(offsetof(TedAIController_GetUtilityAIBrain, ReturnValue) == 0x000000, "Member 'TedAIController_GetUtilityAIBrain::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.IsCommandTargetLocationSet
// 0x0001 (0x0001 - 0x0000)
struct TedAIController_IsCommandTargetLocationSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_IsCommandTargetLocationSet) == 0x000001, "Wrong alignment on TedAIController_IsCommandTargetLocationSet");
static_assert(sizeof(TedAIController_IsCommandTargetLocationSet) == 0x000001, "Wrong size on TedAIController_IsCommandTargetLocationSet");
static_assert(offsetof(TedAIController_IsCommandTargetLocationSet, ReturnValue) == 0x000000, "Member 'TedAIController_IsCommandTargetLocationSet::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.IsExecutingCommandWithBehavior
// 0x0010 (0x0010 - 0x0000)
struct TedAIController_IsExecutingCommandWithBehavior final
{
public:
	TSubclassOf<class UTedPawnCommandWithBehavior> Command;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAIController_IsExecutingCommandWithBehavior) == 0x000008, "Wrong alignment on TedAIController_IsExecutingCommandWithBehavior");
static_assert(sizeof(TedAIController_IsExecutingCommandWithBehavior) == 0x000010, "Wrong size on TedAIController_IsExecutingCommandWithBehavior");
static_assert(offsetof(TedAIController_IsExecutingCommandWithBehavior, Command) == 0x000000, "Member 'TedAIController_IsExecutingCommandWithBehavior::Command' has a wrong offset!");
static_assert(offsetof(TedAIController_IsExecutingCommandWithBehavior, ReturnValue) == 0x000008, "Member 'TedAIController_IsExecutingCommandWithBehavior::ReturnValue' has a wrong offset!");

// Function Tempest.TedAIController.IsLogicPaused
// 0x0001 (0x0001 - 0x0000)
struct TedAIController_IsLogicPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAIController_IsLogicPaused) == 0x000001, "Wrong alignment on TedAIController_IsLogicPaused");
static_assert(sizeof(TedAIController_IsLogicPaused) == 0x000001, "Wrong size on TedAIController_IsLogicPaused");
static_assert(offsetof(TedAIController_IsLogicPaused, ReturnValue) == 0x000000, "Member 'TedAIController_IsLogicPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanelTooltip.GetTargetStatusPanel
// 0x0008 (0x0008 - 0x0000)
struct TedStatusPanelTooltip_GetTargetStatusPanel final
{
public:
	class UTedStatusPanel*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanelTooltip_GetTargetStatusPanel) == 0x000008, "Wrong alignment on TedStatusPanelTooltip_GetTargetStatusPanel");
static_assert(sizeof(TedStatusPanelTooltip_GetTargetStatusPanel) == 0x000008, "Wrong size on TedStatusPanelTooltip_GetTargetStatusPanel");
static_assert(offsetof(TedStatusPanelTooltip_GetTargetStatusPanel, ReturnValue) == 0x000000, "Member 'TedStatusPanelTooltip_GetTargetStatusPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanelTooltip.GetTargetStatusSlot
// 0x0008 (0x0008 - 0x0000)
struct TedStatusPanelTooltip_GetTargetStatusSlot final
{
public:
	class UTedStatusSlot*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanelTooltip_GetTargetStatusSlot) == 0x000008, "Wrong alignment on TedStatusPanelTooltip_GetTargetStatusSlot");
static_assert(sizeof(TedStatusPanelTooltip_GetTargetStatusSlot) == 0x000008, "Wrong size on TedStatusPanelTooltip_GetTargetStatusSlot");
static_assert(offsetof(TedStatusPanelTooltip_GetTargetStatusSlot, ReturnValue) == 0x000000, "Member 'TedStatusPanelTooltip_GetTargetStatusSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.EnableOutline
// 0x0001 (0x0001 - 0x0000)
struct TedUnitBase_EnableOutline final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_EnableOutline) == 0x000001, "Wrong alignment on TedUnitBase_EnableOutline");
static_assert(sizeof(TedUnitBase_EnableOutline) == 0x000001, "Wrong size on TedUnitBase_EnableOutline");
static_assert(offsetof(TedUnitBase_EnableOutline, bEnabled) == 0x000000, "Member 'TedUnitBase_EnableOutline::bEnabled' has a wrong offset!");

// Function Tempest.TedUnitBase.ReceiveTickMovement
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_ReceiveTickMovement final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_ReceiveTickMovement) == 0x000004, "Wrong alignment on TedUnitBase_ReceiveTickMovement");
static_assert(sizeof(TedUnitBase_ReceiveTickMovement) == 0x000008, "Wrong size on TedUnitBase_ReceiveTickMovement");
static_assert(offsetof(TedUnitBase_ReceiveTickMovement, Speed) == 0x000000, "Member 'TedUnitBase_ReceiveTickMovement::Speed' has a wrong offset!");
static_assert(offsetof(TedUnitBase_ReceiveTickMovement, MaxSpeed) == 0x000004, "Member 'TedUnitBase_ReceiveTickMovement::MaxSpeed' has a wrong offset!");

// Function Tempest.TedUnitBase.SetFollowUnit
// 0x0010 (0x0010 - 0x0000)
struct TedUnitBase_SetFollowUnit final
{
public:
	class ATedUnitBase*                           InUnit;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFollowUnitSpeedAdjustmentDistanceOverride;       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUnitBase_SetFollowUnit) == 0x000008, "Wrong alignment on TedUnitBase_SetFollowUnit");
static_assert(sizeof(TedUnitBase_SetFollowUnit) == 0x000010, "Wrong size on TedUnitBase_SetFollowUnit");
static_assert(offsetof(TedUnitBase_SetFollowUnit, InUnit) == 0x000000, "Member 'TedUnitBase_SetFollowUnit::InUnit' has a wrong offset!");
static_assert(offsetof(TedUnitBase_SetFollowUnit, InFollowUnitSpeedAdjustmentDistanceOverride) == 0x000008, "Member 'TedUnitBase_SetFollowUnit::InFollowUnitSpeedAdjustmentDistanceOverride' has a wrong offset!");

// Function Tempest.TedUnitBase.GetDefaultNavigationFilterClass
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_GetDefaultNavigationFilterClass final
{
public:
	TSubclassOf<class UNavigationQueryFilter>     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_GetDefaultNavigationFilterClass) == 0x000008, "Wrong alignment on TedUnitBase_GetDefaultNavigationFilterClass");
static_assert(sizeof(TedUnitBase_GetDefaultNavigationFilterClass) == 0x000008, "Wrong size on TedUnitBase_GetDefaultNavigationFilterClass");
static_assert(offsetof(TedUnitBase_GetDefaultNavigationFilterClass, ReturnValue) == 0x000000, "Member 'TedUnitBase_GetDefaultNavigationFilterClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.GetDefinitionAsset
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_GetDefinitionAsset final
{
public:
	const class UTedUnitDefinitionAsset*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_GetDefinitionAsset) == 0x000008, "Wrong alignment on TedUnitBase_GetDefinitionAsset");
static_assert(sizeof(TedUnitBase_GetDefinitionAsset) == 0x000008, "Wrong size on TedUnitBase_GetDefinitionAsset");
static_assert(offsetof(TedUnitBase_GetDefinitionAsset, ReturnValue) == 0x000000, "Member 'TedUnitBase_GetDefinitionAsset::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.GetFollowUnit
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_GetFollowUnit final
{
public:
	class ATedUnitBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_GetFollowUnit) == 0x000008, "Wrong alignment on TedUnitBase_GetFollowUnit");
static_assert(sizeof(TedUnitBase_GetFollowUnit) == 0x000008, "Wrong size on TedUnitBase_GetFollowUnit");
static_assert(offsetof(TedUnitBase_GetFollowUnit, ReturnValue) == 0x000000, "Member 'TedUnitBase_GetFollowUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.GetNavFilterSelector
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_GetNavFilterSelector final
{
public:
	const class UTedNavFilterSelector*            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_GetNavFilterSelector) == 0x000008, "Wrong alignment on TedUnitBase_GetNavFilterSelector");
static_assert(sizeof(TedUnitBase_GetNavFilterSelector) == 0x000008, "Wrong size on TedUnitBase_GetNavFilterSelector");
static_assert(offsetof(TedUnitBase_GetNavFilterSelector, ReturnValue) == 0x000000, "Member 'TedUnitBase_GetNavFilterSelector::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.IsStealthEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedUnitBase_IsStealthEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_IsStealthEnabled) == 0x000001, "Wrong alignment on TedUnitBase_IsStealthEnabled");
static_assert(sizeof(TedUnitBase_IsStealthEnabled) == 0x000001, "Wrong size on TedUnitBase_IsStealthEnabled");
static_assert(offsetof(TedUnitBase_IsStealthEnabled, ReturnValue) == 0x000000, "Member 'TedUnitBase_IsStealthEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitBase.UpdateOutline
// 0x0008 (0x0008 - 0x0000)
struct TedUnitBase_UpdateOutline final
{
public:
	const class URTSColorSubsystem*               InRTSColorSubsystem;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitBase_UpdateOutline) == 0x000008, "Wrong alignment on TedUnitBase_UpdateOutline");
static_assert(sizeof(TedUnitBase_UpdateOutline) == 0x000008, "Wrong size on TedUnitBase_UpdateOutline");
static_assert(offsetof(TedUnitBase_UpdateOutline, InRTSColorSubsystem) == 0x000000, "Member 'TedUnitBase_UpdateOutline::InRTSColorSubsystem' has a wrong offset!");

// Function Tempest.TedVehicle.OnDeployedStateChanged
// 0x000C (0x000C - 0x0000)
struct TedVehicle_OnDeployedStateChanged final
{
public:
	struct FGameplayTag                           CallbackTag;                                       // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewCount;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_OnDeployedStateChanged) == 0x000004, "Wrong alignment on TedVehicle_OnDeployedStateChanged");
static_assert(sizeof(TedVehicle_OnDeployedStateChanged) == 0x00000C, "Wrong size on TedVehicle_OnDeployedStateChanged");
static_assert(offsetof(TedVehicle_OnDeployedStateChanged, CallbackTag) == 0x000000, "Member 'TedVehicle_OnDeployedStateChanged::CallbackTag' has a wrong offset!");
static_assert(offsetof(TedVehicle_OnDeployedStateChanged, NewCount) == 0x000008, "Member 'TedVehicle_OnDeployedStateChanged::NewCount' has a wrong offset!");

// Function Tempest.TedVehicle.SetDrivingInReverse
// 0x0001 (0x0001 - 0x0000)
struct TedVehicle_SetDrivingInReverse final
{
public:
	bool                                          bReverse;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_SetDrivingInReverse) == 0x000001, "Wrong alignment on TedVehicle_SetDrivingInReverse");
static_assert(sizeof(TedVehicle_SetDrivingInReverse) == 0x000001, "Wrong size on TedVehicle_SetDrivingInReverse");
static_assert(offsetof(TedVehicle_SetDrivingInReverse, bReverse) == 0x000000, "Member 'TedVehicle_SetDrivingInReverse::bReverse' has a wrong offset!");

// Function Tempest.TedVehicle.IsDrivingInReverse
// 0x0001 (0x0001 - 0x0000)
struct TedVehicle_IsDrivingInReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_IsDrivingInReverse) == 0x000001, "Wrong alignment on TedVehicle_IsDrivingInReverse");
static_assert(sizeof(TedVehicle_IsDrivingInReverse) == 0x000001, "Wrong size on TedVehicle_IsDrivingInReverse");
static_assert(offsetof(TedVehicle_IsDrivingInReverse, ReturnValue) == 0x000000, "Member 'TedVehicle_IsDrivingInReverse::ReturnValue' has a wrong offset!");

// Function Tempest.TedVehicle.K2_GetSelectionMIDs
// 0x0010 (0x0010 - 0x0000)
struct TedVehicle_K2_GetSelectionMIDs final
{
public:
	TArray<class UMaterialInstanceDynamic*>       OutSelectionMIDs;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_K2_GetSelectionMIDs) == 0x000008, "Wrong alignment on TedVehicle_K2_GetSelectionMIDs");
static_assert(sizeof(TedVehicle_K2_GetSelectionMIDs) == 0x000010, "Wrong size on TedVehicle_K2_GetSelectionMIDs");
static_assert(offsetof(TedVehicle_K2_GetSelectionMIDs, OutSelectionMIDs) == 0x000000, "Member 'TedVehicle_K2_GetSelectionMIDs::OutSelectionMIDs' has a wrong offset!");

// Function Tempest.TedCursorWidget.GetNewSoftwareCursorVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedCursorWidget_GetNewSoftwareCursorVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCursorWidget_GetNewSoftwareCursorVisibility) == 0x000001, "Wrong alignment on TedCursorWidget_GetNewSoftwareCursorVisibility");
static_assert(sizeof(TedCursorWidget_GetNewSoftwareCursorVisibility) == 0x000001, "Wrong size on TedCursorWidget_GetNewSoftwareCursorVisibility");
static_assert(offsetof(TedCursorWidget_GetNewSoftwareCursorVisibility, ReturnValue) == 0x000000, "Member 'TedCursorWidget_GetNewSoftwareCursorVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedCursorWidget.GetOldSoftwareCursorVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedCursorWidget_GetOldSoftwareCursorVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCursorWidget_GetOldSoftwareCursorVisibility) == 0x000001, "Wrong alignment on TedCursorWidget_GetOldSoftwareCursorVisibility");
static_assert(sizeof(TedCursorWidget_GetOldSoftwareCursorVisibility) == 0x000001, "Wrong size on TedCursorWidget_GetOldSoftwareCursorVisibility");
static_assert(offsetof(TedCursorWidget_GetOldSoftwareCursorVisibility, ReturnValue) == 0x000000, "Member 'TedCursorWidget_GetOldSoftwareCursorVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.ReceiveAircraftFlightStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_ReceiveAircraftFlightStateChanged final
{
public:
	ETedAircraftFlightState                       NewFlightState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_ReceiveAircraftFlightStateChanged) == 0x000001, "Wrong alignment on TedAircraft_ReceiveAircraftFlightStateChanged");
static_assert(sizeof(TedAircraft_ReceiveAircraftFlightStateChanged) == 0x000001, "Wrong size on TedAircraft_ReceiveAircraftFlightStateChanged");
static_assert(offsetof(TedAircraft_ReceiveAircraftFlightStateChanged, NewFlightState) == 0x000000, "Member 'TedAircraft_ReceiveAircraftFlightStateChanged::NewFlightState' has a wrong offset!");

// Function Tempest.TedAircraft.GetBodyTransform
// 0x0060 (0x0060 - 0x0000)
struct TedAircraft_GetBodyTransform final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_GetBodyTransform) == 0x000010, "Wrong alignment on TedAircraft_GetBodyTransform");
static_assert(sizeof(TedAircraft_GetBodyTransform) == 0x000060, "Wrong size on TedAircraft_GetBodyTransform");
static_assert(offsetof(TedAircraft_GetBodyTransform, OutTransform) == 0x000000, "Member 'TedAircraft_GetBodyTransform::OutTransform' has a wrong offset!");

// Function Tempest.TedAircraft.GetCurrentAirpad
// 0x0008 (0x0008 - 0x0000)
struct TedAircraft_GetCurrentAirpad final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_GetCurrentAirpad) == 0x000008, "Wrong alignment on TedAircraft_GetCurrentAirpad");
static_assert(sizeof(TedAircraft_GetCurrentAirpad) == 0x000008, "Wrong size on TedAircraft_GetCurrentAirpad");
static_assert(offsetof(TedAircraft_GetCurrentAirpad, ReturnValue) == 0x000000, "Member 'TedAircraft_GetCurrentAirpad::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.GetLandingTransform
// 0x0060 (0x0060 - 0x0000)
struct TedAircraft_GetLandingTransform final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_GetLandingTransform) == 0x000010, "Wrong alignment on TedAircraft_GetLandingTransform");
static_assert(sizeof(TedAircraft_GetLandingTransform) == 0x000060, "Wrong size on TedAircraft_GetLandingTransform");
static_assert(offsetof(TedAircraft_GetLandingTransform, OutTransform) == 0x000000, "Member 'TedAircraft_GetLandingTransform::OutTransform' has a wrong offset!");

// Function Tempest.TedAircraft.GetParentAirpad
// 0x0008 (0x0008 - 0x0000)
struct TedAircraft_GetParentAirpad final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_GetParentAirpad) == 0x000008, "Wrong alignment on TedAircraft_GetParentAirpad");
static_assert(sizeof(TedAircraft_GetParentAirpad) == 0x000008, "Wrong size on TedAircraft_GetParentAirpad");
static_assert(offsetof(TedAircraft_GetParentAirpad, ReturnValue) == 0x000000, "Member 'TedAircraft_GetParentAirpad::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.IsAirborne
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_IsAirborne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_IsAirborne) == 0x000001, "Wrong alignment on TedAircraft_IsAirborne");
static_assert(sizeof(TedAircraft_IsAirborne) == 0x000001, "Wrong size on TedAircraft_IsAirborne");
static_assert(offsetof(TedAircraft_IsAirborne, ReturnValue) == 0x000000, "Member 'TedAircraft_IsAirborne::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.IsLanding
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_IsLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_IsLanding) == 0x000001, "Wrong alignment on TedAircraft_IsLanding");
static_assert(sizeof(TedAircraft_IsLanding) == 0x000001, "Wrong size on TedAircraft_IsLanding");
static_assert(offsetof(TedAircraft_IsLanding, ReturnValue) == 0x000000, "Member 'TedAircraft_IsLanding::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.IsTakingOff
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_IsTakingOff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_IsTakingOff) == 0x000001, "Wrong alignment on TedAircraft_IsTakingOff");
static_assert(sizeof(TedAircraft_IsTakingOff) == 0x000001, "Wrong size on TedAircraft_IsTakingOff");
static_assert(offsetof(TedAircraft_IsTakingOff, ReturnValue) == 0x000000, "Member 'TedAircraft_IsTakingOff::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.IsVTOL
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_IsVTOL final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_IsVTOL) == 0x000001, "Wrong alignment on TedAircraft_IsVTOL");
static_assert(sizeof(TedAircraft_IsVTOL) == 0x000001, "Wrong size on TedAircraft_IsVTOL");
static_assert(offsetof(TedAircraft_IsVTOL, ReturnValue) == 0x000000, "Member 'TedAircraft_IsVTOL::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraft.RearmsAtAirpad
// 0x0001 (0x0001 - 0x0000)
struct TedAircraft_RearmsAtAirpad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraft_RearmsAtAirpad) == 0x000001, "Wrong alignment on TedAircraft_RearmsAtAirpad");
static_assert(sizeof(TedAircraft_RearmsAtAirpad) == 0x000001, "Wrong size on TedAircraft_RearmsAtAirpad");
static_assert(offsetof(TedAircraft_RearmsAtAirpad, ReturnValue) == 0x000000, "Member 'TedAircraft_RearmsAtAirpad::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.SetBodyTransform
// 0x0060 (0x0060 - 0x0000)
struct TedAircraftMovementComponent_SetBodyTransform final
{
public:
	struct FTransform                             InTransform;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_SetBodyTransform) == 0x000010, "Wrong alignment on TedAircraftMovementComponent_SetBodyTransform");
static_assert(sizeof(TedAircraftMovementComponent_SetBodyTransform) == 0x000060, "Wrong size on TedAircraftMovementComponent_SetBodyTransform");
static_assert(offsetof(TedAircraftMovementComponent_SetBodyTransform, InTransform) == 0x000000, "Member 'TedAircraftMovementComponent_SetBodyTransform::InTransform' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.GetBodyTransform
// 0x0060 (0x0060 - 0x0000)
struct TedAircraftMovementComponent_GetBodyTransform final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_GetBodyTransform) == 0x000010, "Wrong alignment on TedAircraftMovementComponent_GetBodyTransform");
static_assert(sizeof(TedAircraftMovementComponent_GetBodyTransform) == 0x000060, "Wrong size on TedAircraftMovementComponent_GetBodyTransform");
static_assert(offsetof(TedAircraftMovementComponent_GetBodyTransform, OutTransform) == 0x000000, "Member 'TedAircraftMovementComponent_GetBodyTransform::OutTransform' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.GetHTOLSpline
// 0x0008 (0x0008 - 0x0000)
struct TedAircraftMovementComponent_GetHTOLSpline final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_GetHTOLSpline) == 0x000008, "Wrong alignment on TedAircraftMovementComponent_GetHTOLSpline");
static_assert(sizeof(TedAircraftMovementComponent_GetHTOLSpline) == 0x000008, "Wrong size on TedAircraftMovementComponent_GetHTOLSpline");
static_assert(offsetof(TedAircraftMovementComponent_GetHTOLSpline, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_GetHTOLSpline::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.GetLandingTransform
// 0x0060 (0x0060 - 0x0000)
struct TedAircraftMovementComponent_GetLandingTransform final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_GetLandingTransform) == 0x000010, "Wrong alignment on TedAircraftMovementComponent_GetLandingTransform");
static_assert(sizeof(TedAircraftMovementComponent_GetLandingTransform) == 0x000060, "Wrong size on TedAircraftMovementComponent_GetLandingTransform");
static_assert(offsetof(TedAircraftMovementComponent_GetLandingTransform, OutTransform) == 0x000000, "Member 'TedAircraftMovementComponent_GetLandingTransform::OutTransform' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.GetTakeOffAbility
// 0x0008 (0x0008 - 0x0000)
struct TedAircraftMovementComponent_GetTakeOffAbility final
{
public:
	TSubclassOf<class UTedAbilityBase>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_GetTakeOffAbility) == 0x000008, "Wrong alignment on TedAircraftMovementComponent_GetTakeOffAbility");
static_assert(sizeof(TedAircraftMovementComponent_GetTakeOffAbility) == 0x000008, "Wrong size on TedAircraftMovementComponent_GetTakeOffAbility");
static_assert(offsetof(TedAircraftMovementComponent_GetTakeOffAbility, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_GetTakeOffAbility::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.IsAirborne
// 0x0001 (0x0001 - 0x0000)
struct TedAircraftMovementComponent_IsAirborne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_IsAirborne) == 0x000001, "Wrong alignment on TedAircraftMovementComponent_IsAirborne");
static_assert(sizeof(TedAircraftMovementComponent_IsAirborne) == 0x000001, "Wrong size on TedAircraftMovementComponent_IsAirborne");
static_assert(offsetof(TedAircraftMovementComponent_IsAirborne, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_IsAirborne::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.IsAirborneOnSpawn
// 0x0001 (0x0001 - 0x0000)
struct TedAircraftMovementComponent_IsAirborneOnSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_IsAirborneOnSpawn) == 0x000001, "Wrong alignment on TedAircraftMovementComponent_IsAirborneOnSpawn");
static_assert(sizeof(TedAircraftMovementComponent_IsAirborneOnSpawn) == 0x000001, "Wrong size on TedAircraftMovementComponent_IsAirborneOnSpawn");
static_assert(offsetof(TedAircraftMovementComponent_IsAirborneOnSpawn, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_IsAirborneOnSpawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.IsLanding
// 0x0001 (0x0001 - 0x0000)
struct TedAircraftMovementComponent_IsLanding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_IsLanding) == 0x000001, "Wrong alignment on TedAircraftMovementComponent_IsLanding");
static_assert(sizeof(TedAircraftMovementComponent_IsLanding) == 0x000001, "Wrong size on TedAircraftMovementComponent_IsLanding");
static_assert(offsetof(TedAircraftMovementComponent_IsLanding, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_IsLanding::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.IsTakingOff
// 0x0001 (0x0001 - 0x0000)
struct TedAircraftMovementComponent_IsTakingOff final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_IsTakingOff) == 0x000001, "Wrong alignment on TedAircraftMovementComponent_IsTakingOff");
static_assert(sizeof(TedAircraftMovementComponent_IsTakingOff) == 0x000001, "Wrong size on TedAircraftMovementComponent_IsTakingOff");
static_assert(offsetof(TedAircraftMovementComponent_IsTakingOff, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_IsTakingOff::ReturnValue' has a wrong offset!");

// Function Tempest.TedAircraftMovementComponent.IsVTOL
// 0x0001 (0x0001 - 0x0000)
struct TedAircraftMovementComponent_IsVTOL final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAircraftMovementComponent_IsVTOL) == 0x000001, "Wrong alignment on TedAircraftMovementComponent_IsVTOL");
static_assert(sizeof(TedAircraftMovementComponent_IsVTOL) == 0x000001, "Wrong size on TedAircraftMovementComponent_IsVTOL");
static_assert(offsetof(TedAircraftMovementComponent_IsVTOL, ReturnValue) == 0x000000, "Member 'TedAircraftMovementComponent_IsVTOL::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.GetAirpadTransform
// 0x0080 (0x0080 - 0x0000)
struct TedAirpadInterface_GetAirpadTransform final
{
public:
	const class ATedAircraft*                     Aircraft;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0010(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0xF];                                       // 0x0071(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAirpadInterface_GetAirpadTransform) == 0x000010, "Wrong alignment on TedAirpadInterface_GetAirpadTransform");
static_assert(sizeof(TedAirpadInterface_GetAirpadTransform) == 0x000080, "Wrong size on TedAirpadInterface_GetAirpadTransform");
static_assert(offsetof(TedAirpadInterface_GetAirpadTransform, Aircraft) == 0x000000, "Member 'TedAirpadInterface_GetAirpadTransform::Aircraft' has a wrong offset!");
static_assert(offsetof(TedAirpadInterface_GetAirpadTransform, OutTransform) == 0x000010, "Member 'TedAirpadInterface_GetAirpadTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(TedAirpadInterface_GetAirpadTransform, ReturnValue) == 0x000070, "Member 'TedAirpadInterface_GetAirpadTransform::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.GetFreeAirpadId
// 0x0001 (0x0001 - 0x0000)
struct TedAirpadInterface_GetFreeAirpadId final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAirpadInterface_GetFreeAirpadId) == 0x000001, "Wrong alignment on TedAirpadInterface_GetFreeAirpadId");
static_assert(sizeof(TedAirpadInterface_GetFreeAirpadId) == 0x000001, "Wrong size on TedAirpadInterface_GetFreeAirpadId");
static_assert(offsetof(TedAirpadInterface_GetFreeAirpadId, ReturnValue) == 0x000000, "Member 'TedAirpadInterface_GetFreeAirpadId::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.GetHTOLSpline
// 0x0008 (0x0008 - 0x0000)
struct TedAirpadInterface_GetHTOLSpline final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAirpadInterface_GetHTOLSpline) == 0x000008, "Wrong alignment on TedAirpadInterface_GetHTOLSpline");
static_assert(sizeof(TedAirpadInterface_GetHTOLSpline) == 0x000008, "Wrong size on TedAirpadInterface_GetHTOLSpline");
static_assert(offsetof(TedAirpadInterface_GetHTOLSpline, ReturnValue) == 0x000000, "Member 'TedAirpadInterface_GetHTOLSpline::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.GetLandingApproachLocation
// 0x0028 (0x0028 - 0x0000)
struct TedAirpadInterface_GetLandingApproachLocation final
{
public:
	const class ATedAircraft*                     Aircraft;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLandingApproach;                                // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAirpadInterface_GetLandingApproachLocation) == 0x000008, "Wrong alignment on TedAirpadInterface_GetLandingApproachLocation");
static_assert(sizeof(TedAirpadInterface_GetLandingApproachLocation) == 0x000028, "Wrong size on TedAirpadInterface_GetLandingApproachLocation");
static_assert(offsetof(TedAirpadInterface_GetLandingApproachLocation, Aircraft) == 0x000000, "Member 'TedAirpadInterface_GetLandingApproachLocation::Aircraft' has a wrong offset!");
static_assert(offsetof(TedAirpadInterface_GetLandingApproachLocation, OutLandingApproach) == 0x000008, "Member 'TedAirpadInterface_GetLandingApproachLocation::OutLandingApproach' has a wrong offset!");
static_assert(offsetof(TedAirpadInterface_GetLandingApproachLocation, ReturnValue) == 0x000020, "Member 'TedAirpadInterface_GetLandingApproachLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.IsParentToAircraft
// 0x0010 (0x0010 - 0x0000)
struct TedAirpadInterface_IsParentToAircraft final
{
public:
	const class ATedAircraft*                     Aircraft;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAirpadInterface_IsParentToAircraft) == 0x000008, "Wrong alignment on TedAirpadInterface_IsParentToAircraft");
static_assert(sizeof(TedAirpadInterface_IsParentToAircraft) == 0x000010, "Wrong size on TedAirpadInterface_IsParentToAircraft");
static_assert(offsetof(TedAirpadInterface_IsParentToAircraft, Aircraft) == 0x000000, "Member 'TedAirpadInterface_IsParentToAircraft::Aircraft' has a wrong offset!");
static_assert(offsetof(TedAirpadInterface_IsParentToAircraft, ReturnValue) == 0x000008, "Member 'TedAirpadInterface_IsParentToAircraft::ReturnValue' has a wrong offset!");

// Function Tempest.TedAirpadInterface.K2_GetRegisteredAircraft
// 0x0010 (0x0010 - 0x0000)
struct TedAirpadInterface_K2_GetRegisteredAircraft final
{
public:
	TArray<class ATedAircraft*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAirpadInterface_K2_GetRegisteredAircraft) == 0x000008, "Wrong alignment on TedAirpadInterface_K2_GetRegisteredAircraft");
static_assert(sizeof(TedAirpadInterface_K2_GetRegisteredAircraft) == 0x000010, "Wrong size on TedAirpadInterface_K2_GetRegisteredAircraft");
static_assert(offsetof(TedAirpadInterface_K2_GetRegisteredAircraft, ReturnValue) == 0x000000, "Member 'TedAirpadInterface_K2_GetRegisteredAircraft::ReturnValue' has a wrong offset!");

// Function Tempest.TedCursorState.CalculateFlipbookParams
// 0x0018 (0x0018 - 0x0000)
struct TedCursorState_CalculateFlipbookParams final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDisplaySize;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutColumns;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRows;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCursorState_CalculateFlipbookParams) == 0x000008, "Wrong alignment on TedCursorState_CalculateFlipbookParams");
static_assert(sizeof(TedCursorState_CalculateFlipbookParams) == 0x000018, "Wrong size on TedCursorState_CalculateFlipbookParams");
static_assert(offsetof(TedCursorState_CalculateFlipbookParams, InTexture) == 0x000000, "Member 'TedCursorState_CalculateFlipbookParams::InTexture' has a wrong offset!");
static_assert(offsetof(TedCursorState_CalculateFlipbookParams, InDisplaySize) == 0x000008, "Member 'TedCursorState_CalculateFlipbookParams::InDisplaySize' has a wrong offset!");
static_assert(offsetof(TedCursorState_CalculateFlipbookParams, OutColumns) == 0x00000C, "Member 'TedCursorState_CalculateFlipbookParams::OutColumns' has a wrong offset!");
static_assert(offsetof(TedCursorState_CalculateFlipbookParams, OutRows) == 0x000010, "Member 'TedCursorState_CalculateFlipbookParams::OutRows' has a wrong offset!");
static_assert(offsetof(TedCursorState_CalculateFlipbookParams, ReturnValue) == 0x000014, "Member 'TedCursorState_CalculateFlipbookParams::ReturnValue' has a wrong offset!");

// Function Tempest.TedCursorState.GetCursorAttitude
// 0x0002 (0x0002 - 0x0000)
struct TedCursorState_GetCursorAttitude final
{
public:
	ERTSAttitudeType                              Out;                                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCursorState_GetCursorAttitude) == 0x000001, "Wrong alignment on TedCursorState_GetCursorAttitude");
static_assert(sizeof(TedCursorState_GetCursorAttitude) == 0x000002, "Wrong size on TedCursorState_GetCursorAttitude");
static_assert(offsetof(TedCursorState_GetCursorAttitude, Out) == 0x000000, "Member 'TedCursorState_GetCursorAttitude::Out' has a wrong offset!");
static_assert(offsetof(TedCursorState_GetCursorAttitude, ReturnValue) == 0x000001, "Member 'TedCursorState_GetCursorAttitude::ReturnValue' has a wrong offset!");

// Function Tempest.TedCursorState.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct TedCursorState_GetPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCursorState_GetPlayerController) == 0x000008, "Wrong alignment on TedCursorState_GetPlayerController");
static_assert(sizeof(TedCursorState_GetPlayerController) == 0x000008, "Wrong size on TedCursorState_GetPlayerController");
static_assert(offsetof(TedCursorState_GetPlayerController, ReturnValue) == 0x000000, "Member 'TedCursorState_GetPlayerController::ReturnValue' has a wrong offset!");

// Function Tempest.TedCursorState_Command.GetCommandCursor
// 0x0020 (0x0020 - 0x0000)
struct TedCursorState_Command_GetCommandCursor final
{
public:
	struct FTedCursorDisplayData                  InData;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCursorState_Command_GetCommandCursor) == 0x000008, "Wrong alignment on TedCursorState_Command_GetCommandCursor");
static_assert(sizeof(TedCursorState_Command_GetCommandCursor) == 0x000020, "Wrong size on TedCursorState_Command_GetCommandCursor");
static_assert(offsetof(TedCursorState_Command_GetCommandCursor, InData) == 0x000000, "Member 'TedCursorState_Command_GetCommandCursor::InData' has a wrong offset!");
static_assert(offsetof(TedCursorState_Command_GetCommandCursor, ReturnValue) == 0x000018, "Member 'TedCursorState_Command_GetCommandCursor::ReturnValue' has a wrong offset!");

// Function Tempest.TedAmmoVisualActor.K2_OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct TedAmmoVisualActor_K2_OnVisibilityChanged final
{
public:
	bool                                          bNewVisible;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAmmoVisualActor_K2_OnVisibilityChanged) == 0x000001, "Wrong alignment on TedAmmoVisualActor_K2_OnVisibilityChanged");
static_assert(sizeof(TedAmmoVisualActor_K2_OnVisibilityChanged) == 0x000001, "Wrong size on TedAmmoVisualActor_K2_OnVisibilityChanged");
static_assert(offsetof(TedAmmoVisualActor_K2_OnVisibilityChanged, bNewVisible) == 0x000000, "Member 'TedAmmoVisualActor_K2_OnVisibilityChanged::bNewVisible' has a wrong offset!");

// Function Tempest.TedAmmoVisualActor.IsRecharging
// 0x0001 (0x0001 - 0x0000)
struct TedAmmoVisualActor_IsRecharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAmmoVisualActor_IsRecharging) == 0x000001, "Wrong alignment on TedAmmoVisualActor_IsRecharging");
static_assert(sizeof(TedAmmoVisualActor_IsRecharging) == 0x000001, "Wrong size on TedAmmoVisualActor_IsRecharging");
static_assert(offsetof(TedAmmoVisualActor_IsRecharging, ReturnValue) == 0x000000, "Member 'TedAmmoVisualActor_IsRecharging::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureFactoryTypesSlot.GetContent
// 0x000C (0x000C - 0x0000)
struct TedStructureFactoryTypesSlot_GetContent final
{
public:
	struct FGameplayTag                           OutContent;                                        // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructureFactoryTypesSlot_GetContent) == 0x000004, "Wrong alignment on TedStructureFactoryTypesSlot_GetContent");
static_assert(sizeof(TedStructureFactoryTypesSlot_GetContent) == 0x00000C, "Wrong size on TedStructureFactoryTypesSlot_GetContent");
static_assert(offsetof(TedStructureFactoryTypesSlot_GetContent, OutContent) == 0x000000, "Member 'TedStructureFactoryTypesSlot_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedStructureFactoryTypesSlot_GetContent, ReturnValue) == 0x000008, "Member 'TedStructureFactoryTypesSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedCustomUpgradeLogic.K2_ApplyUpgrade
// 0x0040 (0x0040 - 0x0000)
struct TedCustomUpgradeLogic_K2_ApplyUpgrade final
{
public:
	struct FTedActiveUpgrade                      InActiveUpgrade;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCustomUpgradeLogic_K2_ApplyUpgrade) == 0x000008, "Wrong alignment on TedCustomUpgradeLogic_K2_ApplyUpgrade");
static_assert(sizeof(TedCustomUpgradeLogic_K2_ApplyUpgrade) == 0x000040, "Wrong size on TedCustomUpgradeLogic_K2_ApplyUpgrade");
static_assert(offsetof(TedCustomUpgradeLogic_K2_ApplyUpgrade, InActiveUpgrade) == 0x000000, "Member 'TedCustomUpgradeLogic_K2_ApplyUpgrade::InActiveUpgrade' has a wrong offset!");

// Function Tempest.TedCustomUpgradeLogic.K2_IsApplicableToPawn
// 0x0010 (0x0010 - 0x0000)
struct TedCustomUpgradeLogic_K2_IsApplicableToPawn final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCustomUpgradeLogic_K2_IsApplicableToPawn) == 0x000008, "Wrong alignment on TedCustomUpgradeLogic_K2_IsApplicableToPawn");
static_assert(sizeof(TedCustomUpgradeLogic_K2_IsApplicableToPawn) == 0x000010, "Wrong size on TedCustomUpgradeLogic_K2_IsApplicableToPawn");
static_assert(offsetof(TedCustomUpgradeLogic_K2_IsApplicableToPawn, InPawn) == 0x000000, "Member 'TedCustomUpgradeLogic_K2_IsApplicableToPawn::InPawn' has a wrong offset!");
static_assert(offsetof(TedCustomUpgradeLogic_K2_IsApplicableToPawn, ReturnValue) == 0x000008, "Member 'TedCustomUpgradeLogic_K2_IsApplicableToPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedCustomUpgradeLogic.K2_RemoveUpgrade
// 0x0040 (0x0040 - 0x0000)
struct TedCustomUpgradeLogic_K2_RemoveUpgrade final
{
public:
	struct FTedActiveUpgrade                      InActiveUpgrade;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCustomUpgradeLogic_K2_RemoveUpgrade) == 0x000008, "Wrong alignment on TedCustomUpgradeLogic_K2_RemoveUpgrade");
static_assert(sizeof(TedCustomUpgradeLogic_K2_RemoveUpgrade) == 0x000040, "Wrong size on TedCustomUpgradeLogic_K2_RemoveUpgrade");
static_assert(offsetof(TedCustomUpgradeLogic_K2_RemoveUpgrade, InActiveUpgrade) == 0x000000, "Member 'TedCustomUpgradeLogic_K2_RemoveUpgrade::InActiveUpgrade' has a wrong offset!");

// Function Tempest.TedCustomUpgradeLogic.K2_TryApplyToPawn
// 0x0010 (0x0010 - 0x0000)
struct TedCustomUpgradeLogic_K2_TryApplyToPawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCustomUpgradeLogic_K2_TryApplyToPawn) == 0x000008, "Wrong alignment on TedCustomUpgradeLogic_K2_TryApplyToPawn");
static_assert(sizeof(TedCustomUpgradeLogic_K2_TryApplyToPawn) == 0x000010, "Wrong size on TedCustomUpgradeLogic_K2_TryApplyToPawn");
static_assert(offsetof(TedCustomUpgradeLogic_K2_TryApplyToPawn, InPawn) == 0x000000, "Member 'TedCustomUpgradeLogic_K2_TryApplyToPawn::InPawn' has a wrong offset!");
static_assert(offsetof(TedCustomUpgradeLogic_K2_TryApplyToPawn, ReturnValue) == 0x000008, "Member 'TedCustomUpgradeLogic_K2_TryApplyToPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedCustomUpgradeLogic.K2_TryRemoveFromPawn
// 0x0010 (0x0010 - 0x0000)
struct TedCustomUpgradeLogic_K2_TryRemoveFromPawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCustomUpgradeLogic_K2_TryRemoveFromPawn) == 0x000008, "Wrong alignment on TedCustomUpgradeLogic_K2_TryRemoveFromPawn");
static_assert(sizeof(TedCustomUpgradeLogic_K2_TryRemoveFromPawn) == 0x000010, "Wrong size on TedCustomUpgradeLogic_K2_TryRemoveFromPawn");
static_assert(offsetof(TedCustomUpgradeLogic_K2_TryRemoveFromPawn, InPawn) == 0x000000, "Member 'TedCustomUpgradeLogic_K2_TryRemoveFromPawn::InPawn' has a wrong offset!");
static_assert(offsetof(TedCustomUpgradeLogic_K2_TryRemoveFromPawn, ReturnValue) == 0x000008, "Member 'TedCustomUpgradeLogic_K2_TryRemoveFromPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedDamageType.GetGameplayCueTag
// 0x0008 (0x0008 - 0x0000)
struct TedDamageType_GetGameplayCueTag final
{
public:
	struct FGameplayCueTag                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDamageType_GetGameplayCueTag) == 0x000004, "Wrong alignment on TedDamageType_GetGameplayCueTag");
static_assert(sizeof(TedDamageType_GetGameplayCueTag) == 0x000008, "Wrong size on TedDamageType_GetGameplayCueTag");
static_assert(offsetof(TedDamageType_GetGameplayCueTag, ReturnValue) == 0x000000, "Member 'TedDamageType_GetGameplayCueTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedDifficultyLibrary.DelayWithDifficulty
// 0x0050 (0x0050 - 0x0000)
struct TedDifficultyLibrary_DelayWithDifficulty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MultiplierPreset;                                  // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              LatentSaveGameData;                                // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDifficultyLibrary_DelayWithDifficulty) == 0x000008, "Wrong alignment on TedDifficultyLibrary_DelayWithDifficulty");
static_assert(sizeof(TedDifficultyLibrary_DelayWithDifficulty) == 0x000050, "Wrong size on TedDifficultyLibrary_DelayWithDifficulty");
static_assert(offsetof(TedDifficultyLibrary_DelayWithDifficulty, WorldContextObject) == 0x000000, "Member 'TedDifficultyLibrary_DelayWithDifficulty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedDifficultyLibrary_DelayWithDifficulty, Duration) == 0x000008, "Member 'TedDifficultyLibrary_DelayWithDifficulty::Duration' has a wrong offset!");
static_assert(offsetof(TedDifficultyLibrary_DelayWithDifficulty, MultiplierPreset) == 0x00000C, "Member 'TedDifficultyLibrary_DelayWithDifficulty::MultiplierPreset' has a wrong offset!");
static_assert(offsetof(TedDifficultyLibrary_DelayWithDifficulty, LatentInfo) == 0x000018, "Member 'TedDifficultyLibrary_DelayWithDifficulty::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedDifficultyLibrary_DelayWithDifficulty, LatentSaveGameData) == 0x000030, "Member 'TedDifficultyLibrary_DelayWithDifficulty::LatentSaveGameData' has a wrong offset!");

// Function Tempest.TedSaveLoadMenuScreen.OnMenuVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct TedSaveLoadMenuScreen_OnMenuVisibilityChanged final
{
public:
	ESlateVisibility                              NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadMenuScreen_OnMenuVisibilityChanged) == 0x000001, "Wrong alignment on TedSaveLoadMenuScreen_OnMenuVisibilityChanged");
static_assert(sizeof(TedSaveLoadMenuScreen_OnMenuVisibilityChanged) == 0x000001, "Wrong size on TedSaveLoadMenuScreen_OnMenuVisibilityChanged");
static_assert(offsetof(TedSaveLoadMenuScreen_OnMenuVisibilityChanged, NewVisibility) == 0x000000, "Member 'TedSaveLoadMenuScreen_OnMenuVisibilityChanged::NewVisibility' has a wrong offset!");

// Function Tempest.TedSaveLoadMenuScreen.WillHandleGoBackEvent
// 0x0001 (0x0001 - 0x0000)
struct TedSaveLoadMenuScreen_WillHandleGoBackEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadMenuScreen_WillHandleGoBackEvent) == 0x000001, "Wrong alignment on TedSaveLoadMenuScreen_WillHandleGoBackEvent");
static_assert(sizeof(TedSaveLoadMenuScreen_WillHandleGoBackEvent) == 0x000001, "Wrong size on TedSaveLoadMenuScreen_WillHandleGoBackEvent");
static_assert(offsetof(TedSaveLoadMenuScreen_WillHandleGoBackEvent, ReturnValue) == 0x000000, "Member 'TedSaveLoadMenuScreen_WillHandleGoBackEvent::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.K2_SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionPanel_K2_SetContent final
{
public:
	TArray<class UTedDefinitionAsset*>            InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_K2_SetContent) == 0x000008, "Wrong alignment on TedDefinitionPanel_K2_SetContent");
static_assert(sizeof(TedDefinitionPanel_K2_SetContent) == 0x000010, "Wrong size on TedDefinitionPanel_K2_SetContent");
static_assert(offsetof(TedDefinitionPanel_K2_SetContent, InContent) == 0x000000, "Member 'TedDefinitionPanel_K2_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.K2_SetContentAndContext
// 0x0018 (0x0018 - 0x0000)
struct TedDefinitionPanel_K2_SetContentAndContext final
{
public:
	TArray<class UTedDefinitionAsset*>            InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ATedPlayerState*                        InContext;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_K2_SetContentAndContext) == 0x000008, "Wrong alignment on TedDefinitionPanel_K2_SetContentAndContext");
static_assert(sizeof(TedDefinitionPanel_K2_SetContentAndContext) == 0x000018, "Wrong size on TedDefinitionPanel_K2_SetContentAndContext");
static_assert(offsetof(TedDefinitionPanel_K2_SetContentAndContext, InContent) == 0x000000, "Member 'TedDefinitionPanel_K2_SetContentAndContext::InContent' has a wrong offset!");
static_assert(offsetof(TedDefinitionPanel_K2_SetContentAndContext, InContext) == 0x000010, "Member 'TedDefinitionPanel_K2_SetContentAndContext::InContext' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.SetDefinitionContext
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionPanel_SetDefinitionContext final
{
public:
	class ATedPlayerState*                        InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_SetDefinitionContext) == 0x000008, "Wrong alignment on TedDefinitionPanel_SetDefinitionContext");
static_assert(sizeof(TedDefinitionPanel_SetDefinitionContext) == 0x000008, "Wrong size on TedDefinitionPanel_SetDefinitionContext");
static_assert(offsetof(TedDefinitionPanel_SetDefinitionContext, InContext) == 0x000000, "Member 'TedDefinitionPanel_SetDefinitionContext::InContext' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.GetContentDefinition
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionPanel_GetContentDefinition final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedDefinitionAsset*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_GetContentDefinition) == 0x000008, "Wrong alignment on TedDefinitionPanel_GetContentDefinition");
static_assert(sizeof(TedDefinitionPanel_GetContentDefinition) == 0x000010, "Wrong size on TedDefinitionPanel_GetContentDefinition");
static_assert(offsetof(TedDefinitionPanel_GetContentDefinition, InSlotIndex) == 0x000000, "Member 'TedDefinitionPanel_GetContentDefinition::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDefinitionPanel_GetContentDefinition, ReturnValue) == 0x000008, "Member 'TedDefinitionPanel_GetContentDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.GetContentDescription
// 0x0018 (0x0018 - 0x0000)
struct TedDefinitionPanel_GetContentDescription final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_GetContentDescription) == 0x000008, "Wrong alignment on TedDefinitionPanel_GetContentDescription");
static_assert(sizeof(TedDefinitionPanel_GetContentDescription) == 0x000018, "Wrong size on TedDefinitionPanel_GetContentDescription");
static_assert(offsetof(TedDefinitionPanel_GetContentDescription, InSlotIndex) == 0x000000, "Member 'TedDefinitionPanel_GetContentDescription::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDefinitionPanel_GetContentDescription, ReturnValue) == 0x000008, "Member 'TedDefinitionPanel_GetContentDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.GetContentDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedDefinitionPanel_GetContentDisplayName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_GetContentDisplayName) == 0x000008, "Wrong alignment on TedDefinitionPanel_GetContentDisplayName");
static_assert(sizeof(TedDefinitionPanel_GetContentDisplayName) == 0x000018, "Wrong size on TedDefinitionPanel_GetContentDisplayName");
static_assert(offsetof(TedDefinitionPanel_GetContentDisplayName, InSlotIndex) == 0x000000, "Member 'TedDefinitionPanel_GetContentDisplayName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDefinitionPanel_GetContentDisplayName, ReturnValue) == 0x000008, "Member 'TedDefinitionPanel_GetContentDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.GetContentIcon
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionPanel_GetContentIcon final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_GetContentIcon) == 0x000008, "Wrong alignment on TedDefinitionPanel_GetContentIcon");
static_assert(sizeof(TedDefinitionPanel_GetContentIcon) == 0x000010, "Wrong size on TedDefinitionPanel_GetContentIcon");
static_assert(offsetof(TedDefinitionPanel_GetContentIcon, InSlotIndex) == 0x000000, "Member 'TedDefinitionPanel_GetContentIcon::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDefinitionPanel_GetContentIcon, ReturnValue) == 0x000008, "Member 'TedDefinitionPanel_GetContentIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel.GetDefinitionContext
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionPanel_GetDefinitionContext final
{
public:
	class ATedPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_GetDefinitionContext) == 0x000008, "Wrong alignment on TedDefinitionPanel_GetDefinitionContext");
static_assert(sizeof(TedDefinitionPanel_GetDefinitionContext) == 0x000008, "Wrong size on TedDefinitionPanel_GetDefinitionContext");
static_assert(offsetof(TedDefinitionPanel_GetDefinitionContext, ReturnValue) == 0x000000, "Member 'TedDefinitionPanel_GetDefinitionContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedAnnouncement.OnAnnouncementPlay
// 0x0010 (0x0010 - 0x0000)
struct TedAnnouncement_OnAnnouncementPlay final
{
public:
	const class ATedPlayerController*             OwningPC;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          OptionalObject;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAnnouncement_OnAnnouncementPlay) == 0x000008, "Wrong alignment on TedAnnouncement_OnAnnouncementPlay");
static_assert(sizeof(TedAnnouncement_OnAnnouncementPlay) == 0x000010, "Wrong size on TedAnnouncement_OnAnnouncementPlay");
static_assert(offsetof(TedAnnouncement_OnAnnouncementPlay, OwningPC) == 0x000000, "Member 'TedAnnouncement_OnAnnouncementPlay::OwningPC' has a wrong offset!");
static_assert(offsetof(TedAnnouncement_OnAnnouncementPlay, OptionalObject) == 0x000008, "Member 'TedAnnouncement_OnAnnouncementPlay::OptionalObject' has a wrong offset!");

// Function Tempest.TedScoreScreenHeadersPanel.GetContent
// 0x0038 (0x0038 - 0x0000)
struct TedScoreScreenHeadersPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedTableHeaderContent                 OutContent;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenHeadersPanel_GetContent) == 0x000008, "Wrong alignment on TedScoreScreenHeadersPanel_GetContent");
static_assert(sizeof(TedScoreScreenHeadersPanel_GetContent) == 0x000038, "Wrong size on TedScoreScreenHeadersPanel_GetContent");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedScoreScreenHeadersPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContent, OutContent) == 0x000008, "Member 'TedScoreScreenHeadersPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContent, ReturnValue) == 0x000030, "Member 'TedScoreScreenHeadersPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenHeadersPanel.GetContentByState
// 0x0038 (0x0038 - 0x0000)
struct TedScoreScreenHeadersPanel_GetContentByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedTableHeaderContent                 OutContent;                                        // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenHeadersPanel_GetContentByState) == 0x000008, "Wrong alignment on TedScoreScreenHeadersPanel_GetContentByState");
static_assert(sizeof(TedScoreScreenHeadersPanel_GetContentByState) == 0x000038, "Wrong size on TedScoreScreenHeadersPanel_GetContentByState");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContentByState, InState) == 0x000000, "Member 'TedScoreScreenHeadersPanel_GetContentByState::InState' has a wrong offset!");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContentByState, InIndex) == 0x000004, "Member 'TedScoreScreenHeadersPanel_GetContentByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContentByState, OutContent) == 0x000008, "Member 'TedScoreScreenHeadersPanel_GetContentByState::OutContent' has a wrong offset!");
static_assert(offsetof(TedScoreScreenHeadersPanel_GetContentByState, ReturnValue) == 0x000030, "Member 'TedScoreScreenHeadersPanel_GetContentByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenHeadersPanel.IsSorting
// 0x0001 (0x0001 - 0x0000)
struct TedScoreScreenHeadersPanel_IsSorting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenHeadersPanel_IsSorting) == 0x000001, "Wrong alignment on TedScoreScreenHeadersPanel_IsSorting");
static_assert(sizeof(TedScoreScreenHeadersPanel_IsSorting) == 0x000001, "Wrong size on TedScoreScreenHeadersPanel_IsSorting");
static_assert(offsetof(TedScoreScreenHeadersPanel_IsSorting, ReturnValue) == 0x000000, "Member 'TedScoreScreenHeadersPanel_IsSorting::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenHeadersPanel.IsSortingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedScoreScreenHeadersPanel_IsSortingEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenHeadersPanel_IsSortingEnabled) == 0x000001, "Wrong alignment on TedScoreScreenHeadersPanel_IsSortingEnabled");
static_assert(sizeof(TedScoreScreenHeadersPanel_IsSortingEnabled) == 0x000001, "Wrong size on TedScoreScreenHeadersPanel_IsSortingEnabled");
static_assert(offsetof(TedScoreScreenHeadersPanel_IsSortingEnabled, ReturnValue) == 0x000000, "Member 'TedScoreScreenHeadersPanel_IsSortingEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenHeadersPanel.IsSortingInAscendingOrder
// 0x0001 (0x0001 - 0x0000)
struct TedScoreScreenHeadersPanel_IsSortingInAscendingOrder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenHeadersPanel_IsSortingInAscendingOrder) == 0x000001, "Wrong alignment on TedScoreScreenHeadersPanel_IsSortingInAscendingOrder");
static_assert(sizeof(TedScoreScreenHeadersPanel_IsSortingInAscendingOrder) == 0x000001, "Wrong size on TedScoreScreenHeadersPanel_IsSortingInAscendingOrder");
static_assert(offsetof(TedScoreScreenHeadersPanel_IsSortingInAscendingOrder, ReturnValue) == 0x000000, "Member 'TedScoreScreenHeadersPanel_IsSortingInAscendingOrder::ReturnValue' has a wrong offset!");

// Function Tempest.TedAnnouncer.StartNextAnnouncement
// 0x0002 (0x0002 - 0x0000)
struct TedAnnouncer_StartNextAnnouncement final
{
public:
	bool                                          bUseSpacing;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilent;                                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAnnouncer_StartNextAnnouncement) == 0x000001, "Wrong alignment on TedAnnouncer_StartNextAnnouncement");
static_assert(sizeof(TedAnnouncer_StartNextAnnouncement) == 0x000002, "Wrong size on TedAnnouncer_StartNextAnnouncement");
static_assert(offsetof(TedAnnouncer_StartNextAnnouncement, bUseSpacing) == 0x000000, "Member 'TedAnnouncer_StartNextAnnouncement::bUseSpacing' has a wrong offset!");
static_assert(offsetof(TedAnnouncer_StartNextAnnouncement, bSilent) == 0x000001, "Member 'TedAnnouncer_StartNextAnnouncement::bSilent' has a wrong offset!");

// Function Tempest.TedScoreScreenSlotInterface.SetAvatar
// 0x0008 (0x0008 - 0x0000)
struct TedScoreScreenSlotInterface_SetAvatar final
{
public:
	class UTexture2D*                             InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenSlotInterface_SetAvatar) == 0x000008, "Wrong alignment on TedScoreScreenSlotInterface_SetAvatar");
static_assert(sizeof(TedScoreScreenSlotInterface_SetAvatar) == 0x000008, "Wrong size on TedScoreScreenSlotInterface_SetAvatar");
static_assert(offsetof(TedScoreScreenSlotInterface_SetAvatar, InTexture) == 0x000000, "Member 'TedScoreScreenSlotInterface_SetAvatar::InTexture' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.GetDoctrineSlotState_Disabled
// 0x0001 (0x0001 - 0x0000)
struct TedDoctrinePanel_GetDoctrineSlotState_Disabled final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_GetDoctrineSlotState_Disabled) == 0x000001, "Wrong alignment on TedDoctrinePanel_GetDoctrineSlotState_Disabled");
static_assert(sizeof(TedDoctrinePanel_GetDoctrineSlotState_Disabled) == 0x000001, "Wrong size on TedDoctrinePanel_GetDoctrineSlotState_Disabled");
static_assert(offsetof(TedDoctrinePanel_GetDoctrineSlotState_Disabled, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_GetDoctrineSlotState_Disabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.GetDoctrineSlotState_Purchased
// 0x0001 (0x0001 - 0x0000)
struct TedDoctrinePanel_GetDoctrineSlotState_Purchased final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_GetDoctrineSlotState_Purchased) == 0x000001, "Wrong alignment on TedDoctrinePanel_GetDoctrineSlotState_Purchased");
static_assert(sizeof(TedDoctrinePanel_GetDoctrineSlotState_Purchased) == 0x000001, "Wrong size on TedDoctrinePanel_GetDoctrineSlotState_Purchased");
static_assert(offsetof(TedDoctrinePanel_GetDoctrineSlotState_Purchased, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_GetDoctrineSlotState_Purchased::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.K2_SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrinePanel_K2_SetContent final
{
public:
	TArray<class UTedDoctrineDefinition*>         InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_K2_SetContent) == 0x000008, "Wrong alignment on TedDoctrinePanel_K2_SetContent");
static_assert(sizeof(TedDoctrinePanel_K2_SetContent) == 0x000010, "Wrong size on TedDoctrinePanel_K2_SetContent");
static_assert(offsetof(TedDoctrinePanel_K2_SetContent, InContent) == 0x000000, "Member 'TedDoctrinePanel_K2_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.SetContentFromTree
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_SetContentFromTree final
{
public:
	const class UTedDoctrineTreeDefinition*       InTree;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_SetContentFromTree) == 0x000008, "Wrong alignment on TedDoctrinePanel_SetContentFromTree");
static_assert(sizeof(TedDoctrinePanel_SetContentFromTree) == 0x000008, "Wrong size on TedDoctrinePanel_SetContentFromTree");
static_assert(offsetof(TedDoctrinePanel_SetContentFromTree, InTree) == 0x000000, "Member 'TedDoctrinePanel_SetContentFromTree::InTree' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.GetContentTreeDescription
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrinePanel_GetContentTreeDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_GetContentTreeDescription) == 0x000008, "Wrong alignment on TedDoctrinePanel_GetContentTreeDescription");
static_assert(sizeof(TedDoctrinePanel_GetContentTreeDescription) == 0x000010, "Wrong size on TedDoctrinePanel_GetContentTreeDescription");
static_assert(offsetof(TedDoctrinePanel_GetContentTreeDescription, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_GetContentTreeDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.GetContentTreeIcon
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_GetContentTreeIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_GetContentTreeIcon) == 0x000008, "Wrong alignment on TedDoctrinePanel_GetContentTreeIcon");
static_assert(sizeof(TedDoctrinePanel_GetContentTreeIcon) == 0x000008, "Wrong size on TedDoctrinePanel_GetContentTreeIcon");
static_assert(offsetof(TedDoctrinePanel_GetContentTreeIcon, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_GetContentTreeIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel.GetContentTreeTitle
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrinePanel_GetContentTreeTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_GetContentTreeTitle) == 0x000008, "Wrong alignment on TedDoctrinePanel_GetContentTreeTitle");
static_assert(sizeof(TedDoctrinePanel_GetContentTreeTitle) == 0x000010, "Wrong size on TedDoctrinePanel_GetContentTreeTitle");
static_assert(offsetof(TedDoctrinePanel_GetContentTreeTitle, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_GetContentTreeTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.SetTargetPlayerData
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrinePanel_HUD_SetTargetPlayerData final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_SetTargetPlayerData) == 0x000008, "Wrong alignment on TedDoctrinePanel_HUD_SetTargetPlayerData");
static_assert(sizeof(TedDoctrinePanel_HUD_SetTargetPlayerData) == 0x000010, "Wrong size on TedDoctrinePanel_HUD_SetTargetPlayerData");
static_assert(offsetof(TedDoctrinePanel_HUD_SetTargetPlayerData, InPlayerData) == 0x000000, "Member 'TedDoctrinePanel_HUD_SetTargetPlayerData::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_SetTargetPlayerData, bInRefreshContent) == 0x000008, "Member 'TedDoctrinePanel_HUD_SetTargetPlayerData::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.GetLastUnlockedSlot
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_GetLastUnlockedSlot final
{
public:
	class UTedDoctrineSlot*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_HUD_GetLastUnlockedSlot) == 0x000008, "Wrong alignment on TedDoctrinePanel_HUD_GetLastUnlockedSlot");
static_assert(sizeof(TedDoctrinePanel_HUD_GetLastUnlockedSlot) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_GetLastUnlockedSlot");
static_assert(offsetof(TedDoctrinePanel_HUD_GetLastUnlockedSlot, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_HUD_GetLastUnlockedSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.GetTargetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_GetTargetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_HUD_GetTargetPlayerData) == 0x000008, "Wrong alignment on TedDoctrinePanel_HUD_GetTargetPlayerData");
static_assert(sizeof(TedDoctrinePanel_HUD_GetTargetPlayerData) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_GetTargetPlayerData");
static_assert(offsetof(TedDoctrinePanel_HUD_GetTargetPlayerData, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_HUD_GetTargetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsLastUnlockedSlot
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_IsLastUnlockedSlot final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_IsLastUnlockedSlot) == 0x000004, "Wrong alignment on TedDoctrinePanel_HUD_IsLastUnlockedSlot");
static_assert(sizeof(TedDoctrinePanel_HUD_IsLastUnlockedSlot) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_IsLastUnlockedSlot");
static_assert(offsetof(TedDoctrinePanel_HUD_IsLastUnlockedSlot, InSlotIndex) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsLastUnlockedSlot::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_IsLastUnlockedSlot, ReturnValue) == 0x000004, "Member 'TedDoctrinePanel_HUD_IsLastUnlockedSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsResearched
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_IsResearched final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_IsResearched) == 0x000004, "Wrong alignment on TedDoctrinePanel_HUD_IsResearched");
static_assert(sizeof(TedDoctrinePanel_HUD_IsResearched) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_IsResearched");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearched, InSlotIndex) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsResearched::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearched, ReturnValue) == 0x000004, "Member 'TedDoctrinePanel_HUD_IsResearched::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsResearchInProgress
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_IsResearchInProgress final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_IsResearchInProgress) == 0x000004, "Wrong alignment on TedDoctrinePanel_HUD_IsResearchInProgress");
static_assert(sizeof(TedDoctrinePanel_HUD_IsResearchInProgress) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_IsResearchInProgress");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearchInProgress, InSlotIndex) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsResearchInProgress::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearchInProgress, ReturnValue) == 0x000004, "Member 'TedDoctrinePanel_HUD_IsResearchInProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsResearchPaused
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_IsResearchPaused final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_IsResearchPaused) == 0x000004, "Wrong alignment on TedDoctrinePanel_HUD_IsResearchPaused");
static_assert(sizeof(TedDoctrinePanel_HUD_IsResearchPaused) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_IsResearchPaused");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearchPaused, InSlotIndex) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsResearchPaused::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearchPaused, ReturnValue) == 0x000004, "Member 'TedDoctrinePanel_HUD_IsResearchPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsResearchRelevant
// 0x0001 (0x0001 - 0x0000)
struct TedDoctrinePanel_HUD_IsResearchRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrinePanel_HUD_IsResearchRelevant) == 0x000001, "Wrong alignment on TedDoctrinePanel_HUD_IsResearchRelevant");
static_assert(sizeof(TedDoctrinePanel_HUD_IsResearchRelevant) == 0x000001, "Wrong size on TedDoctrinePanel_HUD_IsResearchRelevant");
static_assert(offsetof(TedDoctrinePanel_HUD_IsResearchRelevant, ReturnValue) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsResearchRelevant::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrinePanel_HUD.IsSlotUnlocked
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrinePanel_HUD_IsSlotUnlocked final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDoctrinePanel_HUD_IsSlotUnlocked) == 0x000004, "Wrong alignment on TedDoctrinePanel_HUD_IsSlotUnlocked");
static_assert(sizeof(TedDoctrinePanel_HUD_IsSlotUnlocked) == 0x000008, "Wrong size on TedDoctrinePanel_HUD_IsSlotUnlocked");
static_assert(offsetof(TedDoctrinePanel_HUD_IsSlotUnlocked, InSlotIndex) == 0x000000, "Member 'TedDoctrinePanel_HUD_IsSlotUnlocked::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedDoctrinePanel_HUD_IsSlotUnlocked, ReturnValue) == 0x000004, "Member 'TedDoctrinePanel_HUD_IsSlotUnlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetContentDefinition
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_GetContentDefinition final
{
public:
	const class UTedDefinitionAsset*              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetContentDefinition) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetContentDefinition");
static_assert(sizeof(TedDefinitionSlot_GetContentDefinition) == 0x000008, "Wrong size on TedDefinitionSlot_GetContentDefinition");
static_assert(offsetof(TedDefinitionSlot_GetContentDefinition, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetContentDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetContentDescription
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionSlot_GetContentDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetContentDescription) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetContentDescription");
static_assert(sizeof(TedDefinitionSlot_GetContentDescription) == 0x000010, "Wrong size on TedDefinitionSlot_GetContentDescription");
static_assert(offsetof(TedDefinitionSlot_GetContentDescription, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetContentDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetContentDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionSlot_GetContentDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetContentDisplayName) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetContentDisplayName");
static_assert(sizeof(TedDefinitionSlot_GetContentDisplayName) == 0x000010, "Wrong size on TedDefinitionSlot_GetContentDisplayName");
static_assert(offsetof(TedDefinitionSlot_GetContentDisplayName, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetContentDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetContentIcon
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_GetContentIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetContentIcon) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetContentIcon");
static_assert(sizeof(TedDefinitionSlot_GetContentIcon) == 0x000008, "Wrong size on TedDefinitionSlot_GetContentIcon");
static_assert(offsetof(TedDefinitionSlot_GetContentIcon, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetContentIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetDefinitionContext
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_GetDefinitionContext final
{
public:
	class ATedPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetDefinitionContext) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetDefinitionContext");
static_assert(sizeof(TedDefinitionSlot_GetDefinitionContext) == 0x000008, "Wrong size on TedDefinitionSlot_GetDefinitionContext");
static_assert(offsetof(TedDefinitionSlot_GetDefinitionContext, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetDefinitionContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_GetParentPanel final
{
public:
	class UTedDefinitionPanel*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_GetParentPanel) == 0x000008, "Wrong alignment on TedDefinitionSlot_GetParentPanel");
static_assert(sizeof(TedDefinitionSlot_GetParentPanel) == 0x000008, "Wrong size on TedDefinitionSlot_GetParentPanel");
static_assert(offsetof(TedDefinitionSlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.AreSpectatorsEnabledOnUI
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI");
static_assert(sizeof(TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI) == 0x000001, "Wrong size on TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI");
static_assert(offsetof(TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_AreSpectatorsEnabledOnUI::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetCurrentPlayers
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_GetCurrentPlayers final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetCurrentPlayers) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_GetCurrentPlayers");
static_assert(sizeof(TedOnlineSessionsSlot_GetCurrentPlayers) == 0x000001, "Wrong size on TedOnlineSessionsSlot_GetCurrentPlayers");
static_assert(offsetof(TedOnlineSessionsSlot_GetCurrentPlayers, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetCurrentPlayers::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetCurrentSpectators
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_GetCurrentSpectators final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetCurrentSpectators) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_GetCurrentSpectators");
static_assert(sizeof(TedOnlineSessionsSlot_GetCurrentSpectators) == 0x000001, "Wrong size on TedOnlineSessionsSlot_GetCurrentSpectators");
static_assert(offsetof(TedOnlineSessionsSlot_GetCurrentSpectators, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetCurrentSpectators::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetHostName
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsSlot_GetHostName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetHostName) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetHostName");
static_assert(sizeof(TedOnlineSessionsSlot_GetHostName) == 0x000010, "Wrong size on TedOnlineSessionsSlot_GetHostName");
static_assert(offsetof(TedOnlineSessionsSlot_GetHostName, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetHostName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetLobbyName
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsSlot_GetLobbyName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetLobbyName) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetLobbyName");
static_assert(sizeof(TedOnlineSessionsSlot_GetLobbyName) == 0x000010, "Wrong size on TedOnlineSessionsSlot_GetLobbyName");
static_assert(offsetof(TedOnlineSessionsSlot_GetLobbyName, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetLobbyName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetMapInfo
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsSlot_GetMapInfo final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetMapInfo) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetMapInfo");
static_assert(sizeof(TedOnlineSessionsSlot_GetMapInfo) == 0x000008, "Wrong size on TedOnlineSessionsSlot_GetMapInfo");
static_assert(offsetof(TedOnlineSessionsSlot_GetMapInfo, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetMapInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetMapMinimap
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsSlot_GetMapMinimap final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetMapMinimap) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetMapMinimap");
static_assert(sizeof(TedOnlineSessionsSlot_GetMapMinimap) == 0x000008, "Wrong size on TedOnlineSessionsSlot_GetMapMinimap");
static_assert(offsetof(TedOnlineSessionsSlot_GetMapMinimap, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetMapMinimap::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetMapName
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsSlot_GetMapName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetMapName) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetMapName");
static_assert(sizeof(TedOnlineSessionsSlot_GetMapName) == 0x000010, "Wrong size on TedOnlineSessionsSlot_GetMapName");
static_assert(offsetof(TedOnlineSessionsSlot_GetMapName, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetMapName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetMaxPlayers
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_GetMaxPlayers final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetMaxPlayers) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_GetMaxPlayers");
static_assert(sizeof(TedOnlineSessionsSlot_GetMaxPlayers) == 0x000001, "Wrong size on TedOnlineSessionsSlot_GetMaxPlayers");
static_assert(offsetof(TedOnlineSessionsSlot_GetMaxPlayers, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetMaxSpectators
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_GetMaxSpectators final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetMaxSpectators) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_GetMaxSpectators");
static_assert(sizeof(TedOnlineSessionsSlot_GetMaxSpectators) == 0x000001, "Wrong size on TedOnlineSessionsSlot_GetMaxSpectators");
static_assert(offsetof(TedOnlineSessionsSlot_GetMaxSpectators, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetMaxSpectators::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsSlot_GetParentPanel final
{
public:
	class UTedOnlineSessionsPanel*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetParentPanel) == 0x000008, "Wrong alignment on TedOnlineSessionsSlot_GetParentPanel");
static_assert(sizeof(TedOnlineSessionsSlot_GetParentPanel) == 0x000008, "Wrong size on TedOnlineSessionsSlot_GetParentPanel");
static_assert(offsetof(TedOnlineSessionsSlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.GetPing
// 0x0004 (0x0004 - 0x0000)
struct TedOnlineSessionsSlot_GetPing final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_GetPing) == 0x000004, "Wrong alignment on TedOnlineSessionsSlot_GetPing");
static_assert(sizeof(TedOnlineSessionsSlot_GetPing) == 0x000004, "Wrong size on TedOnlineSessionsSlot_GetPing");
static_assert(offsetof(TedOnlineSessionsSlot_GetPing, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_GetPing::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsSlot.IsPasswordProtected
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsSlot_IsPasswordProtected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsSlot_IsPasswordProtected) == 0x000001, "Wrong alignment on TedOnlineSessionsSlot_IsPasswordProtected");
static_assert(sizeof(TedOnlineSessionsSlot_IsPasswordProtected) == 0x000001, "Wrong size on TedOnlineSessionsSlot_IsPasswordProtected");
static_assert(offsetof(TedOnlineSessionsSlot_IsPasswordProtected, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsSlot_IsPasswordProtected::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributePanel.SetContent
// 0x0018 (0x0018 - 0x0000)
struct TedAttributePanel_SetContent final
{
public:
	TArray<struct FTedAttributPanelContent>       InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class ATedPawn*                               InContextPawn;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributePanel_SetContent) == 0x000008, "Wrong alignment on TedAttributePanel_SetContent");
static_assert(sizeof(TedAttributePanel_SetContent) == 0x000018, "Wrong size on TedAttributePanel_SetContent");
static_assert(offsetof(TedAttributePanel_SetContent, InContent) == 0x000000, "Member 'TedAttributePanel_SetContent::InContent' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_SetContent, InContextPawn) == 0x000010, "Member 'TedAttributePanel_SetContent::InContextPawn' has a wrong offset!");

// Function Tempest.TedAttributePanel.SetContextPawn
// 0x0010 (0x0010 - 0x0000)
struct TedAttributePanel_SetContextPawn final
{
public:
	class ATedPawn*                               InContextPawn;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshUI;                                      // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAttributePanel_SetContextPawn) == 0x000008, "Wrong alignment on TedAttributePanel_SetContextPawn");
static_assert(sizeof(TedAttributePanel_SetContextPawn) == 0x000010, "Wrong size on TedAttributePanel_SetContextPawn");
static_assert(offsetof(TedAttributePanel_SetContextPawn, InContextPawn) == 0x000000, "Member 'TedAttributePanel_SetContextPawn::InContextPawn' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_SetContextPawn, bInRefreshUI) == 0x000008, "Member 'TedAttributePanel_SetContextPawn::bInRefreshUI' has a wrong offset!");

// Function Tempest.TedAttributePanel.GetAttributeColor
// 0x0018 (0x0018 - 0x0000)
struct TedAttributePanel_GetAttributeColor final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OutColor;                                          // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedAttributePanel_GetAttributeColor) == 0x000004, "Wrong alignment on TedAttributePanel_GetAttributeColor");
static_assert(sizeof(TedAttributePanel_GetAttributeColor) == 0x000018, "Wrong size on TedAttributePanel_GetAttributeColor");
static_assert(offsetof(TedAttributePanel_GetAttributeColor, InSlotIndex) == 0x000000, "Member 'TedAttributePanel_GetAttributeColor::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_GetAttributeColor, OutColor) == 0x000004, "Member 'TedAttributePanel_GetAttributeColor::OutColor' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_GetAttributeColor, ReturnValue) == 0x000014, "Member 'TedAttributePanel_GetAttributeColor::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributePanel.GetAttributeDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedAttributePanel_GetAttributeDisplayName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributePanel_GetAttributeDisplayName) == 0x000008, "Wrong alignment on TedAttributePanel_GetAttributeDisplayName");
static_assert(sizeof(TedAttributePanel_GetAttributeDisplayName) == 0x000018, "Wrong size on TedAttributePanel_GetAttributeDisplayName");
static_assert(offsetof(TedAttributePanel_GetAttributeDisplayName, InSlotIndex) == 0x000000, "Member 'TedAttributePanel_GetAttributeDisplayName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_GetAttributeDisplayName, ReturnValue) == 0x000008, "Member 'TedAttributePanel_GetAttributeDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributePanel.GetAttributeValue
// 0x000C (0x000C - 0x0000)
struct TedAttributePanel_GetAttributeValue final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBaseOnly;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributePanel_GetAttributeValue) == 0x000004, "Wrong alignment on TedAttributePanel_GetAttributeValue");
static_assert(sizeof(TedAttributePanel_GetAttributeValue) == 0x00000C, "Wrong size on TedAttributePanel_GetAttributeValue");
static_assert(offsetof(TedAttributePanel_GetAttributeValue, InSlotIndex) == 0x000000, "Member 'TedAttributePanel_GetAttributeValue::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_GetAttributeValue, bInBaseOnly) == 0x000004, "Member 'TedAttributePanel_GetAttributeValue::bInBaseOnly' has a wrong offset!");
static_assert(offsetof(TedAttributePanel_GetAttributeValue, ReturnValue) == 0x000008, "Member 'TedAttributePanel_GetAttributeValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributePanel.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedAttributePanel_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributePanel_GetContextPawn) == 0x000008, "Wrong alignment on TedAttributePanel_GetContextPawn");
static_assert(sizeof(TedAttributePanel_GetContextPawn) == 0x000008, "Wrong size on TedAttributePanel_GetContextPawn");
static_assert(offsetof(TedAttributePanel_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedAttributePanel_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_AttackSpeedMod
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_AttackSpeedMod final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_AttackSpeedMod) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_AttackSpeedMod");
static_assert(sizeof(TedAttributeSet_OnRep_AttackSpeedMod) == 0x000010, "Wrong size on TedAttributeSet_OnRep_AttackSpeedMod");
static_assert(offsetof(TedAttributeSet_OnRep_AttackSpeedMod, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_AttackSpeedMod::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_AwakeningTechLevel
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_AwakeningTechLevel final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_AwakeningTechLevel) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_AwakeningTechLevel");
static_assert(sizeof(TedAttributeSet_OnRep_AwakeningTechLevel) == 0x000010, "Wrong size on TedAttributeSet_OnRep_AwakeningTechLevel");
static_assert(offsetof(TedAttributeSet_OnRep_AwakeningTechLevel, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_AwakeningTechLevel::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_EnlightenedSacrificed
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_EnlightenedSacrificed final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_EnlightenedSacrificed) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_EnlightenedSacrificed");
static_assert(sizeof(TedAttributeSet_OnRep_EnlightenedSacrificed) == 0x000010, "Wrong size on TedAttributeSet_OnRep_EnlightenedSacrificed");
static_assert(offsetof(TedAttributeSet_OnRep_EnlightenedSacrificed, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_EnlightenedSacrificed::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_FoWRadiusAttributesMultiplier
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier");
static_assert(sizeof(TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier) == 0x000010, "Wrong size on TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier");
static_assert(offsetof(TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_FoWRadiusAttributesMultiplier::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_Health
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_Health final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_Health) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_Health");
static_assert(sizeof(TedAttributeSet_OnRep_Health) == 0x000010, "Wrong size on TedAttributeSet_OnRep_Health");
static_assert(offsetof(TedAttributeSet_OnRep_Health, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_Health::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_HealthMax
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_HealthMax final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_HealthMax) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_HealthMax");
static_assert(sizeof(TedAttributeSet_OnRep_HealthMax) == 0x000010, "Wrong size on TedAttributeSet_OnRep_HealthMax");
static_assert(offsetof(TedAttributeSet_OnRep_HealthMax, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_HealthMax::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_MovementSpeedMod
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_MovementSpeedMod final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_MovementSpeedMod) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_MovementSpeedMod");
static_assert(sizeof(TedAttributeSet_OnRep_MovementSpeedMod) == 0x000010, "Wrong size on TedAttributeSet_OnRep_MovementSpeedMod");
static_assert(offsetof(TedAttributeSet_OnRep_MovementSpeedMod, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_MovementSpeedMod::OldValue' has a wrong offset!");

// Function Tempest.TedAttributeSet.OnRep_ProductionTimeMultiplier
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSet_OnRep_ProductionTimeMultiplier final
{
public:
	struct FTedGameplayAttributeData              OldValue;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSet_OnRep_ProductionTimeMultiplier) == 0x000008, "Wrong alignment on TedAttributeSet_OnRep_ProductionTimeMultiplier");
static_assert(sizeof(TedAttributeSet_OnRep_ProductionTimeMultiplier) == 0x000010, "Wrong size on TedAttributeSet_OnRep_ProductionTimeMultiplier");
static_assert(offsetof(TedAttributeSet_OnRep_ProductionTimeMultiplier, OldValue) == 0x000000, "Member 'TedAttributeSet_OnRep_ProductionTimeMultiplier::OldValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilityPanel.K2_SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedPassiveAbilityPanel_K2_SetContent final
{
public:
	TArray<class UTedPassiveAbilityDefinitionAsset*> InContent;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilityPanel_K2_SetContent) == 0x000008, "Wrong alignment on TedPassiveAbilityPanel_K2_SetContent");
static_assert(sizeof(TedPassiveAbilityPanel_K2_SetContent) == 0x000010, "Wrong size on TedPassiveAbilityPanel_K2_SetContent");
static_assert(offsetof(TedPassiveAbilityPanel_K2_SetContent, InContent) == 0x000000, "Member 'TedPassiveAbilityPanel_K2_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedPassiveAbilityPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedPassiveAbilityPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedPassiveAbilityDefinitionAsset* ReturnValue;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilityPanel_GetContent) == 0x000008, "Wrong alignment on TedPassiveAbilityPanel_GetContent");
static_assert(sizeof(TedPassiveAbilityPanel_GetContent) == 0x000010, "Wrong size on TedPassiveAbilityPanel_GetContent");
static_assert(offsetof(TedPassiveAbilityPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedPassiveAbilityPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedPassiveAbilityPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilityPanel.GetContentDescription
// 0x0020 (0x0020 - 0x0000)
struct TedPassiveAbilityPanel_GetContentDescription final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutText;                                           // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPassiveAbilityPanel_GetContentDescription) == 0x000008, "Wrong alignment on TedPassiveAbilityPanel_GetContentDescription");
static_assert(sizeof(TedPassiveAbilityPanel_GetContentDescription) == 0x000020, "Wrong size on TedPassiveAbilityPanel_GetContentDescription");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDescription, InSlotIndex) == 0x000000, "Member 'TedPassiveAbilityPanel_GetContentDescription::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDescription, OutText) == 0x000008, "Member 'TedPassiveAbilityPanel_GetContentDescription::OutText' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDescription, ReturnValue) == 0x000018, "Member 'TedPassiveAbilityPanel_GetContentDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilityPanel.GetContentDisplayName
// 0x0020 (0x0020 - 0x0000)
struct TedPassiveAbilityPanel_GetContentDisplayName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutText;                                           // 0x0008(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPassiveAbilityPanel_GetContentDisplayName) == 0x000008, "Wrong alignment on TedPassiveAbilityPanel_GetContentDisplayName");
static_assert(sizeof(TedPassiveAbilityPanel_GetContentDisplayName) == 0x000020, "Wrong size on TedPassiveAbilityPanel_GetContentDisplayName");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDisplayName, InSlotIndex) == 0x000000, "Member 'TedPassiveAbilityPanel_GetContentDisplayName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDisplayName, OutText) == 0x000008, "Member 'TedPassiveAbilityPanel_GetContentDisplayName::OutText' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentDisplayName, ReturnValue) == 0x000018, "Member 'TedPassiveAbilityPanel_GetContentDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilityPanel.GetContentIcon
// 0x0010 (0x0010 - 0x0000)
struct TedPassiveAbilityPanel_GetContentIcon final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilityPanel_GetContentIcon) == 0x000008, "Wrong alignment on TedPassiveAbilityPanel_GetContentIcon");
static_assert(sizeof(TedPassiveAbilityPanel_GetContentIcon) == 0x000010, "Wrong size on TedPassiveAbilityPanel_GetContentIcon");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentIcon, InSlotIndex) == 0x000000, "Member 'TedPassiveAbilityPanel_GetContentIcon::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilityPanel_GetContentIcon, ReturnValue) == 0x000008, "Member 'TedPassiveAbilityPanel_GetContentIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributeSlot.GetAttributeValue
// 0x0004 (0x0004 - 0x0000)
struct TedAttributeSlot_GetAttributeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSlot_GetAttributeValue) == 0x000004, "Wrong alignment on TedAttributeSlot_GetAttributeValue");
static_assert(sizeof(TedAttributeSlot_GetAttributeValue) == 0x000004, "Wrong size on TedAttributeSlot_GetAttributeValue");
static_assert(offsetof(TedAttributeSlot_GetAttributeValue, ReturnValue) == 0x000000, "Member 'TedAttributeSlot_GetAttributeValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributeSlot.GetAttributeDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedAttributeSlot_GetAttributeDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSlot_GetAttributeDisplayName) == 0x000008, "Wrong alignment on TedAttributeSlot_GetAttributeDisplayName");
static_assert(sizeof(TedAttributeSlot_GetAttributeDisplayName) == 0x000010, "Wrong size on TedAttributeSlot_GetAttributeDisplayName");
static_assert(offsetof(TedAttributeSlot_GetAttributeDisplayName, ReturnValue) == 0x000000, "Member 'TedAttributeSlot_GetAttributeDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributeSlot.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedAttributeSlot_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSlot_GetContextPawn) == 0x000008, "Wrong alignment on TedAttributeSlot_GetContextPawn");
static_assert(sizeof(TedAttributeSlot_GetContextPawn) == 0x000008, "Wrong size on TedAttributeSlot_GetContextPawn");
static_assert(offsetof(TedAttributeSlot_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedAttributeSlot_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedAttributeSlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedAttributeSlot_GetParentPanel final
{
public:
	class UTedAttributePanel*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedAttributeSlot_GetParentPanel) == 0x000008, "Wrong alignment on TedAttributeSlot_GetParentPanel");
static_assert(sizeof(TedAttributeSlot_GetParentPanel) == 0x000008, "Wrong size on TedAttributeSlot_GetParentPanel");
static_assert(offsetof(TedAttributeSlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedAttributeSlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardAttackGraceRange
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardAttackGraceRange final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardAttackGraceRange) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardAttackGraceRange");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardAttackGraceRange) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardAttackGraceRange");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardAttackGraceRange, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardAttackGraceRange::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardAttackGraceRange, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardAttackGraceRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardAttackRange
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardAttackRange final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardAttackRange) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardAttackRange");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardAttackRange) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardAttackRange");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardAttackRange, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardAttackRange::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardAttackRange, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardAttackRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardChaseRange
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardChaseRange final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardChaseRange) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardChaseRange");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardChaseRange) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardChaseRange");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardChaseRange, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardChaseRange::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardChaseRange, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardChaseRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardCommandAbilityClass
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardCommandAbilityClass final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayAbility>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardCommandAbilityClass) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardCommandAbilityClass");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardCommandAbilityClass) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardCommandAbilityClass");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardCommandAbilityClass, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardCommandAbilityClass::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardCommandAbilityClass, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardCommandAbilityClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardCommandClass
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardCommandClass final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardCommandClass) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardCommandClass");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardCommandClass) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardCommandClass");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardCommandClass, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardCommandClass::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardCommandClass, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardCommandClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardLeashLocation
// 0x0020 (0x0020 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardLeashLocation final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardLeashLocation) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardLeashLocation");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardLeashLocation) == 0x000020, "Wrong size on TedBlackboardHelpers_GetBlackboardLeashLocation");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardLeashLocation, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardLeashLocation::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardLeashLocation, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardLeashLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardPatrolLocation
// 0x0020 (0x0020 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardPatrolLocation final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardPatrolLocation) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardPatrolLocation");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardPatrolLocation) == 0x000020, "Wrong size on TedBlackboardHelpers_GetBlackboardPatrolLocation");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardPatrolLocation, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardPatrolLocation::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardPatrolLocation, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardPatrolLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardTargetActor
// 0x0010 (0x0010 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardTargetActor final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardTargetActor) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardTargetActor");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardTargetActor) == 0x000010, "Wrong size on TedBlackboardHelpers_GetBlackboardTargetActor");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardTargetActor, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardTargetActor::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardTargetActor, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardTargetActor::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackboardTargetLocation
// 0x0020 (0x0020 - 0x0000)
struct TedBlackboardHelpers_GetBlackboardTargetLocation final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackboardTargetLocation) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackboardTargetLocation");
static_assert(sizeof(TedBlackboardHelpers_GetBlackboardTargetLocation) == 0x000020, "Wrong size on TedBlackboardHelpers_GetBlackboardTargetLocation");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardTargetLocation, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackboardTargetLocation::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackboardTargetLocation, ReturnValue) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackboardTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.GetBlackBoardValueAsGameplayTag
// 0x0038 (0x0038 - 0x0000)
struct TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutTag;                                            // 0x0030(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag) == 0x000008, "Wrong alignment on TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag");
static_assert(sizeof(TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag) == 0x000038, "Wrong size on TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag");
static_assert(offsetof(TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag, Key) == 0x000008, "Member 'TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag::Key' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag, OutTag) == 0x000030, "Member 'TedBlackboardHelpers_GetBlackBoardValueAsGameplayTag::OutTag' has a wrong offset!");

// Function Tempest.TedBlackboardHelpers.SetBlackBoardValueAsGameplayTag
// 0x0038 (0x0038 - 0x0000)
struct TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag final
{
public:
	class UBTNode*                                NodeOwner;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 Key;                                               // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag) == 0x000008, "Wrong alignment on TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag");
static_assert(sizeof(TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag) == 0x000038, "Wrong size on TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag");
static_assert(offsetof(TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag, NodeOwner) == 0x000000, "Member 'TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag::NodeOwner' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag, Key) == 0x000008, "Member 'TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag::Key' has a wrong offset!");
static_assert(offsetof(TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag, Tag) == 0x000030, "Member 'TedBlackboardHelpers_SetBlackBoardValueAsGameplayTag::Tag' has a wrong offset!");

// Function Tempest.TedBriefing.GetDialogueLines
// 0x0010 (0x0010 - 0x0000)
struct TedBriefing_GetDialogueLines final
{
public:
	TArray<struct FTedDialogueLine>               ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBriefing_GetDialogueLines) == 0x000008, "Wrong alignment on TedBriefing_GetDialogueLines");
static_assert(sizeof(TedBriefing_GetDialogueLines) == 0x000010, "Wrong size on TedBriefing_GetDialogueLines");
static_assert(offsetof(TedBriefing_GetDialogueLines, ReturnValue) == 0x000000, "Member 'TedBriefing_GetDialogueLines::ReturnValue' has a wrong offset!");

// Function Tempest.TedBriefing.HasDialogueLines
// 0x0001 (0x0001 - 0x0000)
struct TedBriefing_HasDialogueLines final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBriefing_HasDialogueLines) == 0x000001, "Wrong alignment on TedBriefing_HasDialogueLines");
static_assert(sizeof(TedBriefing_HasDialogueLines) == 0x000001, "Wrong size on TedBriefing_HasDialogueLines");
static_assert(offsetof(TedBriefing_HasDialogueLines, ReturnValue) == 0x000000, "Member 'TedBriefing_HasDialogueLines::ReturnValue' has a wrong offset!");

// Function Tempest.TedBriefing.IsFinale
// 0x0001 (0x0001 - 0x0000)
struct TedBriefing_IsFinale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBriefing_IsFinale) == 0x000001, "Wrong alignment on TedBriefing_IsFinale");
static_assert(sizeof(TedBriefing_IsFinale) == 0x000001, "Wrong size on TedBriefing_IsFinale");
static_assert(offsetof(TedBriefing_IsFinale, ReturnValue) == 0x000000, "Member 'TedBriefing_IsFinale::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridController.Factories_OnActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedBuildingGridController_Factories_OnActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridController_Factories_OnActivateSlotState) == 0x000008, "Wrong alignment on TedBuildingGridController_Factories_OnActivateSlotState");
static_assert(sizeof(TedBuildingGridController_Factories_OnActivateSlotState) == 0x000018, "Wrong size on TedBuildingGridController_Factories_OnActivateSlotState");
static_assert(offsetof(TedBuildingGridController_Factories_OnActivateSlotState, InContentPanel) == 0x000000, "Member 'TedBuildingGridController_Factories_OnActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_Factories_OnActivateSlotState, InContentSlot) == 0x000008, "Member 'TedBuildingGridController_Factories_OnActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_Factories_OnActivateSlotState, InState) == 0x000010, "Member 'TedBuildingGridController_Factories_OnActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_Factories_OnActivateSlotState, bInActivated) == 0x000011, "Member 'TedBuildingGridController_Factories_OnActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedBuildingGridController.FactoryTabs_OnActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedBuildingGridController_FactoryTabs_OnActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridController_FactoryTabs_OnActivateSlotState) == 0x000008, "Wrong alignment on TedBuildingGridController_FactoryTabs_OnActivateSlotState");
static_assert(sizeof(TedBuildingGridController_FactoryTabs_OnActivateSlotState) == 0x000018, "Wrong size on TedBuildingGridController_FactoryTabs_OnActivateSlotState");
static_assert(offsetof(TedBuildingGridController_FactoryTabs_OnActivateSlotState, InContentPanel) == 0x000000, "Member 'TedBuildingGridController_FactoryTabs_OnActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_FactoryTabs_OnActivateSlotState, InContentSlot) == 0x000008, "Member 'TedBuildingGridController_FactoryTabs_OnActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_FactoryTabs_OnActivateSlotState, InState) == 0x000010, "Member 'TedBuildingGridController_FactoryTabs_OnActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_FactoryTabs_OnActivateSlotState, bInActivated) == 0x000011, "Member 'TedBuildingGridController_FactoryTabs_OnActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedBuildingGridController.K2_OnVisibilityChange
// 0x0002 (0x0002 - 0x0000)
struct TedBuildingGridController_K2_OnVisibilityChange final
{
public:
	ESlateVisibility                              InFrom;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlateVisibility                              InTo;                                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridController_K2_OnVisibilityChange) == 0x000001, "Wrong alignment on TedBuildingGridController_K2_OnVisibilityChange");
static_assert(sizeof(TedBuildingGridController_K2_OnVisibilityChange) == 0x000002, "Wrong size on TedBuildingGridController_K2_OnVisibilityChange");
static_assert(offsetof(TedBuildingGridController_K2_OnVisibilityChange, InFrom) == 0x000000, "Member 'TedBuildingGridController_K2_OnVisibilityChange::InFrom' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_K2_OnVisibilityChange, InTo) == 0x000001, "Member 'TedBuildingGridController_K2_OnVisibilityChange::InTo' has a wrong offset!");

// Function Tempest.TedBuildingGridController.ModeTabs_OnActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedBuildingGridController_ModeTabs_OnActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridController_ModeTabs_OnActivateSlotState) == 0x000008, "Wrong alignment on TedBuildingGridController_ModeTabs_OnActivateSlotState");
static_assert(sizeof(TedBuildingGridController_ModeTabs_OnActivateSlotState) == 0x000018, "Wrong size on TedBuildingGridController_ModeTabs_OnActivateSlotState");
static_assert(offsetof(TedBuildingGridController_ModeTabs_OnActivateSlotState, InContentPanel) == 0x000000, "Member 'TedBuildingGridController_ModeTabs_OnActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_ModeTabs_OnActivateSlotState, InContentSlot) == 0x000008, "Member 'TedBuildingGridController_ModeTabs_OnActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_ModeTabs_OnActivateSlotState, InState) == 0x000010, "Member 'TedBuildingGridController_ModeTabs_OnActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedBuildingGridController_ModeTabs_OnActivateSlotState, bInActivated) == 0x000011, "Member 'TedBuildingGridController_ModeTabs_OnActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedBuildingGridController.IsWithinBuildTab
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridController_IsWithinBuildTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridController_IsWithinBuildTab) == 0x000001, "Wrong alignment on TedBuildingGridController_IsWithinBuildTab");
static_assert(sizeof(TedBuildingGridController_IsWithinBuildTab) == 0x000001, "Wrong size on TedBuildingGridController_IsWithinBuildTab");
static_assert(offsetof(TedBuildingGridController_IsWithinBuildTab, ReturnValue) == 0x000000, "Member 'TedBuildingGridController_IsWithinBuildTab::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridController.IsWithinDoctrineTab
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridController_IsWithinDoctrineTab final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridController_IsWithinDoctrineTab) == 0x000001, "Wrong alignment on TedBuildingGridController_IsWithinDoctrineTab");
static_assert(sizeof(TedBuildingGridController_IsWithinDoctrineTab) == 0x000001, "Wrong size on TedBuildingGridController_IsWithinDoctrineTab");
static_assert(offsetof(TedBuildingGridController_IsWithinDoctrineTab, ReturnValue) == 0x000000, "Member 'TedBuildingGridController_IsWithinDoctrineTab::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.GetMissingPrerequisitesSlotState
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridPanel_GetMissingPrerequisitesSlotState final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridPanel_GetMissingPrerequisitesSlotState) == 0x000001, "Wrong alignment on TedBuildingGridPanel_GetMissingPrerequisitesSlotState");
static_assert(sizeof(TedBuildingGridPanel_GetMissingPrerequisitesSlotState) == 0x000001, "Wrong size on TedBuildingGridPanel_GetMissingPrerequisitesSlotState");
static_assert(offsetof(TedBuildingGridPanel_GetMissingPrerequisitesSlotState, ReturnValue) == 0x000000, "Member 'TedBuildingGridPanel_GetMissingPrerequisitesSlotState::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.K2_SelectFactoryTab
// 0x000C (0x000C - 0x0000)
struct TedBuildingGridPanel_K2_SelectFactoryTab final
{
public:
	struct FGameplayTag                           InTab;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_K2_SelectFactoryTab) == 0x000004, "Wrong alignment on TedBuildingGridPanel_K2_SelectFactoryTab");
static_assert(sizeof(TedBuildingGridPanel_K2_SelectFactoryTab) == 0x00000C, "Wrong size on TedBuildingGridPanel_K2_SelectFactoryTab");
static_assert(offsetof(TedBuildingGridPanel_K2_SelectFactoryTab, InTab) == 0x000000, "Member 'TedBuildingGridPanel_K2_SelectFactoryTab::InTab' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_K2_SelectFactoryTab, bInRefreshContent) == 0x000008, "Member 'TedBuildingGridPanel_K2_SelectFactoryTab::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.SelectFactory
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridPanel_SelectFactory final
{
public:
	class ATedStructureBase*                      InFactory;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_SelectFactory) == 0x000008, "Wrong alignment on TedBuildingGridPanel_SelectFactory");
static_assert(sizeof(TedBuildingGridPanel_SelectFactory) == 0x000010, "Wrong size on TedBuildingGridPanel_SelectFactory");
static_assert(offsetof(TedBuildingGridPanel_SelectFactory, InFactory) == 0x000000, "Member 'TedBuildingGridPanel_SelectFactory::InFactory' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_SelectFactory, bInRefreshContent) == 0x000008, "Member 'TedBuildingGridPanel_SelectFactory::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.SetTargetPlayerData
// 0x0010 (0x0010 - 0x0000)
struct TedBuildingGridPanel_SetTargetPlayerData final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_SetTargetPlayerData) == 0x000008, "Wrong alignment on TedBuildingGridPanel_SetTargetPlayerData");
static_assert(sizeof(TedBuildingGridPanel_SetTargetPlayerData) == 0x000010, "Wrong size on TedBuildingGridPanel_SetTargetPlayerData");
static_assert(offsetof(TedBuildingGridPanel_SetTargetPlayerData, InPlayerData) == 0x000000, "Member 'TedBuildingGridPanel_SetTargetPlayerData::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_SetTargetPlayerData, bInRefreshContent) == 0x000008, "Member 'TedBuildingGridPanel_SetTargetPlayerData::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.GetSelectedFactory
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridPanel_GetSelectedFactory final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridPanel_GetSelectedFactory) == 0x000008, "Wrong alignment on TedBuildingGridPanel_GetSelectedFactory");
static_assert(sizeof(TedBuildingGridPanel_GetSelectedFactory) == 0x000008, "Wrong size on TedBuildingGridPanel_GetSelectedFactory");
static_assert(offsetof(TedBuildingGridPanel_GetSelectedFactory, ReturnValue) == 0x000000, "Member 'TedBuildingGridPanel_GetSelectedFactory::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.GetSelectedFactoryTab
// 0x000C (0x000C - 0x0000)
struct TedBuildingGridPanel_GetSelectedFactoryTab final
{
public:
	struct FGameplayTag                           OutTab;                                            // 0x0000(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_GetSelectedFactoryTab) == 0x000004, "Wrong alignment on TedBuildingGridPanel_GetSelectedFactoryTab");
static_assert(sizeof(TedBuildingGridPanel_GetSelectedFactoryTab) == 0x00000C, "Wrong size on TedBuildingGridPanel_GetSelectedFactoryTab");
static_assert(offsetof(TedBuildingGridPanel_GetSelectedFactoryTab, OutTab) == 0x000000, "Member 'TedBuildingGridPanel_GetSelectedFactoryTab::OutTab' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_GetSelectedFactoryTab, ReturnValue) == 0x000008, "Member 'TedBuildingGridPanel_GetSelectedFactoryTab::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.GetShortcut
// 0x0038 (0x0038 - 0x0000)
struct TedBuildingGridPanel_GetShortcut final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionKeyMapping                 OutShortcut;                                       // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_GetShortcut) == 0x000008, "Wrong alignment on TedBuildingGridPanel_GetShortcut");
static_assert(sizeof(TedBuildingGridPanel_GetShortcut) == 0x000038, "Wrong size on TedBuildingGridPanel_GetShortcut");
static_assert(offsetof(TedBuildingGridPanel_GetShortcut, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_GetShortcut::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_GetShortcut, OutShortcut) == 0x000008, "Member 'TedBuildingGridPanel_GetShortcut::OutShortcut' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_GetShortcut, ReturnValue) == 0x000030, "Member 'TedBuildingGridPanel_GetShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.GetTargetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridPanel_GetTargetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridPanel_GetTargetPlayerData) == 0x000008, "Wrong alignment on TedBuildingGridPanel_GetTargetPlayerData");
static_assert(sizeof(TedBuildingGridPanel_GetTargetPlayerData) == 0x000008, "Wrong size on TedBuildingGridPanel_GetTargetPlayerData");
static_assert(offsetof(TedBuildingGridPanel_GetTargetPlayerData, ReturnValue) == 0x000000, "Member 'TedBuildingGridPanel_GetTargetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.IsConstructionCompleted
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridPanel_IsConstructionCompleted final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_IsConstructionCompleted) == 0x000004, "Wrong alignment on TedBuildingGridPanel_IsConstructionCompleted");
static_assert(sizeof(TedBuildingGridPanel_IsConstructionCompleted) == 0x000008, "Wrong size on TedBuildingGridPanel_IsConstructionCompleted");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionCompleted, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_IsConstructionCompleted::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionCompleted, ReturnValue) == 0x000004, "Member 'TedBuildingGridPanel_IsConstructionCompleted::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.IsConstructionInProgress
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridPanel_IsConstructionInProgress final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_IsConstructionInProgress) == 0x000004, "Wrong alignment on TedBuildingGridPanel_IsConstructionInProgress");
static_assert(sizeof(TedBuildingGridPanel_IsConstructionInProgress) == 0x000008, "Wrong size on TedBuildingGridPanel_IsConstructionInProgress");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionInProgress, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_IsConstructionInProgress::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionInProgress, ReturnValue) == 0x000004, "Member 'TedBuildingGridPanel_IsConstructionInProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.IsConstructionPaused
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridPanel_IsConstructionPaused final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_IsConstructionPaused) == 0x000004, "Wrong alignment on TedBuildingGridPanel_IsConstructionPaused");
static_assert(sizeof(TedBuildingGridPanel_IsConstructionPaused) == 0x000008, "Wrong size on TedBuildingGridPanel_IsConstructionPaused");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionPaused, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_IsConstructionPaused::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_IsConstructionPaused, ReturnValue) == 0x000004, "Member 'TedBuildingGridPanel_IsConstructionPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.K2_GetContent_Structure
// 0x0018 (0x0018 - 0x0000)
struct TedBuildingGridPanel_K2_GetContent_Structure final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATedStructureBase>          OutContent;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_K2_GetContent_Structure) == 0x000008, "Wrong alignment on TedBuildingGridPanel_K2_GetContent_Structure");
static_assert(sizeof(TedBuildingGridPanel_K2_GetContent_Structure) == 0x000018, "Wrong size on TedBuildingGridPanel_K2_GetContent_Structure");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Structure, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_K2_GetContent_Structure::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Structure, OutContent) == 0x000008, "Member 'TedBuildingGridPanel_K2_GetContent_Structure::OutContent' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Structure, ReturnValue) == 0x000010, "Member 'TedBuildingGridPanel_K2_GetContent_Structure::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridPanel.K2_GetContent_Unit
// 0x0018 (0x0018 - 0x0000)
struct TedBuildingGridPanel_K2_GetContent_Unit final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATedUnitBase>               OutContent;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedBuildingGridPanel_K2_GetContent_Unit) == 0x000008, "Wrong alignment on TedBuildingGridPanel_K2_GetContent_Unit");
static_assert(sizeof(TedBuildingGridPanel_K2_GetContent_Unit) == 0x000018, "Wrong size on TedBuildingGridPanel_K2_GetContent_Unit");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Unit, InSlotIndex) == 0x000000, "Member 'TedBuildingGridPanel_K2_GetContent_Unit::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Unit, OutContent) == 0x000008, "Member 'TedBuildingGridPanel_K2_GetContent_Unit::OutContent' has a wrong offset!");
static_assert(offsetof(TedBuildingGridPanel_K2_GetContent_Unit, ReturnValue) == 0x000010, "Member 'TedBuildingGridPanel_K2_GetContent_Unit::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.RemoveMarker
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveConditionBase_RemoveMarker final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_RemoveMarker) == 0x000008, "Wrong alignment on TedObjectiveConditionBase_RemoveMarker");
static_assert(sizeof(TedObjectiveConditionBase_RemoveMarker) == 0x000008, "Wrong size on TedObjectiveConditionBase_RemoveMarker");
static_assert(offsetof(TedObjectiveConditionBase_RemoveMarker, InActor) == 0x000000, "Member 'TedObjectiveConditionBase_RemoveMarker::InActor' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.TryAddMarker
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveConditionBase_TryAddMarker final
{
public:
	const class AActor*                           InActor;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMarkerHandle                       ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveConditionBase_TryAddMarker) == 0x000008, "Wrong alignment on TedObjectiveConditionBase_TryAddMarker");
static_assert(sizeof(TedObjectiveConditionBase_TryAddMarker) == 0x000010, "Wrong size on TedObjectiveConditionBase_TryAddMarker");
static_assert(offsetof(TedObjectiveConditionBase_TryAddMarker, InActor) == 0x000000, "Member 'TedObjectiveConditionBase_TryAddMarker::InActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveConditionBase_TryAddMarker, ReturnValue) == 0x000008, "Member 'TedObjectiveConditionBase_TryAddMarker::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.CanBeDisplayedOnUI
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_CanBeDisplayedOnUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_CanBeDisplayedOnUI) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_CanBeDisplayedOnUI");
static_assert(sizeof(TedObjectiveConditionBase_CanBeDisplayedOnUI) == 0x000001, "Wrong size on TedObjectiveConditionBase_CanBeDisplayedOnUI");
static_assert(offsetof(TedObjectiveConditionBase_CanBeDisplayedOnUI, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_CanBeDisplayedOnUI::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.ExpectsRuntimeData
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_ExpectsRuntimeData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_ExpectsRuntimeData) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_ExpectsRuntimeData");
static_assert(sizeof(TedObjectiveConditionBase_ExpectsRuntimeData) == 0x000001, "Wrong size on TedObjectiveConditionBase_ExpectsRuntimeData");
static_assert(offsetof(TedObjectiveConditionBase_ExpectsRuntimeData, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_ExpectsRuntimeData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.GetCurrentDesiredResult
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_GetCurrentDesiredResult final
{
public:
	EObjectiveResultWithNone                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_GetCurrentDesiredResult) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_GetCurrentDesiredResult");
static_assert(sizeof(TedObjectiveConditionBase_GetCurrentDesiredResult) == 0x000001, "Wrong size on TedObjectiveConditionBase_GetCurrentDesiredResult");
static_assert(offsetof(TedObjectiveConditionBase_GetCurrentDesiredResult, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_GetCurrentDesiredResult::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.GetDesiredResult
// 0x0002 (0x0002 - 0x0000)
struct TedObjectiveConditionBase_GetDesiredResult final
{
public:
	EObjectiveConditionState                      InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveResultWithNone                      ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_GetDesiredResult) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_GetDesiredResult");
static_assert(sizeof(TedObjectiveConditionBase_GetDesiredResult) == 0x000002, "Wrong size on TedObjectiveConditionBase_GetDesiredResult");
static_assert(offsetof(TedObjectiveConditionBase_GetDesiredResult, InState) == 0x000000, "Member 'TedObjectiveConditionBase_GetDesiredResult::InState' has a wrong offset!");
static_assert(offsetof(TedObjectiveConditionBase_GetDesiredResult, ReturnValue) == 0x000001, "Member 'TedObjectiveConditionBase_GetDesiredResult::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.GetState
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_GetState final
{
public:
	EObjectiveConditionState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_GetState) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_GetState");
static_assert(sizeof(TedObjectiveConditionBase_GetState) == 0x000001, "Wrong size on TedObjectiveConditionBase_GetState");
static_assert(offsetof(TedObjectiveConditionBase_GetState, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_GetState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.HasAnyDesiredResult
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_HasAnyDesiredResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_HasAnyDesiredResult) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_HasAnyDesiredResult");
static_assert(sizeof(TedObjectiveConditionBase_HasAnyDesiredResult) == 0x000001, "Wrong size on TedObjectiveConditionBase_HasAnyDesiredResult");
static_assert(offsetof(TedObjectiveConditionBase_HasAnyDesiredResult, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_HasAnyDesiredResult::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.HasDesiredResult
// 0x0002 (0x0002 - 0x0000)
struct TedObjectiveConditionBase_HasDesiredResult final
{
public:
	EObjectiveResult                              InResult;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_HasDesiredResult) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_HasDesiredResult");
static_assert(sizeof(TedObjectiveConditionBase_HasDesiredResult) == 0x000002, "Wrong size on TedObjectiveConditionBase_HasDesiredResult");
static_assert(offsetof(TedObjectiveConditionBase_HasDesiredResult, InResult) == 0x000000, "Member 'TedObjectiveConditionBase_HasDesiredResult::InResult' has a wrong offset!");
static_assert(offsetof(TedObjectiveConditionBase_HasDesiredResult, ReturnValue) == 0x000001, "Member 'TedObjectiveConditionBase_HasDesiredResult::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.IsActive
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_IsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_IsActive) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_IsActive");
static_assert(sizeof(TedObjectiveConditionBase_IsActive) == 0x000001, "Wrong size on TedObjectiveConditionBase_IsActive");
static_assert(offsetof(TedObjectiveConditionBase_IsActive, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_IsActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveConditionBase.IsRestoringFromSave
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveConditionBase_IsRestoringFromSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveConditionBase_IsRestoringFromSave) == 0x000001, "Wrong alignment on TedObjectiveConditionBase_IsRestoringFromSave");
static_assert(sizeof(TedObjectiveConditionBase_IsRestoringFromSave) == 0x000001, "Wrong size on TedObjectiveConditionBase_IsRestoringFromSave");
static_assert(offsetof(TedObjectiveConditionBase_IsRestoringFromSave, ReturnValue) == 0x000000, "Member 'TedObjectiveConditionBase_IsRestoringFromSave::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_HaveResourceBase.OnPlayerResourcesChangeEvent_Handler
// 0x0048 (0x0048 - 0x0000)
struct TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InPrevious;                                        // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTedPlayerDataResources                InCurrent;                                         // 0x0028(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler");
static_assert(sizeof(TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler) == 0x000048, "Wrong size on TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler");
static_assert(offsetof(TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler, InPlayerData) == 0x000000, "Member 'TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler::InPlayerData' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler, InPrevious) == 0x000008, "Member 'TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler::InPrevious' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler, InCurrent) == 0x000028, "Member 'TedObjectiveCondition_HaveResourceBase_OnPlayerResourcesChangeEvent_Handler::InCurrent' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.OnRefresh_Common
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_OnRefresh_Common final
{
public:
	const class UTedEntityDefinitionAsset*        InDefinition;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_OnRefresh_Common) == 0x000008, "Wrong alignment on TedBuildingGridSlotBase_OnRefresh_Common");
static_assert(sizeof(TedBuildingGridSlotBase_OnRefresh_Common) == 0x000008, "Wrong size on TedBuildingGridSlotBase_OnRefresh_Common");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Common, InDefinition) == 0x000000, "Member 'TedBuildingGridSlotBase_OnRefresh_Common::InDefinition' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.OnRefresh_Progress
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_OnRefresh_Progress final
{
public:
	uint8                                         InQueuedCount;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPaused;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInCompleted;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRunning;                                        // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InProgress;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_OnRefresh_Progress) == 0x000004, "Wrong alignment on TedBuildingGridSlotBase_OnRefresh_Progress");
static_assert(sizeof(TedBuildingGridSlotBase_OnRefresh_Progress) == 0x000008, "Wrong size on TedBuildingGridSlotBase_OnRefresh_Progress");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Progress, InQueuedCount) == 0x000000, "Member 'TedBuildingGridSlotBase_OnRefresh_Progress::InQueuedCount' has a wrong offset!");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Progress, bInPaused) == 0x000001, "Member 'TedBuildingGridSlotBase_OnRefresh_Progress::bInPaused' has a wrong offset!");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Progress, bInCompleted) == 0x000002, "Member 'TedBuildingGridSlotBase_OnRefresh_Progress::bInCompleted' has a wrong offset!");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Progress, bInRunning) == 0x000003, "Member 'TedBuildingGridSlotBase_OnRefresh_Progress::bInRunning' has a wrong offset!");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Progress, InProgress) == 0x000004, "Member 'TedBuildingGridSlotBase_OnRefresh_Progress::InProgress' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.OnRefresh_Structure
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_OnRefresh_Structure final
{
public:
	const class UTedStructureDefinitionAsset*     InDefinition;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_OnRefresh_Structure) == 0x000008, "Wrong alignment on TedBuildingGridSlotBase_OnRefresh_Structure");
static_assert(sizeof(TedBuildingGridSlotBase_OnRefresh_Structure) == 0x000008, "Wrong size on TedBuildingGridSlotBase_OnRefresh_Structure");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Structure, InDefinition) == 0x000000, "Member 'TedBuildingGridSlotBase_OnRefresh_Structure::InDefinition' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.OnRefresh_Unit
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_OnRefresh_Unit final
{
public:
	const class UTedUnitDefinitionAsset*          InDefinition;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_OnRefresh_Unit) == 0x000008, "Wrong alignment on TedBuildingGridSlotBase_OnRefresh_Unit");
static_assert(sizeof(TedBuildingGridSlotBase_OnRefresh_Unit) == 0x000008, "Wrong size on TedBuildingGridSlotBase_OnRefresh_Unit");
static_assert(offsetof(TedBuildingGridSlotBase_OnRefresh_Unit, InDefinition) == 0x000000, "Member 'TedBuildingGridSlotBase_OnRefresh_Unit::InDefinition' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.GetBuildingGridPanel
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_GetBuildingGridPanel final
{
public:
	class UTedBuildingGridPanel*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_GetBuildingGridPanel) == 0x000008, "Wrong alignment on TedBuildingGridSlotBase_GetBuildingGridPanel");
static_assert(sizeof(TedBuildingGridSlotBase_GetBuildingGridPanel) == 0x000008, "Wrong size on TedBuildingGridSlotBase_GetBuildingGridPanel");
static_assert(offsetof(TedBuildingGridSlotBase_GetBuildingGridPanel, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotBase_GetBuildingGridPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.GetFactory
// 0x0008 (0x0008 - 0x0000)
struct TedBuildingGridSlotBase_GetFactory final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_GetFactory) == 0x000008, "Wrong alignment on TedBuildingGridSlotBase_GetFactory");
static_assert(sizeof(TedBuildingGridSlotBase_GetFactory) == 0x000008, "Wrong size on TedBuildingGridSlotBase_GetFactory");
static_assert(offsetof(TedBuildingGridSlotBase_GetFactory, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotBase_GetFactory::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.HasContent
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotBase_HasContent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_HasContent) == 0x000001, "Wrong alignment on TedBuildingGridSlotBase_HasContent");
static_assert(sizeof(TedBuildingGridSlotBase_HasContent) == 0x000001, "Wrong size on TedBuildingGridSlotBase_HasContent");
static_assert(offsetof(TedBuildingGridSlotBase_HasContent, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotBase_HasContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.IsStructure
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotBase_IsStructure final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_IsStructure) == 0x000001, "Wrong alignment on TedBuildingGridSlotBase_IsStructure");
static_assert(sizeof(TedBuildingGridSlotBase_IsStructure) == 0x000001, "Wrong size on TedBuildingGridSlotBase_IsStructure");
static_assert(offsetof(TedBuildingGridSlotBase_IsStructure, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotBase_IsStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedBuildingGridSlotBase.IsUnit
// 0x0001 (0x0001 - 0x0000)
struct TedBuildingGridSlotBase_IsUnit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedBuildingGridSlotBase_IsUnit) == 0x000001, "Wrong alignment on TedBuildingGridSlotBase_IsUnit");
static_assert(sizeof(TedBuildingGridSlotBase_IsUnit) == 0x000001, "Wrong size on TedBuildingGridSlotBase_IsUnit");
static_assert(offsetof(TedBuildingGridSlotBase_IsUnit, ReturnValue) == 0x000000, "Member 'TedBuildingGridSlotBase_IsUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_KillActors.PassRuntimeData
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveCondition_KillActors_PassRuntimeData final
{
public:
	TArray<class ATedPawn*>                       InActors;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         InExpectedAmount;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveCondition_KillActors_PassRuntimeData) == 0x000008, "Wrong alignment on TedObjectiveCondition_KillActors_PassRuntimeData");
static_assert(sizeof(TedObjectiveCondition_KillActors_PassRuntimeData) == 0x000018, "Wrong size on TedObjectiveCondition_KillActors_PassRuntimeData");
static_assert(offsetof(TedObjectiveCondition_KillActors_PassRuntimeData, InActors) == 0x000000, "Member 'TedObjectiveCondition_KillActors_PassRuntimeData::InActors' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_KillActors_PassRuntimeData, InExpectedAmount) == 0x000010, "Member 'TedObjectiveCondition_KillActors_PassRuntimeData::InExpectedAmount' has a wrong offset!");

// Function Tempest.TedChartWidgetBase.SetDisplayData
// 0x0040 (0x0040 - 0x0000)
struct TedChartWidgetBase_SetDisplayData final
{
public:
	struct FTedChartDisplayData                   InData;                                            // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRestartAnim;                                    // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChartWidgetBase_SetDisplayData) == 0x000008, "Wrong alignment on TedChartWidgetBase_SetDisplayData");
static_assert(sizeof(TedChartWidgetBase_SetDisplayData) == 0x000040, "Wrong size on TedChartWidgetBase_SetDisplayData");
static_assert(offsetof(TedChartWidgetBase_SetDisplayData, InData) == 0x000000, "Member 'TedChartWidgetBase_SetDisplayData::InData' has a wrong offset!");
static_assert(offsetof(TedChartWidgetBase_SetDisplayData, bInRestartAnim) == 0x000038, "Member 'TedChartWidgetBase_SetDisplayData::bInRestartAnim' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_LosePawn.OnPawnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_LosePawn_OnPawnEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveCondition_LosePawn_OnPawnEndPlay) == 0x000008, "Wrong alignment on TedObjectiveCondition_LosePawn_OnPawnEndPlay");
static_assert(sizeof(TedObjectiveCondition_LosePawn_OnPawnEndPlay) == 0x000010, "Wrong size on TedObjectiveCondition_LosePawn_OnPawnEndPlay");
static_assert(offsetof(TedObjectiveCondition_LosePawn_OnPawnEndPlay, InActor) == 0x000000, "Member 'TedObjectiveCondition_LosePawn_OnPawnEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_LosePawn_OnPawnEndPlay, InEndPlayReason) == 0x000008, "Member 'TedObjectiveCondition_LosePawn_OnPawnEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_StructureTeam.PassRuntimeData
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveCondition_StructureTeam_PassRuntimeData final
{
public:
	TArray<class ATedStructureBase*>              InStructures;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InExpectedAmount;                                  // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInverseCondition;                               // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveCondition_StructureTeam_PassRuntimeData) == 0x000008, "Wrong alignment on TedObjectiveCondition_StructureTeam_PassRuntimeData");
static_assert(sizeof(TedObjectiveCondition_StructureTeam_PassRuntimeData) == 0x000018, "Wrong size on TedObjectiveCondition_StructureTeam_PassRuntimeData");
static_assert(offsetof(TedObjectiveCondition_StructureTeam_PassRuntimeData, InStructures) == 0x000000, "Member 'TedObjectiveCondition_StructureTeam_PassRuntimeData::InStructures' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_StructureTeam_PassRuntimeData, InPlayerID) == 0x000010, "Member 'TedObjectiveCondition_StructureTeam_PassRuntimeData::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_StructureTeam_PassRuntimeData, InExpectedAmount) == 0x000011, "Member 'TedObjectiveCondition_StructureTeam_PassRuntimeData::InExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_StructureTeam_PassRuntimeData, bInInverseCondition) == 0x000012, "Member 'TedObjectiveCondition_StructureTeam_PassRuntimeData::bInInverseCondition' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.GetStateForUnreadMessageInContext
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyContextPanel_GetStateForUnreadMessageInContext final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyContextPanel_GetStateForUnreadMessageInContext) == 0x000001, "Wrong alignment on TedChatPartyContextPanel_GetStateForUnreadMessageInContext");
static_assert(sizeof(TedChatPartyContextPanel_GetStateForUnreadMessageInContext) == 0x000001, "Wrong size on TedChatPartyContextPanel_GetStateForUnreadMessageInContext");
static_assert(offsetof(TedChatPartyContextPanel_GetStateForUnreadMessageInContext, ReturnValue) == 0x000000, "Member 'TedChatPartyContextPanel_GetStateForUnreadMessageInContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.CloseContext
// 0x0004 (0x0004 - 0x0000)
struct TedChatPartyContextPanel_CloseContext final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyContextPanel_CloseContext) == 0x000004, "Wrong alignment on TedChatPartyContextPanel_CloseContext");
static_assert(sizeof(TedChatPartyContextPanel_CloseContext) == 0x000004, "Wrong size on TedChatPartyContextPanel_CloseContext");
static_assert(offsetof(TedChatPartyContextPanel_CloseContext, SlotIndex) == 0x000000, "Member 'TedChatPartyContextPanel_CloseContext::SlotIndex' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.GetContextTitle
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyContextPanel_GetContextTitle final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyContextPanel_GetContextTitle) == 0x000008, "Wrong alignment on TedChatPartyContextPanel_GetContextTitle");
static_assert(sizeof(TedChatPartyContextPanel_GetContextTitle) == 0x000018, "Wrong size on TedChatPartyContextPanel_GetContextTitle");
static_assert(offsetof(TedChatPartyContextPanel_GetContextTitle, SlotIndex) == 0x000000, "Member 'TedChatPartyContextPanel_GetContextTitle::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyContextPanel_GetContextTitle, ReturnValue) == 0x000008, "Member 'TedChatPartyContextPanel_GetContextTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.IsSlotLobbyContext
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyContextPanel_IsSlotLobbyContext final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyContextPanel_IsSlotLobbyContext) == 0x000004, "Wrong alignment on TedChatPartyContextPanel_IsSlotLobbyContext");
static_assert(sizeof(TedChatPartyContextPanel_IsSlotLobbyContext) == 0x000008, "Wrong size on TedChatPartyContextPanel_IsSlotLobbyContext");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotLobbyContext, SlotIndex) == 0x000000, "Member 'TedChatPartyContextPanel_IsSlotLobbyContext::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotLobbyContext, ReturnValue) == 0x000004, "Member 'TedChatPartyContextPanel_IsSlotLobbyContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.IsSlotTeamContext
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyContextPanel_IsSlotTeamContext final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyContextPanel_IsSlotTeamContext) == 0x000004, "Wrong alignment on TedChatPartyContextPanel_IsSlotTeamContext");
static_assert(sizeof(TedChatPartyContextPanel_IsSlotTeamContext) == 0x000008, "Wrong size on TedChatPartyContextPanel_IsSlotTeamContext");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotTeamContext, SlotIndex) == 0x000000, "Member 'TedChatPartyContextPanel_IsSlotTeamContext::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotTeamContext, ReturnValue) == 0x000004, "Member 'TedChatPartyContextPanel_IsSlotTeamContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyContextPanel.IsSlotWhisperContext
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyContextPanel_IsSlotWhisperContext final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyContextPanel_IsSlotWhisperContext) == 0x000004, "Wrong alignment on TedChatPartyContextPanel_IsSlotWhisperContext");
static_assert(sizeof(TedChatPartyContextPanel_IsSlotWhisperContext) == 0x000008, "Wrong size on TedChatPartyContextPanel_IsSlotWhisperContext");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotWhisperContext, SlotIndex) == 0x000000, "Member 'TedChatPartyContextPanel_IsSlotWhisperContext::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyContextPanel_IsSlotWhisperContext, ReturnValue) == 0x000004, "Member 'TedChatPartyContextPanel_IsSlotWhisperContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribeDestination
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribeDestination final
{
public:
	EChatMessageDestination                       Destination;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribeDestination) == 0x000001, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribeDestination");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribeDestination) == 0x000001, "Wrong size on TedChatPartyPlayerBadge_K2_DescribeDestination");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribeDestination, Destination) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribeDestination::Destination' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribePreorder
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribePreorder final
{
public:
	bool                                          bPreorder;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribePreorder) == 0x000001, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribePreorder");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribePreorder) == 0x000001, "Wrong size on TedChatPartyPlayerBadge_K2_DescribePreorder");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribePreorder, bPreorder) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribePreorder::bPreorder' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribeSameTeam
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribeSameTeam final
{
public:
	bool                                          bIsSameTeam;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribeSameTeam) == 0x000001, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribeSameTeam");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribeSameTeam) == 0x000001, "Wrong size on TedChatPartyPlayerBadge_K2_DescribeSameTeam");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribeSameTeam, bIsSameTeam) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribeSameTeam::bIsSameTeam' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribeSender
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribeSender final
{
public:
	EChatMessageSender                            Sender;                                            // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribeSender) == 0x000001, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribeSender");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribeSender) == 0x000001, "Wrong size on TedChatPartyPlayerBadge_K2_DescribeSender");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribeSender, Sender) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribeSender::Sender' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribeSenderName
// 0x0010 (0x0010 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribeSenderName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribeSenderName) == 0x000008, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribeSenderName");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribeSenderName) == 0x000010, "Wrong size on TedChatPartyPlayerBadge_K2_DescribeSenderName");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribeSenderName, Name_0) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribeSenderName::Name_0' has a wrong offset!");

// Function Tempest.TedChatPartyPlayerBadge.K2_DescribeTimestamp
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyPlayerBadge_K2_DescribeTimestamp final
{
public:
	struct FDateTime                              Timestamp;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayerBadge_K2_DescribeTimestamp) == 0x000008, "Wrong alignment on TedChatPartyPlayerBadge_K2_DescribeTimestamp");
static_assert(sizeof(TedChatPartyPlayerBadge_K2_DescribeTimestamp) == 0x000008, "Wrong size on TedChatPartyPlayerBadge_K2_DescribeTimestamp");
static_assert(offsetof(TedChatPartyPlayerBadge_K2_DescribeTimestamp, Timestamp) == 0x000000, "Member 'TedChatPartyPlayerBadge_K2_DescribeTimestamp::Timestamp' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.K2_GetMovieSequencePlayer
// 0x0018 (0x0018 - 0x0000)
struct TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer final
{
public:
	const class UObject*                          InContextObject;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SequenceTag;                                       // 0x0008(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedMovieSequencePlayerActor*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer) == 0x000008, "Wrong alignment on TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer");
static_assert(sizeof(TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer) == 0x000018, "Wrong size on TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer");
static_assert(offsetof(TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer, InContextObject) == 0x000000, "Member 'TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer::InContextObject' has a wrong offset!");
static_assert(offsetof(TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer, SequenceTag) == 0x000008, "Member 'TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer::SequenceTag' has a wrong offset!");
static_assert(offsetof(TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer, ReturnValue) == 0x000010, "Member 'TedMovieSequencePlayerActor_K2_GetMovieSequencePlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.PlayFirstStage
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_PlayFirstStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_PlayFirstStage) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_PlayFirstStage");
static_assert(sizeof(TedMovieSequencePlayerActor_PlayFirstStage) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_PlayFirstStage");
static_assert(offsetof(TedMovieSequencePlayerActor_PlayFirstStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_PlayFirstStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.PlayLastStage
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_PlayLastStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_PlayLastStage) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_PlayLastStage");
static_assert(sizeof(TedMovieSequencePlayerActor_PlayLastStage) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_PlayLastStage");
static_assert(offsetof(TedMovieSequencePlayerActor_PlayLastStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_PlayLastStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.PlayNextStage
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_PlayNextStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_PlayNextStage) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_PlayNextStage");
static_assert(sizeof(TedMovieSequencePlayerActor_PlayNextStage) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_PlayNextStage");
static_assert(offsetof(TedMovieSequencePlayerActor_PlayNextStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_PlayNextStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.PlayStage
// 0x0008 (0x0008 - 0x0000)
struct TedMovieSequencePlayerActor_PlayStage final
{
public:
	int32                                         InStageIndex;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMovieSequencePlayerActor_PlayStage) == 0x000004, "Wrong alignment on TedMovieSequencePlayerActor_PlayStage");
static_assert(sizeof(TedMovieSequencePlayerActor_PlayStage) == 0x000008, "Wrong size on TedMovieSequencePlayerActor_PlayStage");
static_assert(offsetof(TedMovieSequencePlayerActor_PlayStage, InStageIndex) == 0x000000, "Member 'TedMovieSequencePlayerActor_PlayStage::InStageIndex' has a wrong offset!");
static_assert(offsetof(TedMovieSequencePlayerActor_PlayStage, ReturnValue) == 0x000004, "Member 'TedMovieSequencePlayerActor_PlayStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.SetPlaying
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_SetPlaying final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_SetPlaying) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_SetPlaying");
static_assert(sizeof(TedMovieSequencePlayerActor_SetPlaying) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_SetPlaying");
static_assert(offsetof(TedMovieSequencePlayerActor_SetPlaying, bInValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_SetPlaying::bInValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.SetPlayingStage
// 0x0004 (0x0004 - 0x0000)
struct TedMovieSequencePlayerActor_SetPlayingStage final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_SetPlayingStage) == 0x000004, "Wrong alignment on TedMovieSequencePlayerActor_SetPlayingStage");
static_assert(sizeof(TedMovieSequencePlayerActor_SetPlayingStage) == 0x000004, "Wrong size on TedMovieSequencePlayerActor_SetPlayingStage");
static_assert(offsetof(TedMovieSequencePlayerActor_SetPlayingStage, InValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_SetPlayingStage::InValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.GetLastStage
// 0x0004 (0x0004 - 0x0000)
struct TedMovieSequencePlayerActor_GetLastStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_GetLastStage) == 0x000004, "Wrong alignment on TedMovieSequencePlayerActor_GetLastStage");
static_assert(sizeof(TedMovieSequencePlayerActor_GetLastStage) == 0x000004, "Wrong size on TedMovieSequencePlayerActor_GetLastStage");
static_assert(offsetof(TedMovieSequencePlayerActor_GetLastStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_GetLastStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.GetMovieConfig
// 0x0008 (0x0008 - 0x0000)
struct TedMovieSequencePlayerActor_GetMovieConfig final
{
public:
	const class UTedMoviePlayerConfig*            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_GetMovieConfig) == 0x000008, "Wrong alignment on TedMovieSequencePlayerActor_GetMovieConfig");
static_assert(sizeof(TedMovieSequencePlayerActor_GetMovieConfig) == 0x000008, "Wrong size on TedMovieSequencePlayerActor_GetMovieConfig");
static_assert(offsetof(TedMovieSequencePlayerActor_GetMovieConfig, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_GetMovieConfig::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.GetPlayingStage
// 0x0004 (0x0004 - 0x0000)
struct TedMovieSequencePlayerActor_GetPlayingStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_GetPlayingStage) == 0x000004, "Wrong alignment on TedMovieSequencePlayerActor_GetPlayingStage");
static_assert(sizeof(TedMovieSequencePlayerActor_GetPlayingStage) == 0x000004, "Wrong size on TedMovieSequencePlayerActor_GetPlayingStage");
static_assert(offsetof(TedMovieSequencePlayerActor_GetPlayingStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_GetPlayingStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.GetSequenceTags
// 0x0020 (0x0020 - 0x0000)
struct TedMovieSequencePlayerActor_GetSequenceTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_GetSequenceTags) == 0x000008, "Wrong alignment on TedMovieSequencePlayerActor_GetSequenceTags");
static_assert(sizeof(TedMovieSequencePlayerActor_GetSequenceTags) == 0x000020, "Wrong size on TedMovieSequencePlayerActor_GetSequenceTags");
static_assert(offsetof(TedMovieSequencePlayerActor_GetSequenceTags, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_GetSequenceTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.GetStagesNum
// 0x0004 (0x0004 - 0x0000)
struct TedMovieSequencePlayerActor_GetStagesNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_GetStagesNum) == 0x000004, "Wrong alignment on TedMovieSequencePlayerActor_GetStagesNum");
static_assert(sizeof(TedMovieSequencePlayerActor_GetStagesNum) == 0x000004, "Wrong size on TedMovieSequencePlayerActor_GetStagesNum");
static_assert(offsetof(TedMovieSequencePlayerActor_GetStagesNum, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_GetStagesNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_IsPlaying) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_IsPlaying");
static_assert(sizeof(TedMovieSequencePlayerActor_IsPlaying) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_IsPlaying");
static_assert(offsetof(TedMovieSequencePlayerActor_IsPlaying, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_IsPlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerActor.IsPlayingLastStage
// 0x0001 (0x0001 - 0x0000)
struct TedMovieSequencePlayerActor_IsPlayingLastStage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerActor_IsPlayingLastStage) == 0x000001, "Wrong alignment on TedMovieSequencePlayerActor_IsPlayingLastStage");
static_assert(sizeof(TedMovieSequencePlayerActor_IsPlayingLastStage) == 0x000001, "Wrong size on TedMovieSequencePlayerActor_IsPlayingLastStage");
static_assert(offsetof(TedMovieSequencePlayerActor_IsPlayingLastStage, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerActor_IsPlayingLastStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.OnPlayerActionPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction) == 0x000008, "Wrong alignment on TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction");
static_assert(sizeof(TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction) == 0x000018, "Wrong size on TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction");
static_assert(offsetof(TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction, InAction) == 0x000010, "Member 'TedChatPartyPlayersPanel_OnPlayerActionPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.OnRegisterPlayerSectionSlot
// 0x0100 (0x0100 - 0x0000)
struct TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot final
{
public:
	class UTedContentPanelSlotBase*               ContentSlot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedChatPartyPlayerSection             PlayerSectionHeader;                               // 0x0010(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot) == 0x000010, "Wrong alignment on TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot");
static_assert(sizeof(TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot) == 0x000100, "Wrong size on TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot");
static_assert(offsetof(TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot, ContentSlot) == 0x000000, "Member 'TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot::ContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot, PlayerSectionHeader) == 0x000010, "Member 'TedChatPartyPlayersPanel_OnRegisterPlayerSectionSlot::PlayerSectionHeader' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.OnRegisterPlayerSlot
// 0x0028 (0x0028 - 0x0000)
struct TedChatPartyPlayersPanel_OnRegisterPlayerSlot final
{
public:
	class UTedContentPanelSlotBase*               ContentSlot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedChatPartyPlayer_BP                 Player;                                            // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayersPanel_OnRegisterPlayerSlot) == 0x000008, "Wrong alignment on TedChatPartyPlayersPanel_OnRegisterPlayerSlot");
static_assert(sizeof(TedChatPartyPlayersPanel_OnRegisterPlayerSlot) == 0x000028, "Wrong size on TedChatPartyPlayersPanel_OnRegisterPlayerSlot");
static_assert(offsetof(TedChatPartyPlayersPanel_OnRegisterPlayerSlot, ContentSlot) == 0x000000, "Member 'TedChatPartyPlayersPanel_OnRegisterPlayerSlot::ContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_OnRegisterPlayerSlot, Player) == 0x000008, "Member 'TedChatPartyPlayersPanel_OnRegisterPlayerSlot::Player' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.GetDisplayNameForSection
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyPlayersPanel_GetDisplayNameForSection final
{
public:
	class FName                                   SectionID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayersPanel_GetDisplayNameForSection) == 0x000008, "Wrong alignment on TedChatPartyPlayersPanel_GetDisplayNameForSection");
static_assert(sizeof(TedChatPartyPlayersPanel_GetDisplayNameForSection) == 0x000018, "Wrong size on TedChatPartyPlayersPanel_GetDisplayNameForSection");
static_assert(offsetof(TedChatPartyPlayersPanel_GetDisplayNameForSection, SectionID) == 0x000000, "Member 'TedChatPartyPlayersPanel_GetDisplayNameForSection::SectionID' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_GetDisplayNameForSection, ReturnValue) == 0x000008, "Member 'TedChatPartyPlayersPanel_GetDisplayNameForSection::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.GetPlayerContent
// 0x0028 (0x0028 - 0x0000)
struct TedChatPartyPlayersPanel_GetPlayerContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedChatPartyPlayer_BP                 ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayersPanel_GetPlayerContent) == 0x000008, "Wrong alignment on TedChatPartyPlayersPanel_GetPlayerContent");
static_assert(sizeof(TedChatPartyPlayersPanel_GetPlayerContent) == 0x000028, "Wrong size on TedChatPartyPlayersPanel_GetPlayerContent");
static_assert(offsetof(TedChatPartyPlayersPanel_GetPlayerContent, InSlotIndex) == 0x000000, "Member 'TedChatPartyPlayersPanel_GetPlayerContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_GetPlayerContent, bSuccess) == 0x000004, "Member 'TedChatPartyPlayersPanel_GetPlayerContent::bSuccess' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_GetPlayerContent, ReturnValue) == 0x000008, "Member 'TedChatPartyPlayersPanel_GetPlayerContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.GetSectionContent
// 0x0100 (0x0100 - 0x0000)
struct TedChatPartyPlayersPanel_GetSectionContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedChatPartyPlayerSection             ReturnValue;                                       // 0x0010(0x00F0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyPlayersPanel_GetSectionContent) == 0x000010, "Wrong alignment on TedChatPartyPlayersPanel_GetSectionContent");
static_assert(sizeof(TedChatPartyPlayersPanel_GetSectionContent) == 0x000100, "Wrong size on TedChatPartyPlayersPanel_GetSectionContent");
static_assert(offsetof(TedChatPartyPlayersPanel_GetSectionContent, InSlotIndex) == 0x000000, "Member 'TedChatPartyPlayersPanel_GetSectionContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_GetSectionContent, bSuccess) == 0x000004, "Member 'TedChatPartyPlayersPanel_GetSectionContent::bSuccess' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_GetSectionContent, ReturnValue) == 0x000010, "Member 'TedChatPartyPlayersPanel_GetSectionContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.IsSlotIndexPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyPlayersPanel_IsSlotIndexPlayer final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyPlayersPanel_IsSlotIndexPlayer) == 0x000004, "Wrong alignment on TedChatPartyPlayersPanel_IsSlotIndexPlayer");
static_assert(sizeof(TedChatPartyPlayersPanel_IsSlotIndexPlayer) == 0x000008, "Wrong size on TedChatPartyPlayersPanel_IsSlotIndexPlayer");
static_assert(offsetof(TedChatPartyPlayersPanel_IsSlotIndexPlayer, SlotIndex) == 0x000000, "Member 'TedChatPartyPlayersPanel_IsSlotIndexPlayer::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_IsSlotIndexPlayer, ReturnValue) == 0x000004, "Member 'TedChatPartyPlayersPanel_IsSlotIndexPlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyPlayersPanel.IsSlotIndexSection
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyPlayersPanel_IsSlotIndexSection final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyPlayersPanel_IsSlotIndexSection) == 0x000004, "Wrong alignment on TedChatPartyPlayersPanel_IsSlotIndexSection");
static_assert(sizeof(TedChatPartyPlayersPanel_IsSlotIndexSection) == 0x000008, "Wrong size on TedChatPartyPlayersPanel_IsSlotIndexSection");
static_assert(offsetof(TedChatPartyPlayersPanel_IsSlotIndexSection, SlotIndex) == 0x000000, "Member 'TedChatPartyPlayersPanel_IsSlotIndexSection::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedChatPartyPlayersPanel_IsSlotIndexSection, ReturnValue) == 0x000004, "Member 'TedChatPartyPlayersPanel_IsSlotIndexSection::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.GetChatContextPanel
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_MainMenu_GetChatContextPanel final
{
public:
	class UTedChatPartyContextPanel*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_GetChatContextPanel) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_GetChatContextPanel");
static_assert(sizeof(TedChatPartyWidget_MainMenu_GetChatContextPanel) == 0x000008, "Wrong size on TedChatPartyWidget_MainMenu_GetChatContextPanel");
static_assert(offsetof(TedChatPartyWidget_MainMenu_GetChatContextPanel, ReturnValue) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_GetChatContextPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.GetCollapsedPartyPlayersPanel
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel final
{
public:
	class UTedChatPartyPlayersPanel*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel");
static_assert(sizeof(TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel) == 0x000008, "Wrong size on TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel");
static_assert(offsetof(TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel, ReturnValue) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_GetCollapsedPartyPlayersPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.OnChatContextContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_MainMenu_OnChatContextContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_OnChatContextContentChange) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_OnChatContextContentChange");
static_assert(sizeof(TedChatPartyWidget_MainMenu_OnChatContextContentChange) == 0x000008, "Wrong size on TedChatPartyWidget_MainMenu_OnChatContextContentChange");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnChatContextContentChange, InContentPanel) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_OnChatContextContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.OnChatContextSlotActivatedState
// 0x0018 (0x0018 - 0x0000)
struct TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState");
static_assert(sizeof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState) == 0x000018, "Wrong size on TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState, InContentPanel) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState, InContentSlot) == 0x000008, "Member 'TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState, InState) == 0x000010, "Member 'TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState::InState' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState, bInActivated) == 0x000011, "Member 'TedChatPartyWidget_MainMenu_OnChatContextSlotActivatedState::bInActivated' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.OnContextsEmpty
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyWidget_MainMenu_OnContextsEmpty final
{
public:
	bool                                          bEmpty;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_OnContextsEmpty) == 0x000001, "Wrong alignment on TedChatPartyWidget_MainMenu_OnContextsEmpty");
static_assert(sizeof(TedChatPartyWidget_MainMenu_OnContextsEmpty) == 0x000001, "Wrong size on TedChatPartyWidget_MainMenu_OnContextsEmpty");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnContextsEmpty, bEmpty) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_OnContextsEmpty::bEmpty' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.OnMainMenuTabSelected
// 0x0010 (0x0010 - 0x0000)
struct TedChatPartyWidget_MainMenu_OnMainMenuTabSelected final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InTabName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_OnMainMenuTabSelected) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_OnMainMenuTabSelected");
static_assert(sizeof(TedChatPartyWidget_MainMenu_OnMainMenuTabSelected) == 0x000010, "Wrong size on TedChatPartyWidget_MainMenu_OnMainMenuTabSelected");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnMainMenuTabSelected, InWidget) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_OnMainMenuTabSelected::InWidget' has a wrong offset!");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnMainMenuTabSelected, InTabName) == 0x000008, "Member 'TedChatPartyWidget_MainMenu_OnMainMenuTabSelected::InTabName' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.OnPlayersChanged
// 0x0008 (0x0008 - 0x0000)
struct TedChatPartyWidget_MainMenu_OnPlayersChanged final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_OnPlayersChanged) == 0x000008, "Wrong alignment on TedChatPartyWidget_MainMenu_OnPlayersChanged");
static_assert(sizeof(TedChatPartyWidget_MainMenu_OnPlayersChanged) == 0x000008, "Wrong size on TedChatPartyWidget_MainMenu_OnPlayersChanged");
static_assert(offsetof(TedChatPartyWidget_MainMenu_OnPlayersChanged, InContentPanel) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_OnPlayersChanged::InContentPanel' has a wrong offset!");

// Function Tempest.TedChatPartyWidget_MainMenu.SetExpanded
// 0x0001 (0x0001 - 0x0000)
struct TedChatPartyWidget_MainMenu_SetExpanded final
{
public:
	bool                                          bExpanded;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatPartyWidget_MainMenu_SetExpanded) == 0x000001, "Wrong alignment on TedChatPartyWidget_MainMenu_SetExpanded");
static_assert(sizeof(TedChatPartyWidget_MainMenu_SetExpanded) == 0x000001, "Wrong size on TedChatPartyWidget_MainMenu_SetExpanded");
static_assert(offsetof(TedChatPartyWidget_MainMenu_SetExpanded, bExpanded) == 0x000000, "Member 'TedChatPartyWidget_MainMenu_SetExpanded::bExpanded' has a wrong offset!");

// Function Tempest.TedChatWindow.OnChatBoxTextCommitted
// 0x0018 (0x0018 - 0x0000)
struct TedChatWindow_OnChatBoxTextCommitted final
{
public:
	class FText                                   TextCommitted;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedChatWindow_OnChatBoxTextCommitted) == 0x000008, "Wrong alignment on TedChatWindow_OnChatBoxTextCommitted");
static_assert(sizeof(TedChatWindow_OnChatBoxTextCommitted) == 0x000018, "Wrong size on TedChatWindow_OnChatBoxTextCommitted");
static_assert(offsetof(TedChatWindow_OnChatBoxTextCommitted, TextCommitted) == 0x000000, "Member 'TedChatWindow_OnChatBoxTextCommitted::TextCommitted' has a wrong offset!");
static_assert(offsetof(TedChatWindow_OnChatBoxTextCommitted, CommitType) == 0x000010, "Member 'TedChatWindow_OnChatBoxTextCommitted::CommitType' has a wrong offset!");

// Function Tempest.TedChatWindow.GetAllTextInChatBox
// 0x0010 (0x0010 - 0x0000)
struct TedChatWindow_GetAllTextInChatBox final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedChatWindow_GetAllTextInChatBox) == 0x000008, "Wrong alignment on TedChatWindow_GetAllTextInChatBox");
static_assert(sizeof(TedChatWindow_GetAllTextInChatBox) == 0x000010, "Wrong size on TedChatWindow_GetAllTextInChatBox");
static_assert(offsetof(TedChatWindow_GetAllTextInChatBox, ReturnValue) == 0x000000, "Member 'TedChatWindow_GetAllTextInChatBox::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnArmoryContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnArmoryContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnArmoryContentChange) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnArmoryContentChange");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnArmoryContentChange) == 0x000008, "Wrong size on TedCommandCompoundArmoryScreen_OnArmoryContentChange");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnArmoryContentChange, InContentPanel) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnArmoryContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnArmoryRequestBuy
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnArmoryRequestBuy final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnArmoryRequestBuy) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnArmoryRequestBuy");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnArmoryRequestBuy) == 0x000008, "Wrong size on TedCommandCompoundArmoryScreen_OnArmoryRequestBuy");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnArmoryRequestBuy, InEquipmentSlot) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnArmoryRequestBuy::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnArmoryRequestEquip
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnArmoryRequestEquip final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnArmoryRequestEquip) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnArmoryRequestEquip");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnArmoryRequestEquip) == 0x000008, "Wrong size on TedCommandCompoundArmoryScreen_OnArmoryRequestEquip");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnArmoryRequestEquip, InEquipmentSlot) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnArmoryRequestEquip::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnArmoryRequestUnequip
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip) == 0x000008, "Wrong size on TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip, InEquipmentSlot) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnArmoryRequestUnequip::InEquipmentSlot' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnCancelPurchase
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnCancelPurchase final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnCancelPurchase) == 0x000004, "Wrong alignment on TedCommandCompoundArmoryScreen_OnCancelPurchase");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnCancelPurchase) == 0x000004, "Wrong size on TedCommandCompoundArmoryScreen_OnCancelPurchase");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnCancelPurchase, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnCancelPurchase::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnCancelResetArmory
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnCancelResetArmory final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnCancelResetArmory) == 0x000004, "Wrong alignment on TedCommandCompoundArmoryScreen_OnCancelResetArmory");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnCancelResetArmory) == 0x000004, "Wrong size on TedCommandCompoundArmoryScreen_OnCancelResetArmory");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnCancelResetArmory, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnCancelResetArmory::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnConfirmPurchase
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnConfirmPurchase final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnConfirmPurchase) == 0x000004, "Wrong alignment on TedCommandCompoundArmoryScreen_OnConfirmPurchase");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnConfirmPurchase) == 0x000004, "Wrong size on TedCommandCompoundArmoryScreen_OnConfirmPurchase");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnConfirmPurchase, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnConfirmPurchase::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnConfirmResetArmory
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnConfirmResetArmory final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnConfirmResetArmory) == 0x000004, "Wrong alignment on TedCommandCompoundArmoryScreen_OnConfirmResetArmory");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnConfirmResetArmory) == 0x000004, "Wrong size on TedCommandCompoundArmoryScreen_OnConfirmResetArmory");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnConfirmResetArmory, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnConfirmResetArmory::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnPopupButton_Ok
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnPopupButton_Ok final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnPopupButton_Ok) == 0x000004, "Wrong alignment on TedCommandCompoundArmoryScreen_OnPopupButton_Ok");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnPopupButton_Ok) == 0x000004, "Wrong size on TedCommandCompoundArmoryScreen_OnPopupButton_Ok");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnPopupButton_Ok, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnPopupButton_Ok::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnTriggerButtonPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction) == 0x000018, "Wrong size on TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction, InAction) == 0x000010, "Member 'TedCommandCompoundArmoryScreen_OnTriggerButtonPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.OnTriggerLoadoutSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction");
static_assert(sizeof(TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction) == 0x000018, "Wrong size on TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction, InContentPanel) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction, InContentSlot) == 0x000008, "Member 'TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction, InAction) == 0x000010, "Member 'TedCommandCompoundArmoryScreen_OnTriggerLoadoutSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.RefreshArmoryContent
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundArmoryScreen_RefreshArmoryContent final
{
public:
	bool                                          bInImmediately;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_RefreshArmoryContent) == 0x000001, "Wrong alignment on TedCommandCompoundArmoryScreen_RefreshArmoryContent");
static_assert(sizeof(TedCommandCompoundArmoryScreen_RefreshArmoryContent) == 0x000001, "Wrong size on TedCommandCompoundArmoryScreen_RefreshArmoryContent");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RefreshArmoryContent, bInImmediately) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_RefreshArmoryContent::bInImmediately' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.RequestBuyEquipment
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundArmoryScreen_RequestBuyEquipment final
{
public:
	class UTedEquipmentSlot*                      InEquipmentSlot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundArmoryScreen_RequestBuyEquipment) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_RequestBuyEquipment");
static_assert(sizeof(TedCommandCompoundArmoryScreen_RequestBuyEquipment) == 0x000010, "Wrong size on TedCommandCompoundArmoryScreen_RequestBuyEquipment");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestBuyEquipment, InEquipmentSlot) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_RequestBuyEquipment::InEquipmentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestBuyEquipment, ReturnValue) == 0x000008, "Member 'TedCommandCompoundArmoryScreen_RequestBuyEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.RequestEquipEquipment
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundArmoryScreen_RequestEquipEquipment final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundArmoryScreen_RequestEquipEquipment) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_RequestEquipEquipment");
static_assert(sizeof(TedCommandCompoundArmoryScreen_RequestEquipEquipment) == 0x000010, "Wrong size on TedCommandCompoundArmoryScreen_RequestEquipEquipment");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestEquipEquipment, InEquipment) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_RequestEquipEquipment::InEquipment' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestEquipEquipment, ReturnValue) == 0x000008, "Member 'TedCommandCompoundArmoryScreen_RequestEquipEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.RequestUnequipEquipment
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundArmoryScreen_RequestUnequipEquipment final
{
public:
	const class UTedEquipment*                    InEquipment;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundArmoryScreen_RequestUnequipEquipment) == 0x000008, "Wrong alignment on TedCommandCompoundArmoryScreen_RequestUnequipEquipment");
static_assert(sizeof(TedCommandCompoundArmoryScreen_RequestUnequipEquipment) == 0x000010, "Wrong size on TedCommandCompoundArmoryScreen_RequestUnequipEquipment");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestUnequipEquipment, InEquipment) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_RequestUnequipEquipment::InEquipment' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundArmoryScreen_RequestUnequipEquipment, ReturnValue) == 0x000008, "Member 'TedCommandCompoundArmoryScreen_RequestUnequipEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.CanBuyOrEquipSomething
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething) == 0x000001, "Wrong alignment on TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething");
static_assert(sizeof(TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething) == 0x000001, "Wrong size on TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething");
static_assert(offsetof(TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething, ReturnValue) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_CanBuyOrEquipSomething::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundArmoryScreen.GetCurrentFaction
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundArmoryScreen_GetCurrentFaction final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundArmoryScreen_GetCurrentFaction) == 0x000001, "Wrong alignment on TedCommandCompoundArmoryScreen_GetCurrentFaction");
static_assert(sizeof(TedCommandCompoundArmoryScreen_GetCurrentFaction) == 0x000001, "Wrong size on TedCommandCompoundArmoryScreen_GetCurrentFaction");
static_assert(offsetof(TedCommandCompoundArmoryScreen_GetCurrentFaction, ReturnValue) == 0x000000, "Member 'TedCommandCompoundArmoryScreen_GetCurrentFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.HandlePopupButtonClick_Ok
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_HandlePopupButtonClick_Ok::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.OnCancelDoctrinePurchase
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_OnCancelDoctrinePurchase::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.OnCancelResetDoctrines
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_OnCancelResetDoctrines::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.OnConfirmDoctrinePurchase
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_OnConfirmDoctrinePurchase::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.OnConfirmResetDoctrines
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines, InButtonIndex) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_OnConfirmResetDoctrines::InButtonIndex' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.OnTriggerDoctrineSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction) == 0x000008, "Wrong alignment on TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction) == 0x000018, "Wrong size on TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction, InContentPanel) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction, InContentSlot) == 0x000008, "Member 'TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction, InAction) == 0x000010, "Member 'TedCommandCompoundDoctrineScreen_OnTriggerDoctrineSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.CanBuyAnyNewDoctrine
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine) == 0x000001, "Wrong alignment on TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine) == 0x000001, "Wrong size on TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_CanBuyAnyNewDoctrine::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundDoctrineScreen.GetRemainingDoctrinePoints
// 0x0004 (0x0004 - 0x0000)
struct TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints) == 0x000004, "Wrong alignment on TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints");
static_assert(sizeof(TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints) == 0x000004, "Wrong size on TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints");
static_assert(offsetof(TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints, ReturnValue) == 0x000000, "Member 'TedCommandCompoundDoctrineScreen_GetRemainingDoctrinePoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.DebugOnSessionControlGetDataCenters
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters final
{
public:
	TArray<struct FSessionControlDataCenter>      DataCenters;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                ResultCode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters");
static_assert(sizeof(TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters) == 0x000018, "Wrong size on TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters");
static_assert(offsetof(TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters, DataCenters) == 0x000000, "Member 'TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters::DataCenters' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters, ResultCode) == 0x000010, "Member 'TedOnlineHydraAPI_DebugOnSessionControlGetDataCenters::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnClientConnectingTicket
// 0x0078 (0x0078 - 0x0000)
struct TedOnlineHydraAPI_OnClientConnectingTicket final
{
public:
	struct FClientData                            ClientData;                                        // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnClientConnectingTicket) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnClientConnectingTicket");
static_assert(sizeof(TedOnlineHydraAPI_OnClientConnectingTicket) == 0x000078, "Wrong size on TedOnlineHydraAPI_OnClientConnectingTicket");
static_assert(offsetof(TedOnlineHydraAPI_OnClientConnectingTicket, ClientData) == 0x000000, "Member 'TedOnlineHydraAPI_OnClientConnectingTicket::ClientData' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnClientRatingsUpdate
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineHydraAPI_OnClientRatingsUpdate final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeRatings                       ErrorCode;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnClientRatingsUpdate) == 0x000004, "Wrong alignment on TedOnlineHydraAPI_OnClientRatingsUpdate");
static_assert(sizeof(TedOnlineHydraAPI_OnClientRatingsUpdate) == 0x000008, "Wrong size on TedOnlineHydraAPI_OnClientRatingsUpdate");
static_assert(offsetof(TedOnlineHydraAPI_OnClientRatingsUpdate, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnClientRatingsUpdate::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnClientRatingsUpdate, ErrorCode) == 0x000004, "Member 'TedOnlineHydraAPI_OnClientRatingsUpdate::ErrorCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnFinishSession
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineHydraAPI_OnFinishSession final
{
public:
	EProsdkErrorCodeSessionControl                ErrorCode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnFinishSession) == 0x000001, "Wrong alignment on TedOnlineHydraAPI_OnFinishSession");
static_assert(sizeof(TedOnlineHydraAPI_OnFinishSession) == 0x000001, "Wrong size on TedOnlineHydraAPI_OnFinishSession");
static_assert(offsetof(TedOnlineHydraAPI_OnFinishSession, ErrorCode) == 0x000000, "Member 'TedOnlineHydraAPI_OnFinishSession::ErrorCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnHydraClientServiceStateChanged
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnHydraClientServiceStateChanged final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsServiceState                             State;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeAuthorization                 ErrorCode;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnHydraClientServiceStateChanged");
static_assert(sizeof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnHydraClientServiceStateChanged");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnHydraClientServiceStateChanged::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged, State) == 0x000004, "Member 'TedOnlineHydraAPI_OnHydraClientServiceStateChanged::State' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged, ErrorCode) == 0x000005, "Member 'TedOnlineHydraAPI_OnHydraClientServiceStateChanged::ErrorCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraClientServiceStateChanged, ErrorMessage) == 0x000008, "Member 'TedOnlineHydraAPI_OnHydraClientServiceStateChanged::ErrorMessage' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnHydraGetUsersPresenceDataComplete
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete final
{
public:
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPresenceUsersPresence                 Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete");
static_assert(sizeof(TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete, ResultCode) == 0x000000, "Member 'TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete::ResultCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete, Data) == 0x000008, "Member 'TedOnlineHydraAPI_OnHydraGetUsersPresenceDataComplete::Data' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnHydraPresenceServiceStateChanged
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged final
{
public:
	int32                                         AuthorizationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsServiceState                             State;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged");
static_assert(sizeof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged, AuthorizationIndex) == 0x000000, "Member 'TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged::AuthorizationIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged, State) == 0x000004, "Member 'TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged::State' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged, ResultCode) == 0x000005, "Member 'TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged::ResultCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged, Message) == 0x000008, "Member 'TedOnlineHydraAPI_OnHydraPresenceServiceStateChanged::Message' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnHydraServerServiceStateChanged
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnHydraServerServiceStateChanged final
{
public:
	EProsServiceState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                ResultCode;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnHydraServerServiceStateChanged) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnHydraServerServiceStateChanged");
static_assert(sizeof(TedOnlineHydraAPI_OnHydraServerServiceStateChanged) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnHydraServerServiceStateChanged");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraServerServiceStateChanged, State) == 0x000000, "Member 'TedOnlineHydraAPI_OnHydraServerServiceStateChanged::State' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraServerServiceStateChanged, ResultCode) == 0x000001, "Member 'TedOnlineHydraAPI_OnHydraServerServiceStateChanged::ResultCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnHydraServerServiceStateChanged, Message) == 0x000008, "Member 'TedOnlineHydraAPI_OnHydraServerServiceStateChanged::Message' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnLeaderboardsFilteredGetWhenRatingUpdate
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeLeaderboards                  ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLeaderboardBoard>              Leaderboards;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate");
static_assert(sizeof(TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate");
static_assert(offsetof(TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate, ResultCode) == 0x000004, "Member 'TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate::ResultCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate, Leaderboards) == 0x000008, "Member 'TedOnlineHydraAPI_OnLeaderboardsFilteredGetWhenRatingUpdate::Leaderboards' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnMatchmakeSessionUpdated
// 0x00D8 (0x00D8 - 0x0000)
struct TedOnlineHydraAPI_OnMatchmakeSessionUpdated final
{
public:
	int32                                         AuthorizationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchmakeSessionStatus                Status;                                            // 0x0008(0x00C8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FMatchmakeSessionStatusUpdateReasons   Reason;                                            // 0x00D0(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnMatchmakeSessionUpdated) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnMatchmakeSessionUpdated");
static_assert(sizeof(TedOnlineHydraAPI_OnMatchmakeSessionUpdated) == 0x0000D8, "Wrong size on TedOnlineHydraAPI_OnMatchmakeSessionUpdated");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeSessionUpdated, AuthorizationIndex) == 0x000000, "Member 'TedOnlineHydraAPI_OnMatchmakeSessionUpdated::AuthorizationIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeSessionUpdated, Status) == 0x000008, "Member 'TedOnlineHydraAPI_OnMatchmakeSessionUpdated::Status' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeSessionUpdated, Reason) == 0x0000D0, "Member 'TedOnlineHydraAPI_OnMatchmakeSessionUpdated::Reason' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnMatchmakeStartComplete
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineHydraAPI_OnMatchmakeStartComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnMatchmakeStartComplete) == 0x000004, "Wrong alignment on TedOnlineHydraAPI_OnMatchmakeStartComplete");
static_assert(sizeof(TedOnlineHydraAPI_OnMatchmakeStartComplete) == 0x000008, "Wrong size on TedOnlineHydraAPI_OnMatchmakeStartComplete");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeStartComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnMatchmakeStartComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeStartComplete, ResultCode) == 0x000004, "Member 'TedOnlineHydraAPI_OnMatchmakeStartComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnMatchmakeStopComplete
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineHydraAPI_OnMatchmakeStopComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnMatchmakeStopComplete) == 0x000004, "Wrong alignment on TedOnlineHydraAPI_OnMatchmakeStopComplete");
static_assert(sizeof(TedOnlineHydraAPI_OnMatchmakeStopComplete) == 0x000008, "Wrong size on TedOnlineHydraAPI_OnMatchmakeStopComplete");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeStopComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnMatchmakeStopComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnMatchmakeStopComplete, ResultCode) == 0x000004, "Member 'TedOnlineHydraAPI_OnMatchmakeStopComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnSessionClientAcceptResult
// 0x00A0 (0x00A0 - 0x0000)
struct TedOnlineHydraAPI_OnSessionClientAcceptResult final
{
public:
	class FString                                 GameSessionId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSessionControlAcceptClientResult      Result;                                            // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                Error;                                             // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnSessionClientAcceptResult) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnSessionClientAcceptResult");
static_assert(sizeof(TedOnlineHydraAPI_OnSessionClientAcceptResult) == 0x0000A0, "Wrong size on TedOnlineHydraAPI_OnSessionClientAcceptResult");
static_assert(offsetof(TedOnlineHydraAPI_OnSessionClientAcceptResult, GameSessionId) == 0x000000, "Member 'TedOnlineHydraAPI_OnSessionClientAcceptResult::GameSessionId' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnSessionClientAcceptResult, Result) == 0x000010, "Member 'TedOnlineHydraAPI_OnSessionClientAcceptResult::Result' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnSessionClientAcceptResult, Error) == 0x000098, "Member 'TedOnlineHydraAPI_OnSessionClientAcceptResult::Error' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnSessionControlGetDataCenters
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineHydraAPI_OnSessionControlGetDataCenters final
{
public:
	TArray<struct FSessionControlDataCenter>      DataCenters;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                ResultCode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnSessionControlGetDataCenters) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnSessionControlGetDataCenters");
static_assert(sizeof(TedOnlineHydraAPI_OnSessionControlGetDataCenters) == 0x000018, "Wrong size on TedOnlineHydraAPI_OnSessionControlGetDataCenters");
static_assert(offsetof(TedOnlineHydraAPI_OnSessionControlGetDataCenters, DataCenters) == 0x000000, "Member 'TedOnlineHydraAPI_OnSessionControlGetDataCenters::DataCenters' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnSessionControlGetDataCenters, ResultCode) == 0x000010, "Member 'TedOnlineHydraAPI_OnSessionControlGetDataCenters::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnStandaloneBrowseRequestComplete
// 0x0038 (0x0038 - 0x0000)
struct TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStandaloneBrowseResult                BrowseResult;                                      // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                ResultCode;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete");
static_assert(sizeof(TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete) == 0x000038, "Wrong size on TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete, BrowseResult) == 0x000008, "Member 'TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete::BrowseResult' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete, ResultCode) == 0x000030, "Member 'TedOnlineHydraAPI_OnStandaloneBrowseRequestComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineHydraAPI.OnStandaloneCodeRequestComplete
// 0x0020 (0x0020 - 0x0000)
struct TedOnlineHydraAPI_OnStandaloneCodeRequestComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SignInCode;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeSessionControl                ResultCode;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineHydraAPI_OnStandaloneCodeRequestComplete) == 0x000008, "Wrong alignment on TedOnlineHydraAPI_OnStandaloneCodeRequestComplete");
static_assert(sizeof(TedOnlineHydraAPI_OnStandaloneCodeRequestComplete) == 0x000020, "Wrong size on TedOnlineHydraAPI_OnStandaloneCodeRequestComplete");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneCodeRequestComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineHydraAPI_OnStandaloneCodeRequestComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneCodeRequestComplete, SignInCode) == 0x000008, "Member 'TedOnlineHydraAPI_OnStandaloneCodeRequestComplete::SignInCode' has a wrong offset!");
static_assert(offsetof(TedOnlineHydraAPI_OnStandaloneCodeRequestComplete, ResultCode) == 0x000018, "Member 'TedOnlineHydraAPI_OnStandaloneCodeRequestComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.K2_BranchStage
// 0x0002 (0x0002 - 0x0000)
struct TedCommandCompoundMapScreen_K2_BranchStage final
{
public:
	ETedCommandCompoundMapScreenStage             InValue;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCommandCompoundMapScreenStage             ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_K2_BranchStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_K2_BranchStage");
static_assert(sizeof(TedCommandCompoundMapScreen_K2_BranchStage) == 0x000002, "Wrong size on TedCommandCompoundMapScreen_K2_BranchStage");
static_assert(offsetof(TedCommandCompoundMapScreen_K2_BranchStage, InValue) == 0x000000, "Member 'TedCommandCompoundMapScreen_K2_BranchStage::InValue' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreen_K2_BranchStage, ReturnValue) == 0x000001, "Member 'TedCommandCompoundMapScreen_K2_BranchStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.ChangeStage
// 0x0002 (0x0002 - 0x0000)
struct TedCommandCompoundMapScreen_ChangeStage final
{
public:
	bool                                          bInForward;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_ChangeStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_ChangeStage");
static_assert(sizeof(TedCommandCompoundMapScreen_ChangeStage) == 0x000002, "Wrong size on TedCommandCompoundMapScreen_ChangeStage");
static_assert(offsetof(TedCommandCompoundMapScreen_ChangeStage, bInForward) == 0x000000, "Member 'TedCommandCompoundMapScreen_ChangeStage::bInForward' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreen_ChangeStage, ReturnValue) == 0x000001, "Member 'TedCommandCompoundMapScreen_ChangeStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.K2_OnChangeStage
// 0x0002 (0x0002 - 0x0000)
struct TedCommandCompoundMapScreen_K2_OnChangeStage final
{
public:
	ETedCommandCompoundMapScreenStage             InPrevStage;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedCommandCompoundMapScreenStage             InCurrent;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_K2_OnChangeStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_K2_OnChangeStage");
static_assert(sizeof(TedCommandCompoundMapScreen_K2_OnChangeStage) == 0x000002, "Wrong size on TedCommandCompoundMapScreen_K2_OnChangeStage");
static_assert(offsetof(TedCommandCompoundMapScreen_K2_OnChangeStage, InPrevStage) == 0x000000, "Member 'TedCommandCompoundMapScreen_K2_OnChangeStage::InPrevStage' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreen_K2_OnChangeStage, InCurrent) == 0x000001, "Member 'TedCommandCompoundMapScreen_K2_OnChangeStage::InCurrent' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.OnButtons_Continue
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreen_OnButtons_Continue final
{
public:
	class UTedCommandCompoundMapScreenComponent*  InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_OnButtons_Continue) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreen_OnButtons_Continue");
static_assert(sizeof(TedCommandCompoundMapScreen_OnButtons_Continue) == 0x000008, "Wrong size on TedCommandCompoundMapScreen_OnButtons_Continue");
static_assert(offsetof(TedCommandCompoundMapScreen_OnButtons_Continue, InComponent) == 0x000000, "Member 'TedCommandCompoundMapScreen_OnButtons_Continue::InComponent' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.OnButtons_MainMenu
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreen_OnButtons_MainMenu final
{
public:
	class UTedCommandCompoundMapScreenComponent*  InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_OnButtons_MainMenu) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreen_OnButtons_MainMenu");
static_assert(sizeof(TedCommandCompoundMapScreen_OnButtons_MainMenu) == 0x000008, "Wrong size on TedCommandCompoundMapScreen_OnButtons_MainMenu");
static_assert(offsetof(TedCommandCompoundMapScreen_OnButtons_MainMenu, InComponent) == 0x000000, "Member 'TedCommandCompoundMapScreen_OnButtons_MainMenu::InComponent' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.OnComponentTrigger
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreen_OnComponentTrigger final
{
public:
	class UTedCommandCompoundMapScreenComponent*  InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_OnComponentTrigger) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreen_OnComponentTrigger");
static_assert(sizeof(TedCommandCompoundMapScreen_OnComponentTrigger) == 0x000008, "Wrong size on TedCommandCompoundMapScreen_OnComponentTrigger");
static_assert(offsetof(TedCommandCompoundMapScreen_OnComponentTrigger, InComponent) == 0x000000, "Member 'TedCommandCompoundMapScreen_OnComponentTrigger::InComponent' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.SetStage
// 0x0002 (0x0002 - 0x0000)
struct TedCommandCompoundMapScreen_SetStage final
{
public:
	ETedCommandCompoundMapScreenStage             InStage;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_SetStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_SetStage");
static_assert(sizeof(TedCommandCompoundMapScreen_SetStage) == 0x000002, "Wrong size on TedCommandCompoundMapScreen_SetStage");
static_assert(offsetof(TedCommandCompoundMapScreen_SetStage, InStage) == 0x000000, "Member 'TedCommandCompoundMapScreen_SetStage::InStage' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreen_SetStage, ReturnValue) == 0x000001, "Member 'TedCommandCompoundMapScreen_SetStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.GetCurrentMission
// 0x0008 (0x0008 - 0x0000)
struct TedCommandCompoundMapScreen_GetCurrentMission final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_GetCurrentMission) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreen_GetCurrentMission");
static_assert(sizeof(TedCommandCompoundMapScreen_GetCurrentMission) == 0x000008, "Wrong size on TedCommandCompoundMapScreen_GetCurrentMission");
static_assert(offsetof(TedCommandCompoundMapScreen_GetCurrentMission, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreen_GetCurrentMission::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.GetCurrentStage
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundMapScreen_GetCurrentStage final
{
public:
	ETedCommandCompoundMapScreenStage             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_GetCurrentStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_GetCurrentStage");
static_assert(sizeof(TedCommandCompoundMapScreen_GetCurrentStage) == 0x000001, "Wrong size on TedCommandCompoundMapScreen_GetCurrentStage");
static_assert(offsetof(TedCommandCompoundMapScreen_GetCurrentStage, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreen_GetCurrentStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreen.K2_BranchCurrentStage
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundMapScreen_K2_BranchCurrentStage final
{
public:
	ETedCommandCompoundMapScreenStage             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreen_K2_BranchCurrentStage) == 0x000001, "Wrong alignment on TedCommandCompoundMapScreen_K2_BranchCurrentStage");
static_assert(sizeof(TedCommandCompoundMapScreen_K2_BranchCurrentStage) == 0x000001, "Wrong size on TedCommandCompoundMapScreen_K2_BranchCurrentStage");
static_assert(offsetof(TedCommandCompoundMapScreen_K2_BranchCurrentStage, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMapScreen_K2_BranchCurrentStage::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidgetContext.Get
// 0x0008 (0x0008 - 0x0000)
struct TedOnlinePlayerProfileWidgetContext_Get final
{
public:
	class UTedOnlinePlayerProfileWidgetContext*   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidgetContext_Get) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidgetContext_Get");
static_assert(sizeof(TedOnlinePlayerProfileWidgetContext_Get) == 0x000008, "Wrong size on TedOnlinePlayerProfileWidgetContext_Get");
static_assert(offsetof(TedOnlinePlayerProfileWidgetContext_Get, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidgetContext_Get::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMapScreenComponent_Movie.OnMoviePlayerFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InMovie;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished) == 0x000008, "Wrong alignment on TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished");
static_assert(sizeof(TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished) == 0x000010, "Wrong size on TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished, InWidget) == 0x000000, "Member 'TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished, InMovie) == 0x000008, "Member 'TedCommandCompoundMapScreenComponent_Movie_OnMoviePlayerFinished::InMovie' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayerContextObject.New
// 0x0020 (0x0020 - 0x0000)
struct TedCommandCompoundMoviePlayerContextObject_New final
{
public:
	const class UFileMediaSource*                 InMovie;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFileMediaSource*                 InIntroAnimOverride;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedCommandCompoundMoviePlayerContextObject* ReturnValue;                                  // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayerContextObject_New) == 0x000008, "Wrong alignment on TedCommandCompoundMoviePlayerContextObject_New");
static_assert(sizeof(TedCommandCompoundMoviePlayerContextObject_New) == 0x000020, "Wrong size on TedCommandCompoundMoviePlayerContextObject_New");
static_assert(offsetof(TedCommandCompoundMoviePlayerContextObject_New, InMovie) == 0x000000, "Member 'TedCommandCompoundMoviePlayerContextObject_New::InMovie' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayerContextObject_New, bInLoop) == 0x000008, "Member 'TedCommandCompoundMoviePlayerContextObject_New::bInLoop' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayerContextObject_New, InIntroAnimOverride) == 0x000010, "Member 'TedCommandCompoundMoviePlayerContextObject_New::InIntroAnimOverride' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayerContextObject_New, ReturnValue) == 0x000018, "Member 'TedCommandCompoundMoviePlayerContextObject_New::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayer.OnContentVisibilityChange
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundMoviePlayer_OnContentVisibilityChange final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayer_OnContentVisibilityChange) == 0x000001, "Wrong alignment on TedCommandCompoundMoviePlayer_OnContentVisibilityChange");
static_assert(sizeof(TedCommandCompoundMoviePlayer_OnContentVisibilityChange) == 0x000001, "Wrong size on TedCommandCompoundMoviePlayer_OnContentVisibilityChange");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnContentVisibilityChange, bInShow) == 0x000000, "Member 'TedCommandCompoundMoviePlayer_OnContentVisibilityChange::bInShow' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayer.OnFrameIntroFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMoviePlayer_OnFrameIntroFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayer_OnFrameIntroFinished) == 0x000008, "Wrong alignment on TedCommandCompoundMoviePlayer_OnFrameIntroFinished");
static_assert(sizeof(TedCommandCompoundMoviePlayer_OnFrameIntroFinished) == 0x000010, "Wrong size on TedCommandCompoundMoviePlayer_OnFrameIntroFinished");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnFrameIntroFinished, InWidget) == 0x000000, "Member 'TedCommandCompoundMoviePlayer_OnFrameIntroFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnFrameIntroFinished, InSource) == 0x000008, "Member 'TedCommandCompoundMoviePlayer_OnFrameIntroFinished::InSource' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayer.OnFrameOutroFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMoviePlayer_OnFrameOutroFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayer_OnFrameOutroFinished) == 0x000008, "Wrong alignment on TedCommandCompoundMoviePlayer_OnFrameOutroFinished");
static_assert(sizeof(TedCommandCompoundMoviePlayer_OnFrameOutroFinished) == 0x000010, "Wrong size on TedCommandCompoundMoviePlayer_OnFrameOutroFinished");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnFrameOutroFinished, InWidget) == 0x000000, "Member 'TedCommandCompoundMoviePlayer_OnFrameOutroFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnFrameOutroFinished, InSource) == 0x000008, "Member 'TedCommandCompoundMoviePlayer_OnFrameOutroFinished::InSource' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayer.OnMainMovieFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCommandCompoundMoviePlayer_OnMainMovieFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayer_OnMainMovieFinished) == 0x000008, "Wrong alignment on TedCommandCompoundMoviePlayer_OnMainMovieFinished");
static_assert(sizeof(TedCommandCompoundMoviePlayer_OnMainMovieFinished) == 0x000010, "Wrong size on TedCommandCompoundMoviePlayer_OnMainMovieFinished");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnMainMovieFinished, InWidget) == 0x000000, "Member 'TedCommandCompoundMoviePlayer_OnMainMovieFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCommandCompoundMoviePlayer_OnMainMovieFinished, InSource) == 0x000008, "Member 'TedCommandCompoundMoviePlayer_OnMainMovieFinished::InSource' has a wrong offset!");

// Function Tempest.TedCommandCompoundMoviePlayer.ShouldMovieLoop
// 0x0001 (0x0001 - 0x0000)
struct TedCommandCompoundMoviePlayer_ShouldMovieLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandCompoundMoviePlayer_ShouldMovieLoop) == 0x000001, "Wrong alignment on TedCommandCompoundMoviePlayer_ShouldMovieLoop");
static_assert(sizeof(TedCommandCompoundMoviePlayer_ShouldMovieLoop) == 0x000001, "Wrong size on TedCommandCompoundMoviePlayer_ShouldMovieLoop");
static_assert(offsetof(TedCommandCompoundMoviePlayer_ShouldMovieLoop, ReturnValue) == 0x000000, "Member 'TedCommandCompoundMoviePlayer_ShouldMovieLoop::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_AirDrop.CreateAirDropCommandData
// 0x0128 (0x0128 - 0x0000)
struct TedPlayerCommand_AirDrop_CreateAirDropCommandData final
{
public:
	TSubclassOf<class UTedPlayerCommand_AirDrop>  CommandClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandDataPayload_AirDrop    Payload;                                           // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x00E0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_AirDrop_CreateAirDropCommandData) == 0x000008, "Wrong alignment on TedPlayerCommand_AirDrop_CreateAirDropCommandData");
static_assert(sizeof(TedPlayerCommand_AirDrop_CreateAirDropCommandData) == 0x000128, "Wrong size on TedPlayerCommand_AirDrop_CreateAirDropCommandData");
static_assert(offsetof(TedPlayerCommand_AirDrop_CreateAirDropCommandData, CommandClass) == 0x000000, "Member 'TedPlayerCommand_AirDrop_CreateAirDropCommandData::CommandClass' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_AirDrop_CreateAirDropCommandData, Payload) == 0x000008, "Member 'TedPlayerCommand_AirDrop_CreateAirDropCommandData::Payload' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_AirDrop_CreateAirDropCommandData, ReturnValue) == 0x0000E0, "Member 'TedPlayerCommand_AirDrop_CreateAirDropCommandData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_AirDropVolume.CreateAirDropVolumeCommandData
// 0x0128 (0x0128 - 0x0000)
struct TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData final
{
public:
	TSubclassOf<class UTedPlayerCommand_AirDrop>  CommandClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandDataPayload_AirDrop    Payload;                                           // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x00E0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData) == 0x000008, "Wrong alignment on TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData");
static_assert(sizeof(TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData) == 0x000128, "Wrong size on TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData");
static_assert(offsetof(TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData, CommandClass) == 0x000000, "Member 'TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData::CommandClass' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData, Payload) == 0x000008, "Member 'TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData::Payload' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData, ReturnValue) == 0x0000E0, "Member 'TedPlayerCommand_AirDropVolume_CreateAirDropVolumeCommandData::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandPreview_PlaceStructure.UpdateRangeDecalData
// 0x0008 (0x0008 - 0x0000)
struct TedCommandPreview_PlaceStructure_UpdateRangeDecalData final
{
public:
	TSubclassOf<class ATedStructureBase>          StructureClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandPreview_PlaceStructure_UpdateRangeDecalData) == 0x000008, "Wrong alignment on TedCommandPreview_PlaceStructure_UpdateRangeDecalData");
static_assert(sizeof(TedCommandPreview_PlaceStructure_UpdateRangeDecalData) == 0x000008, "Wrong size on TedCommandPreview_PlaceStructure_UpdateRangeDecalData");
static_assert(offsetof(TedCommandPreview_PlaceStructure_UpdateRangeDecalData, StructureClass) == 0x000000, "Member 'TedCommandPreview_PlaceStructure_UpdateRangeDecalData::StructureClass' has a wrong offset!");

// Function Tempest.TedCommandPreview_PlaceStructure.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct TedCommandPreview_PlaceStructure_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandPreview_PlaceStructure_GetSkeletalMesh) == 0x000008, "Wrong alignment on TedCommandPreview_PlaceStructure_GetSkeletalMesh");
static_assert(sizeof(TedCommandPreview_PlaceStructure_GetSkeletalMesh) == 0x000008, "Wrong size on TedCommandPreview_PlaceStructure_GetSkeletalMesh");
static_assert(offsetof(TedCommandPreview_PlaceStructure_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'TedCommandPreview_PlaceStructure_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function Tempest.TedCommandPreview_PlaceStructure.GetStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct TedCommandPreview_PlaceStructure_GetStaticMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCommandPreview_PlaceStructure_GetStaticMesh) == 0x000008, "Wrong alignment on TedCommandPreview_PlaceStructure_GetStaticMesh");
static_assert(sizeof(TedCommandPreview_PlaceStructure_GetStaticMesh) == 0x000008, "Wrong size on TedCommandPreview_PlaceStructure_GetStaticMesh");
static_assert(offsetof(TedCommandPreview_PlaceStructure_GetStaticMesh, ReturnValue) == 0x000000, "Member 'TedCommandPreview_PlaceStructure_GetStaticMesh::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_DoctrineBase.CreateCommandData_ResearchedDoctrine
// 0x0058 (0x0058 - 0x0000)
struct TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine final
{
public:
	TSubclassOf<class UTedCommand>                InCommand;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedDoctrineDefinition*           InResearchedDoctrine;                              // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0010(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine) == 0x000008, "Wrong alignment on TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine");
static_assert(sizeof(TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine) == 0x000058, "Wrong size on TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine");
static_assert(offsetof(TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine, InCommand) == 0x000000, "Member 'TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine::InCommand' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine, InResearchedDoctrine) == 0x000008, "Member 'TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine::InResearchedDoctrine' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine, ReturnValue) == 0x000010, "Member 'TedPlayerCommand_DoctrineBase_CreateCommandData_ResearchedDoctrine::ReturnValue' has a wrong offset!");

// Function Tempest.TedUI_InstancedContent.New
// 0x0110 (0x0110 - 0x0000)
struct TedUI_InstancedContent_New final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InText;                                            // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FText                                   InDescription;                                     // 0x0018(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InIcon;                                            // 0x0030(0x00D0)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class UTedUI_InstancedContent*                ReturnValue;                                       // 0x0100(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUI_InstancedContent_New) == 0x000010, "Wrong alignment on TedUI_InstancedContent_New");
static_assert(sizeof(TedUI_InstancedContent_New) == 0x000110, "Wrong size on TedUI_InstancedContent_New");
static_assert(offsetof(TedUI_InstancedContent_New, InID) == 0x000000, "Member 'TedUI_InstancedContent_New::InID' has a wrong offset!");
static_assert(offsetof(TedUI_InstancedContent_New, InText) == 0x000008, "Member 'TedUI_InstancedContent_New::InText' has a wrong offset!");
static_assert(offsetof(TedUI_InstancedContent_New, InDescription) == 0x000018, "Member 'TedUI_InstancedContent_New::InDescription' has a wrong offset!");
static_assert(offsetof(TedUI_InstancedContent_New, InIcon) == 0x000030, "Member 'TedUI_InstancedContent_New::InIcon' has a wrong offset!");
static_assert(offsetof(TedUI_InstancedContent_New, ReturnValue) == 0x000100, "Member 'TedUI_InstancedContent_New::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.ActivateStateByContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_ActivateStateByContent final
{
public:
	const class UTedUI_InstancedContent*          InContent;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelInstanced_ActivateStateByContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_ActivateStateByContent");
static_assert(sizeof(TedContentPanelInstanced_ActivateStateByContent) == 0x000010, "Wrong size on TedContentPanelInstanced_ActivateStateByContent");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContent, InContent) == 0x000000, "Member 'TedContentPanelInstanced_ActivateStateByContent::InContent' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContent, InState) == 0x000008, "Member 'TedContentPanelInstanced_ActivateStateByContent::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContent, bInActivate) == 0x000009, "Member 'TedContentPanelInstanced_ActivateStateByContent::bInActivate' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.ActivateStateByContentID
// 0x000C (0x000C - 0x0000)
struct TedContentPanelInstanced_ActivateStateByContentID final
{
public:
	class FName                                   InContentID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelInstanced_ActivateStateByContentID) == 0x000004, "Wrong alignment on TedContentPanelInstanced_ActivateStateByContentID");
static_assert(sizeof(TedContentPanelInstanced_ActivateStateByContentID) == 0x00000C, "Wrong size on TedContentPanelInstanced_ActivateStateByContentID");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContentID, InContentID) == 0x000000, "Member 'TedContentPanelInstanced_ActivateStateByContentID::InContentID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContentID, InState) == 0x000008, "Member 'TedContentPanelInstanced_ActivateStateByContentID::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ActivateStateByContentID, bInActivate) == 0x000009, "Member 'TedContentPanelInstanced_ActivateStateByContentID::bInActivate' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.AddToContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_AddToContent final
{
public:
	class UTedUI_InstancedContent*                NewContent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnique;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelInstanced_AddToContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_AddToContent");
static_assert(sizeof(TedContentPanelInstanced_AddToContent) == 0x000010, "Wrong size on TedContentPanelInstanced_AddToContent");
static_assert(offsetof(TedContentPanelInstanced_AddToContent, NewContent) == 0x000000, "Member 'TedContentPanelInstanced_AddToContent::NewContent' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_AddToContent, bUnique) == 0x000008, "Member 'TedContentPanelInstanced_AddToContent::bUnique' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetAllContentMutable
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetAllContentMutable final
{
public:
	TArray<class UTedUI_InstancedContent*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetAllContentMutable) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetAllContentMutable");
static_assert(sizeof(TedContentPanelInstanced_GetAllContentMutable) == 0x000010, "Wrong size on TedContentPanelInstanced_GetAllContentMutable");
static_assert(offsetof(TedContentPanelInstanced_GetAllContentMutable, ReturnValue) == 0x000000, "Member 'TedContentPanelInstanced_GetAllContentMutable::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.RemoveContentById
// 0x0008 (0x0008 - 0x0000)
struct TedContentPanelInstanced_RemoveContentById final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_RemoveContentById) == 0x000004, "Wrong alignment on TedContentPanelInstanced_RemoveContentById");
static_assert(sizeof(TedContentPanelInstanced_RemoveContentById) == 0x000008, "Wrong size on TedContentPanelInstanced_RemoveContentById");
static_assert(offsetof(TedContentPanelInstanced_RemoveContentById, InID) == 0x000000, "Member 'TedContentPanelInstanced_RemoveContentById::InID' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.ReplaceContentDescription
// 0x0018 (0x0018 - 0x0000)
struct TedContentPanelInstanced_ReplaceContentDescription final
{
public:
	class FName                                   InContentID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InNewDescription;                                  // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_ReplaceContentDescription) == 0x000008, "Wrong alignment on TedContentPanelInstanced_ReplaceContentDescription");
static_assert(sizeof(TedContentPanelInstanced_ReplaceContentDescription) == 0x000018, "Wrong size on TedContentPanelInstanced_ReplaceContentDescription");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentDescription, InContentID) == 0x000000, "Member 'TedContentPanelInstanced_ReplaceContentDescription::InContentID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentDescription, InNewDescription) == 0x000008, "Member 'TedContentPanelInstanced_ReplaceContentDescription::InNewDescription' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.ReplaceContentIcon
// 0x00E0 (0x00E0 - 0x0000)
struct TedContentPanelInstanced_ReplaceContentIcon final
{
public:
	class FName                                   InContentID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            InNewIcon;                                         // 0x0010(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_ReplaceContentIcon) == 0x000010, "Wrong alignment on TedContentPanelInstanced_ReplaceContentIcon");
static_assert(sizeof(TedContentPanelInstanced_ReplaceContentIcon) == 0x0000E0, "Wrong size on TedContentPanelInstanced_ReplaceContentIcon");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentIcon, InContentID) == 0x000000, "Member 'TedContentPanelInstanced_ReplaceContentIcon::InContentID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentIcon, InNewIcon) == 0x000010, "Member 'TedContentPanelInstanced_ReplaceContentIcon::InNewIcon' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.ReplaceContentText
// 0x0018 (0x0018 - 0x0000)
struct TedContentPanelInstanced_ReplaceContentText final
{
public:
	class FName                                   InContentID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InNewText;                                         // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_ReplaceContentText) == 0x000008, "Wrong alignment on TedContentPanelInstanced_ReplaceContentText");
static_assert(sizeof(TedContentPanelInstanced_ReplaceContentText) == 0x000018, "Wrong size on TedContentPanelInstanced_ReplaceContentText");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentText, InContentID) == 0x000000, "Member 'TedContentPanelInstanced_ReplaceContentText::InContentID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_ReplaceContentText, InNewText) == 0x000008, "Member 'TedContentPanelInstanced_ReplaceContentText::InNewText' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_SetContent final
{
public:
	TArray<class UTedUI_InstancedContent*>        InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_SetContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_SetContent");
static_assert(sizeof(TedContentPanelInstanced_SetContent) == 0x000010, "Wrong size on TedContentPanelInstanced_SetContent");
static_assert(offsetof(TedContentPanelInstanced_SetContent, InContent) == 0x000000, "Member 'TedContentPanelInstanced_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetAllContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetAllContent final
{
public:
	TArray<class UTedUI_InstancedContent*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetAllContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetAllContent");
static_assert(sizeof(TedContentPanelInstanced_GetAllContent) == 0x000010, "Wrong size on TedContentPanelInstanced_GetAllContent");
static_assert(offsetof(TedContentPanelInstanced_GetAllContent, ReturnValue) == 0x000000, "Member 'TedContentPanelInstanced_GetAllContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedUI_InstancedContent*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetContent");
static_assert(sizeof(TedContentPanelInstanced_GetContent) == 0x000010, "Wrong size on TedContentPanelInstanced_GetContent");
static_assert(offsetof(TedContentPanelInstanced_GetContent, InSlotIndex) == 0x000000, "Member 'TedContentPanelInstanced_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContent, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetContentById
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetContentById final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedUI_InstancedContent*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetContentById) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetContentById");
static_assert(sizeof(TedContentPanelInstanced_GetContentById) == 0x000010, "Wrong size on TedContentPanelInstanced_GetContentById");
static_assert(offsetof(TedContentPanelInstanced_GetContentById, InID) == 0x000000, "Member 'TedContentPanelInstanced_GetContentById::InID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentById, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetContentById::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetContentByState
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetContentByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedUI_InstancedContent*          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetContentByState) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetContentByState");
static_assert(sizeof(TedContentPanelInstanced_GetContentByState) == 0x000010, "Wrong size on TedContentPanelInstanced_GetContentByState");
static_assert(offsetof(TedContentPanelInstanced_GetContentByState, InState) == 0x000000, "Member 'TedContentPanelInstanced_GetContentByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentByState, InIndex) == 0x000004, "Member 'TedContentPanelInstanced_GetContentByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentByState, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetContentByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetContentID
// 0x000C (0x000C - 0x0000)
struct TedContentPanelInstanced_GetContentID final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetContentID) == 0x000004, "Wrong alignment on TedContentPanelInstanced_GetContentID");
static_assert(sizeof(TedContentPanelInstanced_GetContentID) == 0x00000C, "Wrong size on TedContentPanelInstanced_GetContentID");
static_assert(offsetof(TedContentPanelInstanced_GetContentID, InSlotIndex) == 0x000000, "Member 'TedContentPanelInstanced_GetContentID::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentID, ReturnValue) == 0x000004, "Member 'TedContentPanelInstanced_GetContentID::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetContentIDByState
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetContentIDByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetContentIDByState) == 0x000004, "Wrong alignment on TedContentPanelInstanced_GetContentIDByState");
static_assert(sizeof(TedContentPanelInstanced_GetContentIDByState) == 0x000010, "Wrong size on TedContentPanelInstanced_GetContentIDByState");
static_assert(offsetof(TedContentPanelInstanced_GetContentIDByState, InState) == 0x000000, "Member 'TedContentPanelInstanced_GetContentIDByState::InState' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentIDByState, InIndex) == 0x000004, "Member 'TedContentPanelInstanced_GetContentIDByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetContentIDByState, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetContentIDByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetSlotIndexByContent
// 0x0010 (0x0010 - 0x0000)
struct TedContentPanelInstanced_GetSlotIndexByContent final
{
public:
	const class UTedUI_InstancedContent*          InContent;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedContentPanelInstanced_GetSlotIndexByContent) == 0x000008, "Wrong alignment on TedContentPanelInstanced_GetSlotIndexByContent");
static_assert(sizeof(TedContentPanelInstanced_GetSlotIndexByContent) == 0x000010, "Wrong size on TedContentPanelInstanced_GetSlotIndexByContent");
static_assert(offsetof(TedContentPanelInstanced_GetSlotIndexByContent, InContent) == 0x000000, "Member 'TedContentPanelInstanced_GetSlotIndexByContent::InContent' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetSlotIndexByContent, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetSlotIndexByContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedContentPanelInstanced.GetSlotIndexByContentID
// 0x000C (0x000C - 0x0000)
struct TedContentPanelInstanced_GetSlotIndexByContentID final
{
public:
	class FName                                   InContentID;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedContentPanelInstanced_GetSlotIndexByContentID) == 0x000004, "Wrong alignment on TedContentPanelInstanced_GetSlotIndexByContentID");
static_assert(sizeof(TedContentPanelInstanced_GetSlotIndexByContentID) == 0x00000C, "Wrong size on TedContentPanelInstanced_GetSlotIndexByContentID");
static_assert(offsetof(TedContentPanelInstanced_GetSlotIndexByContentID, InContentID) == 0x000000, "Member 'TedContentPanelInstanced_GetSlotIndexByContentID::InContentID' has a wrong offset!");
static_assert(offsetof(TedContentPanelInstanced_GetSlotIndexByContentID, ReturnValue) == 0x000008, "Member 'TedContentPanelInstanced_GetSlotIndexByContentID::ReturnValue' has a wrong offset!");

// Function Tempest.TedCredits.OnMovieFinished
// 0x0010 (0x0010 - 0x0000)
struct TedCredits_OnMovieFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedCredits_OnMovieFinished) == 0x000008, "Wrong alignment on TedCredits_OnMovieFinished");
static_assert(sizeof(TedCredits_OnMovieFinished) == 0x000010, "Wrong size on TedCredits_OnMovieFinished");
static_assert(offsetof(TedCredits_OnMovieFinished, InWidget) == 0x000000, "Member 'TedCredits_OnMovieFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedCredits_OnMovieFinished, InSource) == 0x000008, "Member 'TedCredits_OnMovieFinished::InSource' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Volume_ActorCounter.OnVolumeBeginOverlap_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler");
static_assert(sizeof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler) == 0x000010, "Wrong size on TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler");
static_assert(offsetof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler, OverlappedActor) == 0x000000, "Member 'TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler, OtherActor) == 0x000008, "Member 'TedObjectiveCondition_Volume_ActorCounter_OnVolumeBeginOverlap_Handler::OtherActor' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Volume_ActorCounter.OnVolumeEndOverlap_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler");
static_assert(sizeof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler) == 0x000010, "Wrong size on TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler");
static_assert(offsetof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler, OverlappedActor) == 0x000000, "Member 'TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler, OtherActor) == 0x000008, "Member 'TedObjectiveCondition_Volume_ActorCounter_OnVolumeEndOverlap_Handler::OtherActor' has a wrong offset!");

// Function Tempest.TedCustomUpgradeCondition.K2_IsMet
// 0x0048 (0x0048 - 0x0000)
struct TedCustomUpgradeCondition_K2_IsMet final
{
public:
	struct FTedActiveUpgrade                      InActiveUpgrade;                                   // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedCustomUpgradeCondition_K2_IsMet) == 0x000008, "Wrong alignment on TedCustomUpgradeCondition_K2_IsMet");
static_assert(sizeof(TedCustomUpgradeCondition_K2_IsMet) == 0x000048, "Wrong size on TedCustomUpgradeCondition_K2_IsMet");
static_assert(offsetof(TedCustomUpgradeCondition_K2_IsMet, InActiveUpgrade) == 0x000000, "Member 'TedCustomUpgradeCondition_K2_IsMet::InActiveUpgrade' has a wrong offset!");
static_assert(offsetof(TedCustomUpgradeCondition_K2_IsMet, ReturnValue) == 0x000040, "Member 'TedCustomUpgradeCondition_K2_IsMet::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgressWidget.K2_OnDisplayProgress
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveProgressWidget_K2_OnDisplayProgress final
{
public:
	const class UTedObjectiveProgress*            InProgress;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgressWidget_K2_OnDisplayProgress) == 0x000008, "Wrong alignment on TedObjectiveProgressWidget_K2_OnDisplayProgress");
static_assert(sizeof(TedObjectiveProgressWidget_K2_OnDisplayProgress) == 0x000008, "Wrong size on TedObjectiveProgressWidget_K2_OnDisplayProgress");
static_assert(offsetof(TedObjectiveProgressWidget_K2_OnDisplayProgress, InProgress) == 0x000000, "Member 'TedObjectiveProgressWidget_K2_OnDisplayProgress::InProgress' has a wrong offset!");

// Function Tempest.TedObjectiveSettings.AreAnnouncementsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSettings_AreAnnouncementsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSettings_AreAnnouncementsEnabled) == 0x000001, "Wrong alignment on TedObjectiveSettings_AreAnnouncementsEnabled");
static_assert(sizeof(TedObjectiveSettings_AreAnnouncementsEnabled) == 0x000001, "Wrong size on TedObjectiveSettings_AreAnnouncementsEnabled");
static_assert(offsetof(TedObjectiveSettings_AreAnnouncementsEnabled, ReturnValue) == 0x000000, "Member 'TedObjectiveSettings_AreAnnouncementsEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSettings.GetAnnouncement
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveSettings_GetAnnouncement final
{
public:
	ETedObjectiveAnnouncementType                 InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPrimary;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedAnnouncement>           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSettings_GetAnnouncement) == 0x000008, "Wrong alignment on TedObjectiveSettings_GetAnnouncement");
static_assert(sizeof(TedObjectiveSettings_GetAnnouncement) == 0x000010, "Wrong size on TedObjectiveSettings_GetAnnouncement");
static_assert(offsetof(TedObjectiveSettings_GetAnnouncement, InType) == 0x000000, "Member 'TedObjectiveSettings_GetAnnouncement::InType' has a wrong offset!");
static_assert(offsetof(TedObjectiveSettings_GetAnnouncement, bInPrimary) == 0x000001, "Member 'TedObjectiveSettings_GetAnnouncement::bInPrimary' has a wrong offset!");
static_assert(offsetof(TedObjectiveSettings_GetAnnouncement, ReturnValue) == 0x000008, "Member 'TedObjectiveSettings_GetAnnouncement::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSettings.IsAnnouncementEnabled
// 0x0002 (0x0002 - 0x0000)
struct TedObjectiveSettings_IsAnnouncementEnabled final
{
public:
	ETedObjectiveAnnouncementType                 InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSettings_IsAnnouncementEnabled) == 0x000001, "Wrong alignment on TedObjectiveSettings_IsAnnouncementEnabled");
static_assert(sizeof(TedObjectiveSettings_IsAnnouncementEnabled) == 0x000002, "Wrong size on TedObjectiveSettings_IsAnnouncementEnabled");
static_assert(offsetof(TedObjectiveSettings_IsAnnouncementEnabled, InType) == 0x000000, "Member 'TedObjectiveSettings_IsAnnouncementEnabled::InType' has a wrong offset!");
static_assert(offsetof(TedObjectiveSettings_IsAnnouncementEnabled, ReturnValue) == 0x000001, "Member 'TedObjectiveSettings_IsAnnouncementEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionPanel_Weapon.SetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionPanel_Weapon_SetContextPawn final
{
public:
	class ATedPawn*                               InContext;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_Weapon_SetContextPawn) == 0x000008, "Wrong alignment on TedDefinitionPanel_Weapon_SetContextPawn");
static_assert(sizeof(TedDefinitionPanel_Weapon_SetContextPawn) == 0x000008, "Wrong size on TedDefinitionPanel_Weapon_SetContextPawn");
static_assert(offsetof(TedDefinitionPanel_Weapon_SetContextPawn, InContext) == 0x000000, "Member 'TedDefinitionPanel_Weapon_SetContextPawn::InContext' has a wrong offset!");

// Function Tempest.TedDefinitionPanel_Weapon.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionPanel_Weapon_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionPanel_Weapon_GetContextPawn) == 0x000008, "Wrong alignment on TedDefinitionPanel_Weapon_GetContextPawn");
static_assert(sizeof(TedDefinitionPanel_Weapon_GetContextPawn) == 0x000008, "Wrong size on TedDefinitionPanel_Weapon_GetContextPawn");
static_assert(offsetof(TedDefinitionPanel_Weapon_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedDefinitionPanel_Weapon_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.OnContextPawnAmmoChange
// 0x0018 (0x0018 - 0x0000)
struct TedDefinitionSlot_Weapon_OnContextPawnAmmoChange final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedWeapon>                 WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmmoCount;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDefinitionSlot_Weapon_OnContextPawnAmmoChange) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_OnContextPawnAmmoChange");
static_assert(sizeof(TedDefinitionSlot_Weapon_OnContextPawnAmmoChange) == 0x000018, "Wrong size on TedDefinitionSlot_Weapon_OnContextPawnAmmoChange");
static_assert(offsetof(TedDefinitionSlot_Weapon_OnContextPawnAmmoChange, Pawn) == 0x000000, "Member 'TedDefinitionSlot_Weapon_OnContextPawnAmmoChange::Pawn' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_OnContextPawnAmmoChange, WeaponClass) == 0x000008, "Member 'TedDefinitionSlot_Weapon_OnContextPawnAmmoChange::WeaponClass' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_OnContextPawnAmmoChange, AmmoCount) == 0x000010, "Member 'TedDefinitionSlot_Weapon_OnContextPawnAmmoChange::AmmoCount' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct TedDefinitionSlot_Weapon_GetAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetAmmoCount) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetAmmoCount");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetAmmoCount) == 0x000004, "Wrong size on TedDefinitionSlot_Weapon_GetAmmoCount");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAmmoCount, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetAmmoCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetAttackRange
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetAttackRange final
{
public:
	bool                                          bInBaseOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetAttackRange) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetAttackRange");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetAttackRange) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetAttackRange");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackRange, bInBaseOnly) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetAttackRange::bInBaseOnly' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackRange, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetAttackRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetAttackRangeModifier
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetAttackRangeModifier final
{
public:
	float                                         InBaseValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetAttackRangeModifier) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetAttackRangeModifier");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetAttackRangeModifier) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetAttackRangeModifier");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackRangeModifier, InBaseValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetAttackRangeModifier::InBaseValue' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackRangeModifier, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetAttackRangeModifier::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetAttackSpeed
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetAttackSpeed final
{
public:
	bool                                          bInBaseOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetAttackSpeed) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetAttackSpeed");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetAttackSpeed) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetAttackSpeed");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackSpeed, bInBaseOnly) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetAttackSpeed::bInBaseOnly' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackSpeed, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetAttackSpeed::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetAttackSpeedModifier
// 0x0004 (0x0004 - 0x0000)
struct TedDefinitionSlot_Weapon_GetAttackSpeedModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetAttackSpeedModifier) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetAttackSpeedModifier");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetAttackSpeedModifier) == 0x000004, "Wrong size on TedDefinitionSlot_Weapon_GetAttackSpeedModifier");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetAttackSpeedModifier, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetAttackSpeedModifier::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetContextPawn) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_GetContextPawn");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetContextPawn) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetContextPawn");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetDamage
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetDamage final
{
public:
	bool                                          bInBaseOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetDamage) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetDamage");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetDamage) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetDamage");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetDamage, bInBaseOnly) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetDamage::bInBaseOnly' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetDamage, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetDamageType
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionSlot_Weapon_GetDamageType final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetDamageType) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_GetDamageType");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetDamageType) == 0x000010, "Wrong size on TedDefinitionSlot_Weapon_GetDamageType");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetDamageType, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetDamageType::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetDamageWithModifiers
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetDamageWithModifiers final
{
public:
	float                                         InBaseValue;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetDamageWithModifiers) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetDamageWithModifiers");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetDamageWithModifiers) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetDamageWithModifiers");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetDamageWithModifiers, InBaseValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetDamageWithModifiers::InBaseValue' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetDamageWithModifiers, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetDamageWithModifiers::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetRechargesAutomatically
// 0x0001 (0x0001 - 0x0000)
struct TedDefinitionSlot_Weapon_GetRechargesAutomatically final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetRechargesAutomatically) == 0x000001, "Wrong alignment on TedDefinitionSlot_Weapon_GetRechargesAutomatically");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetRechargesAutomatically) == 0x000001, "Wrong size on TedDefinitionSlot_Weapon_GetRechargesAutomatically");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetRechargesAutomatically, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetRechargesAutomatically::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetRechargeTime
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetRechargeTime final
{
public:
	bool                                          bInBaseOnly;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetRechargeTime) == 0x000004, "Wrong alignment on TedDefinitionSlot_Weapon_GetRechargeTime");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetRechargeTime) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetRechargeTime");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetRechargeTime, bInBaseOnly) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetRechargeTime::bInBaseOnly' has a wrong offset!");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetRechargeTime, ReturnValue) == 0x000004, "Member 'TedDefinitionSlot_Weapon_GetRechargeTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetTargetDomains
// 0x0020 (0x0020 - 0x0000)
struct TedDefinitionSlot_Weapon_GetTargetDomains final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetTargetDomains) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_GetTargetDomains");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetTargetDomains) == 0x000020, "Wrong size on TedDefinitionSlot_Weapon_GetTargetDomains");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetTargetDomains, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetTargetDomains::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetTargetDomainsText
// 0x0010 (0x0010 - 0x0000)
struct TedDefinitionSlot_Weapon_GetTargetDomainsText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetTargetDomainsText) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_GetTargetDomainsText");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetTargetDomainsText) == 0x000010, "Wrong size on TedDefinitionSlot_Weapon_GetTargetDomainsText");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetTargetDomainsText, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetTargetDomainsText::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetUsesAmmo
// 0x0001 (0x0001 - 0x0000)
struct TedDefinitionSlot_Weapon_GetUsesAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetUsesAmmo) == 0x000001, "Wrong alignment on TedDefinitionSlot_Weapon_GetUsesAmmo");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetUsesAmmo) == 0x000001, "Wrong size on TedDefinitionSlot_Weapon_GetUsesAmmo");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetUsesAmmo, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetUsesAmmo::ReturnValue' has a wrong offset!");

// Function Tempest.TedDefinitionSlot_Weapon.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct TedDefinitionSlot_Weapon_GetWeapon final
{
public:
	const class UTedWeapon*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDefinitionSlot_Weapon_GetWeapon) == 0x000008, "Wrong alignment on TedDefinitionSlot_Weapon_GetWeapon");
static_assert(sizeof(TedDefinitionSlot_Weapon_GetWeapon) == 0x000008, "Wrong size on TedDefinitionSlot_Weapon_GetWeapon");
static_assert(offsetof(TedDefinitionSlot_Weapon_GetWeapon, ReturnValue) == 0x000000, "Member 'TedDefinitionSlot_Weapon_GetWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDifficultySettings.GetDefaultAttackWaveNames
// 0x0010 (0x0010 - 0x0000)
struct TedDifficultySettings_GetDefaultAttackWaveNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDifficultySettings_GetDefaultAttackWaveNames) == 0x000008, "Wrong alignment on TedDifficultySettings_GetDefaultAttackWaveNames");
static_assert(sizeof(TedDifficultySettings_GetDefaultAttackWaveNames) == 0x000010, "Wrong size on TedDifficultySettings_GetDefaultAttackWaveNames");
static_assert(offsetof(TedDifficultySettings_GetDefaultAttackWaveNames, ReturnValue) == 0x000000, "Member 'TedDifficultySettings_GetDefaultAttackWaveNames::ReturnValue' has a wrong offset!");

// Function Tempest.TedDifficultySettings.GetDefaultUnitsSpawnNames
// 0x0010 (0x0010 - 0x0000)
struct TedDifficultySettings_GetDefaultUnitsSpawnNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDifficultySettings_GetDefaultUnitsSpawnNames) == 0x000008, "Wrong alignment on TedDifficultySettings_GetDefaultUnitsSpawnNames");
static_assert(sizeof(TedDifficultySettings_GetDefaultUnitsSpawnNames) == 0x000010, "Wrong size on TedDifficultySettings_GetDefaultUnitsSpawnNames");
static_assert(offsetof(TedDifficultySettings_GetDefaultUnitsSpawnNames, ReturnValue) == 0x000000, "Member 'TedDifficultySettings_GetDefaultUnitsSpawnNames::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnUpgradesPanel.GetUpgradeProgress
// 0x0010 (0x0010 - 0x0000)
struct TedPawnUpgradesPanel_GetUpgradeProgress final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutProgressAlpha;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDuration;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutIsRunning;                                     // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnUpgradesPanel_GetUpgradeProgress) == 0x000004, "Wrong alignment on TedPawnUpgradesPanel_GetUpgradeProgress");
static_assert(sizeof(TedPawnUpgradesPanel_GetUpgradeProgress) == 0x000010, "Wrong size on TedPawnUpgradesPanel_GetUpgradeProgress");
static_assert(offsetof(TedPawnUpgradesPanel_GetUpgradeProgress, InSlotIndex) == 0x000000, "Member 'TedPawnUpgradesPanel_GetUpgradeProgress::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedPawnUpgradesPanel_GetUpgradeProgress, OutProgressAlpha) == 0x000004, "Member 'TedPawnUpgradesPanel_GetUpgradeProgress::OutProgressAlpha' has a wrong offset!");
static_assert(offsetof(TedPawnUpgradesPanel_GetUpgradeProgress, OutDuration) == 0x000008, "Member 'TedPawnUpgradesPanel_GetUpgradeProgress::OutDuration' has a wrong offset!");
static_assert(offsetof(TedPawnUpgradesPanel_GetUpgradeProgress, bOutIsRunning) == 0x00000C, "Member 'TedPawnUpgradesPanel_GetUpgradeProgress::bOutIsRunning' has a wrong offset!");
static_assert(offsetof(TedPawnUpgradesPanel_GetUpgradeProgress, ReturnValue) == 0x00000D, "Member 'TedPawnUpgradesPanel_GetUpgradeProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrineSlot_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetDescription) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetDescription");
static_assert(sizeof(TedDoctrineSlot_GetDescription) == 0x000010, "Wrong size on TedDoctrineSlot_GetDescription");
static_assert(offsetof(TedDoctrineSlot_GetDescription, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetDoctrinePanel
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_GetDoctrinePanel final
{
public:
	class UTedDoctrinePanel*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetDoctrinePanel) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetDoctrinePanel");
static_assert(sizeof(TedDoctrineSlot_GetDoctrinePanel) == 0x000008, "Wrong size on TedDoctrineSlot_GetDoctrinePanel");
static_assert(offsetof(TedDoctrineSlot_GetDoctrinePanel, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetDoctrinePanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetIcon) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetIcon");
static_assert(sizeof(TedDoctrineSlot_GetIcon) == 0x000008, "Wrong size on TedDoctrineSlot_GetIcon");
static_assert(offsetof(TedDoctrineSlot_GetIcon, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetNextSlot
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_GetNextSlot final
{
public:
	class UTedDoctrineSlot*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetNextSlot) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetNextSlot");
static_assert(sizeof(TedDoctrineSlot_GetNextSlot) == 0x000008, "Wrong size on TedDoctrineSlot_GetNextSlot");
static_assert(offsetof(TedDoctrineSlot_GetNextSlot, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetNextSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetOnSellRefundedCredits
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlot_GetOnSellRefundedCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetOnSellRefundedCredits) == 0x000004, "Wrong alignment on TedDoctrineSlot_GetOnSellRefundedCredits");
static_assert(sizeof(TedDoctrineSlot_GetOnSellRefundedCredits) == 0x000004, "Wrong size on TedDoctrineSlot_GetOnSellRefundedCredits");
static_assert(offsetof(TedDoctrineSlot_GetOnSellRefundedCredits, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetOnSellRefundedCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetPreviousSlot
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_GetPreviousSlot final
{
public:
	class UTedDoctrineSlot*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetPreviousSlot) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetPreviousSlot");
static_assert(sizeof(TedDoctrineSlot_GetPreviousSlot) == 0x000008, "Wrong size on TedDoctrineSlot_GetPreviousSlot");
static_assert(offsetof(TedDoctrineSlot_GetPreviousSlot, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetPreviousSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetResearchCostCredits
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlot_GetResearchCostCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetResearchCostCredits) == 0x000004, "Wrong alignment on TedDoctrineSlot_GetResearchCostCredits");
static_assert(sizeof(TedDoctrineSlot_GetResearchCostCredits) == 0x000004, "Wrong size on TedDoctrineSlot_GetResearchCostCredits");
static_assert(offsetof(TedDoctrineSlot_GetResearchCostCredits, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetResearchCostCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetResearchTime
// 0x0004 (0x0004 - 0x0000)
struct TedDoctrineSlot_GetResearchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetResearchTime) == 0x000004, "Wrong alignment on TedDoctrineSlot_GetResearchTime");
static_assert(sizeof(TedDoctrineSlot_GetResearchTime) == 0x000004, "Wrong size on TedDoctrineSlot_GetResearchTime");
static_assert(offsetof(TedDoctrineSlot_GetResearchTime, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetResearchTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedDoctrineSlot_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_GetTitle) == 0x000008, "Wrong alignment on TedDoctrineSlot_GetTitle");
static_assert(sizeof(TedDoctrineSlot_GetTitle) == 0x000010, "Wrong size on TedDoctrineSlot_GetTitle");
static_assert(offsetof(TedDoctrineSlot_GetTitle, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot.IsLast
// 0x0001 (0x0001 - 0x0000)
struct TedDoctrineSlot_IsLast final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_IsLast) == 0x000001, "Wrong alignment on TedDoctrineSlot_IsLast");
static_assert(sizeof(TedDoctrineSlot_IsLast) == 0x000001, "Wrong size on TedDoctrineSlot_IsLast");
static_assert(offsetof(TedDoctrineSlot_IsLast, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_IsLast::ReturnValue' has a wrong offset!");

// Function Tempest.TedPerfStatWidget.GetStatDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedPerfStatWidget_GetStatDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPerfStatWidget_GetStatDisplayName) == 0x000008, "Wrong alignment on TedPerfStatWidget_GetStatDisplayName");
static_assert(sizeof(TedPerfStatWidget_GetStatDisplayName) == 0x000010, "Wrong size on TedPerfStatWidget_GetStatDisplayName");
static_assert(offsetof(TedPerfStatWidget_GetStatDisplayName, ReturnValue) == 0x000000, "Member 'TedPerfStatWidget_GetStatDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPerfStatWidget.GetStatType
// 0x0001 (0x0001 - 0x0000)
struct TedPerfStatWidget_GetStatType final
{
public:
	ETedDisplayablePerformanceStat                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPerfStatWidget_GetStatType) == 0x000001, "Wrong alignment on TedPerfStatWidget_GetStatType");
static_assert(sizeof(TedPerfStatWidget_GetStatType) == 0x000001, "Wrong size on TedPerfStatWidget_GetStatType");
static_assert(offsetof(TedPerfStatWidget_GetStatType, ReturnValue) == 0x000000, "Member 'TedPerfStatWidget_GetStatType::ReturnValue' has a wrong offset!");

// Function Tempest.TedPerfStatWidget.GetStatValue
// 0x0008 (0x0008 - 0x0000)
struct TedPerfStatWidget_GetStatValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPerfStatWidget_GetStatValue) == 0x000008, "Wrong alignment on TedPerfStatWidget_GetStatValue");
static_assert(sizeof(TedPerfStatWidget_GetStatValue) == 0x000008, "Wrong size on TedPerfStatWidget_GetStatValue");
static_assert(offsetof(TedPerfStatWidget_GetStatValue, ReturnValue) == 0x000000, "Member 'TedPerfStatWidget_GetStatValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedPerfStatWidget.GetStatValueText
// 0x0010 (0x0010 - 0x0000)
struct TedPerfStatWidget_GetStatValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPerfStatWidget_GetStatValueText) == 0x000008, "Wrong alignment on TedPerfStatWidget_GetStatValueText");
static_assert(sizeof(TedPerfStatWidget_GetStatValueText) == 0x000010, "Wrong size on TedPerfStatWidget_GetStatValueText");
static_assert(offsetof(TedPerfStatWidget_GetStatValueText, ReturnValue) == 0x000000, "Member 'TedPerfStatWidget_GetStatValueText::ReturnValue' has a wrong offset!");

// Function Tempest.TedDoctrineSlot_HUD.OnRefresh_Progress
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_HUD_OnRefresh_Progress final
{
public:
	bool                                          bInPaused;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInRunning;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsQueued;                                       // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InProgress;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_HUD_OnRefresh_Progress) == 0x000004, "Wrong alignment on TedDoctrineSlot_HUD_OnRefresh_Progress");
static_assert(sizeof(TedDoctrineSlot_HUD_OnRefresh_Progress) == 0x000008, "Wrong size on TedDoctrineSlot_HUD_OnRefresh_Progress");
static_assert(offsetof(TedDoctrineSlot_HUD_OnRefresh_Progress, bInPaused) == 0x000000, "Member 'TedDoctrineSlot_HUD_OnRefresh_Progress::bInPaused' has a wrong offset!");
static_assert(offsetof(TedDoctrineSlot_HUD_OnRefresh_Progress, bInRunning) == 0x000001, "Member 'TedDoctrineSlot_HUD_OnRefresh_Progress::bInRunning' has a wrong offset!");
static_assert(offsetof(TedDoctrineSlot_HUD_OnRefresh_Progress, bInIsQueued) == 0x000002, "Member 'TedDoctrineSlot_HUD_OnRefresh_Progress::bInIsQueued' has a wrong offset!");
static_assert(offsetof(TedDoctrineSlot_HUD_OnRefresh_Progress, InProgress) == 0x000004, "Member 'TedDoctrineSlot_HUD_OnRefresh_Progress::InProgress' has a wrong offset!");

// Function Tempest.TedDoctrineSlot_HUD.GetDoctrinePanel_HUD
// 0x0008 (0x0008 - 0x0000)
struct TedDoctrineSlot_HUD_GetDoctrinePanel_HUD final
{
public:
	class UTedDoctrinePanel_HUD*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDoctrineSlot_HUD_GetDoctrinePanel_HUD) == 0x000008, "Wrong alignment on TedDoctrineSlot_HUD_GetDoctrinePanel_HUD");
static_assert(sizeof(TedDoctrineSlot_HUD_GetDoctrinePanel_HUD) == 0x000008, "Wrong size on TedDoctrineSlot_HUD_GetDoctrinePanel_HUD");
static_assert(offsetof(TedDoctrineSlot_HUD_GetDoctrinePanel_HUD, ReturnValue) == 0x000000, "Member 'TedDoctrineSlot_HUD_GetDoctrinePanel_HUD::ReturnValue' has a wrong offset!");

// Function Tempest.TedDrone.GetDroneOwner
// 0x0008 (0x0008 - 0x0000)
struct TedDrone_GetDroneOwner final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDrone_GetDroneOwner) == 0x000008, "Wrong alignment on TedDrone_GetDroneOwner");
static_assert(sizeof(TedDrone_GetDroneOwner) == 0x000008, "Wrong size on TedDrone_GetDroneOwner");
static_assert(offsetof(TedDrone_GetDroneOwner, ReturnValue) == 0x000000, "Member 'TedDrone_GetDroneOwner::ReturnValue' has a wrong offset!");

// Function Tempest.AirDropBlueprintNode.RequestAirDrop
// 0x0078 (0x0078 - 0x0000)
struct AirDropBlueprintNode_RequestAirDrop final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirDropInputs                                In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirDropOutputs                               Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class ATargetPoint*>                   PlaneRoute;                                        // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATedUnitSpawner*>                Spawners;                                          // 0x0058(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   DroppedUnits;                                      // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirDropBlueprintNode_RequestAirDrop) == 0x000008, "Wrong alignment on AirDropBlueprintNode_RequestAirDrop");
static_assert(sizeof(AirDropBlueprintNode_RequestAirDrop) == 0x000078, "Wrong size on AirDropBlueprintNode_RequestAirDrop");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, InWorldContext) == 0x000000, "Member 'AirDropBlueprintNode_RequestAirDrop::InWorldContext' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, In) == 0x000008, "Member 'AirDropBlueprintNode_RequestAirDrop::In' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, Out) == 0x000009, "Member 'AirDropBlueprintNode_RequestAirDrop::Out' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, LatentInfo) == 0x000010, "Member 'AirDropBlueprintNode_RequestAirDrop::LatentInfo' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, SaveInfo) == 0x000028, "Member 'AirDropBlueprintNode_RequestAirDrop::SaveInfo' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, PlaneRoute) == 0x000048, "Member 'AirDropBlueprintNode_RequestAirDrop::PlaneRoute' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, Spawners) == 0x000058, "Member 'AirDropBlueprintNode_RequestAirDrop::Spawners' has a wrong offset!");
static_assert(offsetof(AirDropBlueprintNode_RequestAirDrop, DroppedUnits) == 0x000068, "Member 'AirDropBlueprintNode_RequestAirDrop::DroppedUnits' has a wrong offset!");

// Function Tempest.TedInputMappingPanel.GetContentDisplayText
// 0x0018 (0x0018 - 0x0000)
struct TedInputMappingPanel_GetContentDisplayText final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputMappingPanel_GetContentDisplayText) == 0x000008, "Wrong alignment on TedInputMappingPanel_GetContentDisplayText");
static_assert(sizeof(TedInputMappingPanel_GetContentDisplayText) == 0x000018, "Wrong size on TedInputMappingPanel_GetContentDisplayText");
static_assert(offsetof(TedInputMappingPanel_GetContentDisplayText, InSlotIndex) == 0x000000, "Member 'TedInputMappingPanel_GetContentDisplayText::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedInputMappingPanel_GetContentDisplayText, ReturnValue) == 0x000008, "Member 'TedInputMappingPanel_GetContentDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.SpawnInVolumeBlueprintNode.RequestSpawnInVolume
// 0x0060 (0x0060 - 0x0000)
struct SpawnInVolumeBlueprintNode_RequestSpawnInVolume final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnInVolumeInputs                          In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnInVolumeOutputs                         Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class ATedUnitSpawner_Volume*                 Spawner;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   SpawnedUnits;                                      // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume) == 0x000008, "Wrong alignment on SpawnInVolumeBlueprintNode_RequestSpawnInVolume");
static_assert(sizeof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume) == 0x000060, "Wrong size on SpawnInVolumeBlueprintNode_RequestSpawnInVolume");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, InWorldContext) == 0x000000, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::InWorldContext' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, In) == 0x000008, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::In' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, Out) == 0x000009, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::Out' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, LatentInfo) == 0x000010, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::LatentInfo' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, SaveInfo) == 0x000028, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::SaveInfo' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, Spawner) == 0x000048, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::Spawner' has a wrong offset!");
static_assert(offsetof(SpawnInVolumeBlueprintNode_RequestSpawnInVolume, SpawnedUnits) == 0x000050, "Member 'SpawnInVolumeBlueprintNode_RequestSpawnInVolume::SpawnedUnits' has a wrong offset!");

// Function Tempest.TedDropDownOld.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct TedDropDownOld_SetOptions final
{
public:
	TArray<class FText>                           InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDownOld_SetOptions) == 0x000008, "Wrong alignment on TedDropDownOld_SetOptions");
static_assert(sizeof(TedDropDownOld_SetOptions) == 0x000010, "Wrong size on TedDropDownOld_SetOptions");
static_assert(offsetof(TedDropDownOld_SetOptions, InOptions) == 0x000000, "Member 'TedDropDownOld_SetOptions::InOptions' has a wrong offset!");

// Function Tempest.TedDropDownOld.GetSelectedOptionIndex
// 0x0004 (0x0004 - 0x0000)
struct TedDropDownOld_GetSelectedOptionIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDropDownOld_GetSelectedOptionIndex) == 0x000004, "Wrong alignment on TedDropDownOld_GetSelectedOptionIndex");
static_assert(sizeof(TedDropDownOld_GetSelectedOptionIndex) == 0x000004, "Wrong size on TedDropDownOld_GetSelectedOptionIndex");
static_assert(offsetof(TedDropDownOld_GetSelectedOptionIndex, ReturnValue) == 0x000000, "Member 'TedDropDownOld_GetSelectedOptionIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedLeaderboardHeadersPanel.GetAvailableHeaderIDs
// 0x0010 (0x0010 - 0x0000)
struct TedLeaderboardHeadersPanel_GetAvailableHeaderIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardHeadersPanel_GetAvailableHeaderIDs) == 0x000008, "Wrong alignment on TedLeaderboardHeadersPanel_GetAvailableHeaderIDs");
static_assert(sizeof(TedLeaderboardHeadersPanel_GetAvailableHeaderIDs) == 0x000010, "Wrong size on TedLeaderboardHeadersPanel_GetAvailableHeaderIDs");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetAvailableHeaderIDs, ReturnValue) == 0x000000, "Member 'TedLeaderboardHeadersPanel_GetAvailableHeaderIDs::ReturnValue' has a wrong offset!");

// Function Tempest.TedLeaderboardHeadersPanel.GetContent
// 0x0030 (0x0030 - 0x0000)
struct TedLeaderboardHeadersPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedLeaderboardHeaderContent           OutContent;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardHeadersPanel_GetContent) == 0x000008, "Wrong alignment on TedLeaderboardHeadersPanel_GetContent");
static_assert(sizeof(TedLeaderboardHeadersPanel_GetContent) == 0x000030, "Wrong size on TedLeaderboardHeadersPanel_GetContent");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedLeaderboardHeadersPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContent, OutContent) == 0x000008, "Member 'TedLeaderboardHeadersPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContent, ReturnValue) == 0x000028, "Member 'TedLeaderboardHeadersPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedLeaderboardHeadersPanel.GetContentByState
// 0x0030 (0x0030 - 0x0000)
struct TedLeaderboardHeadersPanel_GetContentByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedLeaderboardHeaderContent           OutContent;                                        // 0x0008(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardHeadersPanel_GetContentByState) == 0x000008, "Wrong alignment on TedLeaderboardHeadersPanel_GetContentByState");
static_assert(sizeof(TedLeaderboardHeadersPanel_GetContentByState) == 0x000030, "Wrong size on TedLeaderboardHeadersPanel_GetContentByState");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContentByState, InState) == 0x000000, "Member 'TedLeaderboardHeadersPanel_GetContentByState::InState' has a wrong offset!");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContentByState, InIndex) == 0x000004, "Member 'TedLeaderboardHeadersPanel_GetContentByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContentByState, OutContent) == 0x000008, "Member 'TedLeaderboardHeadersPanel_GetContentByState::OutContent' has a wrong offset!");
static_assert(offsetof(TedLeaderboardHeadersPanel_GetContentByState, ReturnValue) == 0x000028, "Member 'TedLeaderboardHeadersPanel_GetContentByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedDynamicEventForwarder.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct TedDynamicEventForwarder_OnActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDynamicEventForwarder_OnActorBeginOverlap) == 0x000008, "Wrong alignment on TedDynamicEventForwarder_OnActorBeginOverlap");
static_assert(sizeof(TedDynamicEventForwarder_OnActorBeginOverlap) == 0x000010, "Wrong size on TedDynamicEventForwarder_OnActorBeginOverlap");
static_assert(offsetof(TedDynamicEventForwarder_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'TedDynamicEventForwarder_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'TedDynamicEventForwarder_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function Tempest.TedDynamicEventForwarder.OnActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct TedDynamicEventForwarder_OnActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDynamicEventForwarder_OnActorEndOverlap) == 0x000008, "Wrong alignment on TedDynamicEventForwarder_OnActorEndOverlap");
static_assert(sizeof(TedDynamicEventForwarder_OnActorEndOverlap) == 0x000010, "Wrong size on TedDynamicEventForwarder_OnActorEndOverlap");
static_assert(offsetof(TedDynamicEventForwarder_OnActorEndOverlap, OverlappedActor) == 0x000000, "Member 'TedDynamicEventForwarder_OnActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorEndOverlap, OtherActor) == 0x000008, "Member 'TedDynamicEventForwarder_OnActorEndOverlap::OtherActor' has a wrong offset!");

// Function Tempest.TedDynamicEventForwarder.OnActorTakeAnyDamage
// 0x0028 (0x0028 - 0x0000)
struct TedDynamicEventForwarder_OnActorTakeAnyDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedDynamicEventForwarder_OnActorTakeAnyDamage) == 0x000008, "Wrong alignment on TedDynamicEventForwarder_OnActorTakeAnyDamage");
static_assert(sizeof(TedDynamicEventForwarder_OnActorTakeAnyDamage) == 0x000028, "Wrong size on TedDynamicEventForwarder_OnActorTakeAnyDamage");
static_assert(offsetof(TedDynamicEventForwarder_OnActorTakeAnyDamage, DamagedActor) == 0x000000, "Member 'TedDynamicEventForwarder_OnActorTakeAnyDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorTakeAnyDamage, Damage) == 0x000008, "Member 'TedDynamicEventForwarder_OnActorTakeAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorTakeAnyDamage, DamageType) == 0x000010, "Member 'TedDynamicEventForwarder_OnActorTakeAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorTakeAnyDamage, InstigatedBy) == 0x000018, "Member 'TedDynamicEventForwarder_OnActorTakeAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnActorTakeAnyDamage, DamageCauser) == 0x000020, "Member 'TedDynamicEventForwarder_OnActorTakeAnyDamage::DamageCauser' has a wrong offset!");

// Function Tempest.TedDynamicEventForwarder.OnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedDynamicEventForwarder_OnEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedDynamicEventForwarder_OnEndPlay) == 0x000008, "Wrong alignment on TedDynamicEventForwarder_OnEndPlay");
static_assert(sizeof(TedDynamicEventForwarder_OnEndPlay) == 0x000010, "Wrong size on TedDynamicEventForwarder_OnEndPlay");
static_assert(offsetof(TedDynamicEventForwarder_OnEndPlay, InActor) == 0x000000, "Member 'TedDynamicEventForwarder_OnEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedDynamicEventForwarder_OnEndPlay, InEndPlayReason) == 0x000008, "Member 'TedDynamicEventForwarder_OnEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedLevelScriptActor.K2_OnPawnSpawned
// 0x0008 (0x0008 - 0x0000)
struct TedLevelScriptActor_K2_OnPawnSpawned final
{
public:
	class ATedPawn*                               NewPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelScriptActor_K2_OnPawnSpawned) == 0x000008, "Wrong alignment on TedLevelScriptActor_K2_OnPawnSpawned");
static_assert(sizeof(TedLevelScriptActor_K2_OnPawnSpawned) == 0x000008, "Wrong size on TedLevelScriptActor_K2_OnPawnSpawned");
static_assert(offsetof(TedLevelScriptActor_K2_OnPawnSpawned, NewPawn) == 0x000000, "Member 'TedLevelScriptActor_K2_OnPawnSpawned::NewPawn' has a wrong offset!");

// Function Tempest.TedLevelScriptActor.OnActorSpawned
// 0x0008 (0x0008 - 0x0000)
struct TedLevelScriptActor_OnActorSpawned final
{
public:
	class AActor*                                 NewActor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelScriptActor_OnActorSpawned) == 0x000008, "Wrong alignment on TedLevelScriptActor_OnActorSpawned");
static_assert(sizeof(TedLevelScriptActor_OnActorSpawned) == 0x000008, "Wrong size on TedLevelScriptActor_OnActorSpawned");
static_assert(offsetof(TedLevelScriptActor_OnActorSpawned, NewActor) == 0x000000, "Member 'TedLevelScriptActor_OnActorSpawned::NewActor' has a wrong offset!");

// Function Tempest.TedLevelScriptActor.SetSaveActorComponentActive
// 0x0010 (0x0010 - 0x0000)
struct TedLevelScriptActor_SetSaveActorComponentActive final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLevelScriptActor_SetSaveActorComponentActive) == 0x000008, "Wrong alignment on TedLevelScriptActor_SetSaveActorComponentActive");
static_assert(sizeof(TedLevelScriptActor_SetSaveActorComponentActive) == 0x000010, "Wrong size on TedLevelScriptActor_SetSaveActorComponentActive");
static_assert(offsetof(TedLevelScriptActor_SetSaveActorComponentActive, Component) == 0x000000, "Member 'TedLevelScriptActor_SetSaveActorComponentActive::Component' has a wrong offset!");
static_assert(offsetof(TedLevelScriptActor_SetSaveActorComponentActive, bActive) == 0x000008, "Member 'TedLevelScriptActor_SetSaveActorComponentActive::bActive' has a wrong offset!");
static_assert(offsetof(TedLevelScriptActor_SetSaveActorComponentActive, bReset) == 0x000009, "Member 'TedLevelScriptActor_SetSaveActorComponentActive::bReset' has a wrong offset!");

// Function Tempest.TedLevelScriptActor.SetSaveActorHiddenInGame
// 0x0010 (0x0010 - 0x0000)
struct TedLevelScriptActor_SetSaveActorHiddenInGame final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInHidden;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLevelScriptActor_SetSaveActorHiddenInGame) == 0x000008, "Wrong alignment on TedLevelScriptActor_SetSaveActorHiddenInGame");
static_assert(sizeof(TedLevelScriptActor_SetSaveActorHiddenInGame) == 0x000010, "Wrong size on TedLevelScriptActor_SetSaveActorHiddenInGame");
static_assert(offsetof(TedLevelScriptActor_SetSaveActorHiddenInGame, Actor) == 0x000000, "Member 'TedLevelScriptActor_SetSaveActorHiddenInGame::Actor' has a wrong offset!");
static_assert(offsetof(TedLevelScriptActor_SetSaveActorHiddenInGame, bInHidden) == 0x000008, "Member 'TedLevelScriptActor_SetSaveActorHiddenInGame::bInHidden' has a wrong offset!");

// Function Tempest.TedEcsModule_AoE.K2_ReapplyAoEEffect
// 0x0010 (0x0010 - 0x0000)
struct TedEcsModule_AoE_K2_ReapplyAoEEffect final
{
public:
	class ATedPawn*                               AoEProviderPawn;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EffectToReapply;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEcsModule_AoE_K2_ReapplyAoEEffect) == 0x000008, "Wrong alignment on TedEcsModule_AoE_K2_ReapplyAoEEffect");
static_assert(sizeof(TedEcsModule_AoE_K2_ReapplyAoEEffect) == 0x000010, "Wrong size on TedEcsModule_AoE_K2_ReapplyAoEEffect");
static_assert(offsetof(TedEcsModule_AoE_K2_ReapplyAoEEffect, AoEProviderPawn) == 0x000000, "Member 'TedEcsModule_AoE_K2_ReapplyAoEEffect::AoEProviderPawn' has a wrong offset!");
static_assert(offsetof(TedEcsModule_AoE_K2_ReapplyAoEEffect, EffectToReapply) == 0x000008, "Member 'TedEcsModule_AoE_K2_ReapplyAoEEffect::EffectToReapply' has a wrong offset!");

// Function Tempest.TedMarkerConfig.GetContextTags
// 0x0020 (0x0020 - 0x0000)
struct TedMarkerConfig_GetContextTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMarkerConfig_GetContextTags) == 0x000008, "Wrong alignment on TedMarkerConfig_GetContextTags");
static_assert(sizeof(TedMarkerConfig_GetContextTags) == 0x000020, "Wrong size on TedMarkerConfig_GetContextTags");
static_assert(offsetof(TedMarkerConfig_GetContextTags, ReturnValue) == 0x000000, "Member 'TedMarkerConfig_GetContextTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerConfig.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct TedMarkerConfig_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMarkerConfig_GetDuration) == 0x000004, "Wrong alignment on TedMarkerConfig_GetDuration");
static_assert(sizeof(TedMarkerConfig_GetDuration) == 0x000004, "Wrong size on TedMarkerConfig_GetDuration");
static_assert(offsetof(TedMarkerConfig_GetDuration, ReturnValue) == 0x000000, "Member 'TedMarkerConfig_GetDuration::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerConfig.GetWorldMarkerBursh
// 0x00D0 (0x00D0 - 0x0000)
struct TedMarkerConfig_GetWorldMarkerBursh final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMarkerConfig_GetWorldMarkerBursh) == 0x000010, "Wrong alignment on TedMarkerConfig_GetWorldMarkerBursh");
static_assert(sizeof(TedMarkerConfig_GetWorldMarkerBursh) == 0x0000D0, "Wrong size on TedMarkerConfig_GetWorldMarkerBursh");
static_assert(offsetof(TedMarkerConfig_GetWorldMarkerBursh, ReturnValue) == 0x000000, "Member 'TedMarkerConfig_GetWorldMarkerBursh::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerConfig.UseWorldMarker
// 0x0001 (0x0001 - 0x0000)
struct TedMarkerConfig_UseWorldMarker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMarkerConfig_UseWorldMarker) == 0x000001, "Wrong alignment on TedMarkerConfig_UseWorldMarker");
static_assert(sizeof(TedMarkerConfig_UseWorldMarker) == 0x000001, "Wrong size on TedMarkerConfig_UseWorldMarker");
static_assert(offsetof(TedMarkerConfig_UseWorldMarker, ReturnValue) == 0x000000, "Member 'TedMarkerConfig_UseWorldMarker::ReturnValue' has a wrong offset!");

// Function Tempest.TedEditableTextBox.ApplyCharacterLimit
// 0x0010 (0x0010 - 0x0000)
struct TedEditableTextBox_ApplyCharacterLimit final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEditableTextBox_ApplyCharacterLimit) == 0x000008, "Wrong alignment on TedEditableTextBox_ApplyCharacterLimit");
static_assert(sizeof(TedEditableTextBox_ApplyCharacterLimit) == 0x000010, "Wrong size on TedEditableTextBox_ApplyCharacterLimit");
static_assert(offsetof(TedEditableTextBox_ApplyCharacterLimit, InText) == 0x000000, "Member 'TedEditableTextBox_ApplyCharacterLimit::InText' has a wrong offset!");

// Function Tempest.TedEditableTextBox.RemoveSuffixAndRestoreValue
// 0x0020 (0x0020 - 0x0000)
struct TedEditableTextBox_RemoveSuffixAndRestoreValue final
{
public:
	class FText                                   InValue;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEditableTextBox_RemoveSuffixAndRestoreValue) == 0x000008, "Wrong alignment on TedEditableTextBox_RemoveSuffixAndRestoreValue");
static_assert(sizeof(TedEditableTextBox_RemoveSuffixAndRestoreValue) == 0x000020, "Wrong size on TedEditableTextBox_RemoveSuffixAndRestoreValue");
static_assert(offsetof(TedEditableTextBox_RemoveSuffixAndRestoreValue, InValue) == 0x000000, "Member 'TedEditableTextBox_RemoveSuffixAndRestoreValue::InValue' has a wrong offset!");
static_assert(offsetof(TedEditableTextBox_RemoveSuffixAndRestoreValue, ReturnValue) == 0x000010, "Member 'TedEditableTextBox_RemoveSuffixAndRestoreValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedEditableTextBox.AddSuffixAndTrim
// 0x0020 (0x0020 - 0x0000)
struct TedEditableTextBox_AddSuffixAndTrim final
{
public:
	class FText                                   InValue;                                           // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEditableTextBox_AddSuffixAndTrim) == 0x000008, "Wrong alignment on TedEditableTextBox_AddSuffixAndTrim");
static_assert(sizeof(TedEditableTextBox_AddSuffixAndTrim) == 0x000020, "Wrong size on TedEditableTextBox_AddSuffixAndTrim");
static_assert(offsetof(TedEditableTextBox_AddSuffixAndTrim, InValue) == 0x000000, "Member 'TedEditableTextBox_AddSuffixAndTrim::InValue' has a wrong offset!");
static_assert(offsetof(TedEditableTextBox_AddSuffixAndTrim, ReturnValue) == 0x000010, "Member 'TedEditableTextBox_AddSuffixAndTrim::ReturnValue' has a wrong offset!");

// Function Tempest.TedEffectsProxyWidget.HandleEffectApplied
// 0x0010 (0x0010 - 0x0000)
struct TedEffectsProxyWidget_HandleEffectApplied final
{
public:
	const class ATedPawn*                         TargetPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedStatusDefinition*             AppliedEffect;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEffectsProxyWidget_HandleEffectApplied) == 0x000008, "Wrong alignment on TedEffectsProxyWidget_HandleEffectApplied");
static_assert(sizeof(TedEffectsProxyWidget_HandleEffectApplied) == 0x000010, "Wrong size on TedEffectsProxyWidget_HandleEffectApplied");
static_assert(offsetof(TedEffectsProxyWidget_HandleEffectApplied, TargetPawn) == 0x000000, "Member 'TedEffectsProxyWidget_HandleEffectApplied::TargetPawn' has a wrong offset!");
static_assert(offsetof(TedEffectsProxyWidget_HandleEffectApplied, AppliedEffect) == 0x000008, "Member 'TedEffectsProxyWidget_HandleEffectApplied::AppliedEffect' has a wrong offset!");

// Function Tempest.TedEncyclopediaAbilitiesPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaAbilitiesPanel_SetContent final
{
public:
	TArray<TSubclassOf<class UTedCommand>>        AbilityData;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaAbilitiesPanel_SetContent) == 0x000008, "Wrong alignment on TedEncyclopediaAbilitiesPanel_SetContent");
static_assert(sizeof(TedEncyclopediaAbilitiesPanel_SetContent) == 0x000010, "Wrong size on TedEncyclopediaAbilitiesPanel_SetContent");
static_assert(offsetof(TedEncyclopediaAbilitiesPanel_SetContent, AbilityData) == 0x000000, "Member 'TedEncyclopediaAbilitiesPanel_SetContent::AbilityData' has a wrong offset!");

// Function Tempest.TedEncyclopediaAbilitiesPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaAbilitiesPanel_GetContent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedCommand>                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaAbilitiesPanel_GetContent) == 0x000008, "Wrong alignment on TedEncyclopediaAbilitiesPanel_GetContent");
static_assert(sizeof(TedEncyclopediaAbilitiesPanel_GetContent) == 0x000010, "Wrong size on TedEncyclopediaAbilitiesPanel_GetContent");
static_assert(offsetof(TedEncyclopediaAbilitiesPanel_GetContent, Index_0) == 0x000000, "Member 'TedEncyclopediaAbilitiesPanel_GetContent::Index_0' has a wrong offset!");
static_assert(offsetof(TedEncyclopediaAbilitiesPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedEncyclopediaAbilitiesPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedEncyclopediaEntryPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaEntryPanel_SetContent final
{
public:
	TArray<class UTedEncyclopediaDefinitionAsset*> NewContent;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaEntryPanel_SetContent) == 0x000008, "Wrong alignment on TedEncyclopediaEntryPanel_SetContent");
static_assert(sizeof(TedEncyclopediaEntryPanel_SetContent) == 0x000010, "Wrong size on TedEncyclopediaEntryPanel_SetContent");
static_assert(offsetof(TedEncyclopediaEntryPanel_SetContent, NewContent) == 0x000000, "Member 'TedEncyclopediaEntryPanel_SetContent::NewContent' has a wrong offset!");

// Function Tempest.TedEncyclopediaEntryPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedEncyclopediaEntryPanel_GetContent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedEncyclopediaDefinitionAsset*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaEntryPanel_GetContent) == 0x000008, "Wrong alignment on TedEncyclopediaEntryPanel_GetContent");
static_assert(sizeof(TedEncyclopediaEntryPanel_GetContent) == 0x000010, "Wrong size on TedEncyclopediaEntryPanel_GetContent");
static_assert(offsetof(TedEncyclopediaEntryPanel_GetContent, Index_0) == 0x000000, "Member 'TedEncyclopediaEntryPanel_GetContent::Index_0' has a wrong offset!");
static_assert(offsetof(TedEncyclopediaEntryPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedEncyclopediaEntryPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedMatchHistoryPanel.Sort
// 0x000C (0x000C - 0x0000)
struct TedMatchHistoryPanel_Sort final
{
public:
	struct FGameplayTag                           SortType;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMatchHistoryPanel_Sort) == 0x000004, "Wrong alignment on TedMatchHistoryPanel_Sort");
static_assert(sizeof(TedMatchHistoryPanel_Sort) == 0x00000C, "Wrong size on TedMatchHistoryPanel_Sort");
static_assert(offsetof(TedMatchHistoryPanel_Sort, SortType) == 0x000000, "Member 'TedMatchHistoryPanel_Sort::SortType' has a wrong offset!");
static_assert(offsetof(TedMatchHistoryPanel_Sort, bAscending) == 0x000008, "Member 'TedMatchHistoryPanel_Sort::bAscending' has a wrong offset!");

// Function Tempest.TedEncyclopediaMain.DisplayEyclopediaEntry
// 0x0008 (0x0008 - 0x0000)
struct TedEncyclopediaMain_DisplayEyclopediaEntry final
{
public:
	class UTedEncyclopediaDefinitionAsset*        Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaMain_DisplayEyclopediaEntry) == 0x000008, "Wrong alignment on TedEncyclopediaMain_DisplayEyclopediaEntry");
static_assert(sizeof(TedEncyclopediaMain_DisplayEyclopediaEntry) == 0x000008, "Wrong size on TedEncyclopediaMain_DisplayEyclopediaEntry");
static_assert(offsetof(TedEncyclopediaMain_DisplayEyclopediaEntry, Asset) == 0x000000, "Member 'TedEncyclopediaMain_DisplayEyclopediaEntry::Asset' has a wrong offset!");

// Function Tempest.TedEncyclopediaMain.SetNewFaction
// 0x0001 (0x0001 - 0x0000)
struct TedEncyclopediaMain_SetNewFaction final
{
public:
	ETedFaction                                   NewFaction;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEncyclopediaMain_SetNewFaction) == 0x000001, "Wrong alignment on TedEncyclopediaMain_SetNewFaction");
static_assert(sizeof(TedEncyclopediaMain_SetNewFaction) == 0x000001, "Wrong size on TedEncyclopediaMain_SetNewFaction");
static_assert(offsetof(TedEncyclopediaMain_SetNewFaction, NewFaction) == 0x000000, "Member 'TedEncyclopediaMain_SetNewFaction::NewFaction' has a wrong offset!");

// Function Tempest.TedMedalsScreenContextObject.New
// 0x0018 (0x0018 - 0x0000)
struct TedMedalsScreenContextObject_New final
{
public:
	bool                                          bInVictory;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ATedPlayerState*                  InPlayerState;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedMedalsScreenContextObject*          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMedalsScreenContextObject_New) == 0x000008, "Wrong alignment on TedMedalsScreenContextObject_New");
static_assert(sizeof(TedMedalsScreenContextObject_New) == 0x000018, "Wrong size on TedMedalsScreenContextObject_New");
static_assert(offsetof(TedMedalsScreenContextObject_New, bInVictory) == 0x000000, "Member 'TedMedalsScreenContextObject_New::bInVictory' has a wrong offset!");
static_assert(offsetof(TedMedalsScreenContextObject_New, InPlayerState) == 0x000008, "Member 'TedMedalsScreenContextObject_New::InPlayerState' has a wrong offset!");
static_assert(offsetof(TedMedalsScreenContextObject_New, ReturnValue) == 0x000010, "Member 'TedMedalsScreenContextObject_New::ReturnValue' has a wrong offset!");

// Function Tempest.TedEndGameScreen.ShowPopup
// 0x0008 (0x0008 - 0x0000)
struct TedEndGameScreen_ShowPopup final
{
public:
	class UTedUserWidget*                         InButton;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEndGameScreen_ShowPopup) == 0x000008, "Wrong alignment on TedEndGameScreen_ShowPopup");
static_assert(sizeof(TedEndGameScreen_ShowPopup) == 0x000008, "Wrong size on TedEndGameScreen_ShowPopup");
static_assert(offsetof(TedEndGameScreen_ShowPopup, InButton) == 0x000000, "Member 'TedEndGameScreen_ShowPopup::InButton' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentSlot_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetDescription) == 0x000008, "Wrong alignment on TedEquipmentSlot_GetDescription");
static_assert(sizeof(TedEquipmentSlot_GetDescription) == 0x000010, "Wrong size on TedEquipmentSlot_GetDescription");
static_assert(offsetof(TedEquipmentSlot_GetDescription, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetEquipmentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentSlot_GetEquipmentPanel final
{
public:
	class UTedEquipmentPanel*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetEquipmentPanel) == 0x000008, "Wrong alignment on TedEquipmentSlot_GetEquipmentPanel");
static_assert(sizeof(TedEquipmentSlot_GetEquipmentPanel) == 0x000008, "Wrong size on TedEquipmentSlot_GetEquipmentPanel");
static_assert(offsetof(TedEquipmentSlot_GetEquipmentPanel, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetEquipmentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedEquipmentSlot_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetIcon) == 0x000008, "Wrong alignment on TedEquipmentSlot_GetIcon");
static_assert(sizeof(TedEquipmentSlot_GetIcon) == 0x000008, "Wrong size on TedEquipmentSlot_GetIcon");
static_assert(offsetof(TedEquipmentSlot_GetIcon, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetInventorySpaceCost
// 0x0004 (0x0004 - 0x0000)
struct TedEquipmentSlot_GetInventorySpaceCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetInventorySpaceCost) == 0x000004, "Wrong alignment on TedEquipmentSlot_GetInventorySpaceCost");
static_assert(sizeof(TedEquipmentSlot_GetInventorySpaceCost) == 0x000004, "Wrong size on TedEquipmentSlot_GetInventorySpaceCost");
static_assert(offsetof(TedEquipmentSlot_GetInventorySpaceCost, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetInventorySpaceCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetRequisitionCost
// 0x0004 (0x0004 - 0x0000)
struct TedEquipmentSlot_GetRequisitionCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetRequisitionCost) == 0x000004, "Wrong alignment on TedEquipmentSlot_GetRequisitionCost");
static_assert(sizeof(TedEquipmentSlot_GetRequisitionCost) == 0x000004, "Wrong size on TedEquipmentSlot_GetRequisitionCost");
static_assert(offsetof(TedEquipmentSlot_GetRequisitionCost, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetRequisitionCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedEquipmentSlot_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_GetTitle) == 0x000008, "Wrong alignment on TedEquipmentSlot_GetTitle");
static_assert(sizeof(TedEquipmentSlot_GetTitle) == 0x000010, "Wrong size on TedEquipmentSlot_GetTitle");
static_assert(offsetof(TedEquipmentSlot_GetTitle, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.HasRequisitionForEquipment
// 0x0001 (0x0001 - 0x0000)
struct TedEquipmentSlot_HasRequisitionForEquipment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_HasRequisitionForEquipment) == 0x000001, "Wrong alignment on TedEquipmentSlot_HasRequisitionForEquipment");
static_assert(sizeof(TedEquipmentSlot_HasRequisitionForEquipment) == 0x000001, "Wrong size on TedEquipmentSlot_HasRequisitionForEquipment");
static_assert(offsetof(TedEquipmentSlot_HasRequisitionForEquipment, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_HasRequisitionForEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedEquipmentSlot.HasSpaceForEquipment
// 0x0001 (0x0001 - 0x0000)
struct TedEquipmentSlot_HasSpaceForEquipment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedEquipmentSlot_HasSpaceForEquipment) == 0x000001, "Wrong alignment on TedEquipmentSlot_HasSpaceForEquipment");
static_assert(sizeof(TedEquipmentSlot_HasSpaceForEquipment) == 0x000001, "Wrong size on TedEquipmentSlot_HasSpaceForEquipment");
static_assert(offsetof(TedEquipmentSlot_HasSpaceForEquipment, ReturnValue) == 0x000000, "Member 'TedEquipmentSlot_HasSpaceForEquipment::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.CanRequestAddBotPlayer
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_CanRequestAddBotPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_CanRequestAddBotPlayer) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_CanRequestAddBotPlayer");
static_assert(sizeof(TedGameCreationPlayersSlot_CanRequestAddBotPlayer) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_CanRequestAddBotPlayer");
static_assert(offsetof(TedGameCreationPlayersSlot_CanRequestAddBotPlayer, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_CanRequestAddBotPlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.CanRequestRemovePlayer
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_CanRequestRemovePlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_CanRequestRemovePlayer) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_CanRequestRemovePlayer");
static_assert(sizeof(TedGameCreationPlayersSlot_CanRequestRemovePlayer) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_CanRequestRemovePlayer");
static_assert(offsetof(TedGameCreationPlayersSlot_CanRequestRemovePlayer, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_CanRequestRemovePlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.GetAvatar
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersSlot_GetAvatar final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_GetAvatar) == 0x000008, "Wrong alignment on TedGameCreationPlayersSlot_GetAvatar");
static_assert(sizeof(TedGameCreationPlayersSlot_GetAvatar) == 0x000008, "Wrong size on TedGameCreationPlayersSlot_GetAvatar");
static_assert(offsetof(TedGameCreationPlayersSlot_GetAvatar, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_GetAvatar::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.GetContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedGameCreationPlayersSlot_GetContentPanel final
{
public:
	class UTedGameCreationPlayersPanel*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_GetContentPanel) == 0x000008, "Wrong alignment on TedGameCreationPlayersSlot_GetContentPanel");
static_assert(sizeof(TedGameCreationPlayersSlot_GetContentPanel) == 0x000008, "Wrong size on TedGameCreationPlayersSlot_GetContentPanel");
static_assert(offsetof(TedGameCreationPlayersSlot_GetContentPanel, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_GetContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.GetLabel
// 0x0010 (0x0010 - 0x0000)
struct TedGameCreationPlayersSlot_GetLabel final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_GetLabel) == 0x000008, "Wrong alignment on TedGameCreationPlayersSlot_GetLabel");
static_assert(sizeof(TedGameCreationPlayersSlot_GetLabel) == 0x000010, "Wrong size on TedGameCreationPlayersSlot_GetLabel");
static_assert(offsetof(TedGameCreationPlayersSlot_GetLabel, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_GetLabel::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.GetSettingValue
// 0x000C (0x000C - 0x0000)
struct TedGameCreationPlayersSlot_GetSettingValue final
{
public:
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutValue;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGameCreationPlayersSlot_GetSettingValue) == 0x000004, "Wrong alignment on TedGameCreationPlayersSlot_GetSettingValue");
static_assert(sizeof(TedGameCreationPlayersSlot_GetSettingValue) == 0x00000C, "Wrong size on TedGameCreationPlayersSlot_GetSettingValue");
static_assert(offsetof(TedGameCreationPlayersSlot_GetSettingValue, InKey) == 0x000000, "Member 'TedGameCreationPlayersSlot_GetSettingValue::InKey' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersSlot_GetSettingValue, OutValue) == 0x000004, "Member 'TedGameCreationPlayersSlot_GetSettingValue::OutValue' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersSlot_GetSettingValue, ReturnValue) == 0x000008, "Member 'TedGameCreationPlayersSlot_GetSettingValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.HasSetting
// 0x0002 (0x0002 - 0x0000)
struct TedGameCreationPlayersSlot_HasSetting final
{
public:
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_HasSetting) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_HasSetting");
static_assert(sizeof(TedGameCreationPlayersSlot_HasSetting) == 0x000002, "Wrong size on TedGameCreationPlayersSlot_HasSetting");
static_assert(offsetof(TedGameCreationPlayersSlot_HasSetting, InKey) == 0x000000, "Member 'TedGameCreationPlayersSlot_HasSetting::InKey' has a wrong offset!");
static_assert(offsetof(TedGameCreationPlayersSlot_HasSetting, ReturnValue) == 0x000001, "Member 'TedGameCreationPlayersSlot_HasSetting::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_IsAdmin) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_IsAdmin");
static_assert(sizeof(TedGameCreationPlayersSlot_IsAdmin) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_IsAdmin");
static_assert(offsetof(TedGameCreationPlayersSlot_IsAdmin, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_IsAdmin::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.IsBot
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_IsBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_IsBot) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_IsBot");
static_assert(sizeof(TedGameCreationPlayersSlot_IsBot) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_IsBot");
static_assert(offsetof(TedGameCreationPlayersSlot_IsBot, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_IsBot::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_IsEmpty) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_IsEmpty");
static_assert(sizeof(TedGameCreationPlayersSlot_IsEmpty) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_IsEmpty");
static_assert(offsetof(TedGameCreationPlayersSlot_IsEmpty, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_IsEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.IsHuman
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_IsHuman final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_IsHuman) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_IsHuman");
static_assert(sizeof(TedGameCreationPlayersSlot_IsHuman) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_IsHuman");
static_assert(offsetof(TedGameCreationPlayersSlot_IsHuman, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_IsHuman::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameCreationPlayersSlot.IsReady
// 0x0001 (0x0001 - 0x0000)
struct TedGameCreationPlayersSlot_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameCreationPlayersSlot_IsReady) == 0x000001, "Wrong alignment on TedGameCreationPlayersSlot_IsReady");
static_assert(sizeof(TedGameCreationPlayersSlot_IsReady) == 0x000001, "Wrong size on TedGameCreationPlayersSlot_IsReady");
static_assert(offsetof(TedGameCreationPlayersSlot_IsReady, ReturnValue) == 0x000000, "Member 'TedGameCreationPlayersSlot_IsReady::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerWidget.FindSequencePlayerActor
// 0x0008 (0x0008 - 0x0000)
struct TedMovieSequencePlayerWidget_FindSequencePlayerActor final
{
public:
	class ATedMovieSequencePlayerActor*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerWidget_FindSequencePlayerActor) == 0x000008, "Wrong alignment on TedMovieSequencePlayerWidget_FindSequencePlayerActor");
static_assert(sizeof(TedMovieSequencePlayerWidget_FindSequencePlayerActor) == 0x000008, "Wrong size on TedMovieSequencePlayerWidget_FindSequencePlayerActor");
static_assert(offsetof(TedMovieSequencePlayerWidget_FindSequencePlayerActor, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerWidget_FindSequencePlayerActor::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerWidget.FindSequencePlayerActors
// 0x0010 (0x0010 - 0x0000)
struct TedMovieSequencePlayerWidget_FindSequencePlayerActors final
{
public:
	TArray<class ATedMovieSequencePlayerActor*>   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerWidget_FindSequencePlayerActors) == 0x000008, "Wrong alignment on TedMovieSequencePlayerWidget_FindSequencePlayerActors");
static_assert(sizeof(TedMovieSequencePlayerWidget_FindSequencePlayerActors) == 0x000010, "Wrong size on TedMovieSequencePlayerWidget_FindSequencePlayerActors");
static_assert(offsetof(TedMovieSequencePlayerWidget_FindSequencePlayerActors, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerWidget_FindSequencePlayerActors::ReturnValue' has a wrong offset!");

// Function Tempest.TedMovieSequencePlayerWidget.GetCurrentSequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct TedMovieSequencePlayerWidget_GetCurrentSequencePlayer final
{
public:
	class ATedMovieSequencePlayerActor*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMovieSequencePlayerWidget_GetCurrentSequencePlayer) == 0x000008, "Wrong alignment on TedMovieSequencePlayerWidget_GetCurrentSequencePlayer");
static_assert(sizeof(TedMovieSequencePlayerWidget_GetCurrentSequencePlayer) == 0x000008, "Wrong size on TedMovieSequencePlayerWidget_GetCurrentSequencePlayer");
static_assert(offsetof(TedMovieSequencePlayerWidget_GetCurrentSequencePlayer, ReturnValue) == 0x000000, "Member 'TedMovieSequencePlayerWidget_GetCurrentSequencePlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGameplayCueNotify_HitBurst.K2_GetFXAssetConfigs
// 0x00F0 (0x00F0 - 0x0000)
struct TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs final
{
public:
	const class AActor*                           TargetActor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCueParameters                 GCueParams;                                        // 0x0008(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FGCueParticleConfig>            ReturnValue;                                       // 0x00E0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs) == 0x000008, "Wrong alignment on TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs");
static_assert(sizeof(TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs) == 0x0000F0, "Wrong size on TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs");
static_assert(offsetof(TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs, TargetActor) == 0x000000, "Member 'TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs::TargetActor' has a wrong offset!");
static_assert(offsetof(TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs, GCueParams) == 0x000008, "Member 'TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs::GCueParams' has a wrong offset!");
static_assert(offsetof(TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs, ReturnValue) == 0x0000E0, "Member 'TedGameplayCueNotify_HitBurst_K2_GetFXAssetConfigs::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineLeaderboardManager.GetCurrentSeason
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineLeaderboardManager_GetCurrentSeason final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineLeaderboardManager_GetCurrentSeason) == 0x000008, "Wrong alignment on TedOnlineLeaderboardManager_GetCurrentSeason");
static_assert(sizeof(TedOnlineLeaderboardManager_GetCurrentSeason) == 0x000010, "Wrong size on TedOnlineLeaderboardManager_GetCurrentSeason");
static_assert(offsetof(TedOnlineLeaderboardManager_GetCurrentSeason, WorldContextObject) == 0x000000, "Member 'TedOnlineLeaderboardManager_GetCurrentSeason::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedOnlineLeaderboardManager_GetCurrentSeason, ReturnValue) == 0x000008, "Member 'TedOnlineLeaderboardManager_GetCurrentSeason::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineLeaderboardManager.RoundRating
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineLeaderboardManager_RoundRating final
{
public:
	float                                         InRating;                                          // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineLeaderboardManager_RoundRating) == 0x000004, "Wrong alignment on TedOnlineLeaderboardManager_RoundRating");
static_assert(sizeof(TedOnlineLeaderboardManager_RoundRating) == 0x000008, "Wrong size on TedOnlineLeaderboardManager_RoundRating");
static_assert(offsetof(TedOnlineLeaderboardManager_RoundRating, InRating) == 0x000000, "Member 'TedOnlineLeaderboardManager_RoundRating::InRating' has a wrong offset!");
static_assert(offsetof(TedOnlineLeaderboardManager_RoundRating, ReturnValue) == 0x000004, "Member 'TedOnlineLeaderboardManager_RoundRating::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineLeaderboardManager.OnDownloadGameConfigurationComplete
// 0x0020 (0x0020 - 0x0000)
struct TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLayerData>                     Layers;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeGameConfiguration             ResultCode;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete) == 0x000008, "Wrong alignment on TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete");
static_assert(sizeof(TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete) == 0x000020, "Wrong size on TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete");
static_assert(offsetof(TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete, Layers) == 0x000008, "Member 'TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete::Layers' has a wrong offset!");
static_assert(offsetof(TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete, ResultCode) == 0x000018, "Member 'TedOnlineLeaderboardManager_OnDownloadGameConfigurationComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineLeaderboardManager.OnServerLeaderboardsUpdateAfterMatch
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch final
{
public:
	EProsdkErrorCodeLeaderboards                  ErrorCode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch) == 0x000001, "Wrong alignment on TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch");
static_assert(sizeof(TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch) == 0x000001, "Wrong size on TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch");
static_assert(offsetof(TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch, ErrorCode) == 0x000000, "Member 'TedOnlineLeaderboardManager_OnServerLeaderboardsUpdateAfterMatch::ErrorCode' has a wrong offset!");

// Function Tempest.TedGameState.MultiCast_FireProjectile
// 0x0130 (0x0130 - 0x0000)
struct TedGameState_MultiCast_FireProjectile final
{
public:
	TSubclassOf<class ATedProjectile>             InProjectileClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             DamageType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadialDamageParams                    RadialDamageParams;                                // 0x0018(0x0014)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            EffectToApplyOnDamage;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDealFullDamageToTarget;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TargetLocation;                                    // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPawn*                               TargetPawn;                                        // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedUtilsPawnFilter                    PawnFilter;                                        // 0x0058(0x00D0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TrackedSupportPowerTag;                            // 0x0128(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameState_MultiCast_FireProjectile) == 0x000008, "Wrong alignment on TedGameState_MultiCast_FireProjectile");
static_assert(sizeof(TedGameState_MultiCast_FireProjectile) == 0x000130, "Wrong size on TedGameState_MultiCast_FireProjectile");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, InProjectileClass) == 0x000000, "Member 'TedGameState_MultiCast_FireProjectile::InProjectileClass' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, InOwner) == 0x000008, "Member 'TedGameState_MultiCast_FireProjectile::InOwner' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, DamageType) == 0x000010, "Member 'TedGameState_MultiCast_FireProjectile::DamageType' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, RadialDamageParams) == 0x000018, "Member 'TedGameState_MultiCast_FireProjectile::RadialDamageParams' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, EffectToApplyOnDamage) == 0x000030, "Member 'TedGameState_MultiCast_FireProjectile::EffectToApplyOnDamage' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, bDealFullDamageToTarget) == 0x000038, "Member 'TedGameState_MultiCast_FireProjectile::bDealFullDamageToTarget' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, TargetLocation) == 0x000040, "Member 'TedGameState_MultiCast_FireProjectile::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, TargetPawn) == 0x000050, "Member 'TedGameState_MultiCast_FireProjectile::TargetPawn' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, PawnFilter) == 0x000058, "Member 'TedGameState_MultiCast_FireProjectile::PawnFilter' has a wrong offset!");
static_assert(offsetof(TedGameState_MultiCast_FireProjectile, TrackedSupportPowerTag) == 0x000128, "Member 'TedGameState_MultiCast_FireProjectile::TrackedSupportPowerTag' has a wrong offset!");

// Function Tempest.TedGameState.Client_R_OnDisconnect
// 0x0008 (0x0008 - 0x0000)
struct TedGameState_Client_R_OnDisconnect final
{
public:
	const class ATedPlayerState*                  PlayerDisconnected;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameState_Client_R_OnDisconnect) == 0x000008, "Wrong alignment on TedGameState_Client_R_OnDisconnect");
static_assert(sizeof(TedGameState_Client_R_OnDisconnect) == 0x000008, "Wrong size on TedGameState_Client_R_OnDisconnect");
static_assert(offsetof(TedGameState_Client_R_OnDisconnect, PlayerDisconnected) == 0x000000, "Member 'TedGameState_Client_R_OnDisconnect::PlayerDisconnected' has a wrong offset!");

// Function Tempest.TedGameState.Client_R_OnLogin
// 0x0008 (0x0008 - 0x0000)
struct TedGameState_Client_R_OnLogin final
{
public:
	const class ATedPlayerState*                  PlayerLoggedIn;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGameState_Client_R_OnLogin) == 0x000008, "Wrong alignment on TedGameState_Client_R_OnLogin");
static_assert(sizeof(TedGameState_Client_R_OnLogin) == 0x000008, "Wrong size on TedGameState_Client_R_OnLogin");
static_assert(offsetof(TedGameState_Client_R_OnLogin, PlayerLoggedIn) == 0x000000, "Member 'TedGameState_Client_R_OnLogin::PlayerLoggedIn' has a wrong offset!");

// Function Tempest.TedOnlineQrCodeManager.GetQrCodeRequestCompleted
// 0x0070 (0x0070 - 0x0000)
struct TedOnlineQrCodeManager_GetQrCodeRequestCompleted final
{
public:
	struct FProsAccountServiceStatus              InStatus;                                          // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineQrCodeManager_GetQrCodeRequestCompleted) == 0x000008, "Wrong alignment on TedOnlineQrCodeManager_GetQrCodeRequestCompleted");
static_assert(sizeof(TedOnlineQrCodeManager_GetQrCodeRequestCompleted) == 0x000070, "Wrong size on TedOnlineQrCodeManager_GetQrCodeRequestCompleted");
static_assert(offsetof(TedOnlineQrCodeManager_GetQrCodeRequestCompleted, InStatus) == 0x000000, "Member 'TedOnlineQrCodeManager_GetQrCodeRequestCompleted::InStatus' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_Enum
// 0x0068 (0x0068 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_Enum final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UEnum*                            EnumType;                                          // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0061(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_Enum) == 0x000008, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_Enum");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_Enum) == 0x000068, "Wrong size on TedGenericDataFunctions_GetGenericValue_Enum");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Enum, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_Enum::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Enum, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_Enum::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Enum, EnumType) == 0x000058, "Member 'TedGenericDataFunctions_GetGenericValue_Enum::EnumType' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Enum, Value) == 0x000060, "Member 'TedGenericDataFunctions_GetGenericValue_Enum::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Enum, ReturnValue) == 0x000061, "Member 'TedGenericDataFunctions_GetGenericValue_Enum::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_Float
// 0x0060 (0x0060 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_Float final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_Float) == 0x000008, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_Float");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_Float) == 0x000060, "Wrong size on TedGenericDataFunctions_GetGenericValue_Float");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Float, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_Float::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Float, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_Float::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Float, Value) == 0x000058, "Member 'TedGenericDataFunctions_GetGenericValue_Float::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Float, ReturnValue) == 0x00005C, "Member 'TedGenericDataFunctions_GetGenericValue_Float::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_Int32
// 0x0060 (0x0060 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_Int32 final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_Int32) == 0x000008, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_Int32");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_Int32) == 0x000060, "Wrong size on TedGenericDataFunctions_GetGenericValue_Int32");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Int32, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_Int32::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Int32, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_Int32::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Int32, Value) == 0x000058, "Member 'TedGenericDataFunctions_GetGenericValue_Int32::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Int32, ReturnValue) == 0x00005C, "Member 'TedGenericDataFunctions_GetGenericValue_Int32::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_Object
// 0x0070 (0x0070 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_Object final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    OutputType;                                        // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Value;                                             // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_Object) == 0x000008, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_Object");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_Object) == 0x000070, "Wrong size on TedGenericDataFunctions_GetGenericValue_Object");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Object, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_Object::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Object, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_Object::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Object, OutputType) == 0x000058, "Member 'TedGenericDataFunctions_GetGenericValue_Object::OutputType' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Object, Value) == 0x000060, "Member 'TedGenericDataFunctions_GetGenericValue_Object::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Object, ReturnValue) == 0x000068, "Member 'TedGenericDataFunctions_GetGenericValue_Object::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_SlateBrush
// 0x0140 (0x0140 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_SlateBrush final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Value;                                             // 0x0060(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0xF];                                      // 0x0131(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_SlateBrush) == 0x000010, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_SlateBrush");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_SlateBrush) == 0x000140, "Wrong size on TedGenericDataFunctions_GetGenericValue_SlateBrush");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_SlateBrush, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_SlateBrush::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_SlateBrush, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_SlateBrush::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_SlateBrush, Value) == 0x000060, "Member 'TedGenericDataFunctions_GetGenericValue_SlateBrush::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_SlateBrush, ReturnValue) == 0x000130, "Member 'TedGenericDataFunctions_GetGenericValue_SlateBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.GetGenericValue_Text
// 0x0070 (0x0070 - 0x0000)
struct TedGenericDataFunctions_GetGenericValue_Text final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0058(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_GetGenericValue_Text) == 0x000008, "Wrong alignment on TedGenericDataFunctions_GetGenericValue_Text");
static_assert(sizeof(TedGenericDataFunctions_GetGenericValue_Text) == 0x000070, "Wrong size on TedGenericDataFunctions_GetGenericValue_Text");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Text, Key) == 0x000000, "Member 'TedGenericDataFunctions_GetGenericValue_Text::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Text, Data) == 0x000008, "Member 'TedGenericDataFunctions_GetGenericValue_Text::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Text, Value) == 0x000058, "Member 'TedGenericDataFunctions_GetGenericValue_Text::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_GetGenericValue_Text, ReturnValue) == 0x000068, "Member 'TedGenericDataFunctions_GetGenericValue_Text::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.RemoveGenericValue
// 0x0060 (0x0060 - 0x0000)
struct TedGenericDataFunctions_RemoveGenericValue final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0008(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_RemoveGenericValue) == 0x000008, "Wrong alignment on TedGenericDataFunctions_RemoveGenericValue");
static_assert(sizeof(TedGenericDataFunctions_RemoveGenericValue) == 0x000060, "Wrong size on TedGenericDataFunctions_RemoveGenericValue");
static_assert(offsetof(TedGenericDataFunctions_RemoveGenericValue, Key) == 0x000000, "Member 'TedGenericDataFunctions_RemoveGenericValue::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_RemoveGenericValue, Data) == 0x000008, "Member 'TedGenericDataFunctions_RemoveGenericValue::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_RemoveGenericValue, ReturnValue) == 0x000058, "Member 'TedGenericDataFunctions_RemoveGenericValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_Enum
// 0x0070 (0x0070 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_Enum final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UEnum*                            EnumType;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGenericDataContainer               Data;                                              // 0x0018(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_Enum) == 0x000008, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_Enum");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_Enum) == 0x000070, "Wrong size on TedGenericDataFunctions_SetGenericValue_Enum");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Enum, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_Enum::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Enum, EnumType) == 0x000008, "Member 'TedGenericDataFunctions_SetGenericValue_Enum::EnumType' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Enum, Value) == 0x000010, "Member 'TedGenericDataFunctions_SetGenericValue_Enum::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Enum, Data) == 0x000018, "Member 'TedGenericDataFunctions_SetGenericValue_Enum::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Enum, ReturnValue) == 0x000068, "Member 'TedGenericDataFunctions_SetGenericValue_Enum::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_Float
// 0x0068 (0x0068 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_Float final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGenericDataContainer               Data;                                              // 0x0010(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_Float) == 0x000008, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_Float");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_Float) == 0x000068, "Wrong size on TedGenericDataFunctions_SetGenericValue_Float");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Float, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_Float::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Float, Value) == 0x000008, "Member 'TedGenericDataFunctions_SetGenericValue_Float::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Float, Data) == 0x000010, "Member 'TedGenericDataFunctions_SetGenericValue_Float::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Float, ReturnValue) == 0x000060, "Member 'TedGenericDataFunctions_SetGenericValue_Float::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_Int32
// 0x0068 (0x0068 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_Int32 final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedGenericDataContainer               Data;                                              // 0x0010(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_Int32) == 0x000008, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_Int32");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_Int32) == 0x000068, "Wrong size on TedGenericDataFunctions_SetGenericValue_Int32");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Int32, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_Int32::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Int32, Value) == 0x000008, "Member 'TedGenericDataFunctions_SetGenericValue_Int32::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Int32, Data) == 0x000010, "Member 'TedGenericDataFunctions_SetGenericValue_Int32::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Int32, ReturnValue) == 0x000060, "Member 'TedGenericDataFunctions_SetGenericValue_Int32::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_Object
// 0x0068 (0x0068 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_Object final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Value;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0010(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_Object) == 0x000008, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_Object");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_Object) == 0x000068, "Wrong size on TedGenericDataFunctions_SetGenericValue_Object");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Object, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_Object::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Object, Value) == 0x000008, "Member 'TedGenericDataFunctions_SetGenericValue_Object::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Object, Data) == 0x000010, "Member 'TedGenericDataFunctions_SetGenericValue_Object::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Object, ReturnValue) == 0x000060, "Member 'TedGenericDataFunctions_SetGenericValue_Object::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_SlateBrush
// 0x0140 (0x0140 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_SlateBrush final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Value;                                             // 0x0010(0x00D0)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x00E0(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0xF];                                      // 0x0131(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_SlateBrush) == 0x000010, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_SlateBrush");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_SlateBrush) == 0x000140, "Wrong size on TedGenericDataFunctions_SetGenericValue_SlateBrush");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_SlateBrush, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_SlateBrush::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_SlateBrush, Value) == 0x000010, "Member 'TedGenericDataFunctions_SetGenericValue_SlateBrush::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_SlateBrush, Data) == 0x0000E0, "Member 'TedGenericDataFunctions_SetGenericValue_SlateBrush::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_SlateBrush, ReturnValue) == 0x000130, "Member 'TedGenericDataFunctions_SetGenericValue_SlateBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedGenericDataFunctions.SetGenericValue_Text
// 0x0070 (0x0070 - 0x0000)
struct TedGenericDataFunctions_SetGenericValue_Text final
{
public:
	struct FGameplayTag                           Key;                                               // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               Data;                                              // 0x0018(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedGenericDataFunctions_SetGenericValue_Text) == 0x000008, "Wrong alignment on TedGenericDataFunctions_SetGenericValue_Text");
static_assert(sizeof(TedGenericDataFunctions_SetGenericValue_Text) == 0x000070, "Wrong size on TedGenericDataFunctions_SetGenericValue_Text");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Text, Key) == 0x000000, "Member 'TedGenericDataFunctions_SetGenericValue_Text::Key' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Text, Value) == 0x000008, "Member 'TedGenericDataFunctions_SetGenericValue_Text::Value' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Text, Data) == 0x000018, "Member 'TedGenericDataFunctions_SetGenericValue_Text::Data' has a wrong offset!");
static_assert(offsetof(TedGenericDataFunctions_SetGenericValue_Text, ReturnValue) == 0x000068, "Member 'TedGenericDataFunctions_SetGenericValue_Text::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.AreDataCentersAvailable
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_AreDataCentersAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_AreDataCentersAvailable) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_AreDataCentersAvailable");
static_assert(sizeof(TedOnlineSessionsControllerWidget_AreDataCentersAvailable) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_AreDataCentersAvailable");
static_assert(offsetof(TedOnlineSessionsControllerWidget_AreDataCentersAvailable, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_AreDataCentersAvailable::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.CloseServer
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_CloseServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_CloseServer) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_CloseServer");
static_assert(sizeof(TedOnlineSessionsControllerWidget_CloseServer) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_CloseServer");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CloseServer, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_CloseServer::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.CreateServer
// 0x0030 (0x0030 - 0x0000)
struct TedOnlineSessionsControllerWidget_CreateServer final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_CreateServer) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_CreateServer");
static_assert(sizeof(TedOnlineSessionsControllerWidget_CreateServer) == 0x000030, "Wrong size on TedOnlineSessionsControllerWidget_CreateServer");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CreateServer, InMapInfo) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_CreateServer::InMapInfo' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CreateServer, LobbyName) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_CreateServer::LobbyName' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CreateServer, Password) == 0x000018, "Member 'TedOnlineSessionsControllerWidget_CreateServer::Password' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CreateServer, ReturnValue) == 0x000028, "Member 'TedOnlineSessionsControllerWidget_CreateServer::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.FindRankedSession
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_FindRankedSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_FindRankedSession) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_FindRankedSession");
static_assert(sizeof(TedOnlineSessionsControllerWidget_FindRankedSession) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_FindRankedSession");
static_assert(offsetof(TedOnlineSessionsControllerWidget_FindRankedSession, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_FindRankedSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.GetMultiplayerMenusData
// 0x001C (0x001C - 0x0000)
struct TedOnlineSessionsControllerWidget_GetMultiplayerMenusData final
{
public:
	struct FMultiplayerScreenSavedData            ReturnValue;                                       // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_GetMultiplayerMenusData) == 0x000004, "Wrong alignment on TedOnlineSessionsControllerWidget_GetMultiplayerMenusData");
static_assert(sizeof(TedOnlineSessionsControllerWidget_GetMultiplayerMenusData) == 0x00001C, "Wrong size on TedOnlineSessionsControllerWidget_GetMultiplayerMenusData");
static_assert(offsetof(TedOnlineSessionsControllerWidget_GetMultiplayerMenusData, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_GetMultiplayerMenusData::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.JoinRankedSession
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_JoinRankedSession final
{
public:
	class FString                                 InURL;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGamePort;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_JoinRankedSession) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_JoinRankedSession");
static_assert(sizeof(TedOnlineSessionsControllerWidget_JoinRankedSession) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_JoinRankedSession");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinRankedSession, InURL) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_JoinRankedSession::InURL' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinRankedSession, InGamePort) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_JoinRankedSession::InGamePort' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinRankedSession, ReturnValue) == 0x000014, "Member 'TedOnlineSessionsControllerWidget_JoinRankedSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.JoinRemoteSession
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_JoinRemoteSession final
{
public:
	class FString                                 ServerPassword;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_JoinRemoteSession) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_JoinRemoteSession");
static_assert(sizeof(TedOnlineSessionsControllerWidget_JoinRemoteSession) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_JoinRemoteSession");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinRemoteSession, ServerPassword) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_JoinRemoteSession::ServerPassword' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinRemoteSession, ReturnValue) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_JoinRemoteSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.JoinSession
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_JoinSession final
{
public:
	class FString                                 ServerPassword;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_JoinSession) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_JoinSession");
static_assert(sizeof(TedOnlineSessionsControllerWidget_JoinSession) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_JoinSession");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinSession, ServerPassword) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_JoinSession::ServerPassword' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_JoinSession, ReturnValue) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_JoinSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.K2_UpdateLobbyBrowserSelectedLobbyInfo
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo final
{
public:
	const class UTedOnlineSessionsSlot*           InSelectedLobbySlot;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo");
static_assert(sizeof(TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo");
static_assert(offsetof(TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo, InSelectedLobbySlot) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_K2_UpdateLobbyBrowserSelectedLobbyInfo::InSelectedLobbySlot' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.LogIn
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_LogIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_LogIn) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_LogIn");
static_assert(sizeof(TedOnlineSessionsControllerWidget_LogIn) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_LogIn");
static_assert(offsetof(TedOnlineSessionsControllerWidget_LogIn, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_LogIn::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.MatchmakingSearch
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_MatchmakingSearch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_MatchmakingSearch) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_MatchmakingSearch");
static_assert(sizeof(TedOnlineSessionsControllerWidget_MatchmakingSearch) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_MatchmakingSearch");
static_assert(offsetof(TedOnlineSessionsControllerWidget_MatchmakingSearch, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_MatchmakingSearch::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.MatchmakingSearchCancel
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_MatchmakingSearchCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_MatchmakingSearchCancel) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_MatchmakingSearchCancel");
static_assert(sizeof(TedOnlineSessionsControllerWidget_MatchmakingSearchCancel) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_MatchmakingSearchCancel");
static_assert(offsetof(TedOnlineSessionsControllerWidget_MatchmakingSearchCancel, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_MatchmakingSearchCancel::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnActivateLobbyListSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState, InContentPanel) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState, InContentSlot) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState, InState) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState, bInActivated) == 0x000011, "Member 'TedOnlineSessionsControllerWidget_OnActivateLobbyListSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnFindRankedSessionFinished
// 0x0020 (0x0020 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InURL;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGamePort;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished) == 0x000020, "Wrong size on TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished::bInWasSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished, InURL) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished::InURL' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished, InGamePort) == 0x000018, "Member 'TedOnlineSessionsControllerWidget_OnFindRankedSessionFinished::InGamePort' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnJoinRankedSessionFinished
// 0x0028 (0x0028 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished final
{
public:
	class ATedLobbyBeaconClient*                  InClientBeacon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSessionName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWasSuccess;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InFailText;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished) == 0x000028, "Wrong size on TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished, InClientBeacon) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished::InClientBeacon' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished, InSessionName) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished::InSessionName' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished, bInWasSuccess) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished::bInWasSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished, InFailText) == 0x000018, "Member 'TedOnlineSessionsControllerWidget_OnJoinRankedSessionFinished::InFailText' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnJoinSessionFinished
// 0x0028 (0x0028 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnJoinSessionFinished final
{
public:
	class ATedLobbyBeaconClient*                  InClientBeacon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InSessionName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInWasSuccess;                                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InFailText;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnJoinSessionFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished) == 0x000028, "Wrong size on TedOnlineSessionsControllerWidget_OnJoinSessionFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished, InClientBeacon) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnJoinSessionFinished::InClientBeacon' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished, InSessionName) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnJoinSessionFinished::InSessionName' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished, bInWasSuccess) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_OnJoinSessionFinished::bInWasSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnJoinSessionFinished, InFailText) == 0x000018, "Member 'TedOnlineSessionsControllerWidget_OnJoinSessionFinished::InFailText' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnLobbyMapChanged
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnLobbyMapChanged final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnLobbyMapChanged) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnLobbyMapChanged");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnLobbyMapChanged) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_OnLobbyMapChanged");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnLobbyMapChanged, InMapInfo) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnLobbyMapChanged::InMapInfo' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnLobbyPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded final
{
public:
	class ALobbyBeaconPlayerState*                InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded, InPlayerState) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnLobbyPlayerAdded::InPlayerState' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnLobbyPlayerRemoved
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved final
{
public:
	class ALobbyBeaconPlayerState*                InPlayerState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved, InPlayerState) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnLobbyPlayerRemoved::InPlayerState' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnLogInFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnLogInFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnLogInFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnLogInFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnLogInFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnLogInFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnLogInFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnLogInFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnMatchmakingSearchCancelFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnMatchmakingSearchCancelFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnMatchmakingSearchFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnMatchmakingSearchFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnPlayerAmountChanged
// 0x0004 (0x0004 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnPlayerAmountChanged final
{
public:
	int32                                         NewPlayerNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnPlayerAmountChanged) == 0x000004, "Wrong alignment on TedOnlineSessionsControllerWidget_OnPlayerAmountChanged");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnPlayerAmountChanged) == 0x000004, "Wrong size on TedOnlineSessionsControllerWidget_OnPlayerAmountChanged");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnPlayerAmountChanged, NewPlayerNum) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnPlayerAmountChanged::NewPlayerNum' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnReadLeaderboardsFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnReadLeaderboardsFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnRefreshingSessionsFinished
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InFailText;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished::bInWasSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished, InFailText) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnRefreshingSessionsFinished::InFailText' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnRequestAddBotPlayer
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer, InPlayersPanel) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnRequestAddBotPlayer::InPlayersPanel' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnRequestKickLobbyPlayer
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSlotIndex;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer) == 0x000010, "Wrong size on TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer, InPlayersPanel) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer::InPlayersPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer, InSlotIndex) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnRequestKickLobbyPlayer::InSlotIndex' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnRequestLobbyPlayerSettingChange
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange final
{
public:
	class UTedGameCreationPlayersPanel*           InPlayersPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InContentSlotIndex;                                // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNewValue;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InOldValue;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange, InPlayersPanel) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange::InPlayersPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange, InContentSlotIndex) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange::InContentSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange, InKey) == 0x00000C, "Member 'TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange::InKey' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange, InNewValue) == 0x000010, "Member 'TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange::InNewValue' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange, InOldValue) == 0x000014, "Member 'TedOnlineSessionsControllerWidget_OnRequestLobbyPlayerSettingChange::InOldValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnServerCreationFinished
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnServerCreationFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InFailText;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnServerCreationFinished) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnServerCreationFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnServerCreationFinished) == 0x000018, "Wrong size on TedOnlineSessionsControllerWidget_OnServerCreationFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnServerCreationFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnServerCreationFinished::bInWasSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnServerCreationFinished, InFailText) == 0x000008, "Member 'TedOnlineSessionsControllerWidget_OnServerCreationFinished::InFailText' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnServerTypeChanged
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnServerTypeChanged final
{
public:
	ETedServerType                                InPrevServerType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnServerTypeChanged) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnServerTypeChanged");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnServerTypeChanged) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnServerTypeChanged");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnServerTypeChanged, InPrevServerType) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnServerTypeChanged::InPrevServerType' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnStartGameFailed
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnStartGameFailed final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnStartGameFailed) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_OnStartGameFailed");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnStartGameFailed) == 0x000010, "Wrong size on TedOnlineSessionsControllerWidget_OnStartGameFailed");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnStartGameFailed, InText) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnStartGameFailed::InText' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnUpdateRankedMemberAndSessionSettingsFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnUpdateRankedMemberAndSessionSettingsFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.OnWaitForRankedPlayersFinished
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished final
{
public:
	bool                                          bInWasSuccess;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished");
static_assert(sizeof(TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished");
static_assert(offsetof(TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished, bInWasSuccess) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_OnWaitForRankedPlayersFinished::bInWasSuccess' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.ReadLeaderboards
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_ReadLeaderboards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_ReadLeaderboards) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_ReadLeaderboards");
static_assert(sizeof(TedOnlineSessionsControllerWidget_ReadLeaderboards) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_ReadLeaderboards");
static_assert(offsetof(TedOnlineSessionsControllerWidget_ReadLeaderboards, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_ReadLeaderboards::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.RefreshSessions
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_RefreshSessions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_RefreshSessions) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_RefreshSessions");
static_assert(sizeof(TedOnlineSessionsControllerWidget_RefreshSessions) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_RefreshSessions");
static_assert(offsetof(TedOnlineSessionsControllerWidget_RefreshSessions, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_RefreshSessions::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SaveMultiplayerMenusData
// 0x001C (0x001C - 0x0000)
struct TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData final
{
public:
	struct FMultiplayerScreenSavedData            NewData;                                           // 0x0000(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData) == 0x000004, "Wrong alignment on TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData) == 0x00001C, "Wrong size on TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData, NewData) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SaveMultiplayerMenusData::NewData' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetCurrentLobbyName
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetCurrentLobbyName final
{
public:
	class FText                                   InLobbyName;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetCurrentLobbyName) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_SetCurrentLobbyName");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetCurrentLobbyName) == 0x000010, "Wrong size on TedOnlineSessionsControllerWidget_SetCurrentLobbyName");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetCurrentLobbyName, InLobbyName) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetCurrentLobbyName::InLobbyName' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetLobbyBrowserLobbies
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies final
{
public:
	class UTedOnlineSessionsPanel*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies, InWidget) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetLobbyBrowserLobbies::InWidget' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetLobbyBrowserSelectedLobbyPlayers
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers final
{
public:
	class UTedGameCreationPlayersPanel*           InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers, InWidget) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbyPlayers::InWidget' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetLobbyBrowserSelectedLobbySettings
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings final
{
public:
	class UTedGameCreationSettingsWidget*         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings, InWidget) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetLobbyBrowserSelectedLobbySettings::InWidget' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetRankedFactionType
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetRankedFactionType final
{
public:
	ETedRankedFaction                             InFaction;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetRankedFactionType) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_SetRankedFactionType");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetRankedFactionType) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_SetRankedFactionType");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetRankedFactionType, InFaction) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetRankedFactionType::InFaction' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetRankedTeamType
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetRankedTeamType final
{
public:
	ETedRankedTeam                                InTeam;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetRankedTeamType) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_SetRankedTeamType");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetRankedTeamType) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_SetRankedTeamType");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetRankedTeamType, InTeam) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetRankedTeamType::InTeam' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetReadyState
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetReadyState final
{
public:
	bool                                          bInReady;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetReadyState) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_SetReadyState");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetReadyState) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_SetReadyState");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetReadyState, bInReady) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetReadyState::bInReady' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.SetServerType
// 0x0002 (0x0002 - 0x0000)
struct TedOnlineSessionsControllerWidget_SetServerType final
{
public:
	ETedServerType                                InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_SetServerType) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_SetServerType");
static_assert(sizeof(TedOnlineSessionsControllerWidget_SetServerType) == 0x000002, "Wrong size on TedOnlineSessionsControllerWidget_SetServerType");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetServerType, InType) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_SetServerType::InType' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsControllerWidget_SetServerType, bForce) == 0x000001, "Member 'TedOnlineSessionsControllerWidget_SetServerType::bForce' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.StartGame
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_StartGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_StartGame) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_StartGame");
static_assert(sizeof(TedOnlineSessionsControllerWidget_StartGame) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_StartGame");
static_assert(offsetof(TedOnlineSessionsControllerWidget_StartGame, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_StartGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.CanEditLobby
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_CanEditLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_CanEditLobby) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_CanEditLobby");
static_assert(sizeof(TedOnlineSessionsControllerWidget_CanEditLobby) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_CanEditLobby");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CanEditLobby, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_CanEditLobby::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.CanEverCreateServer
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_CanEverCreateServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_CanEverCreateServer) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_CanEverCreateServer");
static_assert(sizeof(TedOnlineSessionsControllerWidget_CanEverCreateServer) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_CanEverCreateServer");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CanEverCreateServer, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_CanEverCreateServer::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.CanStartGame
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_CanStartGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_CanStartGame) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_CanStartGame");
static_assert(sizeof(TedOnlineSessionsControllerWidget_CanStartGame) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_CanStartGame");
static_assert(offsetof(TedOnlineSessionsControllerWidget_CanStartGame, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_CanStartGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.GetClientBeacon
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_GetClientBeacon final
{
public:
	class ATedLobbyBeaconClient*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_GetClientBeacon) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_GetClientBeacon");
static_assert(sizeof(TedOnlineSessionsControllerWidget_GetClientBeacon) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_GetClientBeacon");
static_assert(offsetof(TedOnlineSessionsControllerWidget_GetClientBeacon, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_GetClientBeacon::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.GetLobbySelectedMap
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_GetLobbySelectedMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_GetLobbySelectedMap) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_GetLobbySelectedMap");
static_assert(sizeof(TedOnlineSessionsControllerWidget_GetLobbySelectedMap) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_GetLobbySelectedMap");
static_assert(offsetof(TedOnlineSessionsControllerWidget_GetLobbySelectedMap, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_GetLobbySelectedMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.GetSelectedLobbySlot
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsControllerWidget_GetSelectedLobbySlot final
{
public:
	const class UTedOnlineSessionsSlot*           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_GetSelectedLobbySlot) == 0x000008, "Wrong alignment on TedOnlineSessionsControllerWidget_GetSelectedLobbySlot");
static_assert(sizeof(TedOnlineSessionsControllerWidget_GetSelectedLobbySlot) == 0x000008, "Wrong size on TedOnlineSessionsControllerWidget_GetSelectedLobbySlot");
static_assert(offsetof(TedOnlineSessionsControllerWidget_GetSelectedLobbySlot, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_GetSelectedLobbySlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.GetServerType
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_GetServerType final
{
public:
	ETedServerType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_GetServerType) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_GetServerType");
static_assert(sizeof(TedOnlineSessionsControllerWidget_GetServerType) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_GetServerType");
static_assert(offsetof(TedOnlineSessionsControllerWidget_GetServerType, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_GetServerType::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.IsInSession
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_IsInSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_IsInSession) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_IsInSession");
static_assert(sizeof(TedOnlineSessionsControllerWidget_IsInSession) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_IsInSession");
static_assert(offsetof(TedOnlineSessionsControllerWidget_IsInSession, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_IsInSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_IsLoggedIn) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_IsLoggedIn");
static_assert(sizeof(TedOnlineSessionsControllerWidget_IsLoggedIn) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_IsLoggedIn");
static_assert(offsetof(TedOnlineSessionsControllerWidget_IsLoggedIn, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.IsMatchmakingSearchInProgress
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress");
static_assert(sizeof(TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress");
static_assert(offsetof(TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_IsMatchmakingSearchInProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.IsReady
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_IsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_IsReady) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_IsReady");
static_assert(sizeof(TedOnlineSessionsControllerWidget_IsReady) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_IsReady");
static_assert(offsetof(TedOnlineSessionsControllerWidget_IsReady, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_IsReady::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.IsSpectator
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_IsSpectator final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_IsSpectator) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_IsSpectator");
static_assert(sizeof(TedOnlineSessionsControllerWidget_IsSpectator) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_IsSpectator");
static_assert(offsetof(TedOnlineSessionsControllerWidget_IsSpectator, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_IsSpectator::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsControllerWidget.WereRankedMapsSaved
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsControllerWidget_WereRankedMapsSaved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsControllerWidget_WereRankedMapsSaved) == 0x000001, "Wrong alignment on TedOnlineSessionsControllerWidget_WereRankedMapsSaved");
static_assert(sizeof(TedOnlineSessionsControllerWidget_WereRankedMapsSaved) == 0x000001, "Wrong size on TedOnlineSessionsControllerWidget_WereRankedMapsSaved");
static_assert(offsetof(TedOnlineSessionsControllerWidget_WereRankedMapsSaved, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsControllerWidget_WereRankedMapsSaved::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability) == 0x000004, "Wrong alignment on TedGlobalTags_Ability");
static_assert(sizeof(TedGlobalTags_Ability) == 0x000008, "Wrong size on TedGlobalTags_Ability");
static_assert(offsetof(TedGlobalTags_Ability, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Attack
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Attack final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Attack) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Attack");
static_assert(sizeof(TedGlobalTags_Ability_Attack) == 0x000008, "Wrong size on TedGlobalTags_Ability_Attack");
static_assert(offsetof(TedGlobalTags_Ability_Attack, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Attack::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Attack_Looping
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Attack_Looping final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Attack_Looping) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Attack_Looping");
static_assert(sizeof(TedGlobalTags_Ability_Attack_Looping) == 0x000008, "Wrong size on TedGlobalTags_Ability_Attack_Looping");
static_assert(offsetof(TedGlobalTags_Ability_Attack_Looping, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Attack_Looping::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Blocked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Blocked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Blocked) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Blocked");
static_assert(sizeof(TedGlobalTags_Ability_Blocked) == 0x000008, "Wrong size on TedGlobalTags_Ability_Blocked");
static_assert(offsetof(TedGlobalTags_Ability_Blocked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Blocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_CaptureStructure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_CaptureStructure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_CaptureStructure) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_CaptureStructure");
static_assert(sizeof(TedGlobalTags_Ability_CaptureStructure) == 0x000008, "Wrong size on TedGlobalTags_Ability_CaptureStructure");
static_assert(offsetof(TedGlobalTags_Ability_CaptureStructure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_CaptureStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Death
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Death final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Death) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Death");
static_assert(sizeof(TedGlobalTags_Ability_Death) == 0x000008, "Wrong size on TedGlobalTags_Ability_Death");
static_assert(offsetof(TedGlobalTags_Ability_Death, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Death::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_DeployStructure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_DeployStructure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_DeployStructure) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_DeployStructure");
static_assert(sizeof(TedGlobalTags_Ability_DeployStructure) == 0x000008, "Wrong size on TedGlobalTags_Ability_DeployStructure");
static_assert(offsetof(TedGlobalTags_Ability_DeployStructure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_DeployStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_DepositResource
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_DepositResource final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_DepositResource) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_DepositResource");
static_assert(sizeof(TedGlobalTags_Ability_DepositResource) == 0x000008, "Wrong size on TedGlobalTags_Ability_DepositResource");
static_assert(offsetof(TedGlobalTags_Ability_DepositResource, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_DepositResource::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_DismantleStructure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_DismantleStructure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_DismantleStructure) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_DismantleStructure");
static_assert(sizeof(TedGlobalTags_Ability_DismantleStructure) == 0x000008, "Wrong size on TedGlobalTags_Ability_DismantleStructure");
static_assert(offsetof(TedGlobalTags_Ability_DismantleStructure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_DismantleStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Enqueue
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Enqueue final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Enqueue) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Enqueue");
static_assert(sizeof(TedGlobalTags_Ability_Enqueue) == 0x000008, "Wrong size on TedGlobalTags_Ability_Enqueue");
static_assert(offsetof(TedGlobalTags_Ability_Enqueue, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Enqueue::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Plan
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Plan final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Plan) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Plan");
static_assert(sizeof(TedGlobalTags_Ability_Plan) == 0x000008, "Wrong size on TedGlobalTags_Ability_Plan");
static_assert(offsetof(TedGlobalTags_Ability_Plan, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Plan::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Ranged
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Ranged final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Ranged) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Ranged");
static_assert(sizeof(TedGlobalTags_Ability_Ranged) == 0x000008, "Wrong size on TedGlobalTags_Ability_Ranged");
static_assert(offsetof(TedGlobalTags_Ability_Ranged, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Ranged::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_SpawnUnit
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_SpawnUnit final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_SpawnUnit) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_SpawnUnit");
static_assert(sizeof(TedGlobalTags_Ability_SpawnUnit) == 0x000008, "Wrong size on TedGlobalTags_Ability_SpawnUnit");
static_assert(offsetof(TedGlobalTags_Ability_SpawnUnit, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_SpawnUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_SpawnUnit_Enlightened
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_SpawnUnit_Enlightened final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_SpawnUnit_Enlightened) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_SpawnUnit_Enlightened");
static_assert(sizeof(TedGlobalTags_Ability_SpawnUnit_Enlightened) == 0x000008, "Wrong size on TedGlobalTags_Ability_SpawnUnit_Enlightened");
static_assert(offsetof(TedGlobalTags_Ability_SpawnUnit_Enlightened, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_SpawnUnit_Enlightened::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Stealth
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Stealth final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Stealth) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Stealth");
static_assert(sizeof(TedGlobalTags_Ability_Stealth) == 0x000008, "Wrong size on TedGlobalTags_Ability_Stealth");
static_assert(offsetof(TedGlobalTags_Ability_Stealth, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Stealth::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Stealth_Blocked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Stealth_Blocked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Stealth_Blocked) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Stealth_Blocked");
static_assert(sizeof(TedGlobalTags_Ability_Stealth_Blocked) == 0x000008, "Wrong size on TedGlobalTags_Ability_Stealth_Blocked");
static_assert(offsetof(TedGlobalTags_Ability_Stealth_Blocked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Stealth_Blocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Ability_Teleport
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Ability_Teleport final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Ability_Teleport) == 0x000004, "Wrong alignment on TedGlobalTags_Ability_Teleport");
static_assert(sizeof(TedGlobalTags_Ability_Teleport) == 0x000008, "Wrong size on TedGlobalTags_Ability_Teleport");
static_assert(offsetof(TedGlobalTags_Ability_Teleport, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Ability_Teleport::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AbilityActivationFailure_BlockedTag
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AbilityActivationFailure_BlockedTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AbilityActivationFailure_BlockedTag) == 0x000004, "Wrong alignment on TedGlobalTags_AbilityActivationFailure_BlockedTag");
static_assert(sizeof(TedGlobalTags_AbilityActivationFailure_BlockedTag) == 0x000008, "Wrong size on TedGlobalTags_AbilityActivationFailure_BlockedTag");
static_assert(offsetof(TedGlobalTags_AbilityActivationFailure_BlockedTag, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AbilityActivationFailure_BlockedTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AbilityActivationFailure_Cooldown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AbilityActivationFailure_Cooldown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AbilityActivationFailure_Cooldown) == 0x000004, "Wrong alignment on TedGlobalTags_AbilityActivationFailure_Cooldown");
static_assert(sizeof(TedGlobalTags_AbilityActivationFailure_Cooldown) == 0x000008, "Wrong size on TedGlobalTags_AbilityActivationFailure_Cooldown");
static_assert(offsetof(TedGlobalTags_AbilityActivationFailure_Cooldown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AbilityActivationFailure_Cooldown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AbilityActivationFailure_Cost
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AbilityActivationFailure_Cost final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AbilityActivationFailure_Cost) == 0x000004, "Wrong alignment on TedGlobalTags_AbilityActivationFailure_Cost");
static_assert(sizeof(TedGlobalTags_AbilityActivationFailure_Cost) == 0x000008, "Wrong size on TedGlobalTags_AbilityActivationFailure_Cost");
static_assert(offsetof(TedGlobalTags_AbilityActivationFailure_Cost, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AbilityActivationFailure_Cost::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AbilityActivationFailure_MissingTag
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AbilityActivationFailure_MissingTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AbilityActivationFailure_MissingTag) == 0x000004, "Wrong alignment on TedGlobalTags_AbilityActivationFailure_MissingTag");
static_assert(sizeof(TedGlobalTags_AbilityActivationFailure_MissingTag) == 0x000008, "Wrong size on TedGlobalTags_AbilityActivationFailure_MissingTag");
static_assert(offsetof(TedGlobalTags_AbilityActivationFailure_MissingTag, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AbilityActivationFailure_MissingTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Aircraft
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Aircraft final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Aircraft) == 0x000004, "Wrong alignment on TedGlobalTags_Aircraft");
static_assert(sizeof(TedGlobalTags_Aircraft) == 0x000008, "Wrong size on TedGlobalTags_Aircraft");
static_assert(offsetof(TedGlobalTags_Aircraft, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Aircraft::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Attack
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Attack final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Attack) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Attack");
static_assert(sizeof(TedGlobalTags_AnimMontage_Attack) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Attack");
static_assert(offsetof(TedGlobalTags_AnimMontage_Attack, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Attack::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Attack_Crawling
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Attack_Crawling final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Attack_Crawling) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Attack_Crawling");
static_assert(sizeof(TedGlobalTags_AnimMontage_Attack_Crawling) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Attack_Crawling");
static_assert(offsetof(TedGlobalTags_AnimMontage_Attack_Crawling, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Attack_Crawling::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Attack_Standing
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Attack_Standing final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Attack_Standing) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Attack_Standing");
static_assert(sizeof(TedGlobalTags_AnimMontage_Attack_Standing) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Attack_Standing");
static_assert(offsetof(TedGlobalTags_AnimMontage_Attack_Standing, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Attack_Standing::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Death
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Death final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Death) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Death");
static_assert(sizeof(TedGlobalTags_AnimMontage_Death) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Death");
static_assert(offsetof(TedGlobalTags_AnimMontage_Death, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Death::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Death_Crawling
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Death_Crawling final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Death_Crawling) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Death_Crawling");
static_assert(sizeof(TedGlobalTags_AnimMontage_Death_Crawling) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Death_Crawling");
static_assert(offsetof(TedGlobalTags_AnimMontage_Death_Crawling, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Death_Crawling::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_Death_Standing
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_Death_Standing final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_Death_Standing) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_Death_Standing");
static_assert(sizeof(TedGlobalTags_AnimMontage_Death_Standing) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_Death_Standing");
static_assert(offsetof(TedGlobalTags_AnimMontage_Death_Standing, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_Death_Standing::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.AnimMontage_OpenDoor
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_AnimMontage_OpenDoor final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_AnimMontage_OpenDoor) == 0x000004, "Wrong alignment on TedGlobalTags_AnimMontage_OpenDoor");
static_assert(sizeof(TedGlobalTags_AnimMontage_OpenDoor) == 0x000008, "Wrong size on TedGlobalTags_AnimMontage_OpenDoor");
static_assert(offsetof(TedGlobalTags_AnimMontage_OpenDoor, ReturnValue) == 0x000000, "Member 'TedGlobalTags_AnimMontage_OpenDoor::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Announcement_UnderAttack
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Announcement_UnderAttack final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Announcement_UnderAttack) == 0x000004, "Wrong alignment on TedGlobalTags_Announcement_UnderAttack");
static_assert(sizeof(TedGlobalTags_Announcement_UnderAttack) == 0x000008, "Wrong size on TedGlobalTags_Announcement_UnderAttack");
static_assert(offsetof(TedGlobalTags_Announcement_UnderAttack, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Announcement_UnderAttack::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Behavior_Command
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Behavior_Command final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Behavior_Command) == 0x000004, "Wrong alignment on TedGlobalTags_Behavior_Command");
static_assert(sizeof(TedGlobalTags_Behavior_Command) == 0x000008, "Wrong size on TedGlobalTags_Behavior_Command");
static_assert(offsetof(TedGlobalTags_Behavior_Command, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Behavior_Command::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Behavior_Idle
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Behavior_Idle final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Behavior_Idle) == 0x000004, "Wrong alignment on TedGlobalTags_Behavior_Idle");
static_assert(sizeof(TedGlobalTags_Behavior_Idle) == 0x000008, "Wrong size on TedGlobalTags_Behavior_Idle");
static_assert(offsetof(TedGlobalTags_Behavior_Idle, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Behavior_Idle::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Command_Autocast
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Command_Autocast final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Command_Autocast) == 0x000004, "Wrong alignment on TedGlobalTags_Command_Autocast");
static_assert(sizeof(TedGlobalTags_Command_Autocast) == 0x000008, "Wrong size on TedGlobalTags_Command_Autocast");
static_assert(offsetof(TedGlobalTags_Command_Autocast, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Command_Autocast::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Attack
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Attack final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Attack) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Attack");
static_assert(sizeof(TedGlobalTags_CommandType_Attack) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Attack");
static_assert(offsetof(TedGlobalTags_CommandType_Attack, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Attack::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_AttackGround
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_AttackGround final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_AttackGround) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_AttackGround");
static_assert(sizeof(TedGlobalTags_CommandType_AttackGround) == 0x000008, "Wrong size on TedGlobalTags_CommandType_AttackGround");
static_assert(offsetof(TedGlobalTags_CommandType_AttackGround, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_AttackGround::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_AutoHarvest
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_AutoHarvest final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_AutoHarvest) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_AutoHarvest");
static_assert(sizeof(TedGlobalTags_CommandType_AutoHarvest) == 0x000008, "Wrong size on TedGlobalTags_CommandType_AutoHarvest");
static_assert(offsetof(TedGlobalTags_CommandType_AutoHarvest, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_AutoHarvest::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_CaptureStructure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_CaptureStructure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_CaptureStructure) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_CaptureStructure");
static_assert(sizeof(TedGlobalTags_CommandType_CaptureStructure) == 0x000008, "Wrong size on TedGlobalTags_CommandType_CaptureStructure");
static_assert(offsetof(TedGlobalTags_CommandType_CaptureStructure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_CaptureStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Deconstruct
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Deconstruct final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Deconstruct) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Deconstruct");
static_assert(sizeof(TedGlobalTags_CommandType_Deconstruct) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Deconstruct");
static_assert(offsetof(TedGlobalTags_CommandType_Deconstruct, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Deconstruct::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_DeployStructure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_DeployStructure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_DeployStructure) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_DeployStructure");
static_assert(sizeof(TedGlobalTags_CommandType_DeployStructure) == 0x000008, "Wrong size on TedGlobalTags_CommandType_DeployStructure");
static_assert(offsetof(TedGlobalTags_CommandType_DeployStructure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_DeployStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_DisarmMine
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_DisarmMine final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_DisarmMine) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_DisarmMine");
static_assert(sizeof(TedGlobalTags_CommandType_DisarmMine) == 0x000008, "Wrong size on TedGlobalTags_CommandType_DisarmMine");
static_assert(offsetof(TedGlobalTags_CommandType_DisarmMine, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_DisarmMine::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_EnterContainer
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_EnterContainer final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_EnterContainer) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_EnterContainer");
static_assert(sizeof(TedGlobalTags_CommandType_EnterContainer) == 0x000008, "Wrong size on TedGlobalTags_CommandType_EnterContainer");
static_assert(offsetof(TedGlobalTags_CommandType_EnterContainer, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_EnterContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Escort
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Escort final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Escort) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Escort");
static_assert(sizeof(TedGlobalTags_CommandType_Escort) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Escort");
static_assert(offsetof(TedGlobalTags_CommandType_Escort, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Escort::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Follow
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Follow final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Follow) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Follow");
static_assert(sizeof(TedGlobalTags_CommandType_Follow) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Follow");
static_assert(offsetof(TedGlobalTags_CommandType_Follow, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Follow::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_GuardLocation
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_GuardLocation final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_GuardLocation) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_GuardLocation");
static_assert(sizeof(TedGlobalTags_CommandType_GuardLocation) == 0x000008, "Wrong size on TedGlobalTags_CommandType_GuardLocation");
static_assert(offsetof(TedGlobalTags_CommandType_GuardLocation, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_GuardLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Harvest
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Harvest final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Harvest) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Harvest");
static_assert(sizeof(TedGlobalTags_CommandType_Harvest) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Harvest");
static_assert(offsetof(TedGlobalTags_CommandType_Harvest, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Harvest::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_HoldPosition
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_HoldPosition final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_HoldPosition) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_HoldPosition");
static_assert(sizeof(TedGlobalTags_CommandType_HoldPosition) == 0x000008, "Wrong size on TedGlobalTags_CommandType_HoldPosition");
static_assert(offsetof(TedGlobalTags_CommandType_HoldPosition, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_HoldPosition::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Move
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Move final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Move) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Move");
static_assert(sizeof(TedGlobalTags_CommandType_Move) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Move");
static_assert(offsetof(TedGlobalTags_CommandType_Move, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Move::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Patrol
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Patrol final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Patrol) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Patrol");
static_assert(sizeof(TedGlobalTags_CommandType_Patrol) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Patrol");
static_assert(offsetof(TedGlobalTags_CommandType_Patrol, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Patrol::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Repair
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Repair final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Repair) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Repair");
static_assert(sizeof(TedGlobalTags_CommandType_Repair) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Repair");
static_assert(offsetof(TedGlobalTags_CommandType_Repair, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Repair::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_SetRallyPoint
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_SetRallyPoint final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_SetRallyPoint) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_SetRallyPoint");
static_assert(sizeof(TedGlobalTags_CommandType_SetRallyPoint) == 0x000008, "Wrong size on TedGlobalTags_CommandType_SetRallyPoint");
static_assert(offsetof(TedGlobalTags_CommandType_SetRallyPoint, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_SetRallyPoint::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_Stop
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_Stop final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_Stop) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_Stop");
static_assert(sizeof(TedGlobalTags_CommandType_Stop) == 0x000008, "Wrong size on TedGlobalTags_CommandType_Stop");
static_assert(offsetof(TedGlobalTags_CommandType_Stop, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_Stop::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_SubjugationSpawn
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_SubjugationSpawn final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_SubjugationSpawn) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_SubjugationSpawn");
static_assert(sizeof(TedGlobalTags_CommandType_SubjugationSpawn) == 0x000008, "Wrong size on TedGlobalTags_CommandType_SubjugationSpawn");
static_assert(offsetof(TedGlobalTags_CommandType_SubjugationSpawn, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_SubjugationSpawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_SupportPower
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_SupportPower final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_SupportPower) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_SupportPower");
static_assert(sizeof(TedGlobalTags_CommandType_SupportPower) == 0x000008, "Wrong size on TedGlobalTags_CommandType_SupportPower");
static_assert(offsetof(TedGlobalTags_CommandType_SupportPower, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_SupportPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.CommandType_UnloadContainer
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_CommandType_UnloadContainer final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_CommandType_UnloadContainer) == 0x000004, "Wrong alignment on TedGlobalTags_CommandType_UnloadContainer");
static_assert(sizeof(TedGlobalTags_CommandType_UnloadContainer) == 0x000008, "Wrong size on TedGlobalTags_CommandType_UnloadContainer");
static_assert(offsetof(TedGlobalTags_CommandType_UnloadContainer, ReturnValue) == 0x000000, "Member 'TedGlobalTags_CommandType_UnloadContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Definition_Mutable_TempestCharge
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Definition_Mutable_TempestCharge final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Definition_Mutable_TempestCharge) == 0x000004, "Wrong alignment on TedGlobalTags_Definition_Mutable_TempestCharge");
static_assert(sizeof(TedGlobalTags_Definition_Mutable_TempestCharge) == 0x000008, "Wrong size on TedGlobalTags_Definition_Mutable_TempestCharge");
static_assert(offsetof(TedGlobalTags_Definition_Mutable_TempestCharge, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Definition_Mutable_TempestCharge::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Destructible
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Destructible final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Destructible) == 0x000004, "Wrong alignment on TedGlobalTags_Destructible");
static_assert(sizeof(TedGlobalTags_Destructible) == 0x000008, "Wrong size on TedGlobalTags_Destructible");
static_assert(offsetof(TedGlobalTags_Destructible, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Destructible::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Domain_Air
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Domain_Air final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Domain_Air) == 0x000004, "Wrong alignment on TedGlobalTags_Domain_Air");
static_assert(sizeof(TedGlobalTags_Domain_Air) == 0x000008, "Wrong size on TedGlobalTags_Domain_Air");
static_assert(offsetof(TedGlobalTags_Domain_Air, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Domain_Air::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Domain_Ground
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Domain_Ground final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Domain_Ground) == 0x000004, "Wrong alignment on TedGlobalTags_Domain_Ground");
static_assert(sizeof(TedGlobalTags_Domain_Ground) == 0x000008, "Wrong size on TedGlobalTags_Domain_Ground");
static_assert(offsetof(TedGlobalTags_Domain_Ground, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Domain_Ground::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Harvester
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Harvester final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Harvester) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Harvester");
static_assert(sizeof(TedGlobalTags_DYN_Harvester) == 0x000008, "Wrong size on TedGlobalTags_DYN_Harvester");
static_assert(offsetof(TedGlobalTags_DYN_Harvester, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Harvester::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_AirFactory
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_AirFactory final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_AirFactory) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_AirFactory");
static_assert(sizeof(TedGlobalTags_DYN_Structure_AirFactory) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_AirFactory");
static_assert(offsetof(TedGlobalTags_DYN_Structure_AirFactory, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_AirFactory::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_Airpad
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_Airpad final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_Airpad) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_Airpad");
static_assert(sizeof(TedGlobalTags_DYN_Structure_Airpad) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_Airpad");
static_assert(offsetof(TedGlobalTags_DYN_Structure_Airpad, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_Airpad::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_Barracks
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_Barracks final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_Barracks) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_Barracks");
static_assert(sizeof(TedGlobalTags_DYN_Structure_Barracks) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_Barracks");
static_assert(offsetof(TedGlobalTags_DYN_Structure_Barracks, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_Barracks::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_ConcreteWall
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_ConcreteWall final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_ConcreteWall) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_ConcreteWall");
static_assert(sizeof(TedGlobalTags_DYN_Structure_ConcreteWall) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_ConcreteWall");
static_assert(offsetof(TedGlobalTags_DYN_Structure_ConcreteWall, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_ConcreteWall::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_ConstructionYard
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_ConstructionYard final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_ConstructionYard) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_ConstructionYard");
static_assert(sizeof(TedGlobalTags_DYN_Structure_ConstructionYard) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_ConstructionYard");
static_assert(offsetof(TedGlobalTags_DYN_Structure_ConstructionYard, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_ConstructionYard::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_PowerPlant
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_PowerPlant final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_PowerPlant) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_PowerPlant");
static_assert(sizeof(TedGlobalTags_DYN_Structure_PowerPlant) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_PowerPlant");
static_assert(offsetof(TedGlobalTags_DYN_Structure_PowerPlant, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_PowerPlant::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.DYN_Structure_Radar
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_DYN_Structure_Radar final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_DYN_Structure_Radar) == 0x000004, "Wrong alignment on TedGlobalTags_DYN_Structure_Radar");
static_assert(sizeof(TedGlobalTags_DYN_Structure_Radar) == 0x000008, "Wrong size on TedGlobalTags_DYN_Structure_Radar");
static_assert(offsetof(TedGlobalTags_DYN_Structure_Radar, ReturnValue) == 0x000000, "Member 'TedGlobalTags_DYN_Structure_Radar::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_BlockedGroundTargeting
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_BlockedGroundTargeting final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_BlockedGroundTargeting) == 0x000004, "Wrong alignment on TedGlobalTags_Error_BlockedGroundTargeting");
static_assert(sizeof(TedGlobalTags_Error_BlockedGroundTargeting) == 0x000008, "Wrong size on TedGlobalTags_Error_BlockedGroundTargeting");
static_assert(offsetof(TedGlobalTags_Error_BlockedGroundTargeting, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_BlockedGroundTargeting::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_DeadTarget
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_DeadTarget final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_DeadTarget) == 0x000004, "Wrong alignment on TedGlobalTags_Error_DeadTarget");
static_assert(sizeof(TedGlobalTags_Error_DeadTarget) == 0x000008, "Wrong size on TedGlobalTags_Error_DeadTarget");
static_assert(offsetof(TedGlobalTags_Error_DeadTarget, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_DeadTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidAttitude
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidAttitude final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidAttitude) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidAttitude");
static_assert(sizeof(TedGlobalTags_Error_InvalidAttitude) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidAttitude");
static_assert(offsetof(TedGlobalTags_Error_InvalidAttitude, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidAttitude::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidOwner
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidOwner final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidOwner) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidOwner");
static_assert(sizeof(TedGlobalTags_Error_InvalidOwner) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidOwner");
static_assert(offsetof(TedGlobalTags_Error_InvalidOwner, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidOwner::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidPowerState
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidPowerState final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidPowerState) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidPowerState");
static_assert(sizeof(TedGlobalTags_Error_InvalidPowerState) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidPowerState");
static_assert(offsetof(TedGlobalTags_Error_InvalidPowerState, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidPowerState::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidTag
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidTag) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidTag");
static_assert(sizeof(TedGlobalTags_Error_InvalidTag) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidTag");
static_assert(offsetof(TedGlobalTags_Error_InvalidTag, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidTarget
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidTarget final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidTarget) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidTarget");
static_assert(sizeof(TedGlobalTags_Error_InvalidTarget) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidTarget");
static_assert(offsetof(TedGlobalTags_Error_InvalidTarget, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidTargetDomain
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidTargetDomain final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidTargetDomain) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidTargetDomain");
static_assert(sizeof(TedGlobalTags_Error_InvalidTargetDomain) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidTargetDomain");
static_assert(offsetof(TedGlobalTags_Error_InvalidTargetDomain, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidTargetDomain::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvalidTargetLocation
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvalidTargetLocation final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvalidTargetLocation) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvalidTargetLocation");
static_assert(sizeof(TedGlobalTags_Error_InvalidTargetLocation) == 0x000008, "Wrong size on TedGlobalTags_Error_InvalidTargetLocation");
static_assert(offsetof(TedGlobalTags_Error_InvalidTargetLocation, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvalidTargetLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_InvisibleTarget
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_InvisibleTarget final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_InvisibleTarget) == 0x000004, "Wrong alignment on TedGlobalTags_Error_InvisibleTarget");
static_assert(sizeof(TedGlobalTags_Error_InvisibleTarget) == 0x000008, "Wrong size on TedGlobalTags_Error_InvisibleTarget");
static_assert(offsetof(TedGlobalTags_Error_InvisibleTarget, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_InvisibleTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_MissingGameplayTagAssetInterface
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_MissingGameplayTagAssetInterface final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_MissingGameplayTagAssetInterface) == 0x000004, "Wrong alignment on TedGlobalTags_Error_MissingGameplayTagAssetInterface");
static_assert(sizeof(TedGlobalTags_Error_MissingGameplayTagAssetInterface) == 0x000008, "Wrong size on TedGlobalTags_Error_MissingGameplayTagAssetInterface");
static_assert(offsetof(TedGlobalTags_Error_MissingGameplayTagAssetInterface, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_MissingGameplayTagAssetInterface::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_MissingPrerequisites
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_MissingPrerequisites final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_MissingPrerequisites) == 0x000004, "Wrong alignment on TedGlobalTags_Error_MissingPrerequisites");
static_assert(sizeof(TedGlobalTags_Error_MissingPrerequisites) == 0x000008, "Wrong size on TedGlobalTags_Error_MissingPrerequisites");
static_assert(offsetof(TedGlobalTags_Error_MissingPrerequisites, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_MissingPrerequisites::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_NotInRange
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_NotInRange final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_NotInRange) == 0x000004, "Wrong alignment on TedGlobalTags_Error_NotInRange");
static_assert(sizeof(TedGlobalTags_Error_NotInRange) == 0x000008, "Wrong size on TedGlobalTags_Error_NotInRange");
static_assert(offsetof(TedGlobalTags_Error_NotInRange, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_NotInRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_RequiredAirTarget
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_RequiredAirTarget final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_RequiredAirTarget) == 0x000004, "Wrong alignment on TedGlobalTags_Error_RequiredAirTarget");
static_assert(sizeof(TedGlobalTags_Error_RequiredAirTarget) == 0x000008, "Wrong size on TedGlobalTags_Error_RequiredAirTarget");
static_assert(offsetof(TedGlobalTags_Error_RequiredAirTarget, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_RequiredAirTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_RequiredGroundTarget
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_RequiredGroundTarget final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_RequiredGroundTarget) == 0x000004, "Wrong alignment on TedGlobalTags_Error_RequiredGroundTarget");
static_assert(sizeof(TedGlobalTags_Error_RequiredGroundTarget) == 0x000008, "Wrong size on TedGlobalTags_Error_RequiredGroundTarget");
static_assert(offsetof(TedGlobalTags_Error_RequiredGroundTarget, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_RequiredGroundTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_UnitCantMove
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_UnitCantMove final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_UnitCantMove) == 0x000004, "Wrong alignment on TedGlobalTags_Error_UnitCantMove");
static_assert(sizeof(TedGlobalTags_Error_UnitCantMove) == 0x000008, "Wrong size on TedGlobalTags_Error_UnitCantMove");
static_assert(offsetof(TedGlobalTags_Error_UnitCantMove, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_UnitCantMove::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_WeaponNotFound
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_WeaponNotFound final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_WeaponNotFound) == 0x000004, "Wrong alignment on TedGlobalTags_Error_WeaponNotFound");
static_assert(sizeof(TedGlobalTags_Error_WeaponNotFound) == 0x000008, "Wrong size on TedGlobalTags_Error_WeaponNotFound");
static_assert(offsetof(TedGlobalTags_Error_WeaponNotFound, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_WeaponNotFound::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Error_WeaponRequirementsNotMet
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Error_WeaponRequirementsNotMet final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Error_WeaponRequirementsNotMet) == 0x000004, "Wrong alignment on TedGlobalTags_Error_WeaponRequirementsNotMet");
static_assert(sizeof(TedGlobalTags_Error_WeaponRequirementsNotMet) == 0x000008, "Wrong size on TedGlobalTags_Error_WeaponRequirementsNotMet");
static_assert(offsetof(TedGlobalTags_Error_WeaponRequirementsNotMet, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Error_WeaponRequirementsNotMet::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event) == 0x000004, "Wrong alignment on TedGlobalTags_Event");
static_assert(sizeof(TedGlobalTags_Event) == 0x000008, "Wrong size on TedGlobalTags_Event");
static_assert(offsetof(TedGlobalTags_Event, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event_DealDamage
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event_DealDamage final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event_DealDamage) == 0x000004, "Wrong alignment on TedGlobalTags_Event_DealDamage");
static_assert(sizeof(TedGlobalTags_Event_DealDamage) == 0x000008, "Wrong size on TedGlobalTags_Event_DealDamage");
static_assert(offsetof(TedGlobalTags_Event_DealDamage, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event_DealDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event_DeployParachute
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event_DeployParachute final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event_DeployParachute) == 0x000004, "Wrong alignment on TedGlobalTags_Event_DeployParachute");
static_assert(sizeof(TedGlobalTags_Event_DeployParachute) == 0x000008, "Wrong size on TedGlobalTags_Event_DeployParachute");
static_assert(offsetof(TedGlobalTags_Event_DeployParachute, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event_DeployParachute::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event_DeployPawn
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event_DeployPawn final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event_DeployPawn) == 0x000004, "Wrong alignment on TedGlobalTags_Event_DeployPawn");
static_assert(sizeof(TedGlobalTags_Event_DeployPawn) == 0x000008, "Wrong size on TedGlobalTags_Event_DeployPawn");
static_assert(offsetof(TedGlobalTags_Event_DeployPawn, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event_DeployPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event_ShootProjectile
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event_ShootProjectile final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event_ShootProjectile) == 0x000004, "Wrong alignment on TedGlobalTags_Event_ShootProjectile");
static_assert(sizeof(TedGlobalTags_Event_ShootProjectile) == 0x000008, "Wrong size on TedGlobalTags_Event_ShootProjectile");
static_assert(offsetof(TedGlobalTags_Event_ShootProjectile, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event_ShootProjectile::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Event_SpawnPawn
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Event_SpawnPawn final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Event_SpawnPawn) == 0x000004, "Wrong alignment on TedGlobalTags_Event_SpawnPawn");
static_assert(sizeof(TedGlobalTags_Event_SpawnPawn) == 0x000008, "Wrong size on TedGlobalTags_Event_SpawnPawn");
static_assert(offsetof(TedGlobalTags_Event_SpawnPawn, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Event_SpawnPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GameplayCue
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GameplayCue final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GameplayCue) == 0x000004, "Wrong alignment on TedGlobalTags_GameplayCue");
static_assert(sizeof(TedGlobalTags_GameplayCue) == 0x000008, "Wrong size on TedGlobalTags_GameplayCue");
static_assert(offsetof(TedGlobalTags_GameplayCue, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GameplayCue::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GameplayCue_RepFull
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GameplayCue_RepFull final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GameplayCue_RepFull) == 0x000004, "Wrong alignment on TedGlobalTags_GameplayCue_RepFull");
static_assert(sizeof(TedGlobalTags_GameplayCue_RepFull) == 0x000008, "Wrong size on TedGlobalTags_GameplayCue_RepFull");
static_assert(offsetof(TedGlobalTags_GameplayCue_RepFull, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GameplayCue_RepFull::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GameplayCue_RepMinimal
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GameplayCue_RepMinimal final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GameplayCue_RepMinimal) == 0x000004, "Wrong alignment on TedGlobalTags_GameplayCue_RepMinimal");
static_assert(sizeof(TedGlobalTags_GameplayCue_RepMinimal) == 0x000008, "Wrong size on TedGlobalTags_GameplayCue_RepMinimal");
static_assert(offsetof(TedGlobalTags_GameplayCue_RepMinimal, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GameplayCue_RepMinimal::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Harvester
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Harvester final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Harvester) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Harvester");
static_assert(sizeof(TedGlobalTags_GDF_Harvester) == 0x000008, "Wrong size on TedGlobalTags_GDF_Harvester");
static_assert(offsetof(TedGlobalTags_GDF_Harvester, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Harvester::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_AdvancedPowerPlant
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_AdvancedPowerPlant final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_AdvancedPowerPlant) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_AdvancedPowerPlant");
static_assert(sizeof(TedGlobalTags_GDF_Structure_AdvancedPowerPlant) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_AdvancedPowerPlant");
static_assert(offsetof(TedGlobalTags_GDF_Structure_AdvancedPowerPlant, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_AdvancedPowerPlant::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_Airfield
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_Airfield final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_Airfield) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_Airfield");
static_assert(sizeof(TedGlobalTags_GDF_Structure_Airfield) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_Airfield");
static_assert(offsetof(TedGlobalTags_GDF_Structure_Airfield, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_Airfield::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_Airpad
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_Airpad final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_Airpad) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_Airpad");
static_assert(sizeof(TedGlobalTags_GDF_Structure_Airpad) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_Airpad");
static_assert(offsetof(TedGlobalTags_GDF_Structure_Airpad, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_Airpad::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_Barracks
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_Barracks final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_Barracks) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_Barracks");
static_assert(sizeof(TedGlobalTags_GDF_Structure_Barracks) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_Barracks");
static_assert(offsetof(TedGlobalTags_GDF_Structure_Barracks, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_Barracks::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_ConcreteWall
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_ConcreteWall final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_ConcreteWall) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_ConcreteWall");
static_assert(sizeof(TedGlobalTags_GDF_Structure_ConcreteWall) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_ConcreteWall");
static_assert(offsetof(TedGlobalTags_GDF_Structure_ConcreteWall, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_ConcreteWall::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_ConstructionYard
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_ConstructionYard final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_ConstructionYard) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_ConstructionYard");
static_assert(sizeof(TedGlobalTags_GDF_Structure_ConstructionYard) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_ConstructionYard");
static_assert(offsetof(TedGlobalTags_GDF_Structure_ConstructionYard, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_ConstructionYard::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_Fence
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_Fence final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_Fence) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_Fence");
static_assert(sizeof(TedGlobalTags_GDF_Structure_Fence) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_Fence");
static_assert(offsetof(TedGlobalTags_GDF_Structure_Fence, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_Fence::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_PowerPlant
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_PowerPlant final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_PowerPlant) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_PowerPlant");
static_assert(sizeof(TedGlobalTags_GDF_Structure_PowerPlant) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_PowerPlant");
static_assert(offsetof(TedGlobalTags_GDF_Structure_PowerPlant, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_PowerPlant::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GDF_Structure_SatelliteUplink
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GDF_Structure_SatelliteUplink final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GDF_Structure_SatelliteUplink) == 0x000004, "Wrong alignment on TedGlobalTags_GDF_Structure_SatelliteUplink");
static_assert(sizeof(TedGlobalTags_GDF_Structure_SatelliteUplink) == 0x000008, "Wrong size on TedGlobalTags_GDF_Structure_SatelliteUplink");
static_assert(offsetof(TedGlobalTags_GDF_Structure_SatelliteUplink, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GDF_Structure_SatelliteUplink::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.GroundTargetingBlocked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_GroundTargetingBlocked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_GroundTargetingBlocked) == 0x000004, "Wrong alignment on TedGlobalTags_GroundTargetingBlocked");
static_assert(sizeof(TedGlobalTags_GroundTargetingBlocked) == 0x000008, "Wrong size on TedGlobalTags_GroundTargetingBlocked");
static_assert(offsetof(TedGlobalTags_GroundTargetingBlocked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_GroundTargetingBlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Infantry
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Infantry final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Infantry) == 0x000004, "Wrong alignment on TedGlobalTags_Infantry");
static_assert(sizeof(TedGlobalTags_Infantry) == 0x000008, "Wrong size on TedGlobalTags_Infantry");
static_assert(offsetof(TedGlobalTags_Infantry, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Infantry::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Infantry_Heavy
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Infantry_Heavy final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Infantry_Heavy) == 0x000004, "Wrong alignment on TedGlobalTags_Infantry_Heavy");
static_assert(sizeof(TedGlobalTags_Infantry_Heavy) == 0x000008, "Wrong size on TedGlobalTags_Infantry_Heavy");
static_assert(offsetof(TedGlobalTags_Infantry_Heavy, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Infantry_Heavy::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.InputSettings_Error_ConflictingMapping
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_InputSettings_Error_ConflictingMapping final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_InputSettings_Error_ConflictingMapping) == 0x000004, "Wrong alignment on TedGlobalTags_InputSettings_Error_ConflictingMapping");
static_assert(sizeof(TedGlobalTags_InputSettings_Error_ConflictingMapping) == 0x000008, "Wrong size on TedGlobalTags_InputSettings_Error_ConflictingMapping");
static_assert(offsetof(TedGlobalTags_InputSettings_Error_ConflictingMapping, ReturnValue) == 0x000000, "Member 'TedGlobalTags_InputSettings_Error_ConflictingMapping::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.InputSettings_Error_RestrictedMapping
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_InputSettings_Error_RestrictedMapping final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_InputSettings_Error_RestrictedMapping) == 0x000004, "Wrong alignment on TedGlobalTags_InputSettings_Error_RestrictedMapping");
static_assert(sizeof(TedGlobalTags_InputSettings_Error_RestrictedMapping) == 0x000008, "Wrong size on TedGlobalTags_InputSettings_Error_RestrictedMapping");
static_assert(offsetof(TedGlobalTags_InputSettings_Error_RestrictedMapping, ReturnValue) == 0x000000, "Member 'TedGlobalTags_InputSettings_Error_RestrictedMapping::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Mine
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Mine final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Mine) == 0x000004, "Wrong alignment on TedGlobalTags_Mine");
static_assert(sizeof(TedGlobalTags_Mine) == 0x000008, "Wrong size on TedGlobalTags_Mine");
static_assert(offsetof(TedGlobalTags_Mine, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Mine::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.NEU_AnyPawn
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_NEU_AnyPawn final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_NEU_AnyPawn) == 0x000004, "Wrong alignment on TedGlobalTags_NEU_AnyPawn");
static_assert(sizeof(TedGlobalTags_NEU_AnyPawn) == 0x000008, "Wrong size on TedGlobalTags_NEU_AnyPawn");
static_assert(offsetof(TedGlobalTags_NEU_AnyPawn, ReturnValue) == 0x000000, "Member 'TedGlobalTags_NEU_AnyPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_AllowInsufficientPower
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_AllowInsufficientPower final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_AllowInsufficientPower) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_AllowInsufficientPower");
static_assert(sizeof(TedGlobalTags_PlayerData_AllowInsufficientPower) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_AllowInsufficientPower");
static_assert(offsetof(TedGlobalTags_PlayerData_AllowInsufficientPower, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_AllowInsufficientPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_AllowPlayerCommands
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_AllowPlayerCommands final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_AllowPlayerCommands) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_AllowPlayerCommands");
static_assert(sizeof(TedGlobalTags_PlayerData_AllowPlayerCommands) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_AllowPlayerCommands");
static_assert(offsetof(TedGlobalTags_PlayerData_AllowPlayerCommands, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_AllowPlayerCommands::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_AllowPowerDown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_AllowPowerDown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_AllowPowerDown) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_AllowPowerDown");
static_assert(sizeof(TedGlobalTags_PlayerData_AllowPowerDown) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_AllowPowerDown");
static_assert(offsetof(TedGlobalTags_PlayerData_AllowPowerDown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_AllowPowerDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_BuildOnlyInFactoryRadius
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius");
static_assert(sizeof(TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius");
static_assert(offsetof(TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_BuildOnlyInFactoryRadius::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_InsufficientPowerSlowDown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_InsufficientPowerSlowDown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_InsufficientPowerSlowDown) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_InsufficientPowerSlowDown");
static_assert(sizeof(TedGlobalTags_PlayerData_InsufficientPowerSlowDown) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_InsufficientPowerSlowDown");
static_assert(offsetof(TedGlobalTags_PlayerData_InsufficientPowerSlowDown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_InsufficientPowerSlowDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_LowPowerImmune
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_LowPowerImmune final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_LowPowerImmune) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_LowPowerImmune");
static_assert(sizeof(TedGlobalTags_PlayerData_LowPowerImmune) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_LowPowerImmune");
static_assert(offsetof(TedGlobalTags_PlayerData_LowPowerImmune, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_LowPowerImmune::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_NoConstruction
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_NoConstruction final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_NoConstruction) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_NoConstruction");
static_assert(sizeof(TedGlobalTags_PlayerData_NoConstruction) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_NoConstruction");
static_assert(offsetof(TedGlobalTags_PlayerData_NoConstruction, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_NoConstruction::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_NoGarrison
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_NoGarrison final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_NoGarrison) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_NoGarrison");
static_assert(sizeof(TedGlobalTags_PlayerData_NoGarrison) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_NoGarrison");
static_assert(offsetof(TedGlobalTags_PlayerData_NoGarrison, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_NoGarrison::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_NoSell
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_NoSell final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_NoSell) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_NoSell");
static_assert(sizeof(TedGlobalTags_PlayerData_NoSell) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_NoSell");
static_assert(offsetof(TedGlobalTags_PlayerData_NoSell, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_NoSell::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_NotCapturable
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_NotCapturable final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_NotCapturable) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_NotCapturable");
static_assert(sizeof(TedGlobalTags_PlayerData_NotCapturable) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_NotCapturable");
static_assert(offsetof(TedGlobalTags_PlayerData_NotCapturable, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_NotCapturable::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_PowerDown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_PowerDown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_PowerDown) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_PowerDown");
static_assert(sizeof(TedGlobalTags_PlayerData_PowerDown) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_PowerDown");
static_assert(offsetof(TedGlobalTags_PlayerData_PowerDown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_PowerDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_SimultaneousConstruction
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_SimultaneousConstruction final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_SimultaneousConstruction) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_SimultaneousConstruction");
static_assert(sizeof(TedGlobalTags_PlayerData_SimultaneousConstruction) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_SimultaneousConstruction");
static_assert(offsetof(TedGlobalTags_PlayerData_SimultaneousConstruction, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_SimultaneousConstruction::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.PlayerData_Worker
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_PlayerData_Worker final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_PlayerData_Worker) == 0x000004, "Wrong alignment on TedGlobalTags_PlayerData_Worker");
static_assert(sizeof(TedGlobalTags_PlayerData_Worker) == 0x000008, "Wrong size on TedGlobalTags_PlayerData_Worker");
static_assert(offsetof(TedGlobalTags_PlayerData_Worker, ReturnValue) == 0x000000, "Member 'TedGlobalTags_PlayerData_Worker::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_AIInvisible
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_AIInvisible final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_AIInvisible) == 0x000004, "Wrong alignment on TedGlobalTags_Status_AIInvisible");
static_assert(sizeof(TedGlobalTags_Status_AIInvisible) == 0x000008, "Wrong size on TedGlobalTags_Status_AIInvisible");
static_assert(offsetof(TedGlobalTags_Status_AIInvisible, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_AIInvisible::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Awakening1
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Awakening1 final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Awakening1) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Awakening1");
static_assert(sizeof(TedGlobalTags_Status_Awakening1) == 0x000008, "Wrong size on TedGlobalTags_Status_Awakening1");
static_assert(offsetof(TedGlobalTags_Status_Awakening1, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Awakening1::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Awakening2
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Awakening2 final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Awakening2) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Awakening2");
static_assert(sizeof(TedGlobalTags_Status_Awakening2) == 0x000008, "Wrong size on TedGlobalTags_Status_Awakening2");
static_assert(offsetof(TedGlobalTags_Status_Awakening2, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Awakening2::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Awakening3
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Awakening3 final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Awakening3) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Awakening3");
static_assert(sizeof(TedGlobalTags_Status_Awakening3) == 0x000008, "Wrong size on TedGlobalTags_Status_Awakening3");
static_assert(offsetof(TedGlobalTags_Status_Awakening3, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Awakening3::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable");
static_assert(sizeof(TedGlobalTags_Status_Mutable) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable");
static_assert(offsetof(TedGlobalTags_Status_Mutable, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Alive
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Alive final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Alive) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Alive");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Alive) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Alive");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Alive, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Alive::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_AttackBlocked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_AttackBlocked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_AttackBlocked) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_AttackBlocked");
static_assert(sizeof(TedGlobalTags_Status_Mutable_AttackBlocked) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_AttackBlocked");
static_assert(offsetof(TedGlobalTags_Status_Mutable_AttackBlocked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_AttackBlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Autoharvesting
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Autoharvesting final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Autoharvesting) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Autoharvesting");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Autoharvesting) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Autoharvesting");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Autoharvesting, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Autoharvesting::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Commandeered
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Commandeered final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Commandeered) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Commandeered");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Commandeered) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Commandeered");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Commandeered, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Commandeered::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Disarmed
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Disarmed final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Disarmed) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Disarmed");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Disarmed) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Disarmed");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Disarmed, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Disarmed::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_DisarmingMine
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_DisarmingMine final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_DisarmingMine) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_DisarmingMine");
static_assert(sizeof(TedGlobalTags_Status_Mutable_DisarmingMine) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_DisarmingMine");
static_assert(offsetof(TedGlobalTags_Status_Mutable_DisarmingMine, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_DisarmingMine::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_DistributionMode
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_DistributionMode final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_DistributionMode) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_DistributionMode");
static_assert(sizeof(TedGlobalTags_Status_Mutable_DistributionMode) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_DistributionMode");
static_assert(offsetof(TedGlobalTags_Status_Mutable_DistributionMode, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_DistributionMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_DistributionMode_Source
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_DistributionMode_Source final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_DistributionMode_Source) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_DistributionMode_Source");
static_assert(sizeof(TedGlobalTags_Status_Mutable_DistributionMode_Source) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_DistributionMode_Source");
static_assert(offsetof(TedGlobalTags_Status_Mutable_DistributionMode_Source, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_DistributionMode_Source::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_EnlightenedSacrifice
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_EnlightenedSacrifice final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_EnlightenedSacrifice) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_EnlightenedSacrifice");
static_assert(sizeof(TedGlobalTags_Status_Mutable_EnlightenedSacrifice) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_EnlightenedSacrifice");
static_assert(offsetof(TedGlobalTags_Status_Mutable_EnlightenedSacrifice, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_EnlightenedSacrifice::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_ForceUserPowerDown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_ForceUserPowerDown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_ForceUserPowerDown) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_ForceUserPowerDown");
static_assert(sizeof(TedGlobalTags_Status_Mutable_ForceUserPowerDown) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_ForceUserPowerDown");
static_assert(offsetof(TedGlobalTags_Status_Mutable_ForceUserPowerDown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_ForceUserPowerDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_HarvesterIdle
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_HarvesterIdle final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_HarvesterIdle) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_HarvesterIdle");
static_assert(sizeof(TedGlobalTags_Status_Mutable_HarvesterIdle) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_HarvesterIdle");
static_assert(offsetof(TedGlobalTags_Status_Mutable_HarvesterIdle, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_HarvesterIdle::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Immobilized
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Immobilized final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Immobilized) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Immobilized");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Immobilized) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Immobilized");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Immobilized, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Immobilized::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Marked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Marked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Marked) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Marked");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Marked) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Marked");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Marked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Marked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Moving
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Moving final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Moving) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Moving");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Moving) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Moving");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Moving, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Moving::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Overridden
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Overridden final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Overridden) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Overridden");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Overridden) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Overridden");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Overridden, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Overridden::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_PowerDown
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_PowerDown final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_PowerDown) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_PowerDown");
static_assert(sizeof(TedGlobalTags_Status_Mutable_PowerDown) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_PowerDown");
static_assert(offsetof(TedGlobalTags_Status_Mutable_PowerDown, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_PowerDown::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_ResearchingUpgrade
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_ResearchingUpgrade final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_ResearchingUpgrade) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_ResearchingUpgrade");
static_assert(sizeof(TedGlobalTags_Status_Mutable_ResearchingUpgrade) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_ResearchingUpgrade");
static_assert(offsetof(TedGlobalTags_Status_Mutable_ResearchingUpgrade, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_ResearchingUpgrade::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_RiotSuppression
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_RiotSuppression final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_RiotSuppression) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_RiotSuppression");
static_assert(sizeof(TedGlobalTags_Status_Mutable_RiotSuppression) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_RiotSuppression");
static_assert(offsetof(TedGlobalTags_Status_Mutable_RiotSuppression, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_RiotSuppression::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Stealth
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Stealth final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Stealth) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Stealth");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Stealth) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Stealth");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Stealth, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Stealth::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Subjugated
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Subjugated final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Subjugated) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Subjugated");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Subjugated) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Subjugated");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Subjugated, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Subjugated::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_Suppressed
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_Suppressed final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_Suppressed) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_Suppressed");
static_assert(sizeof(TedGlobalTags_Status_Mutable_Suppressed) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_Suppressed");
static_assert(offsetof(TedGlobalTags_Status_Mutable_Suppressed, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_Suppressed::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Mutable_TempestCharge
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Mutable_TempestCharge final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Mutable_TempestCharge) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Mutable_TempestCharge");
static_assert(sizeof(TedGlobalTags_Status_Mutable_TempestCharge) == 0x000008, "Wrong size on TedGlobalTags_Status_Mutable_TempestCharge");
static_assert(offsetof(TedGlobalTags_Status_Mutable_TempestCharge, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Mutable_TempestCharge::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_RecentlyDamaged
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_RecentlyDamaged final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_RecentlyDamaged) == 0x000004, "Wrong alignment on TedGlobalTags_Status_RecentlyDamaged");
static_assert(sizeof(TedGlobalTags_Status_RecentlyDamaged) == 0x000008, "Wrong size on TedGlobalTags_Status_RecentlyDamaged");
static_assert(offsetof(TedGlobalTags_Status_RecentlyDamaged, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_RecentlyDamaged::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_TempestChargeBlocked
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_TempestChargeBlocked final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_TempestChargeBlocked) == 0x000004, "Wrong alignment on TedGlobalTags_Status_TempestChargeBlocked");
static_assert(sizeof(TedGlobalTags_Status_TempestChargeBlocked) == 0x000008, "Wrong size on TedGlobalTags_Status_TempestChargeBlocked");
static_assert(offsetof(TedGlobalTags_Status_TempestChargeBlocked, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_TempestChargeBlocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Status_Uncrushable
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Status_Uncrushable final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Status_Uncrushable) == 0x000004, "Wrong alignment on TedGlobalTags_Status_Uncrushable");
static_assert(sizeof(TedGlobalTags_Status_Uncrushable) == 0x000008, "Wrong size on TedGlobalTags_Status_Uncrushable");
static_assert(offsetof(TedGlobalTags_Status_Uncrushable, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Status_Uncrushable::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure) == 0x000004, "Wrong alignment on TedGlobalTags_Structure");
static_assert(sizeof(TedGlobalTags_Structure) == 0x000008, "Wrong size on TedGlobalTags_Structure");
static_assert(offsetof(TedGlobalTags_Structure, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Airfield
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Airfield final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Airfield) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Airfield");
static_assert(sizeof(TedGlobalTags_Structure_Airfield) == 0x000008, "Wrong size on TedGlobalTags_Structure_Airfield");
static_assert(offsetof(TedGlobalTags_Structure_Airfield, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Airfield::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Conformation
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Conformation final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Conformation) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Conformation");
static_assert(sizeof(TedGlobalTags_Structure_Conformation) == 0x000008, "Wrong size on TedGlobalTags_Structure_Conformation");
static_assert(offsetof(TedGlobalTags_Structure_Conformation, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Conformation::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Conformation_Bridge
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Conformation_Bridge final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Conformation_Bridge) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Conformation_Bridge");
static_assert(sizeof(TedGlobalTags_Structure_Conformation_Bridge) == 0x000008, "Wrong size on TedGlobalTags_Structure_Conformation_Bridge");
static_assert(offsetof(TedGlobalTags_Structure_Conformation_Bridge, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Conformation_Bridge::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_ConstructionYard_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Structure_ConstructionYard_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_ConstructionYard_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Structure_ConstructionYard_Any");
static_assert(sizeof(TedGlobalTags_Structure_ConstructionYard_Any) == 0x000020, "Wrong size on TedGlobalTags_Structure_ConstructionYard_Any");
static_assert(offsetof(TedGlobalTags_Structure_ConstructionYard_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_ConstructionYard_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Defensive
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Defensive final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Defensive) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Defensive");
static_assert(sizeof(TedGlobalTags_Structure_Defensive) == 0x000008, "Wrong size on TedGlobalTags_Structure_Defensive");
static_assert(offsetof(TedGlobalTags_Structure_Defensive, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Defensive::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Gate_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Structure_Gate_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Gate_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Structure_Gate_Any");
static_assert(sizeof(TedGlobalTags_Structure_Gate_Any) == 0x000020, "Wrong size on TedGlobalTags_Structure_Gate_Any");
static_assert(offsetof(TedGlobalTags_Structure_Gate_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Gate_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Radar_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Structure_Radar_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Radar_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Structure_Radar_Any");
static_assert(sizeof(TedGlobalTags_Structure_Radar_Any) == 0x000020, "Wrong size on TedGlobalTags_Structure_Radar_Any");
static_assert(offsetof(TedGlobalTags_Structure_Radar_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Radar_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Sandbags_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Structure_Sandbags_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Sandbags_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Structure_Sandbags_Any");
static_assert(sizeof(TedGlobalTags_Structure_Sandbags_Any) == 0x000020, "Wrong size on TedGlobalTags_Structure_Sandbags_Any");
static_assert(offsetof(TedGlobalTags_Structure_Sandbags_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Sandbags_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Tower
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Tower final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Tower) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Tower");
static_assert(sizeof(TedGlobalTags_Structure_Tower) == 0x000008, "Wrong size on TedGlobalTags_Structure_Tower");
static_assert(offsetof(TedGlobalTags_Structure_Tower, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Tower::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Wall
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Structure_Wall final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Wall) == 0x000004, "Wrong alignment on TedGlobalTags_Structure_Wall");
static_assert(sizeof(TedGlobalTags_Structure_Wall) == 0x000008, "Wrong size on TedGlobalTags_Structure_Wall");
static_assert(offsetof(TedGlobalTags_Structure_Wall, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Wall::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Structure_Wall_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Structure_Wall_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Structure_Wall_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Structure_Wall_Any");
static_assert(sizeof(TedGlobalTags_Structure_Wall_Any) == 0x000020, "Wrong size on TedGlobalTags_Structure_Wall_Any");
static_assert(offsetof(TedGlobalTags_Structure_Wall_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Structure_Wall_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Hide
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Hide final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Hide) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Hide");
static_assert(sizeof(TedGlobalTags_UI_Anim_Hide) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Hide");
static_assert(offsetof(TedGlobalTags_UI_Anim_Hide, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Hide::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Objective_Completed
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Objective_Completed final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Objective_Completed) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Objective_Completed");
static_assert(sizeof(TedGlobalTags_UI_Anim_Objective_Completed) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Objective_Completed");
static_assert(offsetof(TedGlobalTags_UI_Anim_Objective_Completed, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Objective_Completed::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Objective_Failed
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Objective_Failed final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Objective_Failed) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Objective_Failed");
static_assert(sizeof(TedGlobalTags_UI_Anim_Objective_Failed) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Objective_Failed");
static_assert(offsetof(TedGlobalTags_UI_Anim_Objective_Failed, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Objective_Failed::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Objective_New
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Objective_New final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Objective_New) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Objective_New");
static_assert(sizeof(TedGlobalTags_UI_Anim_Objective_New) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Objective_New");
static_assert(offsetof(TedGlobalTags_UI_Anim_Objective_New, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Objective_New::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Objective_Updated
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Objective_Updated final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Objective_Updated) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Objective_Updated");
static_assert(sizeof(TedGlobalTags_UI_Anim_Objective_Updated) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Objective_Updated");
static_assert(offsetof(TedGlobalTags_UI_Anim_Objective_Updated, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Objective_Updated::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_Show
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_Show final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_Show) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_Show");
static_assert(sizeof(TedGlobalTags_UI_Anim_Show) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_Show");
static_assert(offsetof(TedGlobalTags_UI_Anim_Show, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_Show::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Anim_StartupSequence
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Anim_StartupSequence final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Anim_StartupSequence) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Anim_StartupSequence");
static_assert(sizeof(TedGlobalTags_UI_Anim_StartupSequence) == 0x000008, "Wrong size on TedGlobalTags_UI_Anim_StartupSequence");
static_assert(offsetof(TedGlobalTags_UI_Anim_StartupSequence, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Anim_StartupSequence::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event");
static_assert(sizeof(TedGlobalTags_UI_Event) == 0x000008, "Wrong size on TedGlobalTags_UI_Event");
static_assert(offsetof(TedGlobalTags_UI_Event, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_CC_FramedMovie_Play
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_CC_FramedMovie_Play final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_CC_FramedMovie_Play) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_CC_FramedMovie_Play");
static_assert(sizeof(TedGlobalTags_UI_Event_CC_FramedMovie_Play) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_CC_FramedMovie_Play");
static_assert(offsetof(TedGlobalTags_UI_Event_CC_FramedMovie_Play, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_CC_FramedMovie_Play::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_CC_FramedMovie_Stop
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_CC_FramedMovie_Stop final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_CC_FramedMovie_Stop) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_CC_FramedMovie_Stop");
static_assert(sizeof(TedGlobalTags_UI_Event_CC_FramedMovie_Stop) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_CC_FramedMovie_Stop");
static_assert(offsetof(TedGlobalTags_UI_Event_CC_FramedMovie_Stop, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_CC_FramedMovie_Stop::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_ChatParty_AdjustForScoreScreen
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen");
static_assert(sizeof(TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen");
static_assert(offsetof(TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_ChatParty_AdjustForScoreScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_HudPopup_Hide
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_HudPopup_Hide final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_HudPopup_Hide) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_HudPopup_Hide");
static_assert(sizeof(TedGlobalTags_UI_Event_HudPopup_Hide) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_HudPopup_Hide");
static_assert(offsetof(TedGlobalTags_UI_Event_HudPopup_Hide, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_HudPopup_Hide::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_HudPopup_Show
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_HudPopup_Show final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_HudPopup_Show) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_HudPopup_Show");
static_assert(sizeof(TedGlobalTags_UI_Event_HudPopup_Show) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_HudPopup_Show");
static_assert(offsetof(TedGlobalTags_UI_Event_HudPopup_Show, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_HudPopup_Show::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Event_HudPopup_ShowSide
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Event_HudPopup_ShowSide final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Event_HudPopup_ShowSide) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Event_HudPopup_ShowSide");
static_assert(sizeof(TedGlobalTags_UI_Event_HudPopup_ShowSide) == 0x000008, "Wrong size on TedGlobalTags_UI_Event_HudPopup_ShowSide");
static_assert(offsetof(TedGlobalTags_UI_Event_HudPopup_ShowSide, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Event_HudPopup_ShowSide::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_HidingContext_HidingHUD
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_HidingContext_HidingHUD final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_HidingContext_HidingHUD) == 0x000004, "Wrong alignment on TedGlobalTags_UI_HidingContext_HidingHUD");
static_assert(sizeof(TedGlobalTags_UI_HidingContext_HidingHUD) == 0x000008, "Wrong size on TedGlobalTags_UI_HidingContext_HidingHUD");
static_assert(offsetof(TedGlobalTags_UI_HidingContext_HidingHUD, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_HidingContext_HidingHUD::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_HidingContext_PlayingMovie
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_HidingContext_PlayingMovie final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_HidingContext_PlayingMovie) == 0x000004, "Wrong alignment on TedGlobalTags_UI_HidingContext_PlayingMovie");
static_assert(sizeof(TedGlobalTags_UI_HidingContext_PlayingMovie) == 0x000008, "Wrong size on TedGlobalTags_UI_HidingContext_PlayingMovie");
static_assert(offsetof(TedGlobalTags_UI_HidingContext_PlayingMovie, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_HidingContext_PlayingMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_HidingContext_Spectator
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_HidingContext_Spectator final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_HidingContext_Spectator) == 0x000004, "Wrong alignment on TedGlobalTags_UI_HidingContext_Spectator");
static_assert(sizeof(TedGlobalTags_UI_HidingContext_Spectator) == 0x000008, "Wrong size on TedGlobalTags_UI_HidingContext_Spectator");
static_assert(offsetof(TedGlobalTags_UI_HidingContext_Spectator, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_HidingContext_Spectator::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_HidingContext_Spectator_Ally
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_HidingContext_Spectator_Ally final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_HidingContext_Spectator_Ally) == 0x000004, "Wrong alignment on TedGlobalTags_UI_HidingContext_Spectator_Ally");
static_assert(sizeof(TedGlobalTags_UI_HidingContext_Spectator_Ally) == 0x000008, "Wrong size on TedGlobalTags_UI_HidingContext_Spectator_Ally");
static_assert(offsetof(TedGlobalTags_UI_HidingContext_Spectator_Ally, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_HidingContext_Spectator_Ally::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_HidingContext_Spectator_Match
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_HidingContext_Spectator_Match final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_HidingContext_Spectator_Match) == 0x000004, "Wrong alignment on TedGlobalTags_UI_HidingContext_Spectator_Match");
static_assert(sizeof(TedGlobalTags_UI_HidingContext_Spectator_Match) == 0x000008, "Wrong size on TedGlobalTags_UI_HidingContext_Spectator_Match");
static_assert(offsetof(TedGlobalTags_UI_HidingContext_Spectator_Match, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_HidingContext_Spectator_Match::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Marker_Context_Primary
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Marker_Context_Primary final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Marker_Context_Primary) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Marker_Context_Primary");
static_assert(sizeof(TedGlobalTags_UI_Marker_Context_Primary) == 0x000008, "Wrong size on TedGlobalTags_UI_Marker_Context_Primary");
static_assert(offsetof(TedGlobalTags_UI_Marker_Context_Primary, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Marker_Context_Primary::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Marker_Context_Primary_DYN
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Marker_Context_Primary_DYN final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Marker_Context_Primary_DYN) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Marker_Context_Primary_DYN");
static_assert(sizeof(TedGlobalTags_UI_Marker_Context_Primary_DYN) == 0x000008, "Wrong size on TedGlobalTags_UI_Marker_Context_Primary_DYN");
static_assert(offsetof(TedGlobalTags_UI_Marker_Context_Primary_DYN, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Marker_Context_Primary_DYN::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Marker_Context_Primary_GDF
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Marker_Context_Primary_GDF final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Marker_Context_Primary_GDF) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Marker_Context_Primary_GDF");
static_assert(sizeof(TedGlobalTags_UI_Marker_Context_Primary_GDF) == 0x000008, "Wrong size on TedGlobalTags_UI_Marker_Context_Primary_GDF");
static_assert(offsetof(TedGlobalTags_UI_Marker_Context_Primary_GDF, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Marker_Context_Primary_GDF::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_Marker_Context_Secondary
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_Marker_Context_Secondary final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_Marker_Context_Secondary) == 0x000004, "Wrong alignment on TedGlobalTags_UI_Marker_Context_Secondary");
static_assert(sizeof(TedGlobalTags_UI_Marker_Context_Secondary) == 0x000008, "Wrong size on TedGlobalTags_UI_Marker_Context_Secondary");
static_assert(offsetof(TedGlobalTags_UI_Marker_Context_Secondary, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_Marker_Context_Secondary::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_CampaignSelection
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_CampaignSelection final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_CampaignSelection) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_CampaignSelection");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_CampaignSelection) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_CampaignSelection");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_CampaignSelection, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_CampaignSelection::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_CommandCompound
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_CommandCompound final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_CommandCompound) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_CommandCompound");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_CommandCompound) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_CommandCompound");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_CommandCompound, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_CommandCompound::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_EndGame
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_EndGame final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_EndGame) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_EndGame");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_EndGame) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_EndGame");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_EndGame, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_EndGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_FactionSelection
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_FactionSelection final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_FactionSelection) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_FactionSelection");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_FactionSelection) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_FactionSelection");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_FactionSelection, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_FactionSelection::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_GameMenu
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_GameMenu final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_GameMenu) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_GameMenu");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_GameMenu) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_GameMenu");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_GameMenu, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_GameMenu::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_MainMenu
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_MainMenu final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_MainMenu) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_MainMenu");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_MainMenu) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_MainMenu");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_MainMenu, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_MainMenu::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_MapScreen
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_MapScreen final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_MapScreen) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_MapScreen");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_MapScreen) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_MapScreen");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_MapScreen, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_MapScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_MedalsScreen_MP
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_MedalsScreen_MP final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_MedalsScreen_MP) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_MedalsScreen_MP");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_MedalsScreen_MP) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_MedalsScreen_MP");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_MedalsScreen_MP, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_MedalsScreen_MP::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_MedalsScreen_SP
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_MedalsScreen_SP final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_MedalsScreen_SP) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_MedalsScreen_SP");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_MedalsScreen_SP) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_MedalsScreen_SP");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_MedalsScreen_SP, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_MedalsScreen_SP::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MenuScreen_ScoreScreen
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MenuScreen_ScoreScreen final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MenuScreen_ScoreScreen) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MenuScreen_ScoreScreen");
static_assert(sizeof(TedGlobalTags_UI_MenuScreen_ScoreScreen) == 0x000008, "Wrong size on TedGlobalTags_UI_MenuScreen_ScoreScreen");
static_assert(offsetof(TedGlobalTags_UI_MenuScreen_ScoreScreen, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MenuScreen_ScoreScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_MovieSequence_ConnectionLost
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_MovieSequence_ConnectionLost final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_MovieSequence_ConnectionLost) == 0x000004, "Wrong alignment on TedGlobalTags_UI_MovieSequence_ConnectionLost");
static_assert(sizeof(TedGlobalTags_UI_MovieSequence_ConnectionLost) == 0x000008, "Wrong size on TedGlobalTags_UI_MovieSequence_ConnectionLost");
static_assert(offsetof(TedGlobalTags_UI_MovieSequence_ConnectionLost, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_MovieSequence_ConnectionLost::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_SkippableSequence_CC_Briefing
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_SkippableSequence_CC_Briefing final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_SkippableSequence_CC_Briefing) == 0x000004, "Wrong alignment on TedGlobalTags_UI_SkippableSequence_CC_Briefing");
static_assert(sizeof(TedGlobalTags_UI_SkippableSequence_CC_Briefing) == 0x000008, "Wrong size on TedGlobalTags_UI_SkippableSequence_CC_Briefing");
static_assert(offsetof(TedGlobalTags_UI_SkippableSequence_CC_Briefing, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_SkippableSequence_CC_Briefing::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_SkippableSequence_CC_MapScreen
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_SkippableSequence_CC_MapScreen final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_SkippableSequence_CC_MapScreen) == 0x000004, "Wrong alignment on TedGlobalTags_UI_SkippableSequence_CC_MapScreen");
static_assert(sizeof(TedGlobalTags_UI_SkippableSequence_CC_MapScreen) == 0x000008, "Wrong size on TedGlobalTags_UI_SkippableSequence_CC_MapScreen");
static_assert(offsetof(TedGlobalTags_UI_SkippableSequence_CC_MapScreen, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_SkippableSequence_CC_MapScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.UI_SkippableSequence_Movie
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_UI_SkippableSequence_Movie final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_UI_SkippableSequence_Movie) == 0x000004, "Wrong alignment on TedGlobalTags_UI_SkippableSequence_Movie");
static_assert(sizeof(TedGlobalTags_UI_SkippableSequence_Movie) == 0x000008, "Wrong size on TedGlobalTags_UI_SkippableSequence_Movie");
static_assert(offsetof(TedGlobalTags_UI_SkippableSequence_Movie, ReturnValue) == 0x000000, "Member 'TedGlobalTags_UI_SkippableSequence_Movie::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Unit
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Unit final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Unit) == 0x000004, "Wrong alignment on TedGlobalTags_Unit");
static_assert(sizeof(TedGlobalTags_Unit) == 0x000008, "Wrong size on TedGlobalTags_Unit");
static_assert(offsetof(TedGlobalTags_Unit, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Unit::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Unit_MCV_Any
// 0x0020 (0x0020 - 0x0000)
struct TedGlobalTags_Unit_MCV_Any final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Unit_MCV_Any) == 0x000008, "Wrong alignment on TedGlobalTags_Unit_MCV_Any");
static_assert(sizeof(TedGlobalTags_Unit_MCV_Any) == 0x000020, "Wrong size on TedGlobalTags_Unit_MCV_Any");
static_assert(offsetof(TedGlobalTags_Unit_MCV_Any, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Unit_MCV_Any::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Vehicle
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Vehicle final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Vehicle) == 0x000004, "Wrong alignment on TedGlobalTags_Vehicle");
static_assert(sizeof(TedGlobalTags_Vehicle) == 0x000008, "Wrong size on TedGlobalTags_Vehicle");
static_assert(offsetof(TedGlobalTags_Vehicle, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Vehicle::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.Vehicle_Heavy
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_Vehicle_Heavy final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_Vehicle_Heavy) == 0x000004, "Wrong alignment on TedGlobalTags_Vehicle_Heavy");
static_assert(sizeof(TedGlobalTags_Vehicle_Heavy) == 0x000008, "Wrong size on TedGlobalTags_Vehicle_Heavy");
static_assert(offsetof(TedGlobalTags_Vehicle_Heavy, ReturnValue) == 0x000000, "Member 'TedGlobalTags_Vehicle_Heavy::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlobalTags.VETI_Structure_TempestHeart
// 0x0008 (0x0008 - 0x0000)
struct TedGlobalTags_VETI_Structure_TempestHeart final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlobalTags_VETI_Structure_TempestHeart) == 0x000004, "Wrong alignment on TedGlobalTags_VETI_Structure_TempestHeart");
static_assert(sizeof(TedGlobalTags_VETI_Structure_TempestHeart) == 0x000008, "Wrong size on TedGlobalTags_VETI_Structure_TempestHeart");
static_assert(offsetof(TedGlobalTags_VETI_Structure_TempestHeart, ReturnValue) == 0x000000, "Member 'TedGlobalTags_VETI_Structure_TempestHeart::ReturnValue' has a wrong offset!");

// Function Tempest.TedGlowWidget.SetGlowMaterial
// 0x0008 (0x0008 - 0x0000)
struct TedGlowWidget_SetGlowMaterial final
{
public:
	class UMaterialInterface*                     InMaterial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlowWidget_SetGlowMaterial) == 0x000008, "Wrong alignment on TedGlowWidget_SetGlowMaterial");
static_assert(sizeof(TedGlowWidget_SetGlowMaterial) == 0x000008, "Wrong size on TedGlowWidget_SetGlowMaterial");
static_assert(offsetof(TedGlowWidget_SetGlowMaterial, InMaterial) == 0x000000, "Member 'TedGlowWidget_SetGlowMaterial::InMaterial' has a wrong offset!");

// Function Tempest.TedGlowWidget.GetGlowMaterial
// 0x0008 (0x0008 - 0x0000)
struct TedGlowWidget_GetGlowMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedGlowWidget_GetGlowMaterial) == 0x000008, "Wrong alignment on TedGlowWidget_GetGlowMaterial");
static_assert(sizeof(TedGlowWidget_GetGlowMaterial) == 0x000008, "Wrong size on TedGlowWidget_GetGlowMaterial");
static_assert(offsetof(TedGlowWidget_GetGlowMaterial, ReturnValue) == 0x000000, "Member 'TedGlowWidget_GetGlowMaterial::ReturnValue' has a wrong offset!");

// Function Tempest.TedNoBuildVolume.SetDestStage
// 0x0002 (0x0002 - 0x0000)
struct TedNoBuildVolume_SetDestStage final
{
public:
	ETedNoBuildVolumeStage                        InStage;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstantChange;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNoBuildVolume_SetDestStage) == 0x000001, "Wrong alignment on TedNoBuildVolume_SetDestStage");
static_assert(sizeof(TedNoBuildVolume_SetDestStage) == 0x000002, "Wrong size on TedNoBuildVolume_SetDestStage");
static_assert(offsetof(TedNoBuildVolume_SetDestStage, InStage) == 0x000000, "Member 'TedNoBuildVolume_SetDestStage::InStage' has a wrong offset!");
static_assert(offsetof(TedNoBuildVolume_SetDestStage, bInstantChange) == 0x000001, "Member 'TedNoBuildVolume_SetDestStage::bInstantChange' has a wrong offset!");

// Function Tempest.TedHarvesterInterface.K2_GetCurrentResource
// 0x0004 (0x0004 - 0x0000)
struct TedHarvesterInterface_K2_GetCurrentResource final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHarvesterInterface_K2_GetCurrentResource) == 0x000004, "Wrong alignment on TedHarvesterInterface_K2_GetCurrentResource");
static_assert(sizeof(TedHarvesterInterface_K2_GetCurrentResource) == 0x000004, "Wrong size on TedHarvesterInterface_K2_GetCurrentResource");
static_assert(offsetof(TedHarvesterInterface_K2_GetCurrentResource, ReturnValue) == 0x000000, "Member 'TedHarvesterInterface_K2_GetCurrentResource::ReturnValue' has a wrong offset!");

// Function Tempest.TedHarvesterInterface.K2_GetHarvesterData
// 0x0010 (0x0010 - 0x0000)
struct TedHarvesterInterface_K2_GetHarvesterData final
{
public:
	struct FHarvesterData                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHarvesterInterface_K2_GetHarvesterData) == 0x000004, "Wrong alignment on TedHarvesterInterface_K2_GetHarvesterData");
static_assert(sizeof(TedHarvesterInterface_K2_GetHarvesterData) == 0x000010, "Wrong size on TedHarvesterInterface_K2_GetHarvesterData");
static_assert(offsetof(TedHarvesterInterface_K2_GetHarvesterData, ReturnValue) == 0x000000, "Member 'TedHarvesterInterface_K2_GetHarvesterData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.K2_SetConditionState
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_K2_SetConditionState final
{
public:
	EObjectiveConditionState                      InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_K2_SetConditionState) == 0x000001, "Wrong alignment on TedObjectiveCondition_BlueprintBase_K2_SetConditionState");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_K2_SetConditionState) == 0x000001, "Wrong size on TedObjectiveCondition_BlueprintBase_K2_SetConditionState");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_K2_SetConditionState, InState) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_K2_SetConditionState::InState' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnDescribeForDebugger
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger final
{
public:
	class FString                                 OutString;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger) == 0x000008, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger) == 0x000010, "Wrong size on TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger, OutString) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnDescribeForDebugger::OutString' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnDescribeForUI
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnDescribeForUI final
{
public:
	class FText                                   OutDisplayText;                                    // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnDescribeForUI) == 0x000008, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnDescribeForUI");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnDescribeForUI) == 0x000010, "Wrong size on TedObjectiveCondition_BlueprintBase_OnDescribeForUI");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnDescribeForUI, OutDisplayText) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnDescribeForUI::OutDisplayText' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnIsAlreadyMet
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet final
{
public:
	EObjectiveConditionState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet) == 0x000001, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet) == 0x000001, "Wrong size on TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet, ReturnValue) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnIsAlreadyMet::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnIsValidSetup
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnIsValidSetup final
{
public:
	class FString                                 OutFailReason;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnIsValidSetup) == 0x000008, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnIsValidSetup");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnIsValidSetup) == 0x000018, "Wrong size on TedObjectiveCondition_BlueprintBase_OnIsValidSetup");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnIsValidSetup, OutFailReason) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnIsValidSetup::OutFailReason' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnIsValidSetup, ReturnValue) == 0x000010, "Member 'TedObjectiveCondition_BlueprintBase_OnIsValidSetup::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnSupportsNotMetState
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState) == 0x000001, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState) == 0x000001, "Wrong size on TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState, ReturnValue) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnSupportsNotMetState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_BlueprintBase.OnSupportsRuntimeData
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData) == 0x000001, "Wrong alignment on TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData");
static_assert(sizeof(TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData) == 0x000001, "Wrong size on TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData");
static_assert(offsetof(TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData, ReturnValue) == 0x000000, "Member 'TedObjectiveCondition_BlueprintBase_OnSupportsRuntimeData::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.CanHintBeFocused
// 0x0010 (0x0010 - 0x0000)
struct TedHintsSubsystem_CanHintBeFocused final
{
public:
	class UTedHintsAsset*                         Hint;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHintsSubsystem_CanHintBeFocused) == 0x000008, "Wrong alignment on TedHintsSubsystem_CanHintBeFocused");
static_assert(sizeof(TedHintsSubsystem_CanHintBeFocused) == 0x000010, "Wrong size on TedHintsSubsystem_CanHintBeFocused");
static_assert(offsetof(TedHintsSubsystem_CanHintBeFocused, Hint) == 0x000000, "Member 'TedHintsSubsystem_CanHintBeFocused::Hint' has a wrong offset!");
static_assert(offsetof(TedHintsSubsystem_CanHintBeFocused, ReturnValue) == 0x000008, "Member 'TedHintsSubsystem_CanHintBeFocused::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.FocusHintOnUI
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_FocusHintOnUI final
{
public:
	class UTedHintsAsset*                         HintToFocus;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_FocusHintOnUI) == 0x000008, "Wrong alignment on TedHintsSubsystem_FocusHintOnUI");
static_assert(sizeof(TedHintsSubsystem_FocusHintOnUI) == 0x000008, "Wrong size on TedHintsSubsystem_FocusHintOnUI");
static_assert(offsetof(TedHintsSubsystem_FocusHintOnUI, HintToFocus) == 0x000000, "Member 'TedHintsSubsystem_FocusHintOnUI::HintToFocus' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.HideHint
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_HideHint final
{
public:
	class UTedHintsAsset*                         HintToHide;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_HideHint) == 0x000008, "Wrong alignment on TedHintsSubsystem_HideHint");
static_assert(sizeof(TedHintsSubsystem_HideHint) == 0x000008, "Wrong size on TedHintsSubsystem_HideHint");
static_assert(offsetof(TedHintsSubsystem_HideHint, HintToHide) == 0x000000, "Member 'TedHintsSubsystem_HideHint::HintToHide' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.NotifyCommandButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_NotifyCommandButtonPressed final
{
public:
	TSubclassOf<class UTedCommand>                CommandUsed;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_NotifyCommandButtonPressed) == 0x000008, "Wrong alignment on TedHintsSubsystem_NotifyCommandButtonPressed");
static_assert(sizeof(TedHintsSubsystem_NotifyCommandButtonPressed) == 0x000008, "Wrong size on TedHintsSubsystem_NotifyCommandButtonPressed");
static_assert(offsetof(TedHintsSubsystem_NotifyCommandButtonPressed, CommandUsed) == 0x000000, "Member 'TedHintsSubsystem_NotifyCommandButtonPressed::CommandUsed' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.OnMarkeddActorRemoved
// 0x0018 (0x0018 - 0x0000)
struct TedHintsSubsystem_OnMarkeddActorRemoved final
{
public:
	class UTedHintsAsset*                         Hint;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedWorldHintActor*                     WorldHintActor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MarkedActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_OnMarkeddActorRemoved) == 0x000008, "Wrong alignment on TedHintsSubsystem_OnMarkeddActorRemoved");
static_assert(sizeof(TedHintsSubsystem_OnMarkeddActorRemoved) == 0x000018, "Wrong size on TedHintsSubsystem_OnMarkeddActorRemoved");
static_assert(offsetof(TedHintsSubsystem_OnMarkeddActorRemoved, Hint) == 0x000000, "Member 'TedHintsSubsystem_OnMarkeddActorRemoved::Hint' has a wrong offset!");
static_assert(offsetof(TedHintsSubsystem_OnMarkeddActorRemoved, WorldHintActor) == 0x000008, "Member 'TedHintsSubsystem_OnMarkeddActorRemoved::WorldHintActor' has a wrong offset!");
static_assert(offsetof(TedHintsSubsystem_OnMarkeddActorRemoved, MarkedActor) == 0x000010, "Member 'TedHintsSubsystem_OnMarkeddActorRemoved::MarkedActor' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.SetHintsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedHintsSubsystem_SetHintsEnabled final
{
public:
	bool                                          bInEnableHints;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_SetHintsEnabled) == 0x000001, "Wrong alignment on TedHintsSubsystem_SetHintsEnabled");
static_assert(sizeof(TedHintsSubsystem_SetHintsEnabled) == 0x000001, "Wrong size on TedHintsSubsystem_SetHintsEnabled");
static_assert(offsetof(TedHintsSubsystem_SetHintsEnabled, bInEnableHints) == 0x000000, "Member 'TedHintsSubsystem_SetHintsEnabled::bInEnableHints' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.ShouldAbilityBeHighlighted
// 0x0010 (0x0010 - 0x0000)
struct TedHintsSubsystem_ShouldAbilityBeHighlighted final
{
public:
	TSubclassOf<class UTedCommand>                CommandToCheck;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHintsSubsystem_ShouldAbilityBeHighlighted) == 0x000008, "Wrong alignment on TedHintsSubsystem_ShouldAbilityBeHighlighted");
static_assert(sizeof(TedHintsSubsystem_ShouldAbilityBeHighlighted) == 0x000010, "Wrong size on TedHintsSubsystem_ShouldAbilityBeHighlighted");
static_assert(offsetof(TedHintsSubsystem_ShouldAbilityBeHighlighted, CommandToCheck) == 0x000000, "Member 'TedHintsSubsystem_ShouldAbilityBeHighlighted::CommandToCheck' has a wrong offset!");
static_assert(offsetof(TedHintsSubsystem_ShouldAbilityBeHighlighted, ReturnValue) == 0x000008, "Member 'TedHintsSubsystem_ShouldAbilityBeHighlighted::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.TriggerNewHint
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_TriggerNewHint final
{
public:
	class UTedHintsAsset*                         NewHint;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_TriggerNewHint) == 0x000008, "Wrong alignment on TedHintsSubsystem_TriggerNewHint");
static_assert(sizeof(TedHintsSubsystem_TriggerNewHint) == 0x000008, "Wrong size on TedHintsSubsystem_TriggerNewHint");
static_assert(offsetof(TedHintsSubsystem_TriggerNewHint, NewHint) == 0x000000, "Member 'TedHintsSubsystem_TriggerNewHint::NewHint' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.TryFocusWorldHint
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_TryFocusWorldHint final
{
public:
	class UTedHintsAsset*                         HintToFocus;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_TryFocusWorldHint) == 0x000008, "Wrong alignment on TedHintsSubsystem_TryFocusWorldHint");
static_assert(sizeof(TedHintsSubsystem_TryFocusWorldHint) == 0x000008, "Wrong size on TedHintsSubsystem_TryFocusWorldHint");
static_assert(offsetof(TedHintsSubsystem_TryFocusWorldHint, HintToFocus) == 0x000000, "Member 'TedHintsSubsystem_TryFocusWorldHint::HintToFocus' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.TryMarkHintAsRead
// 0x0008 (0x0008 - 0x0000)
struct TedHintsSubsystem_TryMarkHintAsRead final
{
public:
	class UTedHintsAsset*                         HintToMark;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_TryMarkHintAsRead) == 0x000008, "Wrong alignment on TedHintsSubsystem_TryMarkHintAsRead");
static_assert(sizeof(TedHintsSubsystem_TryMarkHintAsRead) == 0x000008, "Wrong size on TedHintsSubsystem_TryMarkHintAsRead");
static_assert(offsetof(TedHintsSubsystem_TryMarkHintAsRead, HintToMark) == 0x000000, "Member 'TedHintsSubsystem_TryMarkHintAsRead::HintToMark' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.GetNumOfActiveHints
// 0x0004 (0x0004 - 0x0000)
struct TedHintsSubsystem_GetNumOfActiveHints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_GetNumOfActiveHints) == 0x000004, "Wrong alignment on TedHintsSubsystem_GetNumOfActiveHints");
static_assert(sizeof(TedHintsSubsystem_GetNumOfActiveHints) == 0x000004, "Wrong size on TedHintsSubsystem_GetNumOfActiveHints");
static_assert(offsetof(TedHintsSubsystem_GetNumOfActiveHints, ReturnValue) == 0x000000, "Member 'TedHintsSubsystem_GetNumOfActiveHints::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.GetNumOfUnreadHints
// 0x0004 (0x0004 - 0x0000)
struct TedHintsSubsystem_GetNumOfUnreadHints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_GetNumOfUnreadHints) == 0x000004, "Wrong alignment on TedHintsSubsystem_GetNumOfUnreadHints");
static_assert(sizeof(TedHintsSubsystem_GetNumOfUnreadHints) == 0x000004, "Wrong size on TedHintsSubsystem_GetNumOfUnreadHints");
static_assert(offsetof(TedHintsSubsystem_GetNumOfUnreadHints, ReturnValue) == 0x000000, "Member 'TedHintsSubsystem_GetNumOfUnreadHints::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.GetShownHints
// 0x0010 (0x0010 - 0x0000)
struct TedHintsSubsystem_GetShownHints final
{
public:
	TArray<class UTedHintsAsset*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHintsSubsystem_GetShownHints) == 0x000008, "Wrong alignment on TedHintsSubsystem_GetShownHints");
static_assert(sizeof(TedHintsSubsystem_GetShownHints) == 0x000010, "Wrong size on TedHintsSubsystem_GetShownHints");
static_assert(offsetof(TedHintsSubsystem_GetShownHints, ReturnValue) == 0x000000, "Member 'TedHintsSubsystem_GetShownHints::ReturnValue' has a wrong offset!");

// Function Tempest.TedHintsSubsystem.WasHintRead
// 0x0010 (0x0010 - 0x0000)
struct TedHintsSubsystem_WasHintRead final
{
public:
	class UTedHintsAsset*                         Hint;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedHintsSubsystem_WasHintRead) == 0x000008, "Wrong alignment on TedHintsSubsystem_WasHintRead");
static_assert(sizeof(TedHintsSubsystem_WasHintRead) == 0x000010, "Wrong size on TedHintsSubsystem_WasHintRead");
static_assert(offsetof(TedHintsSubsystem_WasHintRead, Hint) == 0x000000, "Member 'TedHintsSubsystem_WasHintRead::Hint' has a wrong offset!");
static_assert(offsetof(TedHintsSubsystem_WasHintRead, ReturnValue) == 0x000008, "Member 'TedHintsSubsystem_WasHintRead::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.K2_GetLocalHUD
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_K2_GetLocalHUD final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedHUD*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_K2_GetLocalHUD) == 0x000008, "Wrong alignment on TedHUD_K2_GetLocalHUD");
static_assert(sizeof(TedHUD_K2_GetLocalHUD) == 0x000010, "Wrong size on TedHUD_K2_GetLocalHUD");
static_assert(offsetof(TedHUD_K2_GetLocalHUD, InWorldContext) == 0x000000, "Member 'TedHUD_K2_GetLocalHUD::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedHUD_K2_GetLocalHUD, ReturnValue) == 0x000008, "Member 'TedHUD_K2_GetLocalHUD::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.HideTooltip
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_HideTooltip final
{
public:
	TSubclassOf<class UTedTooltipWidget>          InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InTargetWidget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_HideTooltip) == 0x000008, "Wrong alignment on TedHUD_HideTooltip");
static_assert(sizeof(TedHUD_HideTooltip) == 0x000010, "Wrong size on TedHUD_HideTooltip");
static_assert(offsetof(TedHUD_HideTooltip, InClass) == 0x000000, "Member 'TedHUD_HideTooltip::InClass' has a wrong offset!");
static_assert(offsetof(TedHUD_HideTooltip, InTargetWidget) == 0x000008, "Member 'TedHUD_HideTooltip::InTargetWidget' has a wrong offset!");

// Function Tempest.TedHUD.OnStartupSequenceWidgetAnimationEnd
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_OnStartupSequenceWidgetAnimationEnd final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAnim;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_OnStartupSequenceWidgetAnimationEnd) == 0x000008, "Wrong alignment on TedHUD_OnStartupSequenceWidgetAnimationEnd");
static_assert(sizeof(TedHUD_OnStartupSequenceWidgetAnimationEnd) == 0x000010, "Wrong size on TedHUD_OnStartupSequenceWidgetAnimationEnd");
static_assert(offsetof(TedHUD_OnStartupSequenceWidgetAnimationEnd, InWidget) == 0x000000, "Member 'TedHUD_OnStartupSequenceWidgetAnimationEnd::InWidget' has a wrong offset!");
static_assert(offsetof(TedHUD_OnStartupSequenceWidgetAnimationEnd, InAnim) == 0x000008, "Member 'TedHUD_OnStartupSequenceWidgetAnimationEnd::InAnim' has a wrong offset!");

// Function Tempest.TedHUD.SetActivePopupWidget
// 0x0008 (0x0008 - 0x0000)
struct TedHUD_SetActivePopupWidget final
{
public:
	class UTedPopup*                              InPopupWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_SetActivePopupWidget) == 0x000008, "Wrong alignment on TedHUD_SetActivePopupWidget");
static_assert(sizeof(TedHUD_SetActivePopupWidget) == 0x000008, "Wrong size on TedHUD_SetActivePopupWidget");
static_assert(offsetof(TedHUD_SetActivePopupWidget, InPopupWidget) == 0x000000, "Member 'TedHUD_SetActivePopupWidget::InPopupWidget' has a wrong offset!");

// Function Tempest.TedHUD.SetTheme
// 0x0001 (0x0001 - 0x0000)
struct TedHUD_SetTheme final
{
public:
	ETedFaction                                   InTheme;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_SetTheme) == 0x000001, "Wrong alignment on TedHUD_SetTheme");
static_assert(sizeof(TedHUD_SetTheme) == 0x000001, "Wrong size on TedHUD_SetTheme");
static_assert(offsetof(TedHUD_SetTheme, InTheme) == 0x000000, "Member 'TedHUD_SetTheme::InTheme' has a wrong offset!");

// Function Tempest.TedHUD.ShowEndGameScreen
// 0x0002 (0x0002 - 0x0000)
struct TedHUD_ShowEndGameScreen final
{
public:
	bool                                          bWinner;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_ShowEndGameScreen) == 0x000001, "Wrong alignment on TedHUD_ShowEndGameScreen");
static_assert(sizeof(TedHUD_ShowEndGameScreen) == 0x000002, "Wrong size on TedHUD_ShowEndGameScreen");
static_assert(offsetof(TedHUD_ShowEndGameScreen, bWinner) == 0x000000, "Member 'TedHUD_ShowEndGameScreen::bWinner' has a wrong offset!");
static_assert(offsetof(TedHUD_ShowEndGameScreen, ReturnValue) == 0x000001, "Member 'TedHUD_ShowEndGameScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.ShowTooltipFor
// 0x0080 (0x0080 - 0x0000)
struct TedHUD_ShowTooltipFor final
{
public:
	TSubclassOf<class UTedTooltipWidget>          InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                InWidget;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedTooltipDisplayParams               InDisplayParams;                                   // 0x0010(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_ShowTooltipFor) == 0x000008, "Wrong alignment on TedHUD_ShowTooltipFor");
static_assert(sizeof(TedHUD_ShowTooltipFor) == 0x000080, "Wrong size on TedHUD_ShowTooltipFor");
static_assert(offsetof(TedHUD_ShowTooltipFor, InClass) == 0x000000, "Member 'TedHUD_ShowTooltipFor::InClass' has a wrong offset!");
static_assert(offsetof(TedHUD_ShowTooltipFor, InWidget) == 0x000008, "Member 'TedHUD_ShowTooltipFor::InWidget' has a wrong offset!");
static_assert(offsetof(TedHUD_ShowTooltipFor, InDisplayParams) == 0x000010, "Member 'TedHUD_ShowTooltipFor::InDisplayParams' has a wrong offset!");

// Function Tempest.TedHUD.GetActiveSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct TedHUD_GetActiveSpectatorMode final
{
public:
	ETedSpectatorMode                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetActiveSpectatorMode) == 0x000001, "Wrong alignment on TedHUD_GetActiveSpectatorMode");
static_assert(sizeof(TedHUD_GetActiveSpectatorMode) == 0x000001, "Wrong size on TedHUD_GetActiveSpectatorMode");
static_assert(offsetof(TedHUD_GetActiveSpectatorMode, ReturnValue) == 0x000000, "Member 'TedHUD_GetActiveSpectatorMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.GetMaterialCollectionParamNames_Scallars
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_GetMaterialCollectionParamNames_Scallars final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetMaterialCollectionParamNames_Scallars) == 0x000008, "Wrong alignment on TedHUD_GetMaterialCollectionParamNames_Scallars");
static_assert(sizeof(TedHUD_GetMaterialCollectionParamNames_Scallars) == 0x000010, "Wrong size on TedHUD_GetMaterialCollectionParamNames_Scallars");
static_assert(offsetof(TedHUD_GetMaterialCollectionParamNames_Scallars, ReturnValue) == 0x000000, "Member 'TedHUD_GetMaterialCollectionParamNames_Scallars::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.GetMaterialCollectionParamNames_Vectors
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_GetMaterialCollectionParamNames_Vectors final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetMaterialCollectionParamNames_Vectors) == 0x000008, "Wrong alignment on TedHUD_GetMaterialCollectionParamNames_Vectors");
static_assert(sizeof(TedHUD_GetMaterialCollectionParamNames_Vectors) == 0x000010, "Wrong size on TedHUD_GetMaterialCollectionParamNames_Vectors");
static_assert(offsetof(TedHUD_GetMaterialCollectionParamNames_Vectors, ReturnValue) == 0x000000, "Member 'TedHUD_GetMaterialCollectionParamNames_Vectors::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.GetMenuScreen
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_GetMenuScreen final
{
public:
	struct FGameplayTag                           InID;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedMenuScreenWidget*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetMenuScreen) == 0x000008, "Wrong alignment on TedHUD_GetMenuScreen");
static_assert(sizeof(TedHUD_GetMenuScreen) == 0x000010, "Wrong size on TedHUD_GetMenuScreen");
static_assert(offsetof(TedHUD_GetMenuScreen, InID) == 0x000000, "Member 'TedHUD_GetMenuScreen::InID' has a wrong offset!");
static_assert(offsetof(TedHUD_GetMenuScreen, ReturnValue) == 0x000008, "Member 'TedHUD_GetMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.GetStandaloneWidgets
// 0x0010 (0x0010 - 0x0000)
struct TedHUD_GetStandaloneWidgets final
{
public:
	TArray<class UTedUserWidget*>                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetStandaloneWidgets) == 0x000008, "Wrong alignment on TedHUD_GetStandaloneWidgets");
static_assert(sizeof(TedHUD_GetStandaloneWidgets) == 0x000010, "Wrong size on TedHUD_GetStandaloneWidgets");
static_assert(offsetof(TedHUD_GetStandaloneWidgets, ReturnValue) == 0x000000, "Member 'TedHUD_GetStandaloneWidgets::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.GetTheme
// 0x0001 (0x0001 - 0x0000)
struct TedHUD_GetTheme final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_GetTheme) == 0x000001, "Wrong alignment on TedHUD_GetTheme");
static_assert(sizeof(TedHUD_GetTheme) == 0x000001, "Wrong size on TedHUD_GetTheme");
static_assert(offsetof(TedHUD_GetTheme, ReturnValue) == 0x000000, "Member 'TedHUD_GetTheme::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.IsAnyWidgetUnderCursor
// 0x0001 (0x0001 - 0x0000)
struct TedHUD_IsAnyWidgetUnderCursor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_IsAnyWidgetUnderCursor) == 0x000001, "Wrong alignment on TedHUD_IsAnyWidgetUnderCursor");
static_assert(sizeof(TedHUD_IsAnyWidgetUnderCursor) == 0x000001, "Wrong size on TedHUD_IsAnyWidgetUnderCursor");
static_assert(offsetof(TedHUD_IsAnyWidgetUnderCursor, ReturnValue) == 0x000000, "Member 'TedHUD_IsAnyWidgetUnderCursor::ReturnValue' has a wrong offset!");

// Function Tempest.TedHUD.IsSpectatorModeActive
// 0x0001 (0x0001 - 0x0000)
struct TedHUD_IsSpectatorModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedHUD_IsSpectatorModeActive) == 0x000001, "Wrong alignment on TedHUD_IsSpectatorModeActive");
static_assert(sizeof(TedHUD_IsSpectatorModeActive) == 0x000001, "Wrong size on TedHUD_IsSpectatorModeActive");
static_assert(offsetof(TedHUD_IsSpectatorModeActive, ReturnValue) == 0x000000, "Member 'TedHUD_IsSpectatorModeActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.CanCloseMenuScreen
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenBlueprintLibrary_CanCloseMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_CanCloseMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_CanCloseMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_CanCloseMenuScreen) == 0x000018, "Wrong size on TedMenuScreenBlueprintLibrary_CanCloseMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanCloseMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_CanCloseMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanCloseMenuScreen, InContext) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_CanCloseMenuScreen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanCloseMenuScreen, ReturnValue) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_CanCloseMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.CanGoBackMenuScreen
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen) == 0x000010, "Wrong size on TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen, ReturnValue) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_CanGoBackMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.CanOpenMenuScreen
// 0x0020 (0x0020 - 0x0000)
struct TedMenuScreenBlueprintLibrary_CanOpenMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InID;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_CanOpenMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen) == 0x000020, "Wrong size on TedMenuScreenBlueprintLibrary_CanOpenMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_CanOpenMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen, InID) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_CanOpenMenuScreen::InID' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen, InContext) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_CanOpenMenuScreen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CanOpenMenuScreen, ReturnValue) == 0x000018, "Member 'TedMenuScreenBlueprintLibrary_CanOpenMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.CloseMenuScreen
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenBlueprintLibrary_CloseMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_CloseMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_CloseMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_CloseMenuScreen) == 0x000018, "Wrong size on TedMenuScreenBlueprintLibrary_CloseMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CloseMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_CloseMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CloseMenuScreen, InContext) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_CloseMenuScreen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CloseMenuScreen, bInInstant) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_CloseMenuScreen::bInInstant' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_CloseMenuScreen, ReturnValue) == 0x000011, "Member 'TedMenuScreenBlueprintLibrary_CloseMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.GetOpenedMenuScreen
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OutMenuScreen;                                     // 0x0008(0x0008)(Parm, OutParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen) == 0x000010, "Wrong size on TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen, OutMenuScreen) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_GetOpenedMenuScreen::OutMenuScreen' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.GoBackMenuScreen
// 0x0008 (0x0008 - 0x0000)
struct TedMenuScreenBlueprintLibrary_GoBackMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_GoBackMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_GoBackMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_GoBackMenuScreen) == 0x000008, "Wrong size on TedMenuScreenBlueprintLibrary_GoBackMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_GoBackMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_GoBackMenuScreen::InWorldContextObject' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.IsAnyMenuScreenOpened
// 0x0010 (0x0010 - 0x0000)
struct TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened) == 0x000010, "Wrong size on TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened, ReturnValue) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_IsAnyMenuScreenOpened::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.IsMenuScreenEnabled
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InID;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled) == 0x000018, "Wrong size on TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled, InID) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled::InID' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled, ReturnValue) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.IsMenuScreenOpened
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenBlueprintLibrary_IsMenuScreenOpened final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InID;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_IsMenuScreenOpened) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_IsMenuScreenOpened");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_IsMenuScreenOpened) == 0x000018, "Wrong size on TedMenuScreenBlueprintLibrary_IsMenuScreenOpened");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenOpened, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenOpened::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenOpened, InID) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenOpened::InID' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_IsMenuScreenOpened, ReturnValue) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_IsMenuScreenOpened::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.OpenMenuScreen
// 0x0020 (0x0020 - 0x0000)
struct TedMenuScreenBlueprintLibrary_OpenMenuScreen final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InID;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          InContext;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInInstant;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_OpenMenuScreen) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_OpenMenuScreen");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_OpenMenuScreen) == 0x000020, "Wrong size on TedMenuScreenBlueprintLibrary_OpenMenuScreen");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_OpenMenuScreen, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_OpenMenuScreen::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_OpenMenuScreen, InID) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_OpenMenuScreen::InID' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_OpenMenuScreen, InContext) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_OpenMenuScreen::InContext' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_OpenMenuScreen, bInInstant) == 0x000018, "Member 'TedMenuScreenBlueprintLibrary_OpenMenuScreen::bInInstant' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_OpenMenuScreen, ReturnValue) == 0x000019, "Member 'TedMenuScreenBlueprintLibrary_OpenMenuScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedMenuScreenBlueprintLibrary.SetMenuScreenEnabled
// 0x0018 (0x0018 - 0x0000)
struct TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InID;                                              // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnabled;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled) == 0x000008, "Wrong alignment on TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled");
static_assert(sizeof(TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled) == 0x000018, "Wrong size on TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled, InWorldContextObject) == 0x000000, "Member 'TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled, InID) == 0x000008, "Member 'TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled::InID' has a wrong offset!");
static_assert(offsetof(TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled, bInEnabled) == 0x000010, "Member 'TedMenuScreenBlueprintLibrary_SetMenuScreenEnabled::bInEnabled' has a wrong offset!");

// Function Tempest.TedImageSequencePlayer.OnSequenceOpened
// 0x0010 (0x0010 - 0x0000)
struct TedImageSequencePlayer_OnSequenceOpened final
{
public:
	class FString                                 InOpenedUrl;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedImageSequencePlayer_OnSequenceOpened) == 0x000008, "Wrong alignment on TedImageSequencePlayer_OnSequenceOpened");
static_assert(sizeof(TedImageSequencePlayer_OnSequenceOpened) == 0x000010, "Wrong size on TedImageSequencePlayer_OnSequenceOpened");
static_assert(offsetof(TedImageSequencePlayer_OnSequenceOpened, InOpenedUrl) == 0x000000, "Member 'TedImageSequencePlayer_OnSequenceOpened::InOpenedUrl' has a wrong offset!");

// Function Tempest.TedImageSequencePlayer.Play
// 0x0010 (0x0010 - 0x0000)
struct TedImageSequencePlayer_Play final
{
public:
	const class UTedImageSequenceSource*          InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedImageSequencePlayer_Play) == 0x000008, "Wrong alignment on TedImageSequencePlayer_Play");
static_assert(sizeof(TedImageSequencePlayer_Play) == 0x000010, "Wrong size on TedImageSequencePlayer_Play");
static_assert(offsetof(TedImageSequencePlayer_Play, InSequence) == 0x000000, "Member 'TedImageSequencePlayer_Play::InSequence' has a wrong offset!");
static_assert(offsetof(TedImageSequencePlayer_Play, ReturnValue) == 0x000008, "Member 'TedImageSequencePlayer_Play::ReturnValue' has a wrong offset!");

// Function Tempest.TedImageSequencePlayer.SetPlayerMaterial
// 0x0008 (0x0008 - 0x0000)
struct TedImageSequencePlayer_SetPlayerMaterial final
{
public:
	class UMaterialInterface*                     InMaterial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedImageSequencePlayer_SetPlayerMaterial) == 0x000008, "Wrong alignment on TedImageSequencePlayer_SetPlayerMaterial");
static_assert(sizeof(TedImageSequencePlayer_SetPlayerMaterial) == 0x000008, "Wrong size on TedImageSequencePlayer_SetPlayerMaterial");
static_assert(offsetof(TedImageSequencePlayer_SetPlayerMaterial, InMaterial) == 0x000000, "Member 'TedImageSequencePlayer_SetPlayerMaterial::InMaterial' has a wrong offset!");

// Function Tempest.TedImageSequencePlayer.GetPlayingSequence
// 0x0008 (0x0008 - 0x0000)
struct TedImageSequencePlayer_GetPlayingSequence final
{
public:
	const class UTedImageSequenceSource*          ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedImageSequencePlayer_GetPlayingSequence) == 0x000008, "Wrong alignment on TedImageSequencePlayer_GetPlayingSequence");
static_assert(sizeof(TedImageSequencePlayer_GetPlayingSequence) == 0x000008, "Wrong size on TedImageSequencePlayer_GetPlayingSequence");
static_assert(offsetof(TedImageSequencePlayer_GetPlayingSequence, ReturnValue) == 0x000000, "Member 'TedImageSequencePlayer_GetPlayingSequence::ReturnValue' has a wrong offset!");

// Function Tempest.TedImageSequencePlayer.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct TedImageSequencePlayer_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedImageSequencePlayer_IsPlaying) == 0x000001, "Wrong alignment on TedImageSequencePlayer_IsPlaying");
static_assert(sizeof(TedImageSequencePlayer_IsPlaying) == 0x000001, "Wrong size on TedImageSequencePlayer_IsPlaying");
static_assert(offsetof(TedImageSequencePlayer_IsPlaying, ReturnValue) == 0x000000, "Member 'TedImageSequencePlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedInfantry.CanCrawl
// 0x0001 (0x0001 - 0x0000)
struct TedInfantry_CanCrawl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInfantry_CanCrawl) == 0x000001, "Wrong alignment on TedInfantry_CanCrawl");
static_assert(sizeof(TedInfantry_CanCrawl) == 0x000001, "Wrong size on TedInfantry_CanCrawl");
static_assert(offsetof(TedInfantry_CanCrawl, ReturnValue) == 0x000000, "Member 'TedInfantry_CanCrawl::ReturnValue' has a wrong offset!");

// Function Tempest.TedInfantry.IsCrawling
// 0x0001 (0x0001 - 0x0000)
struct TedInfantry_IsCrawling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInfantry_IsCrawling) == 0x000001, "Wrong alignment on TedInfantry_IsCrawling");
static_assert(sizeof(TedInfantry_IsCrawling) == 0x000001, "Wrong size on TedInfantry_IsCrawling");
static_assert(offsetof(TedInfantry_IsCrawling, ReturnValue) == 0x000000, "Member 'TedInfantry_IsCrawling::ReturnValue' has a wrong offset!");

// Function Tempest.TedMissionClock.DisplayCentralTimerNotification
// 0x0008 (0x0008 - 0x0000)
struct TedMissionClock_DisplayCentralTimerNotification final
{
public:
	struct FTimespan                              InTime;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionClock_DisplayCentralTimerNotification) == 0x000008, "Wrong alignment on TedMissionClock_DisplayCentralTimerNotification");
static_assert(sizeof(TedMissionClock_DisplayCentralTimerNotification) == 0x000008, "Wrong size on TedMissionClock_DisplayCentralTimerNotification");
static_assert(offsetof(TedMissionClock_DisplayCentralTimerNotification, InTime) == 0x000000, "Member 'TedMissionClock_DisplayCentralTimerNotification::InTime' has a wrong offset!");

// Function Tempest.TedMissionClock.OnMovieAnimFinished
// 0x0010 (0x0010 - 0x0000)
struct TedMissionClock_OnMovieAnimFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionClock_OnMovieAnimFinished) == 0x000008, "Wrong alignment on TedMissionClock_OnMovieAnimFinished");
static_assert(sizeof(TedMissionClock_OnMovieAnimFinished) == 0x000010, "Wrong size on TedMissionClock_OnMovieAnimFinished");
static_assert(offsetof(TedMissionClock_OnMovieAnimFinished, InWidget) == 0x000000, "Member 'TedMissionClock_OnMovieAnimFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedMissionClock_OnMovieAnimFinished, InSource) == 0x000008, "Member 'TedMissionClock_OnMovieAnimFinished::InSource' has a wrong offset!");

// Function Tempest.TedMissionClock.OnMovieAnimStarted
// 0x0010 (0x0010 - 0x0000)
struct TedMissionClock_OnMovieAnimStarted final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionClock_OnMovieAnimStarted) == 0x000008, "Wrong alignment on TedMissionClock_OnMovieAnimStarted");
static_assert(sizeof(TedMissionClock_OnMovieAnimStarted) == 0x000010, "Wrong size on TedMissionClock_OnMovieAnimStarted");
static_assert(offsetof(TedMissionClock_OnMovieAnimStarted, InWidget) == 0x000000, "Member 'TedMissionClock_OnMovieAnimStarted::InWidget' has a wrong offset!");
static_assert(offsetof(TedMissionClock_OnMovieAnimStarted, InSource) == 0x000008, "Member 'TedMissionClock_OnMovieAnimStarted::InSource' has a wrong offset!");

// Function Tempest.TedInfantry_Harvester.K2_OnResourceChange
// 0x0004 (0x0004 - 0x0000)
struct TedInfantry_Harvester_K2_OnResourceChange final
{
public:
	float                                         ResourceToMaxCapacityPct;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInfantry_Harvester_K2_OnResourceChange) == 0x000004, "Wrong alignment on TedInfantry_Harvester_K2_OnResourceChange");
static_assert(sizeof(TedInfantry_Harvester_K2_OnResourceChange) == 0x000004, "Wrong size on TedInfantry_Harvester_K2_OnResourceChange");
static_assert(offsetof(TedInfantry_Harvester_K2_OnResourceChange, ResourceToMaxCapacityPct) == 0x000000, "Member 'TedInfantry_Harvester_K2_OnResourceChange::ResourceToMaxCapacityPct' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.IsAutoharvestEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedMobileRefineryInterface_IsAutoharvestEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_IsAutoharvestEnabled) == 0x000001, "Wrong alignment on TedMobileRefineryInterface_IsAutoharvestEnabled");
static_assert(sizeof(TedMobileRefineryInterface_IsAutoharvestEnabled) == 0x000001, "Wrong size on TedMobileRefineryInterface_IsAutoharvestEnabled");
static_assert(offsetof(TedMobileRefineryInterface_IsAutoharvestEnabled, ReturnValue) == 0x000000, "Member 'TedMobileRefineryInterface_IsAutoharvestEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.SetTargetResourceVolume
// 0x0008 (0x0008 - 0x0000)
struct TedMobileRefineryInterface_SetTargetResourceVolume final
{
public:
	class ATempestFieldVolume*                    InVolume;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_SetTargetResourceVolume) == 0x000008, "Wrong alignment on TedMobileRefineryInterface_SetTargetResourceVolume");
static_assert(sizeof(TedMobileRefineryInterface_SetTargetResourceVolume) == 0x000008, "Wrong size on TedMobileRefineryInterface_SetTargetResourceVolume");
static_assert(offsetof(TedMobileRefineryInterface_SetTargetResourceVolume, InVolume) == 0x000000, "Member 'TedMobileRefineryInterface_SetTargetResourceVolume::InVolume' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.GetHarvesterLimit
// 0x0004 (0x0004 - 0x0000)
struct TedMobileRefineryInterface_GetHarvesterLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_GetHarvesterLimit) == 0x000004, "Wrong alignment on TedMobileRefineryInterface_GetHarvesterLimit");
static_assert(sizeof(TedMobileRefineryInterface_GetHarvesterLimit) == 0x000004, "Wrong size on TedMobileRefineryInterface_GetHarvesterLimit");
static_assert(offsetof(TedMobileRefineryInterface_GetHarvesterLimit, ReturnValue) == 0x000000, "Member 'TedMobileRefineryInterface_GetHarvesterLimit::ReturnValue' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.GetTargetResourceVolume
// 0x0008 (0x0008 - 0x0000)
struct TedMobileRefineryInterface_GetTargetResourceVolume final
{
public:
	class ATempestFieldVolume*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_GetTargetResourceVolume) == 0x000008, "Wrong alignment on TedMobileRefineryInterface_GetTargetResourceVolume");
static_assert(sizeof(TedMobileRefineryInterface_GetTargetResourceVolume) == 0x000008, "Wrong size on TedMobileRefineryInterface_GetTargetResourceVolume");
static_assert(offsetof(TedMobileRefineryInterface_GetTargetResourceVolume, ReturnValue) == 0x000000, "Member 'TedMobileRefineryInterface_GetTargetResourceVolume::ReturnValue' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.GetTargetResourceVolumeBBKeyName
// 0x0008 (0x0008 - 0x0000)
struct TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName) == 0x000004, "Wrong alignment on TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName");
static_assert(sizeof(TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName) == 0x000008, "Wrong size on TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName");
static_assert(offsetof(TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName, ReturnValue) == 0x000000, "Member 'TedMobileRefineryInterface_GetTargetResourceVolumeBBKeyName::ReturnValue' has a wrong offset!");

// Function Tempest.TedMobileRefineryInterface.K2_GetHarvesters
// 0x0010 (0x0010 - 0x0000)
struct TedMobileRefineryInterface_K2_GetHarvesters final
{
public:
	TArray<class ATedUnitBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMobileRefineryInterface_K2_GetHarvesters) == 0x000008, "Wrong alignment on TedMobileRefineryInterface_K2_GetHarvesters");
static_assert(sizeof(TedMobileRefineryInterface_K2_GetHarvesters) == 0x000010, "Wrong size on TedMobileRefineryInterface_K2_GetHarvesters");
static_assert(offsetof(TedMobileRefineryInterface_K2_GetHarvesters, ReturnValue) == 0x000000, "Member 'TedMobileRefineryInterface_K2_GetHarvesters::ReturnValue' has a wrong offset!");

// Function Tempest.TedInputMappingPicker.HandlePopupButtonClick_Ok
// 0x0004 (0x0004 - 0x0000)
struct TedInputMappingPicker_HandlePopupButtonClick_Ok final
{
public:
	int32                                         InButtonIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputMappingPicker_HandlePopupButtonClick_Ok) == 0x000004, "Wrong alignment on TedInputMappingPicker_HandlePopupButtonClick_Ok");
static_assert(sizeof(TedInputMappingPicker_HandlePopupButtonClick_Ok) == 0x000004, "Wrong size on TedInputMappingPicker_HandlePopupButtonClick_Ok");
static_assert(offsetof(TedInputMappingPicker_HandlePopupButtonClick_Ok, InButtonIndex) == 0x000000, "Member 'TedInputMappingPicker_HandlePopupButtonClick_Ok::InButtonIndex' has a wrong offset!");

// Function Tempest.TedInputMappingPicker.NotifyOnPick
// 0x0020 (0x0020 - 0x0000)
struct TedInputMappingPicker_NotifyOnPick final
{
public:
	struct FInputChord                            InChord;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputMappingPicker_NotifyOnPick) == 0x000008, "Wrong alignment on TedInputMappingPicker_NotifyOnPick");
static_assert(sizeof(TedInputMappingPicker_NotifyOnPick) == 0x000020, "Wrong size on TedInputMappingPicker_NotifyOnPick");
static_assert(offsetof(TedInputMappingPicker_NotifyOnPick, InChord) == 0x000000, "Member 'TedInputMappingPicker_NotifyOnPick::InChord' has a wrong offset!");

// Function Tempest.TedInputMappingPicker.GetInputDisplayText
// 0x0010 (0x0010 - 0x0000)
struct TedInputMappingPicker_GetInputDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputMappingPicker_GetInputDisplayText) == 0x000008, "Wrong alignment on TedInputMappingPicker_GetInputDisplayText");
static_assert(sizeof(TedInputMappingPicker_GetInputDisplayText) == 0x000010, "Wrong size on TedInputMappingPicker_GetInputDisplayText");
static_assert(offsetof(TedInputMappingPicker_GetInputDisplayText, ReturnValue) == 0x000000, "Member 'TedInputMappingPicker_GetInputDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedInputSettings.GetAvailableInputNames
// 0x0010 (0x0010 - 0x0000)
struct TedInputSettings_GetAvailableInputNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputSettings_GetAvailableInputNames) == 0x000008, "Wrong alignment on TedInputSettings_GetAvailableInputNames");
static_assert(sizeof(TedInputSettings_GetAvailableInputNames) == 0x000010, "Wrong size on TedInputSettings_GetAvailableInputNames");
static_assert(offsetof(TedInputSettings_GetAvailableInputNames, ReturnValue) == 0x000000, "Member 'TedInputSettings_GetAvailableInputNames::ReturnValue' has a wrong offset!");

// Function Tempest.TedInputSettings.GetAvailableSectionNames
// 0x0010 (0x0010 - 0x0000)
struct TedInputSettings_GetAvailableSectionNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedInputSettings_GetAvailableSectionNames) == 0x000008, "Wrong alignment on TedInputSettings_GetAvailableSectionNames");
static_assert(sizeof(TedInputSettings_GetAvailableSectionNames) == 0x000010, "Wrong size on TedInputSettings_GetAvailableSectionNames");
static_assert(offsetof(TedInputSettings_GetAvailableSectionNames, ReturnValue) == 0x000000, "Member 'TedInputSettings_GetAvailableSectionNames::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.FadeOutTrack
// 0x0004 (0x0004 - 0x0000)
struct TedJukeboxSubsystem_FadeOutTrack final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_FadeOutTrack) == 0x000004, "Wrong alignment on TedJukeboxSubsystem_FadeOutTrack");
static_assert(sizeof(TedJukeboxSubsystem_FadeOutTrack) == 0x000004, "Wrong size on TedJukeboxSubsystem_FadeOutTrack");
static_assert(offsetof(TedJukeboxSubsystem_FadeOutTrack, FadeOutDuration) == 0x000000, "Member 'TedJukeboxSubsystem_FadeOutTrack::FadeOutDuration' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.GetPlaytimeText
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxSubsystem_GetPlaytimeText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_GetPlaytimeText) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_GetPlaytimeText");
static_assert(sizeof(TedJukeboxSubsystem_GetPlaytimeText) == 0x000010, "Wrong size on TedJukeboxSubsystem_GetPlaytimeText");
static_assert(offsetof(TedJukeboxSubsystem_GetPlaytimeText, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_GetPlaytimeText::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_IsPaused) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_IsPaused");
static_assert(sizeof(TedJukeboxSubsystem_IsPaused) == 0x000001, "Wrong size on TedJukeboxSubsystem_IsPaused");
static_assert(offsetof(TedJukeboxSubsystem_IsPaused, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_IsPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.OnTrackAssetsLoaded_Internal
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal final
{
public:
	TArray<struct FPrimaryAssetId>                AssetsLoaded;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal");
static_assert(sizeof(TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal) == 0x000010, "Wrong size on TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal");
static_assert(offsetof(TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal, AssetsLoaded) == 0x000000, "Member 'TedJukeboxSubsystem_OnTrackAssetsLoaded_Internal::AssetsLoaded' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.Play
// 0x0008 (0x0008 - 0x0000)
struct TedJukeboxSubsystem_Play final
{
public:
	class UTedJukeboxTrackAsset*                  NewTrack;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_Play) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_Play");
static_assert(sizeof(TedJukeboxSubsystem_Play) == 0x000008, "Wrong size on TedJukeboxSubsystem_Play");
static_assert(offsetof(TedJukeboxSubsystem_Play, NewTrack) == 0x000000, "Member 'TedJukeboxSubsystem_Play::NewTrack' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.PlayBackPercentageCallBack
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxSubsystem_PlayBackPercentageCallBack final
{
public:
	const class USoundWave*                       SoundWave;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedJukeboxSubsystem_PlayBackPercentageCallBack) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_PlayBackPercentageCallBack");
static_assert(sizeof(TedJukeboxSubsystem_PlayBackPercentageCallBack) == 0x000010, "Wrong size on TedJukeboxSubsystem_PlayBackPercentageCallBack");
static_assert(offsetof(TedJukeboxSubsystem_PlayBackPercentageCallBack, SoundWave) == 0x000000, "Member 'TedJukeboxSubsystem_PlayBackPercentageCallBack::SoundWave' has a wrong offset!");
static_assert(offsetof(TedJukeboxSubsystem_PlayBackPercentageCallBack, Percentage) == 0x000008, "Member 'TedJukeboxSubsystem_PlayBackPercentageCallBack::Percentage' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.PlayEndGameTrack
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_PlayEndGameTrack final
{
public:
	bool                                          bInVictory;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_PlayEndGameTrack) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_PlayEndGameTrack");
static_assert(sizeof(TedJukeboxSubsystem_PlayEndGameTrack) == 0x000001, "Wrong size on TedJukeboxSubsystem_PlayEndGameTrack");
static_assert(offsetof(TedJukeboxSubsystem_PlayEndGameTrack, bInVictory) == 0x000000, "Member 'TedJukeboxSubsystem_PlayEndGameTrack::bInVictory' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.PlayNext
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_PlayNext final
{
public:
	bool                                          bForceNewTrack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_PlayNext) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_PlayNext");
static_assert(sizeof(TedJukeboxSubsystem_PlayNext) == 0x000001, "Wrong size on TedJukeboxSubsystem_PlayNext");
static_assert(offsetof(TedJukeboxSubsystem_PlayNext, bForceNewTrack) == 0x000000, "Member 'TedJukeboxSubsystem_PlayNext::bForceNewTrack' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.PlayNext_Muted
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_PlayNext_Muted final
{
public:
	bool                                          bForceNewTrack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_PlayNext_Muted) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_PlayNext_Muted");
static_assert(sizeof(TedJukeboxSubsystem_PlayNext_Muted) == 0x000001, "Wrong size on TedJukeboxSubsystem_PlayNext_Muted");
static_assert(offsetof(TedJukeboxSubsystem_PlayNext_Muted, bForceNewTrack) == 0x000000, "Member 'TedJukeboxSubsystem_PlayNext_Muted::bForceNewTrack' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.PlayPrevious
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_PlayPrevious final
{
public:
	bool                                          bForceNewTrack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_PlayPrevious) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_PlayPrevious");
static_assert(sizeof(TedJukeboxSubsystem_PlayPrevious) == 0x000001, "Wrong size on TedJukeboxSubsystem_PlayPrevious");
static_assert(offsetof(TedJukeboxSubsystem_PlayPrevious, bForceNewTrack) == 0x000000, "Member 'TedJukeboxSubsystem_PlayPrevious::bForceNewTrack' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.SetMissionTrackMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_SetMissionTrackMode final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_SetMissionTrackMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_SetMissionTrackMode");
static_assert(sizeof(TedJukeboxSubsystem_SetMissionTrackMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_SetMissionTrackMode");
static_assert(offsetof(TedJukeboxSubsystem_SetMissionTrackMode, NewActive) == 0x000000, "Member 'TedJukeboxSubsystem_SetMissionTrackMode::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.SetPause
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_SetPause final
{
public:
	bool                                          NewPause;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_SetPause) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_SetPause");
static_assert(sizeof(TedJukeboxSubsystem_SetPause) == 0x000001, "Wrong size on TedJukeboxSubsystem_SetPause");
static_assert(offsetof(TedJukeboxSubsystem_SetPause, NewPause) == 0x000000, "Member 'TedJukeboxSubsystem_SetPause::NewPause' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.SetPlayPercentage
// 0x0004 (0x0004 - 0x0000)
struct TedJukeboxSubsystem_SetPlayPercentage final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_SetPlayPercentage) == 0x000004, "Wrong alignment on TedJukeboxSubsystem_SetPlayPercentage");
static_assert(sizeof(TedJukeboxSubsystem_SetPlayPercentage) == 0x000004, "Wrong size on TedJukeboxSubsystem_SetPlayPercentage");
static_assert(offsetof(TedJukeboxSubsystem_SetPlayPercentage, Value) == 0x000000, "Member 'TedJukeboxSubsystem_SetPlayPercentage::Value' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.SetRepeatMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_SetRepeatMode final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_SetRepeatMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_SetRepeatMode");
static_assert(sizeof(TedJukeboxSubsystem_SetRepeatMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_SetRepeatMode");
static_assert(offsetof(TedJukeboxSubsystem_SetRepeatMode, NewActive) == 0x000000, "Member 'TedJukeboxSubsystem_SetRepeatMode::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.SetShuffleMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_SetShuffleMode final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_SetShuffleMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_SetShuffleMode");
static_assert(sizeof(TedJukeboxSubsystem_SetShuffleMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_SetShuffleMode");
static_assert(offsetof(TedJukeboxSubsystem_SetShuffleMode, NewActive) == 0x000000, "Member 'TedJukeboxSubsystem_SetShuffleMode::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.GetAllTracks
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxSubsystem_GetAllTracks final
{
public:
	TArray<class UTedJukeboxTrackAsset*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_GetAllTracks) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_GetAllTracks");
static_assert(sizeof(TedJukeboxSubsystem_GetAllTracks) == 0x000010, "Wrong size on TedJukeboxSubsystem_GetAllTracks");
static_assert(offsetof(TedJukeboxSubsystem_GetAllTracks, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_GetAllTracks::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.GetCurrentPlayedTrack
// 0x0008 (0x0008 - 0x0000)
struct TedJukeboxSubsystem_GetCurrentPlayedTrack final
{
public:
	class UTedJukeboxTrackAsset*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_GetCurrentPlayedTrack) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_GetCurrentPlayedTrack");
static_assert(sizeof(TedJukeboxSubsystem_GetCurrentPlayedTrack) == 0x000008, "Wrong size on TedJukeboxSubsystem_GetCurrentPlayedTrack");
static_assert(offsetof(TedJukeboxSubsystem_GetCurrentPlayedTrack, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_GetCurrentPlayedTrack::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.GetCurrentPlaylist
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxSubsystem_GetCurrentPlaylist final
{
public:
	TArray<class UTedJukeboxTrackAsset*>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_GetCurrentPlaylist) == 0x000008, "Wrong alignment on TedJukeboxSubsystem_GetCurrentPlaylist");
static_assert(sizeof(TedJukeboxSubsystem_GetCurrentPlaylist) == 0x000010, "Wrong size on TedJukeboxSubsystem_GetCurrentPlaylist");
static_assert(offsetof(TedJukeboxSubsystem_GetCurrentPlaylist, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_GetCurrentPlaylist::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.GetCurrenttrackPlayTime
// 0x0004 (0x0004 - 0x0000)
struct TedJukeboxSubsystem_GetCurrenttrackPlayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_GetCurrenttrackPlayTime) == 0x000004, "Wrong alignment on TedJukeboxSubsystem_GetCurrenttrackPlayTime");
static_assert(sizeof(TedJukeboxSubsystem_GetCurrenttrackPlayTime) == 0x000004, "Wrong size on TedJukeboxSubsystem_GetCurrenttrackPlayTime");
static_assert(offsetof(TedJukeboxSubsystem_GetCurrenttrackPlayTime, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_GetCurrenttrackPlayTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.IsMissionTrackMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_IsMissionTrackMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_IsMissionTrackMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_IsMissionTrackMode");
static_assert(sizeof(TedJukeboxSubsystem_IsMissionTrackMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_IsMissionTrackMode");
static_assert(offsetof(TedJukeboxSubsystem_IsMissionTrackMode, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_IsMissionTrackMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.IsRepeatMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_IsRepeatMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_IsRepeatMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_IsRepeatMode");
static_assert(sizeof(TedJukeboxSubsystem_IsRepeatMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_IsRepeatMode");
static_assert(offsetof(TedJukeboxSubsystem_IsRepeatMode, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_IsRepeatMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxSubsystem.IsShuffleMode
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxSubsystem_IsShuffleMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxSubsystem_IsShuffleMode) == 0x000001, "Wrong alignment on TedJukeboxSubsystem_IsShuffleMode");
static_assert(sizeof(TedJukeboxSubsystem_IsShuffleMode) == 0x000001, "Wrong size on TedJukeboxSubsystem_IsShuffleMode");
static_assert(offsetof(TedJukeboxSubsystem_IsShuffleMode, ReturnValue) == 0x000000, "Member 'TedJukeboxSubsystem_IsShuffleMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxTrackEntry.GetContent
// 0x0008 (0x0008 - 0x0000)
struct TedJukeboxTrackEntry_GetContent final
{
public:
	class UTedJukeboxTrackAsset*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxTrackEntry_GetContent) == 0x000008, "Wrong alignment on TedJukeboxTrackEntry_GetContent");
static_assert(sizeof(TedJukeboxTrackEntry_GetContent) == 0x000008, "Wrong size on TedJukeboxTrackEntry_GetContent");
static_assert(offsetof(TedJukeboxTrackEntry_GetContent, ReturnValue) == 0x000000, "Member 'TedJukeboxTrackEntry_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxTrackPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxTrackPanel_SetContent final
{
public:
	TArray<class UTedJukeboxTrackAsset*>          NewContent;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxTrackPanel_SetContent) == 0x000008, "Wrong alignment on TedJukeboxTrackPanel_SetContent");
static_assert(sizeof(TedJukeboxTrackPanel_SetContent) == 0x000010, "Wrong size on TedJukeboxTrackPanel_SetContent");
static_assert(offsetof(TedJukeboxTrackPanel_SetContent, NewContent) == 0x000000, "Member 'TedJukeboxTrackPanel_SetContent::NewContent' has a wrong offset!");

// Function Tempest.TedJukeboxTrackPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedJukeboxTrackPanel_GetContent final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedJukeboxTrackAsset*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxTrackPanel_GetContent) == 0x000008, "Wrong alignment on TedJukeboxTrackPanel_GetContent");
static_assert(sizeof(TedJukeboxTrackPanel_GetContent) == 0x000010, "Wrong size on TedJukeboxTrackPanel_GetContent");
static_assert(offsetof(TedJukeboxTrackPanel_GetContent, Index_0) == 0x000000, "Member 'TedJukeboxTrackPanel_GetContent::Index_0' has a wrong offset!");
static_assert(offsetof(TedJukeboxTrackPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedJukeboxTrackPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedJukeboxWidgetMain.OnMissionModeStateChangeCallback
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxWidgetMain_OnMissionModeStateChangeCallback final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxWidgetMain_OnMissionModeStateChangeCallback) == 0x000001, "Wrong alignment on TedJukeboxWidgetMain_OnMissionModeStateChangeCallback");
static_assert(sizeof(TedJukeboxWidgetMain_OnMissionModeStateChangeCallback) == 0x000001, "Wrong size on TedJukeboxWidgetMain_OnMissionModeStateChangeCallback");
static_assert(offsetof(TedJukeboxWidgetMain_OnMissionModeStateChangeCallback, NewActive) == 0x000000, "Member 'TedJukeboxWidgetMain_OnMissionModeStateChangeCallback::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxWidgetMain.OnPauseModeStateChangeCallback
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxWidgetMain_OnPauseModeStateChangeCallback final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxWidgetMain_OnPauseModeStateChangeCallback) == 0x000001, "Wrong alignment on TedJukeboxWidgetMain_OnPauseModeStateChangeCallback");
static_assert(sizeof(TedJukeboxWidgetMain_OnPauseModeStateChangeCallback) == 0x000001, "Wrong size on TedJukeboxWidgetMain_OnPauseModeStateChangeCallback");
static_assert(offsetof(TedJukeboxWidgetMain_OnPauseModeStateChangeCallback, NewActive) == 0x000000, "Member 'TedJukeboxWidgetMain_OnPauseModeStateChangeCallback::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxWidgetMain.OnShuffleModeStateChangeCallback
// 0x0001 (0x0001 - 0x0000)
struct TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback final
{
public:
	bool                                          NewActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback) == 0x000001, "Wrong alignment on TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback");
static_assert(sizeof(TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback) == 0x000001, "Wrong size on TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback");
static_assert(offsetof(TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback, NewActive) == 0x000000, "Member 'TedJukeboxWidgetMain_OnShuffleModeStateChangeCallback::NewActive' has a wrong offset!");

// Function Tempest.TedJukeboxWidgetMain.OnTrackFinishedCallack
// 0x0008 (0x0008 - 0x0000)
struct TedJukeboxWidgetMain_OnTrackFinishedCallack final
{
public:
	class UTedJukeboxTrackAsset*                  NewTrack;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxWidgetMain_OnTrackFinishedCallack) == 0x000008, "Wrong alignment on TedJukeboxWidgetMain_OnTrackFinishedCallack");
static_assert(sizeof(TedJukeboxWidgetMain_OnTrackFinishedCallack) == 0x000008, "Wrong size on TedJukeboxWidgetMain_OnTrackFinishedCallack");
static_assert(offsetof(TedJukeboxWidgetMain_OnTrackFinishedCallack, NewTrack) == 0x000000, "Member 'TedJukeboxWidgetMain_OnTrackFinishedCallack::NewTrack' has a wrong offset!");

// Function Tempest.TedJukeboxWidgetMain.RefreshTrack
// 0x0008 (0x0008 - 0x0000)
struct TedJukeboxWidgetMain_RefreshTrack final
{
public:
	class UTedJukeboxTrackAsset*                  NewTrack;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedJukeboxWidgetMain_RefreshTrack) == 0x000008, "Wrong alignment on TedJukeboxWidgetMain_RefreshTrack");
static_assert(sizeof(TedJukeboxWidgetMain_RefreshTrack) == 0x000008, "Wrong size on TedJukeboxWidgetMain_RefreshTrack");
static_assert(offsetof(TedJukeboxWidgetMain_RefreshTrack, NewTrack) == 0x000000, "Member 'TedJukeboxWidgetMain_RefreshTrack::NewTrack' has a wrong offset!");

// Function Tempest.AirDropInVolumeBlueprintNode.RequestAirDropInVolume
// 0x0060 (0x0060 - 0x0000)
struct AirDropInVolumeBlueprintNode_RequestAirDropInVolume final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirDropInVolumeInputs                        In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAirDropInVolumeOutputs                       Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class ATedUnitSpawner_Volume*                 Spawner;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   DroppedUnits;                                      // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume) == 0x000008, "Wrong alignment on AirDropInVolumeBlueprintNode_RequestAirDropInVolume");
static_assert(sizeof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume) == 0x000060, "Wrong size on AirDropInVolumeBlueprintNode_RequestAirDropInVolume");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, InWorldContext) == 0x000000, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::InWorldContext' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, In) == 0x000008, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::In' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, Out) == 0x000009, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::Out' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, LatentInfo) == 0x000010, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::LatentInfo' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, SaveInfo) == 0x000028, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::SaveInfo' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, Spawner) == 0x000048, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::Spawner' has a wrong offset!");
static_assert(offsetof(AirDropInVolumeBlueprintNode_RequestAirDropInVolume, DroppedUnits) == 0x000050, "Member 'AirDropInVolumeBlueprintNode_RequestAirDropInVolume::DroppedUnits' has a wrong offset!");

// Function Tempest.BatchSpawnBlueprintNode.RequestBatchSpawn
// 0x0068 (0x0068 - 0x0000)
struct BatchSpawnBlueprintNode_RequestBatchSpawn final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBatchSpawnInputs                             In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBatchSpawnOutputs                            Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	TArray<class ATedUnitSpawner*>                Spawners;                                          // 0x0048(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   SpawnedUnits;                                      // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchSpawnBlueprintNode_RequestBatchSpawn) == 0x000008, "Wrong alignment on BatchSpawnBlueprintNode_RequestBatchSpawn");
static_assert(sizeof(BatchSpawnBlueprintNode_RequestBatchSpawn) == 0x000068, "Wrong size on BatchSpawnBlueprintNode_RequestBatchSpawn");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, InWorldContext) == 0x000000, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::InWorldContext' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, In) == 0x000008, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::In' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, Out) == 0x000009, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::Out' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, LatentInfo) == 0x000010, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::LatentInfo' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, SaveInfo) == 0x000028, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::SaveInfo' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, Spawners) == 0x000048, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::Spawners' has a wrong offset!");
static_assert(offsetof(BatchSpawnBlueprintNode_RequestBatchSpawn, SpawnedUnits) == 0x000058, "Member 'BatchSpawnBlueprintNode_RequestBatchSpawn::SpawnedUnits' has a wrong offset!");

// Function Tempest.SpawnBlueprintNode.RequestSpawn
// 0x0058 (0x0058 - 0x0000)
struct SpawnBlueprintNode_RequestSpawn final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBatchSpawnInputs                             In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBatchSpawnOutputs                            Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class ATedUnitSpawner*                        Spawner;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           SpawnedUnit;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnBlueprintNode_RequestSpawn) == 0x000008, "Wrong alignment on SpawnBlueprintNode_RequestSpawn");
static_assert(sizeof(SpawnBlueprintNode_RequestSpawn) == 0x000058, "Wrong size on SpawnBlueprintNode_RequestSpawn");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, InWorldContext) == 0x000000, "Member 'SpawnBlueprintNode_RequestSpawn::InWorldContext' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, In) == 0x000008, "Member 'SpawnBlueprintNode_RequestSpawn::In' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, Out) == 0x000009, "Member 'SpawnBlueprintNode_RequestSpawn::Out' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, LatentInfo) == 0x000010, "Member 'SpawnBlueprintNode_RequestSpawn::LatentInfo' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, SaveInfo) == 0x000028, "Member 'SpawnBlueprintNode_RequestSpawn::SaveInfo' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, Spawner) == 0x000048, "Member 'SpawnBlueprintNode_RequestSpawn::Spawner' has a wrong offset!");
static_assert(offsetof(SpawnBlueprintNode_RequestSpawn, SpawnedUnit) == 0x000050, "Member 'SpawnBlueprintNode_RequestSpawn::SpawnedUnit' has a wrong offset!");

// Function Tempest.SpawnStaggeredBlueprintNode.RequestSpawnInVolumeStaggered
// 0x0068 (0x0068 - 0x0000)
struct SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnStaggeredInputs                         In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnStaggeredOutputs                        Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	class ATedUnitSpawner_Volume*                 Spawner;                                           // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayMin;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayMax;                                          // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   SpawnedUnits;                                      // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered) == 0x000008, "Wrong alignment on SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered");
static_assert(sizeof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered) == 0x000068, "Wrong size on SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, InWorldContext) == 0x000000, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::InWorldContext' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, In) == 0x000008, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::In' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, Out) == 0x000009, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::Out' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, LatentInfo) == 0x000010, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::LatentInfo' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, SaveInfo) == 0x000028, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::SaveInfo' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, Spawner) == 0x000048, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::Spawner' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, DelayMin) == 0x000050, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::DelayMin' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, DelayMax) == 0x000054, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::DelayMax' has a wrong offset!");
static_assert(offsetof(SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered, SpawnedUnits) == 0x000058, "Member 'SpawnStaggeredBlueprintNode_RequestSpawnInVolumeStaggered::SpawnedUnits' has a wrong offset!");

// Function Tempest.WaitForProductionBlueprintNode.WaitForProduction
// 0x0220 (0x0220 - 0x0000)
struct WaitForProductionBlueprintNode_WaitForProduction final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELatentActionWaitForProductionInputs          In;                                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELatentActionWaitForProductionOutputs         Out;                                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAfterProduction;                              // 0x0049(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StopAfterProducingAmount;                          // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPawnFilter                         Filter;                                            // 0x0050(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      OutProductionStructure;                            // 0x0210(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           OutProducedUnit;                                   // 0x0218(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaitForProductionBlueprintNode_WaitForProduction) == 0x000008, "Wrong alignment on WaitForProductionBlueprintNode_WaitForProduction");
static_assert(sizeof(WaitForProductionBlueprintNode_WaitForProduction) == 0x000220, "Wrong size on WaitForProductionBlueprintNode_WaitForProduction");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, InWorldContext) == 0x000000, "Member 'WaitForProductionBlueprintNode_WaitForProduction::InWorldContext' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, In) == 0x000008, "Member 'WaitForProductionBlueprintNode_WaitForProduction::In' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, Out) == 0x000009, "Member 'WaitForProductionBlueprintNode_WaitForProduction::Out' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, LatentInfo) == 0x000010, "Member 'WaitForProductionBlueprintNode_WaitForProduction::LatentInfo' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, SaveInfo) == 0x000028, "Member 'WaitForProductionBlueprintNode_WaitForProduction::SaveInfo' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, PlayerID) == 0x000048, "Member 'WaitForProductionBlueprintNode_WaitForProduction::PlayerID' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, bStopAfterProduction) == 0x000049, "Member 'WaitForProductionBlueprintNode_WaitForProduction::bStopAfterProduction' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, StopAfterProducingAmount) == 0x00004C, "Member 'WaitForProductionBlueprintNode_WaitForProduction::StopAfterProducingAmount' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, Filter) == 0x000050, "Member 'WaitForProductionBlueprintNode_WaitForProduction::Filter' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, OutProductionStructure) == 0x000210, "Member 'WaitForProductionBlueprintNode_WaitForProduction::OutProductionStructure' has a wrong offset!");
static_assert(offsetof(WaitForProductionBlueprintNode_WaitForProduction, OutProducedUnit) == 0x000218, "Member 'WaitForProductionBlueprintNode_WaitForProduction::OutProducedUnit' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorDamagedTag
// 0x0070 (0x0070 - 0x0000)
struct TedLatentFunctionLibrary_ActorDamagedTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorDamagedTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorDamagedTag");
static_assert(sizeof(TedLatentFunctionLibrary_ActorDamagedTag) == 0x000070, "Wrong size on TedLatentFunctionLibrary_ActorDamagedTag");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, ActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, ActorClass) == 0x000030, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::ActorClass' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, LatentInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorDamagedTag, SaveInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_ActorDamagedTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByActorClasses
// 0x0088 (0x0088 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bExactClasses;                                     // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0068(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses) == 0x000088, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, Classes) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::Classes' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, bExactClasses) == 0x000048, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::bExactClasses' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, LatentInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses, SaveInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorClasses::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByActorTags
// 0x0090 (0x0090 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0070(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags) == 0x000090, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, ActorTags) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, LatentInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags, SaveInfo) == 0x000070, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByActorTags::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByDefinitions
// 0x0080 (0x0080 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> Definitions;                             // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0060(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions) == 0x000080, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, Definitions) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::Definitions' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, LatentInfo) == 0x000048, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions, SaveInfo) == 0x000060, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByDefinitions::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByPawnFilter
// 0x0230 (0x0230 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPawnFilter                         InFilter;                                          // 0x0038(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x01F8(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0210(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter) == 0x000230, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, InFilter) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::InFilter' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, LatentInfo) == 0x0001F8, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter, SaveInfo) == 0x000210, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPawnFilter::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByPlayer
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer) == 0x000078, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, Player) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPlayer::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByPrerequisites
// 0x0180 (0x0180 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPrerequisiteContainer              Prerequisites;                                     // 0x0038(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0148(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0160(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites) == 0x000180, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, Prerequisites) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::Prerequisites' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, LatentInfo) == 0x000148, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites, SaveInfo) == 0x000160, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByPrerequisites::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorEntersVolume_FilterByTech
// 0x0090 (0x0090 - 0x0000)
struct TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TechTags;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0070(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech");
static_assert(sizeof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech) == 0x000090, "Wrong size on TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, TechTags) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::TechTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, LatentInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech, SaveInfo) == 0x000070, "Member 'TedLatentFunctionLibrary_ActorEntersVolume_FilterByTech::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorExist
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_ActorExist final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Actor;                                             // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorExist) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorExist");
static_assert(sizeof(TedLatentFunctionLibrary_ActorExist) == 0x000078, "Wrong size on TedLatentFunctionLibrary_ActorExist");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorExist::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorExist::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, Actor) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorExist::Actor' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, bInverse) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorExist::bInverse' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_ActorExist::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorExist, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorExist::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByActorClasses
// 0x0088 (0x0088 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x0038(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bExactClasses;                                     // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0050(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0068(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses) == 0x000088, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, Classes) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::Classes' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, bExactClasses) == 0x000048, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::bExactClasses' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, LatentInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses, SaveInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorClasses::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByActorTags
// 0x0090 (0x0090 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0070(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags) == 0x000090, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, ActorTags) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, LatentInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags, SaveInfo) == 0x000070, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByActorTags::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByDefinitions
// 0x0080 (0x0080 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> Definitions;                             // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0060(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions) == 0x000080, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, Definitions) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::Definitions' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, LatentInfo) == 0x000048, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions, SaveInfo) == 0x000060, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByDefinitions::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByPawnFilter
// 0x0230 (0x0230 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPawnFilter                         InFilter;                                          // 0x0038(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x01F8(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0210(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter) == 0x000230, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, InFilter) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::InFilter' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, LatentInfo) == 0x0001F8, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter, SaveInfo) == 0x000210, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPawnFilter::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByPlayer
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer) == 0x000078, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, Player) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPlayer::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByPrerequisites
// 0x0180 (0x0180 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedPrerequisiteContainer              Prerequisites;                                     // 0x0038(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0148(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0160(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites) == 0x000180, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, Prerequisites) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::Prerequisites' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, LatentInfo) == 0x000148, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites, SaveInfo) == 0x000160, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByPrerequisites::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorLeavesVolume_FilterByTech
// 0x0090 (0x0090 - 0x0000)
struct TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TechTags;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0058(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0070(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech");
static_assert(sizeof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech) == 0x000090, "Wrong size on TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, TechTags) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::TechTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, LatentInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech, SaveInfo) == 0x000070, "Member 'TedLatentFunctionLibrary_ActorLeavesVolume_FilterByTech::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorsExist
// 0x00A0 (0x00A0 - 0x0000)
struct TedLatentFunctionLibrary_ActorsExist final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftActorPtr>                    Actors;                                            // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0080(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorsExist) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorsExist");
static_assert(sizeof(TedLatentFunctionLibrary_ActorsExist) == 0x0000A0, "Wrong size on TedLatentFunctionLibrary_ActorsExist");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorsExist::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorsExist::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, Actors) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorsExist::Actors' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, ExpectedAmount) == 0x000060, "Member 'TedLatentFunctionLibrary_ActorsExist::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, Comparison) == 0x000064, "Member 'TedLatentFunctionLibrary_ActorsExist::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, LatentInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_ActorsExist::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExist, SaveInfo) == 0x000080, "Member 'TedLatentFunctionLibrary_ActorsExist::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ActorsExistTag
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_ActorsExistTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount_B;                                  // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ActorsExistTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ActorsExistTag");
static_assert(sizeof(TedLatentFunctionLibrary_ActorsExistTag) == 0x000078, "Wrong size on TedLatentFunctionLibrary_ActorsExistTag");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ActorsExistTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ActorsExistTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, ActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_ActorsExistTag::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, ActorClass) == 0x000030, "Member 'TedLatentFunctionLibrary_ActorsExistTag::ActorClass' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, ExpectedAmount_B) == 0x000038, "Member 'TedLatentFunctionLibrary_ActorsExistTag::ExpectedAmount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, Comparison) == 0x00003C, "Member 'TedLatentFunctionLibrary_ActorsExistTag::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_ActorsExistTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ActorsExistTag, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ActorsExistTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.AnyActorEntersVolume
// 0x0070 (0x0070 - 0x0000)
struct TedLatentFunctionLibrary_AnyActorEntersVolume final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_AnyActorEntersVolume) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_AnyActorEntersVolume");
static_assert(sizeof(TedLatentFunctionLibrary_AnyActorEntersVolume) == 0x000070, "Wrong size on TedLatentFunctionLibrary_AnyActorEntersVolume");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorEntersVolume, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_AnyActorEntersVolume::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorEntersVolume, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_AnyActorEntersVolume::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorEntersVolume, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_AnyActorEntersVolume::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorEntersVolume, LatentInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_AnyActorEntersVolume::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorEntersVolume, SaveInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_AnyActorEntersVolume::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.AnyActorLeavesVolume
// 0x0070 (0x0070 - 0x0000)
struct TedLatentFunctionLibrary_AnyActorLeavesVolume final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Volume;                                            // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_AnyActorLeavesVolume) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_AnyActorLeavesVolume");
static_assert(sizeof(TedLatentFunctionLibrary_AnyActorLeavesVolume) == 0x000070, "Wrong size on TedLatentFunctionLibrary_AnyActorLeavesVolume");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorLeavesVolume, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_AnyActorLeavesVolume::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorLeavesVolume, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_AnyActorLeavesVolume::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorLeavesVolume, Volume) == 0x000010, "Member 'TedLatentFunctionLibrary_AnyActorLeavesVolume::Volume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorLeavesVolume, LatentInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_AnyActorLeavesVolume::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_AnyActorLeavesVolume, SaveInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_AnyActorLeavesVolume::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.DisarmMinesTag
// 0x0070 (0x0070 - 0x0000)
struct TedLatentFunctionLibrary_DisarmMinesTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount_B;                                  // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_DisarmMinesTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_DisarmMinesTag");
static_assert(sizeof(TedLatentFunctionLibrary_DisarmMinesTag) == 0x000070, "Wrong size on TedLatentFunctionLibrary_DisarmMinesTag");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, ActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, ExpectedAmount_B) == 0x000030, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::ExpectedAmount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, LatentInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTag, SaveInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_DisarmMinesTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.DisarmMinesTagFiltered
// 0x0118 (0x0118 - 0x0000)
struct TedLatentFunctionLibrary_DisarmMinesTagFiltered final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MineActorTags;                                     // 0x0010(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount_B;                                  // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPawnFilterMode                            FilteringMode;                                     // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DisarmingActorTags;                                // 0x0038(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DisarmingActorTech;                                // 0x0058(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TSet<ETedPlayerID>                            DisarmingActorOwners;                              // 0x0078(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           DisarmingActorClassess;                            // 0x00C8(0x0010)(ConstParm, Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bExactDisarmingActorClass;                         // 0x00D8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x00E0(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x00F8(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_DisarmMinesTagFiltered) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_DisarmMinesTagFiltered");
static_assert(sizeof(TedLatentFunctionLibrary_DisarmMinesTagFiltered) == 0x000118, "Wrong size on TedLatentFunctionLibrary_DisarmMinesTagFiltered");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, MineActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::MineActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, ExpectedAmount_B) == 0x000030, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::ExpectedAmount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, FilteringMode) == 0x000034, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::FilteringMode' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, DisarmingActorTags) == 0x000038, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::DisarmingActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, DisarmingActorTech) == 0x000058, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::DisarmingActorTech' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, DisarmingActorOwners) == 0x000078, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::DisarmingActorOwners' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, DisarmingActorClassess) == 0x0000C8, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::DisarmingActorClassess' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, bExactDisarmingActorClass) == 0x0000D8, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::bExactDisarmingActorClass' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, LatentInfo) == 0x0000E0, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DisarmMinesTagFiltered, SaveInfo) == 0x0000F8, "Member 'TedLatentFunctionLibrary_DisarmMinesTagFiltered::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.DownloadOnlinePlayerProfile
// 0x0048 (0x0048 - 0x0000)
struct TedLatentFunctionLibrary_DownloadOnlinePlayerProfile final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_DownloadOnlinePlayerProfile");
static_assert(sizeof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile) == 0x000048, "Wrong size on TedLatentFunctionLibrary_DownloadOnlinePlayerProfile");
static_assert(offsetof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_DownloadOnlinePlayerProfile::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_DownloadOnlinePlayerProfile::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_DownloadOnlinePlayerProfile::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_DownloadOnlinePlayerProfile, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_DownloadOnlinePlayerProfile::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.EndGame_SP
// 0x0048 (0x0048 - 0x0000)
struct TedLatentFunctionLibrary_EndGame_SP final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVictory;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_EndGame_SP) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_EndGame_SP");
static_assert(sizeof(TedLatentFunctionLibrary_EndGame_SP) == 0x000048, "Wrong size on TedLatentFunctionLibrary_EndGame_SP");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_EndGame_SP::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_EndGame_SP::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP, bInVictory) == 0x000009, "Member 'TedLatentFunctionLibrary_EndGame_SP::bInVictory' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_EndGame_SP::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_EndGame_SP::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.EndGame_SP_Advanced
// 0x0048 (0x0048 - 0x0000)
struct TedLatentFunctionLibrary_EndGame_SP_Advanced final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInVictory;                                        // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSkipMovie;                                      // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSkipScoreScreen;                                // 0x000B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInSkipLevelRestart;                               // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_EndGame_SP_Advanced) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_EndGame_SP_Advanced");
static_assert(sizeof(TedLatentFunctionLibrary_EndGame_SP_Advanced) == 0x000048, "Wrong size on TedLatentFunctionLibrary_EndGame_SP_Advanced");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, bInVictory) == 0x000009, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::bInVictory' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, bInSkipMovie) == 0x00000A, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::bInSkipMovie' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, bInSkipScoreScreen) == 0x00000B, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::bInSkipScoreScreen' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, bInSkipLevelRestart) == 0x00000C, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::bInSkipLevelRestart' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_EndGame_SP_Advanced, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_EndGame_SP_Advanced::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.FadeCamera
// 0x0060 (0x0060 - 0x0000)
struct TedLatentFunctionLibrary_FadeCamera final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieFadeType                             FadeType;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFadeAudio;                                  // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0040(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_FadeCamera) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_FadeCamera");
static_assert(sizeof(TedLatentFunctionLibrary_FadeCamera) == 0x000060, "Wrong size on TedLatentFunctionLibrary_FadeCamera");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_FadeCamera::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, FadeType) == 0x000008, "Member 'TedLatentFunctionLibrary_FadeCamera::FadeType' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, Duration) == 0x00000C, "Member 'TedLatentFunctionLibrary_FadeCamera::Duration' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, Color) == 0x000010, "Member 'TedLatentFunctionLibrary_FadeCamera::Color' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, bShouldFadeAudio) == 0x000020, "Member 'TedLatentFunctionLibrary_FadeCamera::bShouldFadeAudio' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, LatentInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_FadeCamera::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_FadeCamera, SaveInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_FadeCamera::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.FullScreenMovieEnd
// 0x0001 (0x0001 - 0x0000)
struct TedLatentFunctionLibrary_FullScreenMovieEnd final
{
public:
	ETedLatentLink                                LinkAction;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_FullScreenMovieEnd) == 0x000001, "Wrong alignment on TedLatentFunctionLibrary_FullScreenMovieEnd");
static_assert(sizeof(TedLatentFunctionLibrary_FullScreenMovieEnd) == 0x000001, "Wrong size on TedLatentFunctionLibrary_FullScreenMovieEnd");
static_assert(offsetof(TedLatentFunctionLibrary_FullScreenMovieEnd, LinkAction) == 0x000000, "Member 'TedLatentFunctionLibrary_FullScreenMovieEnd::LinkAction' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.InterpolateCamera
// 0x0070 (0x0070 - 0x0000)
struct TedLatentFunctionLibrary_InterpolateCamera final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpExponent;                                    // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideZoomPct;                                   // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTargetLocationTime;                            // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToStartLocation;                            // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0050(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_InterpolateCamera) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_InterpolateCamera");
static_assert(sizeof(TedLatentFunctionLibrary_InterpolateCamera) == 0x000070, "Wrong size on TedLatentFunctionLibrary_InterpolateCamera");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_InterpolateCamera::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, TargetLocation) == 0x000008, "Member 'TedLatentFunctionLibrary_InterpolateCamera::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, InterpTime) == 0x000020, "Member 'TedLatentFunctionLibrary_InterpolateCamera::InterpTime' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, InterpExponent) == 0x000024, "Member 'TedLatentFunctionLibrary_InterpolateCamera::InterpExponent' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, OverrideZoomPct) == 0x000028, "Member 'TedLatentFunctionLibrary_InterpolateCamera::OverrideZoomPct' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, LockTargetLocationTime) == 0x00002C, "Member 'TedLatentFunctionLibrary_InterpolateCamera::LockTargetLocationTime' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, bReturnToStartLocation) == 0x000030, "Member 'TedLatentFunctionLibrary_InterpolateCamera::bReturnToStartLocation' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, LatentInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_InterpolateCamera::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_InterpolateCamera, SaveInfo) == 0x000050, "Member 'TedLatentFunctionLibrary_InterpolateCamera::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ObjectiveState
// 0x0058 (0x0058 - 0x0000)
struct TedLatentFunctionLibrary_ObjectiveState final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedObjectiveObj*                 Objective;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveState                               State;                                             // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ObjectiveState) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ObjectiveState");
static_assert(sizeof(TedLatentFunctionLibrary_ObjectiveState) == 0x000058, "Wrong size on TedLatentFunctionLibrary_ObjectiveState");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ObjectiveState::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ObjectiveState::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, Objective) == 0x000010, "Member 'TedLatentFunctionLibrary_ObjectiveState::Objective' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, State) == 0x000018, "Member 'TedLatentFunctionLibrary_ObjectiveState::State' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, LatentInfo) == 0x000020, "Member 'TedLatentFunctionLibrary_ObjectiveState::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ObjectiveState, SaveInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_ObjectiveState::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.OpenMenuScreen
// 0x0060 (0x0060 - 0x0000)
struct TedLatentFunctionLibrary_OpenMenuScreen final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Screen;                                            // 0x000C(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          InContext;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0028(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0040(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_OpenMenuScreen) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_OpenMenuScreen");
static_assert(sizeof(TedLatentFunctionLibrary_OpenMenuScreen) == 0x000060, "Wrong size on TedLatentFunctionLibrary_OpenMenuScreen");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, Screen) == 0x00000C, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::Screen' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, InContext) == 0x000018, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::InContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, bInstant) == 0x000020, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::bInstant' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, LatentInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_OpenMenuScreen, SaveInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_OpenMenuScreen::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PawnDead
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_PawnDead final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Pawn;                                              // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PawnDead) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PawnDead");
static_assert(sizeof(TedLatentFunctionLibrary_PawnDead) == 0x000078, "Wrong size on TedLatentFunctionLibrary_PawnDead");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PawnDead::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PawnDead::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, Pawn) == 0x000010, "Member 'TedLatentFunctionLibrary_PawnDead::Pawn' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, bInverse) == 0x000038, "Member 'TedLatentFunctionLibrary_PawnDead::bInverse' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_PawnDead::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnDead, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_PawnDead::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PawnsDead
// 0x00A0 (0x00A0 - 0x0000)
struct TedLatentFunctionLibrary_PawnsDead final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftActorPtr>                    Pawns;                                             // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0080(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PawnsDead) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PawnsDead");
static_assert(sizeof(TedLatentFunctionLibrary_PawnsDead) == 0x0000A0, "Wrong size on TedLatentFunctionLibrary_PawnsDead");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PawnsDead::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PawnsDead::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, Pawns) == 0x000010, "Member 'TedLatentFunctionLibrary_PawnsDead::Pawns' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, ExpectedAmount) == 0x000060, "Member 'TedLatentFunctionLibrary_PawnsDead::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, Comparison) == 0x000064, "Member 'TedLatentFunctionLibrary_PawnsDead::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, LatentInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_PawnsDead::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDead, SaveInfo) == 0x000080, "Member 'TedLatentFunctionLibrary_PawnsDead::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PawnsDeadTag
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_PawnsDeadTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class ATedPawn>                   PawnClass;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount_B;                                  // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PawnsDeadTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PawnsDeadTag");
static_assert(sizeof(TedLatentFunctionLibrary_PawnsDeadTag) == 0x000078, "Wrong size on TedLatentFunctionLibrary_PawnsDeadTag");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, ActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, PawnClass) == 0x000030, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::PawnClass' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, ExpectedAmount_B) == 0x000038, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::ExpectedAmount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, Comparison) == 0x00003C, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsDeadTag, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_PawnsDeadTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PawnsOwnerTag
// 0x0080 (0x0080 - 0x0000)
struct TedLatentFunctionLibrary_PawnsOwnerTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActorTags;                                         // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	TSubclassOf<class ATedPawn>                   PawnClass;                                         // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverseOwnerCheck;                                // 0x0039(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedAmount_B;                                  // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0060(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PawnsOwnerTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PawnsOwnerTag");
static_assert(sizeof(TedLatentFunctionLibrary_PawnsOwnerTag) == 0x000080, "Wrong size on TedLatentFunctionLibrary_PawnsOwnerTag");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, ActorTags) == 0x000010, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::ActorTags' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, PawnClass) == 0x000030, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::PawnClass' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, Player) == 0x000038, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, bInverseOwnerCheck) == 0x000039, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::bInverseOwnerCheck' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, ExpectedAmount_B) == 0x00003C, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::ExpectedAmount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, Comparison) == 0x000040, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, LatentInfo) == 0x000048, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PawnsOwnerTag, SaveInfo) == 0x000060, "Member 'TedLatentFunctionLibrary_PawnsOwnerTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerCredits
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayerCredits final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount_B;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerCredits) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerCredits");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerCredits) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayerCredits");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerCredits::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerCredits::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerCredits::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, Amount_B) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerCredits::Amount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, Comparison) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerCredits::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, LatentInfo) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerCredits::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerCredits, SaveInfo) == 0x000030, "Member 'TedLatentFunctionLibrary_PlayerCredits::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerIntel
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayerIntel final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount_B;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerIntel) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerIntel");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerIntel) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayerIntel");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerIntel::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerIntel::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerIntel::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, Amount_B) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerIntel::Amount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, Comparison) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerIntel::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, LatentInfo) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerIntel::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerIntel, SaveInfo) == 0x000030, "Member 'TedLatentFunctionLibrary_PlayerIntel::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerOwns_ByDefinition
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_PlayerOwns_ByDefinition final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTedEntityDefinitionAsset> InDefinition;                                    // 0x0010(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x003C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerOwns_ByDefinition");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition) == 0x000078, "Wrong size on TedLatentFunctionLibrary_PlayerOwns_ByDefinition");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, InDefinition) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::InDefinition' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, ExpectedAmount) == 0x000038, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, Comparison) == 0x00003C, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByDefinition, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByDefinition::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerOwns_ByTag
// 0x0058 (0x0058 - 0x0000)
struct TedLatentFunctionLibrary_PlayerOwns_ByTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           OwnedTag;                                          // 0x000C(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerOwns_ByTag) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerOwns_ByTag");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerOwns_ByTag) == 0x000058, "Wrong size on TedLatentFunctionLibrary_PlayerOwns_ByTag");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, OwnedTag) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::OwnedTag' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, ExpectedAmount) == 0x000014, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, Comparison) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, LatentInfo) == 0x000020, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwns_ByTag, SaveInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_PlayerOwns_ByTag::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerOwnsMultiple
// 0x0058 (0x0058 - 0x0000)
struct TedLatentFunctionLibrary_PlayerOwnsMultiple final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaitForPlayerOwnsOption>       Owned;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerOwnsMultiple) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerOwnsMultiple");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerOwnsMultiple) == 0x000058, "Wrong size on TedLatentFunctionLibrary_PlayerOwnsMultiple");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, Owned) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::Owned' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, LatentInfo) == 0x000020, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnsMultiple, SaveInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_PlayerOwnsMultiple::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerOwnTech
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayerOwnTech final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Tech;                                              // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerOwnTech) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerOwnTech");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerOwnTech) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayerOwnTech");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, Tech) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::Tech' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, bInverse) == 0x000014, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::bInverse' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, LatentInfo) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTech, SaveInfo) == 0x000030, "Member 'TedLatentFunctionLibrary_PlayerOwnTech::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerOwnTechs
// 0x00A0 (0x00A0 - 0x0000)
struct TedLatentFunctionLibrary_PlayerOwnTechs final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FGameplayTag>                     Techs;                                             // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0080(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerOwnTechs) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerOwnTechs");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerOwnTechs) == 0x0000A0, "Wrong size on TedLatentFunctionLibrary_PlayerOwnTechs");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, Techs) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::Techs' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, ExpectedAmount) == 0x000060, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, Comparison) == 0x000064, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, LatentInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerOwnTechs, SaveInfo) == 0x000080, "Member 'TedLatentFunctionLibrary_PlayerOwnTechs::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerPower
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayerPower final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount_B;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerPower) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerPower");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerPower) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayerPower");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerPower::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerPower::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerPower::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, Amount_B) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerPower::Amount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, Comparison) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerPower::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, LatentInfo) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerPower::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPower, SaveInfo) == 0x000030, "Member 'TedLatentFunctionLibrary_PlayerPower::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayerPowerConsumption
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayerPowerConsumption final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Player;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount_B;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0030(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayerPowerConsumption) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayerPowerConsumption");
static_assert(sizeof(TedLatentFunctionLibrary_PlayerPowerConsumption) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayerPowerConsumption");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, Player) == 0x000009, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::Player' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, Amount_B) == 0x00000C, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::Amount_B' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, Comparison) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, LatentInfo) == 0x000018, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayerPowerConsumption, SaveInfo) == 0x000030, "Member 'TedLatentFunctionLibrary_PlayerPowerConsumption::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayMovie
// 0x0068 (0x0068 - 0x0000)
struct TedLatentFunctionLibrary_PlayMovie final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	ETedMovieType                                 MovieType;                                         // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFileMediaSource*                 Movie;                                             // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSilent;                                           // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeIn;                                            // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOut;                                           // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedMovieGamePauseInteraction                 InPauseInteraction;                                // 0x0065(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLatentFunctionLibrary_PlayMovie) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayMovie");
static_assert(sizeof(TedLatentFunctionLibrary_PlayMovie) == 0x000068, "Wrong size on TedLatentFunctionLibrary_PlayMovie");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayMovie::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayMovie::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayMovie::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_PlayMovie::SaveInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, MovieType) == 0x000048, "Member 'TedLatentFunctionLibrary_PlayMovie::MovieType' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, Movie) == 0x000050, "Member 'TedLatentFunctionLibrary_PlayMovie::Movie' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, bSilent) == 0x000058, "Member 'TedLatentFunctionLibrary_PlayMovie::bSilent' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, FadeIn) == 0x00005C, "Member 'TedLatentFunctionLibrary_PlayMovie::FadeIn' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, FadeOut) == 0x000060, "Member 'TedLatentFunctionLibrary_PlayMovie::FadeOut' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, bLoop) == 0x000064, "Member 'TedLatentFunctionLibrary_PlayMovie::bLoop' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie, InPauseInteraction) == 0x000065, "Member 'TedLatentFunctionLibrary_PlayMovie::InPauseInteraction' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.PlayMovie_MissionDialogue
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_PlayMovie_MissionDialogue final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 Movie;                                             // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_PlayMovie_MissionDialogue");
static_assert(sizeof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue) == 0x000050, "Wrong size on TedLatentFunctionLibrary_PlayMovie_MissionDialogue");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_PlayMovie_MissionDialogue::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_PlayMovie_MissionDialogue::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_PlayMovie_MissionDialogue::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_PlayMovie_MissionDialogue::SaveInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_PlayMovie_MissionDialogue, Movie) == 0x000048, "Member 'TedLatentFunctionLibrary_PlayMovie_MissionDialogue::Movie' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ResourceFieldDepleted
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_ResourceFieldDepleted final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          ResourceVolume;                                    // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ResourceFieldDepleted) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ResourceFieldDepleted");
static_assert(sizeof(TedLatentFunctionLibrary_ResourceFieldDepleted) == 0x000078, "Wrong size on TedLatentFunctionLibrary_ResourceFieldDepleted");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, ResourceVolume) == 0x000010, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::ResourceVolume' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, bInverse) == 0x000038, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::bInverse' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldDepleted, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_ResourceFieldDepleted::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.ResourceFieldsDepleted
// 0x00A0 (0x00A0 - 0x0000)
struct TedLatentFunctionLibrary_ResourceFieldsDepleted final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftActorPtr>                    ResourceFields;                                    // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x0060(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0064(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0068(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0080(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_ResourceFieldsDepleted) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_ResourceFieldsDepleted");
static_assert(sizeof(TedLatentFunctionLibrary_ResourceFieldsDepleted) == 0x0000A0, "Wrong size on TedLatentFunctionLibrary_ResourceFieldsDepleted");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, ResourceFields) == 0x000010, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::ResourceFields' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, ExpectedAmount) == 0x000060, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, Comparison) == 0x000064, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, LatentInfo) == 0x000068, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_ResourceFieldsDepleted, SaveInfo) == 0x000080, "Member 'TedLatentFunctionLibrary_ResourceFieldsDepleted::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.StructureOwner
// 0x0078 (0x0078 - 0x0000)
struct TedLatentFunctionLibrary_StructureOwner final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftActorPtr                          Structure;                                         // 0x0010(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  ExpectedPlayer;                                    // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInverse;                                          // 0x0039(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0040(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0058(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_StructureOwner) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_StructureOwner");
static_assert(sizeof(TedLatentFunctionLibrary_StructureOwner) == 0x000078, "Wrong size on TedLatentFunctionLibrary_StructureOwner");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_StructureOwner::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_StructureOwner::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, Structure) == 0x000010, "Member 'TedLatentFunctionLibrary_StructureOwner::Structure' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, ExpectedPlayer) == 0x000038, "Member 'TedLatentFunctionLibrary_StructureOwner::ExpectedPlayer' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, bInverse) == 0x000039, "Member 'TedLatentFunctionLibrary_StructureOwner::bInverse' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, LatentInfo) == 0x000040, "Member 'TedLatentFunctionLibrary_StructureOwner::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructureOwner, SaveInfo) == 0x000058, "Member 'TedLatentFunctionLibrary_StructureOwner::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.StructuresOwner
// 0x00A8 (0x00A8 - 0x0000)
struct TedLatentFunctionLibrary_StructuresOwner final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FSoftActorPtr>                    Structures;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETedPlayerID                                  ExpectedPlayer;                                    // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExpectedAmount;                                    // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComparison                                   Comparison;                                        // 0x0068(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0070(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0088(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_StructuresOwner) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_StructuresOwner");
static_assert(sizeof(TedLatentFunctionLibrary_StructuresOwner) == 0x0000A8, "Wrong size on TedLatentFunctionLibrary_StructuresOwner");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_StructuresOwner::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_StructuresOwner::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, Structures) == 0x000010, "Member 'TedLatentFunctionLibrary_StructuresOwner::Structures' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, ExpectedPlayer) == 0x000060, "Member 'TedLatentFunctionLibrary_StructuresOwner::ExpectedPlayer' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, ExpectedAmount) == 0x000064, "Member 'TedLatentFunctionLibrary_StructuresOwner::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, Comparison) == 0x000068, "Member 'TedLatentFunctionLibrary_StructuresOwner::Comparison' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, LatentInfo) == 0x000070, "Member 'TedLatentFunctionLibrary_StructuresOwner::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_StructuresOwner, SaveInfo) == 0x000088, "Member 'TedLatentFunctionLibrary_StructuresOwner::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.WaitForAIMissionState
// 0x0058 (0x0058 - 0x0000)
struct TedLatentFunctionLibrary_WaitForAIMissionState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAIMission*                             Mission;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIMissionState                               MissionState;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0020(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0038(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_WaitForAIMissionState) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_WaitForAIMissionState");
static_assert(sizeof(TedLatentFunctionLibrary_WaitForAIMissionState) == 0x000058, "Wrong size on TedLatentFunctionLibrary_WaitForAIMissionState");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, WorldContextObject) == 0x000000, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, Mission) == 0x000010, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::Mission' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, MissionState) == 0x000018, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::MissionState' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, LatentInfo) == 0x000020, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForAIMissionState, SaveInfo) == 0x000038, "Member 'TedLatentFunctionLibrary_WaitForAIMissionState::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.WaitForCommandUsage
// 0x0098 (0x0098 - 0x0000)
struct TedLatentFunctionLibrary_WaitForCommandUsage final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Command;                                           // 0x000C(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedObjectiveCommandTracking                  Track;                                             // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  CommandPlayer;                                     // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CommandActors;                                     // 0x0018(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetActors;                                      // 0x0038(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         TargetDistanceTolerance;                           // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedAmount;                                    // 0x005C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0060(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0078(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLatentFunctionLibrary_WaitForCommandUsage) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_WaitForCommandUsage");
static_assert(sizeof(TedLatentFunctionLibrary_WaitForCommandUsage) == 0x000098, "Wrong size on TedLatentFunctionLibrary_WaitForCommandUsage");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, Command) == 0x00000C, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::Command' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, Track) == 0x000014, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::Track' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, CommandPlayer) == 0x000015, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::CommandPlayer' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, CommandActors) == 0x000018, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::CommandActors' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, TargetActors) == 0x000038, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::TargetActors' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, TargetDistanceTolerance) == 0x000058, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::TargetDistanceTolerance' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, ExpectedAmount) == 0x00005C, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::ExpectedAmount' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, LatentInfo) == 0x000060, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForCommandUsage, SaveInfo) == 0x000078, "Member 'TedLatentFunctionLibrary_WaitForCommandUsage::SaveInfo' has a wrong offset!");

// Function Tempest.TedLatentFunctionLibrary.WaitForMovieEnd
// 0x0050 (0x0050 - 0x0000)
struct TedLatentFunctionLibrary_WaitForMovieEnd final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLatentLink                                LinkAction;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0028(0x0020)(Parm, NativeAccessSpecifierPublic)
	ETedMovieType                                 MovieType;                                         // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLatentFunctionLibrary_WaitForMovieEnd) == 0x000008, "Wrong alignment on TedLatentFunctionLibrary_WaitForMovieEnd");
static_assert(sizeof(TedLatentFunctionLibrary_WaitForMovieEnd) == 0x000050, "Wrong size on TedLatentFunctionLibrary_WaitForMovieEnd");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForMovieEnd, InWorldContext) == 0x000000, "Member 'TedLatentFunctionLibrary_WaitForMovieEnd::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForMovieEnd, LinkAction) == 0x000008, "Member 'TedLatentFunctionLibrary_WaitForMovieEnd::LinkAction' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForMovieEnd, LatentInfo) == 0x000010, "Member 'TedLatentFunctionLibrary_WaitForMovieEnd::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForMovieEnd, SaveInfo) == 0x000028, "Member 'TedLatentFunctionLibrary_WaitForMovieEnd::SaveInfo' has a wrong offset!");
static_assert(offsetof(TedLatentFunctionLibrary_WaitForMovieEnd, MovieType) == 0x000048, "Member 'TedLatentFunctionLibrary_WaitForMovieEnd::MovieType' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.GetContent
// 0x0028 (0x0028 - 0x0000)
struct TedLeaderboardPlayersPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedLeaderboardDataPanel               ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_GetContent) == 0x000008, "Wrong alignment on TedLeaderboardPlayersPanel_GetContent");
static_assert(sizeof(TedLeaderboardPlayersPanel_GetContent) == 0x000028, "Wrong size on TedLeaderboardPlayersPanel_GetContent");
static_assert(offsetof(TedLeaderboardPlayersPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedLeaderboardPlayersPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedLeaderboardPlayersPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.OnActivateHeaderSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedLeaderboardPlayersPanel_OnActivateHeaderSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState) == 0x000008, "Wrong alignment on TedLeaderboardPlayersPanel_OnActivateHeaderSlotState");
static_assert(sizeof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState) == 0x000018, "Wrong size on TedLeaderboardPlayersPanel_OnActivateHeaderSlotState");
static_assert(offsetof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState, InContentPanel) == 0x000000, "Member 'TedLeaderboardPlayersPanel_OnActivateHeaderSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState, InContentSlot) == 0x000008, "Member 'TedLeaderboardPlayersPanel_OnActivateHeaderSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState, InState) == 0x000010, "Member 'TedLeaderboardPlayersPanel_OnActivateHeaderSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_OnActivateHeaderSlotState, bInActivated) == 0x000011, "Member 'TedLeaderboardPlayersPanel_OnActivateHeaderSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.SetAscendingSorting
// 0x0001 (0x0001 - 0x0000)
struct TedLeaderboardPlayersPanel_SetAscendingSorting final
{
public:
	bool                                          bInAscending;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_SetAscendingSorting) == 0x000001, "Wrong alignment on TedLeaderboardPlayersPanel_SetAscendingSorting");
static_assert(sizeof(TedLeaderboardPlayersPanel_SetAscendingSorting) == 0x000001, "Wrong size on TedLeaderboardPlayersPanel_SetAscendingSorting");
static_assert(offsetof(TedLeaderboardPlayersPanel_SetAscendingSorting, bInAscending) == 0x000000, "Member 'TedLeaderboardPlayersPanel_SetAscendingSorting::bInAscending' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.SetFilterString
// 0x0010 (0x0010 - 0x0000)
struct TedLeaderboardPlayersPanel_SetFilterString final
{
public:
	class FString                                 InFilter;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_SetFilterString) == 0x000008, "Wrong alignment on TedLeaderboardPlayersPanel_SetFilterString");
static_assert(sizeof(TedLeaderboardPlayersPanel_SetFilterString) == 0x000010, "Wrong size on TedLeaderboardPlayersPanel_SetFilterString");
static_assert(offsetof(TedLeaderboardPlayersPanel_SetFilterString, InFilter) == 0x000000, "Member 'TedLeaderboardPlayersPanel_SetFilterString::InFilter' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.SetSingleRowData
// 0x0001 (0x0001 - 0x0000)
struct TedLeaderboardPlayersPanel_SetSingleRowData final
{
public:
	bool                                          bInSingleRowData;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_SetSingleRowData) == 0x000001, "Wrong alignment on TedLeaderboardPlayersPanel_SetSingleRowData");
static_assert(sizeof(TedLeaderboardPlayersPanel_SetSingleRowData) == 0x000001, "Wrong size on TedLeaderboardPlayersPanel_SetSingleRowData");
static_assert(offsetof(TedLeaderboardPlayersPanel_SetSingleRowData, bInSingleRowData) == 0x000000, "Member 'TedLeaderboardPlayersPanel_SetSingleRowData::bInSingleRowData' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.SetSortingMethod
// 0x0008 (0x0008 - 0x0000)
struct TedLeaderboardPlayersPanel_SetSortingMethod final
{
public:
	class FName                                   InSortingMethod;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_SetSortingMethod) == 0x000004, "Wrong alignment on TedLeaderboardPlayersPanel_SetSortingMethod");
static_assert(sizeof(TedLeaderboardPlayersPanel_SetSortingMethod) == 0x000008, "Wrong size on TedLeaderboardPlayersPanel_SetSortingMethod");
static_assert(offsetof(TedLeaderboardPlayersPanel_SetSortingMethod, InSortingMethod) == 0x000000, "Member 'TedLeaderboardPlayersPanel_SetSortingMethod::InSortingMethod' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel.GetHeadersPanel
// 0x0008 (0x0008 - 0x0000)
struct TedLeaderboardPlayersPanel_GetHeadersPanel final
{
public:
	class UTedLeaderboardHeadersPanel*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersPanel_GetHeadersPanel) == 0x000008, "Wrong alignment on TedLeaderboardPlayersPanel_GetHeadersPanel");
static_assert(sizeof(TedLeaderboardPlayersPanel_GetHeadersPanel) == 0x000008, "Wrong size on TedLeaderboardPlayersPanel_GetHeadersPanel");
static_assert(offsetof(TedLeaderboardPlayersPanel_GetHeadersPanel, ReturnValue) == 0x000000, "Member 'TedLeaderboardPlayersPanel_GetHeadersPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel_V2.InitializeLeaderboards
// 0x0038 (0x0038 - 0x0000)
struct TedLeaderboardPlayersPanel_V2_InitializeLeaderboards final
{
public:
	struct FTedLeaderboardsRetrieveFilter         InFilter;                                          // 0x0000(0x0030)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bForceRefresh;                                     // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardPlayersPanel_V2_InitializeLeaderboards) == 0x000008, "Wrong alignment on TedLeaderboardPlayersPanel_V2_InitializeLeaderboards");
static_assert(sizeof(TedLeaderboardPlayersPanel_V2_InitializeLeaderboards) == 0x000038, "Wrong size on TedLeaderboardPlayersPanel_V2_InitializeLeaderboards");
static_assert(offsetof(TedLeaderboardPlayersPanel_V2_InitializeLeaderboards, InFilter) == 0x000000, "Member 'TedLeaderboardPlayersPanel_V2_InitializeLeaderboards::InFilter' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_V2_InitializeLeaderboards, bForceRefresh) == 0x000030, "Member 'TedLeaderboardPlayersPanel_V2_InitializeLeaderboards::bForceRefresh' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersPanel_V2.Sort
// 0x000C (0x000C - 0x0000)
struct TedLeaderboardPlayersPanel_V2_Sort final
{
public:
	struct FGameplayTag                           SortType;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAscending;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardPlayersPanel_V2_Sort) == 0x000004, "Wrong alignment on TedLeaderboardPlayersPanel_V2_Sort");
static_assert(sizeof(TedLeaderboardPlayersPanel_V2_Sort) == 0x00000C, "Wrong size on TedLeaderboardPlayersPanel_V2_Sort");
static_assert(offsetof(TedLeaderboardPlayersPanel_V2_Sort, SortType) == 0x000000, "Member 'TedLeaderboardPlayersPanel_V2_Sort::SortType' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersPanel_V2_Sort, bAscending) == 0x000008, "Member 'TedLeaderboardPlayersPanel_V2_Sort::bAscending' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribeAvatar
// 0x0008 (0x0008 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribeAvatar final
{
public:
	const class UTexture2D*                       AvatarTexture;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribeAvatar) == 0x000008, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribeAvatar");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribeAvatar) == 0x000008, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribeAvatar");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeAvatar, AvatarTexture) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribeAvatar::AvatarTexture' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribeFaction
// 0x0001 (0x0001 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribeFaction final
{
public:
	ETedRankedFaction                             Faction;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribeFaction) == 0x000001, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribeFaction");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribeFaction) == 0x000001, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribeFaction");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeFaction, Faction) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribeFaction::Faction' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribeMedal
// 0x0030 (0x0030 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribeMedal final
{
public:
	struct FTedMedalTableRow_Ranked               Medal;                                             // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          bFoundMedal;                                       // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribeMedal) == 0x000008, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribeMedal");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribeMedal) == 0x000030, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribeMedal");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeMedal, Medal) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribeMedal::Medal' has a wrong offset!");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeMedal, bFoundMedal) == 0x000028, "Member 'TedLeaderboardPlayersSlot_K2_DescribeMedal::bFoundMedal' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribePlayerName
// 0x0010 (0x0010 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribePlayerName final
{
public:
	class FText                                   PlayerName;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribePlayerName) == 0x000008, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribePlayerName");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribePlayerName) == 0x000010, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribePlayerName");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribePlayerName, PlayerName) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribePlayerName::PlayerName' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribePosition
// 0x0004 (0x0004 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribePosition final
{
public:
	int32                                         position;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribePosition) == 0x000004, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribePosition");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribePosition) == 0x000004, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribePosition");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribePosition, position) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribePosition::position' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribeRating
// 0x0004 (0x0004 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribeRating final
{
public:
	int32                                         Rating;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribeRating) == 0x000004, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribeRating");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribeRating) == 0x000004, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribeRating");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeRating, Rating) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribeRating::Rating' has a wrong offset!");

// Function Tempest.TedLeaderboardPlayersSlot.K2_DescribeWins
// 0x0004 (0x0004 - 0x0000)
struct TedLeaderboardPlayersSlot_K2_DescribeWins final
{
public:
	int32                                         Wins;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLeaderboardPlayersSlot_K2_DescribeWins) == 0x000004, "Wrong alignment on TedLeaderboardPlayersSlot_K2_DescribeWins");
static_assert(sizeof(TedLeaderboardPlayersSlot_K2_DescribeWins) == 0x000004, "Wrong size on TedLeaderboardPlayersSlot_K2_DescribeWins");
static_assert(offsetof(TedLeaderboardPlayersSlot_K2_DescribeWins, Wins) == 0x000000, "Member 'TedLeaderboardPlayersSlot_K2_DescribeWins::Wins' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.GetAvailableMarkedFrames
// 0x0010 (0x0010 - 0x0000)
struct TedLevelSequenceDirector_GetAvailableMarkedFrames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelSequenceDirector_GetAvailableMarkedFrames) == 0x000008, "Wrong alignment on TedLevelSequenceDirector_GetAvailableMarkedFrames");
static_assert(sizeof(TedLevelSequenceDirector_GetAvailableMarkedFrames) == 0x000010, "Wrong size on TedLevelSequenceDirector_GetAvailableMarkedFrames");
static_assert(offsetof(TedLevelSequenceDirector_GetAvailableMarkedFrames, ReturnValue) == 0x000000, "Member 'TedLevelSequenceDirector_GetAvailableMarkedFrames::ReturnValue' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.PlayFramedMovie
// 0x0020 (0x0020 - 0x0000)
struct TedLevelSequenceDirector_PlayFramedMovie final
{
public:
	struct FGameplayTag                           Frame;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 Movie;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UFileMediaSource*                 FrameIntroOverride;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelSequenceDirector_PlayFramedMovie) == 0x000008, "Wrong alignment on TedLevelSequenceDirector_PlayFramedMovie");
static_assert(sizeof(TedLevelSequenceDirector_PlayFramedMovie) == 0x000020, "Wrong size on TedLevelSequenceDirector_PlayFramedMovie");
static_assert(offsetof(TedLevelSequenceDirector_PlayFramedMovie, Frame) == 0x000000, "Member 'TedLevelSequenceDirector_PlayFramedMovie::Frame' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_PlayFramedMovie, Movie) == 0x000008, "Member 'TedLevelSequenceDirector_PlayFramedMovie::Movie' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_PlayFramedMovie, bLoop) == 0x000010, "Member 'TedLevelSequenceDirector_PlayFramedMovie::bLoop' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_PlayFramedMovie, FrameIntroOverride) == 0x000018, "Member 'TedLevelSequenceDirector_PlayFramedMovie::FrameIntroOverride' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.PlayTransitionMovie
// 0x0008 (0x0008 - 0x0000)
struct TedLevelSequenceDirector_PlayTransitionMovie final
{
public:
	const class UFileMediaSource*                 Movie;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelSequenceDirector_PlayTransitionMovie) == 0x000008, "Wrong alignment on TedLevelSequenceDirector_PlayTransitionMovie");
static_assert(sizeof(TedLevelSequenceDirector_PlayTransitionMovie) == 0x000008, "Wrong size on TedLevelSequenceDirector_PlayTransitionMovie");
static_assert(offsetof(TedLevelSequenceDirector_PlayTransitionMovie, Movie) == 0x000000, "Member 'TedLevelSequenceDirector_PlayTransitionMovie::Movie' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.QuickSkip
// 0x0018 (0x0018 - 0x0000)
struct TedLevelSequenceDirector_QuickSkip final
{
public:
	class FString                                 MarkedFrame;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoSkip;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLevelSequenceDirector_QuickSkip) == 0x000008, "Wrong alignment on TedLevelSequenceDirector_QuickSkip");
static_assert(sizeof(TedLevelSequenceDirector_QuickSkip) == 0x000018, "Wrong size on TedLevelSequenceDirector_QuickSkip");
static_assert(offsetof(TedLevelSequenceDirector_QuickSkip, MarkedFrame) == 0x000000, "Member 'TedLevelSequenceDirector_QuickSkip::MarkedFrame' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_QuickSkip, bDoSkip) == 0x000010, "Member 'TedLevelSequenceDirector_QuickSkip::bDoSkip' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.StopFramedMovie
// 0x0008 (0x0008 - 0x0000)
struct TedLevelSequenceDirector_StopFramedMovie final
{
public:
	struct FGameplayTag                           Frame;                                             // 0x0000(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLevelSequenceDirector_StopFramedMovie) == 0x000004, "Wrong alignment on TedLevelSequenceDirector_StopFramedMovie");
static_assert(sizeof(TedLevelSequenceDirector_StopFramedMovie) == 0x000008, "Wrong size on TedLevelSequenceDirector_StopFramedMovie");
static_assert(offsetof(TedLevelSequenceDirector_StopFramedMovie, Frame) == 0x000000, "Member 'TedLevelSequenceDirector_StopFramedMovie::Frame' has a wrong offset!");

// Function Tempest.TedLevelSequenceDirector.AutoFocusCamera
// 0x0060 (0x0060 - 0x0000)
struct TedLevelSequenceDirector_AutoFocusCamera final
{
public:
	TSoftObjectPtr<class ACameraActor>            CameraActor;                                       // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AActor>                  ActorToFocus;                                      // 0x0028(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   JointName;                                         // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusOffset;                                       // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLevelSequenceDirector_AutoFocusCamera) == 0x000008, "Wrong alignment on TedLevelSequenceDirector_AutoFocusCamera");
static_assert(sizeof(TedLevelSequenceDirector_AutoFocusCamera) == 0x000060, "Wrong size on TedLevelSequenceDirector_AutoFocusCamera");
static_assert(offsetof(TedLevelSequenceDirector_AutoFocusCamera, CameraActor) == 0x000000, "Member 'TedLevelSequenceDirector_AutoFocusCamera::CameraActor' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_AutoFocusCamera, ActorToFocus) == 0x000028, "Member 'TedLevelSequenceDirector_AutoFocusCamera::ActorToFocus' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_AutoFocusCamera, JointName) == 0x000050, "Member 'TedLevelSequenceDirector_AutoFocusCamera::JointName' has a wrong offset!");
static_assert(offsetof(TedLevelSequenceDirector_AutoFocusCamera, FocusOffset) == 0x000058, "Member 'TedLevelSequenceDirector_AutoFocusCamera::FocusOffset' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ClientLeaveLobby
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyBeaconClient_ClientLeaveLobby final
{
public:
	EClientLeaveLobbyReason                       InReason;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ClientLeaveLobby) == 0x000001, "Wrong alignment on TedLobbyBeaconClient_ClientLeaveLobby");
static_assert(sizeof(TedLobbyBeaconClient_ClientLeaveLobby) == 0x000001, "Wrong size on TedLobbyBeaconClient_ClientLeaveLobby");
static_assert(offsetof(TedLobbyBeaconClient_ClientLeaveLobby, InReason) == 0x000000, "Member 'TedLobbyBeaconClient_ClientLeaveLobby::InReason' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.DebugUpdateHydraSession
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyBeaconClient_DebugUpdateHydraSession final
{
public:
	class FString                                 InMode;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_DebugUpdateHydraSession) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_DebugUpdateHydraSession");
static_assert(sizeof(TedLobbyBeaconClient_DebugUpdateHydraSession) == 0x000010, "Wrong size on TedLobbyBeaconClient_DebugUpdateHydraSession");
static_assert(offsetof(TedLobbyBeaconClient_DebugUpdateHydraSession, InMode) == 0x000000, "Member 'TedLobbyBeaconClient_DebugUpdateHydraSession::InMode' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.NotifyClientKicked
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyBeaconClient_NotifyClientKicked final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickAll;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyBeaconClient_NotifyClientKicked) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_NotifyClientKicked");
static_assert(sizeof(TedLobbyBeaconClient_NotifyClientKicked) == 0x000018, "Wrong size on TedLobbyBeaconClient_NotifyClientKicked");
static_assert(offsetof(TedLobbyBeaconClient_NotifyClientKicked, SessionId) == 0x000000, "Member 'TedLobbyBeaconClient_NotifyClientKicked::SessionId' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_NotifyClientKicked, bKickAll) == 0x000010, "Member 'TedLobbyBeaconClient_NotifyClientKicked::bKickAll' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.RejectConnection
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyBeaconClient_RejectConnection final
{
public:
	ETedConnectionRejectReason                    InDisconnectType;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_RejectConnection) == 0x000001, "Wrong alignment on TedLobbyBeaconClient_RejectConnection");
static_assert(sizeof(TedLobbyBeaconClient_RejectConnection) == 0x000001, "Wrong size on TedLobbyBeaconClient_RejectConnection");
static_assert(offsetof(TedLobbyBeaconClient_RejectConnection, InDisconnectType) == 0x000000, "Member 'TedLobbyBeaconClient_RejectConnection::InDisconnectType' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangeLobbyMap
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyBeaconClient_ServerChangeLobbyMap final
{
public:
	const class UTedMapInfo*                      InMap;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangeLobbyMap) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerChangeLobbyMap");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangeLobbyMap) == 0x000008, "Wrong size on TedLobbyBeaconClient_ServerChangeLobbyMap");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeLobbyMap, InMap) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangeLobbyMap::InMap' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangeMemberSetting_FString
// 0x0020 (0x0020 - 0x0000)
struct TedLobbyBeaconClient_ServerChangeMemberSetting_FString final
{
public:
	class ALobbyBeaconPlayerState*                InMember;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InValue;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangeMemberSetting_FString) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerChangeMemberSetting_FString");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangeMemberSetting_FString) == 0x000020, "Wrong size on TedLobbyBeaconClient_ServerChangeMemberSetting_FString");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_FString, InMember) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_FString::InMember' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_FString, InKey) == 0x000008, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_FString::InKey' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_FString, InValue) == 0x000010, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_FString::InValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangeMemberSetting_Int32
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyBeaconClient_ServerChangeMemberSetting_Int32 final
{
public:
	class ALobbyBeaconPlayerState*                InMember;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionMemberSettingKey                   InKey;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangeMemberSetting_Int32) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerChangeMemberSetting_Int32");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangeMemberSetting_Int32) == 0x000010, "Wrong size on TedLobbyBeaconClient_ServerChangeMemberSetting_Int32");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_Int32, InMember) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_Int32::InMember' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_Int32, InKey) == 0x000008, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_Int32::InKey' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeMemberSetting_Int32, InValue) == 0x00000C, "Member 'TedLobbyBeaconClient_ServerChangeMemberSetting_Int32::InValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangePassword
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyBeaconClient_ServerChangePassword final
{
public:
	class FString                                 InLobbyPassword;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangePassword) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerChangePassword");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangePassword) == 0x000010, "Wrong size on TedLobbyBeaconClient_ServerChangePassword");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangePassword, InLobbyPassword) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangePassword::InLobbyPassword' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangeSessionSetting_Int32
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyBeaconClient_ServerChangeSessionSetting_Int32 final
{
public:
	ETedSessionSettingKey                         InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangeSessionSetting_Int32) == 0x000004, "Wrong alignment on TedLobbyBeaconClient_ServerChangeSessionSetting_Int32");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangeSessionSetting_Int32) == 0x000008, "Wrong size on TedLobbyBeaconClient_ServerChangeSessionSetting_Int32");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeSessionSetting_Int32, InKey) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangeSessionSetting_Int32::InKey' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeSessionSetting_Int32, InValue) == 0x000004, "Member 'TedLobbyBeaconClient_ServerChangeSessionSetting_Int32::InValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerChangeSessionSetting_String
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyBeaconClient_ServerChangeSessionSetting_String final
{
public:
	ETedSessionSettingKey                         InKey;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InValue;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerChangeSessionSetting_String) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerChangeSessionSetting_String");
static_assert(sizeof(TedLobbyBeaconClient_ServerChangeSessionSetting_String) == 0x000018, "Wrong size on TedLobbyBeaconClient_ServerChangeSessionSetting_String");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeSessionSetting_String, InKey) == 0x000000, "Member 'TedLobbyBeaconClient_ServerChangeSessionSetting_String::InKey' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerChangeSessionSetting_String, InValue) == 0x000008, "Member 'TedLobbyBeaconClient_ServerChangeSessionSetting_String::InValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerKickClient
// 0x0030 (0x0030 - 0x0000)
struct TedLobbyBeaconClient_ServerKickClient final
{
public:
	struct FUniqueNetIdRepl                       PlayerToKick;                                      // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerKickClient) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerKickClient");
static_assert(sizeof(TedLobbyBeaconClient_ServerKickClient) == 0x000030, "Wrong size on TedLobbyBeaconClient_ServerKickClient");
static_assert(offsetof(TedLobbyBeaconClient_ServerKickClient, PlayerToKick) == 0x000000, "Member 'TedLobbyBeaconClient_ServerKickClient::PlayerToKick' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerRemoveBot
// 0x0030 (0x0030 - 0x0000)
struct TedLobbyBeaconClient_ServerRemoveBot final
{
public:
	struct FUniqueNetIdRepl                       InBotID;                                           // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerRemoveBot) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerRemoveBot");
static_assert(sizeof(TedLobbyBeaconClient_ServerRemoveBot) == 0x000030, "Wrong size on TedLobbyBeaconClient_ServerRemoveBot");
static_assert(offsetof(TedLobbyBeaconClient_ServerRemoveBot, InBotID) == 0x000000, "Member 'TedLobbyBeaconClient_ServerRemoveBot::InBotID' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.GetUniqueNetId
// 0x0030 (0x0030 - 0x0000)
struct TedLobbyBeaconClient_GetUniqueNetId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_GetUniqueNetId) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_GetUniqueNetId");
static_assert(sizeof(TedLobbyBeaconClient_GetUniqueNetId) == 0x000030, "Wrong size on TedLobbyBeaconClient_GetUniqueNetId");
static_assert(offsetof(TedLobbyBeaconClient_GetUniqueNetId, ReturnValue) == 0x000000, "Member 'TedLobbyBeaconClient_GetUniqueNetId::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyBeaconClient_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_IsAdmin) == 0x000001, "Wrong alignment on TedLobbyBeaconClient_IsAdmin");
static_assert(sizeof(TedLobbyBeaconClient_IsAdmin) == 0x000001, "Wrong size on TedLobbyBeaconClient_IsAdmin");
static_assert(offsetof(TedLobbyBeaconClient_IsAdmin, ReturnValue) == 0x000000, "Member 'TedLobbyBeaconClient_IsAdmin::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.MatchesNetID
// 0x0038 (0x0038 - 0x0000)
struct TedLobbyBeaconClient_MatchesNetID final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyBeaconClient_MatchesNetID) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_MatchesNetID");
static_assert(sizeof(TedLobbyBeaconClient_MatchesNetID) == 0x000038, "Wrong size on TedLobbyBeaconClient_MatchesNetID");
static_assert(offsetof(TedLobbyBeaconClient_MatchesNetID, NetId) == 0x000000, "Member 'TedLobbyBeaconClient_MatchesNetID::NetId' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_MatchesNetID, ReturnValue) == 0x000030, "Member 'TedLobbyBeaconClient_MatchesNetID::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyBeaconClient.ServerDebugSetNetSim
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyBeaconClient_ServerDebugSetNetSim final
{
public:
	TArray<class FString>                         InArgs;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UWorld*                                 InWorld;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconClient_ServerDebugSetNetSim) == 0x000008, "Wrong alignment on TedLobbyBeaconClient_ServerDebugSetNetSim");
static_assert(sizeof(TedLobbyBeaconClient_ServerDebugSetNetSim) == 0x000018, "Wrong size on TedLobbyBeaconClient_ServerDebugSetNetSim");
static_assert(offsetof(TedLobbyBeaconClient_ServerDebugSetNetSim, InArgs) == 0x000000, "Member 'TedLobbyBeaconClient_ServerDebugSetNetSim::InArgs' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconClient_ServerDebugSetNetSim, InWorld) == 0x000010, "Member 'TedLobbyBeaconClient_ServerDebugSetNetSim::InWorld' has a wrong offset!");

// Function Tempest.TedLobbyBeaconHost.ServerKickClient
// 0x0038 (0x0038 - 0x0000)
struct TedLobbyBeaconHost_ServerKickClient final
{
public:
	struct FUniqueNetIdRepl                       PlayerToKick;                                      // 0x0000(0x0030)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKickAll;                                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyBeaconHost_ServerKickClient) == 0x000008, "Wrong alignment on TedLobbyBeaconHost_ServerKickClient");
static_assert(sizeof(TedLobbyBeaconHost_ServerKickClient) == 0x000038, "Wrong size on TedLobbyBeaconHost_ServerKickClient");
static_assert(offsetof(TedLobbyBeaconHost_ServerKickClient, PlayerToKick) == 0x000000, "Member 'TedLobbyBeaconHost_ServerKickClient::PlayerToKick' has a wrong offset!");
static_assert(offsetof(TedLobbyBeaconHost_ServerKickClient, bKickAll) == 0x000030, "Member 'TedLobbyBeaconHost_ServerKickClient::bKickAll' has a wrong offset!");

// Function Tempest.TedLobbyBeaconState.GetPlayersCount
// 0x0004 (0x0004 - 0x0000)
struct TedLobbyBeaconState_GetPlayersCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyBeaconState_GetPlayersCount) == 0x000004, "Wrong alignment on TedLobbyBeaconState_GetPlayersCount");
static_assert(sizeof(TedLobbyBeaconState_GetPlayersCount) == 0x000004, "Wrong size on TedLobbyBeaconState_GetPlayersCount");
static_assert(offsetof(TedLobbyBeaconState_GetPlayersCount, ReturnValue) == 0x000000, "Member 'TedLobbyBeaconState_GetPlayersCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnChangePasswordCheckboxChanged
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged");
static_assert(sizeof(TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged");
static_assert(offsetof(TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged, bIsChecked) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnChangePasswordCheckboxChanged::bIsChecked' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnLobbyNameChanged
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_OnLobbyNameChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_OnLobbyNameChanged) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnLobbyNameChanged");
static_assert(sizeof(TedLobbyConfigurationPopup_OnLobbyNameChanged) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_OnLobbyNameChanged");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyNameChanged, InText) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnLobbyNameChanged::InText' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnLobbyNameCommitted
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_OnLobbyNameCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_OnLobbyNameCommitted) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnLobbyNameCommitted");
static_assert(sizeof(TedLobbyConfigurationPopup_OnLobbyNameCommitted) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_OnLobbyNameCommitted");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyNameCommitted, InText) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnLobbyNameCommitted::InText' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyNameCommitted, InCommitMethod) == 0x000010, "Member 'TedLobbyConfigurationPopup_OnLobbyNameCommitted::InCommitMethod' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnLobbyPasswordChanged
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_OnLobbyPasswordChanged final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_OnLobbyPasswordChanged) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnLobbyPasswordChanged");
static_assert(sizeof(TedLobbyConfigurationPopup_OnLobbyPasswordChanged) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_OnLobbyPasswordChanged");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyPasswordChanged, InText) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnLobbyPasswordChanged::InText' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnLobbyPasswordCommitted
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_OnLobbyPasswordCommitted final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ETextCommit                                   InCommitMethod;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_OnLobbyPasswordCommitted) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnLobbyPasswordCommitted");
static_assert(sizeof(TedLobbyConfigurationPopup_OnLobbyPasswordCommitted) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_OnLobbyPasswordCommitted");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyPasswordCommitted, InText) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnLobbyPasswordCommitted::InText' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnLobbyPasswordCommitted, InCommitMethod) == 0x000010, "Member 'TedLobbyConfigurationPopup_OnLobbyPasswordCommitted::InCommitMethod' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnTriggerLobbyTypeSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction");
static_assert(sizeof(TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction, InContentPanel) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction, InContentSlot) == 0x000008, "Member 'TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction, InAction) == 0x000010, "Member 'TedLobbyConfigurationPopup_OnTriggerLobbyTypeSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.OnTriggerPasswordModeSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction");
static_assert(sizeof(TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction, InContentPanel) == 0x000000, "Member 'TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction, InContentSlot) == 0x000008, "Member 'TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction, InAction) == 0x000010, "Member 'TedLobbyConfigurationPopup_OnTriggerPasswordModeSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetAffectPassword
// 0x0002 (0x0002 - 0x0000)
struct TedLobbyConfigurationPopup_SetAffectPassword final
{
public:
	bool                                          bInAffectPassword;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_SetAffectPassword) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_SetAffectPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_SetAffectPassword) == 0x000002, "Wrong size on TedLobbyConfigurationPopup_SetAffectPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_SetAffectPassword, bInAffectPassword) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetAffectPassword::bInAffectPassword' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_SetAffectPassword, ReturnValue) == 0x000001, "Member 'TedLobbyConfigurationPopup_SetAffectPassword::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetLobbyName
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_SetLobbyName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_SetLobbyName) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_SetLobbyName");
static_assert(sizeof(TedLobbyConfigurationPopup_SetLobbyName) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_SetLobbyName");
static_assert(offsetof(TedLobbyConfigurationPopup_SetLobbyName, InName) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetLobbyName::InName' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_SetLobbyName, ReturnValue) == 0x000010, "Member 'TedLobbyConfigurationPopup_SetLobbyName::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetLobbyType
// 0x0002 (0x0002 - 0x0000)
struct TedLobbyConfigurationPopup_SetLobbyType final
{
public:
	ETedServerType                                InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_SetLobbyType) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_SetLobbyType");
static_assert(sizeof(TedLobbyConfigurationPopup_SetLobbyType) == 0x000002, "Wrong size on TedLobbyConfigurationPopup_SetLobbyType");
static_assert(offsetof(TedLobbyConfigurationPopup_SetLobbyType, InType) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetLobbyType::InType' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_SetLobbyType, ReturnValue) == 0x000001, "Member 'TedLobbyConfigurationPopup_SetLobbyType::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetPassword
// 0x0018 (0x0018 - 0x0000)
struct TedLobbyConfigurationPopup_SetPassword final
{
public:
	class FString                                 InPassword;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyConfigurationPopup_SetPassword) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_SetPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_SetPassword) == 0x000018, "Wrong size on TedLobbyConfigurationPopup_SetPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_SetPassword, InPassword) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetPassword::InPassword' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_SetPassword, ReturnValue) == 0x000010, "Member 'TedLobbyConfigurationPopup_SetPassword::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetPasswordMode
// 0x0002 (0x0002 - 0x0000)
struct TedLobbyConfigurationPopup_SetPasswordMode final
{
public:
	ETedLobbyPasswordMode                         InMode;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_SetPasswordMode) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_SetPasswordMode");
static_assert(sizeof(TedLobbyConfigurationPopup_SetPasswordMode) == 0x000002, "Wrong size on TedLobbyConfigurationPopup_SetPasswordMode");
static_assert(offsetof(TedLobbyConfigurationPopup_SetPasswordMode, InMode) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetPasswordMode::InMode' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_SetPasswordMode, ReturnValue) == 0x000001, "Member 'TedLobbyConfigurationPopup_SetPasswordMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.SetShowPassword
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_SetShowPassword final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_SetShowPassword) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_SetShowPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_SetShowPassword) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_SetShowPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_SetShowPassword, bInShow) == 0x000000, "Member 'TedLobbyConfigurationPopup_SetShowPassword::bInShow' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.CanConfirm
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_CanConfirm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_CanConfirm) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_CanConfirm");
static_assert(sizeof(TedLobbyConfigurationPopup_CanConfirm) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_CanConfirm");
static_assert(offsetof(TedLobbyConfigurationPopup_CanConfirm, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_CanConfirm::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.DoesAffectPassword
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_DoesAffectPassword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_DoesAffectPassword) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_DoesAffectPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_DoesAffectPassword) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_DoesAffectPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_DoesAffectPassword, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_DoesAffectPassword::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetAffectPasswordMode
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_GetAffectPasswordMode final
{
public:
	ETedLobbyAffectPasswordMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetAffectPasswordMode) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_GetAffectPasswordMode");
static_assert(sizeof(TedLobbyConfigurationPopup_GetAffectPasswordMode) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_GetAffectPasswordMode");
static_assert(offsetof(TedLobbyConfigurationPopup_GetAffectPasswordMode, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetAffectPasswordMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetConfiguration
// 0x0038 (0x0038 - 0x0000)
struct TedLobbyConfigurationPopup_GetConfiguration final
{
public:
	struct FTedLobbyConfiguration                 ReturnValue;                                       // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetConfiguration) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_GetConfiguration");
static_assert(sizeof(TedLobbyConfigurationPopup_GetConfiguration) == 0x000038, "Wrong size on TedLobbyConfigurationPopup_GetConfiguration");
static_assert(offsetof(TedLobbyConfigurationPopup_GetConfiguration, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetConfiguration::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetLobbyName
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_GetLobbyName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetLobbyName) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_GetLobbyName");
static_assert(sizeof(TedLobbyConfigurationPopup_GetLobbyName) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_GetLobbyName");
static_assert(offsetof(TedLobbyConfigurationPopup_GetLobbyName, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetLobbyName::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetLobbyNameText
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_GetLobbyNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetLobbyNameText) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_GetLobbyNameText");
static_assert(sizeof(TedLobbyConfigurationPopup_GetLobbyNameText) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_GetLobbyNameText");
static_assert(offsetof(TedLobbyConfigurationPopup_GetLobbyNameText, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetLobbyNameText::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetLobbyType
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_GetLobbyType final
{
public:
	ETedServerType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetLobbyType) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_GetLobbyType");
static_assert(sizeof(TedLobbyConfigurationPopup_GetLobbyType) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_GetLobbyType");
static_assert(offsetof(TedLobbyConfigurationPopup_GetLobbyType, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetLobbyType::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetLobbyTypeSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex final
{
public:
	ETedServerType                                InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex) == 0x000004, "Wrong alignment on TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex");
static_assert(sizeof(TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex) == 0x000008, "Wrong size on TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex");
static_assert(offsetof(TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex, InType) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex::InType' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex, ReturnValue) == 0x000004, "Member 'TedLobbyConfigurationPopup_GetLobbyTypeSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetPassword
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_GetPassword final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetPassword) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_GetPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_GetPassword) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_GetPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_GetPassword, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetPassword::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetPasswordMode
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_GetPasswordMode final
{
public:
	ETedLobbyPasswordMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetPasswordMode) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_GetPasswordMode");
static_assert(sizeof(TedLobbyConfigurationPopup_GetPasswordMode) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_GetPasswordMode");
static_assert(offsetof(TedLobbyConfigurationPopup_GetPasswordMode, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetPasswordMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetPasswordModeSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyConfigurationPopup_GetPasswordModeSlotIndex final
{
public:
	ETedLobbyPasswordMode                         InMode;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetPasswordModeSlotIndex) == 0x000004, "Wrong alignment on TedLobbyConfigurationPopup_GetPasswordModeSlotIndex");
static_assert(sizeof(TedLobbyConfigurationPopup_GetPasswordModeSlotIndex) == 0x000008, "Wrong size on TedLobbyConfigurationPopup_GetPasswordModeSlotIndex");
static_assert(offsetof(TedLobbyConfigurationPopup_GetPasswordModeSlotIndex, InMode) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetPasswordModeSlotIndex::InMode' has a wrong offset!");
static_assert(offsetof(TedLobbyConfigurationPopup_GetPasswordModeSlotIndex, ReturnValue) == 0x000004, "Member 'TedLobbyConfigurationPopup_GetPasswordModeSlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.GetPasswordText
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyConfigurationPopup_GetPasswordText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_GetPasswordText) == 0x000008, "Wrong alignment on TedLobbyConfigurationPopup_GetPasswordText");
static_assert(sizeof(TedLobbyConfigurationPopup_GetPasswordText) == 0x000010, "Wrong size on TedLobbyConfigurationPopup_GetPasswordText");
static_assert(offsetof(TedLobbyConfigurationPopup_GetPasswordText, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_GetPasswordText::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.IsLobbyTypeReadOnly
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_IsLobbyTypeReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_IsLobbyTypeReadOnly) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_IsLobbyTypeReadOnly");
static_assert(sizeof(TedLobbyConfigurationPopup_IsLobbyTypeReadOnly) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_IsLobbyTypeReadOnly");
static_assert(offsetof(TedLobbyConfigurationPopup_IsLobbyTypeReadOnly, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_IsLobbyTypeReadOnly::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.IsPasswordRequired
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_IsPasswordRequired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_IsPasswordRequired) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_IsPasswordRequired");
static_assert(sizeof(TedLobbyConfigurationPopup_IsPasswordRequired) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_IsPasswordRequired");
static_assert(offsetof(TedLobbyConfigurationPopup_IsPasswordRequired, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_IsPasswordRequired::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyConfigurationPopup.ShouldShowAffectPassword
// 0x0001 (0x0001 - 0x0000)
struct TedLobbyConfigurationPopup_ShouldShowAffectPassword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyConfigurationPopup_ShouldShowAffectPassword) == 0x000001, "Wrong alignment on TedLobbyConfigurationPopup_ShouldShowAffectPassword");
static_assert(sizeof(TedLobbyConfigurationPopup_ShouldShowAffectPassword) == 0x000001, "Wrong size on TedLobbyConfigurationPopup_ShouldShowAffectPassword");
static_assert(offsetof(TedLobbyConfigurationPopup_ShouldShowAffectPassword, ReturnValue) == 0x000000, "Member 'TedLobbyConfigurationPopup_ShouldShowAffectPassword::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyContentPanel.K2_OnDisplayedLobbyStateChange
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange final
{
public:
	class ATedLobbyBeaconState*                   InOld;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedLobbyBeaconState*                   InNew;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange) == 0x000008, "Wrong alignment on TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange");
static_assert(sizeof(TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange) == 0x000010, "Wrong size on TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange");
static_assert(offsetof(TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange, InOld) == 0x000000, "Member 'TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange::InOld' has a wrong offset!");
static_assert(offsetof(TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange, InNew) == 0x000008, "Member 'TedLobbyContentPanel_K2_OnDisplayedLobbyStateChange::InNew' has a wrong offset!");

// Function Tempest.TedLobbyContentPanel.K2_OnViewingClientChange
// 0x0010 (0x0010 - 0x0000)
struct TedLobbyContentPanel_K2_OnViewingClientChange final
{
public:
	class ATedLobbyBeaconClient*                  InOld;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedLobbyBeaconClient*                  InNew;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyContentPanel_K2_OnViewingClientChange) == 0x000008, "Wrong alignment on TedLobbyContentPanel_K2_OnViewingClientChange");
static_assert(sizeof(TedLobbyContentPanel_K2_OnViewingClientChange) == 0x000010, "Wrong size on TedLobbyContentPanel_K2_OnViewingClientChange");
static_assert(offsetof(TedLobbyContentPanel_K2_OnViewingClientChange, InOld) == 0x000000, "Member 'TedLobbyContentPanel_K2_OnViewingClientChange::InOld' has a wrong offset!");
static_assert(offsetof(TedLobbyContentPanel_K2_OnViewingClientChange, InNew) == 0x000008, "Member 'TedLobbyContentPanel_K2_OnViewingClientChange::InNew' has a wrong offset!");

// Function Tempest.TedLobbyContentPanel.SetDisplayedLobbyState
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyContentPanel_SetDisplayedLobbyState final
{
public:
	class ATedLobbyBeaconState*                   InLobbyState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyContentPanel_SetDisplayedLobbyState) == 0x000008, "Wrong alignment on TedLobbyContentPanel_SetDisplayedLobbyState");
static_assert(sizeof(TedLobbyContentPanel_SetDisplayedLobbyState) == 0x000008, "Wrong size on TedLobbyContentPanel_SetDisplayedLobbyState");
static_assert(offsetof(TedLobbyContentPanel_SetDisplayedLobbyState, InLobbyState) == 0x000000, "Member 'TedLobbyContentPanel_SetDisplayedLobbyState::InLobbyState' has a wrong offset!");

// Function Tempest.TedLobbyContentPanel.SetViewingClient
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyContentPanel_SetViewingClient final
{
public:
	class ATedLobbyBeaconClient*                  InClient;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyContentPanel_SetViewingClient) == 0x000008, "Wrong alignment on TedLobbyContentPanel_SetViewingClient");
static_assert(sizeof(TedLobbyContentPanel_SetViewingClient) == 0x000008, "Wrong size on TedLobbyContentPanel_SetViewingClient");
static_assert(offsetof(TedLobbyContentPanel_SetViewingClient, InClient) == 0x000000, "Member 'TedLobbyContentPanel_SetViewingClient::InClient' has a wrong offset!");

// Function Tempest.TedLobbyContentPanel.GetViewingClient
// 0x0008 (0x0008 - 0x0000)
struct TedLobbyContentPanel_GetViewingClient final
{
public:
	class ATedLobbyBeaconClient*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyContentPanel_GetViewingClient) == 0x000008, "Wrong alignment on TedLobbyContentPanel_GetViewingClient");
static_assert(sizeof(TedLobbyContentPanel_GetViewingClient) == 0x000008, "Wrong size on TedLobbyContentPanel_GetViewingClient");
static_assert(offsetof(TedLobbyContentPanel_GetViewingClient, ReturnValue) == 0x000000, "Member 'TedLobbyContentPanel_GetViewingClient::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyTypeFunctions.GetContentID_LobbyType
// 0x000C (0x000C - 0x0000)
struct TedLobbyTypeFunctions_GetContentID_LobbyType final
{
public:
	ETedServerType                                InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyTypeFunctions_GetContentID_LobbyType) == 0x000004, "Wrong alignment on TedLobbyTypeFunctions_GetContentID_LobbyType");
static_assert(sizeof(TedLobbyTypeFunctions_GetContentID_LobbyType) == 0x00000C, "Wrong size on TedLobbyTypeFunctions_GetContentID_LobbyType");
static_assert(offsetof(TedLobbyTypeFunctions_GetContentID_LobbyType, InType) == 0x000000, "Member 'TedLobbyTypeFunctions_GetContentID_LobbyType::InType' has a wrong offset!");
static_assert(offsetof(TedLobbyTypeFunctions_GetContentID_LobbyType, ReturnValue) == 0x000004, "Member 'TedLobbyTypeFunctions_GetContentID_LobbyType::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyTypeFunctions.GetContentID_PasswordMode
// 0x000C (0x000C - 0x0000)
struct TedLobbyTypeFunctions_GetContentID_PasswordMode final
{
public:
	ETedLobbyPasswordMode                         InMode;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedLobbyTypeFunctions_GetContentID_PasswordMode) == 0x000004, "Wrong alignment on TedLobbyTypeFunctions_GetContentID_PasswordMode");
static_assert(sizeof(TedLobbyTypeFunctions_GetContentID_PasswordMode) == 0x00000C, "Wrong size on TedLobbyTypeFunctions_GetContentID_PasswordMode");
static_assert(offsetof(TedLobbyTypeFunctions_GetContentID_PasswordMode, InMode) == 0x000000, "Member 'TedLobbyTypeFunctions_GetContentID_PasswordMode::InMode' has a wrong offset!");
static_assert(offsetof(TedLobbyTypeFunctions_GetContentID_PasswordMode, ReturnValue) == 0x000004, "Member 'TedLobbyTypeFunctions_GetContentID_PasswordMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyTypeFunctions.GetLobbyTypeFromContentID
// 0x000C (0x000C - 0x0000)
struct TedLobbyTypeFunctions_GetLobbyTypeFromContentID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedServerType                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyTypeFunctions_GetLobbyTypeFromContentID) == 0x000004, "Wrong alignment on TedLobbyTypeFunctions_GetLobbyTypeFromContentID");
static_assert(sizeof(TedLobbyTypeFunctions_GetLobbyTypeFromContentID) == 0x00000C, "Wrong size on TedLobbyTypeFunctions_GetLobbyTypeFromContentID");
static_assert(offsetof(TedLobbyTypeFunctions_GetLobbyTypeFromContentID, InID) == 0x000000, "Member 'TedLobbyTypeFunctions_GetLobbyTypeFromContentID::InID' has a wrong offset!");
static_assert(offsetof(TedLobbyTypeFunctions_GetLobbyTypeFromContentID, ReturnValue) == 0x000008, "Member 'TedLobbyTypeFunctions_GetLobbyTypeFromContentID::ReturnValue' has a wrong offset!");

// Function Tempest.TedLobbyTypeFunctions.GetPasswordModeFromContentID
// 0x000C (0x000C - 0x0000)
struct TedLobbyTypeFunctions_GetPasswordModeFromContentID final
{
public:
	class FName                                   InID;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedLobbyPasswordMode                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedLobbyTypeFunctions_GetPasswordModeFromContentID) == 0x000004, "Wrong alignment on TedLobbyTypeFunctions_GetPasswordModeFromContentID");
static_assert(sizeof(TedLobbyTypeFunctions_GetPasswordModeFromContentID) == 0x00000C, "Wrong size on TedLobbyTypeFunctions_GetPasswordModeFromContentID");
static_assert(offsetof(TedLobbyTypeFunctions_GetPasswordModeFromContentID, InID) == 0x000000, "Member 'TedLobbyTypeFunctions_GetPasswordModeFromContentID::InID' has a wrong offset!");
static_assert(offsetof(TedLobbyTypeFunctions_GetPasswordModeFromContentID, ReturnValue) == 0x000008, "Member 'TedLobbyTypeFunctions_GetPasswordModeFromContentID::ReturnValue' has a wrong offset!");

// Function Tempest.TedMainMenuScreenProfileButton.GetPlayerProfileAvatarImage
// 0x0008 (0x0008 - 0x0000)
struct TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage final
{
public:
	class UImage*                                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage) == 0x000008, "Wrong alignment on TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage");
static_assert(sizeof(TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage) == 0x000008, "Wrong size on TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage");
static_assert(offsetof(TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage, ReturnValue) == 0x000000, "Member 'TedMainMenuScreenProfileButton_GetPlayerProfileAvatarImage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMainMenuScreenProfileButton.OnProfileButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct TedMainMenuScreenProfileButton_OnProfileButtonClicked final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreenProfileButton_OnProfileButtonClicked) == 0x000008, "Wrong alignment on TedMainMenuScreenProfileButton_OnProfileButtonClicked");
static_assert(sizeof(TedMainMenuScreenProfileButton_OnProfileButtonClicked) == 0x000008, "Wrong size on TedMainMenuScreenProfileButton_OnProfileButtonClicked");
static_assert(offsetof(TedMainMenuScreenProfileButton_OnProfileButtonClicked, InWidget) == 0x000000, "Member 'TedMainMenuScreenProfileButton_OnProfileButtonClicked::InWidget' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.Get
// 0x0010 (0x0010 - 0x0000)
struct TedMainMenuScreen_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedMainMenuScreen*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreen_Get) == 0x000008, "Wrong alignment on TedMainMenuScreen_Get");
static_assert(sizeof(TedMainMenuScreen_Get) == 0x000010, "Wrong size on TedMainMenuScreen_Get");
static_assert(offsetof(TedMainMenuScreen_Get, WorldContextObject) == 0x000000, "Member 'TedMainMenuScreen_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_Get, ReturnValue) == 0x000008, "Member 'TedMainMenuScreen_Get::ReturnValue' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.GetCachedLocalPlayerRating
// 0x0008 (0x0008 - 0x0000)
struct TedMainMenuScreen_GetCachedLocalPlayerRating final
{
public:
	ETedRankedTeam                                Team;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedFaction                             Faction;                                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreen_GetCachedLocalPlayerRating) == 0x000004, "Wrong alignment on TedMainMenuScreen_GetCachedLocalPlayerRating");
static_assert(sizeof(TedMainMenuScreen_GetCachedLocalPlayerRating) == 0x000008, "Wrong size on TedMainMenuScreen_GetCachedLocalPlayerRating");
static_assert(offsetof(TedMainMenuScreen_GetCachedLocalPlayerRating, Team) == 0x000000, "Member 'TedMainMenuScreen_GetCachedLocalPlayerRating::Team' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_GetCachedLocalPlayerRating, Faction) == 0x000001, "Member 'TedMainMenuScreen_GetCachedLocalPlayerRating::Faction' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_GetCachedLocalPlayerRating, ReturnValue) == 0x000004, "Member 'TedMainMenuScreen_GetCachedLocalPlayerRating::ReturnValue' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.OnButtonsPanelActivateSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedMainMenuScreen_OnButtonsPanelActivateSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMainMenuScreen_OnButtonsPanelActivateSlotState) == 0x000008, "Wrong alignment on TedMainMenuScreen_OnButtonsPanelActivateSlotState");
static_assert(sizeof(TedMainMenuScreen_OnButtonsPanelActivateSlotState) == 0x000018, "Wrong size on TedMainMenuScreen_OnButtonsPanelActivateSlotState");
static_assert(offsetof(TedMainMenuScreen_OnButtonsPanelActivateSlotState, InContentPanel) == 0x000000, "Member 'TedMainMenuScreen_OnButtonsPanelActivateSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_OnButtonsPanelActivateSlotState, InContentSlot) == 0x000008, "Member 'TedMainMenuScreen_OnButtonsPanelActivateSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_OnButtonsPanelActivateSlotState, InState) == 0x000010, "Member 'TedMainMenuScreen_OnButtonsPanelActivateSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedMainMenuScreen_OnButtonsPanelActivateSlotState, bInActivated) == 0x000011, "Member 'TedMainMenuScreen_OnButtonsPanelActivateSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.OnPageVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct TedMainMenuScreen_OnPageVisibilityChanged final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreen_OnPageVisibilityChanged) == 0x000001, "Wrong alignment on TedMainMenuScreen_OnPageVisibilityChanged");
static_assert(sizeof(TedMainMenuScreen_OnPageVisibilityChanged) == 0x000001, "Wrong size on TedMainMenuScreen_OnPageVisibilityChanged");
static_assert(offsetof(TedMainMenuScreen_OnPageVisibilityChanged, InVisibility) == 0x000000, "Member 'TedMainMenuScreen_OnPageVisibilityChanged::InVisibility' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.OnPreorderSettingChanged
// 0x0008 (0x0008 - 0x0000)
struct TedMainMenuScreen_OnPreorderSettingChanged final
{
public:
	class FName                                   SettingChanged;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreen_OnPreorderSettingChanged) == 0x000004, "Wrong alignment on TedMainMenuScreen_OnPreorderSettingChanged");
static_assert(sizeof(TedMainMenuScreen_OnPreorderSettingChanged) == 0x000008, "Wrong size on TedMainMenuScreen_OnPreorderSettingChanged");
static_assert(offsetof(TedMainMenuScreen_OnPreorderSettingChanged, SettingChanged) == 0x000000, "Member 'TedMainMenuScreen_OnPreorderSettingChanged::SettingChanged' has a wrong offset!");

// Function Tempest.TedMainMenuScreen.GetCurrentOpenPage
// 0x0008 (0x0008 - 0x0000)
struct TedMainMenuScreen_GetCurrentOpenPage final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMainMenuScreen_GetCurrentOpenPage) == 0x000008, "Wrong alignment on TedMainMenuScreen_GetCurrentOpenPage");
static_assert(sizeof(TedMainMenuScreen_GetCurrentOpenPage) == 0x000008, "Wrong size on TedMainMenuScreen_GetCurrentOpenPage");
static_assert(offsetof(TedMainMenuScreen_GetCurrentOpenPage, ReturnValue) == 0x000000, "Member 'TedMainMenuScreen_GetCurrentOpenPage::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapContentPanel.OpenBriefingLevel
// 0x0004 (0x0004 - 0x0000)
struct TedMapContentPanel_OpenBriefingLevel final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapContentPanel_OpenBriefingLevel) == 0x000004, "Wrong alignment on TedMapContentPanel_OpenBriefingLevel");
static_assert(sizeof(TedMapContentPanel_OpenBriefingLevel) == 0x000004, "Wrong size on TedMapContentPanel_OpenBriefingLevel");
static_assert(offsetof(TedMapContentPanel_OpenBriefingLevel, InSlotIndex) == 0x000000, "Member 'TedMapContentPanel_OpenBriefingLevel::InSlotIndex' has a wrong offset!");

// Function Tempest.TedMapContentPanel.OpenLevel
// 0x0008 (0x0008 - 0x0000)
struct TedMapContentPanel_OpenLevel final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedGameDifficulty                            Difficulty;                                        // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapContentPanel_OpenLevel) == 0x000004, "Wrong alignment on TedMapContentPanel_OpenLevel");
static_assert(sizeof(TedMapContentPanel_OpenLevel) == 0x000008, "Wrong size on TedMapContentPanel_OpenLevel");
static_assert(offsetof(TedMapContentPanel_OpenLevel, InSlotIndex) == 0x000000, "Member 'TedMapContentPanel_OpenLevel::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_OpenLevel, Difficulty) == 0x000004, "Member 'TedMapContentPanel_OpenLevel::Difficulty' has a wrong offset!");

// Function Tempest.TedMapContentPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedMapContentPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutContent;                                        // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapContentPanel_GetContent) == 0x000004, "Wrong alignment on TedMapContentPanel_GetContent");
static_assert(sizeof(TedMapContentPanel_GetContent) == 0x000010, "Wrong size on TedMapContentPanel_GetContent");
static_assert(offsetof(TedMapContentPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedMapContentPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_GetContent, OutContent) == 0x000004, "Member 'TedMapContentPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_GetContent, ReturnValue) == 0x00000C, "Member 'TedMapContentPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapContentPanel.GetContentMapInfo
// 0x0018 (0x0018 - 0x0000)
struct TedMapContentPanel_GetContentMapInfo final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutMapName;                                        // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapContentPanel_GetContentMapInfo) == 0x000008, "Wrong alignment on TedMapContentPanel_GetContentMapInfo");
static_assert(sizeof(TedMapContentPanel_GetContentMapInfo) == 0x000018, "Wrong size on TedMapContentPanel_GetContentMapInfo");
static_assert(offsetof(TedMapContentPanel_GetContentMapInfo, InSlotIndex) == 0x000000, "Member 'TedMapContentPanel_GetContentMapInfo::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_GetContentMapInfo, OutMapName) == 0x000004, "Member 'TedMapContentPanel_GetContentMapInfo::OutMapName' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_GetContentMapInfo, ReturnValue) == 0x000010, "Member 'TedMapContentPanel_GetContentMapInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapContentPanel.HasBriefing
// 0x0008 (0x0008 - 0x0000)
struct TedMapContentPanel_HasBriefing final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapContentPanel_HasBriefing) == 0x000004, "Wrong alignment on TedMapContentPanel_HasBriefing");
static_assert(sizeof(TedMapContentPanel_HasBriefing) == 0x000008, "Wrong size on TedMapContentPanel_HasBriefing");
static_assert(offsetof(TedMapContentPanel_HasBriefing, InSlotIndex) == 0x000000, "Member 'TedMapContentPanel_HasBriefing::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedMapContentPanel_HasBriefing, ReturnValue) == 0x000004, "Member 'TedMapContentPanel_HasBriefing::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.SetFilterString
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanel_SetFilterString final
{
public:
	class FString                                 InFilter;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_SetFilterString) == 0x000008, "Wrong alignment on TedMapInfoPanel_SetFilterString");
static_assert(sizeof(TedMapInfoPanel_SetFilterString) == 0x000010, "Wrong size on TedMapInfoPanel_SetFilterString");
static_assert(offsetof(TedMapInfoPanel_SetFilterString, InFilter) == 0x000000, "Member 'TedMapInfoPanel_SetFilterString::InFilter' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.SetHumanNumFilter
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanel_SetHumanNumFilter final
{
public:
	struct FInt32Range                            InRange;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_SetHumanNumFilter) == 0x000004, "Wrong alignment on TedMapInfoPanel_SetHumanNumFilter");
static_assert(sizeof(TedMapInfoPanel_SetHumanNumFilter) == 0x000010, "Wrong size on TedMapInfoPanel_SetHumanNumFilter");
static_assert(offsetof(TedMapInfoPanel_SetHumanNumFilter, InRange) == 0x000000, "Member 'TedMapInfoPanel_SetHumanNumFilter::InRange' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_GetContent) == 0x000008, "Wrong alignment on TedMapInfoPanel_GetContent");
static_assert(sizeof(TedMapInfoPanel_GetContent) == 0x000010, "Wrong size on TedMapInfoPanel_GetContent");
static_assert(offsetof(TedMapInfoPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedMapInfoPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedMapInfoPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.GetContentByState
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanel_GetContentByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_GetContentByState) == 0x000008, "Wrong alignment on TedMapInfoPanel_GetContentByState");
static_assert(sizeof(TedMapInfoPanel_GetContentByState) == 0x000010, "Wrong size on TedMapInfoPanel_GetContentByState");
static_assert(offsetof(TedMapInfoPanel_GetContentByState, InState) == 0x000000, "Member 'TedMapInfoPanel_GetContentByState::InState' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanel_GetContentByState, InIndex) == 0x000004, "Member 'TedMapInfoPanel_GetContentByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanel_GetContentByState, ReturnValue) == 0x000008, "Member 'TedMapInfoPanel_GetContentByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.GetHumanNumFilter
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanel_GetHumanNumFilter final
{
public:
	struct FInt32Range                            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_GetHumanNumFilter) == 0x000004, "Wrong alignment on TedMapInfoPanel_GetHumanNumFilter");
static_assert(sizeof(TedMapInfoPanel_GetHumanNumFilter) == 0x000010, "Wrong size on TedMapInfoPanel_GetHumanNumFilter");
static_assert(offsetof(TedMapInfoPanel_GetHumanNumFilter, ReturnValue) == 0x000000, "Member 'TedMapInfoPanel_GetHumanNumFilter::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanel.GetSelectedContent
// 0x0008 (0x0008 - 0x0000)
struct TedMapInfoPanel_GetSelectedContent final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanel_GetSelectedContent) == 0x000008, "Wrong alignment on TedMapInfoPanel_GetSelectedContent");
static_assert(sizeof(TedMapInfoPanel_GetSelectedContent) == 0x000008, "Wrong size on TedMapInfoPanel_GetSelectedContent");
static_assert(offsetof(TedMapInfoPanel_GetSelectedContent, ReturnValue) == 0x000000, "Member 'TedMapInfoPanel_GetSelectedContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.IncVetos
// 0x0001 (0x0001 - 0x0000)
struct TedMapInfoPanelRanked_IncVetos final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanelRanked_IncVetos) == 0x000001, "Wrong alignment on TedMapInfoPanelRanked_IncVetos");
static_assert(sizeof(TedMapInfoPanelRanked_IncVetos) == 0x000001, "Wrong size on TedMapInfoPanelRanked_IncVetos");
static_assert(offsetof(TedMapInfoPanelRanked_IncVetos, ReturnValue) == 0x000000, "Member 'TedMapInfoPanelRanked_IncVetos::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.LoadMapState
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanelRanked_LoadMapState final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapInfoPanelRanked_LoadMapState) == 0x000008, "Wrong alignment on TedMapInfoPanelRanked_LoadMapState");
static_assert(sizeof(TedMapInfoPanelRanked_LoadMapState) == 0x000010, "Wrong size on TedMapInfoPanelRanked_LoadMapState");
static_assert(offsetof(TedMapInfoPanelRanked_LoadMapState, InMapInfo) == 0x000000, "Member 'TedMapInfoPanelRanked_LoadMapState::InMapInfo' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanelRanked_LoadMapState, ReturnValue) == 0x000008, "Member 'TedMapInfoPanelRanked_LoadMapState::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.SaveAllowedMapsForSession
// 0x0001 (0x0001 - 0x0000)
struct TedMapInfoPanelRanked_SaveAllowedMapsForSession final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanelRanked_SaveAllowedMapsForSession) == 0x000001, "Wrong alignment on TedMapInfoPanelRanked_SaveAllowedMapsForSession");
static_assert(sizeof(TedMapInfoPanelRanked_SaveAllowedMapsForSession) == 0x000001, "Wrong size on TedMapInfoPanelRanked_SaveAllowedMapsForSession");
static_assert(offsetof(TedMapInfoPanelRanked_SaveAllowedMapsForSession, ReturnValue) == 0x000000, "Member 'TedMapInfoPanelRanked_SaveAllowedMapsForSession::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.SetMultiplayerCurrentData
// 0x0002 (0x0002 - 0x0000)
struct TedMapInfoPanelRanked_SetMultiplayerCurrentData final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedTeam                                TeamType;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanelRanked_SetMultiplayerCurrentData) == 0x000001, "Wrong alignment on TedMapInfoPanelRanked_SetMultiplayerCurrentData");
static_assert(sizeof(TedMapInfoPanelRanked_SetMultiplayerCurrentData) == 0x000002, "Wrong size on TedMapInfoPanelRanked_SetMultiplayerCurrentData");
static_assert(offsetof(TedMapInfoPanelRanked_SetMultiplayerCurrentData, ServerType) == 0x000000, "Member 'TedMapInfoPanelRanked_SetMultiplayerCurrentData::ServerType' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanelRanked_SetMultiplayerCurrentData, TeamType) == 0x000001, "Member 'TedMapInfoPanelRanked_SetMultiplayerCurrentData::TeamType' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.UpdateMapState
// 0x0010 (0x0010 - 0x0000)
struct TedMapInfoPanelRanked_UpdateMapState final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InChecked;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMapInfoPanelRanked_UpdateMapState) == 0x000008, "Wrong alignment on TedMapInfoPanelRanked_UpdateMapState");
static_assert(sizeof(TedMapInfoPanelRanked_UpdateMapState) == 0x000010, "Wrong size on TedMapInfoPanelRanked_UpdateMapState");
static_assert(offsetof(TedMapInfoPanelRanked_UpdateMapState, InMapInfo) == 0x000000, "Member 'TedMapInfoPanelRanked_UpdateMapState::InMapInfo' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanelRanked_UpdateMapState, InChecked) == 0x000008, "Member 'TedMapInfoPanelRanked_UpdateMapState::InChecked' has a wrong offset!");
static_assert(offsetof(TedMapInfoPanelRanked_UpdateMapState, ReturnValue) == 0x000009, "Member 'TedMapInfoPanelRanked_UpdateMapState::ReturnValue' has a wrong offset!");

// Function Tempest.TedMapInfoPanelRanked.GetMaxVetos
// 0x0004 (0x0004 - 0x0000)
struct TedMapInfoPanelRanked_GetMaxVetos final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMapInfoPanelRanked_GetMaxVetos) == 0x000004, "Wrong alignment on TedMapInfoPanelRanked_GetMaxVetos");
static_assert(sizeof(TedMapInfoPanelRanked_GetMaxVetos) == 0x000004, "Wrong size on TedMapInfoPanelRanked_GetMaxVetos");
static_assert(offsetof(TedMapInfoPanelRanked_GetMaxVetos, ReturnValue) == 0x000000, "Member 'TedMapInfoPanelRanked_GetMaxVetos::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerFunctionsLibrary.AddMarkerAtLocation
// 0x0030 (0x0030 - 0x0000)
struct TedMarkerFunctionsLibrary_AddMarkerAtLocation final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMarkerConfig*                 Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMarkerHandle                       ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMarkerFunctionsLibrary_AddMarkerAtLocation) == 0x000008, "Wrong alignment on TedMarkerFunctionsLibrary_AddMarkerAtLocation");
static_assert(sizeof(TedMarkerFunctionsLibrary_AddMarkerAtLocation) == 0x000030, "Wrong size on TedMarkerFunctionsLibrary_AddMarkerAtLocation");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAtLocation, WorldContext) == 0x000000, "Member 'TedMarkerFunctionsLibrary_AddMarkerAtLocation::WorldContext' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAtLocation, Config) == 0x000008, "Member 'TedMarkerFunctionsLibrary_AddMarkerAtLocation::Config' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAtLocation, Location) == 0x000010, "Member 'TedMarkerFunctionsLibrary_AddMarkerAtLocation::Location' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAtLocation, ReturnValue) == 0x000028, "Member 'TedMarkerFunctionsLibrary_AddMarkerAtLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerFunctionsLibrary.AddMarkerAttached
// 0x0020 (0x0020 - 0x0000)
struct TedMarkerFunctionsLibrary_AddMarkerAttached final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMarkerConfig*                 Config;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMarkerHandle                       ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMarkerFunctionsLibrary_AddMarkerAttached) == 0x000008, "Wrong alignment on TedMarkerFunctionsLibrary_AddMarkerAttached");
static_assert(sizeof(TedMarkerFunctionsLibrary_AddMarkerAttached) == 0x000020, "Wrong size on TedMarkerFunctionsLibrary_AddMarkerAttached");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAttached, WorldContext) == 0x000000, "Member 'TedMarkerFunctionsLibrary_AddMarkerAttached::WorldContext' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAttached, Config) == 0x000008, "Member 'TedMarkerFunctionsLibrary_AddMarkerAttached::Config' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAttached, Target) == 0x000010, "Member 'TedMarkerFunctionsLibrary_AddMarkerAttached::Target' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_AddMarkerAttached, ReturnValue) == 0x000018, "Member 'TedMarkerFunctionsLibrary_AddMarkerAttached::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerFunctionsLibrary.RemoveMarkerByHandle
// 0x0010 (0x0010 - 0x0000)
struct TedMarkerFunctionsLibrary_RemoveMarkerByHandle final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMarkerHandle                       Handle;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMarkerFunctionsLibrary_RemoveMarkerByHandle) == 0x000008, "Wrong alignment on TedMarkerFunctionsLibrary_RemoveMarkerByHandle");
static_assert(sizeof(TedMarkerFunctionsLibrary_RemoveMarkerByHandle) == 0x000010, "Wrong size on TedMarkerFunctionsLibrary_RemoveMarkerByHandle");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByHandle, WorldContext) == 0x000000, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByHandle::WorldContext' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByHandle, Handle) == 0x000008, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByHandle::Handle' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByHandle, ReturnValue) == 0x00000C, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByHandle::ReturnValue' has a wrong offset!");

// Function Tempest.TedMarkerFunctionsLibrary.RemoveMarkerByTarget
// 0x0018 (0x0018 - 0x0000)
struct TedMarkerFunctionsLibrary_RemoveMarkerByTarget final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMarkerFunctionsLibrary_RemoveMarkerByTarget) == 0x000008, "Wrong alignment on TedMarkerFunctionsLibrary_RemoveMarkerByTarget");
static_assert(sizeof(TedMarkerFunctionsLibrary_RemoveMarkerByTarget) == 0x000018, "Wrong size on TedMarkerFunctionsLibrary_RemoveMarkerByTarget");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByTarget, WorldContext) == 0x000000, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByTarget::WorldContext' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByTarget, Target) == 0x000008, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByTarget::Target' has a wrong offset!");
static_assert(offsetof(TedMarkerFunctionsLibrary_RemoveMarkerByTarget, ReturnValue) == 0x000010, "Member 'TedMarkerFunctionsLibrary_RemoveMarkerByTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot_Expansion.K2_DescribePlayerPortrait
// 0x0018 (0x0018 - 0x0000)
struct TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait final
{
public:
	class UTexture2D*                             InPortrait;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InHydraId;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait) == 0x000008, "Wrong alignment on TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait");
static_assert(sizeof(TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait) == 0x000018, "Wrong size on TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait");
static_assert(offsetof(TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait, InPortrait) == 0x000000, "Member 'TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait::InPortrait' has a wrong offset!");
static_assert(offsetof(TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait, InHydraId) == 0x000008, "Member 'TedMatchHistorySlot_Expansion_K2_DescribePlayerPortrait::InHydraId' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeDate
// 0x0008 (0x0008 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeDate final
{
public:
	struct FDateTime                              Time;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeDate) == 0x000008, "Wrong alignment on TedMatchHistorySlot_K2_DescribeDate");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeDate) == 0x000008, "Wrong size on TedMatchHistorySlot_K2_DescribeDate");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeDate, Time) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeDate::Time' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeFaction
// 0x0001 (0x0001 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeFaction final
{
public:
	ETedFaction                                   Faction;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeFaction) == 0x000001, "Wrong alignment on TedMatchHistorySlot_K2_DescribeFaction");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeFaction) == 0x000001, "Wrong size on TedMatchHistorySlot_K2_DescribeFaction");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeFaction, Faction) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeFaction::Faction' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeMap
// 0x0008 (0x0008 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeMap final
{
public:
	const class UTedMapInfo*                      Map;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeMap) == 0x000008, "Wrong alignment on TedMatchHistorySlot_K2_DescribeMap");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeMap) == 0x000008, "Wrong size on TedMatchHistorySlot_K2_DescribeMap");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeMap, Map) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeMap::Map' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeMatchName
// 0x0010 (0x0010 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeMatchName final
{
public:
	class FText                                   MatchName;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeMatchName) == 0x000008, "Wrong alignment on TedMatchHistorySlot_K2_DescribeMatchName");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeMatchName) == 0x000010, "Wrong size on TedMatchHistorySlot_K2_DescribeMatchName");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeMatchName, MatchName) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeMatchName::MatchName' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeServerType
// 0x0001 (0x0001 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeServerType final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeServerType) == 0x000001, "Wrong alignment on TedMatchHistorySlot_K2_DescribeServerType");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeServerType) == 0x000001, "Wrong size on TedMatchHistorySlot_K2_DescribeServerType");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeServerType, ServerType) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeServerType::ServerType' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeTeamType
// 0x0001 (0x0001 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeTeamType final
{
public:
	ETedRankedTeam                                Team;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeTeamType) == 0x000001, "Wrong alignment on TedMatchHistorySlot_K2_DescribeTeamType");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeTeamType) == 0x000001, "Wrong size on TedMatchHistorySlot_K2_DescribeTeamType");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeTeamType, Team) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeTeamType::Team' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeTimespan
// 0x0008 (0x0008 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeTimespan final
{
public:
	struct FTimespan                              Time;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeTimespan) == 0x000008, "Wrong alignment on TedMatchHistorySlot_K2_DescribeTimespan");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeTimespan) == 0x000008, "Wrong size on TedMatchHistorySlot_K2_DescribeTimespan");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeTimespan, Time) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeTimespan::Time' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.K2_DescribeVictoryOrDefeat
// 0x0001 (0x0001 - 0x0000)
struct TedMatchHistorySlot_K2_DescribeVictoryOrDefeat final
{
public:
	bool                                          bVictory;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_K2_DescribeVictoryOrDefeat) == 0x000001, "Wrong alignment on TedMatchHistorySlot_K2_DescribeVictoryOrDefeat");
static_assert(sizeof(TedMatchHistorySlot_K2_DescribeVictoryOrDefeat) == 0x000001, "Wrong size on TedMatchHistorySlot_K2_DescribeVictoryOrDefeat");
static_assert(offsetof(TedMatchHistorySlot_K2_DescribeVictoryOrDefeat, bVictory) == 0x000000, "Member 'TedMatchHistorySlot_K2_DescribeVictoryOrDefeat::bVictory' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.MakeContentForExpansion
// 0x0010 (0x0010 - 0x0000)
struct TedMatchHistorySlot_MakeContentForExpansion final
{
public:
	TArray<struct FTedMatchHistorySlot_Expansion_PlayerContent> ReturnValue;                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_MakeContentForExpansion) == 0x000008, "Wrong alignment on TedMatchHistorySlot_MakeContentForExpansion");
static_assert(sizeof(TedMatchHistorySlot_MakeContentForExpansion) == 0x000010, "Wrong size on TedMatchHistorySlot_MakeContentForExpansion");
static_assert(offsetof(TedMatchHistorySlot_MakeContentForExpansion, ReturnValue) == 0x000000, "Member 'TedMatchHistorySlot_MakeContentForExpansion::ReturnValue' has a wrong offset!");

// Function Tempest.TedMatchHistorySlot.RequestUserInfosForExpansionContent
// 0x0010 (0x0010 - 0x0000)
struct TedMatchHistorySlot_RequestUserInfosForExpansionContent final
{
public:
	TArray<struct FTedMatchHistorySlot_Expansion_PlayerContent> InContent;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMatchHistorySlot_RequestUserInfosForExpansionContent) == 0x000008, "Wrong alignment on TedMatchHistorySlot_RequestUserInfosForExpansionContent");
static_assert(sizeof(TedMatchHistorySlot_RequestUserInfosForExpansionContent) == 0x000010, "Wrong size on TedMatchHistorySlot_RequestUserInfosForExpansionContent");
static_assert(offsetof(TedMatchHistorySlot_RequestUserInfosForExpansionContent, InContent) == 0x000000, "Member 'TedMatchHistorySlot_RequestUserInfosForExpansionContent::InContent' has a wrong offset!");

// Function Tempest.TedMedalsLibrary.GetMedalByRating
// 0x0030 (0x0030 - 0x0000)
struct TedMedalsLibrary_GetMedalByRating final
{
public:
	float                                         InRating;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedFaction                                   InFaction;                                         // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutSuccess;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedMedalTableRow_Ranked               ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMedalsLibrary_GetMedalByRating) == 0x000008, "Wrong alignment on TedMedalsLibrary_GetMedalByRating");
static_assert(sizeof(TedMedalsLibrary_GetMedalByRating) == 0x000030, "Wrong size on TedMedalsLibrary_GetMedalByRating");
static_assert(offsetof(TedMedalsLibrary_GetMedalByRating, InRating) == 0x000000, "Member 'TedMedalsLibrary_GetMedalByRating::InRating' has a wrong offset!");
static_assert(offsetof(TedMedalsLibrary_GetMedalByRating, InFaction) == 0x000004, "Member 'TedMedalsLibrary_GetMedalByRating::InFaction' has a wrong offset!");
static_assert(offsetof(TedMedalsLibrary_GetMedalByRating, bOutSuccess) == 0x000005, "Member 'TedMedalsLibrary_GetMedalByRating::bOutSuccess' has a wrong offset!");
static_assert(offsetof(TedMedalsLibrary_GetMedalByRating, ReturnValue) == 0x000008, "Member 'TedMedalsLibrary_GetMedalByRating::ReturnValue' has a wrong offset!");

// Function Tempest.TedMedalsScreen.GetFirstMedalOfType
// 0x0010 (0x0010 - 0x0000)
struct TedMedalsScreen_GetFirstMedalOfType final
{
public:
	ETedMedalsType                                Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMedalsScreen_GetFirstMedalOfType) == 0x000008, "Wrong alignment on TedMedalsScreen_GetFirstMedalOfType");
static_assert(sizeof(TedMedalsScreen_GetFirstMedalOfType) == 0x000010, "Wrong size on TedMedalsScreen_GetFirstMedalOfType");
static_assert(offsetof(TedMedalsScreen_GetFirstMedalOfType, Type) == 0x000000, "Member 'TedMedalsScreen_GetFirstMedalOfType::Type' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_GetFirstMedalOfType, ReturnValue) == 0x000008, "Member 'TedMedalsScreen_GetFirstMedalOfType::ReturnValue' has a wrong offset!");

// Function Tempest.TedMedalsScreen.K2_OnSwitchMainMedal
// 0x0030 (0x0030 - 0x0000)
struct TedMedalsScreen_K2_OnSwitchMainMedal final
{
public:
	int32                                         NewMedalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedMedalTableRow                      DataRow;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsLastMedal;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMedalsScreen_K2_OnSwitchMainMedal) == 0x000008, "Wrong alignment on TedMedalsScreen_K2_OnSwitchMainMedal");
static_assert(sizeof(TedMedalsScreen_K2_OnSwitchMainMedal) == 0x000030, "Wrong size on TedMedalsScreen_K2_OnSwitchMainMedal");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchMainMedal, NewMedalIndex) == 0x000000, "Member 'TedMedalsScreen_K2_OnSwitchMainMedal::NewMedalIndex' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchMainMedal, DataRow) == 0x000008, "Member 'TedMedalsScreen_K2_OnSwitchMainMedal::DataRow' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchMainMedal, bIsLastMedal) == 0x000028, "Member 'TedMedalsScreen_K2_OnSwitchMainMedal::bIsLastMedal' has a wrong offset!");

// Function Tempest.TedMedalsScreen.K2_OnSwitchSideMedal
// 0x0030 (0x0030 - 0x0000)
struct TedMedalsScreen_K2_OnSwitchSideMedal final
{
public:
	int32                                         NewMedalIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedMedalTableRow                      DataRow;                                           // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsLastMedal;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMedalsScreen_K2_OnSwitchSideMedal) == 0x000008, "Wrong alignment on TedMedalsScreen_K2_OnSwitchSideMedal");
static_assert(sizeof(TedMedalsScreen_K2_OnSwitchSideMedal) == 0x000030, "Wrong size on TedMedalsScreen_K2_OnSwitchSideMedal");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchSideMedal, NewMedalIndex) == 0x000000, "Member 'TedMedalsScreen_K2_OnSwitchSideMedal::NewMedalIndex' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchSideMedal, DataRow) == 0x000008, "Member 'TedMedalsScreen_K2_OnSwitchSideMedal::DataRow' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_K2_OnSwitchSideMedal, bIsLastMedal) == 0x000028, "Member 'TedMedalsScreen_K2_OnSwitchSideMedal::bIsLastMedal' has a wrong offset!");

// Function Tempest.TedMedalsScreen.OnButtonActivatedState
// 0x0018 (0x0018 - 0x0000)
struct TedMedalsScreen_OnButtonActivatedState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMedalsScreen_OnButtonActivatedState) == 0x000008, "Wrong alignment on TedMedalsScreen_OnButtonActivatedState");
static_assert(sizeof(TedMedalsScreen_OnButtonActivatedState) == 0x000018, "Wrong size on TedMedalsScreen_OnButtonActivatedState");
static_assert(offsetof(TedMedalsScreen_OnButtonActivatedState, InContentPanel) == 0x000000, "Member 'TedMedalsScreen_OnButtonActivatedState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_OnButtonActivatedState, InContentSlot) == 0x000008, "Member 'TedMedalsScreen_OnButtonActivatedState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_OnButtonActivatedState, InState) == 0x000010, "Member 'TedMedalsScreen_OnButtonActivatedState::InState' has a wrong offset!");
static_assert(offsetof(TedMedalsScreen_OnButtonActivatedState, bInActivated) == 0x000011, "Member 'TedMedalsScreen_OnButtonActivatedState::bInActivated' has a wrong offset!");

// Function Tempest.TedMedalsScreen.SetMedalAnimationTimerDelay
// 0x0004 (0x0004 - 0x0000)
struct TedMedalsScreen_SetMedalAnimationTimerDelay final
{
public:
	float                                         InDelay;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMedalsScreen_SetMedalAnimationTimerDelay) == 0x000004, "Wrong alignment on TedMedalsScreen_SetMedalAnimationTimerDelay");
static_assert(sizeof(TedMedalsScreen_SetMedalAnimationTimerDelay) == 0x000004, "Wrong size on TedMedalsScreen_SetMedalAnimationTimerDelay");
static_assert(offsetof(TedMedalsScreen_SetMedalAnimationTimerDelay, InDelay) == 0x000000, "Member 'TedMedalsScreen_SetMedalAnimationTimerDelay::InDelay' has a wrong offset!");

// Function Tempest.TedMeshWidget.AddRelevantMeshWidgetActor
// 0x0008 (0x0008 - 0x0000)
struct TedMeshWidget_AddRelevantMeshWidgetActor final
{
public:
	class ATedMeshWidgetActor*                    InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMeshWidget_AddRelevantMeshWidgetActor) == 0x000008, "Wrong alignment on TedMeshWidget_AddRelevantMeshWidgetActor");
static_assert(sizeof(TedMeshWidget_AddRelevantMeshWidgetActor) == 0x000008, "Wrong size on TedMeshWidget_AddRelevantMeshWidgetActor");
static_assert(offsetof(TedMeshWidget_AddRelevantMeshWidgetActor, InActor) == 0x000000, "Member 'TedMeshWidget_AddRelevantMeshWidgetActor::InActor' has a wrong offset!");

// Function Tempest.TedMeshWidget.OnMeshWidgetEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedMeshWidget_OnMeshWidgetEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMeshWidget_OnMeshWidgetEndPlay) == 0x000008, "Wrong alignment on TedMeshWidget_OnMeshWidgetEndPlay");
static_assert(sizeof(TedMeshWidget_OnMeshWidgetEndPlay) == 0x000010, "Wrong size on TedMeshWidget_OnMeshWidgetEndPlay");
static_assert(offsetof(TedMeshWidget_OnMeshWidgetEndPlay, InActor) == 0x000000, "Member 'TedMeshWidget_OnMeshWidgetEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedMeshWidget_OnMeshWidgetEndPlay, InEndPlayReason) == 0x000008, "Member 'TedMeshWidget_OnMeshWidgetEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedMeshWidget.RemoveRelevantMeshWidgetActor
// 0x0008 (0x0008 - 0x0000)
struct TedMeshWidget_RemoveRelevantMeshWidgetActor final
{
public:
	class ATedMeshWidgetActor*                    InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMeshWidget_RemoveRelevantMeshWidgetActor) == 0x000008, "Wrong alignment on TedMeshWidget_RemoveRelevantMeshWidgetActor");
static_assert(sizeof(TedMeshWidget_RemoveRelevantMeshWidgetActor) == 0x000008, "Wrong size on TedMeshWidget_RemoveRelevantMeshWidgetActor");
static_assert(offsetof(TedMeshWidget_RemoveRelevantMeshWidgetActor, InActor) == 0x000000, "Member 'TedMeshWidget_RemoveRelevantMeshWidgetActor::InActor' has a wrong offset!");

// Function Tempest.TedMeshWidget.GetShowingMeshWidgetActorContextObject
// 0x0008 (0x0008 - 0x0000)
struct TedMeshWidget_GetShowingMeshWidgetActorContextObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMeshWidget_GetShowingMeshWidgetActorContextObject) == 0x000008, "Wrong alignment on TedMeshWidget_GetShowingMeshWidgetActorContextObject");
static_assert(sizeof(TedMeshWidget_GetShowingMeshWidgetActorContextObject) == 0x000008, "Wrong size on TedMeshWidget_GetShowingMeshWidgetActorContextObject");
static_assert(offsetof(TedMeshWidget_GetShowingMeshWidgetActorContextObject, ReturnValue) == 0x000000, "Member 'TedMeshWidget_GetShowingMeshWidgetActorContextObject::ReturnValue' has a wrong offset!");

// Function Tempest.TedMeshWidget.IsDisplayingAnything
// 0x0001 (0x0001 - 0x0000)
struct TedMeshWidget_IsDisplayingAnything final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMeshWidget_IsDisplayingAnything) == 0x000001, "Wrong alignment on TedMeshWidget_IsDisplayingAnything");
static_assert(sizeof(TedMeshWidget_IsDisplayingAnything) == 0x000001, "Wrong size on TedMeshWidget_IsDisplayingAnything");
static_assert(offsetof(TedMeshWidget_IsDisplayingAnything, ReturnValue) == 0x000000, "Member 'TedMeshWidget_IsDisplayingAnything::ReturnValue' has a wrong offset!");

// Function Tempest.TedMineActor.Disarm
// 0x0008 (0x0008 - 0x0000)
struct TedMineActor_Disarm final
{
public:
	class AActor*                                 DisarmingActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMineActor_Disarm) == 0x000008, "Wrong alignment on TedMineActor_Disarm");
static_assert(sizeof(TedMineActor_Disarm) == 0x000008, "Wrong size on TedMineActor_Disarm");
static_assert(offsetof(TedMineActor_Disarm, DisarmingActor) == 0x000000, "Member 'TedMineActor_Disarm::DisarmingActor' has a wrong offset!");

// Function Tempest.TedMineActor.NetMulticast_TriggeredBy
// 0x0008 (0x0008 - 0x0000)
struct TedMineActor_NetMulticast_TriggeredBy final
{
public:
	class ATedPawn*                               TriggerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMineActor_NetMulticast_TriggeredBy) == 0x000008, "Wrong alignment on TedMineActor_NetMulticast_TriggeredBy");
static_assert(sizeof(TedMineActor_NetMulticast_TriggeredBy) == 0x000008, "Wrong size on TedMineActor_NetMulticast_TriggeredBy");
static_assert(offsetof(TedMineActor_NetMulticast_TriggeredBy, TriggerPawn) == 0x000000, "Member 'TedMineActor_NetMulticast_TriggeredBy::TriggerPawn' has a wrong offset!");

// Function Tempest.TedMineActor.ReceiveArmedChanged
// 0x0001 (0x0001 - 0x0000)
struct TedMineActor_ReceiveArmedChanged final
{
public:
	bool                                          bNewArmed;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMineActor_ReceiveArmedChanged) == 0x000001, "Wrong alignment on TedMineActor_ReceiveArmedChanged");
static_assert(sizeof(TedMineActor_ReceiveArmedChanged) == 0x000001, "Wrong size on TedMineActor_ReceiveArmedChanged");
static_assert(offsetof(TedMineActor_ReceiveArmedChanged, bNewArmed) == 0x000000, "Member 'TedMineActor_ReceiveArmedChanged::bNewArmed' has a wrong offset!");

// Function Tempest.TedMineActor.ReceiveTriggeredBy
// 0x0008 (0x0008 - 0x0000)
struct TedMineActor_ReceiveTriggeredBy final
{
public:
	class ATedPawn*                               TriggerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMineActor_ReceiveTriggeredBy) == 0x000008, "Wrong alignment on TedMineActor_ReceiveTriggeredBy");
static_assert(sizeof(TedMineActor_ReceiveTriggeredBy) == 0x000008, "Wrong size on TedMineActor_ReceiveTriggeredBy");
static_assert(offsetof(TedMineActor_ReceiveTriggeredBy, TriggerPawn) == 0x000000, "Member 'TedMineActor_ReceiveTriggeredBy::TriggerPawn' has a wrong offset!");

// Function Tempest.TedMineActor.TriggerMine
// 0x0008 (0x0008 - 0x0000)
struct TedMineActor_TriggerMine final
{
public:
	class ATedPawn*                               TriggerPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMineActor_TriggerMine) == 0x000008, "Wrong alignment on TedMineActor_TriggerMine");
static_assert(sizeof(TedMineActor_TriggerMine) == 0x000008, "Wrong size on TedMineActor_TriggerMine");
static_assert(offsetof(TedMineActor_TriggerMine, TriggerPawn) == 0x000000, "Member 'TedMineActor_TriggerMine::TriggerPawn' has a wrong offset!");

// Function Tempest.TedMineActor.CanTrigger
// 0x0010 (0x0010 - 0x0000)
struct TedMineActor_CanTrigger final
{
public:
	const class ATedPawn*                         Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedMineActor_CanTrigger) == 0x000008, "Wrong alignment on TedMineActor_CanTrigger");
static_assert(sizeof(TedMineActor_CanTrigger) == 0x000010, "Wrong size on TedMineActor_CanTrigger");
static_assert(offsetof(TedMineActor_CanTrigger, Pawn) == 0x000000, "Member 'TedMineActor_CanTrigger::Pawn' has a wrong offset!");
static_assert(offsetof(TedMineActor_CanTrigger, ReturnValue) == 0x000008, "Member 'TedMineActor_CanTrigger::ReturnValue' has a wrong offset!");

// Function Tempest.TedMinimapMarkerConfig.GetMinimapMarkerData
// 0x00E0 (0x00E0 - 0x0000)
struct TedMinimapMarkerConfig_GetMinimapMarkerData final
{
public:
	struct FMinimapMarkerData                     ReturnValue;                                       // 0x0000(0x00E0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapMarkerConfig_GetMinimapMarkerData) == 0x000010, "Wrong alignment on TedMinimapMarkerConfig_GetMinimapMarkerData");
static_assert(sizeof(TedMinimapMarkerConfig_GetMinimapMarkerData) == 0x0000E0, "Wrong size on TedMinimapMarkerConfig_GetMinimapMarkerData");
static_assert(offsetof(TedMinimapMarkerConfig_GetMinimapMarkerData, ReturnValue) == 0x000000, "Member 'TedMinimapMarkerConfig_GetMinimapMarkerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveMinimapMarkerConfig.GetListBrush
// 0x00D0 (0x00D0 - 0x0000)
struct TedObjectiveMinimapMarkerConfig_GetListBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveMinimapMarkerConfig_GetListBrush) == 0x000010, "Wrong alignment on TedObjectiveMinimapMarkerConfig_GetListBrush");
static_assert(sizeof(TedObjectiveMinimapMarkerConfig_GetListBrush) == 0x0000D0, "Wrong size on TedObjectiveMinimapMarkerConfig_GetListBrush");
static_assert(offsetof(TedObjectiveMinimapMarkerConfig_GetListBrush, ReturnValue) == 0x000000, "Member 'TedObjectiveMinimapMarkerConfig_GetListBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedMinimapWidget.OnReplicatePlayerState
// 0x0008 (0x0008 - 0x0000)
struct TedMinimapWidget_OnReplicatePlayerState final
{
public:
	class ATedPlayerController*                   InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_OnReplicatePlayerState) == 0x000008, "Wrong alignment on TedMinimapWidget_OnReplicatePlayerState");
static_assert(sizeof(TedMinimapWidget_OnReplicatePlayerState) == 0x000008, "Wrong size on TedMinimapWidget_OnReplicatePlayerState");
static_assert(offsetof(TedMinimapWidget_OnReplicatePlayerState, InPlayerController) == 0x000000, "Member 'TedMinimapWidget_OnReplicatePlayerState::InPlayerController' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawFogOfWar
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawFogOfWar final
{
public:
	bool                                          bInDrawFogOfWar;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawFogOfWar) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawFogOfWar");
static_assert(sizeof(TedMinimapWidget_SetDrawFogOfWar) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawFogOfWar");
static_assert(offsetof(TedMinimapWidget_SetDrawFogOfWar, bInDrawFogOfWar) == 0x000000, "Member 'TedMinimapWidget_SetDrawFogOfWar::bInDrawFogOfWar' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawFrustum
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawFrustum final
{
public:
	bool                                          bInDrawFrustum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawFrustum) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawFrustum");
static_assert(sizeof(TedMinimapWidget_SetDrawFrustum) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawFrustum");
static_assert(offsetof(TedMinimapWidget_SetDrawFrustum, bInDrawFrustum) == 0x000000, "Member 'TedMinimapWidget_SetDrawFrustum::bInDrawFrustum' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawMapMarkers
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawMapMarkers final
{
public:
	bool                                          bInDrawMapMarkers;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawMapMarkers) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawMapMarkers");
static_assert(sizeof(TedMinimapWidget_SetDrawMapMarkers) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawMapMarkers");
static_assert(offsetof(TedMinimapWidget_SetDrawMapMarkers, bInDrawMapMarkers) == 0x000000, "Member 'TedMinimapWidget_SetDrawMapMarkers::bInDrawMapMarkers' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawResources
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawResources final
{
public:
	bool                                          bInDrawFrustum;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawResources) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawResources");
static_assert(sizeof(TedMinimapWidget_SetDrawResources) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawResources");
static_assert(offsetof(TedMinimapWidget_SetDrawResources, bInDrawFrustum) == 0x000000, "Member 'TedMinimapWidget_SetDrawResources::bInDrawFrustum' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawStructures
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawStructures final
{
public:
	bool                                          bInDrawStructures;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawStructures) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawStructures");
static_assert(sizeof(TedMinimapWidget_SetDrawStructures) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawStructures");
static_assert(offsetof(TedMinimapWidget_SetDrawStructures, bInDrawStructures) == 0x000000, "Member 'TedMinimapWidget_SetDrawStructures::bInDrawStructures' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawTerrain
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawTerrain final
{
public:
	bool                                          bInDrawTerrain;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawTerrain) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawTerrain");
static_assert(sizeof(TedMinimapWidget_SetDrawTerrain) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawTerrain");
static_assert(offsetof(TedMinimapWidget_SetDrawTerrain, bInDrawTerrain) == 0x000000, "Member 'TedMinimapWidget_SetDrawTerrain::bInDrawTerrain' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetDrawUnits
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_SetDrawUnits final
{
public:
	bool                                          bInDrawUnits;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetDrawUnits) == 0x000001, "Wrong alignment on TedMinimapWidget_SetDrawUnits");
static_assert(sizeof(TedMinimapWidget_SetDrawUnits) == 0x000001, "Wrong size on TedMinimapWidget_SetDrawUnits");
static_assert(offsetof(TedMinimapWidget_SetDrawUnits, bInDrawUnits) == 0x000000, "Member 'TedMinimapWidget_SetDrawUnits::bInDrawUnits' has a wrong offset!");

// Function Tempest.TedMinimapWidget.SetMiniMapStateFlag
// 0x0002 (0x0002 - 0x0000)
struct TedMinimapWidget_SetMiniMapStateFlag final
{
public:
	EMinimapStateFlag                             InFlag;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInBool;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_SetMiniMapStateFlag) == 0x000001, "Wrong alignment on TedMinimapWidget_SetMiniMapStateFlag");
static_assert(sizeof(TedMinimapWidget_SetMiniMapStateFlag) == 0x000002, "Wrong size on TedMinimapWidget_SetMiniMapStateFlag");
static_assert(offsetof(TedMinimapWidget_SetMiniMapStateFlag, InFlag) == 0x000000, "Member 'TedMinimapWidget_SetMiniMapStateFlag::InFlag' has a wrong offset!");
static_assert(offsetof(TedMinimapWidget_SetMiniMapStateFlag, bInBool) == 0x000001, "Member 'TedMinimapWidget_SetMiniMapStateFlag::bInBool' has a wrong offset!");

// Function Tempest.TedMinimapWidget.GetFactionLogoMovie
// 0x0008 (0x0008 - 0x0000)
struct TedMinimapWidget_GetFactionLogoMovie final
{
public:
	const class UFileMediaSource*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_GetFactionLogoMovie) == 0x000008, "Wrong alignment on TedMinimapWidget_GetFactionLogoMovie");
static_assert(sizeof(TedMinimapWidget_GetFactionLogoMovie) == 0x000008, "Wrong size on TedMinimapWidget_GetFactionLogoMovie");
static_assert(offsetof(TedMinimapWidget_GetFactionLogoMovie, ReturnValue) == 0x000000, "Member 'TedMinimapWidget_GetFactionLogoMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedMinimapWidget.GetMinimapSize
// 0x0010 (0x0010 - 0x0000)
struct TedMinimapWidget_GetMinimapSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_GetMinimapSize) == 0x000008, "Wrong alignment on TedMinimapWidget_GetMinimapSize");
static_assert(sizeof(TedMinimapWidget_GetMinimapSize) == 0x000010, "Wrong size on TedMinimapWidget_GetMinimapSize");
static_assert(offsetof(TedMinimapWidget_GetMinimapSize, ReturnValue) == 0x000000, "Member 'TedMinimapWidget_GetMinimapSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedMinimapWidget.HasMiniMapStateFlag
// 0x0002 (0x0002 - 0x0000)
struct TedMinimapWidget_HasMiniMapStateFlag final
{
public:
	EMinimapStateFlag                             InFlag;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_HasMiniMapStateFlag) == 0x000001, "Wrong alignment on TedMinimapWidget_HasMiniMapStateFlag");
static_assert(sizeof(TedMinimapWidget_HasMiniMapStateFlag) == 0x000002, "Wrong size on TedMinimapWidget_HasMiniMapStateFlag");
static_assert(offsetof(TedMinimapWidget_HasMiniMapStateFlag, InFlag) == 0x000000, "Member 'TedMinimapWidget_HasMiniMapStateFlag::InFlag' has a wrong offset!");
static_assert(offsetof(TedMinimapWidget_HasMiniMapStateFlag, ReturnValue) == 0x000001, "Member 'TedMinimapWidget_HasMiniMapStateFlag::ReturnValue' has a wrong offset!");

// Function Tempest.TedMinimapWidget.OnMinimapStateChanged
// 0x0001 (0x0001 - 0x0000)
struct TedMinimapWidget_OnMinimapStateChanged final
{
public:
	bool                                          bFullMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMinimapWidget_OnMinimapStateChanged) == 0x000001, "Wrong alignment on TedMinimapWidget_OnMinimapStateChanged");
static_assert(sizeof(TedMinimapWidget_OnMinimapStateChanged) == 0x000001, "Wrong size on TedMinimapWidget_OnMinimapStateChanged");
static_assert(offsetof(TedMinimapWidget_OnMinimapStateChanged, bFullMode) == 0x000000, "Member 'TedMinimapWidget_OnMinimapStateChanged::bFullMode' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.SetMovieController
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerDisplay_SetMovieController final
{
public:
	class UTedMoviePlayerController*              InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_SetMovieController) == 0x000008, "Wrong alignment on TedMoviePlayerDisplay_SetMovieController");
static_assert(sizeof(TedMoviePlayerDisplay_SetMovieController) == 0x000008, "Wrong size on TedMoviePlayerDisplay_SetMovieController");
static_assert(offsetof(TedMoviePlayerDisplay_SetMovieController, InController) == 0x000000, "Member 'TedMoviePlayerDisplay_SetMovieController::InController' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.DetermineBrush
// 0x00D0 (0x00D0 - 0x0000)
struct TedMoviePlayerDisplay_DetermineBrush final
{
public:
	struct FSlateBrush                            ReturnValue;                                       // 0x0000(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_DetermineBrush) == 0x000010, "Wrong alignment on TedMoviePlayerDisplay_DetermineBrush");
static_assert(sizeof(TedMoviePlayerDisplay_DetermineBrush) == 0x0000D0, "Wrong size on TedMoviePlayerDisplay_DetermineBrush");
static_assert(offsetof(TedMoviePlayerDisplay_DetermineBrush, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_DetermineBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.GetExpectedVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerDisplay_GetExpectedVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_GetExpectedVisibility) == 0x000001, "Wrong alignment on TedMoviePlayerDisplay_GetExpectedVisibility");
static_assert(sizeof(TedMoviePlayerDisplay_GetExpectedVisibility) == 0x000001, "Wrong size on TedMoviePlayerDisplay_GetExpectedVisibility");
static_assert(offsetof(TedMoviePlayerDisplay_GetExpectedVisibility, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_GetExpectedVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.GetStartedMovie
// 0x0008 (0x0008 - 0x0000)
struct TedMoviePlayerDisplay_GetStartedMovie final
{
public:
	const class UFileMediaSource*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_GetStartedMovie) == 0x000008, "Wrong alignment on TedMoviePlayerDisplay_GetStartedMovie");
static_assert(sizeof(TedMoviePlayerDisplay_GetStartedMovie) == 0x000008, "Wrong size on TedMoviePlayerDisplay_GetStartedMovie");
static_assert(offsetof(TedMoviePlayerDisplay_GetStartedMovie, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_GetStartedMovie::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerDisplay_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_IsPaused) == 0x000001, "Wrong alignment on TedMoviePlayerDisplay_IsPaused");
static_assert(sizeof(TedMoviePlayerDisplay_IsPaused) == 0x000001, "Wrong size on TedMoviePlayerDisplay_IsPaused");
static_assert(offsetof(TedMoviePlayerDisplay_IsPaused, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_IsPaused::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerDisplay_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_IsPlaying) == 0x000001, "Wrong alignment on TedMoviePlayerDisplay_IsPlaying");
static_assert(sizeof(TedMoviePlayerDisplay_IsPlaying) == 0x000001, "Wrong size on TedMoviePlayerDisplay_IsPlaying");
static_assert(offsetof(TedMoviePlayerDisplay_IsPlaying, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_IsPlaying::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.IsPlayingIntro
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerDisplay_IsPlayingIntro final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_IsPlayingIntro) == 0x000001, "Wrong alignment on TedMoviePlayerDisplay_IsPlayingIntro");
static_assert(sizeof(TedMoviePlayerDisplay_IsPlayingIntro) == 0x000001, "Wrong size on TedMoviePlayerDisplay_IsPlayingIntro");
static_assert(offsetof(TedMoviePlayerDisplay_IsPlayingIntro, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_IsPlayingIntro::ReturnValue' has a wrong offset!");

// Function Tempest.TedMoviePlayerDisplay.IsStarted
// 0x0001 (0x0001 - 0x0000)
struct TedMoviePlayerDisplay_IsStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMoviePlayerDisplay_IsStarted) == 0x000001, "Wrong alignment on TedMoviePlayerDisplay_IsStarted");
static_assert(sizeof(TedMoviePlayerDisplay_IsStarted) == 0x000001, "Wrong size on TedMoviePlayerDisplay_IsStarted");
static_assert(offsetof(TedMoviePlayerDisplay_IsStarted, ReturnValue) == 0x000000, "Member 'TedMoviePlayerDisplay_IsStarted::ReturnValue' has a wrong offset!");

// Function Tempest.TedMissionDialogueWidget.OnIntroFinished
// 0x0010 (0x0010 - 0x0000)
struct TedMissionDialogueWidget_OnIntroFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionDialogueWidget_OnIntroFinished) == 0x000008, "Wrong alignment on TedMissionDialogueWidget_OnIntroFinished");
static_assert(sizeof(TedMissionDialogueWidget_OnIntroFinished) == 0x000010, "Wrong size on TedMissionDialogueWidget_OnIntroFinished");
static_assert(offsetof(TedMissionDialogueWidget_OnIntroFinished, InWidget) == 0x000000, "Member 'TedMissionDialogueWidget_OnIntroFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedMissionDialogueWidget_OnIntroFinished, InSource) == 0x000008, "Member 'TedMissionDialogueWidget_OnIntroFinished::InSource' has a wrong offset!");

// Function Tempest.TedMissionDialogueWidget.OnOutroFinished
// 0x0010 (0x0010 - 0x0000)
struct TedMissionDialogueWidget_OnOutroFinished final
{
public:
	class UTedMoviePlayerWidgetV2*                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UFileMediaSource*                 InSource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionDialogueWidget_OnOutroFinished) == 0x000008, "Wrong alignment on TedMissionDialogueWidget_OnOutroFinished");
static_assert(sizeof(TedMissionDialogueWidget_OnOutroFinished) == 0x000010, "Wrong size on TedMissionDialogueWidget_OnOutroFinished");
static_assert(offsetof(TedMissionDialogueWidget_OnOutroFinished, InWidget) == 0x000000, "Member 'TedMissionDialogueWidget_OnOutroFinished::InWidget' has a wrong offset!");
static_assert(offsetof(TedMissionDialogueWidget_OnOutroFinished, InSource) == 0x000008, "Member 'TedMissionDialogueWidget_OnOutroFinished::InSource' has a wrong offset!");

// Function Tempest.TedMissionSelect_MapInfo.GetObjectivesData
// 0x0010 (0x0010 - 0x0000)
struct TedMissionSelect_MapInfo_GetObjectivesData final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutCompleteObjectives;                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTotalObjectives;                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionSelect_MapInfo_GetObjectivesData) == 0x000008, "Wrong alignment on TedMissionSelect_MapInfo_GetObjectivesData");
static_assert(sizeof(TedMissionSelect_MapInfo_GetObjectivesData) == 0x000010, "Wrong size on TedMissionSelect_MapInfo_GetObjectivesData");
static_assert(offsetof(TedMissionSelect_MapInfo_GetObjectivesData, InMapInfo) == 0x000000, "Member 'TedMissionSelect_MapInfo_GetObjectivesData::InMapInfo' has a wrong offset!");
static_assert(offsetof(TedMissionSelect_MapInfo_GetObjectivesData, OutCompleteObjectives) == 0x000008, "Member 'TedMissionSelect_MapInfo_GetObjectivesData::OutCompleteObjectives' has a wrong offset!");
static_assert(offsetof(TedMissionSelect_MapInfo_GetObjectivesData, OutTotalObjectives) == 0x00000C, "Member 'TedMissionSelect_MapInfo_GetObjectivesData::OutTotalObjectives' has a wrong offset!");

// Function Tempest.TedMissionSelect_MapInfo.LoadObjectivesData
// 0x0008 (0x0008 - 0x0000)
struct TedMissionSelect_MapInfo_LoadObjectivesData final
{
public:
	class UTedMapInfo*                            InMapInfo;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedMissionSelect_MapInfo_LoadObjectivesData) == 0x000008, "Wrong alignment on TedMissionSelect_MapInfo_LoadObjectivesData");
static_assert(sizeof(TedMissionSelect_MapInfo_LoadObjectivesData) == 0x000008, "Wrong size on TedMissionSelect_MapInfo_LoadObjectivesData");
static_assert(offsetof(TedMissionSelect_MapInfo_LoadObjectivesData, InMapInfo) == 0x000000, "Member 'TedMissionSelect_MapInfo_LoadObjectivesData::InMapInfo' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.OnActivateTabSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedScoreMenuScreen_OnActivateTabSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreMenuScreen_OnActivateTabSlotState) == 0x000008, "Wrong alignment on TedScoreMenuScreen_OnActivateTabSlotState");
static_assert(sizeof(TedScoreMenuScreen_OnActivateTabSlotState) == 0x000018, "Wrong size on TedScoreMenuScreen_OnActivateTabSlotState");
static_assert(offsetof(TedScoreMenuScreen_OnActivateTabSlotState, InContentPanel) == 0x000000, "Member 'TedScoreMenuScreen_OnActivateTabSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreen_OnActivateTabSlotState, InContentSlot) == 0x000008, "Member 'TedScoreMenuScreen_OnActivateTabSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreen_OnActivateTabSlotState, InState) == 0x000010, "Member 'TedScoreMenuScreen_OnActivateTabSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreen_OnActivateTabSlotState, bInActivated) == 0x000011, "Member 'TedScoreMenuScreen_OnActivateTabSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.OnTriggerButtonSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedScoreMenuScreen_OnTriggerButtonSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreMenuScreen_OnTriggerButtonSlotAction) == 0x000008, "Wrong alignment on TedScoreMenuScreen_OnTriggerButtonSlotAction");
static_assert(sizeof(TedScoreMenuScreen_OnTriggerButtonSlotAction) == 0x000018, "Wrong size on TedScoreMenuScreen_OnTriggerButtonSlotAction");
static_assert(offsetof(TedScoreMenuScreen_OnTriggerButtonSlotAction, InContentPanel) == 0x000000, "Member 'TedScoreMenuScreen_OnTriggerButtonSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreen_OnTriggerButtonSlotAction, InContentSlot) == 0x000008, "Member 'TedScoreMenuScreen_OnTriggerButtonSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreen_OnTriggerButtonSlotAction, InAction) == 0x000010, "Member 'TedScoreMenuScreen_OnTriggerButtonSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetCurrentGameDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TedScoreMenuScreen_GetCurrentGameDifficulty final
{
public:
	ETedGameDifficulty                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetCurrentGameDifficulty) == 0x000001, "Wrong alignment on TedScoreMenuScreen_GetCurrentGameDifficulty");
static_assert(sizeof(TedScoreMenuScreen_GetCurrentGameDifficulty) == 0x000001, "Wrong size on TedScoreMenuScreen_GetCurrentGameDifficulty");
static_assert(offsetof(TedScoreMenuScreen_GetCurrentGameDifficulty, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetCurrentGameDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetCurrentMap
// 0x0008 (0x0008 - 0x0000)
struct TedScoreMenuScreen_GetCurrentMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetCurrentMap) == 0x000008, "Wrong alignment on TedScoreMenuScreen_GetCurrentMap");
static_assert(sizeof(TedScoreMenuScreen_GetCurrentMap) == 0x000008, "Wrong size on TedScoreMenuScreen_GetCurrentMap");
static_assert(offsetof(TedScoreMenuScreen_GetCurrentMap, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetCurrentMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetCurrentTheme
// 0x0001 (0x0001 - 0x0000)
struct TedScoreMenuScreen_GetCurrentTheme final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetCurrentTheme) == 0x000001, "Wrong alignment on TedScoreMenuScreen_GetCurrentTheme");
static_assert(sizeof(TedScoreMenuScreen_GetCurrentTheme) == 0x000001, "Wrong size on TedScoreMenuScreen_GetCurrentTheme");
static_assert(offsetof(TedScoreMenuScreen_GetCurrentTheme, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetCurrentTheme::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetDifficultyText
// 0x0010 (0x0010 - 0x0000)
struct TedScoreMenuScreen_GetDifficultyText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetDifficultyText) == 0x000008, "Wrong alignment on TedScoreMenuScreen_GetDifficultyText");
static_assert(sizeof(TedScoreMenuScreen_GetDifficultyText) == 0x000010, "Wrong size on TedScoreMenuScreen_GetDifficultyText");
static_assert(offsetof(TedScoreMenuScreen_GetDifficultyText, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetDifficultyText::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetMapNameText
// 0x0010 (0x0010 - 0x0000)
struct TedScoreMenuScreen_GetMapNameText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetMapNameText) == 0x000008, "Wrong alignment on TedScoreMenuScreen_GetMapNameText");
static_assert(sizeof(TedScoreMenuScreen_GetMapNameText) == 0x000010, "Wrong size on TedScoreMenuScreen_GetMapNameText");
static_assert(offsetof(TedScoreMenuScreen_GetMapNameText, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetMapNameText::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetMatchDuration
// 0x0008 (0x0008 - 0x0000)
struct TedScoreMenuScreen_GetMatchDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetMatchDuration) == 0x000008, "Wrong alignment on TedScoreMenuScreen_GetMatchDuration");
static_assert(sizeof(TedScoreMenuScreen_GetMatchDuration) == 0x000008, "Wrong size on TedScoreMenuScreen_GetMatchDuration");
static_assert(offsetof(TedScoreMenuScreen_GetMatchDuration, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetMatchDuration::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.GetMatchDurationText
// 0x0010 (0x0010 - 0x0000)
struct TedScoreMenuScreen_GetMatchDurationText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_GetMatchDurationText) == 0x000008, "Wrong alignment on TedScoreMenuScreen_GetMatchDurationText");
static_assert(sizeof(TedScoreMenuScreen_GetMatchDurationText) == 0x000010, "Wrong size on TedScoreMenuScreen_GetMatchDurationText");
static_assert(offsetof(TedScoreMenuScreen_GetMatchDurationText, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_GetMatchDurationText::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreen.IsVictoryScreen
// 0x0001 (0x0001 - 0x0000)
struct TedScoreMenuScreen_IsVictoryScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreen_IsVictoryScreen) == 0x000001, "Wrong alignment on TedScoreMenuScreen_IsVictoryScreen");
static_assert(sizeof(TedScoreMenuScreen_IsVictoryScreen) == 0x000001, "Wrong size on TedScoreMenuScreen_IsVictoryScreen");
static_assert(offsetof(TedScoreMenuScreen_IsVictoryScreen, ReturnValue) == 0x000000, "Member 'TedScoreMenuScreen_IsVictoryScreen::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsPanel.CacheAndDisplayBanners
// 0x0028 (0x0028 - 0x0000)
struct TedNewsPanel_CacheAndDisplayBanners final
{
public:
	struct FProsBannerConfig                      BannerConfig;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FProsBanner>                    Banners;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsPanel_CacheAndDisplayBanners) == 0x000008, "Wrong alignment on TedNewsPanel_CacheAndDisplayBanners");
static_assert(sizeof(TedNewsPanel_CacheAndDisplayBanners) == 0x000028, "Wrong size on TedNewsPanel_CacheAndDisplayBanners");
static_assert(offsetof(TedNewsPanel_CacheAndDisplayBanners, BannerConfig) == 0x000000, "Member 'TedNewsPanel_CacheAndDisplayBanners::BannerConfig' has a wrong offset!");
static_assert(offsetof(TedNewsPanel_CacheAndDisplayBanners, Banners) == 0x000018, "Member 'TedNewsPanel_CacheAndDisplayBanners::Banners' has a wrong offset!");

// Function Tempest.TedNewsPanel.ChangeDisplay
// 0x0168 (0x0168 - 0x0000)
struct TedNewsPanel_ChangeDisplay final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsPanel_ChangeDisplay) == 0x000008, "Wrong alignment on TedNewsPanel_ChangeDisplay");
static_assert(sizeof(TedNewsPanel_ChangeDisplay) == 0x000168, "Wrong size on TedNewsPanel_ChangeDisplay");
static_assert(offsetof(TedNewsPanel_ChangeDisplay, MyGeometry) == 0x000000, "Member 'TedNewsPanel_ChangeDisplay::MyGeometry' has a wrong offset!");
static_assert(offsetof(TedNewsPanel_ChangeDisplay, MouseEvent) == 0x000038, "Member 'TedNewsPanel_ChangeDisplay::MouseEvent' has a wrong offset!");
static_assert(offsetof(TedNewsPanel_ChangeDisplay, ReturnValue) == 0x0000B0, "Member 'TedNewsPanel_ChangeDisplay::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsPanel.GetAllContent
// 0x0010 (0x0010 - 0x0000)
struct TedNewsPanel_GetAllContent final
{
public:
	TArray<struct FTedNewsContent>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsPanel_GetAllContent) == 0x000008, "Wrong alignment on TedNewsPanel_GetAllContent");
static_assert(sizeof(TedNewsPanel_GetAllContent) == 0x000010, "Wrong size on TedNewsPanel_GetAllContent");
static_assert(offsetof(TedNewsPanel_GetAllContent, ReturnValue) == 0x000000, "Member 'TedNewsPanel_GetAllContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsPanel.GetContent
// 0x00D8 (0x00D8 - 0x0000)
struct TedNewsPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedNewsContent                        OutContent;                                        // 0x0008(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedNewsPanel_GetContent) == 0x000008, "Wrong alignment on TedNewsPanel_GetContent");
static_assert(sizeof(TedNewsPanel_GetContent) == 0x0000D8, "Wrong size on TedNewsPanel_GetContent");
static_assert(offsetof(TedNewsPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedNewsPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedNewsPanel_GetContent, OutContent) == 0x000008, "Member 'TedNewsPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedNewsPanel_GetContent, ReturnValue) == 0x0000D0, "Member 'TedNewsPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsSlot.AddExtendedState
// 0x0020 (0x0020 - 0x0000)
struct TedNewsSlot_AddExtendedState final
{
public:
	struct FTedNewsTransitionConfig               InConfig;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InChange;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedNewsSlot_AddExtendedState) == 0x000008, "Wrong alignment on TedNewsSlot_AddExtendedState");
static_assert(sizeof(TedNewsSlot_AddExtendedState) == 0x000020, "Wrong size on TedNewsSlot_AddExtendedState");
static_assert(offsetof(TedNewsSlot_AddExtendedState, InConfig) == 0x000000, "Member 'TedNewsSlot_AddExtendedState::InConfig' has a wrong offset!");
static_assert(offsetof(TedNewsSlot_AddExtendedState, InChange) == 0x000018, "Member 'TedNewsSlot_AddExtendedState::InChange' has a wrong offset!");

// Function Tempest.TedNewsSlot.SetPicture
// 0x0008 (0x0008 - 0x0000)
struct TedNewsSlot_SetPicture final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsSlot_SetPicture) == 0x000008, "Wrong alignment on TedNewsSlot_SetPicture");
static_assert(sizeof(TedNewsSlot_SetPicture) == 0x000008, "Wrong size on TedNewsSlot_SetPicture");
static_assert(offsetof(TedNewsSlot_SetPicture, Texture) == 0x000000, "Member 'TedNewsSlot_SetPicture::Texture' has a wrong offset!");

// Function Tempest.TedNewsSlot.GetContent
// 0x00D0 (0x00D0 - 0x0000)
struct TedNewsSlot_GetContent final
{
public:
	struct FTedNewsContent                        OutContent;                                        // 0x0000(0x00C8)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedNewsSlot_GetContent) == 0x000008, "Wrong alignment on TedNewsSlot_GetContent");
static_assert(sizeof(TedNewsSlot_GetContent) == 0x0000D0, "Wrong size on TedNewsSlot_GetContent");
static_assert(offsetof(TedNewsSlot_GetContent, OutContent) == 0x000000, "Member 'TedNewsSlot_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedNewsSlot_GetContent, ReturnValue) == 0x0000C8, "Member 'TedNewsSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsSlot.GetParentNewsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedNewsSlot_GetParentNewsPanel final
{
public:
	class UTedNewsPanel*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsSlot_GetParentNewsPanel) == 0x000008, "Wrong alignment on TedNewsSlot_GetParentNewsPanel");
static_assert(sizeof(TedNewsSlot_GetParentNewsPanel) == 0x000008, "Wrong size on TedNewsSlot_GetParentNewsPanel");
static_assert(offsetof(TedNewsSlot_GetParentNewsPanel, ReturnValue) == 0x000000, "Member 'TedNewsSlot_GetParentNewsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedNewsSlot.IsExtendTransitionFinished
// 0x0001 (0x0001 - 0x0000)
struct TedNewsSlot_IsExtendTransitionFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedNewsSlot_IsExtendTransitionFinished) == 0x000001, "Wrong alignment on TedNewsSlot_IsExtendTransitionFinished");
static_assert(sizeof(TedNewsSlot_IsExtendTransitionFinished) == 0x000001, "Wrong size on TedNewsSlot_IsExtendTransitionFinished");
static_assert(offsetof(TedNewsSlot_IsExtendTransitionFinished, ReturnValue) == 0x000000, "Member 'TedNewsSlot_IsExtendTransitionFinished::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveObj.CanBeDisplayedOnUI
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveObj_CanBeDisplayedOnUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveObj_CanBeDisplayedOnUI) == 0x000001, "Wrong alignment on TedObjectiveObj_CanBeDisplayedOnUI");
static_assert(sizeof(TedObjectiveObj_CanBeDisplayedOnUI) == 0x000001, "Wrong size on TedObjectiveObj_CanBeDisplayedOnUI");
static_assert(offsetof(TedObjectiveObj_CanBeDisplayedOnUI, ReturnValue) == 0x000000, "Member 'TedObjectiveObj_CanBeDisplayedOnUI::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveObj.GetCauseOfFailureObjectiveTitleOverride
// 0x0028 (0x0028 - 0x0000)
struct TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride final
{
public:
	TSoftObjectPtr<class UTedObjectiveObj>        ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride) == 0x000008, "Wrong alignment on TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride");
static_assert(sizeof(TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride) == 0x000028, "Wrong size on TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride");
static_assert(offsetof(TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride, ReturnValue) == 0x000000, "Member 'TedObjectiveObj_GetCauseOfFailureObjectiveTitleOverride::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveObj.GetDescriptiveCauseOfFailure
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveObj_GetDescriptiveCauseOfFailure final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveObj_GetDescriptiveCauseOfFailure) == 0x000008, "Wrong alignment on TedObjectiveObj_GetDescriptiveCauseOfFailure");
static_assert(sizeof(TedObjectiveObj_GetDescriptiveCauseOfFailure) == 0x000010, "Wrong size on TedObjectiveObj_GetDescriptiveCauseOfFailure");
static_assert(offsetof(TedObjectiveObj_GetDescriptiveCauseOfFailure, ReturnValue) == 0x000000, "Member 'TedObjectiveObj_GetDescriptiveCauseOfFailure::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveObj.GetRequisitionPoints
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveObj_GetRequisitionPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveObj_GetRequisitionPoints) == 0x000004, "Wrong alignment on TedObjectiveObj_GetRequisitionPoints");
static_assert(sizeof(TedObjectiveObj_GetRequisitionPoints) == 0x000004, "Wrong size on TedObjectiveObj_GetRequisitionPoints");
static_assert(offsetof(TedObjectiveObj_GetRequisitionPoints, ReturnValue) == 0x000000, "Member 'TedObjectiveObj_GetRequisitionPoints::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveObj.TryGetDisplayTitle
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveObj_TryGetDisplayTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveObj_TryGetDisplayTitle) == 0x000008, "Wrong alignment on TedObjectiveObj_TryGetDisplayTitle");
static_assert(sizeof(TedObjectiveObj_TryGetDisplayTitle) == 0x000010, "Wrong size on TedObjectiveObj_TryGetDisplayTitle");
static_assert(offsetof(TedObjectiveObj_TryGetDisplayTitle, ReturnValue) == 0x000000, "Member 'TedObjectiveObj_TryGetDisplayTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_HasPrerequisites.OnPlayerDataOwnedTagsChange
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange final
{
public:
	class UTedPlayerData*                         InPlayerData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange) == 0x000008, "Wrong alignment on TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange");
static_assert(sizeof(TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange) == 0x000008, "Wrong size on TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange");
static_assert(offsetof(TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange, InPlayerData) == 0x000000, "Member 'TedObjectiveCondition_HasPrerequisites_OnPlayerDataOwnedTagsChange::InPlayerData' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Objective.OnVolumeBeginOverlap_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler");
static_assert(sizeof(TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler) == 0x000010, "Wrong size on TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler");
static_assert(offsetof(TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler, OverlappedActor) == 0x000000, "Member 'TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler, OtherActor) == 0x000008, "Member 'TedObjectiveCondition_Objective_OnVolumeBeginOverlap_Handler::OtherActor' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Pickup.OnPickup
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Pickup_OnPickup final
{
public:
	class ATedUnitBase*                           InPickedUpBy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPickupActor*                        InPickup;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Pickup_OnPickup) == 0x000008, "Wrong alignment on TedObjectiveCondition_Pickup_OnPickup");
static_assert(sizeof(TedObjectiveCondition_Pickup_OnPickup) == 0x000010, "Wrong size on TedObjectiveCondition_Pickup_OnPickup");
static_assert(offsetof(TedObjectiveCondition_Pickup_OnPickup, InPickedUpBy) == 0x000000, "Member 'TedObjectiveCondition_Pickup_OnPickup::InPickedUpBy' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Pickup_OnPickup, InPickup) == 0x000008, "Member 'TedObjectiveCondition_Pickup_OnPickup::InPickup' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Time.PassRuntimeData
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveCondition_Time_PassRuntimeData final
{
public:
	float                                         InExpectedTime;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Time_PassRuntimeData) == 0x000004, "Wrong alignment on TedObjectiveCondition_Time_PassRuntimeData");
static_assert(sizeof(TedObjectiveCondition_Time_PassRuntimeData) == 0x000004, "Wrong size on TedObjectiveCondition_Time_PassRuntimeData");
static_assert(offsetof(TedObjectiveCondition_Time_PassRuntimeData, InExpectedTime) == 0x000000, "Member 'TedObjectiveCondition_Time_PassRuntimeData::InExpectedTime' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Volume.OnVolumeBeginOverlap_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler");
static_assert(sizeof(TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler) == 0x000010, "Wrong size on TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler");
static_assert(offsetof(TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler, OverlappedActor) == 0x000000, "Member 'TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler, OtherActor) == 0x000008, "Member 'TedObjectiveCondition_Volume_OnVolumeBeginOverlap_Handler::OtherActor' has a wrong offset!");

// Function Tempest.TedObjectiveCondition_Volume.OnVolumeEndOverlap_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler) == 0x000008, "Wrong alignment on TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler");
static_assert(sizeof(TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler) == 0x000010, "Wrong size on TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler");
static_assert(offsetof(TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler, OverlappedActor) == 0x000000, "Member 'TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler::OverlappedActor' has a wrong offset!");
static_assert(offsetof(TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler, OtherActor) == 0x000008, "Member 'TedObjectiveCondition_Volume_OnVolumeEndOverlap_Handler::OtherActor' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.ActivateObjective
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveFunctionLibrary_ActivateObjective final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 OptionalParent;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_ActivateObjective) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_ActivateObjective");
static_assert(sizeof(TedObjectiveFunctionLibrary_ActivateObjective) == 0x000018, "Wrong size on TedObjectiveFunctionLibrary_ActivateObjective");
static_assert(offsetof(TedObjectiveFunctionLibrary_ActivateObjective, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_ActivateObjective::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_ActivateObjective, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_ActivateObjective::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_ActivateObjective, OptionalParent) == 0x000010, "Member 'TedObjectiveFunctionLibrary_ActivateObjective::OptionalParent' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.BranchObjectiveState
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveFunctionLibrary_BranchObjectiveState final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveState                               State;                                             // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveFunctionLibrary_BranchObjectiveState) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_BranchObjectiveState");
static_assert(sizeof(TedObjectiveFunctionLibrary_BranchObjectiveState) == 0x000018, "Wrong size on TedObjectiveFunctionLibrary_BranchObjectiveState");
static_assert(offsetof(TedObjectiveFunctionLibrary_BranchObjectiveState, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_BranchObjectiveState::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_BranchObjectiveState, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_BranchObjectiveState::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_BranchObjectiveState, State) == 0x000010, "Member 'TedObjectiveFunctionLibrary_BranchObjectiveState::State' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.DeactivateObjective
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveFunctionLibrary_DeactivateObjective final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_DeactivateObjective) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_DeactivateObjective");
static_assert(sizeof(TedObjectiveFunctionLibrary_DeactivateObjective) == 0x000010, "Wrong size on TedObjectiveFunctionLibrary_DeactivateObjective");
static_assert(offsetof(TedObjectiveFunctionLibrary_DeactivateObjective, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_DeactivateObjective::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_DeactivateObjective, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_DeactivateObjective::Objective' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.FailAllActiveObjectives
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveFunctionLibrary_FailAllActiveObjectives final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_FailAllActiveObjectives) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_FailAllActiveObjectives");
static_assert(sizeof(TedObjectiveFunctionLibrary_FailAllActiveObjectives) == 0x000008, "Wrong size on TedObjectiveFunctionLibrary_FailAllActiveObjectives");
static_assert(offsetof(TedObjectiveFunctionLibrary_FailAllActiveObjectives, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_FailAllActiveObjectives::InWorldContext' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.FinishObjective
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveFunctionLibrary_FinishObjective final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveResult                              Result;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveFunctionLibrary_FinishObjective) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_FinishObjective");
static_assert(sizeof(TedObjectiveFunctionLibrary_FinishObjective) == 0x000018, "Wrong size on TedObjectiveFunctionLibrary_FinishObjective");
static_assert(offsetof(TedObjectiveFunctionLibrary_FinishObjective, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_FinishObjective::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_FinishObjective, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_FinishObjective::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_FinishObjective, Result) == 0x000010, "Member 'TedObjectiveFunctionLibrary_FinishObjective::Result' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.GetConditionByClass
// 0x0020 (0x0020 - 0x0000)
struct TedObjectiveFunctionLibrary_GetConditionByClass final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedObjectiveConditionBase> Class_0;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedObjectiveConditionBase*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_GetConditionByClass) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_GetConditionByClass");
static_assert(sizeof(TedObjectiveFunctionLibrary_GetConditionByClass) == 0x000020, "Wrong size on TedObjectiveFunctionLibrary_GetConditionByClass");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByClass, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_GetConditionByClass::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByClass, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_GetConditionByClass::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByClass, Class_0) == 0x000010, "Member 'TedObjectiveFunctionLibrary_GetConditionByClass::Class_0' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByClass, ReturnValue) == 0x000018, "Member 'TedObjectiveFunctionLibrary_GetConditionByClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.GetConditionByID
// 0x0020 (0x0020 - 0x0000)
struct TedObjectiveFunctionLibrary_GetConditionByID final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           RuntimeID;                                         // 0x0010(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedObjectiveConditionBase*             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_GetConditionByID) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_GetConditionByID");
static_assert(sizeof(TedObjectiveFunctionLibrary_GetConditionByID) == 0x000020, "Wrong size on TedObjectiveFunctionLibrary_GetConditionByID");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByID, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_GetConditionByID::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByID, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_GetConditionByID::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByID, RuntimeID) == 0x000010, "Member 'TedObjectiveFunctionLibrary_GetConditionByID::RuntimeID' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetConditionByID, ReturnValue) == 0x000018, "Member 'TedObjectiveFunctionLibrary_GetConditionByID::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.GetObjectiveState
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveFunctionLibrary_GetObjectiveState final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveState                               ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveFunctionLibrary_GetObjectiveState) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_GetObjectiveState");
static_assert(sizeof(TedObjectiveFunctionLibrary_GetObjectiveState) == 0x000018, "Wrong size on TedObjectiveFunctionLibrary_GetObjectiveState");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetObjectiveState, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_GetObjectiveState::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetObjectiveState, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_GetObjectiveState::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetObjectiveState, ReturnValue) == 0x000010, "Member 'TedObjectiveFunctionLibrary_GetObjectiveState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.GetRuntimeObjectivesAmountByState
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveDisplayMode                         DisplayMode;                                       // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveState                               State;                                             // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState");
static_assert(sizeof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState) == 0x000010, "Wrong size on TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState, DisplayMode) == 0x000008, "Member 'TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState::DisplayMode' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState, State) == 0x000009, "Member 'TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState::State' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState, ReturnValue) == 0x00000C, "Member 'TedObjectiveFunctionLibrary_GetRuntimeObjectivesAmountByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveFunctionLibrary.IsObjectiveInState
// 0x0018 (0x0018 - 0x0000)
struct TedObjectiveFunctionLibrary_IsObjectiveInState final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedObjectiveObj*                 Objective;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObjectiveState                               State;                                             // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveFunctionLibrary_IsObjectiveInState) == 0x000008, "Wrong alignment on TedObjectiveFunctionLibrary_IsObjectiveInState");
static_assert(sizeof(TedObjectiveFunctionLibrary_IsObjectiveInState) == 0x000018, "Wrong size on TedObjectiveFunctionLibrary_IsObjectiveInState");
static_assert(offsetof(TedObjectiveFunctionLibrary_IsObjectiveInState, InWorldContext) == 0x000000, "Member 'TedObjectiveFunctionLibrary_IsObjectiveInState::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_IsObjectiveInState, Objective) == 0x000008, "Member 'TedObjectiveFunctionLibrary_IsObjectiveInState::Objective' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_IsObjectiveInState, State) == 0x000010, "Member 'TedObjectiveFunctionLibrary_IsObjectiveInState::State' has a wrong offset!");
static_assert(offsetof(TedObjectiveFunctionLibrary_IsObjectiveInState, ReturnValue) == 0x000011, "Member 'TedObjectiveFunctionLibrary_IsObjectiveInState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveManager.GetObjectiveCauseOfFailureData
// 0x0020 (0x0020 - 0x0000)
struct TedObjectiveManager_GetObjectiveCauseOfFailureData final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedObjectiveCauseOfFailureData        ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveManager_GetObjectiveCauseOfFailureData) == 0x000008, "Wrong alignment on TedObjectiveManager_GetObjectiveCauseOfFailureData");
static_assert(sizeof(TedObjectiveManager_GetObjectiveCauseOfFailureData) == 0x000020, "Wrong size on TedObjectiveManager_GetObjectiveCauseOfFailureData");
static_assert(offsetof(TedObjectiveManager_GetObjectiveCauseOfFailureData, InWorldContext) == 0x000000, "Member 'TedObjectiveManager_GetObjectiveCauseOfFailureData::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedObjectiveManager_GetObjectiveCauseOfFailureData, ReturnValue) == 0x000008, "Member 'TedObjectiveManager_GetObjectiveCauseOfFailureData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectivePanel.OnObjectiveSlotAnimEnd
// 0x0010 (0x0010 - 0x0000)
struct TedObjectivePanel_OnObjectiveSlotAnimEnd final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectivePanel_OnObjectiveSlotAnimEnd) == 0x000008, "Wrong alignment on TedObjectivePanel_OnObjectiveSlotAnimEnd");
static_assert(sizeof(TedObjectivePanel_OnObjectiveSlotAnimEnd) == 0x000010, "Wrong size on TedObjectivePanel_OnObjectiveSlotAnimEnd");
static_assert(offsetof(TedObjectivePanel_OnObjectiveSlotAnimEnd, InWidget) == 0x000000, "Member 'TedObjectivePanel_OnObjectiveSlotAnimEnd::InWidget' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_OnObjectiveSlotAnimEnd, InAnimation) == 0x000008, "Member 'TedObjectivePanel_OnObjectiveSlotAnimEnd::InAnimation' has a wrong offset!");

// Function Tempest.TedObjectivePanel.OnObjectiveSlotAnimStart
// 0x0010 (0x0010 - 0x0000)
struct TedObjectivePanel_OnObjectiveSlotAnimStart final
{
public:
	class UTedUserWidget*                         InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InAnimation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectivePanel_OnObjectiveSlotAnimStart) == 0x000008, "Wrong alignment on TedObjectivePanel_OnObjectiveSlotAnimStart");
static_assert(sizeof(TedObjectivePanel_OnObjectiveSlotAnimStart) == 0x000010, "Wrong size on TedObjectivePanel_OnObjectiveSlotAnimStart");
static_assert(offsetof(TedObjectivePanel_OnObjectiveSlotAnimStart, InWidget) == 0x000000, "Member 'TedObjectivePanel_OnObjectiveSlotAnimStart::InWidget' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_OnObjectiveSlotAnimStart, InAnimation) == 0x000008, "Member 'TedObjectivePanel_OnObjectiveSlotAnimStart::InAnimation' has a wrong offset!");

// Function Tempest.TedObjectivePanel.SetContentObjectives
// 0x0010 (0x0010 - 0x0000)
struct TedObjectivePanel_SetContentObjectives final
{
public:
	TArray<class UTedObjectiveObj*>               InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectivePanel_SetContentObjectives) == 0x000008, "Wrong alignment on TedObjectivePanel_SetContentObjectives");
static_assert(sizeof(TedObjectivePanel_SetContentObjectives) == 0x000010, "Wrong size on TedObjectivePanel_SetContentObjectives");
static_assert(offsetof(TedObjectivePanel_SetContentObjectives, InContent) == 0x000000, "Member 'TedObjectivePanel_SetContentObjectives::InContent' has a wrong offset!");

// Function Tempest.TedObjectivePanel.HasChildren
// 0x0008 (0x0008 - 0x0000)
struct TedObjectivePanel_HasChildren final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectivePanel_HasChildren) == 0x000004, "Wrong alignment on TedObjectivePanel_HasChildren");
static_assert(sizeof(TedObjectivePanel_HasChildren) == 0x000008, "Wrong size on TedObjectivePanel_HasChildren");
static_assert(offsetof(TedObjectivePanel_HasChildren, InSlotIndex) == 0x000000, "Member 'TedObjectivePanel_HasChildren::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_HasChildren, ReturnValue) == 0x000004, "Member 'TedObjectivePanel_HasChildren::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectivePanel.HasParentObjective
// 0x0008 (0x0008 - 0x0000)
struct TedObjectivePanel_HasParentObjective final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectivePanel_HasParentObjective) == 0x000004, "Wrong alignment on TedObjectivePanel_HasParentObjective");
static_assert(sizeof(TedObjectivePanel_HasParentObjective) == 0x000008, "Wrong size on TedObjectivePanel_HasParentObjective");
static_assert(offsetof(TedObjectivePanel_HasParentObjective, InSlotIndex) == 0x000000, "Member 'TedObjectivePanel_HasParentObjective::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_HasParentObjective, ReturnValue) == 0x000004, "Member 'TedObjectivePanel_HasParentObjective::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectivePanel.IsCondition
// 0x0008 (0x0008 - 0x0000)
struct TedObjectivePanel_IsCondition final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectivePanel_IsCondition) == 0x000004, "Wrong alignment on TedObjectivePanel_IsCondition");
static_assert(sizeof(TedObjectivePanel_IsCondition) == 0x000008, "Wrong size on TedObjectivePanel_IsCondition");
static_assert(offsetof(TedObjectivePanel_IsCondition, InSlotIndex) == 0x000000, "Member 'TedObjectivePanel_IsCondition::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_IsCondition, ReturnValue) == 0x000004, "Member 'TedObjectivePanel_IsCondition::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectivePanel.IsObjective
// 0x0008 (0x0008 - 0x0000)
struct TedObjectivePanel_IsObjective final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectivePanel_IsObjective) == 0x000004, "Wrong alignment on TedObjectivePanel_IsObjective");
static_assert(sizeof(TedObjectivePanel_IsObjective) == 0x000008, "Wrong size on TedObjectivePanel_IsObjective");
static_assert(offsetof(TedObjectivePanel_IsObjective, InSlotIndex) == 0x000000, "Member 'TedObjectivePanel_IsObjective::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_IsObjective, ReturnValue) == 0x000004, "Member 'TedObjectivePanel_IsObjective::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectivePanel.IsOptional
// 0x0008 (0x0008 - 0x0000)
struct TedObjectivePanel_IsOptional final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectivePanel_IsOptional) == 0x000004, "Wrong alignment on TedObjectivePanel_IsOptional");
static_assert(sizeof(TedObjectivePanel_IsOptional) == 0x000008, "Wrong size on TedObjectivePanel_IsOptional");
static_assert(offsetof(TedObjectivePanel_IsOptional, InSlotIndex) == 0x000000, "Member 'TedObjectivePanel_IsOptional::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedObjectivePanel_IsOptional, ReturnValue) == 0x000004, "Member 'TedObjectivePanel_IsOptional::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_IntegerCounter.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveProgress_IntegerCounter_GetCurrentValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_IntegerCounter_GetCurrentValue) == 0x000004, "Wrong alignment on TedObjectiveProgress_IntegerCounter_GetCurrentValue");
static_assert(sizeof(TedObjectiveProgress_IntegerCounter_GetCurrentValue) == 0x000004, "Wrong size on TedObjectiveProgress_IntegerCounter_GetCurrentValue");
static_assert(offsetof(TedObjectiveProgress_IntegerCounter_GetCurrentValue, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_IntegerCounter_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_IntegerCounter.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveProgress_IntegerCounter_GetMaxValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_IntegerCounter_GetMaxValue) == 0x000004, "Wrong alignment on TedObjectiveProgress_IntegerCounter_GetMaxValue");
static_assert(sizeof(TedObjectiveProgress_IntegerCounter_GetMaxValue) == 0x000004, "Wrong size on TedObjectiveProgress_IntegerCounter_GetMaxValue");
static_assert(offsetof(TedObjectiveProgress_IntegerCounter_GetMaxValue, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_IntegerCounter_GetMaxValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_IntegerCounter.GetPercent
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveProgress_IntegerCounter_GetPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_IntegerCounter_GetPercent) == 0x000004, "Wrong alignment on TedObjectiveProgress_IntegerCounter_GetPercent");
static_assert(sizeof(TedObjectiveProgress_IntegerCounter_GetPercent) == 0x000004, "Wrong size on TedObjectiveProgress_IntegerCounter_GetPercent");
static_assert(offsetof(TedObjectiveProgress_IntegerCounter_GetPercent, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_IntegerCounter_GetPercent::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_TimeCountdown.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveProgress_TimeCountdown_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_TimeCountdown_GetDuration) == 0x000008, "Wrong alignment on TedObjectiveProgress_TimeCountdown_GetDuration");
static_assert(sizeof(TedObjectiveProgress_TimeCountdown_GetDuration) == 0x000008, "Wrong size on TedObjectiveProgress_TimeCountdown_GetDuration");
static_assert(offsetof(TedObjectiveProgress_TimeCountdown_GetDuration, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_TimeCountdown_GetDuration::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_TimeCountdown.GetElapsedPercent
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveProgress_TimeCountdown_GetElapsedPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_TimeCountdown_GetElapsedPercent) == 0x000004, "Wrong alignment on TedObjectiveProgress_TimeCountdown_GetElapsedPercent");
static_assert(sizeof(TedObjectiveProgress_TimeCountdown_GetElapsedPercent) == 0x000004, "Wrong size on TedObjectiveProgress_TimeCountdown_GetElapsedPercent");
static_assert(offsetof(TedObjectiveProgress_TimeCountdown_GetElapsedPercent, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_TimeCountdown_GetElapsedPercent::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_TimeCountdown.GetElapsedTime
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveProgress_TimeCountdown_GetElapsedTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_TimeCountdown_GetElapsedTime) == 0x000008, "Wrong alignment on TedObjectiveProgress_TimeCountdown_GetElapsedTime");
static_assert(sizeof(TedObjectiveProgress_TimeCountdown_GetElapsedTime) == 0x000008, "Wrong size on TedObjectiveProgress_TimeCountdown_GetElapsedTime");
static_assert(offsetof(TedObjectiveProgress_TimeCountdown_GetElapsedTime, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_TimeCountdown_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_TimeCountdown.GetRemainingPercent
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveProgress_TimeCountdown_GetRemainingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_TimeCountdown_GetRemainingPercent) == 0x000004, "Wrong alignment on TedObjectiveProgress_TimeCountdown_GetRemainingPercent");
static_assert(sizeof(TedObjectiveProgress_TimeCountdown_GetRemainingPercent) == 0x000004, "Wrong size on TedObjectiveProgress_TimeCountdown_GetRemainingPercent");
static_assert(offsetof(TedObjectiveProgress_TimeCountdown_GetRemainingPercent, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_TimeCountdown_GetRemainingPercent::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveProgress_TimeCountdown.GetRemainingTime
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveProgress_TimeCountdown_GetRemainingTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveProgress_TimeCountdown_GetRemainingTime) == 0x000008, "Wrong alignment on TedObjectiveProgress_TimeCountdown_GetRemainingTime");
static_assert(sizeof(TedObjectiveProgress_TimeCountdown_GetRemainingTime) == 0x000008, "Wrong size on TedObjectiveProgress_TimeCountdown_GetRemainingTime");
static_assert(offsetof(TedObjectiveProgress_TimeCountdown_GetRemainingTime, ReturnValue) == 0x000000, "Member 'TedObjectiveProgress_TimeCountdown_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.SetTracked
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_SetTracked final
{
public:
	bool                                          bInTracked;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_SetTracked) == 0x000001, "Wrong alignment on TedObjectiveSlot_SetTracked");
static_assert(sizeof(TedObjectiveSlot_SetTracked) == 0x000001, "Wrong size on TedObjectiveSlot_SetTracked");
static_assert(offsetof(TedObjectiveSlot_SetTracked, bInTracked) == 0x000000, "Member 'TedObjectiveSlot_SetTracked::bInTracked' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.CanChangeTracked
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_CanChangeTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_CanChangeTracked) == 0x000001, "Wrong alignment on TedObjectiveSlot_CanChangeTracked");
static_assert(sizeof(TedObjectiveSlot_CanChangeTracked) == 0x000001, "Wrong size on TedObjectiveSlot_CanChangeTracked");
static_assert(offsetof(TedObjectiveSlot_CanChangeTracked, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_CanChangeTracked::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetAppearanceBrush
// 0x00E0 (0x00E0 - 0x0000)
struct TedObjectiveSlot_GetAppearanceBrush final
{
public:
	struct FSlateBrush                            OutBrush;                                          // 0x0000(0x00D0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0xF];                                       // 0x00D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedObjectiveSlot_GetAppearanceBrush) == 0x000010, "Wrong alignment on TedObjectiveSlot_GetAppearanceBrush");
static_assert(sizeof(TedObjectiveSlot_GetAppearanceBrush) == 0x0000E0, "Wrong size on TedObjectiveSlot_GetAppearanceBrush");
static_assert(offsetof(TedObjectiveSlot_GetAppearanceBrush, OutBrush) == 0x000000, "Member 'TedObjectiveSlot_GetAppearanceBrush::OutBrush' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetAppearanceBrush, ReturnValue) == 0x0000D0, "Member 'TedObjectiveSlot_GetAppearanceBrush::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetCachedObjectiveContentData
// 0x0030 (0x0030 - 0x0000)
struct TedObjectiveSlot_GetCachedObjectiveContentData final
{
public:
	class FText                                   OutPrimaryText;                                    // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutSecondaryText;                                  // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EObjectiveState                               OutObjectiveState;                                 // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedObjectiveObj*                 ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetCachedObjectiveContentData) == 0x000008, "Wrong alignment on TedObjectiveSlot_GetCachedObjectiveContentData");
static_assert(sizeof(TedObjectiveSlot_GetCachedObjectiveContentData) == 0x000030, "Wrong size on TedObjectiveSlot_GetCachedObjectiveContentData");
static_assert(offsetof(TedObjectiveSlot_GetCachedObjectiveContentData, OutPrimaryText) == 0x000000, "Member 'TedObjectiveSlot_GetCachedObjectiveContentData::OutPrimaryText' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetCachedObjectiveContentData, OutSecondaryText) == 0x000010, "Member 'TedObjectiveSlot_GetCachedObjectiveContentData::OutSecondaryText' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetCachedObjectiveContentData, OutObjectiveState) == 0x000020, "Member 'TedObjectiveSlot_GetCachedObjectiveContentData::OutObjectiveState' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetCachedObjectiveContentData, ReturnValue) == 0x000028, "Member 'TedObjectiveSlot_GetCachedObjectiveContentData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetDisplayText
// 0x0010 (0x0010 - 0x0000)
struct TedObjectiveSlot_GetDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetDisplayText) == 0x000008, "Wrong alignment on TedObjectiveSlot_GetDisplayText");
static_assert(sizeof(TedObjectiveSlot_GetDisplayText) == 0x000010, "Wrong size on TedObjectiveSlot_GetDisplayText");
static_assert(offsetof(TedObjectiveSlot_GetDisplayText, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetDisplayText::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetIndentLevel
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveSlot_GetIndentLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetIndentLevel) == 0x000004, "Wrong alignment on TedObjectiveSlot_GetIndentLevel");
static_assert(sizeof(TedObjectiveSlot_GetIndentLevel) == 0x000004, "Wrong size on TedObjectiveSlot_GetIndentLevel");
static_assert(offsetof(TedObjectiveSlot_GetIndentLevel, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetIndentLevel::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetMarker
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveSlot_GetMarker final
{
public:
	const class UTedMarkerConfig*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetMarker) == 0x000008, "Wrong alignment on TedObjectiveSlot_GetMarker");
static_assert(sizeof(TedObjectiveSlot_GetMarker) == 0x000008, "Wrong size on TedObjectiveSlot_GetMarker");
static_assert(offsetof(TedObjectiveSlot_GetMarker, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetMarker::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetObjectiveContentData
// 0x0030 (0x0030 - 0x0000)
struct TedObjectiveSlot_GetObjectiveContentData final
{
public:
	class FText                                   OutPrimaryText;                                    // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutSecondaryText;                                  // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	EObjectiveState                               OutObjectiveState;                                 // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedObjectiveObj*                 ReturnValue;                                       // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetObjectiveContentData) == 0x000008, "Wrong alignment on TedObjectiveSlot_GetObjectiveContentData");
static_assert(sizeof(TedObjectiveSlot_GetObjectiveContentData) == 0x000030, "Wrong size on TedObjectiveSlot_GetObjectiveContentData");
static_assert(offsetof(TedObjectiveSlot_GetObjectiveContentData, OutPrimaryText) == 0x000000, "Member 'TedObjectiveSlot_GetObjectiveContentData::OutPrimaryText' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetObjectiveContentData, OutSecondaryText) == 0x000010, "Member 'TedObjectiveSlot_GetObjectiveContentData::OutSecondaryText' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetObjectiveContentData, OutObjectiveState) == 0x000020, "Member 'TedObjectiveSlot_GetObjectiveContentData::OutObjectiveState' has a wrong offset!");
static_assert(offsetof(TedObjectiveSlot_GetObjectiveContentData, ReturnValue) == 0x000028, "Member 'TedObjectiveSlot_GetObjectiveContentData::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetObjectivePanel
// 0x0008 (0x0008 - 0x0000)
struct TedObjectiveSlot_GetObjectivePanel final
{
public:
	class UTedObjectivePanel*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetObjectivePanel) == 0x000008, "Wrong alignment on TedObjectiveSlot_GetObjectivePanel");
static_assert(sizeof(TedObjectiveSlot_GetObjectivePanel) == 0x000008, "Wrong size on TedObjectiveSlot_GetObjectivePanel");
static_assert(offsetof(TedObjectiveSlot_GetObjectivePanel, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetObjectivePanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetRequisition
// 0x0004 (0x0004 - 0x0000)
struct TedObjectiveSlot_GetRequisition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetRequisition) == 0x000004, "Wrong alignment on TedObjectiveSlot_GetRequisition");
static_assert(sizeof(TedObjectiveSlot_GetRequisition) == 0x000004, "Wrong size on TedObjectiveSlot_GetRequisition");
static_assert(offsetof(TedObjectiveSlot_GetRequisition, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetRequisition::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.GetState
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_GetState final
{
public:
	EObjectiveState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_GetState) == 0x000001, "Wrong alignment on TedObjectiveSlot_GetState");
static_assert(sizeof(TedObjectiveSlot_GetState) == 0x000001, "Wrong size on TedObjectiveSlot_GetState");
static_assert(offsetof(TedObjectiveSlot_GetState, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_GetState::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.HasChildren
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_HasChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_HasChildren) == 0x000001, "Wrong alignment on TedObjectiveSlot_HasChildren");
static_assert(sizeof(TedObjectiveSlot_HasChildren) == 0x000001, "Wrong size on TedObjectiveSlot_HasChildren");
static_assert(offsetof(TedObjectiveSlot_HasChildren, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_HasChildren::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.HasParentObjective
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_HasParentObjective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_HasParentObjective) == 0x000001, "Wrong alignment on TedObjectiveSlot_HasParentObjective");
static_assert(sizeof(TedObjectiveSlot_HasParentObjective) == 0x000001, "Wrong size on TedObjectiveSlot_HasParentObjective");
static_assert(offsetof(TedObjectiveSlot_HasParentObjective, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_HasParentObjective::ReturnValue' has a wrong offset!");

// Function Tempest.TedObjectiveSlot.IsTracked
// 0x0001 (0x0001 - 0x0000)
struct TedObjectiveSlot_IsTracked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedObjectiveSlot_IsTracked) == 0x000001, "Wrong alignment on TedObjectiveSlot_IsTracked");
static_assert(sizeof(TedObjectiveSlot_IsTracked) == 0x000001, "Wrong size on TedObjectiveSlot_IsTracked");
static_assert(offsetof(TedObjectiveSlot_IsTracked, ReturnValue) == 0x000000, "Member 'TedObjectiveSlot_IsTracked::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineBannerManager.GetLocalizedBannerMessage
// 0x0040 (0x0040 - 0x0000)
struct TedOnlineBannerManager_GetLocalizedBannerMessage final
{
public:
	struct FProsBannerMessage                     InMessage;                                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 OutID;                                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutText;                                           // 0x0030(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineBannerManager_GetLocalizedBannerMessage) == 0x000008, "Wrong alignment on TedOnlineBannerManager_GetLocalizedBannerMessage");
static_assert(sizeof(TedOnlineBannerManager_GetLocalizedBannerMessage) == 0x000040, "Wrong size on TedOnlineBannerManager_GetLocalizedBannerMessage");
static_assert(offsetof(TedOnlineBannerManager_GetLocalizedBannerMessage, InMessage) == 0x000000, "Member 'TedOnlineBannerManager_GetLocalizedBannerMessage::InMessage' has a wrong offset!");
static_assert(offsetof(TedOnlineBannerManager_GetLocalizedBannerMessage, OutID) == 0x000020, "Member 'TedOnlineBannerManager_GetLocalizedBannerMessage::OutID' has a wrong offset!");
static_assert(offsetof(TedOnlineBannerManager_GetLocalizedBannerMessage, OutText) == 0x000030, "Member 'TedOnlineBannerManager_GetLocalizedBannerMessage::OutText' has a wrong offset!");

// Function Tempest.TedOnlineFriendsManager.OnFillFriendsWithHydraIdsComplete
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete final
{
public:
	TArray<struct FUserIdentityResolveResult>     Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EProsdkErrorCodeDefault                       ResultCode;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete) == 0x000008, "Wrong alignment on TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete");
static_assert(sizeof(TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete) == 0x000018, "Wrong size on TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete");
static_assert(offsetof(TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete, Results) == 0x000000, "Member 'TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete::Results' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete, ResultCode) == 0x000010, "Member 'TedOnlineFriendsManager_OnFillFriendsWithHydraIdsComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedOnlineFriendsManager.OnFriendChatMessageUpdateFromSteam
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam final
{
public:
	uint64                                        InSteamId;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam) == 0x000008, "Wrong alignment on TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam");
static_assert(sizeof(TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam) == 0x000010, "Wrong size on TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam");
static_assert(offsetof(TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam, InSteamId) == 0x000000, "Member 'TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam::InSteamId' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam, InMessageId) == 0x000008, "Member 'TedOnlineFriendsManager_OnFriendChatMessageUpdateFromSteam::InMessageId' has a wrong offset!");

// Function Tempest.TedOnlineFriendsManager.OnFriendStatusUpdateFromSteam
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam final
{
public:
	uint64                                        InSteamId;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InChangeFlags;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam) == 0x000008, "Wrong alignment on TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam");
static_assert(sizeof(TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam) == 0x000010, "Wrong size on TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam");
static_assert(offsetof(TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam, InSteamId) == 0x000000, "Member 'TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam::InSteamId' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam, InChangeFlags) == 0x000008, "Member 'TedOnlineFriendsManager_OnFriendStatusUpdateFromSteam::InChangeFlags' has a wrong offset!");

// Function Tempest.TedOnlineFriendsManager.OnReadFriendsListComplete
// 0x0028 (0x0028 - 0x0000)
struct TedOnlineFriendsManager_OnReadFriendsListComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasSuccessful;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ListName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorStr;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineFriendsManager_OnReadFriendsListComplete) == 0x000008, "Wrong alignment on TedOnlineFriendsManager_OnReadFriendsListComplete");
static_assert(sizeof(TedOnlineFriendsManager_OnReadFriendsListComplete) == 0x000028, "Wrong size on TedOnlineFriendsManager_OnReadFriendsListComplete");
static_assert(offsetof(TedOnlineFriendsManager_OnReadFriendsListComplete, LocalUserNum) == 0x000000, "Member 'TedOnlineFriendsManager_OnReadFriendsListComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnReadFriendsListComplete, bWasSuccessful) == 0x000004, "Member 'TedOnlineFriendsManager_OnReadFriendsListComplete::bWasSuccessful' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnReadFriendsListComplete, ListName) == 0x000008, "Member 'TedOnlineFriendsManager_OnReadFriendsListComplete::ListName' has a wrong offset!");
static_assert(offsetof(TedOnlineFriendsManager_OnReadFriendsListComplete, ErrorStr) == 0x000018, "Member 'TedOnlineFriendsManager_OnReadFriendsListComplete::ErrorStr' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.ConvertFactionToRankedFaction
// 0x0003 (0x0003 - 0x0000)
struct TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction final
{
public:
	ETedFaction                                   Faction;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedRankedFaction                             ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction) == 0x000001, "Wrong alignment on TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction) == 0x000003, "Wrong size on TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction, Faction) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction::Faction' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction, bSuccess) == 0x000001, "Member 'TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction::bSuccess' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction, ReturnValue) == 0x000002, "Member 'TedOnlinePlayerProfileLibrary_ConvertFactionToRankedFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetCumulativeData_Averages
// 0x00F0 (0x00F0 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages final
{
public:
	struct FTedStatistics                         InProfile;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ETedServerType>                        ServerType;                                        // 0x0090(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETedRankedFaction>                     Factions;                                          // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTedMatchCumulativeData                ReturnValue;                                       // 0x00B0(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages) == 0x0000F0, "Wrong size on TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages, InProfile) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages::InProfile' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages, ServerType) == 0x000090, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages::ServerType' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages, Factions) == 0x0000A0, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages::Factions' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages, ReturnValue) == 0x0000B0, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Averages::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetCumulativeData_Totals
// 0x00F0 (0x00F0 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals final
{
public:
	struct FTedStatistics                         InProfile;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ETedServerType>                        ServerType;                                        // 0x0090(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETedRankedFaction>                     Factions;                                          // 0x00A0(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTedMatchCumulativeData                ReturnValue;                                       // 0x00B0(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals) == 0x0000F0, "Wrong size on TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals, InProfile) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals::InProfile' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals, ServerType) == 0x000090, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals::ServerType' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals, Factions) == 0x0000A0, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals::Factions' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals, ReturnValue) == 0x0000B0, "Member 'TedOnlinePlayerProfileLibrary_GetCumulativeData_Totals::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetLocalHydraId
// 0x0010 (0x0010 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetLocalHydraId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetLocalHydraId) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetLocalHydraId");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetLocalHydraId) == 0x000010, "Wrong size on TedOnlinePlayerProfileLibrary_GetLocalHydraId");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalHydraId, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetLocalHydraId::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetLocalLastMatch
// 0x00B8 (0x00B8 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetLocalLastMatch final
{
public:
	const class UObject*                          WCO;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedMatchData                          ReturnValue;                                       // 0x0008(0x00B0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetLocalLastMatch) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetLocalLastMatch");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetLocalLastMatch) == 0x0000B8, "Wrong size on TedOnlinePlayerProfileLibrary_GetLocalLastMatch");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalLastMatch, WCO) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetLocalLastMatch::WCO' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalLastMatch, ReturnValue) == 0x000008, "Member 'TedOnlinePlayerProfileLibrary_GetLocalLastMatch::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetLocalProviderId
// 0x0010 (0x0010 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetLocalProviderId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetLocalProviderId) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetLocalProviderId");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetLocalProviderId) == 0x000010, "Wrong size on TedOnlinePlayerProfileLibrary_GetLocalProviderId");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalProviderId, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetLocalProviderId::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetLocalTotalMapWins
// 0x0038 (0x0038 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins final
{
public:
	const class UObject*                          WCO;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      Map;                                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETedServerType>                        ServerType;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<ETedRankedFaction>                     Factions;                                          // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins) == 0x000038, "Wrong size on TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins, WCO) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins::WCO' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins, Map) == 0x000008, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins::Map' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins, ServerType) == 0x000010, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins::ServerType' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins, Factions) == 0x000020, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins::Factions' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins, ReturnValue) == 0x000030, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalMapWins::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileLibrary.GetLocalTotalWins
// 0x0030 (0x0030 - 0x0000)
struct TedOnlinePlayerProfileLibrary_GetLocalTotalWins final
{
public:
	const class UObject*                          WCO;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ETedServerType>                        ServerType;                                        // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<ETedRankedFaction>                     Factions;                                          // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileLibrary_GetLocalTotalWins");
static_assert(sizeof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins) == 0x000030, "Wrong size on TedOnlinePlayerProfileLibrary_GetLocalTotalWins");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins, WCO) == 0x000000, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalWins::WCO' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins, ServerType) == 0x000008, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalWins::ServerType' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins, Factions) == 0x000018, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalWins::Factions' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileLibrary_GetLocalTotalWins, ReturnValue) == 0x000028, "Member 'TedOnlinePlayerProfileLibrary_GetLocalTotalWins::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.IsCurrentPlayerProfilePreorder
// 0x0010 (0x0010 - 0x0000)
struct TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder final
{
public:
	const class UUserWidget*                      InUserWidget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder");
static_assert(sizeof(TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder) == 0x000010, "Wrong size on TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder");
static_assert(offsetof(TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder, InUserWidget) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder::InUserWidget' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder, ReturnValue) == 0x000008, "Member 'TedOnlinePlayerProfileWidget_IsCurrentPlayerProfilePreorder::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.Show
// 0x0020 (0x0020 - 0x0000)
struct TedOnlinePlayerProfileWidget_Show final
{
public:
	class FString                                 InHydraId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedOnlinePlayerProfileWidgetContextParams InAdditionalParams;                            // 0x0010(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_Show) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_Show");
static_assert(sizeof(TedOnlinePlayerProfileWidget_Show) == 0x000020, "Wrong size on TedOnlinePlayerProfileWidget_Show");
static_assert(offsetof(TedOnlinePlayerProfileWidget_Show, InHydraId) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_Show::InHydraId' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_Show, InAdditionalParams) == 0x000010, "Member 'TedOnlinePlayerProfileWidget_Show::InAdditionalParams' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.GetProfileContext
// 0x0008 (0x0008 - 0x0000)
struct TedOnlinePlayerProfileWidget_GetProfileContext final
{
public:
	const class UTedOnlinePlayerProfileWidgetContext* ReturnValue;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_GetProfileContext) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_GetProfileContext");
static_assert(sizeof(TedOnlinePlayerProfileWidget_GetProfileContext) == 0x000008, "Wrong size on TedOnlinePlayerProfileWidget_GetProfileContext");
static_assert(offsetof(TedOnlinePlayerProfileWidget_GetProfileContext, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_GetProfileContext::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.OnLowerButtonsPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction");
static_assert(sizeof(TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction) == 0x000018, "Wrong size on TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction, InAction) == 0x000010, "Member 'TedOnlinePlayerProfileWidget_OnLowerButtonsPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.OnMainMenuPageOpenedOrClosed
// 0x0001 (0x0001 - 0x0000)
struct TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed final
{
public:
	bool                                          bOpened;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed) == 0x000001, "Wrong alignment on TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed");
static_assert(sizeof(TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed) == 0x000001, "Wrong size on TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed, bOpened) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_OnMainMenuPageOpenedOrClosed::bOpened' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.OnSeasonSelectionChanged
// 0x0004 (0x0004 - 0x0000)
struct TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged final
{
public:
	int32                                         NewSeason;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged) == 0x000004, "Wrong alignment on TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged");
static_assert(sizeof(TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged) == 0x000004, "Wrong size on TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged, NewSeason) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_OnSeasonSelectionChanged::NewSeason' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.OnTabsPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction");
static_assert(sizeof(TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction) == 0x000018, "Wrong size on TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction, InAction) == 0x000010, "Member 'TedOnlinePlayerProfileWidget_OnTabsPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.GetRankingProgression
// 0x0008 (0x0008 - 0x0000)
struct TedOnlinePlayerProfileWidget_GetRankingProgression final
{
public:
	class UTedRankingProgressionWidget*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_GetRankingProgression) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_GetRankingProgression");
static_assert(sizeof(TedOnlinePlayerProfileWidget_GetRankingProgression) == 0x000008, "Wrong size on TedOnlinePlayerProfileWidget_GetRankingProgression");
static_assert(offsetof(TedOnlinePlayerProfileWidget_GetRankingProgression, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_GetRankingProgression::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.GetStatsOverview
// 0x0008 (0x0008 - 0x0000)
struct TedOnlinePlayerProfileWidget_GetStatsOverview final
{
public:
	class UTedPlayerProfileStatisticsOverview*    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_GetStatsOverview) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_GetStatsOverview");
static_assert(sizeof(TedOnlinePlayerProfileWidget_GetStatsOverview) == 0x000008, "Wrong size on TedOnlinePlayerProfileWidget_GetStatsOverview");
static_assert(offsetof(TedOnlinePlayerProfileWidget_GetStatsOverview, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_GetStatsOverview::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.GetTabsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedOnlinePlayerProfileWidget_GetTabsPanel final
{
public:
	class UTedContentPanelInstanced*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_GetTabsPanel) == 0x000008, "Wrong alignment on TedOnlinePlayerProfileWidget_GetTabsPanel");
static_assert(sizeof(TedOnlinePlayerProfileWidget_GetTabsPanel) == 0x000008, "Wrong size on TedOnlinePlayerProfileWidget_GetTabsPanel");
static_assert(offsetof(TedOnlinePlayerProfileWidget_GetTabsPanel, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_GetTabsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlinePlayerProfileWidget.StatsOverview_GetSelectedSeason
// 0x0004 (0x0004 - 0x0000)
struct TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason) == 0x000004, "Wrong alignment on TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason");
static_assert(sizeof(TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason) == 0x000004, "Wrong size on TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason");
static_assert(offsetof(TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason, ReturnValue) == 0x000000, "Member 'TedOnlinePlayerProfileWidget_StatsOverview_GetSelectedSeason::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionPlayersPanel.K2_SetContextSearchResult
// 0x0120 (0x0120 - 0x0000)
struct TedOnlineSessionPlayersPanel_K2_SetContextSearchResult final
{
public:
	struct FTedOnlineSessionSearchResultWrappper  InSearchResult;                                    // 0x0000(0x0120)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionPlayersPanel_K2_SetContextSearchResult) == 0x000008, "Wrong alignment on TedOnlineSessionPlayersPanel_K2_SetContextSearchResult");
static_assert(sizeof(TedOnlineSessionPlayersPanel_K2_SetContextSearchResult) == 0x000120, "Wrong size on TedOnlineSessionPlayersPanel_K2_SetContextSearchResult");
static_assert(offsetof(TedOnlineSessionPlayersPanel_K2_SetContextSearchResult, InSearchResult) == 0x000000, "Member 'TedOnlineSessionPlayersPanel_K2_SetContextSearchResult::InSearchResult' has a wrong offset!");

// Function Tempest.TedOnlineSessionPlayersPanel.GetContent
// 0x0028 (0x0028 - 0x0000)
struct TedOnlineSessionPlayersPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedOnlineSessionPlayerContent         OutContent;                                        // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionPlayersPanel_GetContent) == 0x000008, "Wrong alignment on TedOnlineSessionPlayersPanel_GetContent");
static_assert(sizeof(TedOnlineSessionPlayersPanel_GetContent) == 0x000028, "Wrong size on TedOnlineSessionPlayersPanel_GetContent");
static_assert(offsetof(TedOnlineSessionPlayersPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionPlayersPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionPlayersPanel_GetContent, OutContent) == 0x000008, "Member 'TedOnlineSessionPlayersPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionPlayersPanel_GetContent, ReturnValue) == 0x000020, "Member 'TedOnlineSessionPlayersPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionPlayersPanel.IsEmpty
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionPlayersPanel_IsEmpty final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionPlayersPanel_IsEmpty) == 0x000004, "Wrong alignment on TedOnlineSessionPlayersPanel_IsEmpty");
static_assert(sizeof(TedOnlineSessionPlayersPanel_IsEmpty) == 0x000008, "Wrong size on TedOnlineSessionPlayersPanel_IsEmpty");
static_assert(offsetof(TedOnlineSessionPlayersPanel_IsEmpty, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionPlayersPanel_IsEmpty::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionPlayersPanel_IsEmpty, ReturnValue) == 0x000004, "Member 'TedOnlineSessionPlayersPanel_IsEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionPlayersPanel.IsReady
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionPlayersPanel_IsReady final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionPlayersPanel_IsReady) == 0x000004, "Wrong alignment on TedOnlineSessionPlayersPanel_IsReady");
static_assert(sizeof(TedOnlineSessionPlayersPanel_IsReady) == 0x000008, "Wrong size on TedOnlineSessionPlayersPanel_IsReady");
static_assert(offsetof(TedOnlineSessionPlayersPanel_IsReady, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionPlayersPanel_IsReady::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionPlayersPanel_IsReady, ReturnValue) == 0x000004, "Member 'TedOnlineSessionPlayersPanel_IsReady::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionPlayersPanel.Kick
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionPlayersPanel_Kick final
{
public:
	class ALobbyBeaconPlayerState*                Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionPlayersPanel_Kick) == 0x000008, "Wrong alignment on TedOnlineSessionPlayersPanel_Kick");
static_assert(sizeof(TedOnlineSessionPlayersPanel_Kick) == 0x000008, "Wrong size on TedOnlineSessionPlayersPanel_Kick");
static_assert(offsetof(TedOnlineSessionPlayersPanel_Kick, Player) == 0x000000, "Member 'TedOnlineSessionPlayersPanel_Kick::Player' has a wrong offset!");

// Function Tempest.TedOnlineSessionSettingsPanel.ChangeSettingValue_Int32
// 0x000C (0x000C - 0x0000)
struct TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32 final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32) == 0x000004, "Wrong alignment on TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32");
static_assert(sizeof(TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32) == 0x00000C, "Wrong size on TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32");
static_assert(offsetof(TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32, InValue) == 0x000004, "Member 'TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32::InValue' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32, ReturnValue) == 0x000008, "Member 'TedOnlineSessionSettingsPanel_ChangeSettingValue_Int32::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionSettingsPanel.SetMemberState
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionSettingsPanel_SetMemberState final
{
public:
	class ALobbyBeaconPlayerState*                InMember;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionSettingsPanel_SetMemberState) == 0x000008, "Wrong alignment on TedOnlineSessionSettingsPanel_SetMemberState");
static_assert(sizeof(TedOnlineSessionSettingsPanel_SetMemberState) == 0x000008, "Wrong size on TedOnlineSessionSettingsPanel_SetMemberState");
static_assert(offsetof(TedOnlineSessionSettingsPanel_SetMemberState, InMember) == 0x000000, "Member 'TedOnlineSessionSettingsPanel_SetMemberState::InMember' has a wrong offset!");

// Function Tempest.TedOnlineSessionSettingsPanel.CheckReadyUp
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionSettingsPanel_CheckReadyUp final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReadOnly;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionSettingsPanel_CheckReadyUp) == 0x000004, "Wrong alignment on TedOnlineSessionSettingsPanel_CheckReadyUp");
static_assert(sizeof(TedOnlineSessionSettingsPanel_CheckReadyUp) == 0x000008, "Wrong size on TedOnlineSessionSettingsPanel_CheckReadyUp");
static_assert(offsetof(TedOnlineSessionSettingsPanel_CheckReadyUp, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionSettingsPanel_CheckReadyUp::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_CheckReadyUp, bIsReadOnly) == 0x000004, "Member 'TedOnlineSessionSettingsPanel_CheckReadyUp::bIsReadOnly' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_CheckReadyUp, ReturnValue) == 0x000005, "Member 'TedOnlineSessionSettingsPanel_CheckReadyUp::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionSettingsPanel.GetContent
// 0x0050 (0x0050 - 0x0000)
struct TedOnlineSessionSettingsPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedOnlineSessionSettingsContent       OutContent;                                        // 0x0008(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionSettingsPanel_GetContent) == 0x000008, "Wrong alignment on TedOnlineSessionSettingsPanel_GetContent");
static_assert(sizeof(TedOnlineSessionSettingsPanel_GetContent) == 0x000050, "Wrong size on TedOnlineSessionSettingsPanel_GetContent");
static_assert(offsetof(TedOnlineSessionSettingsPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionSettingsPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_GetContent, OutContent) == 0x000008, "Member 'TedOnlineSessionSettingsPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_GetContent, ReturnValue) == 0x000048, "Member 'TedOnlineSessionSettingsPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionSettingsPanel.IsReadOnly
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionSettingsPanel_IsReadOnly final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionSettingsPanel_IsReadOnly) == 0x000004, "Wrong alignment on TedOnlineSessionSettingsPanel_IsReadOnly");
static_assert(sizeof(TedOnlineSessionSettingsPanel_IsReadOnly) == 0x000008, "Wrong size on TedOnlineSessionSettingsPanel_IsReadOnly");
static_assert(offsetof(TedOnlineSessionSettingsPanel_IsReadOnly, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionSettingsPanel_IsReadOnly::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionSettingsPanel_IsReadOnly, ReturnValue) == 0x000004, "Member 'TedOnlineSessionSettingsPanel_IsReadOnly::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.K2_GetOnlineSessionsPanelState_SortingAscending
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending) == 0x000001, "Wrong alignment on TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending");
static_assert(sizeof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending) == 0x000001, "Wrong size on TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending");
static_assert(offsetof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingAscending::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.K2_GetOnlineSessionsPanelState_SortingEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled) == 0x000001, "Wrong alignment on TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled");
static_assert(sizeof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled) == 0x000001, "Wrong size on TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled");
static_assert(offsetof(TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsPanel_K2_GetOnlineSessionsPanelState_SortingEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.OnActivateHeaderSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_OnActivateHeaderSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_OnActivateHeaderSlotState) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_OnActivateHeaderSlotState");
static_assert(sizeof(TedOnlineSessionsPanel_OnActivateHeaderSlotState) == 0x000018, "Wrong size on TedOnlineSessionsPanel_OnActivateHeaderSlotState");
static_assert(offsetof(TedOnlineSessionsPanel_OnActivateHeaderSlotState, InContentPanel) == 0x000000, "Member 'TedOnlineSessionsPanel_OnActivateHeaderSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnActivateHeaderSlotState, InContentSlot) == 0x000008, "Member 'TedOnlineSessionsPanel_OnActivateHeaderSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnActivateHeaderSlotState, InState) == 0x000010, "Member 'TedOnlineSessionsPanel_OnActivateHeaderSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnActivateHeaderSlotState, bInActivated) == 0x000011, "Member 'TedOnlineSessionsPanel_OnActivateHeaderSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.OnHeaderContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_OnHeaderContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_OnHeaderContentChange) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_OnHeaderContentChange");
static_assert(sizeof(TedOnlineSessionsPanel_OnHeaderContentChange) == 0x000008, "Wrong size on TedOnlineSessionsPanel_OnHeaderContentChange");
static_assert(offsetof(TedOnlineSessionsPanel_OnHeaderContentChange, InContentPanel) == 0x000000, "Member 'TedOnlineSessionsPanel_OnHeaderContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.OnTriggerHeaderSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_OnTriggerHeaderSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_OnTriggerHeaderSlotAction) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_OnTriggerHeaderSlotAction");
static_assert(sizeof(TedOnlineSessionsPanel_OnTriggerHeaderSlotAction) == 0x000018, "Wrong size on TedOnlineSessionsPanel_OnTriggerHeaderSlotAction");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerHeaderSlotAction, InContentPanel) == 0x000000, "Member 'TedOnlineSessionsPanel_OnTriggerHeaderSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerHeaderSlotAction, InContentSlot) == 0x000008, "Member 'TedOnlineSessionsPanel_OnTriggerHeaderSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerHeaderSlotAction, InAction) == 0x000010, "Member 'TedOnlineSessionsPanel_OnTriggerHeaderSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.OnTriggerLobbyTypeSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction");
static_assert(sizeof(TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction) == 0x000018, "Wrong size on TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction, InContentPanel) == 0x000000, "Member 'TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction, InContentSlot) == 0x000008, "Member 'TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction, InAction) == 0x000010, "Member 'TedOnlineSessionsPanel_OnTriggerLobbyTypeSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.SetFilterString
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsPanel_SetFilterString final
{
public:
	class FString                                 InFilterString;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_SetFilterString) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_SetFilterString");
static_assert(sizeof(TedOnlineSessionsPanel_SetFilterString) == 0x000010, "Wrong size on TedOnlineSessionsPanel_SetFilterString");
static_assert(offsetof(TedOnlineSessionsPanel_SetFilterString, InFilterString) == 0x000000, "Member 'TedOnlineSessionsPanel_SetFilterString::InFilterString' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.SortContent
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsPanel_SortContent final
{
public:
	bool                                          bInSkipRefreshUI;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_SortContent) == 0x000001, "Wrong alignment on TedOnlineSessionsPanel_SortContent");
static_assert(sizeof(TedOnlineSessionsPanel_SortContent) == 0x000001, "Wrong size on TedOnlineSessionsPanel_SortContent");
static_assert(offsetof(TedOnlineSessionsPanel_SortContent, bInSkipRefreshUI) == 0x000000, "Member 'TedOnlineSessionsPanel_SortContent::bInSkipRefreshUI' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.AreSpectatorsEnabledOnUI
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI) == 0x000001, "Wrong alignment on TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI");
static_assert(sizeof(TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI) == 0x000001, "Wrong size on TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI");
static_assert(offsetof(TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsPanel_AreSpectatorsEnabledOnUI::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.Authenticate
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_Authenticate final
{
public:
	class FString                                 InPassword;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSlotIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_Authenticate) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_Authenticate");
static_assert(sizeof(TedOnlineSessionsPanel_Authenticate) == 0x000018, "Wrong size on TedOnlineSessionsPanel_Authenticate");
static_assert(offsetof(TedOnlineSessionsPanel_Authenticate, InPassword) == 0x000000, "Member 'TedOnlineSessionsPanel_Authenticate::InPassword' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_Authenticate, InSlotIndex) == 0x000010, "Member 'TedOnlineSessionsPanel_Authenticate::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_Authenticate, ReturnValue) == 0x000014, "Member 'TedOnlineSessionsPanel_Authenticate::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetCurrentPlayers
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_GetCurrentPlayers final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_GetCurrentPlayers) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetCurrentPlayers");
static_assert(sizeof(TedOnlineSessionsPanel_GetCurrentPlayers) == 0x000008, "Wrong size on TedOnlineSessionsPanel_GetCurrentPlayers");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentPlayers, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetCurrentPlayers::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentPlayers, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetCurrentPlayers::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetCurrentSorting
// 0x000C (0x000C - 0x0000)
struct TedOnlineSessionsPanel_GetCurrentSorting final
{
public:
	bool                                          OutAscending;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetCurrentSorting) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetCurrentSorting");
static_assert(sizeof(TedOnlineSessionsPanel_GetCurrentSorting) == 0x00000C, "Wrong size on TedOnlineSessionsPanel_GetCurrentSorting");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentSorting, OutAscending) == 0x000000, "Member 'TedOnlineSessionsPanel_GetCurrentSorting::OutAscending' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentSorting, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetCurrentSorting::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetCurrentSpectators
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_GetCurrentSpectators final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_GetCurrentSpectators) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetCurrentSpectators");
static_assert(sizeof(TedOnlineSessionsPanel_GetCurrentSpectators) == 0x000008, "Wrong size on TedOnlineSessionsPanel_GetCurrentSpectators");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentSpectators, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetCurrentSpectators::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetCurrentSpectators, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetCurrentSpectators::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetFStrByKey
// 0x0020 (0x0020 - 0x0000)
struct TedOnlineSessionsPanel_GetFStrByKey final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OutValue;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedSessionSettingKey                         SettingKey;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bValidateEmptyStrings;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_GetFStrByKey) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetFStrByKey");
static_assert(sizeof(TedOnlineSessionsPanel_GetFStrByKey) == 0x000020, "Wrong size on TedOnlineSessionsPanel_GetFStrByKey");
static_assert(offsetof(TedOnlineSessionsPanel_GetFStrByKey, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetFStrByKey::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetFStrByKey, OutValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetFStrByKey::OutValue' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetFStrByKey, SettingKey) == 0x000018, "Member 'TedOnlineSessionsPanel_GetFStrByKey::SettingKey' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetFStrByKey, bValidateEmptyStrings) == 0x000019, "Member 'TedOnlineSessionsPanel_GetFStrByKey::bValidateEmptyStrings' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetFStrByKey, ReturnValue) == 0x00001A, "Member 'TedOnlineSessionsPanel_GetFStrByKey::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetHostName
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_GetHostName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetHostName) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetHostName");
static_assert(sizeof(TedOnlineSessionsPanel_GetHostName) == 0x000018, "Wrong size on TedOnlineSessionsPanel_GetHostName");
static_assert(offsetof(TedOnlineSessionsPanel_GetHostName, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetHostName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetHostName, ReturnValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetHostName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetLobbyName
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_GetLobbyName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetLobbyName) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetLobbyName");
static_assert(sizeof(TedOnlineSessionsPanel_GetLobbyName) == 0x000018, "Wrong size on TedOnlineSessionsPanel_GetLobbyName");
static_assert(offsetof(TedOnlineSessionsPanel_GetLobbyName, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetLobbyName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetLobbyName, ReturnValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetLobbyName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetMap
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsPanel_GetMap final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetMap) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetMap");
static_assert(sizeof(TedOnlineSessionsPanel_GetMap) == 0x000010, "Wrong size on TedOnlineSessionsPanel_GetMap");
static_assert(offsetof(TedOnlineSessionsPanel_GetMap, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetMap::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetMap, ReturnValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetMapMinimap
// 0x0010 (0x0010 - 0x0000)
struct TedOnlineSessionsPanel_GetMapMinimap final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetMapMinimap) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetMapMinimap");
static_assert(sizeof(TedOnlineSessionsPanel_GetMapMinimap) == 0x000010, "Wrong size on TedOnlineSessionsPanel_GetMapMinimap");
static_assert(offsetof(TedOnlineSessionsPanel_GetMapMinimap, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetMapMinimap::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetMapMinimap, ReturnValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetMapMinimap::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetMapName
// 0x0018 (0x0018 - 0x0000)
struct TedOnlineSessionsPanel_GetMapName final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetMapName) == 0x000008, "Wrong alignment on TedOnlineSessionsPanel_GetMapName");
static_assert(sizeof(TedOnlineSessionsPanel_GetMapName) == 0x000018, "Wrong size on TedOnlineSessionsPanel_GetMapName");
static_assert(offsetof(TedOnlineSessionsPanel_GetMapName, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetMapName::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetMapName, ReturnValue) == 0x000008, "Member 'TedOnlineSessionsPanel_GetMapName::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetMaxPlayers
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_GetMaxPlayers final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_GetMaxPlayers) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetMaxPlayers");
static_assert(sizeof(TedOnlineSessionsPanel_GetMaxPlayers) == 0x000008, "Wrong size on TedOnlineSessionsPanel_GetMaxPlayers");
static_assert(offsetof(TedOnlineSessionsPanel_GetMaxPlayers, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetMaxPlayers::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetMaxPlayers, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetMaxSpectators
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_GetMaxSpectators final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_GetMaxSpectators) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetMaxSpectators");
static_assert(sizeof(TedOnlineSessionsPanel_GetMaxSpectators) == 0x000008, "Wrong size on TedOnlineSessionsPanel_GetMaxSpectators");
static_assert(offsetof(TedOnlineSessionsPanel_GetMaxSpectators, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetMaxSpectators::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetMaxSpectators, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetMaxSpectators::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetPing
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_GetPing final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetPing) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_GetPing");
static_assert(sizeof(TedOnlineSessionsPanel_GetPing) == 0x000008, "Wrong size on TedOnlineSessionsPanel_GetPing");
static_assert(offsetof(TedOnlineSessionsPanel_GetPing, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_GetPing::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_GetPing, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_GetPing::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.GetSelectedLobbyType
// 0x0001 (0x0001 - 0x0000)
struct TedOnlineSessionsPanel_GetSelectedLobbyType final
{
public:
	ETedServerType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedOnlineSessionsPanel_GetSelectedLobbyType) == 0x000001, "Wrong alignment on TedOnlineSessionsPanel_GetSelectedLobbyType");
static_assert(sizeof(TedOnlineSessionsPanel_GetSelectedLobbyType) == 0x000001, "Wrong size on TedOnlineSessionsPanel_GetSelectedLobbyType");
static_assert(offsetof(TedOnlineSessionsPanel_GetSelectedLobbyType, ReturnValue) == 0x000000, "Member 'TedOnlineSessionsPanel_GetSelectedLobbyType::ReturnValue' has a wrong offset!");

// Function Tempest.TedOnlineSessionsPanel.IsPasswordProtected
// 0x0008 (0x0008 - 0x0000)
struct TedOnlineSessionsPanel_IsPasswordProtected final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedOnlineSessionsPanel_IsPasswordProtected) == 0x000004, "Wrong alignment on TedOnlineSessionsPanel_IsPasswordProtected");
static_assert(sizeof(TedOnlineSessionsPanel_IsPasswordProtected) == 0x000008, "Wrong size on TedOnlineSessionsPanel_IsPasswordProtected");
static_assert(offsetof(TedOnlineSessionsPanel_IsPasswordProtected, InSlotIndex) == 0x000000, "Member 'TedOnlineSessionsPanel_IsPasswordProtected::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedOnlineSessionsPanel_IsPasswordProtected, ReturnValue) == 0x000004, "Member 'TedOnlineSessionsPanel_IsPasswordProtected::ReturnValue' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyCreateComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyCreateComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyCreateComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyCreateComplete");
static_assert(sizeof(TedPartyManager_OnPartyCreateComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyCreateComplete");
static_assert(offsetof(TedPartyManager_OnPartyCreateComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyCreateComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyCreateComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyCreateComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyDisbandComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyDisbandComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyDisbandComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyDisbandComplete");
static_assert(sizeof(TedPartyManager_OnPartyDisbandComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyDisbandComplete");
static_assert(offsetof(TedPartyManager_OnPartyDisbandComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyDisbandComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyDisbandComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyDisbandComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyGetInvite
// 0x0020 (0x0020 - 0x0000)
struct TedPartyManager_OnPartyGetInvite final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FromUserId;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5InviteEventType                        EventType;                                         // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyGetInvite) == 0x000008, "Wrong alignment on TedPartyManager_OnPartyGetInvite");
static_assert(sizeof(TedPartyManager_OnPartyGetInvite) == 0x000020, "Wrong size on TedPartyManager_OnPartyGetInvite");
static_assert(offsetof(TedPartyManager_OnPartyGetInvite, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyGetInvite::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyGetInvite, FromUserId) == 0x000008, "Member 'TedPartyManager_OnPartyGetInvite::FromUserId' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyGetInvite, EventType) == 0x000018, "Member 'TedPartyManager_OnPartyGetInvite::EventType' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyInviteAcceptComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyInviteAcceptComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyInviteAcceptComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyInviteAcceptComplete");
static_assert(sizeof(TedPartyManager_OnPartyInviteAcceptComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyInviteAcceptComplete");
static_assert(offsetof(TedPartyManager_OnPartyInviteAcceptComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyInviteAcceptComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyInviteAcceptComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyInviteAcceptComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyInviteRejectComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyInviteRejectComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyInviteRejectComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyInviteRejectComplete");
static_assert(sizeof(TedPartyManager_OnPartyInviteRejectComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyInviteRejectComplete");
static_assert(offsetof(TedPartyManager_OnPartyInviteRejectComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyInviteRejectComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyInviteRejectComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyInviteRejectComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyInviteRevokeComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyInviteRevokeComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyInviteRevokeComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyInviteRevokeComplete");
static_assert(sizeof(TedPartyManager_OnPartyInviteRevokeComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyInviteRevokeComplete");
static_assert(offsetof(TedPartyManager_OnPartyInviteRevokeComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyInviteRevokeComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyInviteRevokeComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyInviteRevokeComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyInviteSendComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyInviteSendComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyInviteSendComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyInviteSendComplete");
static_assert(sizeof(TedPartyManager_OnPartyInviteSendComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyInviteSendComplete");
static_assert(offsetof(TedPartyManager_OnPartyInviteSendComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyInviteSendComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyInviteSendComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyInviteSendComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyJoinCodeGenerateComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyJoinCodeGenerateComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyJoinCodeGenerateComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyJoinCodeGenerateComplete");
static_assert(sizeof(TedPartyManager_OnPartyJoinCodeGenerateComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyJoinCodeGenerateComplete");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeGenerateComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyJoinCodeGenerateComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeGenerateComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyJoinCodeGenerateComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyJoinCodeResetComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyJoinCodeResetComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyJoinCodeResetComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyJoinCodeResetComplete");
static_assert(sizeof(TedPartyManager_OnPartyJoinCodeResetComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyJoinCodeResetComplete");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeResetComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyJoinCodeResetComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeResetComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyJoinCodeResetComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyJoinCodeUseComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyJoinCodeUseComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyJoinCodeUseComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyJoinCodeUseComplete");
static_assert(sizeof(TedPartyManager_OnPartyJoinCodeUseComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyJoinCodeUseComplete");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeUseComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyJoinCodeUseComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyJoinCodeUseComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyJoinCodeUseComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyJoinComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyJoinComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyJoinComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyJoinComplete");
static_assert(sizeof(TedPartyManager_OnPartyJoinComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyJoinComplete");
static_assert(offsetof(TedPartyManager_OnPartyJoinComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyJoinComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyJoinComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyJoinComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyLeaveComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyLeaveComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyLeaveComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyLeaveComplete");
static_assert(sizeof(TedPartyManager_OnPartyLeaveComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyLeaveComplete");
static_assert(offsetof(TedPartyManager_OnPartyLeaveComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyLeaveComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyLeaveComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyLeaveComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyRemoveMemberComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartyRemoveMemberComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyRemoveMemberComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartyRemoveMemberComplete");
static_assert(sizeof(TedPartyManager_OnPartyRemoveMemberComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartyRemoveMemberComplete");
static_assert(offsetof(TedPartyManager_OnPartyRemoveMemberComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartyRemoveMemberComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyRemoveMemberComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartyRemoveMemberComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartySetLeaderComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPartyManager_OnPartySetLeaderComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodePresence                      ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartySetLeaderComplete) == 0x000004, "Wrong alignment on TedPartyManager_OnPartySetLeaderComplete");
static_assert(sizeof(TedPartyManager_OnPartySetLeaderComplete) == 0x000008, "Wrong size on TedPartyManager_OnPartySetLeaderComplete");
static_assert(offsetof(TedPartyManager_OnPartySetLeaderComplete, LocalUserNum) == 0x000000, "Member 'TedPartyManager_OnPartySetLeaderComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartySetLeaderComplete, ResultCode) == 0x000004, "Member 'TedPartyManager_OnPartySetLeaderComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPartyManager.OnPartyUpdate
// 0x0068 (0x0068 - 0x0000)
struct TedPartyManager_OnPartyUpdate final
{
public:
	int32                                         AuthorizationIndex;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPartyStatus                           PartyStatus;                                       // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPartyStatusUpdateReason               Reason;                                            // 0x0060(0x0001)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPartyManager_OnPartyUpdate) == 0x000008, "Wrong alignment on TedPartyManager_OnPartyUpdate");
static_assert(sizeof(TedPartyManager_OnPartyUpdate) == 0x000068, "Wrong size on TedPartyManager_OnPartyUpdate");
static_assert(offsetof(TedPartyManager_OnPartyUpdate, AuthorizationIndex) == 0x000000, "Member 'TedPartyManager_OnPartyUpdate::AuthorizationIndex' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyUpdate, PartyStatus) == 0x000008, "Member 'TedPartyManager_OnPartyUpdate::PartyStatus' has a wrong offset!");
static_assert(offsetof(TedPartyManager_OnPartyUpdate, Reason) == 0x000060, "Member 'TedPartyManager_OnPartyUpdate::Reason' has a wrong offset!");

// Function Tempest.TedPassiveAbilitySlot.GetContent
// 0x0008 (0x0008 - 0x0000)
struct TedPassiveAbilitySlot_GetContent final
{
public:
	const class UTedPassiveAbilityDefinitionAsset* ReturnValue;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilitySlot_GetContent) == 0x000008, "Wrong alignment on TedPassiveAbilitySlot_GetContent");
static_assert(sizeof(TedPassiveAbilitySlot_GetContent) == 0x000008, "Wrong size on TedPassiveAbilitySlot_GetContent");
static_assert(offsetof(TedPassiveAbilitySlot_GetContent, ReturnValue) == 0x000000, "Member 'TedPassiveAbilitySlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilitySlot.GetContentDescription
// 0x0018 (0x0018 - 0x0000)
struct TedPassiveAbilitySlot_GetContentDescription final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPassiveAbilitySlot_GetContentDescription) == 0x000008, "Wrong alignment on TedPassiveAbilitySlot_GetContentDescription");
static_assert(sizeof(TedPassiveAbilitySlot_GetContentDescription) == 0x000018, "Wrong size on TedPassiveAbilitySlot_GetContentDescription");
static_assert(offsetof(TedPassiveAbilitySlot_GetContentDescription, OutText) == 0x000000, "Member 'TedPassiveAbilitySlot_GetContentDescription::OutText' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilitySlot_GetContentDescription, ReturnValue) == 0x000010, "Member 'TedPassiveAbilitySlot_GetContentDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilitySlot.GetContentDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedPassiveAbilitySlot_GetContentDisplayName final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPassiveAbilitySlot_GetContentDisplayName) == 0x000008, "Wrong alignment on TedPassiveAbilitySlot_GetContentDisplayName");
static_assert(sizeof(TedPassiveAbilitySlot_GetContentDisplayName) == 0x000018, "Wrong size on TedPassiveAbilitySlot_GetContentDisplayName");
static_assert(offsetof(TedPassiveAbilitySlot_GetContentDisplayName, OutText) == 0x000000, "Member 'TedPassiveAbilitySlot_GetContentDisplayName::OutText' has a wrong offset!");
static_assert(offsetof(TedPassiveAbilitySlot_GetContentDisplayName, ReturnValue) == 0x000010, "Member 'TedPassiveAbilitySlot_GetContentDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilitySlot.GetContentIcon
// 0x0008 (0x0008 - 0x0000)
struct TedPassiveAbilitySlot_GetContentIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilitySlot_GetContentIcon) == 0x000008, "Wrong alignment on TedPassiveAbilitySlot_GetContentIcon");
static_assert(sizeof(TedPassiveAbilitySlot_GetContentIcon) == 0x000008, "Wrong size on TedPassiveAbilitySlot_GetContentIcon");
static_assert(offsetof(TedPassiveAbilitySlot_GetContentIcon, ReturnValue) == 0x000000, "Member 'TedPassiveAbilitySlot_GetContentIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPassiveAbilitySlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedPassiveAbilitySlot_GetParentPanel final
{
public:
	class UTedPassiveAbilityPanel*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPassiveAbilitySlot_GetParentPanel) == 0x000008, "Wrong alignment on TedPassiveAbilitySlot_GetParentPanel");
static_assert(sizeof(TedPassiveAbilitySlot_GetParentPanel) == 0x000008, "Wrong size on TedPassiveAbilitySlot_GetParentPanel");
static_assert(offsetof(TedPassiveAbilitySlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedPassiveAbilitySlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPauseMenuScreen.OnPauseMenuButtonSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedPauseMenuScreen_OnPauseMenuButtonSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPauseMenuScreen_OnPauseMenuButtonSlotAction) == 0x000008, "Wrong alignment on TedPauseMenuScreen_OnPauseMenuButtonSlotAction");
static_assert(sizeof(TedPauseMenuScreen_OnPauseMenuButtonSlotAction) == 0x000018, "Wrong size on TedPauseMenuScreen_OnPauseMenuButtonSlotAction");
static_assert(offsetof(TedPauseMenuScreen_OnPauseMenuButtonSlotAction, InContentPanel) == 0x000000, "Member 'TedPauseMenuScreen_OnPauseMenuButtonSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedPauseMenuScreen_OnPauseMenuButtonSlotAction, InContentSlot) == 0x000008, "Member 'TedPauseMenuScreen_OnPauseMenuButtonSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedPauseMenuScreen_OnPauseMenuButtonSlotAction, InAction) == 0x000010, "Member 'TedPauseMenuScreen_OnPauseMenuButtonSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedPauseMenuScreen.GetPauseMenuPopup
// 0x0008 (0x0008 - 0x0000)
struct TedPauseMenuScreen_GetPauseMenuPopup final
{
public:
	class UTedPopup*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPauseMenuScreen_GetPauseMenuPopup) == 0x000008, "Wrong alignment on TedPauseMenuScreen_GetPauseMenuPopup");
static_assert(sizeof(TedPauseMenuScreen_GetPauseMenuPopup) == 0x000008, "Wrong size on TedPauseMenuScreen_GetPauseMenuPopup");
static_assert(offsetof(TedPauseMenuScreen_GetPauseMenuPopup, ReturnValue) == 0x000000, "Member 'TedPauseMenuScreen_GetPauseMenuPopup::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnCarrierInterface.GetLoad
// 0x0010 (0x0010 - 0x0000)
struct TedPawnCarrierInterface_GetLoad final
{
public:
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCarrierInterface_GetLoad) == 0x000008, "Wrong alignment on TedPawnCarrierInterface_GetLoad");
static_assert(sizeof(TedPawnCarrierInterface_GetLoad) == 0x000010, "Wrong size on TedPawnCarrierInterface_GetLoad");
static_assert(offsetof(TedPawnCarrierInterface_GetLoad, ReturnValue) == 0x000000, "Member 'TedPawnCarrierInterface_GetLoad::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnCommandPreview_DeployStructure.UpdateRangeDecalData
// 0x0008 (0x0008 - 0x0000)
struct TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData final
{
public:
	TSubclassOf<class ATedStructureBase>          StructureClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData) == 0x000008, "Wrong alignment on TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData");
static_assert(sizeof(TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData) == 0x000008, "Wrong size on TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData");
static_assert(offsetof(TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData, StructureClass) == 0x000000, "Member 'TedPawnCommandPreview_DeployStructure_UpdateRangeDecalData::StructureClass' has a wrong offset!");

// Function Tempest.TedPawnCommandVisualActor.OnContextActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct TedPawnCommandVisualActor_OnContextActorDestroyed final
{
public:
	class AActor*                                 ContextActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommandVisualActor_OnContextActorDestroyed) == 0x000008, "Wrong alignment on TedPawnCommandVisualActor_OnContextActorDestroyed");
static_assert(sizeof(TedPawnCommandVisualActor_OnContextActorDestroyed) == 0x000008, "Wrong size on TedPawnCommandVisualActor_OnContextActorDestroyed");
static_assert(offsetof(TedPawnCommandVisualActor_OnContextActorDestroyed, ContextActor) == 0x000000, "Member 'TedPawnCommandVisualActor_OnContextActorDestroyed::ContextActor' has a wrong offset!");

// Function Tempest.TedPawnCommandVisualActor.GetContextActors
// 0x0010 (0x0010 - 0x0000)
struct TedPawnCommandVisualActor_GetContextActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommandVisualActor_GetContextActors) == 0x000008, "Wrong alignment on TedPawnCommandVisualActor_GetContextActors");
static_assert(sizeof(TedPawnCommandVisualActor_GetContextActors) == 0x000010, "Wrong size on TedPawnCommandVisualActor_GetContextActors");
static_assert(offsetof(TedPawnCommandVisualActor_GetContextActors, ReturnValue) == 0x000000, "Member 'TedPawnCommandVisualActor_GetContextActors::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnCommand_ActivateAbility.CreateAbilityCommandDataWithClass
// 0x0108 (0x0108 - 0x0000)
struct TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass final
{
public:
	TSubclassOf<class UTedAbilityBase>            InAbilityClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUsePayload;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     InPayload;                                         // 0x0010(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x00C0(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass) == 0x000008, "Wrong alignment on TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass");
static_assert(sizeof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass) == 0x000108, "Wrong size on TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass, InAbilityClass) == 0x000000, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass::InAbilityClass' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass, bInUsePayload) == 0x000008, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass::bInUsePayload' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass, InPayload) == 0x000010, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass::InPayload' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass, ReturnValue) == 0x0000C0, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnCommand_ActivateAbility.CreateAbilityCommandDataWithTags
// 0x0120 (0x0120 - 0x0000)
struct TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags final
{
public:
	struct FGameplayTagContainer                  InAbilityTags;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInUsePayload;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     InPayload;                                         // 0x0028(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x00D8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags) == 0x000008, "Wrong alignment on TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags");
static_assert(sizeof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags) == 0x000120, "Wrong size on TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags, InAbilityTags) == 0x000000, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags::InAbilityTags' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags, bInUsePayload) == 0x000020, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags::bInUsePayload' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags, InPayload) == 0x000028, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags::InPayload' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags, ReturnValue) == 0x0000D8, "Member 'TedPawnCommand_ActivateAbility_CreateAbilityCommandDataWithTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnCommand_UnloadGivenPawns.CreateCommandData_UnloadGivenPawns
// 0x0060 (0x0060 - 0x0000)
struct TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns final
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                CommandOverride;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns) == 0x000008, "Wrong alignment on TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns");
static_assert(sizeof(TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns) == 0x000060, "Wrong size on TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns");
static_assert(offsetof(TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns, Pawns) == 0x000000, "Member 'TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns::Pawns' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns, CommandOverride) == 0x000010, "Member 'TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns::CommandOverride' has a wrong offset!");
static_assert(offsetof(TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns, ReturnValue) == 0x000018, "Member 'TedPawnCommand_UnloadGivenPawns_CreateCommandData_UnloadGivenPawns::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.HasPawnsInContainer
// 0x0001 (0x0001 - 0x0000)
struct TedPawnContainerComponent_HasPawnsInContainer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_HasPawnsInContainer) == 0x000001, "Wrong alignment on TedPawnContainerComponent_HasPawnsInContainer");
static_assert(sizeof(TedPawnContainerComponent_HasPawnsInContainer) == 0x000001, "Wrong size on TedPawnContainerComponent_HasPawnsInContainer");
static_assert(offsetof(TedPawnContainerComponent_HasPawnsInContainer, ReturnValue) == 0x000000, "Member 'TedPawnContainerComponent_HasPawnsInContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.OnOwnerTakeDamage
// 0x0028 (0x0028 - 0x0000)
struct TedPawnContainerComponent_OnOwnerTakeDamage final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_OnOwnerTakeDamage) == 0x000008, "Wrong alignment on TedPawnContainerComponent_OnOwnerTakeDamage");
static_assert(sizeof(TedPawnContainerComponent_OnOwnerTakeDamage) == 0x000028, "Wrong size on TedPawnContainerComponent_OnOwnerTakeDamage");
static_assert(offsetof(TedPawnContainerComponent_OnOwnerTakeDamage, DamagedActor) == 0x000000, "Member 'TedPawnContainerComponent_OnOwnerTakeDamage::DamagedActor' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_OnOwnerTakeDamage, Damage) == 0x000008, "Member 'TedPawnContainerComponent_OnOwnerTakeDamage::Damage' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_OnOwnerTakeDamage, DamageType) == 0x000010, "Member 'TedPawnContainerComponent_OnOwnerTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_OnOwnerTakeDamage, InstigatedBy) == 0x000018, "Member 'TedPawnContainerComponent_OnOwnerTakeDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_OnOwnerTakeDamage, DamageCauser) == 0x000020, "Member 'TedPawnContainerComponent_OnOwnerTakeDamage::DamageCauser' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.OnStoredPawnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct TedPawnContainerComponent_OnStoredPawnDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_OnStoredPawnDestroyed) == 0x000008, "Wrong alignment on TedPawnContainerComponent_OnStoredPawnDestroyed");
static_assert(sizeof(TedPawnContainerComponent_OnStoredPawnDestroyed) == 0x000008, "Wrong size on TedPawnContainerComponent_OnStoredPawnDestroyed");
static_assert(offsetof(TedPawnContainerComponent_OnStoredPawnDestroyed, InActor) == 0x000000, "Member 'TedPawnContainerComponent_OnStoredPawnDestroyed::InActor' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.RequestStorePawn
// 0x0010 (0x0010 - 0x0000)
struct TedPawnContainerComponent_RequestStorePawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnContainerComponent_RequestStorePawn) == 0x000008, "Wrong alignment on TedPawnContainerComponent_RequestStorePawn");
static_assert(sizeof(TedPawnContainerComponent_RequestStorePawn) == 0x000010, "Wrong size on TedPawnContainerComponent_RequestStorePawn");
static_assert(offsetof(TedPawnContainerComponent_RequestStorePawn, InPawn) == 0x000000, "Member 'TedPawnContainerComponent_RequestStorePawn::InPawn' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_RequestStorePawn, ReturnValue) == 0x000008, "Member 'TedPawnContainerComponent_RequestStorePawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.CanStorePawn
// 0x0010 (0x0010 - 0x0000)
struct TedPawnContainerComponent_CanStorePawn final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPawnContainerComponent_CanStorePawn) == 0x000008, "Wrong alignment on TedPawnContainerComponent_CanStorePawn");
static_assert(sizeof(TedPawnContainerComponent_CanStorePawn) == 0x000010, "Wrong size on TedPawnContainerComponent_CanStorePawn");
static_assert(offsetof(TedPawnContainerComponent_CanStorePawn, InPawn) == 0x000000, "Member 'TedPawnContainerComponent_CanStorePawn::InPawn' has a wrong offset!");
static_assert(offsetof(TedPawnContainerComponent_CanStorePawn, ReturnValue) == 0x000008, "Member 'TedPawnContainerComponent_CanStorePawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.CanUnitsFireFromInside
// 0x0001 (0x0001 - 0x0000)
struct TedPawnContainerComponent_CanUnitsFireFromInside final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_CanUnitsFireFromInside) == 0x000001, "Wrong alignment on TedPawnContainerComponent_CanUnitsFireFromInside");
static_assert(sizeof(TedPawnContainerComponent_CanUnitsFireFromInside) == 0x000001, "Wrong size on TedPawnContainerComponent_CanUnitsFireFromInside");
static_assert(offsetof(TedPawnContainerComponent_CanUnitsFireFromInside, ReturnValue) == 0x000000, "Member 'TedPawnContainerComponent_CanUnitsFireFromInside::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.GetNumberOfFreeSlots
// 0x0004 (0x0004 - 0x0000)
struct TedPawnContainerComponent_GetNumberOfFreeSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_GetNumberOfFreeSlots) == 0x000004, "Wrong alignment on TedPawnContainerComponent_GetNumberOfFreeSlots");
static_assert(sizeof(TedPawnContainerComponent_GetNumberOfFreeSlots) == 0x000004, "Wrong size on TedPawnContainerComponent_GetNumberOfFreeSlots");
static_assert(offsetof(TedPawnContainerComponent_GetNumberOfFreeSlots, ReturnValue) == 0x000000, "Member 'TedPawnContainerComponent_GetNumberOfFreeSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.GetNumberOfSlots
// 0x0004 (0x0004 - 0x0000)
struct TedPawnContainerComponent_GetNumberOfSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_GetNumberOfSlots) == 0x000004, "Wrong alignment on TedPawnContainerComponent_GetNumberOfSlots");
static_assert(sizeof(TedPawnContainerComponent_GetNumberOfSlots) == 0x000004, "Wrong size on TedPawnContainerComponent_GetNumberOfSlots");
static_assert(offsetof(TedPawnContainerComponent_GetNumberOfSlots, ReturnValue) == 0x000000, "Member 'TedPawnContainerComponent_GetNumberOfSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnContainerComponent.GetStoredPawns
// 0x0010 (0x0010 - 0x0000)
struct TedPawnContainerComponent_GetStoredPawns final
{
public:
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnContainerComponent_GetStoredPawns) == 0x000008, "Wrong alignment on TedPawnContainerComponent_GetStoredPawns");
static_assert(sizeof(TedPawnContainerComponent_GetStoredPawns) == 0x000010, "Wrong size on TedPawnContainerComponent_GetStoredPawns");
static_assert(offsetof(TedPawnContainerComponent_GetStoredPawns, ReturnValue) == 0x000000, "Member 'TedPawnContainerComponent_GetStoredPawns::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitDefinitionAsset.GetGarrisonSlotCount
// 0x0004 (0x0004 - 0x0000)
struct TedUnitDefinitionAsset_GetGarrisonSlotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitDefinitionAsset_GetGarrisonSlotCount) == 0x000004, "Wrong alignment on TedUnitDefinitionAsset_GetGarrisonSlotCount");
static_assert(sizeof(TedUnitDefinitionAsset_GetGarrisonSlotCount) == 0x000004, "Wrong size on TedUnitDefinitionAsset_GetGarrisonSlotCount");
static_assert(offsetof(TedUnitDefinitionAsset_GetGarrisonSlotCount, ReturnValue) == 0x000000, "Member 'TedUnitDefinitionAsset_GetGarrisonSlotCount::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanelSlot.OnPawnDamaged
// 0x0028 (0x0028 - 0x0000)
struct TedPawnsPanelSlot_OnPawnDamaged final
{
public:
	class AActor*                                 DamagedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedBy;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanelSlot_OnPawnDamaged) == 0x000008, "Wrong alignment on TedPawnsPanelSlot_OnPawnDamaged");
static_assert(sizeof(TedPawnsPanelSlot_OnPawnDamaged) == 0x000028, "Wrong size on TedPawnsPanelSlot_OnPawnDamaged");
static_assert(offsetof(TedPawnsPanelSlot_OnPawnDamaged, DamagedActor) == 0x000000, "Member 'TedPawnsPanelSlot_OnPawnDamaged::DamagedActor' has a wrong offset!");
static_assert(offsetof(TedPawnsPanelSlot_OnPawnDamaged, Damage) == 0x000008, "Member 'TedPawnsPanelSlot_OnPawnDamaged::Damage' has a wrong offset!");
static_assert(offsetof(TedPawnsPanelSlot_OnPawnDamaged, DamageType) == 0x000010, "Member 'TedPawnsPanelSlot_OnPawnDamaged::DamageType' has a wrong offset!");
static_assert(offsetof(TedPawnsPanelSlot_OnPawnDamaged, InstigatedBy) == 0x000018, "Member 'TedPawnsPanelSlot_OnPawnDamaged::InstigatedBy' has a wrong offset!");
static_assert(offsetof(TedPawnsPanelSlot_OnPawnDamaged, DamageCauser) == 0x000020, "Member 'TedPawnsPanelSlot_OnPawnDamaged::DamageCauser' has a wrong offset!");

// Function Tempest.TedPawnsPanelSlot.GetContent
// 0x0008 (0x0008 - 0x0000)
struct TedPawnsPanelSlot_GetContent final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanelSlot_GetContent) == 0x000008, "Wrong alignment on TedPawnsPanelSlot_GetContent");
static_assert(sizeof(TedPawnsPanelSlot_GetContent) == 0x000008, "Wrong size on TedPawnsPanelSlot_GetContent");
static_assert(offsetof(TedPawnsPanelSlot_GetContent, ReturnValue) == 0x000000, "Member 'TedPawnsPanelSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanelSlot.GetContentIcon
// 0x0008 (0x0008 - 0x0000)
struct TedPawnsPanelSlot_GetContentIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanelSlot_GetContentIcon) == 0x000008, "Wrong alignment on TedPawnsPanelSlot_GetContentIcon");
static_assert(sizeof(TedPawnsPanelSlot_GetContentIcon) == 0x000008, "Wrong size on TedPawnsPanelSlot_GetContentIcon");
static_assert(offsetof(TedPawnsPanelSlot_GetContentIcon, ReturnValue) == 0x000000, "Member 'TedPawnsPanelSlot_GetContentIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnsPanelSlot.GetPawnsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedPawnsPanelSlot_GetPawnsPanel final
{
public:
	class UTedPawnsPanel*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnsPanelSlot_GetPawnsPanel) == 0x000008, "Wrong alignment on TedPawnsPanelSlot_GetPawnsPanel");
static_assert(sizeof(TedPawnsPanelSlot_GetPawnsPanel) == 0x000008, "Wrong size on TedPawnsPanelSlot_GetPawnsPanel");
static_assert(offsetof(TedPawnsPanelSlot_GetPawnsPanel, ReturnValue) == 0x000000, "Member 'TedPawnsPanelSlot_GetPawnsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnVeterancyWidget.SetDisplayedPawn
// 0x0008 (0x0008 - 0x0000)
struct TedPawnVeterancyWidget_SetDisplayedPawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnVeterancyWidget_SetDisplayedPawn) == 0x000008, "Wrong alignment on TedPawnVeterancyWidget_SetDisplayedPawn");
static_assert(sizeof(TedPawnVeterancyWidget_SetDisplayedPawn) == 0x000008, "Wrong size on TedPawnVeterancyWidget_SetDisplayedPawn");
static_assert(offsetof(TedPawnVeterancyWidget_SetDisplayedPawn, InPawn) == 0x000000, "Member 'TedPawnVeterancyWidget_SetDisplayedPawn::InPawn' has a wrong offset!");

// Function Tempest.TedPawnVeterancyWidget.DisplayPawnHasVeterancy
// 0x0001 (0x0001 - 0x0000)
struct TedPawnVeterancyWidget_DisplayPawnHasVeterancy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnVeterancyWidget_DisplayPawnHasVeterancy) == 0x000001, "Wrong alignment on TedPawnVeterancyWidget_DisplayPawnHasVeterancy");
static_assert(sizeof(TedPawnVeterancyWidget_DisplayPawnHasVeterancy) == 0x000001, "Wrong size on TedPawnVeterancyWidget_DisplayPawnHasVeterancy");
static_assert(offsetof(TedPawnVeterancyWidget_DisplayPawnHasVeterancy, ReturnValue) == 0x000000, "Member 'TedPawnVeterancyWidget_DisplayPawnHasVeterancy::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnVeterancyWidget.GetDisplayedPawn
// 0x0008 (0x0008 - 0x0000)
struct TedPawnVeterancyWidget_GetDisplayedPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnVeterancyWidget_GetDisplayedPawn) == 0x000008, "Wrong alignment on TedPawnVeterancyWidget_GetDisplayedPawn");
static_assert(sizeof(TedPawnVeterancyWidget_GetDisplayedPawn) == 0x000008, "Wrong size on TedPawnVeterancyWidget_GetDisplayedPawn");
static_assert(offsetof(TedPawnVeterancyWidget_GetDisplayedPawn, ReturnValue) == 0x000000, "Member 'TedPawnVeterancyWidget_GetDisplayedPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnVeterancyWidget.GetVeterancyLevel
// 0x0004 (0x0004 - 0x0000)
struct TedPawnVeterancyWidget_GetVeterancyLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnVeterancyWidget_GetVeterancyLevel) == 0x000004, "Wrong alignment on TedPawnVeterancyWidget_GetVeterancyLevel");
static_assert(sizeof(TedPawnVeterancyWidget_GetVeterancyLevel) == 0x000004, "Wrong size on TedPawnVeterancyWidget_GetVeterancyLevel");
static_assert(offsetof(TedPawnVeterancyWidget_GetVeterancyLevel, ReturnValue) == 0x000000, "Member 'TedPawnVeterancyWidget_GetVeterancyLevel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPawnVeterancyWidget.GetVeterancyProgress
// 0x0004 (0x0004 - 0x0000)
struct TedPawnVeterancyWidget_GetVeterancyProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPawnVeterancyWidget_GetVeterancyProgress) == 0x000004, "Wrong alignment on TedPawnVeterancyWidget_GetVeterancyProgress");
static_assert(sizeof(TedPawnVeterancyWidget_GetVeterancyProgress) == 0x000004, "Wrong size on TedPawnVeterancyWidget_GetVeterancyProgress");
static_assert(offsetof(TedPawnVeterancyWidget_GetVeterancyProgress, ReturnValue) == 0x000000, "Member 'TedPawnVeterancyWidget_GetVeterancyProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedPerformanceStatSubsystem.GetStatValue
// 0x0010 (0x0010 - 0x0000)
struct TedPerformanceStatSubsystem_GetStatValue final
{
public:
	ETedDisplayablePerformanceStat                Stat;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPerformanceStatSubsystem_GetStatValue) == 0x000008, "Wrong alignment on TedPerformanceStatSubsystem_GetStatValue");
static_assert(sizeof(TedPerformanceStatSubsystem_GetStatValue) == 0x000010, "Wrong size on TedPerformanceStatSubsystem_GetStatValue");
static_assert(offsetof(TedPerformanceStatSubsystem_GetStatValue, Stat) == 0x000000, "Member 'TedPerformanceStatSubsystem_GetStatValue::Stat' has a wrong offset!");
static_assert(offsetof(TedPerformanceStatSubsystem_GetStatValue, ReturnValue) == 0x000008, "Member 'TedPerformanceStatSubsystem_GetStatValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedPickupActor.NetMulticast_PickedUp
// 0x0008 (0x0008 - 0x0000)
struct TedPickupActor_NetMulticast_PickedUp final
{
public:
	class ATedUnitBase*                           PickedUpBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPickupActor_NetMulticast_PickedUp) == 0x000008, "Wrong alignment on TedPickupActor_NetMulticast_PickedUp");
static_assert(sizeof(TedPickupActor_NetMulticast_PickedUp) == 0x000008, "Wrong size on TedPickupActor_NetMulticast_PickedUp");
static_assert(offsetof(TedPickupActor_NetMulticast_PickedUp, PickedUpBy) == 0x000000, "Member 'TedPickupActor_NetMulticast_PickedUp::PickedUpBy' has a wrong offset!");

// Function Tempest.TedPickupActor.OnBlockingStructureEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedPickupActor_OnBlockingStructureEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPickupActor_OnBlockingStructureEndPlay) == 0x000008, "Wrong alignment on TedPickupActor_OnBlockingStructureEndPlay");
static_assert(sizeof(TedPickupActor_OnBlockingStructureEndPlay) == 0x000010, "Wrong size on TedPickupActor_OnBlockingStructureEndPlay");
static_assert(offsetof(TedPickupActor_OnBlockingStructureEndPlay, InActor) == 0x000000, "Member 'TedPickupActor_OnBlockingStructureEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedPickupActor_OnBlockingStructureEndPlay, InEndPlayReason) == 0x000008, "Member 'TedPickupActor_OnBlockingStructureEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedPickupActor.PickUp
// 0x0008 (0x0008 - 0x0000)
struct TedPickupActor_PickUp final
{
public:
	class ATedUnitBase*                           PickUpBy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPickupActor_PickUp) == 0x000008, "Wrong alignment on TedPickupActor_PickUp");
static_assert(sizeof(TedPickupActor_PickUp) == 0x000008, "Wrong size on TedPickupActor_PickUp");
static_assert(offsetof(TedPickupActor_PickUp, PickUpBy) == 0x000000, "Member 'TedPickupActor_PickUp::PickUpBy' has a wrong offset!");

// Function Tempest.TedPickupActor.ReceivePickedUp
// 0x0008 (0x0008 - 0x0000)
struct TedPickupActor_ReceivePickedUp final
{
public:
	class ATedUnitBase*                           PikedUpBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPickupActor_ReceivePickedUp) == 0x000008, "Wrong alignment on TedPickupActor_ReceivePickedUp");
static_assert(sizeof(TedPickupActor_ReceivePickedUp) == 0x000008, "Wrong size on TedPickupActor_ReceivePickedUp");
static_assert(offsetof(TedPickupActor_ReceivePickedUp, PikedUpBy) == 0x000000, "Member 'TedPickupActor_ReceivePickedUp::PikedUpBy' has a wrong offset!");

// Function Tempest.TedPickupActor.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPickupActor_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPickupActor_SetEnabled) == 0x000001, "Wrong alignment on TedPickupActor_SetEnabled");
static_assert(sizeof(TedPickupActor_SetEnabled) == 0x000001, "Wrong size on TedPickupActor_SetEnabled");
static_assert(offsetof(TedPickupActor_SetEnabled, bInEnabled) == 0x000000, "Member 'TedPickupActor_SetEnabled::bInEnabled' has a wrong offset!");

// Function Tempest.TedPickupActor.CanPickUp
// 0x0010 (0x0010 - 0x0000)
struct TedPickupActor_CanPickUp final
{
public:
	class ATedUnitBase*                           PickUpBy;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPickupActor_CanPickUp) == 0x000008, "Wrong alignment on TedPickupActor_CanPickUp");
static_assert(sizeof(TedPickupActor_CanPickUp) == 0x000010, "Wrong size on TedPickupActor_CanPickUp");
static_assert(offsetof(TedPickupActor_CanPickUp, PickUpBy) == 0x000000, "Member 'TedPickupActor_CanPickUp::PickUpBy' has a wrong offset!");
static_assert(offsetof(TedPickupActor_CanPickUp, ReturnValue) == 0x000008, "Member 'TedPickupActor_CanPickUp::ReturnValue' has a wrong offset!");

// Function Tempest.TedPickupActor.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedPickupActor_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPickupActor_IsEnabled) == 0x000001, "Wrong alignment on TedPickupActor_IsEnabled");
static_assert(sizeof(TedPickupActor_IsEnabled) == 0x000001, "Wrong size on TedPickupActor_IsEnabled");
static_assert(offsetof(TedPickupActor_IsEnabled, ReturnValue) == 0x000000, "Member 'TedPickupActor_IsEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCameraComponent.InterpolateCameraToLocation
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerCameraComponent_InterpolateCameraToLocation final
{
public:
	struct FVector                                TargetLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpExponent;                                    // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideZoomPct;                                   // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockTargetLocationTime;                            // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToStartLocation;                            // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCameraComponent_InterpolateCameraToLocation) == 0x000008, "Wrong alignment on TedPlayerCameraComponent_InterpolateCameraToLocation");
static_assert(sizeof(TedPlayerCameraComponent_InterpolateCameraToLocation) == 0x000030, "Wrong size on TedPlayerCameraComponent_InterpolateCameraToLocation");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, TargetLocation) == 0x000000, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, InterpTime) == 0x000018, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::InterpTime' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, InterpExponent) == 0x00001C, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::InterpExponent' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, OverrideZoomPct) == 0x000020, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::OverrideZoomPct' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, LockTargetLocationTime) == 0x000024, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::LockTargetLocationTime' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, bReturnToStartLocation) == 0x000028, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::bReturnToStartLocation' has a wrong offset!");
static_assert(offsetof(TedPlayerCameraComponent_InterpolateCameraToLocation, ReturnValue) == 0x00002C, "Member 'TedPlayerCameraComponent_InterpolateCameraToLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommandsWidget.OnCollapseButtonAcivateState
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerCommandsWidget_OnCollapseButtonAcivateState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState) == 0x000008, "Wrong alignment on TedPlayerCommandsWidget_OnCollapseButtonAcivateState");
static_assert(sizeof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState) == 0x000018, "Wrong size on TedPlayerCommandsWidget_OnCollapseButtonAcivateState");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState, InContentPanel) == 0x000000, "Member 'TedPlayerCommandsWidget_OnCollapseButtonAcivateState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState, InContentSlot) == 0x000008, "Member 'TedPlayerCommandsWidget_OnCollapseButtonAcivateState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState, InState) == 0x000010, "Member 'TedPlayerCommandsWidget_OnCollapseButtonAcivateState::InState' has a wrong offset!");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonAcivateState, bInActivated) == 0x000011, "Member 'TedPlayerCommandsWidget_OnCollapseButtonAcivateState::bInActivated' has a wrong offset!");

// Function Tempest.TedPlayerCommandsWidget.OnCollapseButtonPanelTriggerAction
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction) == 0x000008, "Wrong alignment on TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction");
static_assert(sizeof(TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction) == 0x000018, "Wrong size on TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction, InContentPanel) == 0x000000, "Member 'TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction, InContentSlot) == 0x000008, "Member 'TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction, InAction) == 0x000010, "Member 'TedPlayerCommandsWidget_OnCollapseButtonPanelTriggerAction::InAction' has a wrong offset!");

// Function Tempest.TedPlayerCommandsWidget.OnCommandsPanelContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerCommandsWidget_OnCommandsPanelContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommandsWidget_OnCommandsPanelContentChange) == 0x000008, "Wrong alignment on TedPlayerCommandsWidget_OnCommandsPanelContentChange");
static_assert(sizeof(TedPlayerCommandsWidget_OnCommandsPanelContentChange) == 0x000008, "Wrong size on TedPlayerCommandsWidget_OnCommandsPanelContentChange");
static_assert(offsetof(TedPlayerCommandsWidget_OnCommandsPanelContentChange, InContentPanel) == 0x000000, "Member 'TedPlayerCommandsWidget_OnCommandsPanelContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedPlayerCommand_Airstrike.CreateAirstrikeCommandData
// 0x0100 (0x0100 - 0x0000)
struct TedPlayerCommand_Airstrike_CreateAirstrikeCommandData final
{
public:
	TSubclassOf<class UTedPlayerCommand_Airstrike> CommandClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandDataPayload_Airstrike  Payload;                                           // 0x0008(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x00B8(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_Airstrike_CreateAirstrikeCommandData) == 0x000008, "Wrong alignment on TedPlayerCommand_Airstrike_CreateAirstrikeCommandData");
static_assert(sizeof(TedPlayerCommand_Airstrike_CreateAirstrikeCommandData) == 0x000100, "Wrong size on TedPlayerCommand_Airstrike_CreateAirstrikeCommandData");
static_assert(offsetof(TedPlayerCommand_Airstrike_CreateAirstrikeCommandData, CommandClass) == 0x000000, "Member 'TedPlayerCommand_Airstrike_CreateAirstrikeCommandData::CommandClass' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_Airstrike_CreateAirstrikeCommandData, Payload) == 0x000008, "Member 'TedPlayerCommand_Airstrike_CreateAirstrikeCommandData::Payload' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_Airstrike_CreateAirstrikeCommandData, ReturnValue) == 0x0000B8, "Member 'TedPlayerCommand_Airstrike_CreateAirstrikeCommandData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_ConstructionQueue.CreateCommandData_ConstructionQueue
// 0x0060 (0x0060 - 0x0000)
struct TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue final
{
public:
	TSubclassOf<class UTedCommand>                InCommand;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      InFactory;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InConstructionElementId;                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue) == 0x000008, "Wrong alignment on TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue");
static_assert(sizeof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue) == 0x000060, "Wrong size on TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue");
static_assert(offsetof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue, InCommand) == 0x000000, "Member 'TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue::InCommand' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue, InFactory) == 0x000008, "Member 'TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue::InFactory' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue, InConstructionElementId) == 0x000010, "Member 'TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue::InConstructionElementId' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue, ReturnValue) == 0x000018, "Member 'TedPlayerCommand_ConstructionQueue_CreateCommandData_ConstructionQueue::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_PauseConstruction.CreateCommandData_PauseConstruction
// 0x0060 (0x0060 - 0x0000)
struct TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction final
{
public:
	TSubclassOf<class UTedCommand>                InCommand;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      InFactory;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InConstructionElementId;                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0018(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction) == 0x000008, "Wrong alignment on TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction");
static_assert(sizeof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction) == 0x000060, "Wrong size on TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction");
static_assert(offsetof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction, InCommand) == 0x000000, "Member 'TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction::InCommand' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction, InFactory) == 0x000008, "Member 'TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction::InFactory' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction, InConstructionElementId) == 0x000010, "Member 'TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction::InConstructionElementId' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction, ReturnValue) == 0x000018, "Member 'TedPlayerCommand_PauseConstruction_CreateCommandData_PauseConstruction::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerCommand_PlaceStructure.CreateCommandData_PlaceStructure
// 0x0078 (0x0078 - 0x0000)
struct TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATedStructureBase>          InStructureClass;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      InFactory;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedCommand>                InCommandOverride;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayCommandData                   ReturnValue;                                       // 0x0030(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure) == 0x000008, "Wrong alignment on TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure");
static_assert(sizeof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure) == 0x000078, "Wrong size on TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure");
static_assert(offsetof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure, InLocation) == 0x000000, "Member 'TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure::InLocation' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure, InStructureClass) == 0x000018, "Member 'TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure::InStructureClass' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure, InFactory) == 0x000020, "Member 'TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure::InFactory' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure, InCommandOverride) == 0x000028, "Member 'TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure::InCommandOverride' has a wrong offset!");
static_assert(offsetof(TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure, ReturnValue) == 0x000030, "Member 'TedPlayerCommand_PlaceStructure_CreateCommandData_PlaceStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerController_CC.SetViewTargetByCameraType
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_CC_SetViewTargetByCameraType final
{
public:
	ETedCCCameraType                              InCamera;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_CC_SetViewTargetByCameraType) == 0x000001, "Wrong alignment on TedPlayerController_CC_SetViewTargetByCameraType");
static_assert(sizeof(TedPlayerController_CC_SetViewTargetByCameraType) == 0x000001, "Wrong size on TedPlayerController_CC_SetViewTargetByCameraType");
static_assert(offsetof(TedPlayerController_CC_SetViewTargetByCameraType, InCamera) == 0x000000, "Member 'TedPlayerController_CC_SetViewTargetByCameraType::InCamera' has a wrong offset!");

// Function Tempest.TedPlayerController_CC.StartCameraTransition
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerController_CC_StartCameraTransition final
{
public:
	ETedCCCameraType                              InCamera;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerController_CC_StartCameraTransition) == 0x000001, "Wrong alignment on TedPlayerController_CC_StartCameraTransition");
static_assert(sizeof(TedPlayerController_CC_StartCameraTransition) == 0x000001, "Wrong size on TedPlayerController_CC_StartCameraTransition");
static_assert(offsetof(TedPlayerController_CC_StartCameraTransition, InCamera) == 0x000000, "Member 'TedPlayerController_CC_StartCameraTransition::InCamera' has a wrong offset!");

// Function Tempest.TedPlayerData.Get
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_Get final
{
public:
	const class APlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedPlayerData*                         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_Get) == 0x000008, "Wrong alignment on TedPlayerData_Get");
static_assert(sizeof(TedPlayerData_Get) == 0x000010, "Wrong size on TedPlayerData_Get");
static_assert(offsetof(TedPlayerData_Get, InPlayerState) == 0x000000, "Member 'TedPlayerData_Get::InPlayerState' has a wrong offset!");
static_assert(offsetof(TedPlayerData_Get, ReturnValue) == 0x000008, "Member 'TedPlayerData_Get::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetByPlayerID
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerData_GetByPlayerID final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedPlayerData*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetByPlayerID) == 0x000008, "Wrong alignment on TedPlayerData_GetByPlayerID");
static_assert(sizeof(TedPlayerData_GetByPlayerID) == 0x000018, "Wrong size on TedPlayerData_GetByPlayerID");
static_assert(offsetof(TedPlayerData_GetByPlayerID, InWorldContext) == 0x000000, "Member 'TedPlayerData_GetByPlayerID::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetByPlayerID, InPlayer) == 0x000008, "Member 'TedPlayerData_GetByPlayerID::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetByPlayerID, ReturnValue) == 0x000010, "Member 'TedPlayerData_GetByPlayerID::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetByPlayerIndex
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerData_GetByPlayerIndex final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayerIndex;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedPlayerData*                         ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetByPlayerIndex) == 0x000008, "Wrong alignment on TedPlayerData_GetByPlayerIndex");
static_assert(sizeof(TedPlayerData_GetByPlayerIndex) == 0x000018, "Wrong size on TedPlayerData_GetByPlayerIndex");
static_assert(offsetof(TedPlayerData_GetByPlayerIndex, InWorldContext) == 0x000000, "Member 'TedPlayerData_GetByPlayerIndex::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetByPlayerIndex, InPlayerIndex) == 0x000008, "Member 'TedPlayerData_GetByPlayerIndex::InPlayerIndex' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetByPlayerIndex, ReturnValue) == 0x000010, "Member 'TedPlayerData_GetByPlayerIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.AddCredits
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_AddCredits final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOverflow;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_AddCredits) == 0x000004, "Wrong alignment on TedPlayerData_AddCredits");
static_assert(sizeof(TedPlayerData_AddCredits) == 0x000008, "Wrong size on TedPlayerData_AddCredits");
static_assert(offsetof(TedPlayerData_AddCredits, InValue) == 0x000000, "Member 'TedPlayerData_AddCredits::InValue' has a wrong offset!");
static_assert(offsetof(TedPlayerData_AddCredits, bInOverflow) == 0x000004, "Member 'TedPlayerData_AddCredits::bInOverflow' has a wrong offset!");

// Function Tempest.TedPlayerData.AddCreditsCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_AddCreditsCap final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_AddCreditsCap) == 0x000004, "Wrong alignment on TedPlayerData_AddCreditsCap");
static_assert(sizeof(TedPlayerData_AddCreditsCap) == 0x000004, "Wrong size on TedPlayerData_AddCreditsCap");
static_assert(offsetof(TedPlayerData_AddCreditsCap, InValue) == 0x000000, "Member 'TedPlayerData_AddCreditsCap::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.AddIntel
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_AddIntel final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_AddIntel) == 0x000004, "Wrong alignment on TedPlayerData_AddIntel");
static_assert(sizeof(TedPlayerData_AddIntel) == 0x000004, "Wrong size on TedPlayerData_AddIntel");
static_assert(offsetof(TedPlayerData_AddIntel, InValue) == 0x000000, "Member 'TedPlayerData_AddIntel::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.AddPower
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_AddPower final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_AddPower) == 0x000004, "Wrong alignment on TedPlayerData_AddPower");
static_assert(sizeof(TedPlayerData_AddPower) == 0x000004, "Wrong size on TedPlayerData_AddPower");
static_assert(offsetof(TedPlayerData_AddPower, InValue) == 0x000000, "Member 'TedPlayerData_AddPower::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.AddPowerConsumption
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_AddPowerConsumption final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_AddPowerConsumption) == 0x000004, "Wrong alignment on TedPlayerData_AddPowerConsumption");
static_assert(sizeof(TedPlayerData_AddPowerConsumption) == 0x000004, "Wrong size on TedPlayerData_AddPowerConsumption");
static_assert(offsetof(TedPlayerData_AddPowerConsumption, InValue) == 0x000000, "Member 'TedPlayerData_AddPowerConsumption::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.Client_ProductionCompleted
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_Client_ProductionCompleted final
{
public:
	const class UTedEntityDefinitionAsset*        InProducedPawnDefinitionAsset;                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InCreditsSpent;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTelemetryCreditsSource                    InCreditsSource;                                   // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_Client_ProductionCompleted) == 0x000008, "Wrong alignment on TedPlayerData_Client_ProductionCompleted");
static_assert(sizeof(TedPlayerData_Client_ProductionCompleted) == 0x000010, "Wrong size on TedPlayerData_Client_ProductionCompleted");
static_assert(offsetof(TedPlayerData_Client_ProductionCompleted, InProducedPawnDefinitionAsset) == 0x000000, "Member 'TedPlayerData_Client_ProductionCompleted::InProducedPawnDefinitionAsset' has a wrong offset!");
static_assert(offsetof(TedPlayerData_Client_ProductionCompleted, InCreditsSpent) == 0x000008, "Member 'TedPlayerData_Client_ProductionCompleted::InCreditsSpent' has a wrong offset!");
static_assert(offsetof(TedPlayerData_Client_ProductionCompleted, InCreditsSource) == 0x00000C, "Member 'TedPlayerData_Client_ProductionCompleted::InCreditsSource' has a wrong offset!");

// Function Tempest.TedPlayerData.Client_ResourceChanged
// 0x000C (0x000C - 0x0000)
struct TedPlayerData_Client_ResourceChanged final
{
public:
	ETedResourceType                              InResourceType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InResourceDelta;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedResourceChangeReason                      InReason;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_Client_ResourceChanged) == 0x000004, "Wrong alignment on TedPlayerData_Client_ResourceChanged");
static_assert(sizeof(TedPlayerData_Client_ResourceChanged) == 0x00000C, "Wrong size on TedPlayerData_Client_ResourceChanged");
static_assert(offsetof(TedPlayerData_Client_ResourceChanged, InResourceType) == 0x000000, "Member 'TedPlayerData_Client_ResourceChanged::InResourceType' has a wrong offset!");
static_assert(offsetof(TedPlayerData_Client_ResourceChanged, InResourceDelta) == 0x000004, "Member 'TedPlayerData_Client_ResourceChanged::InResourceDelta' has a wrong offset!");
static_assert(offsetof(TedPlayerData_Client_ResourceChanged, InReason) == 0x000008, "Member 'TedPlayerData_Client_ResourceChanged::InReason' has a wrong offset!");

// Function Tempest.TedPlayerData.Client_SellStructure
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_Client_SellStructure final
{
public:
	class ATedStructureBase*                      InStructure;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_Client_SellStructure) == 0x000008, "Wrong alignment on TedPlayerData_Client_SellStructure");
static_assert(sizeof(TedPlayerData_Client_SellStructure) == 0x000008, "Wrong size on TedPlayerData_Client_SellStructure");
static_assert(offsetof(TedPlayerData_Client_SellStructure, InStructure) == 0x000000, "Member 'TedPlayerData_Client_SellStructure::InStructure' has a wrong offset!");

// Function Tempest.TedPlayerData.ClientNotifyStructuresBuild
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_ClientNotifyStructuresBuild final
{
public:
	TArray<struct FPendingBuildCompletedNotify>   DefinitionIds;                                     // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ClientNotifyStructuresBuild) == 0x000008, "Wrong alignment on TedPlayerData_ClientNotifyStructuresBuild");
static_assert(sizeof(TedPlayerData_ClientNotifyStructuresBuild) == 0x000010, "Wrong size on TedPlayerData_ClientNotifyStructuresBuild");
static_assert(offsetof(TedPlayerData_ClientNotifyStructuresBuild, DefinitionIds) == 0x000000, "Member 'TedPlayerData_ClientNotifyStructuresBuild::DefinitionIds' has a wrong offset!");

// Function Tempest.TedPlayerData.ClientOnIntelMarked
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_ClientOnIntelMarked final
{
public:
	class FString                                 UnitID;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ClientOnIntelMarked) == 0x000008, "Wrong alignment on TedPlayerData_ClientOnIntelMarked");
static_assert(sizeof(TedPlayerData_ClientOnIntelMarked) == 0x000010, "Wrong size on TedPlayerData_ClientOnIntelMarked");
static_assert(offsetof(TedPlayerData_ClientOnIntelMarked, UnitID) == 0x000000, "Member 'TedPlayerData_ClientOnIntelMarked::UnitID' has a wrong offset!");

// Function Tempest.TedPlayerData.ClientPlayAnnouncements
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_ClientPlayAnnouncements final
{
public:
	TArray<struct FTedPlayerDataPendingAnnouncement> InAnnouncements;                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ClientPlayAnnouncements) == 0x000008, "Wrong alignment on TedPlayerData_ClientPlayAnnouncements");
static_assert(sizeof(TedPlayerData_ClientPlayAnnouncements) == 0x000010, "Wrong size on TedPlayerData_ClientPlayAnnouncements");
static_assert(offsetof(TedPlayerData_ClientPlayAnnouncements, InAnnouncements) == 0x000000, "Member 'TedPlayerData_ClientPlayAnnouncements::InAnnouncements' has a wrong offset!");

// Function Tempest.TedPlayerData.OnOtherPawnDestroyed_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_OnOtherPawnDestroyed_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_OnOtherPawnDestroyed_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnOtherPawnDestroyed_Handler");
static_assert(sizeof(TedPlayerData_OnOtherPawnDestroyed_Handler) == 0x000008, "Wrong size on TedPlayerData_OnOtherPawnDestroyed_Handler");
static_assert(offsetof(TedPlayerData_OnOtherPawnDestroyed_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnOtherPawnDestroyed_Handler::InActor' has a wrong offset!");

// Function Tempest.TedPlayerData.OnOtherPawnEndPlay_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_OnOtherPawnEndPlay_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_OnOtherPawnEndPlay_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnOtherPawnEndPlay_Handler");
static_assert(sizeof(TedPlayerData_OnOtherPawnEndPlay_Handler) == 0x000010, "Wrong size on TedPlayerData_OnOtherPawnEndPlay_Handler");
static_assert(offsetof(TedPlayerData_OnOtherPawnEndPlay_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnOtherPawnEndPlay_Handler::InActor' has a wrong offset!");
static_assert(offsetof(TedPlayerData_OnOtherPawnEndPlay_Handler, InEndPlayReason) == 0x000008, "Member 'TedPlayerData_OnOtherPawnEndPlay_Handler::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedPlayerData.OnRep_ConstructionQueues
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerData_OnRep_ConstructionQueues final
{
public:
	struct FTedPlayerDataConstructionQueues       OldConstructionQueues;                             // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_OnRep_ConstructionQueues) == 0x000008, "Wrong alignment on TedPlayerData_OnRep_ConstructionQueues");
static_assert(sizeof(TedPlayerData_OnRep_ConstructionQueues) == 0x000018, "Wrong size on TedPlayerData_OnRep_ConstructionQueues");
static_assert(offsetof(TedPlayerData_OnRep_ConstructionQueues, OldConstructionQueues) == 0x000000, "Member 'TedPlayerData_OnRep_ConstructionQueues::OldConstructionQueues' has a wrong offset!");

// Function Tempest.TedPlayerData.OnStructureDestroyed_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_OnStructureDestroyed_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_OnStructureDestroyed_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnStructureDestroyed_Handler");
static_assert(sizeof(TedPlayerData_OnStructureDestroyed_Handler) == 0x000008, "Wrong size on TedPlayerData_OnStructureDestroyed_Handler");
static_assert(offsetof(TedPlayerData_OnStructureDestroyed_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnStructureDestroyed_Handler::InActor' has a wrong offset!");

// Function Tempest.TedPlayerData.OnStructureEndPlay_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_OnStructureEndPlay_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_OnStructureEndPlay_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnStructureEndPlay_Handler");
static_assert(sizeof(TedPlayerData_OnStructureEndPlay_Handler) == 0x000010, "Wrong size on TedPlayerData_OnStructureEndPlay_Handler");
static_assert(offsetof(TedPlayerData_OnStructureEndPlay_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnStructureEndPlay_Handler::InActor' has a wrong offset!");
static_assert(offsetof(TedPlayerData_OnStructureEndPlay_Handler, InEndPlayReason) == 0x000008, "Member 'TedPlayerData_OnStructureEndPlay_Handler::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedPlayerData.OnUnitDestroyed_Handler
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_OnUnitDestroyed_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_OnUnitDestroyed_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnUnitDestroyed_Handler");
static_assert(sizeof(TedPlayerData_OnUnitDestroyed_Handler) == 0x000008, "Wrong size on TedPlayerData_OnUnitDestroyed_Handler");
static_assert(offsetof(TedPlayerData_OnUnitDestroyed_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnUnitDestroyed_Handler::InActor' has a wrong offset!");

// Function Tempest.TedPlayerData.OnUnitEndPlay_Handler
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_OnUnitEndPlay_Handler final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_OnUnitEndPlay_Handler) == 0x000008, "Wrong alignment on TedPlayerData_OnUnitEndPlay_Handler");
static_assert(sizeof(TedPlayerData_OnUnitEndPlay_Handler) == 0x000010, "Wrong size on TedPlayerData_OnUnitEndPlay_Handler");
static_assert(offsetof(TedPlayerData_OnUnitEndPlay_Handler, InActor) == 0x000000, "Member 'TedPlayerData_OnUnitEndPlay_Handler::InActor' has a wrong offset!");
static_assert(offsetof(TedPlayerData_OnUnitEndPlay_Handler, InEndPlayReason) == 0x000008, "Member 'TedPlayerData_OnUnitEndPlay_Handler::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedPlayerData.RegisterInfluenceAreaProvider
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_RegisterInfluenceAreaProvider final
{
public:
	class ATedPawn*                               InPawnProvider;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_RegisterInfluenceAreaProvider) == 0x000008, "Wrong alignment on TedPlayerData_RegisterInfluenceAreaProvider");
static_assert(sizeof(TedPlayerData_RegisterInfluenceAreaProvider) == 0x000008, "Wrong size on TedPlayerData_RegisterInfluenceAreaProvider");
static_assert(offsetof(TedPlayerData_RegisterInfluenceAreaProvider, InPawnProvider) == 0x000000, "Member 'TedPlayerData_RegisterInfluenceAreaProvider::InPawnProvider' has a wrong offset!");

// Function Tempest.TedPlayerData.ServerDebugAddCredits
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_ServerDebugAddCredits final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ServerDebugAddCredits) == 0x000004, "Wrong alignment on TedPlayerData_ServerDebugAddCredits");
static_assert(sizeof(TedPlayerData_ServerDebugAddCredits) == 0x000004, "Wrong size on TedPlayerData_ServerDebugAddCredits");
static_assert(offsetof(TedPlayerData_ServerDebugAddCredits, InValue) == 0x000000, "Member 'TedPlayerData_ServerDebugAddCredits::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.ServerDebugAddCreditsCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_ServerDebugAddCreditsCap final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ServerDebugAddCreditsCap) == 0x000004, "Wrong alignment on TedPlayerData_ServerDebugAddCreditsCap");
static_assert(sizeof(TedPlayerData_ServerDebugAddCreditsCap) == 0x000004, "Wrong size on TedPlayerData_ServerDebugAddCreditsCap");
static_assert(offsetof(TedPlayerData_ServerDebugAddCreditsCap, InValue) == 0x000000, "Member 'TedPlayerData_ServerDebugAddCreditsCap::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.ServerDebugAddIntel
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_ServerDebugAddIntel final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ServerDebugAddIntel) == 0x000004, "Wrong alignment on TedPlayerData_ServerDebugAddIntel");
static_assert(sizeof(TedPlayerData_ServerDebugAddIntel) == 0x000004, "Wrong size on TedPlayerData_ServerDebugAddIntel");
static_assert(offsetof(TedPlayerData_ServerDebugAddIntel, InValue) == 0x000000, "Member 'TedPlayerData_ServerDebugAddIntel::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.ServerDebugAddPower
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_ServerDebugAddPower final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_ServerDebugAddPower) == 0x000004, "Wrong alignment on TedPlayerData_ServerDebugAddPower");
static_assert(sizeof(TedPlayerData_ServerDebugAddPower) == 0x000004, "Wrong size on TedPlayerData_ServerDebugAddPower");
static_assert(offsetof(TedPlayerData_ServerDebugAddPower, InValue) == 0x000000, "Member 'TedPlayerData_ServerDebugAddPower::InValue' has a wrong offset!");

// Function Tempest.TedPlayerData.UnregisterInfluenceAreaProvider
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_UnregisterInfluenceAreaProvider final
{
public:
	class ATedPawn*                               InPawnProvider;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_UnregisterInfluenceAreaProvider) == 0x000008, "Wrong alignment on TedPlayerData_UnregisterInfluenceAreaProvider");
static_assert(sizeof(TedPlayerData_UnregisterInfluenceAreaProvider) == 0x000008, "Wrong size on TedPlayerData_UnregisterInfluenceAreaProvider");
static_assert(offsetof(TedPlayerData_UnregisterInfluenceAreaProvider, InPawnProvider) == 0x000000, "Member 'TedPlayerData_UnregisterInfluenceAreaProvider::InPawnProvider' has a wrong offset!");

// Function Tempest.TedPlayerData.AllowPlayerCommands
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_AllowPlayerCommands final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_AllowPlayerCommands) == 0x000001, "Wrong alignment on TedPlayerData_AllowPlayerCommands");
static_assert(sizeof(TedPlayerData_AllowPlayerCommands) == 0x000001, "Wrong size on TedPlayerData_AllowPlayerCommands");
static_assert(offsetof(TedPlayerData_AllowPlayerCommands, ReturnValue) == 0x000000, "Member 'TedPlayerData_AllowPlayerCommands::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetCommandoLimit
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetCommandoLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetCommandoLimit) == 0x000004, "Wrong alignment on TedPlayerData_GetCommandoLimit");
static_assert(sizeof(TedPlayerData_GetCommandoLimit) == 0x000004, "Wrong size on TedPlayerData_GetCommandoLimit");
static_assert(offsetof(TedPlayerData_GetCommandoLimit, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetCommandoLimit::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetCommandoRefs
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_GetCommandoRefs final
{
public:
	TArray<class ATedUnitBase*>                   OutCommandoRefs;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetCommandoRefs) == 0x000008, "Wrong alignment on TedPlayerData_GetCommandoRefs");
static_assert(sizeof(TedPlayerData_GetCommandoRefs) == 0x000010, "Wrong size on TedPlayerData_GetCommandoRefs");
static_assert(offsetof(TedPlayerData_GetCommandoRefs, OutCommandoRefs) == 0x000000, "Member 'TedPlayerData_GetCommandoRefs::OutCommandoRefs' has a wrong offset!");

// Function Tempest.TedPlayerData.GetCredits
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetCredits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetCredits) == 0x000004, "Wrong alignment on TedPlayerData_GetCredits");
static_assert(sizeof(TedPlayerData_GetCredits) == 0x000004, "Wrong size on TedPlayerData_GetCredits");
static_assert(offsetof(TedPlayerData_GetCredits, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetCreditsCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetCreditsCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetCreditsCap) == 0x000004, "Wrong alignment on TedPlayerData_GetCreditsCap");
static_assert(sizeof(TedPlayerData_GetCreditsCap) == 0x000004, "Wrong size on TedPlayerData_GetCreditsCap");
static_assert(offsetof(TedPlayerData_GetCreditsCap, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetCreditsCap::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetCreditsPct
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetCreditsPct final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetCreditsPct) == 0x000004, "Wrong alignment on TedPlayerData_GetCreditsPct");
static_assert(sizeof(TedPlayerData_GetCreditsPct) == 0x000004, "Wrong size on TedPlayerData_GetCreditsPct");
static_assert(offsetof(TedPlayerData_GetCreditsPct, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetCreditsPct::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetIntel
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetIntel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetIntel) == 0x000004, "Wrong alignment on TedPlayerData_GetIntel");
static_assert(sizeof(TedPlayerData_GetIntel) == 0x000004, "Wrong size on TedPlayerData_GetIntel");
static_assert(offsetof(TedPlayerData_GetIntel, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetIntel::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetLockedTechData
// 0x0028 (0x0028 - 0x0000)
struct TedPlayerData_GetLockedTechData final
{
public:
	struct FTedPlayerLockedTechData               ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetLockedTechData) == 0x000008, "Wrong alignment on TedPlayerData_GetLockedTechData");
static_assert(sizeof(TedPlayerData_GetLockedTechData) == 0x000028, "Wrong size on TedPlayerData_GetLockedTechData");
static_assert(offsetof(TedPlayerData_GetLockedTechData, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetLockedTechData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedStructure_ByDefinition
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerData_GetOwnedStructure_ByDefinition final
{
public:
	TSoftObjectPtr<class UTedEntityDefinitionAsset> InDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwnedStructure_ByDefinition) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedStructure_ByDefinition");
static_assert(sizeof(TedPlayerData_GetOwnedStructure_ByDefinition) == 0x000030, "Wrong size on TedPlayerData_GetOwnedStructure_ByDefinition");
static_assert(offsetof(TedPlayerData_GetOwnedStructure_ByDefinition, InDefinition) == 0x000000, "Member 'TedPlayerData_GetOwnedStructure_ByDefinition::InDefinition' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructure_ByDefinition, ReturnValue) == 0x000028, "Member 'TedPlayerData_GetOwnedStructure_ByDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedStructure_ByTag
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_GetOwnedStructure_ByTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwnedStructure_ByTag) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedStructure_ByTag");
static_assert(sizeof(TedPlayerData_GetOwnedStructure_ByTag) == 0x000010, "Wrong size on TedPlayerData_GetOwnedStructure_ByTag");
static_assert(offsetof(TedPlayerData_GetOwnedStructure_ByTag, InTag) == 0x000000, "Member 'TedPlayerData_GetOwnedStructure_ByTag::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructure_ByTag, ReturnValue) == 0x000008, "Member 'TedPlayerData_GetOwnedStructure_ByTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedStructures
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerData_GetOwnedStructures final
{
public:
	TArray<class ATedStructureBase*>              OutStructures;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedStructures) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedStructures");
static_assert(sizeof(TedPlayerData_GetOwnedStructures) == 0x000018, "Wrong size on TedPlayerData_GetOwnedStructures");
static_assert(offsetof(TedPlayerData_GetOwnedStructures, OutStructures) == 0x000000, "Member 'TedPlayerData_GetOwnedStructures::OutStructures' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructures, ReturnValue) == 0x000010, "Member 'TedPlayerData_GetOwnedStructures::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedStructures_ByDefinition
// 0x0040 (0x0040 - 0x0000)
struct TedPlayerData_GetOwnedStructures_ByDefinition final
{
public:
	TSoftObjectPtr<class UTedEntityDefinitionAsset> InDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedStructureBase*>              OutStructures;                                     // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedStructures_ByDefinition) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedStructures_ByDefinition");
static_assert(sizeof(TedPlayerData_GetOwnedStructures_ByDefinition) == 0x000040, "Wrong size on TedPlayerData_GetOwnedStructures_ByDefinition");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByDefinition, InDefinition) == 0x000000, "Member 'TedPlayerData_GetOwnedStructures_ByDefinition::InDefinition' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByDefinition, OutStructures) == 0x000028, "Member 'TedPlayerData_GetOwnedStructures_ByDefinition::OutStructures' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByDefinition, ReturnValue) == 0x000038, "Member 'TedPlayerData_GetOwnedStructures_ByDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedStructures_ByTag
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerData_GetOwnedStructures_ByTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedStructureBase*>              OutStructures;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedStructures_ByTag) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedStructures_ByTag");
static_assert(sizeof(TedPlayerData_GetOwnedStructures_ByTag) == 0x000020, "Wrong size on TedPlayerData_GetOwnedStructures_ByTag");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByTag, InTag) == 0x000000, "Member 'TedPlayerData_GetOwnedStructures_ByTag::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByTag, OutStructures) == 0x000008, "Member 'TedPlayerData_GetOwnedStructures_ByTag::OutStructures' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedStructures_ByTag, ReturnValue) == 0x000018, "Member 'TedPlayerData_GetOwnedStructures_ByTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedTags
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerData_GetOwnedTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwnedTags) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedTags");
static_assert(sizeof(TedPlayerData_GetOwnedTags) == 0x000020, "Wrong size on TedPlayerData_GetOwnedTags");
static_assert(offsetof(TedPlayerData_GetOwnedTags, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetOwnedTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedUnit_ByDefinition
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerData_GetOwnedUnit_ByDefinition final
{
public:
	TSoftObjectPtr<class UTedEntityDefinitionAsset> InDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwnedUnit_ByDefinition) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedUnit_ByDefinition");
static_assert(sizeof(TedPlayerData_GetOwnedUnit_ByDefinition) == 0x000030, "Wrong size on TedPlayerData_GetOwnedUnit_ByDefinition");
static_assert(offsetof(TedPlayerData_GetOwnedUnit_ByDefinition, InDefinition) == 0x000000, "Member 'TedPlayerData_GetOwnedUnit_ByDefinition::InDefinition' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnit_ByDefinition, ReturnValue) == 0x000028, "Member 'TedPlayerData_GetOwnedUnit_ByDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedUnit_ByTag
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_GetOwnedUnit_ByTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwnedUnit_ByTag) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedUnit_ByTag");
static_assert(sizeof(TedPlayerData_GetOwnedUnit_ByTag) == 0x000010, "Wrong size on TedPlayerData_GetOwnedUnit_ByTag");
static_assert(offsetof(TedPlayerData_GetOwnedUnit_ByTag, InTag) == 0x000000, "Member 'TedPlayerData_GetOwnedUnit_ByTag::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnit_ByTag, ReturnValue) == 0x000008, "Member 'TedPlayerData_GetOwnedUnit_ByTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedUnits
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerData_GetOwnedUnits final
{
public:
	TArray<class ATedUnitBase*>                   OutUnits;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedUnits) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedUnits");
static_assert(sizeof(TedPlayerData_GetOwnedUnits) == 0x000018, "Wrong size on TedPlayerData_GetOwnedUnits");
static_assert(offsetof(TedPlayerData_GetOwnedUnits, OutUnits) == 0x000000, "Member 'TedPlayerData_GetOwnedUnits::OutUnits' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnits, ReturnValue) == 0x000010, "Member 'TedPlayerData_GetOwnedUnits::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedUnits_ByDefinition
// 0x0040 (0x0040 - 0x0000)
struct TedPlayerData_GetOwnedUnits_ByDefinition final
{
public:
	TSoftObjectPtr<class UTedEntityDefinitionAsset> InDefinition;                                    // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   OutUnits;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedUnits_ByDefinition) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedUnits_ByDefinition");
static_assert(sizeof(TedPlayerData_GetOwnedUnits_ByDefinition) == 0x000040, "Wrong size on TedPlayerData_GetOwnedUnits_ByDefinition");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByDefinition, InDefinition) == 0x000000, "Member 'TedPlayerData_GetOwnedUnits_ByDefinition::InDefinition' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByDefinition, OutUnits) == 0x000028, "Member 'TedPlayerData_GetOwnedUnits_ByDefinition::OutUnits' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByDefinition, ReturnValue) == 0x000038, "Member 'TedPlayerData_GetOwnedUnits_ByDefinition::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwnedUnits_ByTag
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerData_GetOwnedUnits_ByTag final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedUnitBase*>                   OutUnits;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_GetOwnedUnits_ByTag) == 0x000008, "Wrong alignment on TedPlayerData_GetOwnedUnits_ByTag");
static_assert(sizeof(TedPlayerData_GetOwnedUnits_ByTag) == 0x000020, "Wrong size on TedPlayerData_GetOwnedUnits_ByTag");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByTag, InTag) == 0x000000, "Member 'TedPlayerData_GetOwnedUnits_ByTag::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByTag, OutUnits) == 0x000008, "Member 'TedPlayerData_GetOwnedUnits_ByTag::OutUnits' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetOwnedUnits_ByTag, ReturnValue) == 0x000018, "Member 'TedPlayerData_GetOwnedUnits_ByTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetOwningPlayerState
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_GetOwningPlayerState final
{
public:
	class ATedPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetOwningPlayerState) == 0x000008, "Wrong alignment on TedPlayerData_GetOwningPlayerState");
static_assert(sizeof(TedPlayerData_GetOwningPlayerState) == 0x000008, "Wrong size on TedPlayerData_GetOwningPlayerState");
static_assert(offsetof(TedPlayerData_GetOwningPlayerState, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetOwningPlayerState::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_GetPlayerName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetPlayerName) == 0x000008, "Wrong alignment on TedPlayerData_GetPlayerName");
static_assert(sizeof(TedPlayerData_GetPlayerName) == 0x000010, "Wrong size on TedPlayerData_GetPlayerName");
static_assert(offsetof(TedPlayerData_GetPlayerName, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetPopulation
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetPopulation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetPopulation) == 0x000004, "Wrong alignment on TedPlayerData_GetPopulation");
static_assert(sizeof(TedPlayerData_GetPopulation) == 0x000004, "Wrong size on TedPlayerData_GetPopulation");
static_assert(offsetof(TedPlayerData_GetPopulation, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetPopulation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetPopulationCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetPopulationCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetPopulationCap) == 0x000004, "Wrong alignment on TedPlayerData_GetPopulationCap");
static_assert(sizeof(TedPlayerData_GetPopulationCap) == 0x000004, "Wrong size on TedPlayerData_GetPopulationCap");
static_assert(offsetof(TedPlayerData_GetPopulationCap, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetPopulationCap::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetPower
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetPower final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetPower) == 0x000004, "Wrong alignment on TedPlayerData_GetPower");
static_assert(sizeof(TedPlayerData_GetPower) == 0x000004, "Wrong size on TedPlayerData_GetPower");
static_assert(offsetof(TedPlayerData_GetPower, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetPowerConsumption
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetPowerConsumption final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetPowerConsumption) == 0x000004, "Wrong alignment on TedPlayerData_GetPowerConsumption");
static_assert(sizeof(TedPlayerData_GetPowerConsumption) == 0x000004, "Wrong size on TedPlayerData_GetPowerConsumption");
static_assert(offsetof(TedPlayerData_GetPowerConsumption, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetPowerConsumption::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetResources
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerData_GetResources final
{
public:
	struct FTedPlayerDataResources                ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetResources) == 0x000004, "Wrong alignment on TedPlayerData_GetResources");
static_assert(sizeof(TedPlayerData_GetResources) == 0x000020, "Wrong size on TedPlayerData_GetResources");
static_assert(offsetof(TedPlayerData_GetResources, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetResources::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetSparePopulation
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_GetSparePopulation final
{
public:
	bool                                          bInIgnoreUpcomingPopulation;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAlwaysCountPopulation;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetSparePopulation) == 0x000004, "Wrong alignment on TedPlayerData_GetSparePopulation");
static_assert(sizeof(TedPlayerData_GetSparePopulation) == 0x000008, "Wrong size on TedPlayerData_GetSparePopulation");
static_assert(offsetof(TedPlayerData_GetSparePopulation, bInIgnoreUpcomingPopulation) == 0x000000, "Member 'TedPlayerData_GetSparePopulation::bInIgnoreUpcomingPopulation' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetSparePopulation, bUseAlwaysCountPopulation) == 0x000001, "Member 'TedPlayerData_GetSparePopulation::bUseAlwaysCountPopulation' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetSparePopulation, ReturnValue) == 0x000004, "Member 'TedPlayerData_GetSparePopulation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetSpecialistLimit
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetSpecialistLimit final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetSpecialistLimit) == 0x000004, "Wrong alignment on TedPlayerData_GetSpecialistLimit");
static_assert(sizeof(TedPlayerData_GetSpecialistLimit) == 0x000004, "Wrong size on TedPlayerData_GetSpecialistLimit");
static_assert(offsetof(TedPlayerData_GetSpecialistLimit, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetSpecialistLimit::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetSpecialistRefs
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_GetSpecialistRefs final
{
public:
	TArray<class ATedUnitBase*>                   OutSpecialistRefs;                                 // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetSpecialistRefs) == 0x000008, "Wrong alignment on TedPlayerData_GetSpecialistRefs");
static_assert(sizeof(TedPlayerData_GetSpecialistRefs) == 0x000010, "Wrong size on TedPlayerData_GetSpecialistRefs");
static_assert(offsetof(TedPlayerData_GetSpecialistRefs, OutSpecialistRefs) == 0x000000, "Member 'TedPlayerData_GetSpecialistRefs::OutSpecialistRefs' has a wrong offset!");

// Function Tempest.TedPlayerData.GetSpecialistsQueued
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerData_GetSpecialistsQueued final
{
public:
	int32                                         OutAmountSpecialists;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAmountCommandos;                                // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetSpecialistsQueued) == 0x000004, "Wrong alignment on TedPlayerData_GetSpecialistsQueued");
static_assert(sizeof(TedPlayerData_GetSpecialistsQueued) == 0x000008, "Wrong size on TedPlayerData_GetSpecialistsQueued");
static_assert(offsetof(TedPlayerData_GetSpecialistsQueued, OutAmountSpecialists) == 0x000000, "Member 'TedPlayerData_GetSpecialistsQueued::OutAmountSpecialists' has a wrong offset!");
static_assert(offsetof(TedPlayerData_GetSpecialistsQueued, OutAmountCommandos) == 0x000004, "Member 'TedPlayerData_GetSpecialistsQueued::OutAmountCommandos' has a wrong offset!");

// Function Tempest.TedPlayerData.GetUnusedPower
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetUnusedPower final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetUnusedPower) == 0x000004, "Wrong alignment on TedPlayerData_GetUnusedPower");
static_assert(sizeof(TedPlayerData_GetUnusedPower) == 0x000004, "Wrong size on TedPlayerData_GetUnusedPower");
static_assert(offsetof(TedPlayerData_GetUnusedPower, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetUnusedPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetUnusedPowerTillPlentyPowerThreshold
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold) == 0x000004, "Wrong alignment on TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold");
static_assert(sizeof(TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold) == 0x000004, "Wrong size on TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold");
static_assert(offsetof(TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetUnusedPowerTillPlentyPowerThreshold::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.GetUpcomingPopulation
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerData_GetUpcomingPopulation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_GetUpcomingPopulation) == 0x000004, "Wrong alignment on TedPlayerData_GetUpcomingPopulation");
static_assert(sizeof(TedPlayerData_GetUpcomingPopulation) == 0x000004, "Wrong size on TedPlayerData_GetUpcomingPopulation");
static_assert(offsetof(TedPlayerData_GetUpcomingPopulation, ReturnValue) == 0x000000, "Member 'TedPlayerData_GetUpcomingPopulation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.HasCredits
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_HasCredits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_HasCredits) == 0x000001, "Wrong alignment on TedPlayerData_HasCredits");
static_assert(sizeof(TedPlayerData_HasCredits) == 0x000001, "Wrong size on TedPlayerData_HasCredits");
static_assert(offsetof(TedPlayerData_HasCredits, ReturnValue) == 0x000000, "Member 'TedPlayerData_HasCredits::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.HasPower
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_HasPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_HasPower) == 0x000001, "Wrong alignment on TedPlayerData_HasPower");
static_assert(sizeof(TedPlayerData_HasPower) == 0x000001, "Wrong size on TedPlayerData_HasPower");
static_assert(offsetof(TedPlayerData_HasPower, ReturnValue) == 0x000000, "Member 'TedPlayerData_HasPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.HasPowerConsumption
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_HasPowerConsumption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_HasPowerConsumption) == 0x000001, "Wrong alignment on TedPlayerData_HasPowerConsumption");
static_assert(sizeof(TedPlayerData_HasPowerConsumption) == 0x000001, "Wrong size on TedPlayerData_HasPowerConsumption");
static_assert(offsetof(TedPlayerData_HasPowerConsumption, ReturnValue) == 0x000000, "Member 'TedPlayerData_HasPowerConsumption::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.HasStructure
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_HasStructure final
{
public:
	const class ATedStructureBase*                InStructure;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_HasStructure) == 0x000008, "Wrong alignment on TedPlayerData_HasStructure");
static_assert(sizeof(TedPlayerData_HasStructure) == 0x000010, "Wrong size on TedPlayerData_HasStructure");
static_assert(offsetof(TedPlayerData_HasStructure, InStructure) == 0x000000, "Member 'TedPlayerData_HasStructure::InStructure' has a wrong offset!");
static_assert(offsetof(TedPlayerData_HasStructure, ReturnValue) == 0x000008, "Member 'TedPlayerData_HasStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.HasUnit
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_HasUnit final
{
public:
	const class ATedUnitBase*                     InUnit;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_HasUnit) == 0x000008, "Wrong alignment on TedPlayerData_HasUnit");
static_assert(sizeof(TedPlayerData_HasUnit) == 0x000010, "Wrong size on TedPlayerData_HasUnit");
static_assert(offsetof(TedPlayerData_HasUnit, InUnit) == 0x000000, "Member 'TedPlayerData_HasUnit::InUnit' has a wrong offset!");
static_assert(offsetof(TedPlayerData_HasUnit, ReturnValue) == 0x000008, "Member 'TedPlayerData_HasUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsBotPlayerData
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsBotPlayerData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsBotPlayerData) == 0x000001, "Wrong alignment on TedPlayerData_IsBotPlayerData");
static_assert(sizeof(TedPlayerData_IsBotPlayerData) == 0x000001, "Wrong size on TedPlayerData_IsBotPlayerData");
static_assert(offsetof(TedPlayerData_IsBotPlayerData, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsBotPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsDoctrineResearched
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_IsDoctrineResearched final
{
public:
	const class UTedDoctrineDefinition*           InDoctrine;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_IsDoctrineResearched) == 0x000008, "Wrong alignment on TedPlayerData_IsDoctrineResearched");
static_assert(sizeof(TedPlayerData_IsDoctrineResearched) == 0x000010, "Wrong size on TedPlayerData_IsDoctrineResearched");
static_assert(offsetof(TedPlayerData_IsDoctrineResearched, InDoctrine) == 0x000000, "Member 'TedPlayerData_IsDoctrineResearched::InDoctrine' has a wrong offset!");
static_assert(offsetof(TedPlayerData_IsDoctrineResearched, ReturnValue) == 0x000008, "Member 'TedPlayerData_IsDoctrineResearched::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsHumanPlayerData
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsHumanPlayerData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsHumanPlayerData) == 0x000001, "Wrong alignment on TedPlayerData_IsHumanPlayerData");
static_assert(sizeof(TedPlayerData_IsHumanPlayerData) == 0x000001, "Wrong size on TedPlayerData_IsHumanPlayerData");
static_assert(offsetof(TedPlayerData_IsHumanPlayerData, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsHumanPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsImmuneToLowPower
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsImmuneToLowPower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsImmuneToLowPower) == 0x000001, "Wrong alignment on TedPlayerData_IsImmuneToLowPower");
static_assert(sizeof(TedPlayerData_IsImmuneToLowPower) == 0x000001, "Wrong size on TedPlayerData_IsImmuneToLowPower");
static_assert(offsetof(TedPlayerData_IsImmuneToLowPower, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsImmuneToLowPower::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsInLowPowerMode
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsInLowPowerMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsInLowPowerMode) == 0x000001, "Wrong alignment on TedPlayerData_IsInLowPowerMode");
static_assert(sizeof(TedPlayerData_IsInLowPowerMode) == 0x000001, "Wrong size on TedPlayerData_IsInLowPowerMode");
static_assert(offsetof(TedPlayerData_IsInLowPowerMode, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsInLowPowerMode::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsIntelRelevant
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsIntelRelevant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsIntelRelevant) == 0x000001, "Wrong alignment on TedPlayerData_IsIntelRelevant");
static_assert(sizeof(TedPlayerData_IsIntelRelevant) == 0x000001, "Wrong size on TedPlayerData_IsIntelRelevant");
static_assert(offsetof(TedPlayerData_IsIntelRelevant, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsIntelRelevant::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsPowerLow
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsPowerLow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsPowerLow) == 0x000001, "Wrong alignment on TedPlayerData_IsPowerLow");
static_assert(sizeof(TedPlayerData_IsPowerLow) == 0x000001, "Wrong size on TedPlayerData_IsPowerLow");
static_assert(offsetof(TedPlayerData_IsPowerLow, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsPowerLow::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsPowerPlenty
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerData_IsPowerPlenty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerData_IsPowerPlenty) == 0x000001, "Wrong alignment on TedPlayerData_IsPowerPlenty");
static_assert(sizeof(TedPlayerData_IsPowerPlenty) == 0x000001, "Wrong size on TedPlayerData_IsPowerPlenty");
static_assert(offsetof(TedPlayerData_IsPowerPlenty, ReturnValue) == 0x000000, "Member 'TedPlayerData_IsPowerPlenty::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerData.IsRegisteredInfluenceAreaProvider
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerData_IsRegisteredInfluenceAreaProvider final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerData_IsRegisteredInfluenceAreaProvider) == 0x000008, "Wrong alignment on TedPlayerData_IsRegisteredInfluenceAreaProvider");
static_assert(sizeof(TedPlayerData_IsRegisteredInfluenceAreaProvider) == 0x000010, "Wrong size on TedPlayerData_IsRegisteredInfluenceAreaProvider");
static_assert(offsetof(TedPlayerData_IsRegisteredInfluenceAreaProvider, InPawn) == 0x000000, "Member 'TedPlayerData_IsRegisteredInfluenceAreaProvider::InPawn' has a wrong offset!");
static_assert(offsetof(TedPlayerData_IsRegisteredInfluenceAreaProvider, ReturnValue) == 0x000008, "Member 'TedPlayerData_IsRegisteredInfluenceAreaProvider::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.AddLockedTech_ByDefinitions
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> InDefinitions;                           // 0x0010(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions) == 0x000020, "Wrong size on TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions, InDefinitions) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByDefinitions::InDefinitions' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.AddLockedTech_ByTags
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InList;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags) == 0x000030, "Wrong size on TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags, InList) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_AddLockedTech_ByTags::InList' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.AddPlayerCredits
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataFunctionsLibrary_AddPlayerCredits final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInOverflow;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_AddPlayerCredits) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_AddPlayerCredits");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_AddPlayerCredits) == 0x000018, "Wrong size on TedPlayerDataFunctionsLibrary_AddPlayerCredits");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerCredits, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerCredits::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerCredits, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerCredits::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerCredits, InValue) == 0x00000C, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerCredits::InValue' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerCredits, bInOverflow) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerCredits::bInOverflow' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.AddPlayerIntel
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerDataFunctionsLibrary_AddPlayerIntel final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_AddPlayerIntel) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_AddPlayerIntel");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_AddPlayerIntel) == 0x000010, "Wrong size on TedPlayerDataFunctionsLibrary_AddPlayerIntel");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerIntel, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerIntel::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerIntel, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerIntel::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_AddPlayerIntel, InValue) == 0x00000C, "Member 'TedPlayerDataFunctionsLibrary_AddPlayerIntel::InValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.HasAllOwnedTags
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerDataFunctionsLibrary_HasAllOwnedTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InTags;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_HasAllOwnedTags");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags) == 0x000038, "Wrong size on TedPlayerDataFunctionsLibrary_HasAllOwnedTags");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_HasAllOwnedTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_HasAllOwnedTags::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags, InTags) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_HasAllOwnedTags::InTags' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAllOwnedTags, ReturnValue) == 0x000030, "Member 'TedPlayerDataFunctionsLibrary_HasAllOwnedTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.HasAnyOwnedTags
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerDataFunctionsLibrary_HasAnyOwnedTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InTags;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_HasAnyOwnedTags");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags) == 0x000038, "Wrong size on TedPlayerDataFunctionsLibrary_HasAnyOwnedTags");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_HasAnyOwnedTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_HasAnyOwnedTags::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags, InTags) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_HasAnyOwnedTags::InTags' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasAnyOwnedTags, ReturnValue) == 0x000030, "Member 'TedPlayerDataFunctionsLibrary_HasAnyOwnedTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.HasOwnedTag
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataFunctionsLibrary_HasOwnedTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InTag;                                             // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_HasOwnedTag) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_HasOwnedTag");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_HasOwnedTag) == 0x000018, "Wrong size on TedPlayerDataFunctionsLibrary_HasOwnedTag");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasOwnedTag, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_HasOwnedTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasOwnedTag, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_HasOwnedTag::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasOwnedTag, InTag) == 0x00000C, "Member 'TedPlayerDataFunctionsLibrary_HasOwnedTag::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_HasOwnedTag, ReturnValue) == 0x000014, "Member 'TedPlayerDataFunctionsLibrary_HasOwnedTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.IsTechLocked
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataFunctionsLibrary_IsTechLocked final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InTech;                                            // 0x000C(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_IsTechLocked) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_IsTechLocked");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_IsTechLocked) == 0x000018, "Wrong size on TedPlayerDataFunctionsLibrary_IsTechLocked");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLocked, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_IsTechLocked::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLocked, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_IsTechLocked::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLocked, InTech) == 0x00000C, "Member 'TedPlayerDataFunctionsLibrary_IsTechLocked::InTech' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLocked, ReturnValue) == 0x000014, "Member 'TedPlayerDataFunctionsLibrary_IsTechLocked::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.IsTechLockedMultiple
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerDataFunctionsLibrary_IsTechLockedMultiple final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InTech;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bInAny;                                            // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_IsTechLockedMultiple");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple) == 0x000038, "Wrong size on TedPlayerDataFunctionsLibrary_IsTechLockedMultiple");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_IsTechLockedMultiple::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_IsTechLockedMultiple::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple, InTech) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_IsTechLockedMultiple::InTech' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple, bInAny) == 0x000030, "Member 'TedPlayerDataFunctionsLibrary_IsTechLockedMultiple::bInAny' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_IsTechLockedMultiple, ReturnValue) == 0x000031, "Member 'TedPlayerDataFunctionsLibrary_IsTechLockedMultiple::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.RemoveLockedTech_ByDefinitions
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> InDefinitions;                           // 0x0010(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions) == 0x000020, "Wrong size on TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions, InDefinitions) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByDefinitions::InDefinitions' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.RemoveLockedTech_ByTags
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InList;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags) == 0x000030, "Wrong size on TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags, InList) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_RemoveLockedTech_ByTags::InList' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetAllowPlayerCommands
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAllow;                                          // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands) == 0x000010, "Wrong size on TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands, bInAllow) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetAllowPlayerCommands::bInAllow' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetAllPawnsOwner
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetAllPawnsOwner final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InSourcePlayer;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InTargetPlayer;                                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetAllPawnsOwner) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetAllPawnsOwner");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetAllPawnsOwner) == 0x000010, "Wrong size on TedPlayerDataFunctionsLibrary_SetAllPawnsOwner");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllPawnsOwner, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetAllPawnsOwner::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllPawnsOwner, InSourcePlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetAllPawnsOwner::InSourcePlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetAllPawnsOwner, InTargetPlayer) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetAllPawnsOwner::InTargetPlayer' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetLockedSupportPowers
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetLockedSupportPowers final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLock;                                             // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InCommandTypeTags;                                 // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetLockedSupportPowers");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers) == 0x000030, "Wrong size on TedPlayerDataFunctionsLibrary_SetLockedSupportPowers");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetLockedSupportPowers::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetLockedSupportPowers::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers, bLock) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetLockedSupportPowers::bLock' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedSupportPowers, InCommandTypeTags) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_SetLockedSupportPowers::InCommandTypeTags' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetLockedTechData_ByDefinitions
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerLockedTechMode                      InMode;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> InDefinitions;                           // 0x0010(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions) == 0x000020, "Wrong size on TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions, InMode) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions::InMode' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions, InDefinitions) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByDefinitions::InDefinitions' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetLockedTechData_ByTags
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerLockedTechMode                      InMode;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InList;                                            // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags) == 0x000030, "Wrong size on TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags, InMode) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags::InMode' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags, InList) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_SetLockedTechData_ByTags::InList' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetPawnOwner
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetPawnOwner final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPawn*                               InPawn;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetPawnOwner) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetPawnOwner");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetPawnOwner) == 0x000018, "Wrong size on TedPlayerDataFunctionsLibrary_SetPawnOwner");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnOwner, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetPawnOwner::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnOwner, InPawn) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetPawnOwner::InPawn' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnOwner, InPlayer) == 0x000010, "Member 'TedPlayerDataFunctionsLibrary_SetPawnOwner::InPlayer' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetPawnsOwner
// 0x0020 (0x0020 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetPawnsOwner final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       InPawns;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetPawnsOwner) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetPawnsOwner");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetPawnsOwner) == 0x000020, "Wrong size on TedPlayerDataFunctionsLibrary_SetPawnsOwner");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner, InPawns) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner::InPawns' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner, InPlayer) == 0x000018, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner::InPlayer' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetPawnsOwner_ActorTag
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InActorTags;                                       // 0x0008(0x0020)(Parm, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag) == 0x000030, "Wrong size on TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag, InActorTags) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag::InActorTags' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag, InPlayer) == 0x000028, "Member 'TedPlayerDataFunctionsLibrary_SetPawnsOwner_ActorTag::InPlayer' has a wrong offset!");

// Function Tempest.TedPlayerDataFunctionsLibrary.SetPlayerTeam
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerDataFunctionsLibrary_SetPlayerTeam final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayer;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTeamID                                    InTeam;                                            // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerDataFunctionsLibrary_SetPlayerTeam) == 0x000008, "Wrong alignment on TedPlayerDataFunctionsLibrary_SetPlayerTeam");
static_assert(sizeof(TedPlayerDataFunctionsLibrary_SetPlayerTeam) == 0x000010, "Wrong size on TedPlayerDataFunctionsLibrary_SetPlayerTeam");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPlayerTeam, InWorldContext) == 0x000000, "Member 'TedPlayerDataFunctionsLibrary_SetPlayerTeam::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPlayerTeam, InPlayer) == 0x000008, "Member 'TedPlayerDataFunctionsLibrary_SetPlayerTeam::InPlayer' has a wrong offset!");
static_assert(offsetof(TedPlayerDataFunctionsLibrary_SetPlayerTeam, InTeam) == 0x000009, "Member 'TedPlayerDataFunctionsLibrary_SetPlayerTeam::InTeam' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.K2_GetPlayerDataSettings
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_K2_GetPlayerDataSettings final
{
public:
	class UTedPlayerDataSettings*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_K2_GetPlayerDataSettings) == 0x000008, "Wrong alignment on TedPlayerDataSettings_K2_GetPlayerDataSettings");
static_assert(sizeof(TedPlayerDataSettings_K2_GetPlayerDataSettings) == 0x000008, "Wrong size on TedPlayerDataSettings_K2_GetPlayerDataSettings");
static_assert(offsetof(TedPlayerDataSettings_K2_GetPlayerDataSettings, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_K2_GetPlayerDataSettings::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetPlayerDataTagDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataSettings_GetPlayerDataTagDisplayName final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetPlayerDataTagDisplayName) == 0x000008, "Wrong alignment on TedPlayerDataSettings_GetPlayerDataTagDisplayName");
static_assert(sizeof(TedPlayerDataSettings_GetPlayerDataTagDisplayName) == 0x000018, "Wrong size on TedPlayerDataSettings_GetPlayerDataTagDisplayName");
static_assert(offsetof(TedPlayerDataSettings_GetPlayerDataTagDisplayName, InTag) == 0x000000, "Member 'TedPlayerDataSettings_GetPlayerDataTagDisplayName::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_GetPlayerDataTagDisplayName, ReturnValue) == 0x000008, "Member 'TedPlayerDataSettings_GetPlayerDataTagDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.CalculatePowerEfficiency
// 0x000C (0x000C - 0x0000)
struct TedPlayerDataSettings_CalculatePowerEfficiency final
{
public:
	int32                                         InPower;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPowerConsumption;                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_CalculatePowerEfficiency) == 0x000004, "Wrong alignment on TedPlayerDataSettings_CalculatePowerEfficiency");
static_assert(sizeof(TedPlayerDataSettings_CalculatePowerEfficiency) == 0x00000C, "Wrong size on TedPlayerDataSettings_CalculatePowerEfficiency");
static_assert(offsetof(TedPlayerDataSettings_CalculatePowerEfficiency, InPower) == 0x000000, "Member 'TedPlayerDataSettings_CalculatePowerEfficiency::InPower' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_CalculatePowerEfficiency, InPowerConsumption) == 0x000004, "Member 'TedPlayerDataSettings_CalculatePowerEfficiency::InPowerConsumption' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_CalculatePowerEfficiency, ReturnValue) == 0x000008, "Member 'TedPlayerDataSettings_CalculatePowerEfficiency::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetAllowInsufficientPowerTag
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetAllowInsufficientPowerTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetAllowInsufficientPowerTag) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetAllowInsufficientPowerTag");
static_assert(sizeof(TedPlayerDataSettings_GetAllowInsufficientPowerTag) == 0x000008, "Wrong size on TedPlayerDataSettings_GetAllowInsufficientPowerTag");
static_assert(offsetof(TedPlayerDataSettings_GetAllowInsufficientPowerTag, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetAllowInsufficientPowerTag::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetAnnouncement
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerDataSettings_GetAnnouncement final
{
public:
	ETedPlayerDataAnnouncement                    InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUnit;                                           // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetAnnouncement) == 0x000008, "Wrong alignment on TedPlayerDataSettings_GetAnnouncement");
static_assert(sizeof(TedPlayerDataSettings_GetAnnouncement) == 0x000030, "Wrong size on TedPlayerDataSettings_GetAnnouncement");
static_assert(offsetof(TedPlayerDataSettings_GetAnnouncement, InType) == 0x000000, "Member 'TedPlayerDataSettings_GetAnnouncement::InType' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_GetAnnouncement, bInUnit) == 0x000001, "Member 'TedPlayerDataSettings_GetAnnouncement::bInUnit' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_GetAnnouncement, ReturnValue) == 0x000008, "Member 'TedPlayerDataSettings_GetAnnouncement::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetCreditPerResourceUnit
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerDataSettings_GetCreditPerResourceUnit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetCreditPerResourceUnit) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetCreditPerResourceUnit");
static_assert(sizeof(TedPlayerDataSettings_GetCreditPerResourceUnit) == 0x000004, "Wrong size on TedPlayerDataSettings_GetCreditPerResourceUnit");
static_assert(offsetof(TedPlayerDataSettings_GetCreditPerResourceUnit, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetCreditPerResourceUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_AirAndSea
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_AirAndSea final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_AirAndSea) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_AirAndSea");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_AirAndSea) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_AirAndSea");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_AirAndSea, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_AirAndSea::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_Buildings
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_Buildings final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_Buildings) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_Buildings");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_Buildings) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_Buildings");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_Buildings, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_Buildings::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_Defenses
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_Defenses final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_Defenses) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_Defenses");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_Defenses) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_Defenses");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_Defenses, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_Defenses::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_Infantry
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_Infantry final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_Infantry) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_Infantry");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_Infantry) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_Infantry");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_Infantry, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_Infantry::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_PawnSpecific_Refinery
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_PawnSpecific_Refinery::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetFactoryType_Vehicles
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerDataSettings_GetFactoryType_Vehicles final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetFactoryType_Vehicles) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetFactoryType_Vehicles");
static_assert(sizeof(TedPlayerDataSettings_GetFactoryType_Vehicles) == 0x000008, "Wrong size on TedPlayerDataSettings_GetFactoryType_Vehicles");
static_assert(offsetof(TedPlayerDataSettings_GetFactoryType_Vehicles, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetFactoryType_Vehicles::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetIntelCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerDataSettings_GetIntelCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetIntelCap) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetIntelCap");
static_assert(sizeof(TedPlayerDataSettings_GetIntelCap) == 0x000004, "Wrong size on TedPlayerDataSettings_GetIntelCap");
static_assert(offsetof(TedPlayerDataSettings_GetIntelCap, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetIntelCap::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetPopulationCap
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerDataSettings_GetPopulationCap final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetPopulationCap) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetPopulationCap");
static_assert(sizeof(TedPlayerDataSettings_GetPopulationCap) == 0x000004, "Wrong size on TedPlayerDataSettings_GetPopulationCap");
static_assert(offsetof(TedPlayerDataSettings_GetPopulationCap, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetPopulationCap::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetSilosNeededAnnouncementThreshold
// 0x0004 (0x0004 - 0x0000)
struct TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold) == 0x000004, "Wrong alignment on TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold");
static_assert(sizeof(TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold) == 0x000004, "Wrong size on TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold");
static_assert(offsetof(TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_GetSilosNeededAnnouncementThreshold::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.GetTagDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerDataSettings_GetTagDisplayName final
{
public:
	struct FGameplayTag                           InTag;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_GetTagDisplayName) == 0x000008, "Wrong alignment on TedPlayerDataSettings_GetTagDisplayName");
static_assert(sizeof(TedPlayerDataSettings_GetTagDisplayName) == 0x000018, "Wrong size on TedPlayerDataSettings_GetTagDisplayName");
static_assert(offsetof(TedPlayerDataSettings_GetTagDisplayName, InTag) == 0x000000, "Member 'TedPlayerDataSettings_GetTagDisplayName::InTag' has a wrong offset!");
static_assert(offsetof(TedPlayerDataSettings_GetTagDisplayName, ReturnValue) == 0x000008, "Member 'TedPlayerDataSettings_GetTagDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.ShouldScaleRepairCost
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerDataSettings_ShouldScaleRepairCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_ShouldScaleRepairCost) == 0x000001, "Wrong alignment on TedPlayerDataSettings_ShouldScaleRepairCost");
static_assert(sizeof(TedPlayerDataSettings_ShouldScaleRepairCost) == 0x000001, "Wrong size on TedPlayerDataSettings_ShouldScaleRepairCost");
static_assert(offsetof(TedPlayerDataSettings_ShouldScaleRepairCost, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_ShouldScaleRepairCost::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerDataSettings.ShouldScaleSellValue
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerDataSettings_ShouldScaleSellValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerDataSettings_ShouldScaleSellValue) == 0x000001, "Wrong alignment on TedPlayerDataSettings_ShouldScaleSellValue");
static_assert(sizeof(TedPlayerDataSettings_ShouldScaleSellValue) == 0x000001, "Wrong size on TedPlayerDataSettings_ShouldScaleSellValue");
static_assert(offsetof(TedPlayerDataSettings_ShouldScaleSellValue, ReturnValue) == 0x000000, "Member 'TedPlayerDataSettings_ShouldScaleSellValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerProfileManager.OnDownloadPlayerProfileComplete
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerProfileManager_OnDownloadPlayerProfileComplete final
{
public:
	EProsdkErrorCodeAbstractData                  ResultCode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbstractDataKeyRecord>         KeyRecords;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileManager_OnDownloadPlayerProfileComplete) == 0x000008, "Wrong alignment on TedPlayerProfileManager_OnDownloadPlayerProfileComplete");
static_assert(sizeof(TedPlayerProfileManager_OnDownloadPlayerProfileComplete) == 0x000018, "Wrong size on TedPlayerProfileManager_OnDownloadPlayerProfileComplete");
static_assert(offsetof(TedPlayerProfileManager_OnDownloadPlayerProfileComplete, ResultCode) == 0x000000, "Member 'TedPlayerProfileManager_OnDownloadPlayerProfileComplete::ResultCode' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileManager_OnDownloadPlayerProfileComplete, KeyRecords) == 0x000008, "Member 'TedPlayerProfileManager_OnDownloadPlayerProfileComplete::KeyRecords' has a wrong offset!");

// Function Tempest.TedPlayerProfileManager.OnFriendStatusUpdateFromSteam
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerProfileManager_OnFriendStatusUpdateFromSteam final
{
public:
	uint64                                        InSteamId;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InChangeFlags;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerProfileManager_OnFriendStatusUpdateFromSteam) == 0x000008, "Wrong alignment on TedPlayerProfileManager_OnFriendStatusUpdateFromSteam");
static_assert(sizeof(TedPlayerProfileManager_OnFriendStatusUpdateFromSteam) == 0x000010, "Wrong size on TedPlayerProfileManager_OnFriendStatusUpdateFromSteam");
static_assert(offsetof(TedPlayerProfileManager_OnFriendStatusUpdateFromSteam, InSteamId) == 0x000000, "Member 'TedPlayerProfileManager_OnFriendStatusUpdateFromSteam::InSteamId' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileManager_OnFriendStatusUpdateFromSteam, InChangeFlags) == 0x000008, "Member 'TedPlayerProfileManager_OnFriendStatusUpdateFromSteam::InChangeFlags' has a wrong offset!");

// Function Tempest.TedPlayerProfileManager.OnRequestPlayerProfileComplete
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerProfileManager_OnRequestPlayerProfileComplete final
{
public:
	EProsdkErrorCodeAbstractData                  ResultCode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbstractDataKeyRecord>         KeyRecords;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileManager_OnRequestPlayerProfileComplete) == 0x000008, "Wrong alignment on TedPlayerProfileManager_OnRequestPlayerProfileComplete");
static_assert(sizeof(TedPlayerProfileManager_OnRequestPlayerProfileComplete) == 0x000018, "Wrong size on TedPlayerProfileManager_OnRequestPlayerProfileComplete");
static_assert(offsetof(TedPlayerProfileManager_OnRequestPlayerProfileComplete, ResultCode) == 0x000000, "Member 'TedPlayerProfileManager_OnRequestPlayerProfileComplete::ResultCode' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileManager_OnRequestPlayerProfileComplete, KeyRecords) == 0x000008, "Member 'TedPlayerProfileManager_OnRequestPlayerProfileComplete::KeyRecords' has a wrong offset!");

// Function Tempest.TedPlayerProfileManager.OnUploadPlayerProfileComplete
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerProfileManager_OnUploadPlayerProfileComplete final
{
public:
	int32                                         LocalUserNum;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeAbstractData                  ResultCode;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerProfileManager_OnUploadPlayerProfileComplete) == 0x000004, "Wrong alignment on TedPlayerProfileManager_OnUploadPlayerProfileComplete");
static_assert(sizeof(TedPlayerProfileManager_OnUploadPlayerProfileComplete) == 0x000008, "Wrong size on TedPlayerProfileManager_OnUploadPlayerProfileComplete");
static_assert(offsetof(TedPlayerProfileManager_OnUploadPlayerProfileComplete, LocalUserNum) == 0x000000, "Member 'TedPlayerProfileManager_OnUploadPlayerProfileComplete::LocalUserNum' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileManager_OnUploadPlayerProfileComplete, ResultCode) == 0x000004, "Member 'TedPlayerProfileManager_OnUploadPlayerProfileComplete::ResultCode' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatisticsOverview.GetPlayerProfile
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerProfileStatisticsOverview_GetPlayerProfile final
{
public:
	class UTedOnlinePlayerProfileWidget*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatisticsOverview_GetPlayerProfile) == 0x000008, "Wrong alignment on TedPlayerProfileStatisticsOverview_GetPlayerProfile");
static_assert(sizeof(TedPlayerProfileStatisticsOverview_GetPlayerProfile) == 0x000008, "Wrong size on TedPlayerProfileStatisticsOverview_GetPlayerProfile");
static_assert(offsetof(TedPlayerProfileStatisticsOverview_GetPlayerProfile, ReturnValue) == 0x000000, "Member 'TedPlayerProfileStatisticsOverview_GetPlayerProfile::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatsPanel_Slot.K2_DescribeQuickStatBrush
// 0x00D0 (0x00D0 - 0x0000)
struct TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush) == 0x000010, "Wrong alignment on TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush");
static_assert(sizeof(TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush) == 0x0000D0, "Wrong size on TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush");
static_assert(offsetof(TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush, InBrush) == 0x000000, "Member 'TedPlayerProfileStatsPanel_Slot_K2_DescribeQuickStatBrush::InBrush' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatsPanel_Slot.K2_DescribeTitle
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle) == 0x000008, "Wrong alignment on TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle");
static_assert(sizeof(TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle) == 0x000010, "Wrong size on TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle");
static_assert(offsetof(TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle, InTitle) == 0x000000, "Member 'TedPlayerProfileStatsPanel_Slot_K2_DescribeTitle::InTitle' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatsPanel_Slot.K2_DescribeValue
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerProfileStatsPanel_Slot_K2_DescribeValue final
{
public:
	class FText                                   InVal;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatsPanel_Slot_K2_DescribeValue) == 0x000008, "Wrong alignment on TedPlayerProfileStatsPanel_Slot_K2_DescribeValue");
static_assert(sizeof(TedPlayerProfileStatsPanel_Slot_K2_DescribeValue) == 0x000010, "Wrong size on TedPlayerProfileStatsPanel_Slot_K2_DescribeValue");
static_assert(offsetof(TedPlayerProfileStatsPanel_Slot_K2_DescribeValue, InVal) == 0x000000, "Member 'TedPlayerProfileStatsPanel_Slot_K2_DescribeValue::InVal' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatsPanel_Slot.GetStatTitle
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerProfileStatsPanel_Slot_GetStatTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatsPanel_Slot_GetStatTitle) == 0x000008, "Wrong alignment on TedPlayerProfileStatsPanel_Slot_GetStatTitle");
static_assert(sizeof(TedPlayerProfileStatsPanel_Slot_GetStatTitle) == 0x000010, "Wrong size on TedPlayerProfileStatsPanel_Slot_GetStatTitle");
static_assert(offsetof(TedPlayerProfileStatsPanel_Slot_GetStatTitle, ReturnValue) == 0x000000, "Member 'TedPlayerProfileStatsPanel_Slot_GetStatTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatTooltip.K2_DescribeCombined
// 0x0030 (0x0030 - 0x0000)
struct TedPlayerProfileStatTooltip_K2_DescribeCombined final
{
public:
	class FText                                   TotalValue;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   AverageValue;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   StatID;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowAverage;                                // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerProfileStatTooltip_K2_DescribeCombined) == 0x000008, "Wrong alignment on TedPlayerProfileStatTooltip_K2_DescribeCombined");
static_assert(sizeof(TedPlayerProfileStatTooltip_K2_DescribeCombined) == 0x000030, "Wrong size on TedPlayerProfileStatTooltip_K2_DescribeCombined");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeCombined, TotalValue) == 0x000000, "Member 'TedPlayerProfileStatTooltip_K2_DescribeCombined::TotalValue' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeCombined, AverageValue) == 0x000010, "Member 'TedPlayerProfileStatTooltip_K2_DescribeCombined::AverageValue' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeCombined, StatID) == 0x000020, "Member 'TedPlayerProfileStatTooltip_K2_DescribeCombined::StatID' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeCombined, bShouldShowAverage) == 0x000028, "Member 'TedPlayerProfileStatTooltip_K2_DescribeCombined::bShouldShowAverage' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatTooltip.K2_DescribeFactionSpecific
// 0x0038 (0x0038 - 0x0000)
struct TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific final
{
public:
	ETedRankedFaction                             Faction;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TotalValue;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   AverageValue;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   StatID;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldShowAverage;                                // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific) == 0x000008, "Wrong alignment on TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific");
static_assert(sizeof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific) == 0x000038, "Wrong size on TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific, Faction) == 0x000000, "Member 'TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific::Faction' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific, TotalValue) == 0x000008, "Member 'TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific::TotalValue' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific, AverageValue) == 0x000018, "Member 'TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific::AverageValue' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific, StatID) == 0x000028, "Member 'TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific::StatID' has a wrong offset!");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific, bShouldShowAverage) == 0x000030, "Member 'TedPlayerProfileStatTooltip_K2_DescribeFactionSpecific::bShouldShowAverage' has a wrong offset!");

// Function Tempest.TedPlayerProfileStatTooltip.K2_DescribeTitle
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerProfileStatTooltip_K2_DescribeTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerProfileStatTooltip_K2_DescribeTitle) == 0x000008, "Wrong alignment on TedPlayerProfileStatTooltip_K2_DescribeTitle");
static_assert(sizeof(TedPlayerProfileStatTooltip_K2_DescribeTitle) == 0x000010, "Wrong size on TedPlayerProfileStatTooltip_K2_DescribeTitle");
static_assert(offsetof(TedPlayerProfileStatTooltip_K2_DescribeTitle, Title) == 0x000000, "Member 'TedPlayerProfileStatTooltip_K2_DescribeTitle::Title' has a wrong offset!");

// Function Tempest.TedPlayerState.Get
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerState_Get final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Silent;                                            // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_Get) == 0x000008, "Wrong alignment on TedPlayerState_Get");
static_assert(sizeof(TedPlayerState_Get) == 0x000018, "Wrong size on TedPlayerState_Get");
static_assert(offsetof(TedPlayerState_Get, InWorldContext) == 0x000000, "Member 'TedPlayerState_Get::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedPlayerState_Get, InPlayerID) == 0x000008, "Member 'TedPlayerState_Get::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedPlayerState_Get, Silent) == 0x000009, "Member 'TedPlayerState_Get::Silent' has a wrong offset!");
static_assert(offsetof(TedPlayerState_Get, ReturnValue) == 0x000010, "Member 'TedPlayerState_Get::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.OnRep_TeamID
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_OnRep_TeamID final
{
public:
	struct FGenericTeamId                         OldTeamID;                                         // 0x0000(0x0001)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_OnRep_TeamID) == 0x000001, "Wrong alignment on TedPlayerState_OnRep_TeamID");
static_assert(sizeof(TedPlayerState_OnRep_TeamID) == 0x000001, "Wrong size on TedPlayerState_OnRep_TeamID");
static_assert(offsetof(TedPlayerState_OnRep_TeamID, OldTeamID) == 0x000000, "Member 'TedPlayerState_OnRep_TeamID::OldTeamID' has a wrong offset!");

// Function Tempest.TedPlayerState.Server_R_SetCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerState_Server_R_SetCameraLocation final
{
public:
	struct FVector_NetQuantize10                  InCameraLocation;                                  // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_Server_R_SetCameraLocation) == 0x000008, "Wrong alignment on TedPlayerState_Server_R_SetCameraLocation");
static_assert(sizeof(TedPlayerState_Server_R_SetCameraLocation) == 0x000018, "Wrong size on TedPlayerState_Server_R_SetCameraLocation");
static_assert(offsetof(TedPlayerState_Server_R_SetCameraLocation, InCameraLocation) == 0x000000, "Member 'TedPlayerState_Server_R_SetCameraLocation::InCameraLocation' has a wrong offset!");

// Function Tempest.TedPlayerState.AllowSpectatorsSeeAll
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_AllowSpectatorsSeeAll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_AllowSpectatorsSeeAll) == 0x000001, "Wrong alignment on TedPlayerState_AllowSpectatorsSeeAll");
static_assert(sizeof(TedPlayerState_AllowSpectatorsSeeAll) == 0x000001, "Wrong size on TedPlayerState_AllowSpectatorsSeeAll");
static_assert(offsetof(TedPlayerState_AllowSpectatorsSeeAll, ReturnValue) == 0x000000, "Member 'TedPlayerState_AllowSpectatorsSeeAll::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetBotDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetBotDifficulty final
{
public:
	ETedBotDifficulty                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetBotDifficulty) == 0x000001, "Wrong alignment on TedPlayerState_GetBotDifficulty");
static_assert(sizeof(TedPlayerState_GetBotDifficulty) == 0x000001, "Wrong size on TedPlayerState_GetBotDifficulty");
static_assert(offsetof(TedPlayerState_GetBotDifficulty, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetBotDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetCameraLocation
// 0x0018 (0x0018 - 0x0000)
struct TedPlayerState_GetCameraLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetCameraLocation) == 0x000008, "Wrong alignment on TedPlayerState_GetCameraLocation");
static_assert(sizeof(TedPlayerState_GetCameraLocation) == 0x000018, "Wrong size on TedPlayerState_GetCameraLocation");
static_assert(offsetof(TedPlayerState_GetCameraLocation, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetCameraLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetHydraId
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerState_GetHydraId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetHydraId) == 0x000008, "Wrong alignment on TedPlayerState_GetHydraId");
static_assert(sizeof(TedPlayerState_GetHydraId) == 0x000010, "Wrong size on TedPlayerState_GetHydraId");
static_assert(offsetof(TedPlayerState_GetHydraId, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetHydraId::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetIsStartupBot
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetIsStartupBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetIsStartupBot) == 0x000001, "Wrong alignment on TedPlayerState_GetIsStartupBot");
static_assert(sizeof(TedPlayerState_GetIsStartupBot) == 0x000001, "Wrong size on TedPlayerState_GetIsStartupBot");
static_assert(offsetof(TedPlayerState_GetIsStartupBot, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetIsStartupBot::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetPawnSkinOverride
// 0x000C (0x000C - 0x0000)
struct TedPlayerState_GetPawnSkinOverride final
{
public:
	struct FGameplayTag                           PawnTag;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPawnSkinIndex                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedPlayerState_GetPawnSkinOverride) == 0x000004, "Wrong alignment on TedPlayerState_GetPawnSkinOverride");
static_assert(sizeof(TedPlayerState_GetPawnSkinOverride) == 0x00000C, "Wrong size on TedPlayerState_GetPawnSkinOverride");
static_assert(offsetof(TedPlayerState_GetPawnSkinOverride, PawnTag) == 0x000000, "Member 'TedPlayerState_GetPawnSkinOverride::PawnTag' has a wrong offset!");
static_assert(offsetof(TedPlayerState_GetPawnSkinOverride, ReturnValue) == 0x000008, "Member 'TedPlayerState_GetPawnSkinOverride::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetPlayerColor
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetPlayerColor final
{
public:
	ERTSColor                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetPlayerColor) == 0x000001, "Wrong alignment on TedPlayerState_GetPlayerColor");
static_assert(sizeof(TedPlayerState_GetPlayerColor) == 0x000001, "Wrong size on TedPlayerState_GetPlayerColor");
static_assert(offsetof(TedPlayerState_GetPlayerColor, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetPlayerColor::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetPlayerData
// 0x0008 (0x0008 - 0x0000)
struct TedPlayerState_GetPlayerData final
{
public:
	class UTedPlayerData*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetPlayerData) == 0x000008, "Wrong alignment on TedPlayerState_GetPlayerData");
static_assert(sizeof(TedPlayerState_GetPlayerData) == 0x000008, "Wrong size on TedPlayerState_GetPlayerData");
static_assert(offsetof(TedPlayerState_GetPlayerData, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetPlayerData::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetPlayerFaction
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetPlayerFaction final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetPlayerFaction) == 0x000001, "Wrong alignment on TedPlayerState_GetPlayerFaction");
static_assert(sizeof(TedPlayerState_GetPlayerFaction) == 0x000001, "Wrong size on TedPlayerState_GetPlayerFaction");
static_assert(offsetof(TedPlayerState_GetPlayerFaction, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetPlayerFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetPreviousTeamID
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetPreviousTeamID final
{
public:
	ETedTeamID                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetPreviousTeamID) == 0x000001, "Wrong alignment on TedPlayerState_GetPreviousTeamID");
static_assert(sizeof(TedPlayerState_GetPreviousTeamID) == 0x000001, "Wrong size on TedPlayerState_GetPreviousTeamID");
static_assert(offsetof(TedPlayerState_GetPreviousTeamID, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetPreviousTeamID::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetRankedRow
// 0x0070 (0x0070 - 0x0000)
struct TedPlayerState_GetRankedRow final
{
public:
	struct FTedRankedRow                          ReturnValue;                                       // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetRankedRow) == 0x000008, "Wrong alignment on TedPlayerState_GetRankedRow");
static_assert(sizeof(TedPlayerState_GetRankedRow) == 0x000070, "Wrong size on TedPlayerState_GetRankedRow");
static_assert(offsetof(TedPlayerState_GetRankedRow, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetRankedRow::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetRankedTeam
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetRankedTeam final
{
public:
	ETedRankedTeam                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetRankedTeam) == 0x000001, "Wrong alignment on TedPlayerState_GetRankedTeam");
static_assert(sizeof(TedPlayerState_GetRankedTeam) == 0x000001, "Wrong size on TedPlayerState_GetRankedTeam");
static_assert(offsetof(TedPlayerState_GetRankedTeam, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetRankedTeam::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetServerType
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetServerType final
{
public:
	ETedServerType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetServerType) == 0x000001, "Wrong alignment on TedPlayerState_GetServerType");
static_assert(sizeof(TedPlayerState_GetServerType) == 0x000001, "Wrong size on TedPlayerState_GetServerType");
static_assert(offsetof(TedPlayerState_GetServerType, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetServerType::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetTeamID
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetTeamID final
{
public:
	ETedTeamID                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetTeamID) == 0x000001, "Wrong alignment on TedPlayerState_GetTeamID");
static_assert(sizeof(TedPlayerState_GetTeamID) == 0x000001, "Wrong size on TedPlayerState_GetTeamID");
static_assert(offsetof(TedPlayerState_GetTeamID, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetTeamID::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.GetTedPlayerID
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_GetTedPlayerID final
{
public:
	ETedPlayerID                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_GetTedPlayerID) == 0x000001, "Wrong alignment on TedPlayerState_GetTedPlayerID");
static_assert(sizeof(TedPlayerState_GetTedPlayerID) == 0x000001, "Wrong size on TedPlayerState_GetTedPlayerID");
static_assert(offsetof(TedPlayerState_GetTedPlayerID, ReturnValue) == 0x000000, "Member 'TedPlayerState_GetTedPlayerID::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.IsDefeated
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_IsDefeated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_IsDefeated) == 0x000001, "Wrong alignment on TedPlayerState_IsDefeated");
static_assert(sizeof(TedPlayerState_IsDefeated) == 0x000001, "Wrong size on TedPlayerState_IsDefeated");
static_assert(offsetof(TedPlayerState_IsDefeated, ReturnValue) == 0x000000, "Member 'TedPlayerState_IsDefeated::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.IsDeliDisc
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_IsDeliDisc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_IsDeliDisc) == 0x000001, "Wrong alignment on TedPlayerState_IsDeliDisc");
static_assert(sizeof(TedPlayerState_IsDeliDisc) == 0x000001, "Wrong size on TedPlayerState_IsDeliDisc");
static_assert(offsetof(TedPlayerState_IsDeliDisc, ReturnValue) == 0x000000, "Member 'TedPlayerState_IsDeliDisc::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.IsSurrendered
// 0x0001 (0x0001 - 0x0000)
struct TedPlayerState_IsSurrendered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_IsSurrendered) == 0x000001, "Wrong alignment on TedPlayerState_IsSurrendered");
static_assert(sizeof(TedPlayerState_IsSurrendered) == 0x000001, "Wrong size on TedPlayerState_IsSurrendered");
static_assert(offsetof(TedPlayerState_IsSurrendered, ReturnValue) == 0x000000, "Member 'TedPlayerState_IsSurrendered::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerState.ServerAcceptHydraInfo
// 0x0040 (0x0040 - 0x0000)
struct TedPlayerState_ServerAcceptHydraInfo final
{
public:
	struct FPlayerHydraInfo                       PlayerHydraInfo;                                   // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerState_ServerAcceptHydraInfo) == 0x000008, "Wrong alignment on TedPlayerState_ServerAcceptHydraInfo");
static_assert(sizeof(TedPlayerState_ServerAcceptHydraInfo) == 0x000040, "Wrong size on TedPlayerState_ServerAcceptHydraInfo");
static_assert(offsetof(TedPlayerState_ServerAcceptHydraInfo, PlayerHydraInfo) == 0x000000, "Member 'TedPlayerState_ServerAcceptHydraInfo::PlayerHydraInfo' has a wrong offset!");

// Function Tempest.TedPlayerStatePanel.GetAllContent
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerStatePanel_GetAllContent final
{
public:
	TArray<class ATedPlayerState*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerStatePanel_GetAllContent) == 0x000008, "Wrong alignment on TedPlayerStatePanel_GetAllContent");
static_assert(sizeof(TedPlayerStatePanel_GetAllContent) == 0x000010, "Wrong size on TedPlayerStatePanel_GetAllContent");
static_assert(offsetof(TedPlayerStatePanel_GetAllContent, ReturnValue) == 0x000000, "Member 'TedPlayerStatePanel_GetAllContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerStatePanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerStatePanel_GetContent final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerStatePanel_GetContent) == 0x000008, "Wrong alignment on TedPlayerStatePanel_GetContent");
static_assert(sizeof(TedPlayerStatePanel_GetContent) == 0x000010, "Wrong size on TedPlayerStatePanel_GetContent");
static_assert(offsetof(TedPlayerStatePanel_GetContent, SlotIndex) == 0x000000, "Member 'TedPlayerStatePanel_GetContent::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedPlayerStatePanel_GetContent, ReturnValue) == 0x000008, "Member 'TedPlayerStatePanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedPlayerStatePanel.OnAllPlayersStarted
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerStatePanel_OnAllPlayersStarted final
{
public:
	TArray<class APlayerState*>                   PlayerState;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerStatePanel_OnAllPlayersStarted) == 0x000008, "Wrong alignment on TedPlayerStatePanel_OnAllPlayersStarted");
static_assert(sizeof(TedPlayerStatePanel_OnAllPlayersStarted) == 0x000010, "Wrong size on TedPlayerStatePanel_OnAllPlayersStarted");
static_assert(offsetof(TedPlayerStatePanel_OnAllPlayersStarted, PlayerState) == 0x000000, "Member 'TedPlayerStatePanel_OnAllPlayersStarted::PlayerState' has a wrong offset!");

// Function Tempest.TedPlayerStatePanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedPlayerStatePanel_SetContent final
{
public:
	TArray<class ATedPlayerState*>                InNewContent;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPlayerStatePanel_SetContent) == 0x000008, "Wrong alignment on TedPlayerStatePanel_SetContent");
static_assert(sizeof(TedPlayerStatePanel_SetContent) == 0x000010, "Wrong size on TedPlayerStatePanel_SetContent");
static_assert(offsetof(TedPlayerStatePanel_SetContent, InNewContent) == 0x000000, "Member 'TedPlayerStatePanel_SetContent::InNewContent' has a wrong offset!");

// Function Tempest.TedPopupButtonsPanel.SetContent
// 0x0010 (0x0010 - 0x0000)
struct TedPopupButtonsPanel_SetContent final
{
public:
	TArray<struct FTedPopupButton>                InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopupButtonsPanel_SetContent) == 0x000008, "Wrong alignment on TedPopupButtonsPanel_SetContent");
static_assert(sizeof(TedPopupButtonsPanel_SetContent) == 0x000010, "Wrong size on TedPopupButtonsPanel_SetContent");
static_assert(offsetof(TedPopupButtonsPanel_SetContent, InContent) == 0x000000, "Member 'TedPopupButtonsPanel_SetContent::InContent' has a wrong offset!");

// Function Tempest.TedPopupButtonsPanel.GetContentAll
// 0x0010 (0x0010 - 0x0000)
struct TedPopupButtonsPanel_GetContentAll final
{
public:
	TArray<struct FTedPopupButton>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPopupButtonsPanel_GetContentAll) == 0x000008, "Wrong alignment on TedPopupButtonsPanel_GetContentAll");
static_assert(sizeof(TedPopupButtonsPanel_GetContentAll) == 0x000010, "Wrong size on TedPopupButtonsPanel_GetContentAll");
static_assert(offsetof(TedPopupButtonsPanel_GetContentAll, ReturnValue) == 0x000000, "Member 'TedPopupButtonsPanel_GetContentAll::ReturnValue' has a wrong offset!");

// Function Tempest.TedPowerBarWidget.OnDisplayPowerConsumption
// 0x0048 (0x0048 - 0x0000)
struct TedPowerBarWidget_OnDisplayPowerConsumption final
{
public:
	struct FTedPowerBarData                       InData;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPowerBarWidget_OnDisplayPowerConsumption) == 0x000008, "Wrong alignment on TedPowerBarWidget_OnDisplayPowerConsumption");
static_assert(sizeof(TedPowerBarWidget_OnDisplayPowerConsumption) == 0x000048, "Wrong size on TedPowerBarWidget_OnDisplayPowerConsumption");
static_assert(offsetof(TedPowerBarWidget_OnDisplayPowerConsumption, InData) == 0x000000, "Member 'TedPowerBarWidget_OnDisplayPowerConsumption::InData' has a wrong offset!");

// Function Tempest.TedPowerBarWidget.OnDisplayPowerProduction
// 0x0048 (0x0048 - 0x0000)
struct TedPowerBarWidget_OnDisplayPowerProduction final
{
public:
	struct FTedPowerBarData                       InData;                                            // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedPowerBarWidget_OnDisplayPowerProduction) == 0x000008, "Wrong alignment on TedPowerBarWidget_OnDisplayPowerProduction");
static_assert(sizeof(TedPowerBarWidget_OnDisplayPowerProduction) == 0x000048, "Wrong size on TedPowerBarWidget_OnDisplayPowerProduction");
static_assert(offsetof(TedPowerBarWidget_OnDisplayPowerProduction, InData) == 0x000000, "Member 'TedPowerBarWidget_OnDisplayPowerProduction::InData' has a wrong offset!");

// Function Tempest.TedQrCodeWidget.OnQrCodeReceived
// 0x0020 (0x0020 - 0x0000)
struct TedQrCodeWidget_OnQrCodeReceived final
{
public:
	struct FProsQrCodeState                       QrCodeState;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedQrCodeWidget_OnQrCodeReceived) == 0x000008, "Wrong alignment on TedQrCodeWidget_OnQrCodeReceived");
static_assert(sizeof(TedQrCodeWidget_OnQrCodeReceived) == 0x000020, "Wrong size on TedQrCodeWidget_OnQrCodeReceived");
static_assert(offsetof(TedQrCodeWidget_OnQrCodeReceived, QrCodeState) == 0x000000, "Member 'TedQrCodeWidget_OnQrCodeReceived::QrCodeState' has a wrong offset!");

// Function Tempest.TedQueueOverlay.Reveal
// 0x0001 (0x0001 - 0x0000)
struct TedQueueOverlay_Reveal final
{
public:
	ETedServerType                                ServerType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedQueueOverlay_Reveal) == 0x000001, "Wrong alignment on TedQueueOverlay_Reveal");
static_assert(sizeof(TedQueueOverlay_Reveal) == 0x000001, "Wrong size on TedQueueOverlay_Reveal");
static_assert(offsetof(TedQueueOverlay_Reveal, ServerType) == 0x000000, "Member 'TedQueueOverlay_Reveal::ServerType' has a wrong offset!");

// Function Tempest.TedQueueOverlay.SetOnlineSessionsController
// 0x0008 (0x0008 - 0x0000)
struct TedQueueOverlay_SetOnlineSessionsController final
{
public:
	class UTedOnlineSessionsControllerWidget*     SessionsController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedQueueOverlay_SetOnlineSessionsController) == 0x000008, "Wrong alignment on TedQueueOverlay_SetOnlineSessionsController");
static_assert(sizeof(TedQueueOverlay_SetOnlineSessionsController) == 0x000008, "Wrong size on TedQueueOverlay_SetOnlineSessionsController");
static_assert(offsetof(TedQueueOverlay_SetOnlineSessionsController, SessionsController) == 0x000000, "Member 'TedQueueOverlay_SetOnlineSessionsController::SessionsController' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.SetIsCommandSelected
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_SetIsCommandSelected final
{
public:
	bool                                          bInIsCommandSelected;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_SetIsCommandSelected) == 0x000001, "Wrong alignment on TedRangeDecalComponent_SetIsCommandSelected");
static_assert(sizeof(TedRangeDecalComponent_SetIsCommandSelected) == 0x000001, "Wrong size on TedRangeDecalComponent_SetIsCommandSelected");
static_assert(offsetof(TedRangeDecalComponent_SetIsCommandSelected, bInIsCommandSelected) == 0x000000, "Member 'TedRangeDecalComponent_SetIsCommandSelected::bInIsCommandSelected' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.SetRadius
// 0x0004 (0x0004 - 0x0000)
struct TedRangeDecalComponent_SetRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_SetRadius) == 0x000004, "Wrong alignment on TedRangeDecalComponent_SetRadius");
static_assert(sizeof(TedRangeDecalComponent_SetRadius) == 0x000004, "Wrong size on TedRangeDecalComponent_SetRadius");
static_assert(offsetof(TedRangeDecalComponent_SetRadius, Radius) == 0x000000, "Member 'TedRangeDecalComponent_SetRadius::Radius' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.SetShouldDisplayPerkRange
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_SetShouldDisplayPerkRange final
{
public:
	bool                                          bInIsPerkPreviewed;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_SetShouldDisplayPerkRange) == 0x000001, "Wrong alignment on TedRangeDecalComponent_SetShouldDisplayPerkRange");
static_assert(sizeof(TedRangeDecalComponent_SetShouldDisplayPerkRange) == 0x000001, "Wrong size on TedRangeDecalComponent_SetShouldDisplayPerkRange");
static_assert(offsetof(TedRangeDecalComponent_SetShouldDisplayPerkRange, bInIsPerkPreviewed) == 0x000000, "Member 'TedRangeDecalComponent_SetShouldDisplayPerkRange::bInIsPerkPreviewed' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.SetShouldDisplayPreviewRange
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_SetShouldDisplayPreviewRange final
{
public:
	bool                                          bInShouldDisplayUpgradeRange;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_SetShouldDisplayPreviewRange) == 0x000001, "Wrong alignment on TedRangeDecalComponent_SetShouldDisplayPreviewRange");
static_assert(sizeof(TedRangeDecalComponent_SetShouldDisplayPreviewRange) == 0x000001, "Wrong size on TedRangeDecalComponent_SetShouldDisplayPreviewRange");
static_assert(offsetof(TedRangeDecalComponent_SetShouldDisplayPreviewRange, bInShouldDisplayUpgradeRange) == 0x000000, "Member 'TedRangeDecalComponent_SetShouldDisplayPreviewRange::bInShouldDisplayUpgradeRange' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.TryFindMaxAbilityRange
// 0x0010 (0x0010 - 0x0000)
struct TedRangeDecalComponent_TryFindMaxAbilityRange final
{
public:
	const class UTedEntityDefinitionAsset*        EntityDefinition;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRangeDecalComponent_TryFindMaxAbilityRange) == 0x000008, "Wrong alignment on TedRangeDecalComponent_TryFindMaxAbilityRange");
static_assert(sizeof(TedRangeDecalComponent_TryFindMaxAbilityRange) == 0x000010, "Wrong size on TedRangeDecalComponent_TryFindMaxAbilityRange");
static_assert(offsetof(TedRangeDecalComponent_TryFindMaxAbilityRange, EntityDefinition) == 0x000000, "Member 'TedRangeDecalComponent_TryFindMaxAbilityRange::EntityDefinition' has a wrong offset!");
static_assert(offsetof(TedRangeDecalComponent_TryFindMaxAbilityRange, ReturnValue) == 0x000008, "Member 'TedRangeDecalComponent_TryFindMaxAbilityRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.TryFindPostUpdateRange
// 0x0010 (0x0010 - 0x0000)
struct TedRangeDecalComponent_TryFindPostUpdateRange final
{
public:
	const class UTedStructureDefinitionAsset*     SructureDef;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRangeDecalComponent_TryFindPostUpdateRange) == 0x000008, "Wrong alignment on TedRangeDecalComponent_TryFindPostUpdateRange");
static_assert(sizeof(TedRangeDecalComponent_TryFindPostUpdateRange) == 0x000010, "Wrong size on TedRangeDecalComponent_TryFindPostUpdateRange");
static_assert(offsetof(TedRangeDecalComponent_TryFindPostUpdateRange, SructureDef) == 0x000000, "Member 'TedRangeDecalComponent_TryFindPostUpdateRange::SructureDef' has a wrong offset!");
static_assert(offsetof(TedRangeDecalComponent_TryFindPostUpdateRange, ReturnValue) == 0x000008, "Member 'TedRangeDecalComponent_TryFindPostUpdateRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.GetIsCommandSelected
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_GetIsCommandSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_GetIsCommandSelected) == 0x000001, "Wrong alignment on TedRangeDecalComponent_GetIsCommandSelected");
static_assert(sizeof(TedRangeDecalComponent_GetIsCommandSelected) == 0x000001, "Wrong size on TedRangeDecalComponent_GetIsCommandSelected");
static_assert(offsetof(TedRangeDecalComponent_GetIsCommandSelected, ReturnValue) == 0x000000, "Member 'TedRangeDecalComponent_GetIsCommandSelected::ReturnValue' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.GetShouldDisplayPerkRange
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_GetShouldDisplayPerkRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_GetShouldDisplayPerkRange) == 0x000001, "Wrong alignment on TedRangeDecalComponent_GetShouldDisplayPerkRange");
static_assert(sizeof(TedRangeDecalComponent_GetShouldDisplayPerkRange) == 0x000001, "Wrong size on TedRangeDecalComponent_GetShouldDisplayPerkRange");
static_assert(offsetof(TedRangeDecalComponent_GetShouldDisplayPerkRange, ReturnValue) == 0x000000, "Member 'TedRangeDecalComponent_GetShouldDisplayPerkRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedRangeDecalComponent.GetShouldDisplayPreviewRange
// 0x0001 (0x0001 - 0x0000)
struct TedRangeDecalComponent_GetShouldDisplayPreviewRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRangeDecalComponent_GetShouldDisplayPreviewRange) == 0x000001, "Wrong alignment on TedRangeDecalComponent_GetShouldDisplayPreviewRange");
static_assert(sizeof(TedRangeDecalComponent_GetShouldDisplayPreviewRange) == 0x000001, "Wrong size on TedRangeDecalComponent_GetShouldDisplayPreviewRange");
static_assert(offsetof(TedRangeDecalComponent_GetShouldDisplayPreviewRange, ReturnValue) == 0x000000, "Member 'TedRangeDecalComponent_GetShouldDisplayPreviewRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.DescribeCurrentSelection
// 0x0010 (0x0010 - 0x0000)
struct TedRankingProgressionWidget_DescribeCurrentSelection final
{
public:
	class FText                                   SelectionText;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRankingProgressionWidget_DescribeCurrentSelection) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_DescribeCurrentSelection");
static_assert(sizeof(TedRankingProgressionWidget_DescribeCurrentSelection) == 0x000010, "Wrong size on TedRankingProgressionWidget_DescribeCurrentSelection");
static_assert(offsetof(TedRankingProgressionWidget_DescribeCurrentSelection, SelectionText) == 0x000000, "Member 'TedRankingProgressionWidget_DescribeCurrentSelection::SelectionText' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.DescribeTierProgress
// 0x0058 (0x0058 - 0x0000)
struct TedRankingProgressionWidget_DescribeTierProgress final
{
public:
	int32                                         InCurrentRating;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedMedalTableRow_Ranked               InCurrentMedalTierRow;                             // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	struct FTedMedalTableRow_Ranked               InNextMedalTierRow;                                // 0x0030(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRankingProgressionWidget_DescribeTierProgress) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_DescribeTierProgress");
static_assert(sizeof(TedRankingProgressionWidget_DescribeTierProgress) == 0x000058, "Wrong size on TedRankingProgressionWidget_DescribeTierProgress");
static_assert(offsetof(TedRankingProgressionWidget_DescribeTierProgress, InCurrentRating) == 0x000000, "Member 'TedRankingProgressionWidget_DescribeTierProgress::InCurrentRating' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_DescribeTierProgress, InCurrentMedalTierRow) == 0x000008, "Member 'TedRankingProgressionWidget_DescribeTierProgress::InCurrentMedalTierRow' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_DescribeTierProgress, InNextMedalTierRow) == 0x000030, "Member 'TedRankingProgressionWidget_DescribeTierProgress::InNextMedalTierRow' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.OnRankedFactionTierPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction");
static_assert(sizeof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction) == 0x000018, "Wrong size on TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction, InAction) == 0x000010, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.OnRankedFactionTierPanelSlotActivatedState
// 0x0018 (0x0018 - 0x0000)
struct TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState");
static_assert(sizeof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState) == 0x000018, "Wrong size on TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState, InContentPanel) == 0x000000, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState, InContentSlot) == 0x000008, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState, InState) == 0x000010, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState::InState' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState, bInActivated) == 0x000011, "Member 'TedRankingProgressionWidget_OnRankedFactionTierPanelSlotActivatedState::bInActivated' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.OnRankedTeamPanelSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedRankingProgressionWidget_OnRankedTeamPanelSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRankingProgressionWidget_OnRankedTeamPanelSlotAction) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_OnRankedTeamPanelSlotAction");
static_assert(sizeof(TedRankingProgressionWidget_OnRankedTeamPanelSlotAction) == 0x000018, "Wrong size on TedRankingProgressionWidget_OnRankedTeamPanelSlotAction");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotAction, InContentPanel) == 0x000000, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotAction, InContentSlot) == 0x000008, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotAction, InAction) == 0x000010, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.OnRankedTeamPanelSlotActivatedState
// 0x0018 (0x0018 - 0x0000)
struct TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState");
static_assert(sizeof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState) == 0x000018, "Wrong size on TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState, InContentPanel) == 0x000000, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState, InContentSlot) == 0x000008, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState, InState) == 0x000010, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState::InState' has a wrong offset!");
static_assert(offsetof(TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState, bInActivated) == 0x000011, "Member 'TedRankingProgressionWidget_OnRankedTeamPanelSlotActivatedState::bInActivated' has a wrong offset!");

// Function Tempest.TedRankingProgressionWidget.GetPlayerProfile
// 0x0008 (0x0008 - 0x0000)
struct TedRankingProgressionWidget_GetPlayerProfile final
{
public:
	class UTedOnlinePlayerProfileWidget*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRankingProgressionWidget_GetPlayerProfile) == 0x000008, "Wrong alignment on TedRankingProgressionWidget_GetPlayerProfile");
static_assert(sizeof(TedRankingProgressionWidget_GetPlayerProfile) == 0x000008, "Wrong size on TedRankingProgressionWidget_GetPlayerProfile");
static_assert(offsetof(TedRankingProgressionWidget_GetPlayerProfile, ReturnValue) == 0x000000, "Member 'TedRankingProgressionWidget_GetPlayerProfile::ReturnValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.CurrentTime
// 0x0004 (0x0004 - 0x0000)
struct TedRepCurveFunctions_CurrentTime final
{
public:
	struct FTedServerTime                         OutTime;                                           // 0x0000(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_CurrentTime) == 0x000004, "Wrong alignment on TedRepCurveFunctions_CurrentTime");
static_assert(sizeof(TedRepCurveFunctions_CurrentTime) == 0x000004, "Wrong size on TedRepCurveFunctions_CurrentTime");
static_assert(offsetof(TedRepCurveFunctions_CurrentTime, OutTime) == 0x000000, "Member 'TedRepCurveFunctions_CurrentTime::OutTime' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.CustomTime
// 0x0008 (0x0008 - 0x0000)
struct TedRepCurveFunctions_CustomTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedServerTime                         OutTime;                                           // 0x0004(0x0004)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_CustomTime) == 0x000004, "Wrong alignment on TedRepCurveFunctions_CustomTime");
static_assert(sizeof(TedRepCurveFunctions_CustomTime) == 0x000008, "Wrong size on TedRepCurveFunctions_CustomTime");
static_assert(offsetof(TedRepCurveFunctions_CustomTime, InTime) == 0x000000, "Member 'TedRepCurveFunctions_CustomTime::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_CustomTime, OutTime) == 0x000004, "Member 'TedRepCurveFunctions_CustomTime::OutTime' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.GetValueAtTime_Bool
// 0x0020 (0x0020 - 0x0000)
struct TedRepCurveFunctions_GetValueAtTime_Bool final
{
public:
	struct FRepCurve_Bool                         InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InValueIfEmpty;                                    // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRepCurveFunctions_GetValueAtTime_Bool) == 0x000004, "Wrong alignment on TedRepCurveFunctions_GetValueAtTime_Bool");
static_assert(sizeof(TedRepCurveFunctions_GetValueAtTime_Bool) == 0x000020, "Wrong size on TedRepCurveFunctions_GetValueAtTime_Bool");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Bool, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_GetValueAtTime_Bool::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Bool, InTime) == 0x000018, "Member 'TedRepCurveFunctions_GetValueAtTime_Bool::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Bool, InValueIfEmpty) == 0x00001C, "Member 'TedRepCurveFunctions_GetValueAtTime_Bool::InValueIfEmpty' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Bool, ReturnValue) == 0x00001D, "Member 'TedRepCurveFunctions_GetValueAtTime_Bool::ReturnValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.GetValueAtTime_Float
// 0x0024 (0x0024 - 0x0000)
struct TedRepCurveFunctions_GetValueAtTime_Float final
{
public:
	struct FRepCurve_Float                        InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InValueIfEmpty;                                    // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_GetValueAtTime_Float) == 0x000004, "Wrong alignment on TedRepCurveFunctions_GetValueAtTime_Float");
static_assert(sizeof(TedRepCurveFunctions_GetValueAtTime_Float) == 0x000024, "Wrong size on TedRepCurveFunctions_GetValueAtTime_Float");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Float, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_GetValueAtTime_Float::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Float, InTime) == 0x000018, "Member 'TedRepCurveFunctions_GetValueAtTime_Float::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Float, InValueIfEmpty) == 0x00001C, "Member 'TedRepCurveFunctions_GetValueAtTime_Float::InValueIfEmpty' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTime_Float, ReturnValue) == 0x000020, "Member 'TedRepCurveFunctions_GetValueAtTime_Float::ReturnValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.GetValueAtTimeAdvanced_Bool
// 0x0024 (0x0024 - 0x0000)
struct TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool final
{
public:
	struct FRepCurve_Bool                         InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InValueIfEmpty;                                    // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutFromValue;                                      // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutToValue;                                        // 0x001E(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutCurrentValue;                                   // 0x001F(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutProgress;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool) == 0x000004, "Wrong alignment on TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool");
static_assert(sizeof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool) == 0x000024, "Wrong size on TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, InTime) == 0x000018, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, InValueIfEmpty) == 0x00001C, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::InValueIfEmpty' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, OutFromValue) == 0x00001D, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::OutFromValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, OutToValue) == 0x00001E, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::OutToValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, OutCurrentValue) == 0x00001F, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::OutCurrentValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool, OutProgress) == 0x000020, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Bool::OutProgress' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.GetValueAtTimeAdvanced_Float
// 0x0030 (0x0030 - 0x0000)
struct TedRepCurveFunctions_GetValueAtTimeAdvanced_Float final
{
public:
	struct FRepCurve_Float                        InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InValueIfEmpty;                                    // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFromValue;                                      // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutToValue;                                        // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutCurrentValue;                                   // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutProgress;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float) == 0x000004, "Wrong alignment on TedRepCurveFunctions_GetValueAtTimeAdvanced_Float");
static_assert(sizeof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float) == 0x000030, "Wrong size on TedRepCurveFunctions_GetValueAtTimeAdvanced_Float");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, InTime) == 0x000018, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, InValueIfEmpty) == 0x00001C, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::InValueIfEmpty' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, OutFromValue) == 0x000020, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::OutFromValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, OutToValue) == 0x000024, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::OutToValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, OutCurrentValue) == 0x000028, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::OutCurrentValue' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_GetValueAtTimeAdvanced_Float, OutProgress) == 0x00002C, "Member 'TedRepCurveFunctions_GetValueAtTimeAdvanced_Float::OutProgress' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.IsEmpty_Bool
// 0x001C (0x001C - 0x0000)
struct TedRepCurveFunctions_IsEmpty_Bool final
{
public:
	struct FRepCurve_Bool                         InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRepCurveFunctions_IsEmpty_Bool) == 0x000004, "Wrong alignment on TedRepCurveFunctions_IsEmpty_Bool");
static_assert(sizeof(TedRepCurveFunctions_IsEmpty_Bool) == 0x00001C, "Wrong size on TedRepCurveFunctions_IsEmpty_Bool");
static_assert(offsetof(TedRepCurveFunctions_IsEmpty_Bool, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_IsEmpty_Bool::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_IsEmpty_Bool, ReturnValue) == 0x000018, "Member 'TedRepCurveFunctions_IsEmpty_Bool::ReturnValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.IsEmpty_Float
// 0x001C (0x001C - 0x0000)
struct TedRepCurveFunctions_IsEmpty_Float final
{
public:
	struct FRepCurve_Float                        InCurve;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRepCurveFunctions_IsEmpty_Float) == 0x000004, "Wrong alignment on TedRepCurveFunctions_IsEmpty_Float");
static_assert(sizeof(TedRepCurveFunctions_IsEmpty_Float) == 0x00001C, "Wrong size on TedRepCurveFunctions_IsEmpty_Float");
static_assert(offsetof(TedRepCurveFunctions_IsEmpty_Float, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_IsEmpty_Float::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_IsEmpty_Float, ReturnValue) == 0x000018, "Member 'TedRepCurveFunctions_IsEmpty_Float::ReturnValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.SetValue_Bool
// 0x0020 (0x0020 - 0x0000)
struct TedRepCurveFunctions_SetValue_Bool final
{
public:
	struct FRepCurve_Bool                         InCurve;                                           // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedRepCurveFunctions_SetValue_Bool) == 0x000004, "Wrong alignment on TedRepCurveFunctions_SetValue_Bool");
static_assert(sizeof(TedRepCurveFunctions_SetValue_Bool) == 0x000020, "Wrong size on TedRepCurveFunctions_SetValue_Bool");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Bool, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_SetValue_Bool::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Bool, InTime) == 0x000018, "Member 'TedRepCurveFunctions_SetValue_Bool::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Bool, InValue) == 0x00001C, "Member 'TedRepCurveFunctions_SetValue_Bool::InValue' has a wrong offset!");

// Function Tempest.TedRepCurveFunctions.SetValue_Float
// 0x0020 (0x0020 - 0x0000)
struct TedRepCurveFunctions_SetValue_Float final
{
public:
	struct FRepCurve_Float                        InCurve;                                           // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTedServerTime                         InTime;                                            // 0x0018(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedRepCurveFunctions_SetValue_Float) == 0x000004, "Wrong alignment on TedRepCurveFunctions_SetValue_Float");
static_assert(sizeof(TedRepCurveFunctions_SetValue_Float) == 0x000020, "Wrong size on TedRepCurveFunctions_SetValue_Float");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Float, InCurve) == 0x000000, "Member 'TedRepCurveFunctions_SetValue_Float::InCurve' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Float, InTime) == 0x000018, "Member 'TedRepCurveFunctions_SetValue_Float::InTime' has a wrong offset!");
static_assert(offsetof(TedRepCurveFunctions_SetValue_Float, InValue) == 0x00001C, "Member 'TedRepCurveFunctions_SetValue_Float::InValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.ContinueCampaignFromCurrentProfile
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile");
static_assert(sizeof(TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile) == 0x000008, "Wrong size on TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile");
static_assert(offsetof(TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile, WorldContextObject) == 0x000000, "Member 'TedSavedGameProfileInfo_ContinueCampaignFromCurrentProfile::WorldContextObject' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCurrentProfile
// 0x0010 (0x0010 - 0x0000)
struct TedSavedGameProfileInfo_GetCurrentProfile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedSavedGameProfileInfo*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCurrentProfile) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetCurrentProfile");
static_assert(sizeof(TedSavedGameProfileInfo_GetCurrentProfile) == 0x000010, "Wrong size on TedSavedGameProfileInfo_GetCurrentProfile");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentProfile, WorldContextObject) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCurrentProfile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentProfile, ReturnValue) == 0x000008, "Member 'TedSavedGameProfileInfo_GetCurrentProfile::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCampaignDifficulty
// 0x0001 (0x0001 - 0x0000)
struct TedSavedGameProfileInfo_GetCampaignDifficulty final
{
public:
	ETedGameDifficulty                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCampaignDifficulty) == 0x000001, "Wrong alignment on TedSavedGameProfileInfo_GetCampaignDifficulty");
static_assert(sizeof(TedSavedGameProfileInfo_GetCampaignDifficulty) == 0x000001, "Wrong size on TedSavedGameProfileInfo_GetCampaignDifficulty");
static_assert(offsetof(TedSavedGameProfileInfo_GetCampaignDifficulty, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCampaignDifficulty::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCampaignFaction
// 0x0001 (0x0001 - 0x0000)
struct TedSavedGameProfileInfo_GetCampaignFaction final
{
public:
	ETedFaction                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCampaignFaction) == 0x000001, "Wrong alignment on TedSavedGameProfileInfo_GetCampaignFaction");
static_assert(sizeof(TedSavedGameProfileInfo_GetCampaignFaction) == 0x000001, "Wrong size on TedSavedGameProfileInfo_GetCampaignFaction");
static_assert(offsetof(TedSavedGameProfileInfo_GetCampaignFaction, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCampaignFaction::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCampaignProgressInPercentage
// 0x0004 (0x0004 - 0x0000)
struct TedSavedGameProfileInfo_GetCampaignProgressInPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCampaignProgressInPercentage) == 0x000004, "Wrong alignment on TedSavedGameProfileInfo_GetCampaignProgressInPercentage");
static_assert(sizeof(TedSavedGameProfileInfo_GetCampaignProgressInPercentage) == 0x000004, "Wrong size on TedSavedGameProfileInfo_GetCampaignProgressInPercentage");
static_assert(offsetof(TedSavedGameProfileInfo_GetCampaignProgressInPercentage, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCampaignProgressInPercentage::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCurrentCampaign
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetCurrentCampaign final
{
public:
	const class UTedCampaignInfo*                 ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCurrentCampaign) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetCurrentCampaign");
static_assert(sizeof(TedSavedGameProfileInfo_GetCurrentCampaign) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetCurrentCampaign");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentCampaign, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCurrentCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCurrentMap
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetCurrentMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCurrentMap) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetCurrentMap");
static_assert(sizeof(TedSavedGameProfileInfo_GetCurrentMap) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetCurrentMap");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentMap, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCurrentMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetCurrentMapIndex
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetCurrentMapIndex final
{
public:
	bool                                          bZeroBased;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetCurrentMapIndex) == 0x000004, "Wrong alignment on TedSavedGameProfileInfo_GetCurrentMapIndex");
static_assert(sizeof(TedSavedGameProfileInfo_GetCurrentMapIndex) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetCurrentMapIndex");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentMapIndex, bZeroBased) == 0x000000, "Member 'TedSavedGameProfileInfo_GetCurrentMapIndex::bZeroBased' has a wrong offset!");
static_assert(offsetof(TedSavedGameProfileInfo_GetCurrentMapIndex, ReturnValue) == 0x000004, "Member 'TedSavedGameProfileInfo_GetCurrentMapIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetLastUnlockedPlayableMap
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetLastUnlockedPlayableMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetLastUnlockedPlayableMap) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetLastUnlockedPlayableMap");
static_assert(sizeof(TedSavedGameProfileInfo_GetLastUnlockedPlayableMap) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetLastUnlockedPlayableMap");
static_assert(offsetof(TedSavedGameProfileInfo_GetLastUnlockedPlayableMap, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetLastUnlockedPlayableMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetMapIndex
// 0x0010 (0x0010 - 0x0000)
struct TedSavedGameProfileInfo_GetMapIndex final
{
public:
	const class UTedMapInfo*                      InMapInfo;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZeroBased;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetMapIndex) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetMapIndex");
static_assert(sizeof(TedSavedGameProfileInfo_GetMapIndex) == 0x000010, "Wrong size on TedSavedGameProfileInfo_GetMapIndex");
static_assert(offsetof(TedSavedGameProfileInfo_GetMapIndex, InMapInfo) == 0x000000, "Member 'TedSavedGameProfileInfo_GetMapIndex::InMapInfo' has a wrong offset!");
static_assert(offsetof(TedSavedGameProfileInfo_GetMapIndex, bZeroBased) == 0x000008, "Member 'TedSavedGameProfileInfo_GetMapIndex::bZeroBased' has a wrong offset!");
static_assert(offsetof(TedSavedGameProfileInfo_GetMapIndex, ReturnValue) == 0x00000C, "Member 'TedSavedGameProfileInfo_GetMapIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetNextMap
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetNextMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetNextMap) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetNextMap");
static_assert(sizeof(TedSavedGameProfileInfo_GetNextMap) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetNextMap");
static_assert(offsetof(TedSavedGameProfileInfo_GetNextMap, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetNextMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetNextMapIndex
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetNextMapIndex final
{
public:
	bool                                          bZeroBased;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetNextMapIndex) == 0x000004, "Wrong alignment on TedSavedGameProfileInfo_GetNextMapIndex");
static_assert(sizeof(TedSavedGameProfileInfo_GetNextMapIndex) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetNextMapIndex");
static_assert(offsetof(TedSavedGameProfileInfo_GetNextMapIndex, bZeroBased) == 0x000000, "Member 'TedSavedGameProfileInfo_GetNextMapIndex::bZeroBased' has a wrong offset!");
static_assert(offsetof(TedSavedGameProfileInfo_GetNextMapIndex, ReturnValue) == 0x000004, "Member 'TedSavedGameProfileInfo_GetNextMapIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.GetPreviousMap
// 0x0008 (0x0008 - 0x0000)
struct TedSavedGameProfileInfo_GetPreviousMap final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_GetPreviousMap) == 0x000008, "Wrong alignment on TedSavedGameProfileInfo_GetPreviousMap");
static_assert(sizeof(TedSavedGameProfileInfo_GetPreviousMap) == 0x000008, "Wrong size on TedSavedGameProfileInfo_GetPreviousMap");
static_assert(offsetof(TedSavedGameProfileInfo_GetPreviousMap, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_GetPreviousMap::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.HasAnyProgress
// 0x0001 (0x0001 - 0x0000)
struct TedSavedGameProfileInfo_HasAnyProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_HasAnyProgress) == 0x000001, "Wrong alignment on TedSavedGameProfileInfo_HasAnyProgress");
static_assert(sizeof(TedSavedGameProfileInfo_HasAnyProgress) == 0x000001, "Wrong size on TedSavedGameProfileInfo_HasAnyProgress");
static_assert(offsetof(TedSavedGameProfileInfo_HasAnyProgress, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_HasAnyProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameProfileInfo.IsCompatible
// 0x0001 (0x0001 - 0x0000)
struct TedSavedGameProfileInfo_IsCompatible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameProfileInfo_IsCompatible) == 0x000001, "Wrong alignment on TedSavedGameProfileInfo_IsCompatible");
static_assert(sizeof(TedSavedGameProfileInfo_IsCompatible) == 0x000001, "Wrong size on TedSavedGameProfileInfo_IsCompatible");
static_assert(offsetof(TedSavedGameProfileInfo_IsCompatible, ReturnValue) == 0x000000, "Member 'TedSavedGameProfileInfo_IsCompatible::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameSlotInfo.GetSaveDisplayName
// 0x0018 (0x0018 - 0x0000)
struct TedSavedGameSlotInfo_GetSaveDisplayName final
{
public:
	class USavedGameSlotInfo*                     GameSlotInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameSlotInfo_GetSaveDisplayName) == 0x000008, "Wrong alignment on TedSavedGameSlotInfo_GetSaveDisplayName");
static_assert(sizeof(TedSavedGameSlotInfo_GetSaveDisplayName) == 0x000018, "Wrong size on TedSavedGameSlotInfo_GetSaveDisplayName");
static_assert(offsetof(TedSavedGameSlotInfo_GetSaveDisplayName, GameSlotInfo) == 0x000000, "Member 'TedSavedGameSlotInfo_GetSaveDisplayName::GameSlotInfo' has a wrong offset!");
static_assert(offsetof(TedSavedGameSlotInfo_GetSaveDisplayName, ReturnValue) == 0x000008, "Member 'TedSavedGameSlotInfo_GetSaveDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameSlotInfo.IsCompatible
// 0x0001 (0x0001 - 0x0000)
struct TedSavedGameSlotInfo_IsCompatible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSavedGameSlotInfo_IsCompatible) == 0x000001, "Wrong alignment on TedSavedGameSlotInfo_IsCompatible");
static_assert(sizeof(TedSavedGameSlotInfo_IsCompatible) == 0x000001, "Wrong size on TedSavedGameSlotInfo_IsCompatible");
static_assert(offsetof(TedSavedGameSlotInfo_IsCompatible, ReturnValue) == 0x000000, "Member 'TedSavedGameSlotInfo_IsCompatible::ReturnValue' has a wrong offset!");

// Function Tempest.TedSavedGameSubsystem.K2_CreateNewProfile
// 0x0018 (0x0018 - 0x0000)
struct TedSavedGameSubsystem_K2_CreateNewProfile final
{
public:
	class FString                                 ProfileName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetAsCurrent;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSavedGameSubsystem_K2_CreateNewProfile) == 0x000008, "Wrong alignment on TedSavedGameSubsystem_K2_CreateNewProfile");
static_assert(sizeof(TedSavedGameSubsystem_K2_CreateNewProfile) == 0x000018, "Wrong size on TedSavedGameSubsystem_K2_CreateNewProfile");
static_assert(offsetof(TedSavedGameSubsystem_K2_CreateNewProfile, ProfileName) == 0x000000, "Member 'TedSavedGameSubsystem_K2_CreateNewProfile::ProfileName' has a wrong offset!");
static_assert(offsetof(TedSavedGameSubsystem_K2_CreateNewProfile, bSetAsCurrent) == 0x000010, "Member 'TedSavedGameSubsystem_K2_CreateNewProfile::bSetAsCurrent' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.AttemptDeleteSaveSlot
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_AttemptDeleteSaveSlot final
{
public:
	class USavedGameSlotInfo*                     SaveSlotInfo;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_AttemptDeleteSaveSlot) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_AttemptDeleteSaveSlot");
static_assert(sizeof(TedSaveLoadContentPanel_AttemptDeleteSaveSlot) == 0x000008, "Wrong size on TedSaveLoadContentPanel_AttemptDeleteSaveSlot");
static_assert(offsetof(TedSaveLoadContentPanel_AttemptDeleteSaveSlot, SaveSlotInfo) == 0x000000, "Member 'TedSaveLoadContentPanel_AttemptDeleteSaveSlot::SaveSlotInfo' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GenerateNewSaveName
// 0x0010 (0x0010 - 0x0000)
struct TedSaveLoadContentPanel_GenerateNewSaveName final
{
public:
	class FString                                 NewSaveName;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GenerateNewSaveName) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GenerateNewSaveName");
static_assert(sizeof(TedSaveLoadContentPanel_GenerateNewSaveName) == 0x000010, "Wrong size on TedSaveLoadContentPanel_GenerateNewSaveName");
static_assert(offsetof(TedSaveLoadContentPanel_GenerateNewSaveName, NewSaveName) == 0x000000, "Member 'TedSaveLoadContentPanel_GenerateNewSaveName::NewSaveName' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.SetGamemodeToShowSlotsFor
// 0x0002 (0x0002 - 0x0000)
struct TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor final
{
public:
	ETedSavedSlotGamemodeType                     InType;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRefresh;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor) == 0x000001, "Wrong alignment on TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor");
static_assert(sizeof(TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor) == 0x000002, "Wrong size on TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor");
static_assert(offsetof(TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor, InType) == 0x000000, "Member 'TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor::InType' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor, bRefresh) == 0x000001, "Member 'TedSaveLoadContentPanel_SetGamemodeToShowSlotsFor::bRefresh' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetBriefingDisplayNumberForSlot
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot) == 0x000004, "Wrong alignment on TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot");
static_assert(sizeof(TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot) == 0x000008, "Wrong size on TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot");
static_assert(offsetof(TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot, SlotIndex) == 0x000000, "Member 'TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot, ReturnValue) == 0x000004, "Member 'TedSaveLoadContentPanel_GetBriefingDisplayNumberForSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedSaveLoadContentPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedSavedGameSlotInfo*            ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetContent) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GetContent");
static_assert(sizeof(TedSaveLoadContentPanel_GetContent) == 0x000010, "Wrong size on TedSaveLoadContentPanel_GetContent");
static_assert(offsetof(TedSaveLoadContentPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedSaveLoadContentPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedSaveLoadContentPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetContentByState
// 0x0010 (0x0010 - 0x0000)
struct TedSaveLoadContentPanel_GetContentByState final
{
public:
	ETedContentSlotState                          InState;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InIndex;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USavedGameSlotInfo*               ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetContentByState) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GetContentByState");
static_assert(sizeof(TedSaveLoadContentPanel_GetContentByState) == 0x000010, "Wrong size on TedSaveLoadContentPanel_GetContentByState");
static_assert(offsetof(TedSaveLoadContentPanel_GetContentByState, InState) == 0x000000, "Member 'TedSaveLoadContentPanel_GetContentByState::InState' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_GetContentByState, InIndex) == 0x000004, "Member 'TedSaveLoadContentPanel_GetContentByState::InIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_GetContentByState, ReturnValue) == 0x000008, "Member 'TedSaveLoadContentPanel_GetContentByState::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetMapInfoBySlotIndex
// 0x0010 (0x0010 - 0x0000)
struct TedSaveLoadContentPanel_GetMapInfoBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetMapInfoBySlotIndex) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GetMapInfoBySlotIndex");
static_assert(sizeof(TedSaveLoadContentPanel_GetMapInfoBySlotIndex) == 0x000010, "Wrong size on TedSaveLoadContentPanel_GetMapInfoBySlotIndex");
static_assert(offsetof(TedSaveLoadContentPanel_GetMapInfoBySlotIndex, SlotIndex) == 0x000000, "Member 'TedSaveLoadContentPanel_GetMapInfoBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_GetMapInfoBySlotIndex, ReturnValue) == 0x000008, "Member 'TedSaveLoadContentPanel_GetMapInfoBySlotIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetSelectedContent
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_GetSelectedContent final
{
public:
	const class USavedGameSlotInfo*               ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetSelectedContent) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GetSelectedContent");
static_assert(sizeof(TedSaveLoadContentPanel_GetSelectedContent) == 0x000008, "Wrong size on TedSaveLoadContentPanel_GetSelectedContent");
static_assert(offsetof(TedSaveLoadContentPanel_GetSelectedContent, ReturnValue) == 0x000000, "Member 'TedSaveLoadContentPanel_GetSelectedContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetSelectedGamemodeType
// 0x0001 (0x0001 - 0x0000)
struct TedSaveLoadContentPanel_GetSelectedGamemodeType final
{
public:
	ETedSavedSlotGamemodeType                     ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetSelectedGamemodeType) == 0x000001, "Wrong alignment on TedSaveLoadContentPanel_GetSelectedGamemodeType");
static_assert(sizeof(TedSaveLoadContentPanel_GetSelectedGamemodeType) == 0x000001, "Wrong size on TedSaveLoadContentPanel_GetSelectedGamemodeType");
static_assert(offsetof(TedSaveLoadContentPanel_GetSelectedGamemodeType, ReturnValue) == 0x000000, "Member 'TedSaveLoadContentPanel_GetSelectedGamemodeType::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.GetSelectedMapInfo
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_GetSelectedMapInfo final
{
public:
	const class UTedMapInfo*                      ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_GetSelectedMapInfo) == 0x000008, "Wrong alignment on TedSaveLoadContentPanel_GetSelectedMapInfo");
static_assert(sizeof(TedSaveLoadContentPanel_GetSelectedMapInfo) == 0x000008, "Wrong size on TedSaveLoadContentPanel_GetSelectedMapInfo");
static_assert(offsetof(TedSaveLoadContentPanel_GetSelectedMapInfo, ReturnValue) == 0x000000, "Member 'TedSaveLoadContentPanel_GetSelectedMapInfo::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.HasAnySaveSlots
// 0x0001 (0x0001 - 0x0000)
struct TedSaveLoadContentPanel_HasAnySaveSlots final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSaveLoadContentPanel_HasAnySaveSlots) == 0x000001, "Wrong alignment on TedSaveLoadContentPanel_HasAnySaveSlots");
static_assert(sizeof(TedSaveLoadContentPanel_HasAnySaveSlots) == 0x000001, "Wrong size on TedSaveLoadContentPanel_HasAnySaveSlots");
static_assert(offsetof(TedSaveLoadContentPanel_HasAnySaveSlots, ReturnValue) == 0x000000, "Member 'TedSaveLoadContentPanel_HasAnySaveSlots::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.HasSaveFileWithName
// 0x000C (0x000C - 0x0000)
struct TedSaveLoadContentPanel_HasSaveFileWithName final
{
public:
	class FName                                   SlotName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSaveLoadContentPanel_HasSaveFileWithName) == 0x000004, "Wrong alignment on TedSaveLoadContentPanel_HasSaveFileWithName");
static_assert(sizeof(TedSaveLoadContentPanel_HasSaveFileWithName) == 0x00000C, "Wrong size on TedSaveLoadContentPanel_HasSaveFileWithName");
static_assert(offsetof(TedSaveLoadContentPanel_HasSaveFileWithName, SlotName) == 0x000000, "Member 'TedSaveLoadContentPanel_HasSaveFileWithName::SlotName' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_HasSaveFileWithName, ReturnValue) == 0x000008, "Member 'TedSaveLoadContentPanel_HasSaveFileWithName::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.SlotIsBriefingCheckpoint
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_SlotIsBriefingCheckpoint final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSaveLoadContentPanel_SlotIsBriefingCheckpoint) == 0x000004, "Wrong alignment on TedSaveLoadContentPanel_SlotIsBriefingCheckpoint");
static_assert(sizeof(TedSaveLoadContentPanel_SlotIsBriefingCheckpoint) == 0x000008, "Wrong size on TedSaveLoadContentPanel_SlotIsBriefingCheckpoint");
static_assert(offsetof(TedSaveLoadContentPanel_SlotIsBriefingCheckpoint, SlotIndex) == 0x000000, "Member 'TedSaveLoadContentPanel_SlotIsBriefingCheckpoint::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_SlotIsBriefingCheckpoint, ReturnValue) == 0x000004, "Member 'TedSaveLoadContentPanel_SlotIsBriefingCheckpoint::ReturnValue' has a wrong offset!");

// Function Tempest.TedSaveLoadContentPanel.SlotIsSaveGame
// 0x0008 (0x0008 - 0x0000)
struct TedSaveLoadContentPanel_SlotIsSaveGame final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSaveLoadContentPanel_SlotIsSaveGame) == 0x000004, "Wrong alignment on TedSaveLoadContentPanel_SlotIsSaveGame");
static_assert(sizeof(TedSaveLoadContentPanel_SlotIsSaveGame) == 0x000008, "Wrong size on TedSaveLoadContentPanel_SlotIsSaveGame");
static_assert(offsetof(TedSaveLoadContentPanel_SlotIsSaveGame, SlotIndex) == 0x000000, "Member 'TedSaveLoadContentPanel_SlotIsSaveGame::SlotIndex' has a wrong offset!");
static_assert(offsetof(TedSaveLoadContentPanel_SlotIsSaveGame, ReturnValue) == 0x000004, "Member 'TedSaveLoadContentPanel_SlotIsSaveGame::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreMenuScreenContextObject.New
// 0x0010 (0x0010 - 0x0000)
struct TedScoreMenuScreenContextObject_New final
{
public:
	bool                                          bInVictory;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedScoreMenuScreenContextObject*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreMenuScreenContextObject_New) == 0x000008, "Wrong alignment on TedScoreMenuScreenContextObject_New");
static_assert(sizeof(TedScoreMenuScreenContextObject_New) == 0x000010, "Wrong size on TedScoreMenuScreenContextObject_New");
static_assert(offsetof(TedScoreMenuScreenContextObject_New, bInVictory) == 0x000000, "Member 'TedScoreMenuScreenContextObject_New::bInVictory' has a wrong offset!");
static_assert(offsetof(TedScoreMenuScreenContextObject_New, ReturnValue) == 0x000008, "Member 'TedScoreMenuScreenContextObject_New::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenGraphTab.K2_OnUserInfoReceived
// 0x0050 (0x0050 - 0x0000)
struct TedScoreScreenGraphTab_K2_OnUserInfoReceived final
{
public:
	struct FTedUserInfo                           InUserInfo;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InHydraId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenGraphTab_K2_OnUserInfoReceived) == 0x000008, "Wrong alignment on TedScoreScreenGraphTab_K2_OnUserInfoReceived");
static_assert(sizeof(TedScoreScreenGraphTab_K2_OnUserInfoReceived) == 0x000050, "Wrong size on TedScoreScreenGraphTab_K2_OnUserInfoReceived");
static_assert(offsetof(TedScoreScreenGraphTab_K2_OnUserInfoReceived, InUserInfo) == 0x000000, "Member 'TedScoreScreenGraphTab_K2_OnUserInfoReceived::InUserInfo' has a wrong offset!");
static_assert(offsetof(TedScoreScreenGraphTab_K2_OnUserInfoReceived, InHydraId) == 0x000040, "Member 'TedScoreScreenGraphTab_K2_OnUserInfoReceived::InHydraId' has a wrong offset!");

// Function Tempest.TedScoreScreenGraphTab.OnActivateParticipantPanelSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState) == 0x000008, "Wrong alignment on TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState");
static_assert(sizeof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState) == 0x000018, "Wrong size on TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState");
static_assert(offsetof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState, InContentPanel) == 0x000000, "Member 'TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState, InContentSlot) == 0x000008, "Member 'TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState, InState) == 0x000010, "Member 'TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState, bInActivated) == 0x000011, "Member 'TedScoreScreenGraphTab_OnActivateParticipantPanelSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedScoreScreenGraphTab.OnParticipantsPanelContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedScoreScreenGraphTab_OnParticipantsPanelContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenGraphTab_OnParticipantsPanelContentChange) == 0x000008, "Wrong alignment on TedScoreScreenGraphTab_OnParticipantsPanelContentChange");
static_assert(sizeof(TedScoreScreenGraphTab_OnParticipantsPanelContentChange) == 0x000008, "Wrong size on TedScoreScreenGraphTab_OnParticipantsPanelContentChange");
static_assert(offsetof(TedScoreScreenGraphTab_OnParticipantsPanelContentChange, InContentPanel) == 0x000000, "Member 'TedScoreScreenGraphTab_OnParticipantsPanelContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedScoreScreenOnlinePlayersPanel.GetSlotIDs
// 0x0010 (0x0010 - 0x0000)
struct TedScoreScreenOnlinePlayersPanel_GetSlotIDs final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenOnlinePlayersPanel_GetSlotIDs) == 0x000008, "Wrong alignment on TedScoreScreenOnlinePlayersPanel_GetSlotIDs");
static_assert(sizeof(TedScoreScreenOnlinePlayersPanel_GetSlotIDs) == 0x000010, "Wrong size on TedScoreScreenOnlinePlayersPanel_GetSlotIDs");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_GetSlotIDs, ReturnValue) == 0x000000, "Member 'TedScoreScreenOnlinePlayersPanel_GetSlotIDs::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenOnlinePlayersPanel.PlayerDefeatOrVictoryFilter
// 0x0060 (0x0060 - 0x0000)
struct TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter final
{
public:
	const class UTedGenericDataContentPanel*      InPanel;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedGenericDataContainer               InGenericDataContainer;                            // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0058(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter) == 0x000008, "Wrong alignment on TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter");
static_assert(sizeof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter) == 0x000060, "Wrong size on TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter, InPanel) == 0x000000, "Member 'TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter::InPanel' has a wrong offset!");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter, InGenericDataContainer) == 0x000008, "Member 'TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter::InGenericDataContainer' has a wrong offset!");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter, InIndex) == 0x000058, "Member 'TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter::InIndex' has a wrong offset!");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter, ReturnValue) == 0x00005C, "Member 'TedScoreScreenOnlinePlayersPanel_PlayerDefeatOrVictoryFilter::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenOnlinePlayersPanel.OnPlayerDetailSlotRegistered
// 0x0018 (0x0018 - 0x0000)
struct TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered final
{
public:
	class UTedUI_InstancedContent*                SlotContent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelInstanced*              Panel;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered) == 0x000008, "Wrong alignment on TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered");
static_assert(sizeof(TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered) == 0x000018, "Wrong size on TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered, SlotContent) == 0x000000, "Member 'TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered::SlotContent' has a wrong offset!");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered, Panel) == 0x000008, "Member 'TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered::Panel' has a wrong offset!");
static_assert(offsetof(TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered, InIndex) == 0x000010, "Member 'TedScoreScreenOnlinePlayersPanel_OnPlayerDetailSlotRegistered::InIndex' has a wrong offset!");

// Function Tempest.TedScorescreenProgressbar.RecalculateMaxValue
// 0x0004 (0x0004 - 0x0000)
struct TedScorescreenProgressbar_RecalculateMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScorescreenProgressbar_RecalculateMaxValue) == 0x000004, "Wrong alignment on TedScorescreenProgressbar_RecalculateMaxValue");
static_assert(sizeof(TedScorescreenProgressbar_RecalculateMaxValue) == 0x000004, "Wrong size on TedScorescreenProgressbar_RecalculateMaxValue");
static_assert(offsetof(TedScorescreenProgressbar_RecalculateMaxValue, ReturnValue) == 0x000000, "Member 'TedScorescreenProgressbar_RecalculateMaxValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.SetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedScoreScreenRewardValueWidget_SetTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_SetTitle) == 0x000008, "Wrong alignment on TedScoreScreenRewardValueWidget_SetTitle");
static_assert(sizeof(TedScoreScreenRewardValueWidget_SetTitle) == 0x000010, "Wrong size on TedScoreScreenRewardValueWidget_SetTitle");
static_assert(offsetof(TedScoreScreenRewardValueWidget_SetTitle, InTitle) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_SetTitle::InTitle' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.SetValue
// 0x0008 (0x0008 - 0x0000)
struct TedScoreScreenRewardValueWidget_SetValue final
{
public:
	int32                                         InValue;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMax;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_SetValue) == 0x000004, "Wrong alignment on TedScoreScreenRewardValueWidget_SetValue");
static_assert(sizeof(TedScoreScreenRewardValueWidget_SetValue) == 0x000008, "Wrong size on TedScoreScreenRewardValueWidget_SetValue");
static_assert(offsetof(TedScoreScreenRewardValueWidget_SetValue, InValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(TedScoreScreenRewardValueWidget_SetValue, InMax) == 0x000004, "Member 'TedScoreScreenRewardValueWidget_SetValue::InMax' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetConditionalVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetConditionalVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetConditionalVisibility) == 0x000001, "Wrong alignment on TedScoreScreenRewardValueWidget_GetConditionalVisibility");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetConditionalVisibility) == 0x000001, "Wrong size on TedScoreScreenRewardValueWidget_GetConditionalVisibility");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetConditionalVisibility, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetConditionalVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetMax
// 0x0004 (0x0004 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetMax) == 0x000004, "Wrong alignment on TedScoreScreenRewardValueWidget_GetMax");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetMax) == 0x000004, "Wrong size on TedScoreScreenRewardValueWidget_GetMax");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetMax, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetMax::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetTitle
// 0x0010 (0x0010 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetTitle) == 0x000008, "Wrong alignment on TedScoreScreenRewardValueWidget_GetTitle");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetTitle) == 0x000010, "Wrong size on TedScoreScreenRewardValueWidget_GetTitle");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetTitle, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetTitle::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetValue
// 0x0004 (0x0004 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetValue) == 0x000004, "Wrong alignment on TedScoreScreenRewardValueWidget_GetValue");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetValue) == 0x000004, "Wrong size on TedScoreScreenRewardValueWidget_GetValue");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetValue, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetValueAlpha
// 0x0004 (0x0004 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetValueAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetValueAlpha) == 0x000004, "Wrong alignment on TedScoreScreenRewardValueWidget_GetValueAlpha");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetValueAlpha) == 0x000004, "Wrong size on TedScoreScreenRewardValueWidget_GetValueAlpha");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetValueAlpha, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetValueAlpha::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.GetValueText
// 0x0010 (0x0010 - 0x0000)
struct TedScoreScreenRewardValueWidget_GetValueText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_GetValueText) == 0x000008, "Wrong alignment on TedScoreScreenRewardValueWidget_GetValueText");
static_assert(sizeof(TedScoreScreenRewardValueWidget_GetValueText) == 0x000010, "Wrong size on TedScoreScreenRewardValueWidget_GetValueText");
static_assert(offsetof(TedScoreScreenRewardValueWidget_GetValueText, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_GetValueText::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenRewardValueWidget.HasMax
// 0x0001 (0x0001 - 0x0000)
struct TedScoreScreenRewardValueWidget_HasMax final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenRewardValueWidget_HasMax) == 0x000001, "Wrong alignment on TedScoreScreenRewardValueWidget_HasMax");
static_assert(sizeof(TedScoreScreenRewardValueWidget_HasMax) == 0x000001, "Wrong size on TedScoreScreenRewardValueWidget_HasMax");
static_assert(offsetof(TedScoreScreenRewardValueWidget_HasMax, ReturnValue) == 0x000000, "Member 'TedScoreScreenRewardValueWidget_HasMax::ReturnValue' has a wrong offset!");

// Function Tempest.TedScoreScreenStatsTableTab.K2_OnUserInfoReceived
// 0x0050 (0x0050 - 0x0000)
struct TedScoreScreenStatsTableTab_K2_OnUserInfoReceived final
{
public:
	struct FTedUserInfo                           InUserInfo;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InHydraId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenStatsTableTab_K2_OnUserInfoReceived) == 0x000008, "Wrong alignment on TedScoreScreenStatsTableTab_K2_OnUserInfoReceived");
static_assert(sizeof(TedScoreScreenStatsTableTab_K2_OnUserInfoReceived) == 0x000050, "Wrong size on TedScoreScreenStatsTableTab_K2_OnUserInfoReceived");
static_assert(offsetof(TedScoreScreenStatsTableTab_K2_OnUserInfoReceived, InUserInfo) == 0x000000, "Member 'TedScoreScreenStatsTableTab_K2_OnUserInfoReceived::InUserInfo' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_K2_OnUserInfoReceived, InHydraId) == 0x000040, "Member 'TedScoreScreenStatsTableTab_K2_OnUserInfoReceived::InHydraId' has a wrong offset!");

// Function Tempest.TedScoreScreenStatsTableTab.OnActivatePawnStatHeaderSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState) == 0x000008, "Wrong alignment on TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState");
static_assert(sizeof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState) == 0x000018, "Wrong size on TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState, InContentPanel) == 0x000000, "Member 'TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState, InContentSlot) == 0x000008, "Member 'TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState, InState) == 0x000010, "Member 'TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState, bInActivated) == 0x000011, "Member 'TedScoreScreenStatsTableTab_OnActivatePawnStatHeaderSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedScoreScreenStatsTableTab.OnActivateSummaryHeaderSlotState
// 0x0018 (0x0018 - 0x0000)
struct TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivated;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState) == 0x000008, "Wrong alignment on TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState");
static_assert(sizeof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState) == 0x000018, "Wrong size on TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState, InContentPanel) == 0x000000, "Member 'TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState, InContentSlot) == 0x000008, "Member 'TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState, InState) == 0x000010, "Member 'TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState::InState' has a wrong offset!");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState, bInActivated) == 0x000011, "Member 'TedScoreScreenStatsTableTab_OnActivateSummaryHeaderSlotState::bInActivated' has a wrong offset!");

// Function Tempest.TedScoreScreenStatsTableTab.OnSummaryPanelContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedScoreScreenStatsTableTab_OnSummaryPanelContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScoreScreenStatsTableTab_OnSummaryPanelContentChange) == 0x000008, "Wrong alignment on TedScoreScreenStatsTableTab_OnSummaryPanelContentChange");
static_assert(sizeof(TedScoreScreenStatsTableTab_OnSummaryPanelContentChange) == 0x000008, "Wrong size on TedScoreScreenStatsTableTab_OnSummaryPanelContentChange");
static_assert(offsetof(TedScoreScreenStatsTableTab_OnSummaryPanelContentChange, InContentPanel) == 0x000000, "Member 'TedScoreScreenStatsTableTab_OnSummaryPanelContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedScrollBox.SetBarStyle
// 0x0008 (0x0008 - 0x0000)
struct TedScrollBox_SetBarStyle final
{
public:
	const class USlateWidgetStyleAsset*           InStyle;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedScrollBox_SetBarStyle) == 0x000008, "Wrong alignment on TedScrollBox_SetBarStyle");
static_assert(sizeof(TedScrollBox_SetBarStyle) == 0x000008, "Wrong size on TedScrollBox_SetBarStyle");
static_assert(offsetof(TedScrollBox_SetBarStyle, InStyle) == 0x000000, "Member 'TedScrollBox_SetBarStyle::InStyle' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.DoesContentTakeOneSlot
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot) == 0x000004, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot, InSlotIndex) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot, ReturnValue) == 0x000004, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_DoesContentTakeOneSlot::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetSlotPadding
// 0x0010 (0x0010 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding) == 0x000004, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding) == 0x000010, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetSlotPadding::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetUnloadAllPawnsButOneShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut final
{
public:
	struct FTedShortcutUI                         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut) == 0x000020, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButOneShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetUnloadAllPawnsButTypeShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut final
{
public:
	struct FTedShortcutUI                         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut) == 0x000020, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsButTypeShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetUnloadAllPawnsShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut final
{
public:
	struct FTedShortcutUI                         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut) == 0x000020, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadAllPawnsShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetUnloadPawnsByTypeShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut final
{
public:
	struct FTedShortcutUI                         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut) == 0x000020, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnsByTypeShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsPanel.GetUnloadPawnShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut final
{
public:
	struct FTedShortcutUI                         ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut) == 0x000020, "Wrong size on TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsPanel_GetUnloadPawnShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.OnPlayersPawnContentChange
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange final
{
public:
	class UTedContentPanelDynamic*                InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange, InContentPanel) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnContentChange::InContentPanel' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.OnPlayersPawnTriggerSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction) == 0x000018, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction, InContentPanel) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction, InContentSlot) == 0x000008, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction, InAction) == 0x000010, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_OnPlayersPawnTriggerSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.SetPawnContainer
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer final
{
public:
	class UTedPawnContainerComponent*             InContainer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer, InContainer) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainer::InContainer' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.SetPawnContainerByPawn
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn final
{
public:
	class ATedPawn*                               InContainerOwner;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn, InContainerOwner) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_SetPawnContainerByPawn::InContainerOwner' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.UnloadAllPawnsButOne
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne) == 0x000004, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne) == 0x000004, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne, InSlotIndex) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_UnloadAllPawnsButOne::InSlotIndex' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.UnloadPawn
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn) == 0x000004, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn) == 0x000004, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn, InSlotIndex) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawn::InSlotIndex' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.UnloadPawns
// 0x0010 (0x0010 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns final
{
public:
	TArray<class ATedPawn*>                       InPawns;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns) == 0x000010, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns, InPawns) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawns::InPawns' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.UnloadPawnsByType
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInKeepMatching;                                   // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType) == 0x000004, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType, InSlotIndex) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType, bInKeepMatching) == 0x000004, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_UnloadPawnsByType::bInKeepMatching' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.GetPawnContainer
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer final
{
public:
	class UTedPawnContainerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetailsGarrisonedPawnsWidget.GetPawnContainerOwner
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner) == 0x000008, "Wrong alignment on TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner");
static_assert(sizeof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner) == 0x000008, "Wrong size on TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner");
static_assert(offsetof(TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner, ReturnValue) == 0x000000, "Member 'TedSelectionDetailsGarrisonedPawnsWidget_GetPawnContainerOwner::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionDetails_InfoSlots_Slot_Perks.OnContextChange
// 0x0018 (0x0018 - 0x0000)
struct TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange final
{
public:
	class UTedContentPanelStatic*                 InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InPrevContext;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InNewContext;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange) == 0x000008, "Wrong alignment on TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange");
static_assert(sizeof(TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange) == 0x000018, "Wrong size on TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange, InContentPanel) == 0x000000, "Member 'TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange, InPrevContext) == 0x000008, "Member 'TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange::InPrevContext' has a wrong offset!");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange, InNewContext) == 0x000010, "Member 'TedSelectionDetails_InfoSlots_Slot_Perks_OnContextChange::InNewContext' has a wrong offset!");

// Function Tempest.TedSelectionDetails_InfoSlots_Slot_Perks.GetContextPawn
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn) == 0x000008, "Wrong alignment on TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn");
static_assert(sizeof(TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn) == 0x000008, "Wrong size on TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn");
static_assert(offsetof(TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn, ReturnValue) == 0x000000, "Member 'TedSelectionDetails_InfoSlots_Slot_Perks_GetContextPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionGroupPanel.FocusCameraOnGroup
// 0x0004 (0x0004 - 0x0000)
struct TedSelectionGroupPanel_FocusCameraOnGroup final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionGroupPanel_FocusCameraOnGroup) == 0x000004, "Wrong alignment on TedSelectionGroupPanel_FocusCameraOnGroup");
static_assert(sizeof(TedSelectionGroupPanel_FocusCameraOnGroup) == 0x000004, "Wrong size on TedSelectionGroupPanel_FocusCameraOnGroup");
static_assert(offsetof(TedSelectionGroupPanel_FocusCameraOnGroup, InSlotIndex) == 0x000000, "Member 'TedSelectionGroupPanel_FocusCameraOnGroup::InSlotIndex' has a wrong offset!");

// Function Tempest.TedSelectionGroupPanel.ReceiveUpdateGroupSize
// 0x000C (0x000C - 0x0000)
struct TedSelectionGroupPanel_ReceiveUpdateGroupSize final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroupIndex;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGroupSize;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionGroupPanel_ReceiveUpdateGroupSize) == 0x000004, "Wrong alignment on TedSelectionGroupPanel_ReceiveUpdateGroupSize");
static_assert(sizeof(TedSelectionGroupPanel_ReceiveUpdateGroupSize) == 0x00000C, "Wrong size on TedSelectionGroupPanel_ReceiveUpdateGroupSize");
static_assert(offsetof(TedSelectionGroupPanel_ReceiveUpdateGroupSize, InSlotIndex) == 0x000000, "Member 'TedSelectionGroupPanel_ReceiveUpdateGroupSize::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionGroupPanel_ReceiveUpdateGroupSize, InGroupIndex) == 0x000004, "Member 'TedSelectionGroupPanel_ReceiveUpdateGroupSize::InGroupIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionGroupPanel_ReceiveUpdateGroupSize, InGroupSize) == 0x000008, "Member 'TedSelectionGroupPanel_ReceiveUpdateGroupSize::InGroupSize' has a wrong offset!");

// Function Tempest.TedSelectionGroupPanel.GetGroupIndex
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionGroupPanel_GetGroupIndex final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionGroupPanel_GetGroupIndex) == 0x000004, "Wrong alignment on TedSelectionGroupPanel_GetGroupIndex");
static_assert(sizeof(TedSelectionGroupPanel_GetGroupIndex) == 0x000008, "Wrong size on TedSelectionGroupPanel_GetGroupIndex");
static_assert(offsetof(TedSelectionGroupPanel_GetGroupIndex, InSlotIndex) == 0x000000, "Member 'TedSelectionGroupPanel_GetGroupIndex::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionGroupPanel_GetGroupIndex, ReturnValue) == 0x000004, "Member 'TedSelectionGroupPanel_GetGroupIndex::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionGroupPanel.GetSlotGroupSize
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionGroupPanel_GetSlotGroupSize final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSelectionGroupPanel_GetSlotGroupSize) == 0x000004, "Wrong alignment on TedSelectionGroupPanel_GetSlotGroupSize");
static_assert(sizeof(TedSelectionGroupPanel_GetSlotGroupSize) == 0x000008, "Wrong size on TedSelectionGroupPanel_GetSlotGroupSize");
static_assert(offsetof(TedSelectionGroupPanel_GetSlotGroupSize, InSlotIndex) == 0x000000, "Member 'TedSelectionGroupPanel_GetSlotGroupSize::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionGroupPanel_GetSlotGroupSize, ReturnValue) == 0x000004, "Member 'TedSelectionGroupPanel_GetSlotGroupSize::ReturnValue' has a wrong offset!");

// Function Tempest.TedSelectionGroupPanel.IsSlotEmpty
// 0x0008 (0x0008 - 0x0000)
struct TedSelectionGroupPanel_IsSlotEmpty final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSelectionGroupPanel_IsSlotEmpty) == 0x000004, "Wrong alignment on TedSelectionGroupPanel_IsSlotEmpty");
static_assert(sizeof(TedSelectionGroupPanel_IsSlotEmpty) == 0x000008, "Wrong size on TedSelectionGroupPanel_IsSlotEmpty");
static_assert(offsetof(TedSelectionGroupPanel_IsSlotEmpty, InSlotIndex) == 0x000000, "Member 'TedSelectionGroupPanel_IsSlotEmpty::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedSelectionGroupPanel_IsSlotEmpty, ReturnValue) == 0x000004, "Member 'TedSelectionGroupPanel_IsSlotEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsScreen_GameSettings.OnTriggerButtonSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction final
{
public:
	class UTedContentPanelBase*                   InContentPanel;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InContentSlot;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction) == 0x000008, "Wrong alignment on TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction");
static_assert(sizeof(TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction) == 0x000018, "Wrong size on TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction");
static_assert(offsetof(TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction, InContentPanel) == 0x000000, "Member 'TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction::InContentPanel' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction, InContentSlot) == 0x000008, "Member 'TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction::InContentSlot' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction, InAction) == 0x000010, "Member 'TedSettingsScreen_GameSettings_OnTriggerButtonSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedSettingsScreen_GameSettings.RunAutoBenchmark
// 0x0008 (0x0008 - 0x0000)
struct TedSettingsScreen_GameSettings_RunAutoBenchmark final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsScreen_GameSettings_RunAutoBenchmark) == 0x000004, "Wrong alignment on TedSettingsScreen_GameSettings_RunAutoBenchmark");
static_assert(sizeof(TedSettingsScreen_GameSettings_RunAutoBenchmark) == 0x000008, "Wrong size on TedSettingsScreen_GameSettings_RunAutoBenchmark");
static_assert(offsetof(TedSettingsScreen_GameSettings_RunAutoBenchmark, InDeltaTime) == 0x000000, "Member 'TedSettingsScreen_GameSettings_RunAutoBenchmark::InDeltaTime' has a wrong offset!");
static_assert(offsetof(TedSettingsScreen_GameSettings_RunAutoBenchmark, ReturnValue) == 0x000004, "Member 'TedSettingsScreen_GameSettings_RunAutoBenchmark::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_CheckBox.SetSourceValue
// 0x0001 (0x0001 - 0x0000)
struct TedSettingsSlot_CheckBox_SetSourceValue final
{
public:
	bool                                          bInIsChecked;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_CheckBox_SetSourceValue) == 0x000001, "Wrong alignment on TedSettingsSlot_CheckBox_SetSourceValue");
static_assert(sizeof(TedSettingsSlot_CheckBox_SetSourceValue) == 0x000001, "Wrong size on TedSettingsSlot_CheckBox_SetSourceValue");
static_assert(offsetof(TedSettingsSlot_CheckBox_SetSourceValue, bInIsChecked) == 0x000000, "Member 'TedSettingsSlot_CheckBox_SetSourceValue::bInIsChecked' has a wrong offset!");

// Function Tempest.TedSettingsSlot_CheckBox.GetSourceValue
// 0x0001 (0x0001 - 0x0000)
struct TedSettingsSlot_CheckBox_GetSourceValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_CheckBox_GetSourceValue) == 0x000001, "Wrong alignment on TedSettingsSlot_CheckBox_GetSourceValue");
static_assert(sizeof(TedSettingsSlot_CheckBox_GetSourceValue) == 0x000001, "Wrong size on TedSettingsSlot_CheckBox_GetSourceValue");
static_assert(offsetof(TedSettingsSlot_CheckBox_GetSourceValue, ReturnValue) == 0x000000, "Member 'TedSettingsSlot_CheckBox_GetSourceValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAxis.ClearSourceValue
// 0x0028 (0x0028 - 0x0000)
struct TedSettingsSlot_InputAxis_ClearSourceValue final
{
public:
	struct FInputAxisKeyMapping                   InValue;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAxis_ClearSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAxis_ClearSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAxis_ClearSourceValue) == 0x000028, "Wrong size on TedSettingsSlot_InputAxis_ClearSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAxis_ClearSourceValue, InValue) == 0x000000, "Member 'TedSettingsSlot_InputAxis_ClearSourceValue::InValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAxis.OnTriggerMappingSlotAction
// 0x0018 (0x0018 - 0x0000)
struct TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction final
{
public:
	class UTedContentPanelBase*                   InPanel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTedContentPanelSlotBase*               InSlot;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotAction                         InAction;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction");
static_assert(sizeof(TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction) == 0x000018, "Wrong size on TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction");
static_assert(offsetof(TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction, InPanel) == 0x000000, "Member 'TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction::InPanel' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction, InSlot) == 0x000008, "Member 'TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction::InSlot' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction, InAction) == 0x000010, "Member 'TedSettingsSlot_InputAxis_OnTriggerMappingSlotAction::InAction' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAxis.SetSourceValue
// 0x0028 (0x0028 - 0x0000)
struct TedSettingsSlot_InputAxis_SetSourceValue final
{
public:
	struct FInputAxisKeyMapping                   InValue;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAxis_SetSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAxis_SetSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAxis_SetSourceValue) == 0x000028, "Wrong size on TedSettingsSlot_InputAxis_SetSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAxis_SetSourceValue, InValue) == 0x000000, "Member 'TedSettingsSlot_InputAxis_SetSourceValue::InValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAxis.GetSourceValue
// 0x0030 (0x0030 - 0x0000)
struct TedSettingsSlot_InputAxis_GetSourceValue final
{
public:
	int32                                         InMappingIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAxis_GetSourceValue) == 0x000008, "Wrong alignment on TedSettingsSlot_InputAxis_GetSourceValue");
static_assert(sizeof(TedSettingsSlot_InputAxis_GetSourceValue) == 0x000030, "Wrong size on TedSettingsSlot_InputAxis_GetSourceValue");
static_assert(offsetof(TedSettingsSlot_InputAxis_GetSourceValue, InMappingIndex) == 0x000000, "Member 'TedSettingsSlot_InputAxis_GetSourceValue::InMappingIndex' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_InputAxis_GetSourceValue, ReturnValue) == 0x000008, "Member 'TedSettingsSlot_InputAxis_GetSourceValue::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_InputAxis.IsPositive
// 0x0001 (0x0001 - 0x0000)
struct TedSettingsSlot_InputAxis_IsPositive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_InputAxis_IsPositive) == 0x000001, "Wrong alignment on TedSettingsSlot_InputAxis_IsPositive");
static_assert(sizeof(TedSettingsSlot_InputAxis_IsPositive) == 0x000001, "Wrong size on TedSettingsSlot_InputAxis_IsPositive");
static_assert(offsetof(TedSettingsSlot_InputAxis_IsPositive, ReturnValue) == 0x000000, "Member 'TedSettingsSlot_InputAxis_IsPositive::ReturnValue' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Readonly.SetKeyBinds
// 0x0010 (0x0010 - 0x0000)
struct TedSettingsSlot_Readonly_SetKeyBinds final
{
public:
	TArray<struct FKey>                           Binds;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Readonly_SetKeyBinds) == 0x000008, "Wrong alignment on TedSettingsSlot_Readonly_SetKeyBinds");
static_assert(sizeof(TedSettingsSlot_Readonly_SetKeyBinds) == 0x000010, "Wrong size on TedSettingsSlot_Readonly_SetKeyBinds");
static_assert(offsetof(TedSettingsSlot_Readonly_SetKeyBinds, Binds) == 0x000000, "Member 'TedSettingsSlot_Readonly_SetKeyBinds::Binds' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Section.OnExpansionChanged
// 0x0010 (0x0010 - 0x0000)
struct TedSettingsSlot_Section_OnExpansionChanged final
{
public:
	class UExpandableArea*                        InArea;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsExpanded;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedSettingsSlot_Section_OnExpansionChanged) == 0x000008, "Wrong alignment on TedSettingsSlot_Section_OnExpansionChanged");
static_assert(sizeof(TedSettingsSlot_Section_OnExpansionChanged) == 0x000010, "Wrong size on TedSettingsSlot_Section_OnExpansionChanged");
static_assert(offsetof(TedSettingsSlot_Section_OnExpansionChanged, InArea) == 0x000000, "Member 'TedSettingsSlot_Section_OnExpansionChanged::InArea' has a wrong offset!");
static_assert(offsetof(TedSettingsSlot_Section_OnExpansionChanged, bInIsExpanded) == 0x000008, "Member 'TedSettingsSlot_Section_OnExpansionChanged::bInIsExpanded' has a wrong offset!");

// Function Tempest.TedSettingsSlot_Section.GetInnerSettingsPanel
// 0x0008 (0x0008 - 0x0000)
struct TedSettingsSlot_Section_GetInnerSettingsPanel final
{
public:
	class UTedSettingsPanel*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSettingsSlot_Section_GetInnerSettingsPanel) == 0x000008, "Wrong alignment on TedSettingsSlot_Section_GetInnerSettingsPanel");
static_assert(sizeof(TedSettingsSlot_Section_GetInnerSettingsPanel) == 0x000008, "Wrong size on TedSettingsSlot_Section_GetInnerSettingsPanel");
static_assert(offsetof(TedSettingsSlot_Section_GetInnerSettingsPanel, ReturnValue) == 0x000000, "Member 'TedSettingsSlot_Section_GetInnerSettingsPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.SetContent
// 0x0018 (0x0018 - 0x0000)
struct TedShortcutsPanel_SetContent final
{
public:
	TArray<struct FTedShortcutChordUI>            InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedShortcutsPanel_SetContent) == 0x000008, "Wrong alignment on TedShortcutsPanel_SetContent");
static_assert(sizeof(TedShortcutsPanel_SetContent) == 0x000018, "Wrong size on TedShortcutsPanel_SetContent");
static_assert(offsetof(TedShortcutsPanel_SetContent, InContent) == 0x000000, "Member 'TedShortcutsPanel_SetContent::InContent' has a wrong offset!");
static_assert(offsetof(TedShortcutsPanel_SetContent, bInRefreshContent) == 0x000010, "Member 'TedShortcutsPanel_SetContent::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.SetContentShortcuts
// 0x0018 (0x0018 - 0x0000)
struct TedShortcutsPanel_SetContentShortcuts final
{
public:
	TArray<struct FTedShortcutUI>                 InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedShortcutsPanel_SetContentShortcuts) == 0x000008, "Wrong alignment on TedShortcutsPanel_SetContentShortcuts");
static_assert(sizeof(TedShortcutsPanel_SetContentShortcuts) == 0x000018, "Wrong size on TedShortcutsPanel_SetContentShortcuts");
static_assert(offsetof(TedShortcutsPanel_SetContentShortcuts, InContent) == 0x000000, "Member 'TedShortcutsPanel_SetContentShortcuts::InContent' has a wrong offset!");
static_assert(offsetof(TedShortcutsPanel_SetContentShortcuts, bInRefreshContent) == 0x000010, "Member 'TedShortcutsPanel_SetContentShortcuts::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.GetContent
// 0x0058 (0x0058 - 0x0000)
struct TedShortcutsPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedShortcutChordUI                    OutContent;                                        // 0x0008(0x0048)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedShortcutsPanel_GetContent) == 0x000008, "Wrong alignment on TedShortcutsPanel_GetContent");
static_assert(sizeof(TedShortcutsPanel_GetContent) == 0x000058, "Wrong size on TedShortcutsPanel_GetContent");
static_assert(offsetof(TedShortcutsPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedShortcutsPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedShortcutsPanel_GetContent, OutContent) == 0x000008, "Member 'TedShortcutsPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedShortcutsPanel_GetContent, ReturnValue) == 0x000050, "Member 'TedShortcutsPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.GetEmptyVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedShortcutsPanel_GetEmptyVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedShortcutsPanel_GetEmptyVisibility) == 0x000001, "Wrong alignment on TedShortcutsPanel_GetEmptyVisibility");
static_assert(sizeof(TedShortcutsPanel_GetEmptyVisibility) == 0x000001, "Wrong size on TedShortcutsPanel_GetEmptyVisibility");
static_assert(offsetof(TedShortcutsPanel_GetEmptyVisibility, ReturnValue) == 0x000000, "Member 'TedShortcutsPanel_GetEmptyVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.GetNonEmptyVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedShortcutsPanel_GetNonEmptyVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedShortcutsPanel_GetNonEmptyVisibility) == 0x000001, "Wrong alignment on TedShortcutsPanel_GetNonEmptyVisibility");
static_assert(sizeof(TedShortcutsPanel_GetNonEmptyVisibility) == 0x000001, "Wrong size on TedShortcutsPanel_GetNonEmptyVisibility");
static_assert(offsetof(TedShortcutsPanel_GetNonEmptyVisibility, ReturnValue) == 0x000000, "Member 'TedShortcutsPanel_GetNonEmptyVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsPanel.IsEmpty
// 0x0001 (0x0001 - 0x0000)
struct TedShortcutsPanel_IsEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedShortcutsPanel_IsEmpty) == 0x000001, "Wrong alignment on TedShortcutsPanel_IsEmpty");
static_assert(sizeof(TedShortcutsPanel_IsEmpty) == 0x000001, "Wrong size on TedShortcutsPanel_IsEmpty");
static_assert(offsetof(TedShortcutsPanel_IsEmpty, ReturnValue) == 0x000000, "Member 'TedShortcutsPanel_IsEmpty::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsSlot.GetContent
// 0x0050 (0x0050 - 0x0000)
struct TedShortcutsSlot_GetContent final
{
public:
	struct FTedShortcutChordUI                    OutContent;                                        // 0x0000(0x0048)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedShortcutsSlot_GetContent) == 0x000008, "Wrong alignment on TedShortcutsSlot_GetContent");
static_assert(sizeof(TedShortcutsSlot_GetContent) == 0x000050, "Wrong size on TedShortcutsSlot_GetContent");
static_assert(offsetof(TedShortcutsSlot_GetContent, OutContent) == 0x000000, "Member 'TedShortcutsSlot_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedShortcutsSlot_GetContent, ReturnValue) == 0x000048, "Member 'TedShortcutsSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedShortcutsSlot.GetContentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedShortcutsSlot_GetContentPanel final
{
public:
	class UTedShortcutsPanel*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedShortcutsSlot_GetContentPanel) == 0x000008, "Wrong alignment on TedShortcutsSlot_GetContentPanel");
static_assert(sizeof(TedShortcutsSlot_GetContentPanel) == 0x000008, "Wrong size on TedShortcutsSlot_GetContentPanel");
static_assert(offsetof(TedShortcutsSlot_GetContentPanel, ReturnValue) == 0x000000, "Member 'TedShortcutsSlot_GetContentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkipUIWidget.GetSkippableSequenceText
// 0x0010 (0x0010 - 0x0000)
struct TedSkipUIWidget_GetSkippableSequenceText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkipUIWidget_GetSkippableSequenceText) == 0x000008, "Wrong alignment on TedSkipUIWidget_GetSkippableSequenceText");
static_assert(sizeof(TedSkipUIWidget_GetSkippableSequenceText) == 0x000010, "Wrong size on TedSkipUIWidget_GetSkippableSequenceText");
static_assert(offsetof(TedSkipUIWidget_GetSkippableSequenceText, ReturnValue) == 0x000000, "Member 'TedSkipUIWidget_GetSkippableSequenceText::ReturnValue' has a wrong offset!");

// Function Tempest.TedSkipUIWidget.GetSkippingProgress
// 0x0004 (0x0004 - 0x0000)
struct TedSkipUIWidget_GetSkippingProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSkipUIWidget_GetSkippingProgress) == 0x000004, "Wrong alignment on TedSkipUIWidget_GetSkippingProgress");
static_assert(sizeof(TedSkipUIWidget_GetSkippingProgress) == 0x000004, "Wrong size on TedSkipUIWidget_GetSkippingProgress");
static_assert(offsetof(TedSkipUIWidget_GetSkippingProgress, ReturnValue) == 0x000000, "Member 'TedSkipUIWidget_GetSkippingProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanel.SetContentSourcePawn
// 0x0008 (0x0008 - 0x0000)
struct TedStatusPanel_SetContentSourcePawn final
{
public:
	class ATedPawn*                               InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanel_SetContentSourcePawn) == 0x000008, "Wrong alignment on TedStatusPanel_SetContentSourcePawn");
static_assert(sizeof(TedStatusPanel_SetContentSourcePawn) == 0x000008, "Wrong size on TedStatusPanel_SetContentSourcePawn");
static_assert(offsetof(TedStatusPanel_SetContentSourcePawn, InPawn) == 0x000000, "Member 'TedStatusPanel_SetContentSourcePawn::InPawn' has a wrong offset!");

// Function Tempest.TedStatusPanel.GetContent
// 0x0010 (0x0010 - 0x0000)
struct TedStatusPanel_GetContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTedStatusDefinition*             ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanel_GetContent) == 0x000008, "Wrong alignment on TedStatusPanel_GetContent");
static_assert(sizeof(TedStatusPanel_GetContent) == 0x000010, "Wrong size on TedStatusPanel_GetContent");
static_assert(offsetof(TedStatusPanel_GetContent, InSlotIndex) == 0x000000, "Member 'TedStatusPanel_GetContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedStatusPanel_GetContent, ReturnValue) == 0x000008, "Member 'TedStatusPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanel.GetContentSourceAbilityComponent
// 0x0008 (0x0008 - 0x0000)
struct TedStatusPanel_GetContentSourceAbilityComponent final
{
public:
	class UTedAbilityComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanel_GetContentSourceAbilityComponent) == 0x000008, "Wrong alignment on TedStatusPanel_GetContentSourceAbilityComponent");
static_assert(sizeof(TedStatusPanel_GetContentSourceAbilityComponent) == 0x000008, "Wrong size on TedStatusPanel_GetContentSourceAbilityComponent");
static_assert(offsetof(TedStatusPanel_GetContentSourceAbilityComponent, ReturnValue) == 0x000000, "Member 'TedStatusPanel_GetContentSourceAbilityComponent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanel.GetContentSourcePawn
// 0x0008 (0x0008 - 0x0000)
struct TedStatusPanel_GetContentSourcePawn final
{
public:
	class ATedPawn*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanel_GetContentSourcePawn) == 0x000008, "Wrong alignment on TedStatusPanel_GetContentSourcePawn");
static_assert(sizeof(TedStatusPanel_GetContentSourcePawn) == 0x000008, "Wrong size on TedStatusPanel_GetContentSourcePawn");
static_assert(offsetof(TedStatusPanel_GetContentSourcePawn, ReturnValue) == 0x000000, "Member 'TedStatusPanel_GetContentSourcePawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusPanel.GetInlinedSlotsNum
// 0x0004 (0x0004 - 0x0000)
struct TedStatusPanel_GetInlinedSlotsNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusPanel_GetInlinedSlotsNum) == 0x000004, "Wrong alignment on TedStatusPanel_GetInlinedSlotsNum");
static_assert(sizeof(TedStatusPanel_GetInlinedSlotsNum) == 0x000004, "Wrong size on TedStatusPanel_GetInlinedSlotsNum");
static_assert(offsetof(TedStatusPanel_GetInlinedSlotsNum, ReturnValue) == 0x000000, "Member 'TedStatusPanel_GetInlinedSlotsNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetContent
// 0x0008 (0x0008 - 0x0000)
struct TedStatusSlot_GetContent final
{
public:
	const class UTedStatusDefinition*             ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetContent) == 0x000008, "Wrong alignment on TedStatusSlot_GetContent");
static_assert(sizeof(TedStatusSlot_GetContent) == 0x000008, "Wrong size on TedStatusSlot_GetContent");
static_assert(offsetof(TedStatusSlot_GetContent, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetDescription
// 0x0010 (0x0010 - 0x0000)
struct TedStatusSlot_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetDescription) == 0x000008, "Wrong alignment on TedStatusSlot_GetDescription");
static_assert(sizeof(TedStatusSlot_GetDescription) == 0x000010, "Wrong size on TedStatusSlot_GetDescription");
static_assert(offsetof(TedStatusSlot_GetDescription, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedStatusSlot_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetDisplayName) == 0x000008, "Wrong alignment on TedStatusSlot_GetDisplayName");
static_assert(sizeof(TedStatusSlot_GetDisplayName) == 0x000010, "Wrong size on TedStatusSlot_GetDisplayName");
static_assert(offsetof(TedStatusSlot_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetIcon
// 0x0008 (0x0008 - 0x0000)
struct TedStatusSlot_GetIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetIcon) == 0x000008, "Wrong alignment on TedStatusSlot_GetIcon");
static_assert(sizeof(TedStatusSlot_GetIcon) == 0x000008, "Wrong size on TedStatusSlot_GetIcon");
static_assert(offsetof(TedStatusSlot_GetIcon, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetIcon::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetIconMID
// 0x0008 (0x0008 - 0x0000)
struct TedStatusSlot_GetIconMID final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetIconMID) == 0x000008, "Wrong alignment on TedStatusSlot_GetIconMID");
static_assert(sizeof(TedStatusSlot_GetIconMID) == 0x000008, "Wrong size on TedStatusSlot_GetIconMID");
static_assert(offsetof(TedStatusSlot_GetIconMID, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetIconMID::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetParentPanel
// 0x0008 (0x0008 - 0x0000)
struct TedStatusSlot_GetParentPanel final
{
public:
	class UTedStatusPanel*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetParentPanel) == 0x000008, "Wrong alignment on TedStatusSlot_GetParentPanel");
static_assert(sizeof(TedStatusSlot_GetParentPanel) == 0x000008, "Wrong size on TedStatusSlot_GetParentPanel");
static_assert(offsetof(TedStatusSlot_GetParentPanel, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetParentPanel::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.GetType
// 0x0001 (0x0001 - 0x0000)
struct TedStatusSlot_GetType final
{
public:
	ETedStatusType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_GetType) == 0x000001, "Wrong alignment on TedStatusSlot_GetType");
static_assert(sizeof(TedStatusSlot_GetType) == 0x000001, "Wrong size on TedStatusSlot_GetType");
static_assert(offsetof(TedStatusSlot_GetType, ReturnValue) == 0x000000, "Member 'TedStatusSlot_GetType::ReturnValue' has a wrong offset!");

// Function Tempest.TedStatusSlot.IsInlined
// 0x0001 (0x0001 - 0x0000)
struct TedStatusSlot_IsInlined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStatusSlot_IsInlined) == 0x000001, "Wrong alignment on TedStatusSlot_IsInlined");
static_assert(sizeof(TedStatusSlot_IsInlined) == 0x000001, "Wrong size on TedStatusSlot_IsInlined");
static_assert(offsetof(TedStatusSlot_IsInlined, ReturnValue) == 0x000000, "Member 'TedStatusSlot_IsInlined::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureCommandButton.SelectCommand
// 0x0001 (0x0001 - 0x0000)
struct TedStructureCommandButton_SelectCommand final
{
public:
	bool                                          bInDeselectIfAlreadySelected;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureCommandButton_SelectCommand) == 0x000001, "Wrong alignment on TedStructureCommandButton_SelectCommand");
static_assert(sizeof(TedStructureCommandButton_SelectCommand) == 0x000001, "Wrong size on TedStructureCommandButton_SelectCommand");
static_assert(offsetof(TedStructureCommandButton_SelectCommand, bInDeselectIfAlreadySelected) == 0x000000, "Member 'TedStructureCommandButton_SelectCommand::bInDeselectIfAlreadySelected' has a wrong offset!");

// Function Tempest.TedStructureCommandButton.GetCommandShortcut
// 0x0028 (0x0028 - 0x0000)
struct TedStructureCommandButton_GetCommandShortcut final
{
public:
	struct FInputChord                            OutShortcut;                                       // 0x0000(0x0020)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructureCommandButton_GetCommandShortcut) == 0x000008, "Wrong alignment on TedStructureCommandButton_GetCommandShortcut");
static_assert(sizeof(TedStructureCommandButton_GetCommandShortcut) == 0x000028, "Wrong size on TedStructureCommandButton_GetCommandShortcut");
static_assert(offsetof(TedStructureCommandButton_GetCommandShortcut, OutShortcut) == 0x000000, "Member 'TedStructureCommandButton_GetCommandShortcut::OutShortcut' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetCommandShortcut, ReturnValue) == 0x000020, "Member 'TedStructureCommandButton_GetCommandShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureCommandButton.GetCommandUIData
// 0x0038 (0x0038 - 0x0000)
struct TedStructureCommandButton_GetCommandUIData final
{
public:
	class UTexture2D*                             OutIcon;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OutCursor;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutName;                                           // 0x0010(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   OutDescription;                                    // 0x0020(0x0010)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructureCommandButton_GetCommandUIData) == 0x000008, "Wrong alignment on TedStructureCommandButton_GetCommandUIData");
static_assert(sizeof(TedStructureCommandButton_GetCommandUIData) == 0x000038, "Wrong size on TedStructureCommandButton_GetCommandUIData");
static_assert(offsetof(TedStructureCommandButton_GetCommandUIData, OutIcon) == 0x000000, "Member 'TedStructureCommandButton_GetCommandUIData::OutIcon' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetCommandUIData, OutCursor) == 0x000008, "Member 'TedStructureCommandButton_GetCommandUIData::OutCursor' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetCommandUIData, OutName) == 0x000010, "Member 'TedStructureCommandButton_GetCommandUIData::OutName' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetCommandUIData, OutDescription) == 0x000020, "Member 'TedStructureCommandButton_GetCommandUIData::OutDescription' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetCommandUIData, ReturnValue) == 0x000030, "Member 'TedStructureCommandButton_GetCommandUIData::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureCommandButton.GetKeyCommandShortcut
// 0x0020 (0x0020 - 0x0000)
struct TedStructureCommandButton_GetKeyCommandShortcut final
{
public:
	struct FKey                                   OutShortcut;                                       // 0x0000(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructureCommandButton_GetKeyCommandShortcut) == 0x000008, "Wrong alignment on TedStructureCommandButton_GetKeyCommandShortcut");
static_assert(sizeof(TedStructureCommandButton_GetKeyCommandShortcut) == 0x000020, "Wrong size on TedStructureCommandButton_GetKeyCommandShortcut");
static_assert(offsetof(TedStructureCommandButton_GetKeyCommandShortcut, OutShortcut) == 0x000000, "Member 'TedStructureCommandButton_GetKeyCommandShortcut::OutShortcut' has a wrong offset!");
static_assert(offsetof(TedStructureCommandButton_GetKeyCommandShortcut, ReturnValue) == 0x000018, "Member 'TedStructureCommandButton_GetKeyCommandShortcut::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructurePlacementPreviewComponent.OnSetupMaterial
// 0x0010 (0x0010 - 0x0000)
struct TedStructurePlacementPreviewComponent_OnSetupMaterial final
{
public:
	class UMaterialInstanceDynamic*               InMyMID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMaterialInstance*                InStructureMID;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructurePlacementPreviewComponent_OnSetupMaterial) == 0x000008, "Wrong alignment on TedStructurePlacementPreviewComponent_OnSetupMaterial");
static_assert(sizeof(TedStructurePlacementPreviewComponent_OnSetupMaterial) == 0x000010, "Wrong size on TedStructurePlacementPreviewComponent_OnSetupMaterial");
static_assert(offsetof(TedStructurePlacementPreviewComponent_OnSetupMaterial, InMyMID) == 0x000000, "Member 'TedStructurePlacementPreviewComponent_OnSetupMaterial::InMyMID' has a wrong offset!");
static_assert(offsetof(TedStructurePlacementPreviewComponent_OnSetupMaterial, InStructureMID) == 0x000008, "Member 'TedStructurePlacementPreviewComponent_OnSetupMaterial::InStructureMID' has a wrong offset!");

// Function Tempest.TedStructureGate.OnSetOpenedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct TedStructureGate_OnSetOpenedCosmetic final
{
public:
	bool                                          bInOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureGate_OnSetOpenedCosmetic) == 0x000001, "Wrong alignment on TedStructureGate_OnSetOpenedCosmetic");
static_assert(sizeof(TedStructureGate_OnSetOpenedCosmetic) == 0x000001, "Wrong size on TedStructureGate_OnSetOpenedCosmetic");
static_assert(offsetof(TedStructureGate_OnSetOpenedCosmetic, bInOpened) == 0x000000, "Member 'TedStructureGate_OnSetOpenedCosmetic::bInOpened' has a wrong offset!");

// Function Tempest.TedStructureGate.SetOpened
// 0x0001 (0x0001 - 0x0000)
struct TedStructureGate_SetOpened final
{
public:
	bool                                          bInOpened;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureGate_SetOpened) == 0x000001, "Wrong alignment on TedStructureGate_SetOpened");
static_assert(sizeof(TedStructureGate_SetOpened) == 0x000001, "Wrong size on TedStructureGate_SetOpened");
static_assert(offsetof(TedStructureGate_SetOpened, bInOpened) == 0x000000, "Member 'TedStructureGate_SetOpened::bInOpened' has a wrong offset!");

// Function Tempest.TedStructureGate.IsOpened
// 0x0001 (0x0001 - 0x0000)
struct TedStructureGate_IsOpened final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureGate_IsOpened) == 0x000001, "Wrong alignment on TedStructureGate_IsOpened");
static_assert(sizeof(TedStructureGate_IsOpened) == 0x000001, "Wrong size on TedStructureGate_IsOpened");
static_assert(offsetof(TedStructureGate_IsOpened, ReturnValue) == 0x000000, "Member 'TedStructureGate_IsOpened::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructurePlacementVolume.K2_SetRelevantDefinitions
// 0x0010 (0x0010 - 0x0000)
struct TedStructurePlacementVolume_K2_SetRelevantDefinitions final
{
public:
	TArray<TSoftObjectPtr<class UTedEntityDefinitionAsset>> InDefinitions;                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructurePlacementVolume_K2_SetRelevantDefinitions) == 0x000008, "Wrong alignment on TedStructurePlacementVolume_K2_SetRelevantDefinitions");
static_assert(sizeof(TedStructurePlacementVolume_K2_SetRelevantDefinitions) == 0x000010, "Wrong size on TedStructurePlacementVolume_K2_SetRelevantDefinitions");
static_assert(offsetof(TedStructurePlacementVolume_K2_SetRelevantDefinitions, InDefinitions) == 0x000000, "Member 'TedStructurePlacementVolume_K2_SetRelevantDefinitions::InDefinitions' has a wrong offset!");

// Function Tempest.TedStructurePlacementVolume.K2_SetRelevantTech
// 0x0020 (0x0020 - 0x0000)
struct TedStructurePlacementVolume_K2_SetRelevantTech final
{
public:
	struct FGameplayTagContainer                  InTech;                                            // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructurePlacementVolume_K2_SetRelevantTech) == 0x000008, "Wrong alignment on TedStructurePlacementVolume_K2_SetRelevantTech");
static_assert(sizeof(TedStructurePlacementVolume_K2_SetRelevantTech) == 0x000020, "Wrong size on TedStructurePlacementVolume_K2_SetRelevantTech");
static_assert(offsetof(TedStructurePlacementVolume_K2_SetRelevantTech, InTech) == 0x000000, "Member 'TedStructurePlacementVolume_K2_SetRelevantTech::InTech' has a wrong offset!");

// Function Tempest.TedStructurePlacementVolume.GetRelevantTech
// 0x0020 (0x0020 - 0x0000)
struct TedStructurePlacementVolume_GetRelevantTech final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructurePlacementVolume_GetRelevantTech) == 0x000008, "Wrong alignment on TedStructurePlacementVolume_GetRelevantTech");
static_assert(sizeof(TedStructurePlacementVolume_GetRelevantTech) == 0x000020, "Wrong size on TedStructurePlacementVolume_GetRelevantTech");
static_assert(offsetof(TedStructurePlacementVolume_GetRelevantTech, ReturnValue) == 0x000000, "Member 'TedStructurePlacementVolume_GetRelevantTech::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureRepairBay.GetOccupiedSlotsNum
// 0x0004 (0x0004 - 0x0000)
struct TedStructureRepairBay_GetOccupiedSlotsNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureRepairBay_GetOccupiedSlotsNum) == 0x000004, "Wrong alignment on TedStructureRepairBay_GetOccupiedSlotsNum");
static_assert(sizeof(TedStructureRepairBay_GetOccupiedSlotsNum) == 0x000004, "Wrong size on TedStructureRepairBay_GetOccupiedSlotsNum");
static_assert(offsetof(TedStructureRepairBay_GetOccupiedSlotsNum, ReturnValue) == 0x000000, "Member 'TedStructureRepairBay_GetOccupiedSlotsNum::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureRepairBay.IsRepairingVehicle
// 0x0001 (0x0001 - 0x0000)
struct TedStructureRepairBay_IsRepairingVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureRepairBay_IsRepairingVehicle) == 0x000001, "Wrong alignment on TedStructureRepairBay_IsRepairingVehicle");
static_assert(sizeof(TedStructureRepairBay_IsRepairingVehicle) == 0x000001, "Wrong size on TedStructureRepairBay_IsRepairingVehicle");
static_assert(offsetof(TedStructureRepairBay_IsRepairingVehicle, ReturnValue) == 0x000000, "Member 'TedStructureRepairBay_IsRepairingVehicle::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructuresPanel.ActivateSlotStateByContent
// 0x0010 (0x0010 - 0x0000)
struct TedStructuresPanel_ActivateSlotStateByContent final
{
public:
	const class ATedStructureBase*                InContent;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedContentSlotState                          InState;                                           // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInActivate;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructuresPanel_ActivateSlotStateByContent) == 0x000008, "Wrong alignment on TedStructuresPanel_ActivateSlotStateByContent");
static_assert(sizeof(TedStructuresPanel_ActivateSlotStateByContent) == 0x000010, "Wrong size on TedStructuresPanel_ActivateSlotStateByContent");
static_assert(offsetof(TedStructuresPanel_ActivateSlotStateByContent, InContent) == 0x000000, "Member 'TedStructuresPanel_ActivateSlotStateByContent::InContent' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_ActivateSlotStateByContent, InState) == 0x000008, "Member 'TedStructuresPanel_ActivateSlotStateByContent::InState' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_ActivateSlotStateByContent, bInActivate) == 0x000009, "Member 'TedStructuresPanel_ActivateSlotStateByContent::bInActivate' has a wrong offset!");

// Function Tempest.TedStructuresPanel.SetContent
// 0x0018 (0x0018 - 0x0000)
struct TedStructuresPanel_SetContent final
{
public:
	TArray<class ATedStructureBase*>              InContent;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructuresPanel_SetContent) == 0x000008, "Wrong alignment on TedStructuresPanel_SetContent");
static_assert(sizeof(TedStructuresPanel_SetContent) == 0x000018, "Wrong size on TedStructuresPanel_SetContent");
static_assert(offsetof(TedStructuresPanel_SetContent, InContent) == 0x000000, "Member 'TedStructuresPanel_SetContent::InContent' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_SetContent, bInRefreshContent) == 0x000010, "Member 'TedStructuresPanel_SetContent::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedStructuresPanel.SetUniqueContent
// 0x0058 (0x0058 - 0x0000)
struct TedStructuresPanel_SetUniqueContent final
{
public:
	TSet<class ATedStructureBase*>                InContent;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bInRefreshContent;                                 // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructuresPanel_SetUniqueContent) == 0x000008, "Wrong alignment on TedStructuresPanel_SetUniqueContent");
static_assert(sizeof(TedStructuresPanel_SetUniqueContent) == 0x000058, "Wrong size on TedStructuresPanel_SetUniqueContent");
static_assert(offsetof(TedStructuresPanel_SetUniqueContent, InContent) == 0x000000, "Member 'TedStructuresPanel_SetUniqueContent::InContent' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_SetUniqueContent, bInRefreshContent) == 0x000050, "Member 'TedStructuresPanel_SetUniqueContent::bInRefreshContent' has a wrong offset!");

// Function Tempest.TedStructuresPanel.SwitchPage
// 0x0001 (0x0001 - 0x0000)
struct TedStructuresPanel_SwitchPage final
{
public:
	bool                                          bForwards;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructuresPanel_SwitchPage) == 0x000001, "Wrong alignment on TedStructuresPanel_SwitchPage");
static_assert(sizeof(TedStructuresPanel_SwitchPage) == 0x000001, "Wrong size on TedStructuresPanel_SwitchPage");
static_assert(offsetof(TedStructuresPanel_SwitchPage, bForwards) == 0x000000, "Member 'TedStructuresPanel_SwitchPage::bForwards' has a wrong offset!");

// Function Tempest.TedStructuresPanel.GetContent
// 0x0018 (0x0018 - 0x0000)
struct TedStructuresPanel_GetContent final
{
public:
	TArray<class ATedStructureBase*>              OutContent;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedStructuresPanel_GetContent) == 0x000008, "Wrong alignment on TedStructuresPanel_GetContent");
static_assert(sizeof(TedStructuresPanel_GetContent) == 0x000018, "Wrong size on TedStructuresPanel_GetContent");
static_assert(offsetof(TedStructuresPanel_GetContent, OutContent) == 0x000000, "Member 'TedStructuresPanel_GetContent::OutContent' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_GetContent, ReturnValue) == 0x000010, "Member 'TedStructuresPanel_GetContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructuresPanel.GetSelectedContent
// 0x0008 (0x0008 - 0x0000)
struct TedStructuresPanel_GetSelectedContent final
{
public:
	class ATedStructureBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructuresPanel_GetSelectedContent) == 0x000008, "Wrong alignment on TedStructuresPanel_GetSelectedContent");
static_assert(sizeof(TedStructuresPanel_GetSelectedContent) == 0x000008, "Wrong size on TedStructuresPanel_GetSelectedContent");
static_assert(offsetof(TedStructuresPanel_GetSelectedContent, ReturnValue) == 0x000000, "Member 'TedStructuresPanel_GetSelectedContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructuresPanel.GetSlotContent
// 0x0010 (0x0010 - 0x0000)
struct TedStructuresPanel_GetSlotContent final
{
public:
	int32                                         InSlotIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedStructureBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructuresPanel_GetSlotContent) == 0x000008, "Wrong alignment on TedStructuresPanel_GetSlotContent");
static_assert(sizeof(TedStructuresPanel_GetSlotContent) == 0x000010, "Wrong size on TedStructuresPanel_GetSlotContent");
static_assert(offsetof(TedStructuresPanel_GetSlotContent, InSlotIndex) == 0x000000, "Member 'TedStructuresPanel_GetSlotContent::InSlotIndex' has a wrong offset!");
static_assert(offsetof(TedStructuresPanel_GetSlotContent, ReturnValue) == 0x000008, "Member 'TedStructuresPanel_GetSlotContent::ReturnValue' has a wrong offset!");

// Function Tempest.TedStructureTower.HandleSelectionChanged
// 0x0002 (0x0002 - 0x0000)
struct TedStructureTower_HandleSelectionChanged final
{
public:
	bool                                          bSelectionStateChanged;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoveredStateChanged;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedStructureTower_HandleSelectionChanged) == 0x000001, "Wrong alignment on TedStructureTower_HandleSelectionChanged");
static_assert(sizeof(TedStructureTower_HandleSelectionChanged) == 0x000002, "Wrong size on TedStructureTower_HandleSelectionChanged");
static_assert(offsetof(TedStructureTower_HandleSelectionChanged, bSelectionStateChanged) == 0x000000, "Member 'TedStructureTower_HandleSelectionChanged::bSelectionStateChanged' has a wrong offset!");
static_assert(offsetof(TedStructureTower_HandleSelectionChanged, bHoveredStateChanged) == 0x000001, "Member 'TedStructureTower_HandleSelectionChanged::bHoveredStateChanged' has a wrong offset!");

// Function Tempest.TedSubtitleWidget.GetSubtitlesScale
// 0x0004 (0x0004 - 0x0000)
struct TedSubtitleWidget_GetSubtitlesScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleWidget_GetSubtitlesScale) == 0x000004, "Wrong alignment on TedSubtitleWidget_GetSubtitlesScale");
static_assert(sizeof(TedSubtitleWidget_GetSubtitlesScale) == 0x000004, "Wrong size on TedSubtitleWidget_GetSubtitlesScale");
static_assert(offsetof(TedSubtitleWidget_GetSubtitlesScale, ReturnValue) == 0x000000, "Member 'TedSubtitleWidget_GetSubtitlesScale::ReturnValue' has a wrong offset!");

// Function Tempest.TedSubtitleWidget.K2_DisplaySubtitle
// 0x0010 (0x0010 - 0x0000)
struct TedSubtitleWidget_K2_DisplaySubtitle final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleWidget_K2_DisplaySubtitle) == 0x000008, "Wrong alignment on TedSubtitleWidget_K2_DisplaySubtitle");
static_assert(sizeof(TedSubtitleWidget_K2_DisplaySubtitle) == 0x000010, "Wrong size on TedSubtitleWidget_K2_DisplaySubtitle");
static_assert(offsetof(TedSubtitleWidget_K2_DisplaySubtitle, InText) == 0x000000, "Member 'TedSubtitleWidget_K2_DisplaySubtitle::InText' has a wrong offset!");

// Function Tempest.TedSubtitleWidget.OnSkippableSequenceEnded
// 0x0008 (0x0008 - 0x0000)
struct TedSubtitleWidget_OnSkippableSequenceEnded final
{
public:
	struct FGameplayTag                           InSequence;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleWidget_OnSkippableSequenceEnded) == 0x000004, "Wrong alignment on TedSubtitleWidget_OnSkippableSequenceEnded");
static_assert(sizeof(TedSubtitleWidget_OnSkippableSequenceEnded) == 0x000008, "Wrong size on TedSubtitleWidget_OnSkippableSequenceEnded");
static_assert(offsetof(TedSubtitleWidget_OnSkippableSequenceEnded, InSequence) == 0x000000, "Member 'TedSubtitleWidget_OnSkippableSequenceEnded::InSequence' has a wrong offset!");

// Function Tempest.TedSubtitleWidget.EvaluateVisibility
// 0x0001 (0x0001 - 0x0000)
struct TedSubtitleWidget_EvaluateVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleWidget_EvaluateVisibility) == 0x000001, "Wrong alignment on TedSubtitleWidget_EvaluateVisibility");
static_assert(sizeof(TedSubtitleWidget_EvaluateVisibility) == 0x000001, "Wrong size on TedSubtitleWidget_EvaluateVisibility");
static_assert(offsetof(TedSubtitleWidget_EvaluateVisibility, ReturnValue) == 0x000000, "Member 'TedSubtitleWidget_EvaluateVisibility::ReturnValue' has a wrong offset!");

// Function Tempest.TedSubtitleWidget.GetDisplayedText
// 0x0010 (0x0010 - 0x0000)
struct TedSubtitleWidget_GetDisplayedText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedSubtitleWidget_GetDisplayedText) == 0x000008, "Wrong alignment on TedSubtitleWidget_GetDisplayedText");
static_assert(sizeof(TedSubtitleWidget_GetDisplayedText) == 0x000010, "Wrong size on TedSubtitleWidget_GetDisplayedText");
static_assert(offsetof(TedSubtitleWidget_GetDisplayedText, ReturnValue) == 0x000000, "Member 'TedSubtitleWidget_GetDisplayedText::ReturnValue' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnCutsceneFinished
// 0x0020 (0x0020 - 0x0000)
struct TedTelemetryManager_OnCutsceneFinished final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InCutsceneName;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnCutsceneFinished) == 0x000008, "Wrong alignment on TedTelemetryManager_OnCutsceneFinished");
static_assert(sizeof(TedTelemetryManager_OnCutsceneFinished) == 0x000020, "Wrong size on TedTelemetryManager_OnCutsceneFinished");
static_assert(offsetof(TedTelemetryManager_OnCutsceneFinished, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnCutsceneFinished::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnCutsceneFinished, InPlayerID) == 0x000008, "Member 'TedTelemetryManager_OnCutsceneFinished::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnCutsceneFinished, InCutsceneName) == 0x000010, "Member 'TedTelemetryManager_OnCutsceneFinished::InCutsceneName' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnCutsceneStarted
// 0x0020 (0x0020 - 0x0000)
struct TedTelemetryManager_OnCutsceneStarted final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InCutsceneName;                                    // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnCutsceneStarted) == 0x000008, "Wrong alignment on TedTelemetryManager_OnCutsceneStarted");
static_assert(sizeof(TedTelemetryManager_OnCutsceneStarted) == 0x000020, "Wrong size on TedTelemetryManager_OnCutsceneStarted");
static_assert(offsetof(TedTelemetryManager_OnCutsceneStarted, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnCutsceneStarted::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnCutsceneStarted, InPlayerID) == 0x000008, "Member 'TedTelemetryManager_OnCutsceneStarted::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnCutsceneStarted, InCutsceneName) == 0x000010, "Member 'TedTelemetryManager_OnCutsceneStarted::InCutsceneName' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPawnChangedOwner
// 0x0018 (0x0018 - 0x0000)
struct TedTelemetryManager_OnPawnChangedOwner final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPlayerState*                  InNewOwner;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPlayerState*                  InPreviousOwner;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPawnChangedOwner) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPawnChangedOwner");
static_assert(sizeof(TedTelemetryManager_OnPawnChangedOwner) == 0x000018, "Wrong size on TedTelemetryManager_OnPawnChangedOwner");
static_assert(offsetof(TedTelemetryManager_OnPawnChangedOwner, InPawn) == 0x000000, "Member 'TedTelemetryManager_OnPawnChangedOwner::InPawn' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnChangedOwner, InNewOwner) == 0x000008, "Member 'TedTelemetryManager_OnPawnChangedOwner::InNewOwner' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnChangedOwner, InPreviousOwner) == 0x000010, "Member 'TedTelemetryManager_OnPawnChangedOwner::InPreviousOwner' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPawnDied
// 0x0010 (0x0010 - 0x0000)
struct TedTelemetryManager_OnPawnDied final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InKillerActor;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPawnDied) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPawnDied");
static_assert(sizeof(TedTelemetryManager_OnPawnDied) == 0x000010, "Wrong size on TedTelemetryManager_OnPawnDied");
static_assert(offsetof(TedTelemetryManager_OnPawnDied, InPawn) == 0x000000, "Member 'TedTelemetryManager_OnPawnDied::InPawn' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnDied, InKillerActor) == 0x000008, "Member 'TedTelemetryManager_OnPawnDied::InKillerActor' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPawnHealthChanged
// 0x0018 (0x0018 - 0x0000)
struct TedTelemetryManager_OnPawnHealthChanged final
{
public:
	const class ATedPawn*                         InPawn;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHealthChange;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           InSourceActor;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPawnHealthChanged) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPawnHealthChanged");
static_assert(sizeof(TedTelemetryManager_OnPawnHealthChanged) == 0x000018, "Wrong size on TedTelemetryManager_OnPawnHealthChanged");
static_assert(offsetof(TedTelemetryManager_OnPawnHealthChanged, InPawn) == 0x000000, "Member 'TedTelemetryManager_OnPawnHealthChanged::InPawn' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnHealthChanged, InHealthChange) == 0x000008, "Member 'TedTelemetryManager_OnPawnHealthChanged::InHealthChange' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnHealthChanged, InSourceActor) == 0x000010, "Member 'TedTelemetryManager_OnPawnHealthChanged::InSourceActor' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPawnProduced
// 0x0018 (0x0018 - 0x0000)
struct TedTelemetryManager_OnPawnProduced final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedEntityDefinitionAsset*        InPawnDefinition;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InOwnerId;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InCreditsCost;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPawnProduced) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPawnProduced");
static_assert(sizeof(TedTelemetryManager_OnPawnProduced) == 0x000018, "Wrong size on TedTelemetryManager_OnPawnProduced");
static_assert(offsetof(TedTelemetryManager_OnPawnProduced, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnPawnProduced::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnProduced, InPawnDefinition) == 0x000008, "Member 'TedTelemetryManager_OnPawnProduced::InPawnDefinition' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnProduced, InOwnerId) == 0x000010, "Member 'TedTelemetryManager_OnPawnProduced::InOwnerId' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnProduced, InCreditsCost) == 0x000014, "Member 'TedTelemetryManager_OnPawnProduced::InCreditsCost' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPawnReplaced
// 0x0010 (0x0010 - 0x0000)
struct TedTelemetryManager_OnPawnReplaced final
{
public:
	const class ATedPawn*                         InReplacingPawn;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPawn*                         InReplacedPawn;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPawnReplaced) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPawnReplaced");
static_assert(sizeof(TedTelemetryManager_OnPawnReplaced) == 0x000010, "Wrong size on TedTelemetryManager_OnPawnReplaced");
static_assert(offsetof(TedTelemetryManager_OnPawnReplaced, InReplacingPawn) == 0x000000, "Member 'TedTelemetryManager_OnPawnReplaced::InReplacingPawn' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPawnReplaced, InReplacedPawn) == 0x000008, "Member 'TedTelemetryManager_OnPawnReplaced::InReplacedPawn' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPlayerResourceChanged
// 0x0018 (0x0018 - 0x0000)
struct TedTelemetryManager_OnPlayerResourceChanged final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedResourceType                              InResourceType;                                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InResourceDelta;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedResourceChangeReason                      InChangeReason;                                    // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_OnPlayerResourceChanged) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPlayerResourceChanged");
static_assert(sizeof(TedTelemetryManager_OnPlayerResourceChanged) == 0x000018, "Wrong size on TedTelemetryManager_OnPlayerResourceChanged");
static_assert(offsetof(TedTelemetryManager_OnPlayerResourceChanged, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnPlayerResourceChanged::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerResourceChanged, InPlayerID) == 0x000008, "Member 'TedTelemetryManager_OnPlayerResourceChanged::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerResourceChanged, InResourceType) == 0x000009, "Member 'TedTelemetryManager_OnPlayerResourceChanged::InResourceType' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerResourceChanged, InResourceDelta) == 0x00000C, "Member 'TedTelemetryManager_OnPlayerResourceChanged::InResourceDelta' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerResourceChanged, InChangeReason) == 0x000010, "Member 'TedTelemetryManager_OnPlayerResourceChanged::InChangeReason' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnPlayerSettingsChanged
// 0x0038 (0x0038 - 0x0000)
struct TedTelemetryManager_OnPlayerSettingsChanged final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InSettingName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InNewState;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPreviousState;                                   // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnPlayerSettingsChanged) == 0x000008, "Wrong alignment on TedTelemetryManager_OnPlayerSettingsChanged");
static_assert(sizeof(TedTelemetryManager_OnPlayerSettingsChanged) == 0x000038, "Wrong size on TedTelemetryManager_OnPlayerSettingsChanged");
static_assert(offsetof(TedTelemetryManager_OnPlayerSettingsChanged, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnPlayerSettingsChanged::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerSettingsChanged, InSettingName) == 0x000008, "Member 'TedTelemetryManager_OnPlayerSettingsChanged::InSettingName' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerSettingsChanged, InNewState) == 0x000018, "Member 'TedTelemetryManager_OnPlayerSettingsChanged::InNewState' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnPlayerSettingsChanged, InPreviousState) == 0x000028, "Member 'TedTelemetryManager_OnPlayerSettingsChanged::InPreviousState' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnStructureConstructionChanged
// 0x0038 (0x0038 - 0x0000)
struct TedTelemetryManager_OnStructureConstructionChanged final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedStructureDefinitionAsset*     InStructureDefinition;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InOwnerId;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InConstructionLocation;                            // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTelemetryConstructionStatus               InConstructionStatus;                              // 0x0030(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_OnStructureConstructionChanged) == 0x000008, "Wrong alignment on TedTelemetryManager_OnStructureConstructionChanged");
static_assert(sizeof(TedTelemetryManager_OnStructureConstructionChanged) == 0x000038, "Wrong size on TedTelemetryManager_OnStructureConstructionChanged");
static_assert(offsetof(TedTelemetryManager_OnStructureConstructionChanged, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnStructureConstructionChanged::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnStructureConstructionChanged, InStructureDefinition) == 0x000008, "Member 'TedTelemetryManager_OnStructureConstructionChanged::InStructureDefinition' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnStructureConstructionChanged, InOwnerId) == 0x000010, "Member 'TedTelemetryManager_OnStructureConstructionChanged::InOwnerId' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnStructureConstructionChanged, InConstructionLocation) == 0x000018, "Member 'TedTelemetryManager_OnStructureConstructionChanged::InConstructionLocation' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnStructureConstructionChanged, InConstructionStatus) == 0x000030, "Member 'TedTelemetryManager_OnStructureConstructionChanged::InConstructionStatus' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnStructureSold
// 0x0010 (0x0010 - 0x0000)
struct TedTelemetryManager_OnStructureSold final
{
public:
	const class ATedStructureBase*                InSoldStructure;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_OnStructureSold) == 0x000008, "Wrong alignment on TedTelemetryManager_OnStructureSold");
static_assert(sizeof(TedTelemetryManager_OnStructureSold) == 0x000010, "Wrong size on TedTelemetryManager_OnStructureSold");
static_assert(offsetof(TedTelemetryManager_OnStructureSold, InSoldStructure) == 0x000000, "Member 'TedTelemetryManager_OnStructureSold::InSoldStructure' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnStructureSold, InPlayerID) == 0x000008, "Member 'TedTelemetryManager_OnStructureSold::InPlayerID' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnSupportPowerBeginTracking
// 0x0048 (0x0048 - 0x0000)
struct TedTelemetryManager_OnSupportPowerBeginTracking final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InOwner;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InSupportPowerTag;                                 // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InSupportPowerLocation;                            // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InAssociatedActors;                                // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTedTelemetrySupportPowerTrackingOptions InOptions;                                       // 0x0040(0x0004)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_OnSupportPowerBeginTracking) == 0x000008, "Wrong alignment on TedTelemetryManager_OnSupportPowerBeginTracking");
static_assert(sizeof(TedTelemetryManager_OnSupportPowerBeginTracking) == 0x000048, "Wrong size on TedTelemetryManager_OnSupportPowerBeginTracking");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InOwner) == 0x000008, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InOwner' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InSupportPowerTag) == 0x000010, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InSupportPowerTag' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InSupportPowerLocation) == 0x000018, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InSupportPowerLocation' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InAssociatedActors) == 0x000030, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InAssociatedActors' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerBeginTracking, InOptions) == 0x000040, "Member 'TedTelemetryManager_OnSupportPowerBeginTracking::InOptions' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnSupportPowerEndTracking
// 0x0020 (0x0020 - 0x0000)
struct TedTelemetryManager_OnSupportPowerEndTracking final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InOwner;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InSupportPowerTag;                                 // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedTelemetryTrackedSupportPowerResult        InResult;                                          // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_OnSupportPowerEndTracking) == 0x000008, "Wrong alignment on TedTelemetryManager_OnSupportPowerEndTracking");
static_assert(sizeof(TedTelemetryManager_OnSupportPowerEndTracking) == 0x000020, "Wrong size on TedTelemetryManager_OnSupportPowerEndTracking");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerEndTracking, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnSupportPowerEndTracking::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerEndTracking, InOwner) == 0x000008, "Member 'TedTelemetryManager_OnSupportPowerEndTracking::InOwner' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerEndTracking, InSupportPowerTag) == 0x000010, "Member 'TedTelemetryManager_OnSupportPowerEndTracking::InSupportPowerTag' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerEndTracking, InResult) == 0x000018, "Member 'TedTelemetryManager_OnSupportPowerEndTracking::InResult' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnSupportPowerPawnShotProjectile
// 0x0028 (0x0028 - 0x0000)
struct TedTelemetryManager_OnSupportPowerPawnShotProjectile final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPawn*                               InShooter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InTarget;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedProjectile*                         InShotProjectile;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InSupportPowerTag;                                 // 0x0020(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnSupportPowerPawnShotProjectile) == 0x000008, "Wrong alignment on TedTelemetryManager_OnSupportPowerPawnShotProjectile");
static_assert(sizeof(TedTelemetryManager_OnSupportPowerPawnShotProjectile) == 0x000028, "Wrong size on TedTelemetryManager_OnSupportPowerPawnShotProjectile");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerPawnShotProjectile, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnSupportPowerPawnShotProjectile::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerPawnShotProjectile, InShooter) == 0x000008, "Member 'TedTelemetryManager_OnSupportPowerPawnShotProjectile::InShooter' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerPawnShotProjectile, InTarget) == 0x000010, "Member 'TedTelemetryManager_OnSupportPowerPawnShotProjectile::InTarget' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerPawnShotProjectile, InShotProjectile) == 0x000018, "Member 'TedTelemetryManager_OnSupportPowerPawnShotProjectile::InShotProjectile' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerPawnShotProjectile, InSupportPowerTag) == 0x000020, "Member 'TedTelemetryManager_OnSupportPowerPawnShotProjectile::InSupportPowerTag' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnSupportPowerProjectileDealtDamage
// 0x0030 (0x0030 - 0x0000)
struct TedTelemetryManager_OnSupportPowerProjectileDealtDamage final
{
public:
	const class UObject*                          InWorldContextObject;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InOwner;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           InSupportPowerTag;                                 // 0x0010(0x0008)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedProjectile*                   InProjectile;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       InDamagedPawns;                                    // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage) == 0x000008, "Wrong alignment on TedTelemetryManager_OnSupportPowerProjectileDealtDamage");
static_assert(sizeof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage) == 0x000030, "Wrong size on TedTelemetryManager_OnSupportPowerProjectileDealtDamage");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage, InWorldContextObject) == 0x000000, "Member 'TedTelemetryManager_OnSupportPowerProjectileDealtDamage::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage, InOwner) == 0x000008, "Member 'TedTelemetryManager_OnSupportPowerProjectileDealtDamage::InOwner' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage, InSupportPowerTag) == 0x000010, "Member 'TedTelemetryManager_OnSupportPowerProjectileDealtDamage::InSupportPowerTag' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage, InProjectile) == 0x000018, "Member 'TedTelemetryManager_OnSupportPowerProjectileDealtDamage::InProjectile' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_OnSupportPowerProjectileDealtDamage, InDamagedPawns) == 0x000020, "Member 'TedTelemetryManager_OnSupportPowerProjectileDealtDamage::InDamagedPawns' has a wrong offset!");

// Function Tempest.TedTelemetryManager.HandleSupportPowerActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedTelemetryManager_HandleSupportPowerActorEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTelemetryManager_HandleSupportPowerActorEndPlay) == 0x000008, "Wrong alignment on TedTelemetryManager_HandleSupportPowerActorEndPlay");
static_assert(sizeof(TedTelemetryManager_HandleSupportPowerActorEndPlay) == 0x000010, "Wrong size on TedTelemetryManager_HandleSupportPowerActorEndPlay");
static_assert(offsetof(TedTelemetryManager_HandleSupportPowerActorEndPlay, InActor) == 0x000000, "Member 'TedTelemetryManager_HandleSupportPowerActorEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedTelemetryManager_HandleSupportPowerActorEndPlay, InEndPlayReason) == 0x000008, "Member 'TedTelemetryManager_HandleSupportPowerActorEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnLobbyUpdate
// 0x0008 (0x0008 - 0x0000)
struct TedTelemetryManager_OnLobbyUpdate final
{
public:
	class ATedLobbyBeaconState*                   InLobbyState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnLobbyUpdate) == 0x000008, "Wrong alignment on TedTelemetryManager_OnLobbyUpdate");
static_assert(sizeof(TedTelemetryManager_OnLobbyUpdate) == 0x000008, "Wrong size on TedTelemetryManager_OnLobbyUpdate");
static_assert(offsetof(TedTelemetryManager_OnLobbyUpdate, InLobbyState) == 0x000000, "Member 'TedTelemetryManager_OnLobbyUpdate::InLobbyState' has a wrong offset!");

// Function Tempest.TedTelemetryManager.OnLocalPlayerStateReplicated
// 0x0008 (0x0008 - 0x0000)
struct TedTelemetryManager_OnLocalPlayerStateReplicated final
{
public:
	class ATedPlayerController*                   PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong alignment on TedTelemetryManager_OnLocalPlayerStateReplicated");
static_assert(sizeof(TedTelemetryManager_OnLocalPlayerStateReplicated) == 0x000008, "Wrong size on TedTelemetryManager_OnLocalPlayerStateReplicated");
static_assert(offsetof(TedTelemetryManager_OnLocalPlayerStateReplicated, PlayerController) == 0x000000, "Member 'TedTelemetryManager_OnLocalPlayerStateReplicated::PlayerController' has a wrong offset!");

// Function Tempest.TedTelemetryManager.SendClientBannerClickEvent
// 0x0080 (0x0080 - 0x0000)
struct TedTelemetryManager_SendClientBannerClickEvent final
{
public:
	struct FProsBanner                            InBanner;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_SendClientBannerClickEvent) == 0x000008, "Wrong alignment on TedTelemetryManager_SendClientBannerClickEvent");
static_assert(sizeof(TedTelemetryManager_SendClientBannerClickEvent) == 0x000080, "Wrong size on TedTelemetryManager_SendClientBannerClickEvent");
static_assert(offsetof(TedTelemetryManager_SendClientBannerClickEvent, InBanner) == 0x000000, "Member 'TedTelemetryManager_SendClientBannerClickEvent::InBanner' has a wrong offset!");

// Function Tempest.TedTelemetryManager.SendClientBannerImpressionEvent
// 0x0080 (0x0080 - 0x0000)
struct TedTelemetryManager_SendClientBannerImpressionEvent final
{
public:
	struct FProsBanner                            InBanner;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_SendClientBannerImpressionEvent) == 0x000008, "Wrong alignment on TedTelemetryManager_SendClientBannerImpressionEvent");
static_assert(sizeof(TedTelemetryManager_SendClientBannerImpressionEvent) == 0x000080, "Wrong size on TedTelemetryManager_SendClientBannerImpressionEvent");
static_assert(offsetof(TedTelemetryManager_SendClientBannerImpressionEvent, InBanner) == 0x000000, "Member 'TedTelemetryManager_SendClientBannerImpressionEvent::InBanner' has a wrong offset!");

// Function Tempest.TedTelemetryManager.SendClientBannerCloseWindowEvent
// 0x0080 (0x0080 - 0x0000)
struct TedTelemetryManager_SendClientBannerCloseWindowEvent final
{
public:
	struct FProsBanner                            InBanner;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_SendClientBannerCloseWindowEvent) == 0x000008, "Wrong alignment on TedTelemetryManager_SendClientBannerCloseWindowEvent");
static_assert(sizeof(TedTelemetryManager_SendClientBannerCloseWindowEvent) == 0x000080, "Wrong size on TedTelemetryManager_SendClientBannerCloseWindowEvent");
static_assert(offsetof(TedTelemetryManager_SendClientBannerCloseWindowEvent, InBanner) == 0x000000, "Member 'TedTelemetryManager_SendClientBannerCloseWindowEvent::InBanner' has a wrong offset!");

// Function Tempest.TedTelemetryManager.SendClientBannerOpenWindowEvent
// 0x0080 (0x0080 - 0x0000)
struct TedTelemetryManager_SendClientBannerOpenWindowEvent final
{
public:
	struct FProsBanner                            InBanner;                                          // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_SendClientBannerOpenWindowEvent) == 0x000008, "Wrong alignment on TedTelemetryManager_SendClientBannerOpenWindowEvent");
static_assert(sizeof(TedTelemetryManager_SendClientBannerOpenWindowEvent) == 0x000080, "Wrong size on TedTelemetryManager_SendClientBannerOpenWindowEvent");
static_assert(offsetof(TedTelemetryManager_SendClientBannerOpenWindowEvent, InBanner) == 0x000000, "Member 'TedTelemetryManager_SendClientBannerOpenWindowEvent::InBanner' has a wrong offset!");

// Function Tempest.TedTelemetryManager.SendClientBannerSettingsEvent
// 0x0001 (0x0001 - 0x0000)
struct TedTelemetryManager_SendClientBannerSettingsEvent final
{
public:
	bool                                          bInShowing;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTelemetryManager_SendClientBannerSettingsEvent) == 0x000001, "Wrong alignment on TedTelemetryManager_SendClientBannerSettingsEvent");
static_assert(sizeof(TedTelemetryManager_SendClientBannerSettingsEvent) == 0x000001, "Wrong size on TedTelemetryManager_SendClientBannerSettingsEvent");
static_assert(offsetof(TedTelemetryManager_SendClientBannerSettingsEvent, bInShowing) == 0x000000, "Member 'TedTelemetryManager_SendClientBannerSettingsEvent::bInShowing' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetData
// 0x0048 (0x0048 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetData final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedTextWidgetConfig                   Data;                                              // 0x0010(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetData) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetData");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetData) == 0x000048, "Wrong size on TedTextWidgetInterfaceFunctions_SetData");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetData, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetData::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetData, Data) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetData::Data' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetPrimaryColorr
// 0x0020 (0x0020 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetPrimaryColorr final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetPrimaryColorr) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetPrimaryColorr");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetPrimaryColorr) == 0x000020, "Wrong size on TedTextWidgetInterfaceFunctions_SetPrimaryColorr");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetPrimaryColorr, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetPrimaryColorr::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetPrimaryColorr, Color) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetPrimaryColorr::Color' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetSecondaryColor
// 0x0020 (0x0020 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetSecondaryColor final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetSecondaryColor) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetSecondaryColor");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetSecondaryColor) == 0x000020, "Wrong size on TedTextWidgetInterfaceFunctions_SetSecondaryColor");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetSecondaryColor, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetSecondaryColor::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetSecondaryColor, Color) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetSecondaryColor::Color' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetText
// 0x0020 (0x0020 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetText final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0010(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetText) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetText");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetText) == 0x000020, "Wrong size on TedTextWidgetInterfaceFunctions_SetText");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetText, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetText::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetText, Text) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetText::Text' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetThemedData
// 0x00A0 (0x00A0 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetThemedData final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedTextWidgetThemedConfig             Data;                                              // 0x0010(0x0088)(ConstParm, Parm, NativeAccessSpecifierPublic)
	ETedFaction                                   CurrentTheme;                                      // 0x0098(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetThemedData) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetThemedData");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetThemedData) == 0x0000A0, "Wrong size on TedTextWidgetInterfaceFunctions_SetThemedData");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetThemedData, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetThemedData::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetThemedData, Data) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetThemedData::Data' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetThemedData, CurrentTheme) == 0x000098, "Member 'TedTextWidgetInterfaceFunctions_SetThemedData::CurrentTheme' has a wrong offset!");

// Function Tempest.TedTextWidgetInterfaceFunctions.SetUseSecondaryColor
// 0x0018 (0x0018 - 0x0000)
struct TedTextWidgetInterfaceFunctions_SetUseSecondaryColor final
{
public:
	TScriptInterface<class ITedTextWidgetInterface> Widget;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInUseSecondaryColor;                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedTextWidgetInterfaceFunctions_SetUseSecondaryColor) == 0x000008, "Wrong alignment on TedTextWidgetInterfaceFunctions_SetUseSecondaryColor");
static_assert(sizeof(TedTextWidgetInterfaceFunctions_SetUseSecondaryColor) == 0x000018, "Wrong size on TedTextWidgetInterfaceFunctions_SetUseSecondaryColor");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetUseSecondaryColor, Widget) == 0x000000, "Member 'TedTextWidgetInterfaceFunctions_SetUseSecondaryColor::Widget' has a wrong offset!");
static_assert(offsetof(TedTextWidgetInterfaceFunctions_SetUseSecondaryColor, bInUseSecondaryColor) == 0x000010, "Member 'TedTextWidgetInterfaceFunctions_SetUseSecondaryColor::bInUseSecondaryColor' has a wrong offset!");

// Function Tempest.TedTextWidgetInterface.K2_OnTextWidgetSetPrimaryColor
// 0x0010 (0x0010 - 0x0000)
struct TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor) == 0x000004, "Wrong alignment on TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor");
static_assert(sizeof(TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor) == 0x000010, "Wrong size on TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor");
static_assert(offsetof(TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor, InColor) == 0x000000, "Member 'TedTextWidgetInterface_K2_OnTextWidgetSetPrimaryColor::InColor' has a wrong offset!");

// Function Tempest.TedTextWidgetInterface.K2_OnTextWidgetSetSecondaryColor
// 0x0010 (0x0010 - 0x0000)
struct TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor) == 0x000004, "Wrong alignment on TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor");
static_assert(sizeof(TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor) == 0x000010, "Wrong size on TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor");
static_assert(offsetof(TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor, InColor) == 0x000000, "Member 'TedTextWidgetInterface_K2_OnTextWidgetSetSecondaryColor::InColor' has a wrong offset!");

// Function Tempest.TedTextWidgetInterface.K2_OnTextWidgetSetText
// 0x0010 (0x0010 - 0x0000)
struct TedTextWidgetInterface_K2_OnTextWidgetSetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterface_K2_OnTextWidgetSetText) == 0x000008, "Wrong alignment on TedTextWidgetInterface_K2_OnTextWidgetSetText");
static_assert(sizeof(TedTextWidgetInterface_K2_OnTextWidgetSetText) == 0x000010, "Wrong size on TedTextWidgetInterface_K2_OnTextWidgetSetText");
static_assert(offsetof(TedTextWidgetInterface_K2_OnTextWidgetSetText, InText) == 0x000000, "Member 'TedTextWidgetInterface_K2_OnTextWidgetSetText::InText' has a wrong offset!");

// Function Tempest.TedTextWidgetInterface.K2_OnTextWidgetSetUseSecondaryColor
// 0x0001 (0x0001 - 0x0000)
struct TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor final
{
public:
	bool                                          bInUseSecondaryColor;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor) == 0x000001, "Wrong alignment on TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor");
static_assert(sizeof(TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor) == 0x000001, "Wrong size on TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor");
static_assert(offsetof(TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor, bInUseSecondaryColor) == 0x000000, "Member 'TedTextWidgetInterface_K2_OnTextWidgetSetUseSecondaryColor::bInUseSecondaryColor' has a wrong offset!");

// Function Tempest.TedTriggerVolume.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedTriggerVolume_SetEnabled final
{
public:
	bool                                          bInEnabled;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTriggerVolume_SetEnabled) == 0x000001, "Wrong alignment on TedTriggerVolume_SetEnabled");
static_assert(sizeof(TedTriggerVolume_SetEnabled) == 0x000001, "Wrong size on TedTriggerVolume_SetEnabled");
static_assert(offsetof(TedTriggerVolume_SetEnabled, bInEnabled) == 0x000000, "Member 'TedTriggerVolume_SetEnabled::bInEnabled' has a wrong offset!");

// Function Tempest.TedTriggerVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedTriggerVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTriggerVolume_IsEnabled) == 0x000001, "Wrong alignment on TedTriggerVolume_IsEnabled");
static_assert(sizeof(TedTriggerVolume_IsEnabled) == 0x000001, "Wrong size on TedTriggerVolume_IsEnabled");
static_assert(offsetof(TedTriggerVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'TedTriggerVolume_IsEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedTriggerVolume.K2_GetFilteredOverlappingActors
// 0x01D0 (0x01D0 - 0x0000)
struct TedTriggerVolume_K2_GetFilteredOverlappingActors final
{
public:
	struct FTedPawnFilter                         InFilter;                                          // 0x0000(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x01C0(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTriggerVolume_K2_GetFilteredOverlappingActors) == 0x000008, "Wrong alignment on TedTriggerVolume_K2_GetFilteredOverlappingActors");
static_assert(sizeof(TedTriggerVolume_K2_GetFilteredOverlappingActors) == 0x0001D0, "Wrong size on TedTriggerVolume_K2_GetFilteredOverlappingActors");
static_assert(offsetof(TedTriggerVolume_K2_GetFilteredOverlappingActors, InFilter) == 0x000000, "Member 'TedTriggerVolume_K2_GetFilteredOverlappingActors::InFilter' has a wrong offset!");
static_assert(offsetof(TedTriggerVolume_K2_GetFilteredOverlappingActors, ReturnValue) == 0x0001C0, "Member 'TedTriggerVolume_K2_GetFilteredOverlappingActors::ReturnValue' has a wrong offset!");

// Function Tempest.TedTriggerVolume.K2_GetOverlappingActors
// 0x0010 (0x0010 - 0x0000)
struct TedTriggerVolume_K2_GetOverlappingActors final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedTriggerVolume_K2_GetOverlappingActors) == 0x000008, "Wrong alignment on TedTriggerVolume_K2_GetOverlappingActors");
static_assert(sizeof(TedTriggerVolume_K2_GetOverlappingActors) == 0x000010, "Wrong size on TedTriggerVolume_K2_GetOverlappingActors");
static_assert(offsetof(TedTriggerVolume_K2_GetOverlappingActors, ReturnValue) == 0x000000, "Member 'TedTriggerVolume_K2_GetOverlappingActors::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIPresenceAgent.GetDisplayDescription
// 0x0010 (0x0010 - 0x0000)
struct TedUIPresenceAgent_GetDisplayDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIPresenceAgent_GetDisplayDescription) == 0x000008, "Wrong alignment on TedUIPresenceAgent_GetDisplayDescription");
static_assert(sizeof(TedUIPresenceAgent_GetDisplayDescription) == 0x000010, "Wrong size on TedUIPresenceAgent_GetDisplayDescription");
static_assert(offsetof(TedUIPresenceAgent_GetDisplayDescription, ReturnValue) == 0x000000, "Member 'TedUIPresenceAgent_GetDisplayDescription::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIPresenceAgent.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct TedUIPresenceAgent_GetDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIPresenceAgent_GetDisplayName) == 0x000008, "Wrong alignment on TedUIPresenceAgent_GetDisplayName");
static_assert(sizeof(TedUIPresenceAgent_GetDisplayName) == 0x000010, "Wrong size on TedUIPresenceAgent_GetDisplayName");
static_assert(offsetof(TedUIPresenceAgent_GetDisplayName, ReturnValue) == 0x000000, "Member 'TedUIPresenceAgent_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Tempest.TedUIPresenceAgent.GetDisplayTexture
// 0x0008 (0x0008 - 0x0000)
struct TedUIPresenceAgent_GetDisplayTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUIPresenceAgent_GetDisplayTexture) == 0x000008, "Wrong alignment on TedUIPresenceAgent_GetDisplayTexture");
static_assert(sizeof(TedUIPresenceAgent_GetDisplayTexture) == 0x000008, "Wrong size on TedUIPresenceAgent_GetDisplayTexture");
static_assert(offsetof(TedUIPresenceAgent_GetDisplayTexture, ReturnValue) == 0x000000, "Member 'TedUIPresenceAgent_GetDisplayTexture::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawner.RequestSpawn
// 0x0002 (0x0002 - 0x0000)
struct TedUnitSpawner_RequestSpawn final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_RequestSpawn) == 0x000001, "Wrong alignment on TedUnitSpawner_RequestSpawn");
static_assert(sizeof(TedUnitSpawner_RequestSpawn) == 0x000002, "Wrong size on TedUnitSpawner_RequestSpawn");
static_assert(offsetof(TedUnitSpawner_RequestSpawn, bForce) == 0x000000, "Member 'TedUnitSpawner_RequestSpawn::bForce' has a wrong offset!");
static_assert(offsetof(TedUnitSpawner_RequestSpawn, ReturnValue) == 0x000001, "Member 'TedUnitSpawner_RequestSpawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawner.GetSpawnedUnit
// 0x0008 (0x0008 - 0x0000)
struct TedUnitSpawner_GetSpawnedUnit final
{
public:
	class ATedUnitBase*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_GetSpawnedUnit) == 0x000008, "Wrong alignment on TedUnitSpawner_GetSpawnedUnit");
static_assert(sizeof(TedUnitSpawner_GetSpawnedUnit) == 0x000008, "Wrong size on TedUnitSpawner_GetSpawnedUnit");
static_assert(offsetof(TedUnitSpawner_GetSpawnedUnit, ReturnValue) == 0x000000, "Member 'TedUnitSpawner_GetSpawnedUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawner.HasSpawnedUnit
// 0x0001 (0x0001 - 0x0000)
struct TedUnitSpawner_HasSpawnedUnit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_HasSpawnedUnit) == 0x000001, "Wrong alignment on TedUnitSpawner_HasSpawnedUnit");
static_assert(sizeof(TedUnitSpawner_HasSpawnedUnit) == 0x000001, "Wrong size on TedUnitSpawner_HasSpawnedUnit");
static_assert(offsetof(TedUnitSpawner_HasSpawnedUnit, ReturnValue) == 0x000000, "Member 'TedUnitSpawner_HasSpawnedUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.OnOwnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct TedUnitSpawnerComponent_OnOwnerDestroyed final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_OnOwnerDestroyed) == 0x000008, "Wrong alignment on TedUnitSpawnerComponent_OnOwnerDestroyed");
static_assert(sizeof(TedUnitSpawnerComponent_OnOwnerDestroyed) == 0x000008, "Wrong size on TedUnitSpawnerComponent_OnOwnerDestroyed");
static_assert(offsetof(TedUnitSpawnerComponent_OnOwnerDestroyed, Owner) == 0x000000, "Member 'TedUnitSpawnerComponent_OnOwnerDestroyed::Owner' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.SetInitialUnitSpawnEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled) == 0x000001, "Wrong alignment on TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled");
static_assert(sizeof(TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled) == 0x000001, "Wrong size on TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled");
static_assert(offsetof(TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled, bEnable) == 0x000000, "Member 'TedUnitSpawnerComponent_SetInitialUnitSpawnEnabled::bEnable' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.SetMaxAliveUnits
// 0x0004 (0x0004 - 0x0000)
struct TedUnitSpawnerComponent_SetMaxAliveUnits final
{
public:
	int32                                         InMaxAliveUnits;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_SetMaxAliveUnits) == 0x000004, "Wrong alignment on TedUnitSpawnerComponent_SetMaxAliveUnits");
static_assert(sizeof(TedUnitSpawnerComponent_SetMaxAliveUnits) == 0x000004, "Wrong size on TedUnitSpawnerComponent_SetMaxAliveUnits");
static_assert(offsetof(TedUnitSpawnerComponent_SetMaxAliveUnits, InMaxAliveUnits) == 0x000000, "Member 'TedUnitSpawnerComponent_SetMaxAliveUnits::InMaxAliveUnits' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.SetUnitRespawnTime
// 0x0004 (0x0004 - 0x0000)
struct TedUnitSpawnerComponent_SetUnitRespawnTime final
{
public:
	float                                         InUnitRespawnTime;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_SetUnitRespawnTime) == 0x000004, "Wrong alignment on TedUnitSpawnerComponent_SetUnitRespawnTime");
static_assert(sizeof(TedUnitSpawnerComponent_SetUnitRespawnTime) == 0x000004, "Wrong size on TedUnitSpawnerComponent_SetUnitRespawnTime");
static_assert(offsetof(TedUnitSpawnerComponent_SetUnitRespawnTime, InUnitRespawnTime) == 0x000000, "Member 'TedUnitSpawnerComponent_SetUnitRespawnTime::InUnitRespawnTime' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.SetUnitSpawnEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedUnitSpawnerComponent_SetUnitSpawnEnabled final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_SetUnitSpawnEnabled) == 0x000001, "Wrong alignment on TedUnitSpawnerComponent_SetUnitSpawnEnabled");
static_assert(sizeof(TedUnitSpawnerComponent_SetUnitSpawnEnabled) == 0x000001, "Wrong size on TedUnitSpawnerComponent_SetUnitSpawnEnabled");
static_assert(offsetof(TedUnitSpawnerComponent_SetUnitSpawnEnabled, bEnable) == 0x000000, "Member 'TedUnitSpawnerComponent_SetUnitSpawnEnabled::bEnable' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.GetMaxAliveUnits
// 0x0004 (0x0004 - 0x0000)
struct TedUnitSpawnerComponent_GetMaxAliveUnits final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_GetMaxAliveUnits) == 0x000004, "Wrong alignment on TedUnitSpawnerComponent_GetMaxAliveUnits");
static_assert(sizeof(TedUnitSpawnerComponent_GetMaxAliveUnits) == 0x000004, "Wrong size on TedUnitSpawnerComponent_GetMaxAliveUnits");
static_assert(offsetof(TedUnitSpawnerComponent_GetMaxAliveUnits, ReturnValue) == 0x000000, "Member 'TedUnitSpawnerComponent_GetMaxAliveUnits::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawnerComponent.GetSpawnedUnits
// 0x0010 (0x0010 - 0x0000)
struct TedUnitSpawnerComponent_GetSpawnedUnits final
{
public:
	TArray<class ATedUnitBase*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawnerComponent_GetSpawnedUnits) == 0x000008, "Wrong alignment on TedUnitSpawnerComponent_GetSpawnedUnits");
static_assert(sizeof(TedUnitSpawnerComponent_GetSpawnedUnits) == 0x000010, "Wrong size on TedUnitSpawnerComponent_GetSpawnedUnits");
static_assert(offsetof(TedUnitSpawnerComponent_GetSpawnedUnits, ReturnValue) == 0x000000, "Member 'TedUnitSpawnerComponent_GetSpawnedUnits::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawner_Volume.OnSaveGameLoaded
// 0x0008 (0x0008 - 0x0000)
struct TedUnitSpawner_Volume_OnSaveGameLoaded final
{
public:
	class USavedGameSlotInfo*                     Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_Volume_OnSaveGameLoaded) == 0x000008, "Wrong alignment on TedUnitSpawner_Volume_OnSaveGameLoaded");
static_assert(sizeof(TedUnitSpawner_Volume_OnSaveGameLoaded) == 0x000008, "Wrong size on TedUnitSpawner_Volume_OnSaveGameLoaded");
static_assert(offsetof(TedUnitSpawner_Volume_OnSaveGameLoaded, Slot) == 0x000000, "Member 'TedUnitSpawner_Volume_OnSaveGameLoaded::Slot' has a wrong offset!");

// Function Tempest.TedUnitSpawner_Volume.RequestSpawn
// 0x0018 (0x0018 - 0x0000)
struct TedUnitSpawner_Volume_RequestSpawn final
{
public:
	bool                                          bForce;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATedUnitBase*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_Volume_RequestSpawn) == 0x000008, "Wrong alignment on TedUnitSpawner_Volume_RequestSpawn");
static_assert(sizeof(TedUnitSpawner_Volume_RequestSpawn) == 0x000018, "Wrong size on TedUnitSpawner_Volume_RequestSpawn");
static_assert(offsetof(TedUnitSpawner_Volume_RequestSpawn, bForce) == 0x000000, "Member 'TedUnitSpawner_Volume_RequestSpawn::bForce' has a wrong offset!");
static_assert(offsetof(TedUnitSpawner_Volume_RequestSpawn, ReturnValue) == 0x000008, "Member 'TedUnitSpawner_Volume_RequestSpawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedUnitSpawner_Volume.GetSpawnedUnits
// 0x0010 (0x0010 - 0x0000)
struct TedUnitSpawner_Volume_GetSpawnedUnits final
{
public:
	TArray<class ATedUnitBase*>                   OutSpawnedUnits;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUnitSpawner_Volume_GetSpawnedUnits) == 0x000008, "Wrong alignment on TedUnitSpawner_Volume_GetSpawnedUnits");
static_assert(sizeof(TedUnitSpawner_Volume_GetSpawnedUnits) == 0x000010, "Wrong size on TedUnitSpawner_Volume_GetSpawnedUnits");
static_assert(offsetof(TedUnitSpawner_Volume_GetSpawnedUnits, OutSpawnedUnits) == 0x000000, "Member 'TedUnitSpawner_Volume_GetSpawnedUnits::OutSpawnedUnits' has a wrong offset!");

// Function Tempest.TedUpgradeManager.K2_ActivateUpgrade
// 0x0018 (0x0018 - 0x0000)
struct TedUpgradeManager_K2_ActivateUpgrade final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedUpgrade*                      InUpgrade;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPlayerState*                  InPlayerState;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUpgradeManager_K2_ActivateUpgrade) == 0x000008, "Wrong alignment on TedUpgradeManager_K2_ActivateUpgrade");
static_assert(sizeof(TedUpgradeManager_K2_ActivateUpgrade) == 0x000018, "Wrong size on TedUpgradeManager_K2_ActivateUpgrade");
static_assert(offsetof(TedUpgradeManager_K2_ActivateUpgrade, WorldContextObject) == 0x000000, "Member 'TedUpgradeManager_K2_ActivateUpgrade::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_ActivateUpgrade, InUpgrade) == 0x000008, "Member 'TedUpgradeManager_K2_ActivateUpgrade::InUpgrade' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_ActivateUpgrade, InPlayerState) == 0x000010, "Member 'TedUpgradeManager_K2_ActivateUpgrade::InPlayerState' has a wrong offset!");

// Function Tempest.TedUpgradeManager.K2_DeactivateUpgrade
// 0x0018 (0x0018 - 0x0000)
struct TedUpgradeManager_K2_DeactivateUpgrade final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedUpgrade*                      InUpgrade;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ATedPlayerState*                  InPlayerState;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUpgradeManager_K2_DeactivateUpgrade) == 0x000008, "Wrong alignment on TedUpgradeManager_K2_DeactivateUpgrade");
static_assert(sizeof(TedUpgradeManager_K2_DeactivateUpgrade) == 0x000018, "Wrong size on TedUpgradeManager_K2_DeactivateUpgrade");
static_assert(offsetof(TedUpgradeManager_K2_DeactivateUpgrade, WorldContextObject) == 0x000000, "Member 'TedUpgradeManager_K2_DeactivateUpgrade::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_DeactivateUpgrade, InUpgrade) == 0x000008, "Member 'TedUpgradeManager_K2_DeactivateUpgrade::InUpgrade' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_DeactivateUpgrade, InPlayerState) == 0x000010, "Member 'TedUpgradeManager_K2_DeactivateUpgrade::InPlayerState' has a wrong offset!");

// Function Tempest.TedUpgradeManager.K2_IsUpgradeActive
// 0x0018 (0x0018 - 0x0000)
struct TedUpgradeManager_K2_IsUpgradeActive final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedUpgrade*                      InUpgrade;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  InPlayerID;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUpgradeManager_K2_IsUpgradeActive) == 0x000008, "Wrong alignment on TedUpgradeManager_K2_IsUpgradeActive");
static_assert(sizeof(TedUpgradeManager_K2_IsUpgradeActive) == 0x000018, "Wrong size on TedUpgradeManager_K2_IsUpgradeActive");
static_assert(offsetof(TedUpgradeManager_K2_IsUpgradeActive, WorldContextObject) == 0x000000, "Member 'TedUpgradeManager_K2_IsUpgradeActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_IsUpgradeActive, InUpgrade) == 0x000008, "Member 'TedUpgradeManager_K2_IsUpgradeActive::InUpgrade' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_IsUpgradeActive, InPlayerID) == 0x000010, "Member 'TedUpgradeManager_K2_IsUpgradeActive::InPlayerID' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_K2_IsUpgradeActive, ReturnValue) == 0x000011, "Member 'TedUpgradeManager_K2_IsUpgradeActive::ReturnValue' has a wrong offset!");

// Function Tempest.TedUpgradeManager.HandlePawnEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedUpgradeManager_HandlePawnEndPlay final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                InEndPlayReason;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUpgradeManager_HandlePawnEndPlay) == 0x000008, "Wrong alignment on TedUpgradeManager_HandlePawnEndPlay");
static_assert(sizeof(TedUpgradeManager_HandlePawnEndPlay) == 0x000010, "Wrong size on TedUpgradeManager_HandlePawnEndPlay");
static_assert(offsetof(TedUpgradeManager_HandlePawnEndPlay, InActor) == 0x000000, "Member 'TedUpgradeManager_HandlePawnEndPlay::InActor' has a wrong offset!");
static_assert(offsetof(TedUpgradeManager_HandlePawnEndPlay, InEndPlayReason) == 0x000008, "Member 'TedUpgradeManager_HandlePawnEndPlay::InEndPlayReason' has a wrong offset!");

// Function Tempest.TedUserInfoLatentFunctionLibrary.RequestUserInfo
// 0x0098 (0x0098 - 0x0000)
struct TedUserInfoLatentFunctionLibrary_RequestUserInfo final
{
public:
	class UObject*                                InWorldContext;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLatentActionSaveGameData              SaveInfo;                                          // 0x0020(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FString                                 InHydraId;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutDownloadUserInfoSucceeded;                     // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutDownloadUserAvatarSucceeded;                   // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutDownloadUserPreferencesSucceeded;              // 0x0052(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUserInfo                           OutDownloadedUserInfo;                             // 0x0058(0x0040)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserInfoLatentFunctionLibrary_RequestUserInfo) == 0x000008, "Wrong alignment on TedUserInfoLatentFunctionLibrary_RequestUserInfo");
static_assert(sizeof(TedUserInfoLatentFunctionLibrary_RequestUserInfo) == 0x000098, "Wrong size on TedUserInfoLatentFunctionLibrary_RequestUserInfo");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, InWorldContext) == 0x000000, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::InWorldContext' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, LatentInfo) == 0x000008, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::LatentInfo' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, SaveInfo) == 0x000020, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::SaveInfo' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, InHydraId) == 0x000040, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::InHydraId' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, bOutDownloadUserInfoSucceeded) == 0x000050, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::bOutDownloadUserInfoSucceeded' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, bOutDownloadUserAvatarSucceeded) == 0x000051, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::bOutDownloadUserAvatarSucceeded' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, bOutDownloadUserPreferencesSucceeded) == 0x000052, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::bOutDownloadUserPreferencesSucceeded' has a wrong offset!");
static_assert(offsetof(TedUserInfoLatentFunctionLibrary_RequestUserInfo, OutDownloadedUserInfo) == 0x000058, "Member 'TedUserInfoLatentFunctionLibrary_RequestUserInfo::OutDownloadedUserInfo' has a wrong offset!");

// Function Tempest.TedUserInfoSubsystem.OnHydraLogin
// 0x0001 (0x0001 - 0x0000)
struct TedUserInfoSubsystem_OnHydraLogin final
{
public:
	bool                                          bLoginSuccessful;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserInfoSubsystem_OnHydraLogin) == 0x000001, "Wrong alignment on TedUserInfoSubsystem_OnHydraLogin");
static_assert(sizeof(TedUserInfoSubsystem_OnHydraLogin) == 0x000001, "Wrong size on TedUserInfoSubsystem_OnHydraLogin");
static_assert(offsetof(TedUserInfoSubsystem_OnHydraLogin, bLoginSuccessful) == 0x000000, "Member 'TedUserInfoSubsystem_OnHydraLogin::bLoginSuccessful' has a wrong offset!");

// Function Tempest.TedUserSettings.Get
// 0x0008 (0x0008 - 0x0000)
struct TedUserSettings_Get final
{
public:
	class UTedUserSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserSettings_Get) == 0x000008, "Wrong alignment on TedUserSettings_Get");
static_assert(sizeof(TedUserSettings_Get) == 0x000008, "Wrong size on TedUserSettings_Get");
static_assert(offsetof(TedUserSettings_Get, ReturnValue) == 0x000000, "Member 'TedUserSettings_Get::ReturnValue' has a wrong offset!");

// Function Tempest.TedUserSettings.SetSlotToDefaults
// 0x0001 (0x0001 - 0x0000)
struct TedUserSettings_SetSlotToDefaults final
{
public:
	ETedSettingSlot                               InSettingSlot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserSettings_SetSlotToDefaults) == 0x000001, "Wrong alignment on TedUserSettings_SetSlotToDefaults");
static_assert(sizeof(TedUserSettings_SetSlotToDefaults) == 0x000001, "Wrong size on TedUserSettings_SetSlotToDefaults");
static_assert(offsetof(TedUserSettings_SetSlotToDefaults, InSettingSlot) == 0x000000, "Member 'TedUserSettings_SetSlotToDefaults::InSettingSlot' has a wrong offset!");

// Function Tempest.TedUserSettings.IsPreOrderMenuBackdropEnabled
// 0x0001 (0x0001 - 0x0000)
struct TedUserSettings_IsPreOrderMenuBackdropEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUserSettings_IsPreOrderMenuBackdropEnabled) == 0x000001, "Wrong alignment on TedUserSettings_IsPreOrderMenuBackdropEnabled");
static_assert(sizeof(TedUserSettings_IsPreOrderMenuBackdropEnabled) == 0x000001, "Wrong size on TedUserSettings_IsPreOrderMenuBackdropEnabled");
static_assert(offsetof(TedUserSettings_IsPreOrderMenuBackdropEnabled, ReturnValue) == 0x000000, "Member 'TedUserSettings_IsPreOrderMenuBackdropEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.AdjustUnitSpawnLocation
// 0x0050 (0x0050 - 0x0000)
struct TedUtils_AdjustUnitSpawnLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATedUnitBase>               UnitClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitRadiusMultiplier;                              // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_AdjustUnitSpawnLocation) == 0x000008, "Wrong alignment on TedUtils_AdjustUnitSpawnLocation");
static_assert(sizeof(TedUtils_AdjustUnitSpawnLocation) == 0x000050, "Wrong size on TedUtils_AdjustUnitSpawnLocation");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_AdjustUnitSpawnLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, UnitClass) == 0x000008, "Member 'TedUtils_AdjustUnitSpawnLocation::UnitClass' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, InLocation) == 0x000010, "Member 'TedUtils_AdjustUnitSpawnLocation::InLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, OutLocation) == 0x000028, "Member 'TedUtils_AdjustUnitSpawnLocation::OutLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, UnitRadiusMultiplier) == 0x000040, "Member 'TedUtils_AdjustUnitSpawnLocation::UnitRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, Extent2D) == 0x000044, "Member 'TedUtils_AdjustUnitSpawnLocation::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_AdjustUnitSpawnLocation, ReturnValue) == 0x000048, "Member 'TedUtils_AdjustUnitSpawnLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.ApplyGEToPawnsInRange
// 0x0108 (0x0108 - 0x0000)
struct TedUtils_ApplyGEToPawnsInRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            Effect;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EffectLocation;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectLevel;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedUtilsPawnFilter                    PawnFilter;                                        // 0x0030(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                OwnerASC;                                          // 0x0100(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_ApplyGEToPawnsInRange) == 0x000008, "Wrong alignment on TedUtils_ApplyGEToPawnsInRange");
static_assert(sizeof(TedUtils_ApplyGEToPawnsInRange) == 0x000108, "Wrong size on TedUtils_ApplyGEToPawnsInRange");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, WorldContextObject) == 0x000000, "Member 'TedUtils_ApplyGEToPawnsInRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, Effect) == 0x000008, "Member 'TedUtils_ApplyGEToPawnsInRange::Effect' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, EffectLocation) == 0x000010, "Member 'TedUtils_ApplyGEToPawnsInRange::EffectLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, EffectLevel) == 0x000028, "Member 'TedUtils_ApplyGEToPawnsInRange::EffectLevel' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, EffectRadius) == 0x00002C, "Member 'TedUtils_ApplyGEToPawnsInRange::EffectRadius' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, PawnFilter) == 0x000030, "Member 'TedUtils_ApplyGEToPawnsInRange::PawnFilter' has a wrong offset!");
static_assert(offsetof(TedUtils_ApplyGEToPawnsInRange, OwnerASC) == 0x000100, "Member 'TedUtils_ApplyGEToPawnsInRange::OwnerASC' has a wrong offset!");

// Function Tempest.TedUtils.CalculateFormation
// 0x0040 (0x0040 - 0x0000)
struct TedUtils_CalculateFormation final
{
public:
	int32                                         UnitCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Direction;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TargetLocation;                                    // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnitOffset;                                        // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      OutLocations;                                      // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_CalculateFormation) == 0x000008, "Wrong alignment on TedUtils_CalculateFormation");
static_assert(sizeof(TedUtils_CalculateFormation) == 0x000040, "Wrong size on TedUtils_CalculateFormation");
static_assert(offsetof(TedUtils_CalculateFormation, UnitCount) == 0x000000, "Member 'TedUtils_CalculateFormation::UnitCount' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculateFormation, Direction) == 0x000008, "Member 'TedUtils_CalculateFormation::Direction' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculateFormation, TargetLocation) == 0x000018, "Member 'TedUtils_CalculateFormation::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculateFormation, UnitOffset) == 0x000028, "Member 'TedUtils_CalculateFormation::UnitOffset' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculateFormation, OutLocations) == 0x000030, "Member 'TedUtils_CalculateFormation::OutLocations' has a wrong offset!");

// Function Tempest.TedUtils.CalculatePawnsLookAtLocation
// 0x0030 (0x0030 - 0x0000)
struct TedUtils_CalculatePawnsLookAtLocation final
{
public:
	TArray<class ATedPawn*>                       Pawns;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              ViewerLocation;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_CalculatePawnsLookAtLocation) == 0x000008, "Wrong alignment on TedUtils_CalculatePawnsLookAtLocation");
static_assert(sizeof(TedUtils_CalculatePawnsLookAtLocation) == 0x000030, "Wrong size on TedUtils_CalculatePawnsLookAtLocation");
static_assert(offsetof(TedUtils_CalculatePawnsLookAtLocation, Pawns) == 0x000000, "Member 'TedUtils_CalculatePawnsLookAtLocation::Pawns' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculatePawnsLookAtLocation, ViewerLocation) == 0x000010, "Member 'TedUtils_CalculatePawnsLookAtLocation::ViewerLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_CalculatePawnsLookAtLocation, ReturnValue) == 0x000020, "Member 'TedUtils_CalculatePawnsLookAtLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.CaptureStructure
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_CaptureStructure final
{
public:
	class ATedStructureBase*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  NewOwner;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceInstantCapture;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_CaptureStructure) == 0x000008, "Wrong alignment on TedUtils_CaptureStructure");
static_assert(sizeof(TedUtils_CaptureStructure) == 0x000018, "Wrong size on TedUtils_CaptureStructure");
static_assert(offsetof(TedUtils_CaptureStructure, Target) == 0x000000, "Member 'TedUtils_CaptureStructure::Target' has a wrong offset!");
static_assert(offsetof(TedUtils_CaptureStructure, Instigator) == 0x000008, "Member 'TedUtils_CaptureStructure::Instigator' has a wrong offset!");
static_assert(offsetof(TedUtils_CaptureStructure, NewOwner) == 0x000010, "Member 'TedUtils_CaptureStructure::NewOwner' has a wrong offset!");
static_assert(offsetof(TedUtils_CaptureStructure, bForceInstantCapture) == 0x000011, "Member 'TedUtils_CaptureStructure::bForceInstantCapture' has a wrong offset!");
static_assert(offsetof(TedUtils_CaptureStructure, ReturnValue) == 0x000012, "Member 'TedUtils_CaptureStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.ClampLocationToNavigableArea
// 0x0048 (0x0048 - 0x0000)
struct TedUtils_ClampLocationToNavigableArea final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TargetActor;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutAdjustedLocation;                               // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_ClampLocationToNavigableArea) == 0x000008, "Wrong alignment on TedUtils_ClampLocationToNavigableArea");
static_assert(sizeof(TedUtils_ClampLocationToNavigableArea) == 0x000048, "Wrong size on TedUtils_ClampLocationToNavigableArea");
static_assert(offsetof(TedUtils_ClampLocationToNavigableArea, Unit) == 0x000000, "Member 'TedUtils_ClampLocationToNavigableArea::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_ClampLocationToNavigableArea, TargetLocation) == 0x000008, "Member 'TedUtils_ClampLocationToNavigableArea::TargetLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_ClampLocationToNavigableArea, TargetActor) == 0x000020, "Member 'TedUtils_ClampLocationToNavigableArea::TargetActor' has a wrong offset!");
static_assert(offsetof(TedUtils_ClampLocationToNavigableArea, OutAdjustedLocation) == 0x000028, "Member 'TedUtils_ClampLocationToNavigableArea::OutAdjustedLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_ClampLocationToNavigableArea, ReturnValue) == 0x000040, "Member 'TedUtils_ClampLocationToNavigableArea::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.FindClosestPawnClusterToLocation
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_FindClosestPawnClusterToLocation final
{
public:
	TArray<class ATedUnitBase*>                   OutActorCluster;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_FindClosestPawnClusterToLocation) == 0x000008, "Wrong alignment on TedUtils_FindClosestPawnClusterToLocation");
static_assert(sizeof(TedUtils_FindClosestPawnClusterToLocation) == 0x000020, "Wrong size on TedUtils_FindClosestPawnClusterToLocation");
static_assert(offsetof(TedUtils_FindClosestPawnClusterToLocation, OutActorCluster) == 0x000000, "Member 'TedUtils_FindClosestPawnClusterToLocation::OutActorCluster' has a wrong offset!");
static_assert(offsetof(TedUtils_FindClosestPawnClusterToLocation, Location) == 0x000010, "Member 'TedUtils_FindClosestPawnClusterToLocation::Location' has a wrong offset!");

// Function Tempest.TedUtils.FindValidGroundLocation
// 0x0040 (0x0040 - 0x0000)
struct TedUtils_FindValidGroundLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_FindValidGroundLocation) == 0x000008, "Wrong alignment on TedUtils_FindValidGroundLocation");
static_assert(sizeof(TedUtils_FindValidGroundLocation) == 0x000040, "Wrong size on TedUtils_FindValidGroundLocation");
static_assert(offsetof(TedUtils_FindValidGroundLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_FindValidGroundLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocation, Location) == 0x000008, "Member 'TedUtils_FindValidGroundLocation::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocation, FilterClass) == 0x000020, "Member 'TedUtils_FindValidGroundLocation::FilterClass' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocation, Extent2D) == 0x000028, "Member 'TedUtils_FindValidGroundLocation::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocation, OverrideTargetNav) == 0x000030, "Member 'TedUtils_FindValidGroundLocation::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocation, ReturnValue) == 0x000038, "Member 'TedUtils_FindValidGroundLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.FindValidGroundLocationWithMinArea
// 0x0048 (0x0048 - 0x0000)
struct TedUtils_FindValidGroundLocationWithMinArea final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinArea;                                           // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptionalMinAreaRequirement;                       // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_FindValidGroundLocationWithMinArea) == 0x000008, "Wrong alignment on TedUtils_FindValidGroundLocationWithMinArea");
static_assert(sizeof(TedUtils_FindValidGroundLocationWithMinArea) == 0x000048, "Wrong size on TedUtils_FindValidGroundLocationWithMinArea");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, WorldContextObject) == 0x000000, "Member 'TedUtils_FindValidGroundLocationWithMinArea::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, Location) == 0x000008, "Member 'TedUtils_FindValidGroundLocationWithMinArea::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, MinArea) == 0x000020, "Member 'TedUtils_FindValidGroundLocationWithMinArea::MinArea' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, bOptionalMinAreaRequirement) == 0x000024, "Member 'TedUtils_FindValidGroundLocationWithMinArea::bOptionalMinAreaRequirement' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, FilterClass) == 0x000028, "Member 'TedUtils_FindValidGroundLocationWithMinArea::FilterClass' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, Extent2D) == 0x000030, "Member 'TedUtils_FindValidGroundLocationWithMinArea::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, OverrideTargetNav) == 0x000038, "Member 'TedUtils_FindValidGroundLocationWithMinArea::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_FindValidGroundLocationWithMinArea, ReturnValue) == 0x000040, "Member 'TedUtils_FindValidGroundLocationWithMinArea::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetAssetPath
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetAssetPath final
{
public:
	const class UObject*                          InAsset;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetAssetPath) == 0x000008, "Wrong alignment on TedUtils_GetAssetPath");
static_assert(sizeof(TedUtils_GetAssetPath) == 0x000018, "Wrong size on TedUtils_GetAssetPath");
static_assert(offsetof(TedUtils_GetAssetPath, InAsset) == 0x000000, "Member 'TedUtils_GetAssetPath::InAsset' has a wrong offset!");
static_assert(offsetof(TedUtils_GetAssetPath, ReturnValue) == 0x000008, "Member 'TedUtils_GetAssetPath::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetAvailablePlayerFactions
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetAvailablePlayerFactions final
{
public:
	TArray<ETedFaction>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetAvailablePlayerFactions) == 0x000008, "Wrong alignment on TedUtils_GetAvailablePlayerFactions");
static_assert(sizeof(TedUtils_GetAvailablePlayerFactions) == 0x000010, "Wrong size on TedUtils_GetAvailablePlayerFactions");
static_assert(offsetof(TedUtils_GetAvailablePlayerFactions, ReturnValue) == 0x000000, "Member 'TedUtils_GetAvailablePlayerFactions::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetAvailablePlayerFactions_Ranked
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetAvailablePlayerFactions_Ranked final
{
public:
	TArray<ETedRankedFaction>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetAvailablePlayerFactions_Ranked) == 0x000008, "Wrong alignment on TedUtils_GetAvailablePlayerFactions_Ranked");
static_assert(sizeof(TedUtils_GetAvailablePlayerFactions_Ranked) == 0x000010, "Wrong size on TedUtils_GetAvailablePlayerFactions_Ranked");
static_assert(offsetof(TedUtils_GetAvailablePlayerFactions_Ranked, ReturnValue) == 0x000000, "Member 'TedUtils_GetAvailablePlayerFactions_Ranked::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetAvailablePlayerTeams_Ranked
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetAvailablePlayerTeams_Ranked final
{
public:
	TArray<ETedRankedTeam>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetAvailablePlayerTeams_Ranked) == 0x000008, "Wrong alignment on TedUtils_GetAvailablePlayerTeams_Ranked");
static_assert(sizeof(TedUtils_GetAvailablePlayerTeams_Ranked) == 0x000010, "Wrong size on TedUtils_GetAvailablePlayerTeams_Ranked");
static_assert(offsetof(TedUtils_GetAvailablePlayerTeams_Ranked, ReturnValue) == 0x000000, "Member 'TedUtils_GetAvailablePlayerTeams_Ranked::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetButtonStyle
// 0x0410 (0x0410 - 0x0000)
struct TedUtils_GetButtonStyle final
{
public:
	class USlateWidgetStyleAsset*                 InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           OutStyle;                                          // 0x0010(0x03F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0400(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0xF];                                      // 0x0401(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetButtonStyle) == 0x000010, "Wrong alignment on TedUtils_GetButtonStyle");
static_assert(sizeof(TedUtils_GetButtonStyle) == 0x000410, "Wrong size on TedUtils_GetButtonStyle");
static_assert(offsetof(TedUtils_GetButtonStyle, InAsset) == 0x000000, "Member 'TedUtils_GetButtonStyle::InAsset' has a wrong offset!");
static_assert(offsetof(TedUtils_GetButtonStyle, OutStyle) == 0x000010, "Member 'TedUtils_GetButtonStyle::OutStyle' has a wrong offset!");
static_assert(offsetof(TedUtils_GetButtonStyle, ReturnValue) == 0x000400, "Member 'TedUtils_GetButtonStyle::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetButtonStyleFromWrapper
// 0x0410 (0x0410 - 0x0000)
struct TedUtils_GetButtonStyleFromWrapper final
{
public:
	struct FTedStyleAssetWrapper                  InWrapper;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           OutStyle;                                          // 0x0010(0x03F0)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0400(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_401[0xF];                                      // 0x0401(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetButtonStyleFromWrapper) == 0x000010, "Wrong alignment on TedUtils_GetButtonStyleFromWrapper");
static_assert(sizeof(TedUtils_GetButtonStyleFromWrapper) == 0x000410, "Wrong size on TedUtils_GetButtonStyleFromWrapper");
static_assert(offsetof(TedUtils_GetButtonStyleFromWrapper, InWrapper) == 0x000000, "Member 'TedUtils_GetButtonStyleFromWrapper::InWrapper' has a wrong offset!");
static_assert(offsetof(TedUtils_GetButtonStyleFromWrapper, OutStyle) == 0x000010, "Member 'TedUtils_GetButtonStyleFromWrapper::OutStyle' has a wrong offset!");
static_assert(offsetof(TedUtils_GetButtonStyleFromWrapper, ReturnValue) == 0x000400, "Member 'TedUtils_GetButtonStyleFromWrapper::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetCameraZoomPct
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetCameraZoomPct final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bImmediate;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetCameraZoomPct) == 0x000008, "Wrong alignment on TedUtils_GetCameraZoomPct");
static_assert(sizeof(TedUtils_GetCameraZoomPct) == 0x000010, "Wrong size on TedUtils_GetCameraZoomPct");
static_assert(offsetof(TedUtils_GetCameraZoomPct, WorldContextObject) == 0x000000, "Member 'TedUtils_GetCameraZoomPct::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetCameraZoomPct, bImmediate) == 0x000008, "Member 'TedUtils_GetCameraZoomPct::bImmediate' has a wrong offset!");
static_assert(offsetof(TedUtils_GetCameraZoomPct, ReturnValue) == 0x00000C, "Member 'TedUtils_GetCameraZoomPct::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetCurrentServerType
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetCurrentServerType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedServerType                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetCurrentServerType) == 0x000008, "Wrong alignment on TedUtils_GetCurrentServerType");
static_assert(sizeof(TedUtils_GetCurrentServerType) == 0x000010, "Wrong size on TedUtils_GetCurrentServerType");
static_assert(offsetof(TedUtils_GetCurrentServerType, WorldContextObject) == 0x000000, "Member 'TedUtils_GetCurrentServerType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetCurrentServerType, ReturnValue) == 0x000008, "Member 'TedUtils_GetCurrentServerType::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetGroundLocation
// 0x0040 (0x0040 - 0x0000)
struct TedUtils_GetGroundLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetGroundLocation) == 0x000008, "Wrong alignment on TedUtils_GetGroundLocation");
static_assert(sizeof(TedUtils_GetGroundLocation) == 0x000040, "Wrong size on TedUtils_GetGroundLocation");
static_assert(offsetof(TedUtils_GetGroundLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_GetGroundLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocation, Location) == 0x000008, "Member 'TedUtils_GetGroundLocation::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocation, OverrideTargetNav) == 0x000018, "Member 'TedUtils_GetGroundLocation::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocation, Extent2D) == 0x000020, "Member 'TedUtils_GetGroundLocation::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocation, ReturnValue) == 0x000028, "Member 'TedUtils_GetGroundLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetGroundLocationAreaClass
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_GetGroundLocationAreaClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetGroundLocationAreaClass) == 0x000008, "Wrong alignment on TedUtils_GetGroundLocationAreaClass");
static_assert(sizeof(TedUtils_GetGroundLocationAreaClass) == 0x000028, "Wrong size on TedUtils_GetGroundLocationAreaClass");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClass, WorldContextObject) == 0x000000, "Member 'TedUtils_GetGroundLocationAreaClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClass, Location) == 0x000008, "Member 'TedUtils_GetGroundLocationAreaClass::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClass, OverrideTargetNav) == 0x000018, "Member 'TedUtils_GetGroundLocationAreaClass::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClass, ReturnValue) == 0x000020, "Member 'TedUtils_GetGroundLocationAreaClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetGroundLocationAreaClassFOW
// 0x0038 (0x0038 - 0x0000)
struct TedUtils_GetGroundLocationAreaClassFOW final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   DefaultAreaClass;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultZOffset;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetGroundLocationAreaClassFOW) == 0x000008, "Wrong alignment on TedUtils_GetGroundLocationAreaClassFOW");
static_assert(sizeof(TedUtils_GetGroundLocationAreaClassFOW) == 0x000038, "Wrong size on TedUtils_GetGroundLocationAreaClassFOW");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, WorldContextObject) == 0x000000, "Member 'TedUtils_GetGroundLocationAreaClassFOW::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, Location) == 0x000008, "Member 'TedUtils_GetGroundLocationAreaClassFOW::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, DefaultAreaClass) == 0x000018, "Member 'TedUtils_GetGroundLocationAreaClassFOW::DefaultAreaClass' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, DefaultZOffset) == 0x000020, "Member 'TedUtils_GetGroundLocationAreaClassFOW::DefaultZOffset' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, OverrideTargetNav) == 0x000028, "Member 'TedUtils_GetGroundLocationAreaClassFOW::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_GetGroundLocationAreaClassFOW, ReturnValue) == 0x000030, "Member 'TedUtils_GetGroundLocationAreaClassFOW::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetMinMaxCoordsFromVectorArray
// 0x0040 (0x0040 - 0x0000)
struct TedUtils_GetMinMaxCoordsFromVectorArray final
{
public:
	TArray<struct FVector>                        InVectorArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                OutMinCoords;                                      // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutMaxCoords;                                      // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetMinMaxCoordsFromVectorArray) == 0x000008, "Wrong alignment on TedUtils_GetMinMaxCoordsFromVectorArray");
static_assert(sizeof(TedUtils_GetMinMaxCoordsFromVectorArray) == 0x000040, "Wrong size on TedUtils_GetMinMaxCoordsFromVectorArray");
static_assert(offsetof(TedUtils_GetMinMaxCoordsFromVectorArray, InVectorArray) == 0x000000, "Member 'TedUtils_GetMinMaxCoordsFromVectorArray::InVectorArray' has a wrong offset!");
static_assert(offsetof(TedUtils_GetMinMaxCoordsFromVectorArray, OutMinCoords) == 0x000010, "Member 'TedUtils_GetMinMaxCoordsFromVectorArray::OutMinCoords' has a wrong offset!");
static_assert(offsetof(TedUtils_GetMinMaxCoordsFromVectorArray, OutMaxCoords) == 0x000028, "Member 'TedUtils_GetMinMaxCoordsFromVectorArray::OutMaxCoords' has a wrong offset!");

// Function Tempest.TedUtils.GetNavMeshForClass
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetNavMeshForClass final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APawn>                      PawnClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetNavMeshForClass) == 0x000008, "Wrong alignment on TedUtils_GetNavMeshForClass");
static_assert(sizeof(TedUtils_GetNavMeshForClass) == 0x000018, "Wrong size on TedUtils_GetNavMeshForClass");
static_assert(offsetof(TedUtils_GetNavMeshForClass, WorldContextObject) == 0x000000, "Member 'TedUtils_GetNavMeshForClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetNavMeshForClass, PawnClass) == 0x000008, "Member 'TedUtils_GetNavMeshForClass::PawnClass' has a wrong offset!");
static_assert(offsetof(TedUtils_GetNavMeshForClass, ReturnValue) == 0x000010, "Member 'TedUtils_GetNavMeshForClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPathLength
// 0x0050 (0x0050 - 0x0000)
struct TedUtils_GetPathLength final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PathStart;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PathEnd;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OutPathLength;                                     // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENavigationQueryResult                        ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetPathLength) == 0x000008, "Wrong alignment on TedUtils_GetPathLength");
static_assert(sizeof(TedUtils_GetPathLength) == 0x000050, "Wrong size on TedUtils_GetPathLength");
static_assert(offsetof(TedUtils_GetPathLength, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPathLength::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, PathStart) == 0x000008, "Member 'TedUtils_GetPathLength::PathStart' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, PathEnd) == 0x000018, "Member 'TedUtils_GetPathLength::PathEnd' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, OutPathLength) == 0x000028, "Member 'TedUtils_GetPathLength::OutPathLength' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, OverrideTargetNav) == 0x000030, "Member 'TedUtils_GetPathLength::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, Extent2D) == 0x000038, "Member 'TedUtils_GetPathLength::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, FilterClass) == 0x000040, "Member 'TedUtils_GetPathLength::FilterClass' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPathLength, ReturnValue) == 0x000048, "Member 'TedUtils_GetPathLength::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPawnsInCone
// 0x0128 (0x0128 - 0x0000)
struct TedUtils_GetPawnsInCone final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       OutPawns;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinLength;                                         // 0x0048(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLength;                                         // 0x004C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUtilsPawnFilter                    Filter;                                            // 0x0058(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPawnsInCone) == 0x000008, "Wrong alignment on TedUtils_GetPawnsInCone");
static_assert(sizeof(TedUtils_GetPawnsInCone) == 0x000128, "Wrong size on TedUtils_GetPawnsInCone");
static_assert(offsetof(TedUtils_GetPawnsInCone, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPawnsInCone::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, OutPawns) == 0x000008, "Member 'TedUtils_GetPawnsInCone::OutPawns' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, Location) == 0x000018, "Member 'TedUtils_GetPawnsInCone::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, Direction) == 0x000030, "Member 'TedUtils_GetPawnsInCone::Direction' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, MinLength) == 0x000048, "Member 'TedUtils_GetPawnsInCone::MinLength' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, MaxLength) == 0x00004C, "Member 'TedUtils_GetPawnsInCone::MaxLength' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, Angle) == 0x000050, "Member 'TedUtils_GetPawnsInCone::Angle' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInCone, Filter) == 0x000058, "Member 'TedUtils_GetPawnsInCone::Filter' has a wrong offset!");

// Function Tempest.TedUtils.GetPawnsInRange
// 0x0108 (0x0108 - 0x0000)
struct TedUtils_GetPawnsInRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       OutPawns;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTedUtilsPawnFilter                    Filter;                                            // 0x0038(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPawnsInRange) == 0x000008, "Wrong alignment on TedUtils_GetPawnsInRange");
static_assert(sizeof(TedUtils_GetPawnsInRange) == 0x000108, "Wrong size on TedUtils_GetPawnsInRange");
static_assert(offsetof(TedUtils_GetPawnsInRange, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPawnsInRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInRange, OutPawns) == 0x000008, "Member 'TedUtils_GetPawnsInRange::OutPawns' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInRange, Location) == 0x000018, "Member 'TedUtils_GetPawnsInRange::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInRange, Radius) == 0x000030, "Member 'TedUtils_GetPawnsInRange::Radius' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPawnsInRange, Filter) == 0x000038, "Member 'TedUtils_GetPawnsInRange::Filter' has a wrong offset!");

// Function Tempest.TedUtils.GetPlayerCameraLocation
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_GetPlayerCameraLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPlayerCameraLocation) == 0x000008, "Wrong alignment on TedUtils_GetPlayerCameraLocation");
static_assert(sizeof(TedUtils_GetPlayerCameraLocation) == 0x000028, "Wrong size on TedUtils_GetPlayerCameraLocation");
static_assert(offsetof(TedUtils_GetPlayerCameraLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPlayerCameraLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerCameraLocation, PlayerIndex) == 0x000008, "Member 'TedUtils_GetPlayerCameraLocation::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerCameraLocation, ReturnValue) == 0x000010, "Member 'TedUtils_GetPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPlayerColorPreset
// 0x0030 (0x0030 - 0x0000)
struct TedUtils_GetPlayerColorPreset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRTSPlayerColorPreset                  ReturnValue;                                       // 0x000C(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPlayerColorPreset) == 0x000008, "Wrong alignment on TedUtils_GetPlayerColorPreset");
static_assert(sizeof(TedUtils_GetPlayerColorPreset) == 0x000030, "Wrong size on TedUtils_GetPlayerColorPreset");
static_assert(offsetof(TedUtils_GetPlayerColorPreset, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPlayerColorPreset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerColorPreset, PlayerID) == 0x000008, "Member 'TedUtils_GetPlayerColorPreset::PlayerID' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerColorPreset, ReturnValue) == 0x00000C, "Member 'TedUtils_GetPlayerColorPreset::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPlayerTedPawn
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetPlayerTedPawn final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerPawn*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPlayerTedPawn) == 0x000008, "Wrong alignment on TedUtils_GetPlayerTedPawn");
static_assert(sizeof(TedUtils_GetPlayerTedPawn) == 0x000018, "Wrong size on TedUtils_GetPlayerTedPawn");
static_assert(offsetof(TedUtils_GetPlayerTedPawn, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPlayerTedPawn::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerTedPawn, PlayerIndex) == 0x000008, "Member 'TedUtils_GetPlayerTedPawn::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPlayerTedPawn, ReturnValue) == 0x000010, "Member 'TedUtils_GetPlayerTedPawn::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPreCinematicPlayerCameraLocation
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_GetPreCinematicPlayerCameraLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetPreCinematicPlayerCameraLocation) == 0x000008, "Wrong alignment on TedUtils_GetPreCinematicPlayerCameraLocation");
static_assert(sizeof(TedUtils_GetPreCinematicPlayerCameraLocation) == 0x000020, "Wrong size on TedUtils_GetPreCinematicPlayerCameraLocation");
static_assert(offsetof(TedUtils_GetPreCinematicPlayerCameraLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPreCinematicPlayerCameraLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPreCinematicPlayerCameraLocation, ReturnValue) == 0x000008, "Member 'TedUtils_GetPreCinematicPlayerCameraLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetPreCinematicPlayerCameraZoomPct
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetPreCinematicPlayerCameraZoomPct final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetPreCinematicPlayerCameraZoomPct) == 0x000008, "Wrong alignment on TedUtils_GetPreCinematicPlayerCameraZoomPct");
static_assert(sizeof(TedUtils_GetPreCinematicPlayerCameraZoomPct) == 0x000010, "Wrong size on TedUtils_GetPreCinematicPlayerCameraZoomPct");
static_assert(offsetof(TedUtils_GetPreCinematicPlayerCameraZoomPct, WorldContextObject) == 0x000000, "Member 'TedUtils_GetPreCinematicPlayerCameraZoomPct::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetPreCinematicPlayerCameraZoomPct, ReturnValue) == 0x000008, "Member 'TedUtils_GetPreCinematicPlayerCameraZoomPct::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetSelectionColorPreset
// 0x0030 (0x0030 - 0x0000)
struct TedUtils_GetSelectionColorPreset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRTSSelectionColorPreset               ReturnValue;                                       // 0x000C(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetSelectionColorPreset) == 0x000008, "Wrong alignment on TedUtils_GetSelectionColorPreset");
static_assert(sizeof(TedUtils_GetSelectionColorPreset) == 0x000030, "Wrong size on TedUtils_GetSelectionColorPreset");
static_assert(offsetof(TedUtils_GetSelectionColorPreset, WorldContextObject) == 0x000000, "Member 'TedUtils_GetSelectionColorPreset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetSelectionColorPreset, PlayerID) == 0x000008, "Member 'TedUtils_GetSelectionColorPreset::PlayerID' has a wrong offset!");
static_assert(offsetof(TedUtils_GetSelectionColorPreset, ReturnValue) == 0x00000C, "Member 'TedUtils_GetSelectionColorPreset::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTeamID
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetTeamID final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_GetTeamID) == 0x000008, "Wrong alignment on TedUtils_GetTeamID");
static_assert(sizeof(TedUtils_GetTeamID) == 0x000010, "Wrong size on TedUtils_GetTeamID");
static_assert(offsetof(TedUtils_GetTeamID, Target) == 0x000000, "Member 'TedUtils_GetTeamID::Target' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTeamID, ReturnValue) == 0x000008, "Member 'TedUtils_GetTeamID::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTedGameState
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_GetTedGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedGameState*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTedGameState) == 0x000008, "Wrong alignment on TedUtils_GetTedGameState");
static_assert(sizeof(TedUtils_GetTedGameState) == 0x000010, "Wrong size on TedUtils_GetTedGameState");
static_assert(offsetof(TedUtils_GetTedGameState, WorldContextObject) == 0x000000, "Member 'TedUtils_GetTedGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedGameState, ReturnValue) == 0x000008, "Member 'TedUtils_GetTedGameState::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTedPlayerCameraComponent
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetTedPlayerCameraComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTedPlayerCameraComponent*              ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTedPlayerCameraComponent) == 0x000008, "Wrong alignment on TedUtils_GetTedPlayerCameraComponent");
static_assert(sizeof(TedUtils_GetTedPlayerCameraComponent) == 0x000018, "Wrong size on TedUtils_GetTedPlayerCameraComponent");
static_assert(offsetof(TedUtils_GetTedPlayerCameraComponent, WorldContextObject) == 0x000000, "Member 'TedUtils_GetTedPlayerCameraComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerCameraComponent, PlayerIndex) == 0x000008, "Member 'TedUtils_GetTedPlayerCameraComponent::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerCameraComponent, ReturnValue) == 0x000010, "Member 'TedUtils_GetTedPlayerCameraComponent::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTedPlayerCameraManager
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetTedPlayerCameraManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerCameraManager*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTedPlayerCameraManager) == 0x000008, "Wrong alignment on TedUtils_GetTedPlayerCameraManager");
static_assert(sizeof(TedUtils_GetTedPlayerCameraManager) == 0x000018, "Wrong size on TedUtils_GetTedPlayerCameraManager");
static_assert(offsetof(TedUtils_GetTedPlayerCameraManager, WorldContextObject) == 0x000000, "Member 'TedUtils_GetTedPlayerCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerCameraManager, PlayerIndex) == 0x000008, "Member 'TedUtils_GetTedPlayerCameraManager::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerCameraManager, ReturnValue) == 0x000010, "Member 'TedUtils_GetTedPlayerCameraManager::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTedPlayerController
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetTedPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerController*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTedPlayerController) == 0x000008, "Wrong alignment on TedUtils_GetTedPlayerController");
static_assert(sizeof(TedUtils_GetTedPlayerController) == 0x000018, "Wrong size on TedUtils_GetTedPlayerController");
static_assert(offsetof(TedUtils_GetTedPlayerController, WorldContextObject) == 0x000000, "Member 'TedUtils_GetTedPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerController, PlayerIndex) == 0x000008, "Member 'TedUtils_GetTedPlayerController::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerController, ReturnValue) == 0x000010, "Member 'TedUtils_GetTedPlayerController::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTedPlayerControllerByPlayerID
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_GetTedPlayerControllerByPlayerID final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerController*                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTedPlayerControllerByPlayerID) == 0x000008, "Wrong alignment on TedUtils_GetTedPlayerControllerByPlayerID");
static_assert(sizeof(TedUtils_GetTedPlayerControllerByPlayerID) == 0x000018, "Wrong size on TedUtils_GetTedPlayerControllerByPlayerID");
static_assert(offsetof(TedUtils_GetTedPlayerControllerByPlayerID, WorldContextObject) == 0x000000, "Member 'TedUtils_GetTedPlayerControllerByPlayerID::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerControllerByPlayerID, PlayerID) == 0x000008, "Member 'TedUtils_GetTedPlayerControllerByPlayerID::PlayerID' has a wrong offset!");
static_assert(offsetof(TedUtils_GetTedPlayerControllerByPlayerID, ReturnValue) == 0x000010, "Member 'TedUtils_GetTedPlayerControllerByPlayerID::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetTimeForUIMaterials
// 0x0004 (0x0004 - 0x0000)
struct TedUtils_GetTimeForUIMaterials final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetTimeForUIMaterials) == 0x000004, "Wrong alignment on TedUtils_GetTimeForUIMaterials");
static_assert(sizeof(TedUtils_GetTimeForUIMaterials) == 0x000004, "Wrong size on TedUtils_GetTimeForUIMaterials");
static_assert(offsetof(TedUtils_GetTimeForUIMaterials, ReturnValue) == 0x000000, "Member 'TedUtils_GetTimeForUIMaterials::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.GetWorldBounds
// 0x0040 (0x0040 - 0x0000)
struct TedUtils_GetWorldBounds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_GetWorldBounds) == 0x000008, "Wrong alignment on TedUtils_GetWorldBounds");
static_assert(sizeof(TedUtils_GetWorldBounds) == 0x000040, "Wrong size on TedUtils_GetWorldBounds");
static_assert(offsetof(TedUtils_GetWorldBounds, WorldContextObject) == 0x000000, "Member 'TedUtils_GetWorldBounds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_GetWorldBounds, ReturnValue) == 0x000008, "Member 'TedUtils_GetWorldBounds::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.HasOnlyThisCommandQueued
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_HasOnlyThisCommandQueued final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayCommand>           CommandToCheck;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_HasOnlyThisCommandQueued) == 0x000008, "Wrong alignment on TedUtils_HasOnlyThisCommandQueued");
static_assert(sizeof(TedUtils_HasOnlyThisCommandQueued) == 0x000018, "Wrong size on TedUtils_HasOnlyThisCommandQueued");
static_assert(offsetof(TedUtils_HasOnlyThisCommandQueued, Unit) == 0x000000, "Member 'TedUtils_HasOnlyThisCommandQueued::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_HasOnlyThisCommandQueued, CommandToCheck) == 0x000008, "Member 'TedUtils_HasOnlyThisCommandQueued::CommandToCheck' has a wrong offset!");
static_assert(offsetof(TedUtils_HasOnlyThisCommandQueued, ReturnValue) == 0x000010, "Member 'TedUtils_HasOnlyThisCommandQueued::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.HasPlayedGameIntro
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_HasPlayedGameIntro final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_HasPlayedGameIntro) == 0x000008, "Wrong alignment on TedUtils_HasPlayedGameIntro");
static_assert(sizeof(TedUtils_HasPlayedGameIntro) == 0x000010, "Wrong size on TedUtils_HasPlayedGameIntro");
static_assert(offsetof(TedUtils_HasPlayedGameIntro, WorldContextObject) == 0x000000, "Member 'TedUtils_HasPlayedGameIntro::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_HasPlayedGameIntro, ReturnValue) == 0x000008, "Member 'TedUtils_HasPlayedGameIntro::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsCampaign
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsCampaign final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsCampaign) == 0x000008, "Wrong alignment on TedUtils_IsCampaign");
static_assert(sizeof(TedUtils_IsCampaign) == 0x000010, "Wrong size on TedUtils_IsCampaign");
static_assert(offsetof(TedUtils_IsCampaign, WorldContextObject) == 0x000000, "Member 'TedUtils_IsCampaign::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsCampaign, ReturnValue) == 0x000008, "Member 'TedUtils_IsCampaign::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsCinematicModeEnabled
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsCinematicModeEnabled final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsCinematicModeEnabled) == 0x000008, "Wrong alignment on TedUtils_IsCinematicModeEnabled");
static_assert(sizeof(TedUtils_IsCinematicModeEnabled) == 0x000010, "Wrong size on TedUtils_IsCinematicModeEnabled");
static_assert(offsetof(TedUtils_IsCinematicModeEnabled, WorldContextObject) == 0x000000, "Member 'TedUtils_IsCinematicModeEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsCinematicModeEnabled, ReturnValue) == 0x000008, "Member 'TedUtils_IsCinematicModeEnabled::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsCommandCompound
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsCommandCompound final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsCommandCompound) == 0x000008, "Wrong alignment on TedUtils_IsCommandCompound");
static_assert(sizeof(TedUtils_IsCommandCompound) == 0x000010, "Wrong size on TedUtils_IsCommandCompound");
static_assert(offsetof(TedUtils_IsCommandCompound, WorldContextObject) == 0x000000, "Member 'TedUtils_IsCommandCompound::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsCommandCompound, ReturnValue) == 0x000008, "Member 'TedUtils_IsCommandCompound::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsInsideWorldBounds
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_IsInsideWorldBounds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsInsideWorldBounds) == 0x000008, "Wrong alignment on TedUtils_IsInsideWorldBounds");
static_assert(sizeof(TedUtils_IsInsideWorldBounds) == 0x000028, "Wrong size on TedUtils_IsInsideWorldBounds");
static_assert(offsetof(TedUtils_IsInsideWorldBounds, WorldContextObject) == 0x000000, "Member 'TedUtils_IsInsideWorldBounds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsInsideWorldBounds, WorldLocation) == 0x000008, "Member 'TedUtils_IsInsideWorldBounds::WorldLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_IsInsideWorldBounds, ReturnValue) == 0x000020, "Member 'TedUtils_IsInsideWorldBounds::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsMainMenu
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsMainMenu final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsMainMenu) == 0x000008, "Wrong alignment on TedUtils_IsMainMenu");
static_assert(sizeof(TedUtils_IsMainMenu) == 0x000010, "Wrong size on TedUtils_IsMainMenu");
static_assert(offsetof(TedUtils_IsMainMenu, WorldContextObject) == 0x000000, "Member 'TedUtils_IsMainMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsMainMenu, ReturnValue) == 0x000008, "Member 'TedUtils_IsMainMenu::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsMultiplayer
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsMultiplayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsMultiplayer) == 0x000008, "Wrong alignment on TedUtils_IsMultiplayer");
static_assert(sizeof(TedUtils_IsMultiplayer) == 0x000010, "Wrong size on TedUtils_IsMultiplayer");
static_assert(offsetof(TedUtils_IsMultiplayer, WorldContextObject) == 0x000000, "Member 'TedUtils_IsMultiplayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsMultiplayer, ReturnValue) == 0x000008, "Member 'TedUtils_IsMultiplayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsSkirmish
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_IsSkirmish final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsSkirmish) == 0x000008, "Wrong alignment on TedUtils_IsSkirmish");
static_assert(sizeof(TedUtils_IsSkirmish) == 0x000010, "Wrong size on TedUtils_IsSkirmish");
static_assert(offsetof(TedUtils_IsSkirmish, WorldContextObject) == 0x000000, "Member 'TedUtils_IsSkirmish::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsSkirmish, ReturnValue) == 0x000008, "Member 'TedUtils_IsSkirmish::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsValidGroundLocation
// 0x0038 (0x0038 - 0x0000)
struct TedUtils_IsValidGroundLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         OverrideTargetNav;                                 // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsValidGroundLocation) == 0x000008, "Wrong alignment on TedUtils_IsValidGroundLocation");
static_assert(sizeof(TedUtils_IsValidGroundLocation) == 0x000038, "Wrong size on TedUtils_IsValidGroundLocation");
static_assert(offsetof(TedUtils_IsValidGroundLocation, WorldContextObject) == 0x000000, "Member 'TedUtils_IsValidGroundLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocation, Location) == 0x000008, "Member 'TedUtils_IsValidGroundLocation::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocation, FilterClass) == 0x000018, "Member 'TedUtils_IsValidGroundLocation::FilterClass' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocation, Extent2D) == 0x000020, "Member 'TedUtils_IsValidGroundLocation::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocation, OverrideTargetNav) == 0x000028, "Member 'TedUtils_IsValidGroundLocation::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocation, ReturnValue) == 0x000030, "Member 'TedUtils_IsValidGroundLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsValidGroundLocationForUnit
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_IsValidGroundLocationForUnit final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Location;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Extent2D;                                          // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsValidGroundLocationForUnit) == 0x000008, "Wrong alignment on TedUtils_IsValidGroundLocationForUnit");
static_assert(sizeof(TedUtils_IsValidGroundLocationForUnit) == 0x000020, "Wrong size on TedUtils_IsValidGroundLocationForUnit");
static_assert(offsetof(TedUtils_IsValidGroundLocationForUnit, Unit) == 0x000000, "Member 'TedUtils_IsValidGroundLocationForUnit::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationForUnit, Location) == 0x000008, "Member 'TedUtils_IsValidGroundLocationForUnit::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationForUnit, Extent2D) == 0x000018, "Member 'TedUtils_IsValidGroundLocationForUnit::Extent2D' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationForUnit, ReturnValue) == 0x00001C, "Member 'TedUtils_IsValidGroundLocationForUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.IsValidGroundLocationInRangeForUnit
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_IsValidGroundLocationInRangeForUnit final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_IsValidGroundLocationInRangeForUnit) == 0x000008, "Wrong alignment on TedUtils_IsValidGroundLocationInRangeForUnit");
static_assert(sizeof(TedUtils_IsValidGroundLocationInRangeForUnit) == 0x000028, "Wrong size on TedUtils_IsValidGroundLocationInRangeForUnit");
static_assert(offsetof(TedUtils_IsValidGroundLocationInRangeForUnit, Unit) == 0x000000, "Member 'TedUtils_IsValidGroundLocationInRangeForUnit::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationInRangeForUnit, Location) == 0x000008, "Member 'TedUtils_IsValidGroundLocationInRangeForUnit::Location' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationInRangeForUnit, Range) == 0x000020, "Member 'TedUtils_IsValidGroundLocationInRangeForUnit::Range' has a wrong offset!");
static_assert(offsetof(TedUtils_IsValidGroundLocationInRangeForUnit, ReturnValue) == 0x000024, "Member 'TedUtils_IsValidGroundLocationInRangeForUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.K2_DealConeDamage
// 0x0148 (0x0148 - 0x0000)
struct TedUtils_K2_DealConeDamage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FConeDamageParams                      Params_0;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedUtilsPawnFilter                    Filter;                                            // 0x0060(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EffectToApply;                                     // 0x0130(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0138(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_K2_DealConeDamage) == 0x000008, "Wrong alignment on TedUtils_K2_DealConeDamage");
static_assert(sizeof(TedUtils_K2_DealConeDamage) == 0x000148, "Wrong size on TedUtils_K2_DealConeDamage");
static_assert(offsetof(TedUtils_K2_DealConeDamage, WorldContextObject) == 0x000000, "Member 'TedUtils_K2_DealConeDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, Origin) == 0x000008, "Member 'TedUtils_K2_DealConeDamage::Origin' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, Direction) == 0x000020, "Member 'TedUtils_K2_DealConeDamage::Direction' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, Params_0) == 0x000038, "Member 'TedUtils_K2_DealConeDamage::Params_0' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, DamageTypeClass) == 0x000050, "Member 'TedUtils_K2_DealConeDamage::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, DamageCauser) == 0x000058, "Member 'TedUtils_K2_DealConeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, Filter) == 0x000060, "Member 'TedUtils_K2_DealConeDamage::Filter' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, EffectToApply) == 0x000130, "Member 'TedUtils_K2_DealConeDamage::EffectToApply' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealConeDamage, ReturnValue) == 0x000138, "Member 'TedUtils_K2_DealConeDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.K2_DealDamage
// 0x0038 (0x0038 - 0x0000)
struct TedUtils_K2_DealDamage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageTarget;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EffectToApply;                                     // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_K2_DealDamage) == 0x000008, "Wrong alignment on TedUtils_K2_DealDamage");
static_assert(sizeof(TedUtils_K2_DealDamage) == 0x000038, "Wrong size on TedUtils_K2_DealDamage");
static_assert(offsetof(TedUtils_K2_DealDamage, WorldContextObject) == 0x000000, "Member 'TedUtils_K2_DealDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, DamageTarget) == 0x000008, "Member 'TedUtils_K2_DealDamage::DamageTarget' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, DamageAmount) == 0x000010, "Member 'TedUtils_K2_DealDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, DamageTypeClass) == 0x000018, "Member 'TedUtils_K2_DealDamage::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, DamageCauser) == 0x000020, "Member 'TedUtils_K2_DealDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, EffectToApply) == 0x000028, "Member 'TedUtils_K2_DealDamage::EffectToApply' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealDamage, ReturnValue) == 0x000030, "Member 'TedUtils_K2_DealDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.K2_DealRadialDamage
// 0x0130 (0x0130 - 0x0000)
struct TedUtils_K2_DealRadialDamage final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRadialDamageParams                    Params_0;                                          // 0x0020(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedDamageType>             DamageTypeClass;                                   // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTedUtilsPawnFilter                    Filter;                                            // 0x0048(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            EffectToApply;                                     // 0x0118(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ATedPawn*>                       ReturnValue;                                       // 0x0120(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_K2_DealRadialDamage) == 0x000008, "Wrong alignment on TedUtils_K2_DealRadialDamage");
static_assert(sizeof(TedUtils_K2_DealRadialDamage) == 0x000130, "Wrong size on TedUtils_K2_DealRadialDamage");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, WorldContextObject) == 0x000000, "Member 'TedUtils_K2_DealRadialDamage::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, Origin) == 0x000008, "Member 'TedUtils_K2_DealRadialDamage::Origin' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, Params_0) == 0x000020, "Member 'TedUtils_K2_DealRadialDamage::Params_0' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, DamageTypeClass) == 0x000038, "Member 'TedUtils_K2_DealRadialDamage::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, DamageCauser) == 0x000040, "Member 'TedUtils_K2_DealRadialDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, Filter) == 0x000048, "Member 'TedUtils_K2_DealRadialDamage::Filter' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, EffectToApply) == 0x000118, "Member 'TedUtils_K2_DealRadialDamage::EffectToApply' has a wrong offset!");
static_assert(offsetof(TedUtils_K2_DealRadialDamage, ReturnValue) == 0x000120, "Member 'TedUtils_K2_DealRadialDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.LoadMainMenu
// 0x0008 (0x0008 - 0x0000)
struct TedUtils_LoadMainMenu final
{
public:
	const class UObject*                          InWorldContext;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_LoadMainMenu) == 0x000008, "Wrong alignment on TedUtils_LoadMainMenu");
static_assert(sizeof(TedUtils_LoadMainMenu) == 0x000008, "Wrong size on TedUtils_LoadMainMenu");
static_assert(offsetof(TedUtils_LoadMainMenu, InWorldContext) == 0x000000, "Member 'TedUtils_LoadMainMenu::InWorldContext' has a wrong offset!");

// Function Tempest.TedUtils.MoveUnitAlongPath
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_MoveUnitAlongPath final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Path;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIRequestID                           ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_MoveUnitAlongPath) == 0x000008, "Wrong alignment on TedUtils_MoveUnitAlongPath");
static_assert(sizeof(TedUtils_MoveUnitAlongPath) == 0x000020, "Wrong size on TedUtils_MoveUnitAlongPath");
static_assert(offsetof(TedUtils_MoveUnitAlongPath, Unit) == 0x000000, "Member 'TedUtils_MoveUnitAlongPath::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongPath, Path) == 0x000008, "Member 'TedUtils_MoveUnitAlongPath::Path' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongPath, AcceptanceRadius) == 0x000018, "Member 'TedUtils_MoveUnitAlongPath::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongPath, ReturnValue) == 0x00001C, "Member 'TedUtils_MoveUnitAlongPath::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.MoveUnitAlongSpline
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_MoveUnitAlongSpline final
{
public:
	const class ATedUnitBase*                     Unit;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USplineComponent*                 Spline;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingPointIdx;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinishPointIdx;                                    // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAIRequestID                           ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_MoveUnitAlongSpline) == 0x000008, "Wrong alignment on TedUtils_MoveUnitAlongSpline");
static_assert(sizeof(TedUtils_MoveUnitAlongSpline) == 0x000020, "Wrong size on TedUtils_MoveUnitAlongSpline");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, Unit) == 0x000000, "Member 'TedUtils_MoveUnitAlongSpline::Unit' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, Spline) == 0x000008, "Member 'TedUtils_MoveUnitAlongSpline::Spline' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, StartingPointIdx) == 0x000010, "Member 'TedUtils_MoveUnitAlongSpline::StartingPointIdx' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, FinishPointIdx) == 0x000014, "Member 'TedUtils_MoveUnitAlongSpline::FinishPointIdx' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, AcceptanceRadius) == 0x000018, "Member 'TedUtils_MoveUnitAlongSpline::AcceptanceRadius' has a wrong offset!");
static_assert(offsetof(TedUtils_MoveUnitAlongSpline, ReturnValue) == 0x00001C, "Member 'TedUtils_MoveUnitAlongSpline::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.OpenBriefingLevel
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_OpenBriefingLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_OpenBriefingLevel) == 0x000008, "Wrong alignment on TedUtils_OpenBriefingLevel");
static_assert(sizeof(TedUtils_OpenBriefingLevel) == 0x000018, "Wrong size on TedUtils_OpenBriefingLevel");
static_assert(offsetof(TedUtils_OpenBriefingLevel, WorldContextObject) == 0x000000, "Member 'TedUtils_OpenBriefingLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenBriefingLevel, InMap) == 0x000008, "Member 'TedUtils_OpenBriefingLevel::InMap' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenBriefingLevel, ReturnValue) == 0x000010, "Member 'TedUtils_OpenBriefingLevel::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.OpenBriefingLevelWithOptions
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_OpenBriefingLevelWithOptions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InOptions;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_OpenBriefingLevelWithOptions) == 0x000008, "Wrong alignment on TedUtils_OpenBriefingLevelWithOptions");
static_assert(sizeof(TedUtils_OpenBriefingLevelWithOptions) == 0x000028, "Wrong size on TedUtils_OpenBriefingLevelWithOptions");
static_assert(offsetof(TedUtils_OpenBriefingLevelWithOptions, WorldContextObject) == 0x000000, "Member 'TedUtils_OpenBriefingLevelWithOptions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenBriefingLevelWithOptions, InMap) == 0x000008, "Member 'TedUtils_OpenBriefingLevelWithOptions::InMap' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenBriefingLevelWithOptions, InOptions) == 0x000010, "Member 'TedUtils_OpenBriefingLevelWithOptions::InOptions' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenBriefingLevelWithOptions, ReturnValue) == 0x000020, "Member 'TedUtils_OpenBriefingLevelWithOptions::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.OpenLevel
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_OpenLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_OpenLevel) == 0x000008, "Wrong alignment on TedUtils_OpenLevel");
static_assert(sizeof(TedUtils_OpenLevel) == 0x000010, "Wrong size on TedUtils_OpenLevel");
static_assert(offsetof(TedUtils_OpenLevel, WorldContextObject) == 0x000000, "Member 'TedUtils_OpenLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenLevel, InMap) == 0x000008, "Member 'TedUtils_OpenLevel::InMap' has a wrong offset!");

// Function Tempest.TedUtils.OpenLevelWithOptions
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_OpenLevelWithOptions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedMapInfo*                      InMap;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InOptions;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_OpenLevelWithOptions) == 0x000008, "Wrong alignment on TedUtils_OpenLevelWithOptions");
static_assert(sizeof(TedUtils_OpenLevelWithOptions) == 0x000020, "Wrong size on TedUtils_OpenLevelWithOptions");
static_assert(offsetof(TedUtils_OpenLevelWithOptions, WorldContextObject) == 0x000000, "Member 'TedUtils_OpenLevelWithOptions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenLevelWithOptions, InMap) == 0x000008, "Member 'TedUtils_OpenLevelWithOptions::InMap' has a wrong offset!");
static_assert(offsetof(TedUtils_OpenLevelWithOptions, InOptions) == 0x000010, "Member 'TedUtils_OpenLevelWithOptions::InOptions' has a wrong offset!");

// Function Tempest.TedUtils.PlayAnnouncement
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_PlayAnnouncement final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UTedAnnouncement>           AnnouncementClass;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          OptionalObject;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_PlayAnnouncement) == 0x000008, "Wrong alignment on TedUtils_PlayAnnouncement");
static_assert(sizeof(TedUtils_PlayAnnouncement) == 0x000020, "Wrong size on TedUtils_PlayAnnouncement");
static_assert(offsetof(TedUtils_PlayAnnouncement, WorldContextObject) == 0x000000, "Member 'TedUtils_PlayAnnouncement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayAnnouncement, PlayerIndex) == 0x000008, "Member 'TedUtils_PlayAnnouncement::PlayerIndex' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayAnnouncement, AnnouncementClass) == 0x000010, "Member 'TedUtils_PlayAnnouncement::AnnouncementClass' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayAnnouncement, OptionalObject) == 0x000018, "Member 'TedUtils_PlayAnnouncement::OptionalObject' has a wrong offset!");

// Function Tempest.TedUtils.PlayFOWAwareWorldCameraShake
// 0x0038 (0x0038 - 0x0000)
struct TedUtils_PlayFOWAwareWorldCameraShake final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           Shake;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Epicenter;                                         // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientShakeTowardsEpicenter;                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_PlayFOWAwareWorldCameraShake) == 0x000008, "Wrong alignment on TedUtils_PlayFOWAwareWorldCameraShake");
static_assert(sizeof(TedUtils_PlayFOWAwareWorldCameraShake) == 0x000038, "Wrong size on TedUtils_PlayFOWAwareWorldCameraShake");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, WorldContextObject) == 0x000000, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, Shake) == 0x000008, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::Shake' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, Epicenter) == 0x000010, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::Epicenter' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, InnerRadius) == 0x000028, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::InnerRadius' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, OuterRadius) == 0x00002C, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::OuterRadius' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, Falloff) == 0x000030, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::Falloff' has a wrong offset!");
static_assert(offsetof(TedUtils_PlayFOWAwareWorldCameraShake, bOrientShakeTowardsEpicenter) == 0x000034, "Member 'TedUtils_PlayFOWAwareWorldCameraShake::bOrientShakeTowardsEpicenter' has a wrong offset!");

// Function Tempest.TedUtils.RequestBatchSpawn
// 0x0028 (0x0028 - 0x0000)
struct TedUtils_RequestBatchSpawn final
{
public:
	TArray<class ATedUnitSpawner*>                Spawners;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATedUnitBase*>                   OutSpawnedUnits;                                   // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_RequestBatchSpawn) == 0x000008, "Wrong alignment on TedUtils_RequestBatchSpawn");
static_assert(sizeof(TedUtils_RequestBatchSpawn) == 0x000028, "Wrong size on TedUtils_RequestBatchSpawn");
static_assert(offsetof(TedUtils_RequestBatchSpawn, Spawners) == 0x000000, "Member 'TedUtils_RequestBatchSpawn::Spawners' has a wrong offset!");
static_assert(offsetof(TedUtils_RequestBatchSpawn, bForce) == 0x000010, "Member 'TedUtils_RequestBatchSpawn::bForce' has a wrong offset!");
static_assert(offsetof(TedUtils_RequestBatchSpawn, OutSpawnedUnits) == 0x000018, "Member 'TedUtils_RequestBatchSpawn::OutSpawnedUnits' has a wrong offset!");

// Function Tempest.TedUtils.SetCameraZoomPct
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_SetCameraZoomPct final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomPct;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetCameraZoomPct) == 0x000008, "Wrong alignment on TedUtils_SetCameraZoomPct");
static_assert(sizeof(TedUtils_SetCameraZoomPct) == 0x000010, "Wrong size on TedUtils_SetCameraZoomPct");
static_assert(offsetof(TedUtils_SetCameraZoomPct, WorldContextObject) == 0x000000, "Member 'TedUtils_SetCameraZoomPct::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SetCameraZoomPct, ZoomPct) == 0x000008, "Member 'TedUtils_SetCameraZoomPct::ZoomPct' has a wrong offset!");

// Function Tempest.TedUtils.SetCinematicModeEnabled
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_SetCinematicModeEnabled final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsHUD;                                       // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CutsceneName;                                      // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SetCinematicModeEnabled) == 0x000008, "Wrong alignment on TedUtils_SetCinematicModeEnabled");
static_assert(sizeof(TedUtils_SetCinematicModeEnabled) == 0x000020, "Wrong size on TedUtils_SetCinematicModeEnabled");
static_assert(offsetof(TedUtils_SetCinematicModeEnabled, WorldContextObject) == 0x000000, "Member 'TedUtils_SetCinematicModeEnabled::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SetCinematicModeEnabled, bEnabled) == 0x000008, "Member 'TedUtils_SetCinematicModeEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(TedUtils_SetCinematicModeEnabled, bAffectsHUD) == 0x000009, "Member 'TedUtils_SetCinematicModeEnabled::bAffectsHUD' has a wrong offset!");
static_assert(offsetof(TedUtils_SetCinematicModeEnabled, CutsceneName) == 0x000010, "Member 'TedUtils_SetCinematicModeEnabled::CutsceneName' has a wrong offset!");

// Function Tempest.TedUtils.SetConsoleVariable_Bool
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_SetConsoleVariable_Bool final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetConsoleVariable_Bool) == 0x000008, "Wrong alignment on TedUtils_SetConsoleVariable_Bool");
static_assert(sizeof(TedUtils_SetConsoleVariable_Bool) == 0x000018, "Wrong size on TedUtils_SetConsoleVariable_Bool");
static_assert(offsetof(TedUtils_SetConsoleVariable_Bool, InName) == 0x000000, "Member 'TedUtils_SetConsoleVariable_Bool::InName' has a wrong offset!");
static_assert(offsetof(TedUtils_SetConsoleVariable_Bool, InValue) == 0x000010, "Member 'TedUtils_SetConsoleVariable_Bool::InValue' has a wrong offset!");

// Function Tempest.TedUtils.SetConsoleVariable_Float
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_SetConsoleVariable_Float final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetConsoleVariable_Float) == 0x000008, "Wrong alignment on TedUtils_SetConsoleVariable_Float");
static_assert(sizeof(TedUtils_SetConsoleVariable_Float) == 0x000018, "Wrong size on TedUtils_SetConsoleVariable_Float");
static_assert(offsetof(TedUtils_SetConsoleVariable_Float, InName) == 0x000000, "Member 'TedUtils_SetConsoleVariable_Float::InName' has a wrong offset!");
static_assert(offsetof(TedUtils_SetConsoleVariable_Float, InValue) == 0x000010, "Member 'TedUtils_SetConsoleVariable_Float::InValue' has a wrong offset!");

// Function Tempest.TedUtils.SetConsoleVariable_Integer
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_SetConsoleVariable_Integer final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetConsoleVariable_Integer) == 0x000008, "Wrong alignment on TedUtils_SetConsoleVariable_Integer");
static_assert(sizeof(TedUtils_SetConsoleVariable_Integer) == 0x000018, "Wrong size on TedUtils_SetConsoleVariable_Integer");
static_assert(offsetof(TedUtils_SetConsoleVariable_Integer, InName) == 0x000000, "Member 'TedUtils_SetConsoleVariable_Integer::InName' has a wrong offset!");
static_assert(offsetof(TedUtils_SetConsoleVariable_Integer, InValue) == 0x000010, "Member 'TedUtils_SetConsoleVariable_Integer::InValue' has a wrong offset!");

// Function Tempest.TedUtils.SetConsoleVariable_String
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_SetConsoleVariable_String final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InValue;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SetConsoleVariable_String) == 0x000008, "Wrong alignment on TedUtils_SetConsoleVariable_String");
static_assert(sizeof(TedUtils_SetConsoleVariable_String) == 0x000020, "Wrong size on TedUtils_SetConsoleVariable_String");
static_assert(offsetof(TedUtils_SetConsoleVariable_String, InName) == 0x000000, "Member 'TedUtils_SetConsoleVariable_String::InName' has a wrong offset!");
static_assert(offsetof(TedUtils_SetConsoleVariable_String, InValue) == 0x000010, "Member 'TedUtils_SetConsoleVariable_String::InValue' has a wrong offset!");

// Function Tempest.TedUtils.SetMinimapState
// 0x0018 (0x0018 - 0x0000)
struct TedUtils_SetMinimapState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMinimapStateMode                             MinimapStateMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATedPlayerState*                        InPlayerState;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SetMinimapState) == 0x000008, "Wrong alignment on TedUtils_SetMinimapState");
static_assert(sizeof(TedUtils_SetMinimapState) == 0x000018, "Wrong size on TedUtils_SetMinimapState");
static_assert(offsetof(TedUtils_SetMinimapState, WorldContextObject) == 0x000000, "Member 'TedUtils_SetMinimapState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SetMinimapState, MinimapStateMode) == 0x000008, "Member 'TedUtils_SetMinimapState::MinimapStateMode' has a wrong offset!");
static_assert(offsetof(TedUtils_SetMinimapState, InPlayerState) == 0x000010, "Member 'TedUtils_SetMinimapState::InPlayerState' has a wrong offset!");

// Function Tempest.TedUtils.SetPlayedGameIntro
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_SetPlayedGameIntro final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayedGameIntro;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetPlayedGameIntro) == 0x000008, "Wrong alignment on TedUtils_SetPlayedGameIntro");
static_assert(sizeof(TedUtils_SetPlayedGameIntro) == 0x000010, "Wrong size on TedUtils_SetPlayedGameIntro");
static_assert(offsetof(TedUtils_SetPlayedGameIntro, WorldContextObject) == 0x000000, "Member 'TedUtils_SetPlayedGameIntro::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SetPlayedGameIntro, bPlayedGameIntro) == 0x000008, "Member 'TedUtils_SetPlayedGameIntro::bPlayedGameIntro' has a wrong offset!");

// Function Tempest.TedUtils.SetUseInverseSquaredFalloff
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_SetUseInverseSquaredFalloff final
{
public:
	class UPointLightComponent*                   PointLight;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInverseSquaredFalloff;                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SetUseInverseSquaredFalloff) == 0x000008, "Wrong alignment on TedUtils_SetUseInverseSquaredFalloff");
static_assert(sizeof(TedUtils_SetUseInverseSquaredFalloff) == 0x000010, "Wrong size on TedUtils_SetUseInverseSquaredFalloff");
static_assert(offsetof(TedUtils_SetUseInverseSquaredFalloff, PointLight) == 0x000000, "Member 'TedUtils_SetUseInverseSquaredFalloff::PointLight' has a wrong offset!");
static_assert(offsetof(TedUtils_SetUseInverseSquaredFalloff, bUseInverseSquaredFalloff) == 0x000008, "Member 'TedUtils_SetUseInverseSquaredFalloff::bUseInverseSquaredFalloff' has a wrong offset!");

// Function Tempest.TedUtils.SpawnStructure
// 0x0038 (0x0038 - 0x0000)
struct TedUtils_SpawnStructure final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  Owner;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ATedStructureBase>          StructureClass;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedStructureBase*                      ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SpawnStructure) == 0x000008, "Wrong alignment on TedUtils_SpawnStructure");
static_assert(sizeof(TedUtils_SpawnStructure) == 0x000038, "Wrong size on TedUtils_SpawnStructure");
static_assert(offsetof(TedUtils_SpawnStructure, WorldContextObject) == 0x000000, "Member 'TedUtils_SpawnStructure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnStructure, Owner) == 0x000008, "Member 'TedUtils_SpawnStructure::Owner' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnStructure, StructureClass) == 0x000010, "Member 'TedUtils_SpawnStructure::StructureClass' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnStructure, SpawnLocation) == 0x000018, "Member 'TedUtils_SpawnStructure::SpawnLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnStructure, ReturnValue) == 0x000030, "Member 'TedUtils_SpawnStructure::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.SpawnUnit
// 0x0080 (0x0080 - 0x0000)
struct TedUtils_SpawnUnit final
{
public:
	TSubclassOf<class ATedUnitBase>               UnitClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPlayerState*                        Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SpawnUnit) == 0x000010, "Wrong alignment on TedUtils_SpawnUnit");
static_assert(sizeof(TedUtils_SpawnUnit) == 0x000080, "Wrong size on TedUtils_SpawnUnit");
static_assert(offsetof(TedUtils_SpawnUnit, UnitClass) == 0x000000, "Member 'TedUtils_SpawnUnit::UnitClass' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnit, Owner) == 0x000008, "Member 'TedUtils_SpawnUnit::Owner' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnit, SpawnTransform) == 0x000010, "Member 'TedUtils_SpawnUnit::SpawnTransform' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnit, ReturnValue) == 0x000070, "Member 'TedUtils_SpawnUnit::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.SpawnUnitForPlayer
// 0x0090 (0x0090 - 0x0000)
struct TedUtils_SpawnUnitForPlayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ATedUnitBase>               UnitClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETedPlayerID                                  PlayerID;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0020(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedUnitBase*                           ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_SpawnUnitForPlayer) == 0x000010, "Wrong alignment on TedUtils_SpawnUnitForPlayer");
static_assert(sizeof(TedUtils_SpawnUnitForPlayer) == 0x000090, "Wrong size on TedUtils_SpawnUnitForPlayer");
static_assert(offsetof(TedUtils_SpawnUnitForPlayer, WorldContextObject) == 0x000000, "Member 'TedUtils_SpawnUnitForPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnitForPlayer, UnitClass) == 0x000008, "Member 'TedUtils_SpawnUnitForPlayer::UnitClass' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnitForPlayer, PlayerID) == 0x000010, "Member 'TedUtils_SpawnUnitForPlayer::PlayerID' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnitForPlayer, SpawnTransform) == 0x000020, "Member 'TedUtils_SpawnUnitForPlayer::SpawnTransform' has a wrong offset!");
static_assert(offsetof(TedUtils_SpawnUnitForPlayer, ReturnValue) == 0x000080, "Member 'TedUtils_SpawnUnitForPlayer::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.SyncCurrentCommand
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_SyncCurrentCommand final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SyncCurrentCommand) == 0x000008, "Wrong alignment on TedUtils_SyncCurrentCommand");
static_assert(sizeof(TedUtils_SyncCurrentCommand) == 0x000010, "Wrong size on TedUtils_SyncCurrentCommand");
static_assert(offsetof(TedUtils_SyncCurrentCommand, CommandActors) == 0x000000, "Member 'TedUtils_SyncCurrentCommand::CommandActors' has a wrong offset!");

// Function Tempest.TedUtils.SyncCurrentCommands
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_SyncCurrentCommands final
{
public:
	TArray<class AActor*>                         CommandActors;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_SyncCurrentCommands) == 0x000008, "Wrong alignment on TedUtils_SyncCurrentCommands");
static_assert(sizeof(TedUtils_SyncCurrentCommands) == 0x000010, "Wrong size on TedUtils_SyncCurrentCommands");
static_assert(offsetof(TedUtils_SyncCurrentCommands, CommandActors) == 0x000000, "Member 'TedUtils_SyncCurrentCommands::CommandActors' has a wrong offset!");

// Function Tempest.TedUtils.TedGetDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_TedGetDefaultObject final
{
public:
	TSubclassOf<class UObject>                    Class_0;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_TedGetDefaultObject) == 0x000008, "Wrong alignment on TedUtils_TedGetDefaultObject");
static_assert(sizeof(TedUtils_TedGetDefaultObject) == 0x000010, "Wrong size on TedUtils_TedGetDefaultObject");
static_assert(offsetof(TedUtils_TedGetDefaultObject, Class_0) == 0x000000, "Member 'TedUtils_TedGetDefaultObject::Class_0' has a wrong offset!");
static_assert(offsetof(TedUtils_TedGetDefaultObject, ReturnValue) == 0x000008, "Member 'TedUtils_TedGetDefaultObject::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.TeleportCamera
// 0x0020 (0x0020 - 0x0000)
struct TedUtils_TeleportCamera final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_TeleportCamera) == 0x000008, "Wrong alignment on TedUtils_TeleportCamera");
static_assert(sizeof(TedUtils_TeleportCamera) == 0x000020, "Wrong size on TedUtils_TeleportCamera");
static_assert(offsetof(TedUtils_TeleportCamera, WorldContextObject) == 0x000000, "Member 'TedUtils_TeleportCamera::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_TeleportCamera, TargetLocation) == 0x000008, "Member 'TedUtils_TeleportCamera::TargetLocation' has a wrong offset!");

// Function Tempest.TedUtils.TestReachability
// 0x0050 (0x0050 - 0x0000)
struct TedUtils_TestReachability final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ARecastNavMesh*                   OverrideTargetNav;                                 // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedUtils_TestReachability) == 0x000008, "Wrong alignment on TedUtils_TestReachability");
static_assert(sizeof(TedUtils_TestReachability) == 0x000050, "Wrong size on TedUtils_TestReachability");
static_assert(offsetof(TedUtils_TestReachability, WorldContextObject) == 0x000000, "Member 'TedUtils_TestReachability::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedUtils_TestReachability, StartLocation) == 0x000008, "Member 'TedUtils_TestReachability::StartLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_TestReachability, EndLocation) == 0x000020, "Member 'TedUtils_TestReachability::EndLocation' has a wrong offset!");
static_assert(offsetof(TedUtils_TestReachability, FilterClass) == 0x000038, "Member 'TedUtils_TestReachability::FilterClass' has a wrong offset!");
static_assert(offsetof(TedUtils_TestReachability, OverrideTargetNav) == 0x000040, "Member 'TedUtils_TestReachability::OverrideTargetNav' has a wrong offset!");
static_assert(offsetof(TedUtils_TestReachability, ReturnValue) == 0x000048, "Member 'TedUtils_TestReachability::ReturnValue' has a wrong offset!");

// Function Tempest.TedUtils.UnsetConsoleVariable
// 0x0010 (0x0010 - 0x0000)
struct TedUtils_UnsetConsoleVariable final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_UnsetConsoleVariable) == 0x000008, "Wrong alignment on TedUtils_UnsetConsoleVariable");
static_assert(sizeof(TedUtils_UnsetConsoleVariable) == 0x000010, "Wrong size on TedUtils_UnsetConsoleVariable");
static_assert(offsetof(TedUtils_UnsetConsoleVariable, InName) == 0x000000, "Member 'TedUtils_UnsetConsoleVariable::InName' has a wrong offset!");

// Function Tempest.TedUtils.WaitForMovieToFinish
// 0x0008 (0x0008 - 0x0000)
struct TedUtils_WaitForMovieToFinish final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedUtils_WaitForMovieToFinish) == 0x000008, "Wrong alignment on TedUtils_WaitForMovieToFinish");
static_assert(sizeof(TedUtils_WaitForMovieToFinish) == 0x000008, "Wrong size on TedUtils_WaitForMovieToFinish");
static_assert(offsetof(TedUtils_WaitForMovieToFinish, WorldContextObject) == 0x000000, "Member 'TedUtils_WaitForMovieToFinish::WorldContextObject' has a wrong offset!");

// Function Tempest.TedVehicle_Harvester.SetResourceDepositSpeed
// 0x0004 (0x0004 - 0x0000)
struct TedVehicle_Harvester_SetResourceDepositSpeed final
{
public:
	int32                                         InResourceDepositSpeed;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_Harvester_SetResourceDepositSpeed) == 0x000004, "Wrong alignment on TedVehicle_Harvester_SetResourceDepositSpeed");
static_assert(sizeof(TedVehicle_Harvester_SetResourceDepositSpeed) == 0x000004, "Wrong size on TedVehicle_Harvester_SetResourceDepositSpeed");
static_assert(offsetof(TedVehicle_Harvester_SetResourceDepositSpeed, InResourceDepositSpeed) == 0x000000, "Member 'TedVehicle_Harvester_SetResourceDepositSpeed::InResourceDepositSpeed' has a wrong offset!");

// Function Tempest.TedVehicle_Harvester.SetResourceHarvestSpeed
// 0x0004 (0x0004 - 0x0000)
struct TedVehicle_Harvester_SetResourceHarvestSpeed final
{
public:
	int32                                         InResourceHarvestSpeed;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_Harvester_SetResourceHarvestSpeed) == 0x000004, "Wrong alignment on TedVehicle_Harvester_SetResourceHarvestSpeed");
static_assert(sizeof(TedVehicle_Harvester_SetResourceHarvestSpeed) == 0x000004, "Wrong size on TedVehicle_Harvester_SetResourceHarvestSpeed");
static_assert(offsetof(TedVehicle_Harvester_SetResourceHarvestSpeed, InResourceHarvestSpeed) == 0x000000, "Member 'TedVehicle_Harvester_SetResourceHarvestSpeed::InResourceHarvestSpeed' has a wrong offset!");

// Function Tempest.TedVehicle_Harvester.SetResourceMaxCapacity
// 0x0004 (0x0004 - 0x0000)
struct TedVehicle_Harvester_SetResourceMaxCapacity final
{
public:
	int32                                         InResourceMaxCapacity;                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_Harvester_SetResourceMaxCapacity) == 0x000004, "Wrong alignment on TedVehicle_Harvester_SetResourceMaxCapacity");
static_assert(sizeof(TedVehicle_Harvester_SetResourceMaxCapacity) == 0x000004, "Wrong size on TedVehicle_Harvester_SetResourceMaxCapacity");
static_assert(offsetof(TedVehicle_Harvester_SetResourceMaxCapacity, InResourceMaxCapacity) == 0x000000, "Member 'TedVehicle_Harvester_SetResourceMaxCapacity::InResourceMaxCapacity' has a wrong offset!");

// Function Tempest.TedVehicle_Harvester.K2_OnResourceChange
// 0x0004 (0x0004 - 0x0000)
struct TedVehicle_Harvester_K2_OnResourceChange final
{
public:
	float                                         ResourceToMaxCapacityPct;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_Harvester_K2_OnResourceChange) == 0x000004, "Wrong alignment on TedVehicle_Harvester_K2_OnResourceChange");
static_assert(sizeof(TedVehicle_Harvester_K2_OnResourceChange) == 0x000004, "Wrong size on TedVehicle_Harvester_K2_OnResourceChange");
static_assert(offsetof(TedVehicle_Harvester_K2_OnResourceChange, ResourceToMaxCapacityPct) == 0x000000, "Member 'TedVehicle_Harvester_K2_OnResourceChange::ResourceToMaxCapacityPct' has a wrong offset!");

// Function Tempest.TedVehicle_MobileRefinery.GetPawnContainer
// 0x0008 (0x0008 - 0x0000)
struct TedVehicle_MobileRefinery_GetPawnContainer final
{
public:
	class UTedPawnContainerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVehicle_MobileRefinery_GetPawnContainer) == 0x000008, "Wrong alignment on TedVehicle_MobileRefinery_GetPawnContainer");
static_assert(sizeof(TedVehicle_MobileRefinery_GetPawnContainer) == 0x000008, "Wrong size on TedVehicle_MobileRefinery_GetPawnContainer");
static_assert(offsetof(TedVehicle_MobileRefinery_GetPawnContainer, ReturnValue) == 0x000000, "Member 'TedVehicle_MobileRefinery_GetPawnContainer::ReturnValue' has a wrong offset!");

// Function Tempest.TedVetiDomeHelper.SetActive
// 0x0001 (0x0001 - 0x0000)
struct TedVetiDomeHelper_SetActive final
{
public:
	bool                                          bInActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedVetiDomeHelper_SetActive) == 0x000001, "Wrong alignment on TedVetiDomeHelper_SetActive");
static_assert(sizeof(TedVetiDomeHelper_SetActive) == 0x000001, "Wrong size on TedVetiDomeHelper_SetActive");
static_assert(offsetof(TedVetiDomeHelper_SetActive, bInActive) == 0x000000, "Member 'TedVetiDomeHelper_SetActive::bInActive' has a wrong offset!");

// Function Tempest.TedWeapon.OnPlayerStateOuterEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedWeapon_OnPlayerStateOuterEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWeapon_OnPlayerStateOuterEndPlay) == 0x000008, "Wrong alignment on TedWeapon_OnPlayerStateOuterEndPlay");
static_assert(sizeof(TedWeapon_OnPlayerStateOuterEndPlay) == 0x000010, "Wrong size on TedWeapon_OnPlayerStateOuterEndPlay");
static_assert(offsetof(TedWeapon_OnPlayerStateOuterEndPlay, Actor) == 0x000000, "Member 'TedWeapon_OnPlayerStateOuterEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(TedWeapon_OnPlayerStateOuterEndPlay, Reason) == 0x000008, "Member 'TedWeapon_OnPlayerStateOuterEndPlay::Reason' has a wrong offset!");

// Function Tempest.TedWeapon.CanAttackGround
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_CanAttackGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_CanAttackGround) == 0x000001, "Wrong alignment on TedWeapon_CanAttackGround");
static_assert(sizeof(TedWeapon_CanAttackGround) == 0x000001, "Wrong size on TedWeapon_CanAttackGround");
static_assert(offsetof(TedWeapon_CanAttackGround, ReturnValue) == 0x000000, "Member 'TedWeapon_CanAttackGround::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.CanRechargeAmmoAutomatically
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_CanRechargeAmmoAutomatically final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_CanRechargeAmmoAutomatically) == 0x000001, "Wrong alignment on TedWeapon_CanRechargeAmmoAutomatically");
static_assert(sizeof(TedWeapon_CanRechargeAmmoAutomatically) == 0x000001, "Wrong size on TedWeapon_CanRechargeAmmoAutomatically");
static_assert(offsetof(TedWeapon_CanRechargeAmmoAutomatically, ReturnValue) == 0x000000, "Member 'TedWeapon_CanRechargeAmmoAutomatically::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoCountMax
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoCountMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoCountMax) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoCountMax");
static_assert(sizeof(TedWeapon_GetAmmoCountMax) == 0x000004, "Wrong size on TedWeapon_GetAmmoCountMax");
static_assert(offsetof(TedWeapon_GetAmmoCountMax, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoCountMax::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoCountPerRecharge
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoCountPerRecharge final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoCountPerRecharge) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoCountPerRecharge");
static_assert(sizeof(TedWeapon_GetAmmoCountPerRecharge) == 0x000004, "Wrong size on TedWeapon_GetAmmoCountPerRecharge");
static_assert(offsetof(TedWeapon_GetAmmoCountPerRecharge, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoCountPerRecharge::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoCountStart
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoCountStart final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoCountStart) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoCountStart");
static_assert(sizeof(TedWeapon_GetAmmoCountStart) == 0x000004, "Wrong size on TedWeapon_GetAmmoCountStart");
static_assert(offsetof(TedWeapon_GetAmmoCountStart, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoCountStart::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoCountUse
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoCountUse final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoCountUse) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoCountUse");
static_assert(sizeof(TedWeapon_GetAmmoCountUse) == 0x000004, "Wrong size on TedWeapon_GetAmmoCountUse");
static_assert(offsetof(TedWeapon_GetAmmoCountUse, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoCountUse::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoRechargeCutoff
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoRechargeCutoff final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoRechargeCutoff) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoRechargeCutoff");
static_assert(sizeof(TedWeapon_GetAmmoRechargeCutoff) == 0x000004, "Wrong size on TedWeapon_GetAmmoRechargeCutoff");
static_assert(offsetof(TedWeapon_GetAmmoRechargeCutoff, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoRechargeCutoff::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAmmoRechargeTime
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAmmoRechargeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAmmoRechargeTime) == 0x000004, "Wrong alignment on TedWeapon_GetAmmoRechargeTime");
static_assert(sizeof(TedWeapon_GetAmmoRechargeTime) == 0x000004, "Wrong size on TedWeapon_GetAmmoRechargeTime");
static_assert(offsetof(TedWeapon_GetAmmoRechargeTime, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAmmoRechargeTime::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAttackCooldown
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAttackCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAttackCooldown) == 0x000004, "Wrong alignment on TedWeapon_GetAttackCooldown");
static_assert(sizeof(TedWeapon_GetAttackCooldown) == 0x000004, "Wrong size on TedWeapon_GetAttackCooldown");
static_assert(offsetof(TedWeapon_GetAttackCooldown, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAttackCooldown::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAttackGraceRange
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAttackGraceRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAttackGraceRange) == 0x000004, "Wrong alignment on TedWeapon_GetAttackGraceRange");
static_assert(sizeof(TedWeapon_GetAttackGraceRange) == 0x000004, "Wrong size on TedWeapon_GetAttackGraceRange");
static_assert(offsetof(TedWeapon_GetAttackGraceRange, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAttackGraceRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAttackRange
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAttackRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAttackRange) == 0x000004, "Wrong alignment on TedWeapon_GetAttackRange");
static_assert(sizeof(TedWeapon_GetAttackRange) == 0x000004, "Wrong size on TedWeapon_GetAttackRange");
static_assert(offsetof(TedWeapon_GetAttackRange, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAttackRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetAttackRangeThreshold
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetAttackRangeThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetAttackRangeThreshold) == 0x000004, "Wrong alignment on TedWeapon_GetAttackRangeThreshold");
static_assert(sizeof(TedWeapon_GetAttackRangeThreshold) == 0x000004, "Wrong size on TedWeapon_GetAttackRangeThreshold");
static_assert(offsetof(TedWeapon_GetAttackRangeThreshold, ReturnValue) == 0x000000, "Member 'TedWeapon_GetAttackRangeThreshold::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetConeDamageParams
// 0x0018 (0x0018 - 0x0000)
struct TedWeapon_GetConeDamageParams final
{
public:
	struct FConeDamageParams                      ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetConeDamageParams) == 0x000004, "Wrong alignment on TedWeapon_GetConeDamageParams");
static_assert(sizeof(TedWeapon_GetConeDamageParams) == 0x000018, "Wrong size on TedWeapon_GetConeDamageParams");
static_assert(offsetof(TedWeapon_GetConeDamageParams, ReturnValue) == 0x000000, "Member 'TedWeapon_GetConeDamageParams::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetDamageAmount
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetDamageAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetDamageAmount) == 0x000004, "Wrong alignment on TedWeapon_GetDamageAmount");
static_assert(sizeof(TedWeapon_GetDamageAmount) == 0x000004, "Wrong size on TedWeapon_GetDamageAmount");
static_assert(offsetof(TedWeapon_GetDamageAmount, ReturnValue) == 0x000000, "Member 'TedWeapon_GetDamageAmount::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetDamageKind
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_GetDamageKind final
{
public:
	EDamageKind                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetDamageKind) == 0x000001, "Wrong alignment on TedWeapon_GetDamageKind");
static_assert(sizeof(TedWeapon_GetDamageKind) == 0x000001, "Wrong size on TedWeapon_GetDamageKind");
static_assert(offsetof(TedWeapon_GetDamageKind, ReturnValue) == 0x000000, "Member 'TedWeapon_GetDamageKind::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetDamageType
// 0x0008 (0x0008 - 0x0000)
struct TedWeapon_GetDamageType final
{
public:
	TSubclassOf<class UTedDamageType>             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetDamageType) == 0x000008, "Wrong alignment on TedWeapon_GetDamageType");
static_assert(sizeof(TedWeapon_GetDamageType) == 0x000008, "Wrong size on TedWeapon_GetDamageType");
static_assert(offsetof(TedWeapon_GetDamageType, ReturnValue) == 0x000000, "Member 'TedWeapon_GetDamageType::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetDefinitionId
// 0x0008 (0x0008 - 0x0000)
struct TedWeapon_GetDefinitionId final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetDefinitionId) == 0x000004, "Wrong alignment on TedWeapon_GetDefinitionId");
static_assert(sizeof(TedWeapon_GetDefinitionId) == 0x000008, "Wrong size on TedWeapon_GetDefinitionId");
static_assert(offsetof(TedWeapon_GetDefinitionId, ReturnValue) == 0x000000, "Member 'TedWeapon_GetDefinitionId::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetEffectsToApplyOnDamage
// 0x0010 (0x0010 - 0x0000)
struct TedWeapon_GetEffectsToApplyOnDamage final
{
public:
	TArray<class UGameplayEffect*>                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetEffectsToApplyOnDamage) == 0x000008, "Wrong alignment on TedWeapon_GetEffectsToApplyOnDamage");
static_assert(sizeof(TedWeapon_GetEffectsToApplyOnDamage) == 0x000010, "Wrong size on TedWeapon_GetEffectsToApplyOnDamage");
static_assert(offsetof(TedWeapon_GetEffectsToApplyOnDamage, ReturnValue) == 0x000000, "Member 'TedWeapon_GetEffectsToApplyOnDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetGuardRange
// 0x0008 (0x0008 - 0x0000)
struct TedWeapon_GetGuardRange final
{
public:
	bool                                          bForAI;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetGuardRange) == 0x000004, "Wrong alignment on TedWeapon_GetGuardRange");
static_assert(sizeof(TedWeapon_GetGuardRange) == 0x000008, "Wrong size on TedWeapon_GetGuardRange");
static_assert(offsetof(TedWeapon_GetGuardRange, bForAI) == 0x000000, "Member 'TedWeapon_GetGuardRange::bForAI' has a wrong offset!");
static_assert(offsetof(TedWeapon_GetGuardRange, ReturnValue) == 0x000004, "Member 'TedWeapon_GetGuardRange::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetOwnedTags
// 0x0020 (0x0020 - 0x0000)
struct TedWeapon_GetOwnedTags final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetOwnedTags) == 0x000008, "Wrong alignment on TedWeapon_GetOwnedTags");
static_assert(sizeof(TedWeapon_GetOwnedTags) == 0x000020, "Wrong size on TedWeapon_GetOwnedTags");
static_assert(offsetof(TedWeapon_GetOwnedTags, ReturnValue) == 0x000000, "Member 'TedWeapon_GetOwnedTags::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetPointDamageAmount
// 0x0004 (0x0004 - 0x0000)
struct TedWeapon_GetPointDamageAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetPointDamageAmount) == 0x000004, "Wrong alignment on TedWeapon_GetPointDamageAmount");
static_assert(sizeof(TedWeapon_GetPointDamageAmount) == 0x000004, "Wrong size on TedWeapon_GetPointDamageAmount");
static_assert(offsetof(TedWeapon_GetPointDamageAmount, ReturnValue) == 0x000000, "Member 'TedWeapon_GetPointDamageAmount::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetProjectileClass
// 0x0008 (0x0008 - 0x0000)
struct TedWeapon_GetProjectileClass final
{
public:
	TSubclassOf<class ATedProjectile>             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetProjectileClass) == 0x000008, "Wrong alignment on TedWeapon_GetProjectileClass");
static_assert(sizeof(TedWeapon_GetProjectileClass) == 0x000008, "Wrong size on TedWeapon_GetProjectileClass");
static_assert(offsetof(TedWeapon_GetProjectileClass, ReturnValue) == 0x000000, "Member 'TedWeapon_GetProjectileClass::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetRadialDamageParams
// 0x0014 (0x0014 - 0x0000)
struct TedWeapon_GetRadialDamageParams final
{
public:
	struct FRadialDamageParams                    ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetRadialDamageParams) == 0x000004, "Wrong alignment on TedWeapon_GetRadialDamageParams");
static_assert(sizeof(TedWeapon_GetRadialDamageParams) == 0x000014, "Wrong size on TedWeapon_GetRadialDamageParams");
static_assert(offsetof(TedWeapon_GetRadialDamageParams, ReturnValue) == 0x000000, "Member 'TedWeapon_GetRadialDamageParams::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetSourceTagRequirements
// 0x0088 (0x0088 - 0x0000)
struct TedWeapon_GetSourceTagRequirements final
{
public:
	struct FGameplayTagRequirements               ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetSourceTagRequirements) == 0x000008, "Wrong alignment on TedWeapon_GetSourceTagRequirements");
static_assert(sizeof(TedWeapon_GetSourceTagRequirements) == 0x000088, "Wrong size on TedWeapon_GetSourceTagRequirements");
static_assert(offsetof(TedWeapon_GetSourceTagRequirements, ReturnValue) == 0x000000, "Member 'TedWeapon_GetSourceTagRequirements::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetTargetingDomains
// 0x0020 (0x0020 - 0x0000)
struct TedWeapon_GetTargetingDomains final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetTargetingDomains) == 0x000008, "Wrong alignment on TedWeapon_GetTargetingDomains");
static_assert(sizeof(TedWeapon_GetTargetingDomains) == 0x000020, "Wrong size on TedWeapon_GetTargetingDomains");
static_assert(offsetof(TedWeapon_GetTargetingDomains, ReturnValue) == 0x000000, "Member 'TedWeapon_GetTargetingDomains::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetTargetTagRequirements
// 0x0088 (0x0088 - 0x0000)
struct TedWeapon_GetTargetTagRequirements final
{
public:
	struct FGameplayTagRequirements               ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetTargetTagRequirements) == 0x000008, "Wrong alignment on TedWeapon_GetTargetTagRequirements");
static_assert(sizeof(TedWeapon_GetTargetTagRequirements) == 0x000088, "Wrong size on TedWeapon_GetTargetTagRequirements");
static_assert(offsetof(TedWeapon_GetTargetTagRequirements, ReturnValue) == 0x000000, "Member 'TedWeapon_GetTargetTagRequirements::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.GetWeaponPriority
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_GetWeaponPriority final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_GetWeaponPriority) == 0x000001, "Wrong alignment on TedWeapon_GetWeaponPriority");
static_assert(sizeof(TedWeapon_GetWeaponPriority) == 0x000001, "Wrong size on TedWeapon_GetWeaponPriority");
static_assert(offsetof(TedWeapon_GetWeaponPriority, ReturnValue) == 0x000000, "Member 'TedWeapon_GetWeaponPriority::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.HasAutoAttack
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_HasAutoAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_HasAutoAttack) == 0x000001, "Wrong alignment on TedWeapon_HasAutoAttack");
static_assert(sizeof(TedWeapon_HasAutoAttack) == 0x000001, "Wrong size on TedWeapon_HasAutoAttack");
static_assert(offsetof(TedWeapon_HasAutoAttack, ReturnValue) == 0x000000, "Member 'TedWeapon_HasAutoAttack::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.HasFakeWeapon
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_HasFakeWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_HasFakeWeapon) == 0x000001, "Wrong alignment on TedWeapon_HasFakeWeapon");
static_assert(sizeof(TedWeapon_HasFakeWeapon) == 0x000001, "Wrong size on TedWeapon_HasFakeWeapon");
static_assert(offsetof(TedWeapon_HasFakeWeapon, ReturnValue) == 0x000000, "Member 'TedWeapon_HasFakeWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.IsDealingFullDamageToTarget
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_IsDealingFullDamageToTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_IsDealingFullDamageToTarget) == 0x000001, "Wrong alignment on TedWeapon_IsDealingFullDamageToTarget");
static_assert(sizeof(TedWeapon_IsDealingFullDamageToTarget) == 0x000001, "Wrong size on TedWeapon_IsDealingFullDamageToTarget");
static_assert(offsetof(TedWeapon_IsDealingFullDamageToTarget, ReturnValue) == 0x000000, "Member 'TedWeapon_IsDealingFullDamageToTarget::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.IsDealingInstantDamage
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_IsDealingInstantDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_IsDealingInstantDamage) == 0x000001, "Wrong alignment on TedWeapon_IsDealingInstantDamage");
static_assert(sizeof(TedWeapon_IsDealingInstantDamage) == 0x000001, "Wrong size on TedWeapon_IsDealingInstantDamage");
static_assert(offsetof(TedWeapon_IsDealingInstantDamage, ReturnValue) == 0x000000, "Member 'TedWeapon_IsDealingInstantDamage::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.IsMeleeWeapon
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_IsMeleeWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_IsMeleeWeapon) == 0x000001, "Wrong alignment on TedWeapon_IsMeleeWeapon");
static_assert(sizeof(TedWeapon_IsMeleeWeapon) == 0x000001, "Wrong size on TedWeapon_IsMeleeWeapon");
static_assert(offsetof(TedWeapon_IsMeleeWeapon, ReturnValue) == 0x000000, "Member 'TedWeapon_IsMeleeWeapon::ReturnValue' has a wrong offset!");

// Function Tempest.TedWeapon.ShouldApplyRadialDamageToFriendlies
// 0x0001 (0x0001 - 0x0000)
struct TedWeapon_ShouldApplyRadialDamageToFriendlies final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWeapon_ShouldApplyRadialDamageToFriendlies) == 0x000001, "Wrong alignment on TedWeapon_ShouldApplyRadialDamageToFriendlies");
static_assert(sizeof(TedWeapon_ShouldApplyRadialDamageToFriendlies) == 0x000001, "Wrong size on TedWeapon_ShouldApplyRadialDamageToFriendlies");
static_assert(offsetof(TedWeapon_ShouldApplyRadialDamageToFriendlies, ReturnValue) == 0x000000, "Member 'TedWeapon_ShouldApplyRadialDamageToFriendlies::ReturnValue' has a wrong offset!");

// Function Tempest.TedWindEffectManager.RequestWindEffect
// 0x0028 (0x0028 - 0x0000)
struct TedWindEffectManager_RequestWindEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTedWindEffectConfig*             WindConfig;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWindEffectManager_RequestWindEffect) == 0x000008, "Wrong alignment on TedWindEffectManager_RequestWindEffect");
static_assert(sizeof(TedWindEffectManager_RequestWindEffect) == 0x000028, "Wrong size on TedWindEffectManager_RequestWindEffect");
static_assert(offsetof(TedWindEffectManager_RequestWindEffect, WorldContextObject) == 0x000000, "Member 'TedWindEffectManager_RequestWindEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TedWindEffectManager_RequestWindEffect, WindConfig) == 0x000008, "Member 'TedWindEffectManager_RequestWindEffect::WindConfig' has a wrong offset!");
static_assert(offsetof(TedWindEffectManager_RequestWindEffect, Location) == 0x000010, "Member 'TedWindEffectManager_RequestWindEffect::Location' has a wrong offset!");

// Function Tempest.TedWorkerButton_TempestWorkers.OnUpdateIdleState
// 0x0001 (0x0001 - 0x0000)
struct TedWorkerButton_TempestWorkers_OnUpdateIdleState final
{
public:
	bool                                          NewIdleState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkerButton_TempestWorkers_OnUpdateIdleState) == 0x000001, "Wrong alignment on TedWorkerButton_TempestWorkers_OnUpdateIdleState");
static_assert(sizeof(TedWorkerButton_TempestWorkers_OnUpdateIdleState) == 0x000001, "Wrong size on TedWorkerButton_TempestWorkers_OnUpdateIdleState");
static_assert(offsetof(TedWorkerButton_TempestWorkers_OnUpdateIdleState, NewIdleState) == 0x000000, "Member 'TedWorkerButton_TempestWorkers_OnUpdateIdleState::NewIdleState' has a wrong offset!");

// Function Tempest.TedWorkerSlot.GetParentWorkerWidget
// 0x0008 (0x0008 - 0x0000)
struct TedWorkerSlot_GetParentWorkerWidget final
{
public:
	class UTedWorkersWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkerSlot_GetParentWorkerWidget) == 0x000008, "Wrong alignment on TedWorkerSlot_GetParentWorkerWidget");
static_assert(sizeof(TedWorkerSlot_GetParentWorkerWidget) == 0x000008, "Wrong size on TedWorkerSlot_GetParentWorkerWidget");
static_assert(offsetof(TedWorkerSlot_GetParentWorkerWidget, ReturnValue) == 0x000000, "Member 'TedWorkerSlot_GetParentWorkerWidget::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorkerSlot.OnWorkerHealthChanged
// 0x0008 (0x0008 - 0x0000)
struct TedWorkerSlot_OnWorkerHealthChanged final
{
public:
	float                                         OldValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkerSlot_OnWorkerHealthChanged) == 0x000004, "Wrong alignment on TedWorkerSlot_OnWorkerHealthChanged");
static_assert(sizeof(TedWorkerSlot_OnWorkerHealthChanged) == 0x000008, "Wrong size on TedWorkerSlot_OnWorkerHealthChanged");
static_assert(offsetof(TedWorkerSlot_OnWorkerHealthChanged, OldValue) == 0x000000, "Member 'TedWorkerSlot_OnWorkerHealthChanged::OldValue' has a wrong offset!");
static_assert(offsetof(TedWorkerSlot_OnWorkerHealthChanged, NewValue) == 0x000004, "Member 'TedWorkerSlot_OnWorkerHealthChanged::NewValue' has a wrong offset!");

// Function Tempest.TedWorkersWidget_TempestWorkers.GetState_TempestWorkerIdle
// 0x0001 (0x0001 - 0x0000)
struct TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle final
{
public:
	ETedContentSlotState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle) == 0x000001, "Wrong alignment on TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle");
static_assert(sizeof(TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle) == 0x000001, "Wrong size on TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle");
static_assert(offsetof(TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle, ReturnValue) == 0x000000, "Member 'TedWorkersWidget_TempestWorkers_GetState_TempestWorkerIdle::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorkersWidget_TempestWorkers.GetCapacityFill
// 0x0010 (0x0010 - 0x0000)
struct TedWorkersWidget_TempestWorkers_GetCapacityFill final
{
public:
	const class ATedPawn*                         Pawn;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorkersWidget_TempestWorkers_GetCapacityFill) == 0x000008, "Wrong alignment on TedWorkersWidget_TempestWorkers_GetCapacityFill");
static_assert(sizeof(TedWorkersWidget_TempestWorkers_GetCapacityFill) == 0x000010, "Wrong size on TedWorkersWidget_TempestWorkers_GetCapacityFill");
static_assert(offsetof(TedWorkersWidget_TempestWorkers_GetCapacityFill, Pawn) == 0x000000, "Member 'TedWorkersWidget_TempestWorkers_GetCapacityFill::Pawn' has a wrong offset!");
static_assert(offsetof(TedWorkersWidget_TempestWorkers_GetCapacityFill, ReturnValue) == 0x000008, "Member 'TedWorkersWidget_TempestWorkers_GetCapacityFill::ReturnValue' has a wrong offset!");

// Function Tempest.TedWorldHintActor.OnTargetActorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct TedWorldHintActor_OnTargetActorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorldHintActor_OnTargetActorEndPlay) == 0x000008, "Wrong alignment on TedWorldHintActor_OnTargetActorEndPlay");
static_assert(sizeof(TedWorldHintActor_OnTargetActorEndPlay) == 0x000010, "Wrong size on TedWorldHintActor_OnTargetActorEndPlay");
static_assert(offsetof(TedWorldHintActor_OnTargetActorEndPlay, Actor) == 0x000000, "Member 'TedWorldHintActor_OnTargetActorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(TedWorldHintActor_OnTargetActorEndPlay, EndPlayReason) == 0x000008, "Member 'TedWorldHintActor_OnTargetActorEndPlay::EndPlayReason' has a wrong offset!");

// Function Tempest.TedWorldHintActor.OnTargetPawnDeath
// 0x0008 (0x0008 - 0x0000)
struct TedWorldHintActor_OnTargetPawnDeath final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorldHintActor_OnTargetPawnDeath) == 0x000008, "Wrong alignment on TedWorldHintActor_OnTargetPawnDeath");
static_assert(sizeof(TedWorldHintActor_OnTargetPawnDeath) == 0x000008, "Wrong size on TedWorldHintActor_OnTargetPawnDeath");
static_assert(offsetof(TedWorldHintActor_OnTargetPawnDeath, Pawn) == 0x000000, "Member 'TedWorldHintActor_OnTargetPawnDeath::Pawn' has a wrong offset!");

// Function Tempest.TedWorldHintActor.OnTargetPawnVisibilityChanged
// 0x0010 (0x0010 - 0x0000)
struct TedWorldHintActor_OnTargetPawnVisibilityChanged final
{
public:
	class ATedPawn*                               Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TedWorldHintActor_OnTargetPawnVisibilityChanged) == 0x000008, "Wrong alignment on TedWorldHintActor_OnTargetPawnVisibilityChanged");
static_assert(sizeof(TedWorldHintActor_OnTargetPawnVisibilityChanged) == 0x000010, "Wrong size on TedWorldHintActor_OnTargetPawnVisibilityChanged");
static_assert(offsetof(TedWorldHintActor_OnTargetPawnVisibilityChanged, Pawn) == 0x000000, "Member 'TedWorldHintActor_OnTargetPawnVisibilityChanged::Pawn' has a wrong offset!");
static_assert(offsetof(TedWorldHintActor_OnTargetPawnVisibilityChanged, bIsVisible) == 0x000008, "Member 'TedWorldHintActor_OnTargetPawnVisibilityChanged::bIsVisible' has a wrong offset!");

// Function Tempest.TedWorldHintActor.OnTargetPickedUp
// 0x0010 (0x0010 - 0x0000)
struct TedWorldHintActor_OnTargetPickedUp final
{
public:
	class ATedUnitBase*                           PickedUpBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATedPickupActor*                        PickupActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorldHintActor_OnTargetPickedUp) == 0x000008, "Wrong alignment on TedWorldHintActor_OnTargetPickedUp");
static_assert(sizeof(TedWorldHintActor_OnTargetPickedUp) == 0x000010, "Wrong size on TedWorldHintActor_OnTargetPickedUp");
static_assert(offsetof(TedWorldHintActor_OnTargetPickedUp, PickedUpBy) == 0x000000, "Member 'TedWorldHintActor_OnTargetPickedUp::PickedUpBy' has a wrong offset!");
static_assert(offsetof(TedWorldHintActor_OnTargetPickedUp, PickupActor) == 0x000008, "Member 'TedWorldHintActor_OnTargetPickedUp::PickupActor' has a wrong offset!");

// Function Tempest.TedWorldHintActor.SetHintData
// 0x0010 (0x0010 - 0x0000)
struct TedWorldHintActor_SetHintData final
{
public:
	class UTedHintsAsset*                         HintData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachedToActor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorldHintActor_SetHintData) == 0x000008, "Wrong alignment on TedWorldHintActor_SetHintData");
static_assert(sizeof(TedWorldHintActor_SetHintData) == 0x000010, "Wrong size on TedWorldHintActor_SetHintData");
static_assert(offsetof(TedWorldHintActor_SetHintData, HintData) == 0x000000, "Member 'TedWorldHintActor_SetHintData::HintData' has a wrong offset!");
static_assert(offsetof(TedWorldHintActor_SetHintData, AttachedToActor) == 0x000008, "Member 'TedWorldHintActor_SetHintData::AttachedToActor' has a wrong offset!");

// Function Tempest.TedWorldHintWidget.SetHintData
// 0x0008 (0x0008 - 0x0000)
struct TedWorldHintWidget_SetHintData final
{
public:
	class UTedHintsAsset*                         HintData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TedWorldHintWidget_SetHintData) == 0x000008, "Wrong alignment on TedWorldHintWidget_SetHintData");
static_assert(sizeof(TedWorldHintWidget_SetHintData) == 0x000008, "Wrong size on TedWorldHintWidget_SetHintData");
static_assert(offsetof(TedWorldHintWidget_SetHintData, HintData) == 0x000000, "Member 'TedWorldHintWidget_SetHintData::HintData' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.AddElementComponent
// 0x0008 (0x0008 - 0x0000)
struct TempestFieldElementProxy_AddElementComponent final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_AddElementComponent) == 0x000008, "Wrong alignment on TempestFieldElementProxy_AddElementComponent");
static_assert(sizeof(TempestFieldElementProxy_AddElementComponent) == 0x000008, "Wrong size on TempestFieldElementProxy_AddElementComponent");
static_assert(offsetof(TempestFieldElementProxy_AddElementComponent, Comp) == 0x000000, "Member 'TempestFieldElementProxy_AddElementComponent::Comp' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.AddElementComponentOfClass
// 0x0080 (0x0080 - 0x0000)
struct TempestFieldElementProxy_AddElementComponentOfClass final
{
public:
	TSubclassOf<class USceneComponent>            CompClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldElementProxy_AddElementComponentOfClass) == 0x000010, "Wrong alignment on TempestFieldElementProxy_AddElementComponentOfClass");
static_assert(sizeof(TempestFieldElementProxy_AddElementComponentOfClass) == 0x000080, "Wrong size on TempestFieldElementProxy_AddElementComponentOfClass");
static_assert(offsetof(TempestFieldElementProxy_AddElementComponentOfClass, CompClass) == 0x000000, "Member 'TempestFieldElementProxy_AddElementComponentOfClass::CompClass' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_AddElementComponentOfClass, Transform) == 0x000010, "Member 'TempestFieldElementProxy_AddElementComponentOfClass::Transform' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_AddElementComponentOfClass, ReturnValue) == 0x000070, "Member 'TempestFieldElementProxy_AddElementComponentOfClass::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.AddElementSMInstance
// 0x00F0 (0x00F0 - 0x0000)
struct TempestFieldElementProxy_AddElementSMInstance final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0060)(ConstParm, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCustomDataFloats;                               // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0xC];                                       // 0x0074(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldTileElementISMData               ReturnValue;                                       // 0x0080(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_AddElementSMInstance) == 0x000010, "Wrong alignment on TempestFieldElementProxy_AddElementSMInstance");
static_assert(sizeof(TempestFieldElementProxy_AddElementSMInstance) == 0x0000F0, "Wrong size on TempestFieldElementProxy_AddElementSMInstance");
static_assert(offsetof(TempestFieldElementProxy_AddElementSMInstance, StaticMesh) == 0x000000, "Member 'TempestFieldElementProxy_AddElementSMInstance::StaticMesh' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_AddElementSMInstance, Transform) == 0x000010, "Member 'TempestFieldElementProxy_AddElementSMInstance::Transform' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_AddElementSMInstance, NumCustomDataFloats) == 0x000070, "Member 'TempestFieldElementProxy_AddElementSMInstance::NumCustomDataFloats' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_AddElementSMInstance, ReturnValue) == 0x000080, "Member 'TempestFieldElementProxy_AddElementSMInstance::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementComponent
// 0x0010 (0x0010 - 0x0000)
struct TempestFieldElementProxy_GetElementComponent final
{
public:
	TSubclassOf<class USceneComponent>            CompClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementComponent) == 0x000008, "Wrong alignment on TempestFieldElementProxy_GetElementComponent");
static_assert(sizeof(TempestFieldElementProxy_GetElementComponent) == 0x000010, "Wrong size on TempestFieldElementProxy_GetElementComponent");
static_assert(offsetof(TempestFieldElementProxy_GetElementComponent, CompClass) == 0x000000, "Member 'TempestFieldElementProxy_GetElementComponent::CompClass' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_GetElementComponent, ReturnValue) == 0x000008, "Member 'TempestFieldElementProxy_GetElementComponent::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementComponents
// 0x0018 (0x0018 - 0x0000)
struct TempestFieldElementProxy_GetElementComponents final
{
public:
	TSubclassOf<class USceneComponent>            CompClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementComponents) == 0x000008, "Wrong alignment on TempestFieldElementProxy_GetElementComponents");
static_assert(sizeof(TempestFieldElementProxy_GetElementComponents) == 0x000018, "Wrong size on TempestFieldElementProxy_GetElementComponents");
static_assert(offsetof(TempestFieldElementProxy_GetElementComponents, CompClass) == 0x000000, "Member 'TempestFieldElementProxy_GetElementComponents::CompClass' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_GetElementComponents, ReturnValue) == 0x000008, "Member 'TempestFieldElementProxy_GetElementComponents::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementCurrentStage
// 0x0001 (0x0001 - 0x0000)
struct TempestFieldElementProxy_GetElementCurrentStage final
{
public:
	ETempestFieldElementStage                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementCurrentStage) == 0x000001, "Wrong alignment on TempestFieldElementProxy_GetElementCurrentStage");
static_assert(sizeof(TempestFieldElementProxy_GetElementCurrentStage) == 0x000001, "Wrong size on TempestFieldElementProxy_GetElementCurrentStage");
static_assert(offsetof(TempestFieldElementProxy_GetElementCurrentStage, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementCurrentStage::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementNextStage
// 0x0001 (0x0001 - 0x0000)
struct TempestFieldElementProxy_GetElementNextStage final
{
public:
	ETempestFieldElementStage                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementNextStage) == 0x000001, "Wrong alignment on TempestFieldElementProxy_GetElementNextStage");
static_assert(sizeof(TempestFieldElementProxy_GetElementNextStage) == 0x000001, "Wrong size on TempestFieldElementProxy_GetElementNextStage");
static_assert(offsetof(TempestFieldElementProxy_GetElementNextStage, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementNextStage::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementRandomTransforms
// 0x0010 (0x0010 - 0x0000)
struct TempestFieldElementProxy_GetElementRandomTransforms final
{
public:
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementRandomTransforms) == 0x000008, "Wrong alignment on TempestFieldElementProxy_GetElementRandomTransforms");
static_assert(sizeof(TempestFieldElementProxy_GetElementRandomTransforms) == 0x000010, "Wrong size on TempestFieldElementProxy_GetElementRandomTransforms");
static_assert(offsetof(TempestFieldElementProxy_GetElementRandomTransforms, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementRandomTransforms::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementSMInstance
// 0x0080 (0x0080 - 0x0000)
struct TempestFieldElementProxy_GetElementSMInstance final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldTileElementISMData               ReturnValue;                                       // 0x0010(0x0070)(Parm, OutParm, ReturnParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementSMInstance) == 0x000010, "Wrong alignment on TempestFieldElementProxy_GetElementSMInstance");
static_assert(sizeof(TempestFieldElementProxy_GetElementSMInstance) == 0x000080, "Wrong size on TempestFieldElementProxy_GetElementSMInstance");
static_assert(offsetof(TempestFieldElementProxy_GetElementSMInstance, InstanceIndex) == 0x000000, "Member 'TempestFieldElementProxy_GetElementSMInstance::InstanceIndex' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_GetElementSMInstance, ReturnValue) == 0x000010, "Member 'TempestFieldElementProxy_GetElementSMInstance::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementSMInstanceCount
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldElementProxy_GetElementSMInstanceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementSMInstanceCount) == 0x000004, "Wrong alignment on TempestFieldElementProxy_GetElementSMInstanceCount");
static_assert(sizeof(TempestFieldElementProxy_GetElementSMInstanceCount) == 0x000004, "Wrong size on TempestFieldElementProxy_GetElementSMInstanceCount");
static_assert(offsetof(TempestFieldElementProxy_GetElementSMInstanceCount, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementSMInstanceCount::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementSMInstances
// 0x0010 (0x0010 - 0x0000)
struct TempestFieldElementProxy_GetElementSMInstances final
{
public:
	TArray<struct FFieldTileElementISMData>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementSMInstances) == 0x000008, "Wrong alignment on TempestFieldElementProxy_GetElementSMInstances");
static_assert(sizeof(TempestFieldElementProxy_GetElementSMInstances) == 0x000010, "Wrong size on TempestFieldElementProxy_GetElementSMInstances");
static_assert(offsetof(TempestFieldElementProxy_GetElementSMInstances, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementSMInstances::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementTransform
// 0x0060 (0x0060 - 0x0000)
struct TempestFieldElementProxy_GetElementTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementTransform) == 0x000010, "Wrong alignment on TempestFieldElementProxy_GetElementTransform");
static_assert(sizeof(TempestFieldElementProxy_GetElementTransform) == 0x000060, "Wrong size on TempestFieldElementProxy_GetElementTransform");
static_assert(offsetof(TempestFieldElementProxy_GetElementTransform, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementTransform::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementTransitionData
// 0x0008 (0x0008 - 0x0000)
struct TempestFieldElementProxy_GetElementTransitionData final
{
public:
	float                                         OutProgress;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     OutFromStage;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     OutToStage;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldElementProxy_GetElementTransitionData) == 0x000004, "Wrong alignment on TempestFieldElementProxy_GetElementTransitionData");
static_assert(sizeof(TempestFieldElementProxy_GetElementTransitionData) == 0x000008, "Wrong size on TempestFieldElementProxy_GetElementTransitionData");
static_assert(offsetof(TempestFieldElementProxy_GetElementTransitionData, OutProgress) == 0x000000, "Member 'TempestFieldElementProxy_GetElementTransitionData::OutProgress' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_GetElementTransitionData, OutFromStage) == 0x000004, "Member 'TempestFieldElementProxy_GetElementTransitionData::OutFromStage' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_GetElementTransitionData, OutToStage) == 0x000005, "Member 'TempestFieldElementProxy_GetElementTransitionData::OutToStage' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.GetElementTransitionProgress
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldElementProxy_GetElementTransitionProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_GetElementTransitionProgress) == 0x000004, "Wrong alignment on TempestFieldElementProxy_GetElementTransitionProgress");
static_assert(sizeof(TempestFieldElementProxy_GetElementTransitionProgress) == 0x000004, "Wrong size on TempestFieldElementProxy_GetElementTransitionProgress");
static_assert(offsetof(TempestFieldElementProxy_GetElementTransitionProgress, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_GetElementTransitionProgress::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.IsGeneratedInEditor
// 0x0001 (0x0001 - 0x0000)
struct TempestFieldElementProxy_IsGeneratedInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_IsGeneratedInEditor) == 0x000001, "Wrong alignment on TempestFieldElementProxy_IsGeneratedInEditor");
static_assert(sizeof(TempestFieldElementProxy_IsGeneratedInEditor) == 0x000001, "Wrong size on TempestFieldElementProxy_IsGeneratedInEditor");
static_assert(offsetof(TempestFieldElementProxy_IsGeneratedInEditor, ReturnValue) == 0x000000, "Member 'TempestFieldElementProxy_IsGeneratedInEditor::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.K2_BeginTransition
// 0x0002 (0x0002 - 0x0000)
struct TempestFieldElementProxy_K2_BeginTransition final
{
public:
	ETempestFieldElementStage                     PrevStage;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     NextStage;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_K2_BeginTransition) == 0x000001, "Wrong alignment on TempestFieldElementProxy_K2_BeginTransition");
static_assert(sizeof(TempestFieldElementProxy_K2_BeginTransition) == 0x000002, "Wrong size on TempestFieldElementProxy_K2_BeginTransition");
static_assert(offsetof(TempestFieldElementProxy_K2_BeginTransition, PrevStage) == 0x000000, "Member 'TempestFieldElementProxy_K2_BeginTransition::PrevStage' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_K2_BeginTransition, NextStage) == 0x000001, "Member 'TempestFieldElementProxy_K2_BeginTransition::NextStage' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.K2_EndTransition
// 0x0002 (0x0002 - 0x0000)
struct TempestFieldElementProxy_K2_EndTransition final
{
public:
	ETempestFieldElementStage                     PrevStage;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     NextStage;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_K2_EndTransition) == 0x000001, "Wrong alignment on TempestFieldElementProxy_K2_EndTransition");
static_assert(sizeof(TempestFieldElementProxy_K2_EndTransition) == 0x000002, "Wrong size on TempestFieldElementProxy_K2_EndTransition");
static_assert(offsetof(TempestFieldElementProxy_K2_EndTransition, PrevStage) == 0x000000, "Member 'TempestFieldElementProxy_K2_EndTransition::PrevStage' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_K2_EndTransition, NextStage) == 0x000001, "Member 'TempestFieldElementProxy_K2_EndTransition::NextStage' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.K2_InitializeElement
// 0x0008 (0x0008 - 0x0000)
struct TempestFieldElementProxy_K2_InitializeElement final
{
public:
	struct FRandomStream                          RandomStream;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_K2_InitializeElement) == 0x000004, "Wrong alignment on TempestFieldElementProxy_K2_InitializeElement");
static_assert(sizeof(TempestFieldElementProxy_K2_InitializeElement) == 0x000008, "Wrong size on TempestFieldElementProxy_K2_InitializeElement");
static_assert(offsetof(TempestFieldElementProxy_K2_InitializeElement, RandomStream) == 0x000000, "Member 'TempestFieldElementProxy_K2_InitializeElement::RandomStream' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.K2_ProcessTransition
// 0x000C (0x000C - 0x0000)
struct TempestFieldElementProxy_K2_ProcessTransition final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     PrevStage;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETempestFieldElementStage                     NextStage;                                         // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldElementProxy_K2_ProcessTransition) == 0x000004, "Wrong alignment on TempestFieldElementProxy_K2_ProcessTransition");
static_assert(sizeof(TempestFieldElementProxy_K2_ProcessTransition) == 0x00000C, "Wrong size on TempestFieldElementProxy_K2_ProcessTransition");
static_assert(offsetof(TempestFieldElementProxy_K2_ProcessTransition, Progress) == 0x000000, "Member 'TempestFieldElementProxy_K2_ProcessTransition::Progress' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_K2_ProcessTransition, DeltaTime) == 0x000004, "Member 'TempestFieldElementProxy_K2_ProcessTransition::DeltaTime' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_K2_ProcessTransition, PrevStage) == 0x000008, "Member 'TempestFieldElementProxy_K2_ProcessTransition::PrevStage' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_K2_ProcessTransition, NextStage) == 0x000009, "Member 'TempestFieldElementProxy_K2_ProcessTransition::NextStage' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.MarkComponentRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct TempestFieldElementProxy_MarkComponentRenderStateDirty final
{
public:
	class UPrimitiveComponent*                    PrimComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_MarkComponentRenderStateDirty) == 0x000008, "Wrong alignment on TempestFieldElementProxy_MarkComponentRenderStateDirty");
static_assert(sizeof(TempestFieldElementProxy_MarkComponentRenderStateDirty) == 0x000008, "Wrong size on TempestFieldElementProxy_MarkComponentRenderStateDirty");
static_assert(offsetof(TempestFieldElementProxy_MarkComponentRenderStateDirty, PrimComp) == 0x000000, "Member 'TempestFieldElementProxy_MarkComponentRenderStateDirty::PrimComp' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.RemoveAllElementComponents
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldElementProxy_RemoveAllElementComponents final
{
public:
	float                                         DestroyDelay;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldElementProxy_RemoveAllElementComponents) == 0x000004, "Wrong alignment on TempestFieldElementProxy_RemoveAllElementComponents");
static_assert(sizeof(TempestFieldElementProxy_RemoveAllElementComponents) == 0x000004, "Wrong size on TempestFieldElementProxy_RemoveAllElementComponents");
static_assert(offsetof(TempestFieldElementProxy_RemoveAllElementComponents, DestroyDelay) == 0x000000, "Member 'TempestFieldElementProxy_RemoveAllElementComponents::DestroyDelay' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.RemoveElementComponent
// 0x0010 (0x0010 - 0x0000)
struct TempestFieldElementProxy_RemoveElementComponent final
{
public:
	class USceneComponent*                        Comp;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestroyDelay;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldElementProxy_RemoveElementComponent) == 0x000008, "Wrong alignment on TempestFieldElementProxy_RemoveElementComponent");
static_assert(sizeof(TempestFieldElementProxy_RemoveElementComponent) == 0x000010, "Wrong size on TempestFieldElementProxy_RemoveElementComponent");
static_assert(offsetof(TempestFieldElementProxy_RemoveElementComponent, Comp) == 0x000000, "Member 'TempestFieldElementProxy_RemoveElementComponent::Comp' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_RemoveElementComponent, DestroyDelay) == 0x000008, "Member 'TempestFieldElementProxy_RemoveElementComponent::DestroyDelay' has a wrong offset!");

// Function Tempest.TempestFieldElementProxy.RemoveElementComponents
// 0x0010 (0x0010 - 0x0000)
struct TempestFieldElementProxy_RemoveElementComponents final
{
public:
	TSubclassOf<class USceneComponent>            CompClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestroyDelay;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldElementProxy_RemoveElementComponents) == 0x000008, "Wrong alignment on TempestFieldElementProxy_RemoveElementComponents");
static_assert(sizeof(TempestFieldElementProxy_RemoveElementComponents) == 0x000010, "Wrong size on TempestFieldElementProxy_RemoveElementComponents");
static_assert(offsetof(TempestFieldElementProxy_RemoveElementComponents, CompClass) == 0x000000, "Member 'TempestFieldElementProxy_RemoveElementComponents::CompClass' has a wrong offset!");
static_assert(offsetof(TempestFieldElementProxy_RemoveElementComponents, DestroyDelay) == 0x000008, "Member 'TempestFieldElementProxy_RemoveElementComponents::DestroyDelay' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetClosestUnclaimedResourceTile
// 0x0048 (0x0048 - 0x0000)
struct TempestFieldVolume_GetClosestUnclaimedResourceTile final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutClosestLocation;                                // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTestReachability;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ATedUnitBase*                     InUnit;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldVolume_GetClosestUnclaimedResourceTile) == 0x000008, "Wrong alignment on TempestFieldVolume_GetClosestUnclaimedResourceTile");
static_assert(sizeof(TempestFieldVolume_GetClosestUnclaimedResourceTile) == 0x000048, "Wrong size on TempestFieldVolume_GetClosestUnclaimedResourceTile");
static_assert(offsetof(TempestFieldVolume_GetClosestUnclaimedResourceTile, InLocation) == 0x000000, "Member 'TempestFieldVolume_GetClosestUnclaimedResourceTile::InLocation' has a wrong offset!");
static_assert(offsetof(TempestFieldVolume_GetClosestUnclaimedResourceTile, OutClosestLocation) == 0x000018, "Member 'TempestFieldVolume_GetClosestUnclaimedResourceTile::OutClosestLocation' has a wrong offset!");
static_assert(offsetof(TempestFieldVolume_GetClosestUnclaimedResourceTile, bTestReachability) == 0x000030, "Member 'TempestFieldVolume_GetClosestUnclaimedResourceTile::bTestReachability' has a wrong offset!");
static_assert(offsetof(TempestFieldVolume_GetClosestUnclaimedResourceTile, InUnit) == 0x000038, "Member 'TempestFieldVolume_GetClosestUnclaimedResourceTile::InUnit' has a wrong offset!");
static_assert(offsetof(TempestFieldVolume_GetClosestUnclaimedResourceTile, ReturnValue) == 0x000040, "Member 'TempestFieldVolume_GetClosestUnclaimedResourceTile::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetResourceAtWorldLocation
// 0x0020 (0x0020 - 0x0000)
struct TempestFieldVolume_GetResourceAtWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TempestFieldVolume_GetResourceAtWorldLocation) == 0x000008, "Wrong alignment on TempestFieldVolume_GetResourceAtWorldLocation");
static_assert(sizeof(TempestFieldVolume_GetResourceAtWorldLocation) == 0x000020, "Wrong size on TempestFieldVolume_GetResourceAtWorldLocation");
static_assert(offsetof(TempestFieldVolume_GetResourceAtWorldLocation, Location) == 0x000000, "Member 'TempestFieldVolume_GetResourceAtWorldLocation::Location' has a wrong offset!");
static_assert(offsetof(TempestFieldVolume_GetResourceAtWorldLocation, ReturnValue) == 0x000018, "Member 'TempestFieldVolume_GetResourceAtWorldLocation::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetResourceLeft
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldVolume_GetResourceLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_GetResourceLeft) == 0x000004, "Wrong alignment on TempestFieldVolume_GetResourceLeft");
static_assert(sizeof(TempestFieldVolume_GetResourceLeft) == 0x000004, "Wrong size on TempestFieldVolume_GetResourceLeft");
static_assert(offsetof(TempestFieldVolume_GetResourceLeft, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_GetResourceLeft::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetResourcePct
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldVolume_GetResourcePct final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_GetResourcePct) == 0x000004, "Wrong alignment on TempestFieldVolume_GetResourcePct");
static_assert(sizeof(TempestFieldVolume_GetResourcePct) == 0x000004, "Wrong size on TempestFieldVolume_GetResourcePct");
static_assert(offsetof(TempestFieldVolume_GetResourcePct, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_GetResourcePct::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetVisibleResourceLeft
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldVolume_GetVisibleResourceLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_GetVisibleResourceLeft) == 0x000004, "Wrong alignment on TempestFieldVolume_GetVisibleResourceLeft");
static_assert(sizeof(TempestFieldVolume_GetVisibleResourceLeft) == 0x000004, "Wrong size on TempestFieldVolume_GetVisibleResourceLeft");
static_assert(offsetof(TempestFieldVolume_GetVisibleResourceLeft, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_GetVisibleResourceLeft::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.GetVisibleResourcePct
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldVolume_GetVisibleResourcePct final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_GetVisibleResourcePct) == 0x000004, "Wrong alignment on TempestFieldVolume_GetVisibleResourcePct");
static_assert(sizeof(TempestFieldVolume_GetVisibleResourcePct) == 0x000004, "Wrong size on TempestFieldVolume_GetVisibleResourcePct");
static_assert(offsetof(TempestFieldVolume_GetVisibleResourcePct, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_GetVisibleResourcePct::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.HasUnlcaimedResourceTile
// 0x0001 (0x0001 - 0x0000)
struct TempestFieldVolume_HasUnlcaimedResourceTile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_HasUnlcaimedResourceTile) == 0x000001, "Wrong alignment on TempestFieldVolume_HasUnlcaimedResourceTile");
static_assert(sizeof(TempestFieldVolume_HasUnlcaimedResourceTile) == 0x000001, "Wrong size on TempestFieldVolume_HasUnlcaimedResourceTile");
static_assert(offsetof(TempestFieldVolume_HasUnlcaimedResourceTile, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_HasUnlcaimedResourceTile::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.IsResourceDepleted
// 0x0001 (0x0001 - 0x0000)
struct TempestFieldVolume_IsResourceDepleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_IsResourceDepleted) == 0x000001, "Wrong alignment on TempestFieldVolume_IsResourceDepleted");
static_assert(sizeof(TempestFieldVolume_IsResourceDepleted) == 0x000001, "Wrong size on TempestFieldVolume_IsResourceDepleted");
static_assert(offsetof(TempestFieldVolume_IsResourceDepleted, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_IsResourceDepleted::ReturnValue' has a wrong offset!");

// Function Tempest.TempestFieldVolume.NumClaimedTiles
// 0x0004 (0x0004 - 0x0000)
struct TempestFieldVolume_NumClaimedTiles final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TempestFieldVolume_NumClaimedTiles) == 0x000004, "Wrong alignment on TempestFieldVolume_NumClaimedTiles");
static_assert(sizeof(TempestFieldVolume_NumClaimedTiles) == 0x000004, "Wrong size on TempestFieldVolume_NumClaimedTiles");
static_assert(offsetof(TempestFieldVolume_NumClaimedTiles, ReturnValue) == 0x000000, "Member 'TempestFieldVolume_NumClaimedTiles::ReturnValue' has a wrong offset!");

}

