#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_InfantryBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK::Params
{

// Function ABP_InfantryBase.ABP_InfantryBase_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_InfantryBase_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_InfantryBase_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_InfantryBase_C_AnimGraph");
static_assert(sizeof(ABP_InfantryBase_C_AnimGraph) == 0x000010, "Wrong size on ABP_InfantryBase_C_AnimGraph");
static_assert(offsetof(ABP_InfantryBase_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_InfantryBase_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_InfantryBase.ABP_InfantryBase_C.BlueprintThreadSafeUpdateAnimation
// 0x01E0 (0x01E0 - 0x0000)
struct ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3;   // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast_1;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4;   // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_Max_ImplicitCast_2;                // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5;   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_6;   // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_2;           // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation) == 0x000008, "Wrong alignment on ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation) == 0x0001E0, "Wrong size on ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_RLerp_ReturnValue) == 0x000010, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000040, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x000048, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_VSizeXY_ReturnValue) == 0x000060, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000068, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Roll_1) == 0x000070, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Pitch_1) == 0x000074, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Yaw_1) == 0x000078, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_ReturnValue) == 0x000080, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000088, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_ReturnValue) == 0x000090, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x0000A8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x0000C0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_ReturnValue_1) == 0x0000C8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0000D0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000D8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_ReturnValue_2) == 0x0000F0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_ReturnValue_1) == 0x0000F8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_RLerp_ReturnValue_1) == 0x000110, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Roll_2) == 0x000128, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Pitch_2) == 0x00012C, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BreakRotator_Yaw_2) == 0x000130, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000138, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_ReturnValue_2) == 0x000140, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000158, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_Max_ImplicitCast) == 0x000170, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000178, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000180, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x000188, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3) == 0x000190, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000198, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x00019C, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_Max_ImplicitCast_1) == 0x0001A0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4) == 0x0001A8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001B0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_FClamp_Max_ImplicitCast_2) == 0x0001B8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_FClamp_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5) == 0x0001C0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x0001C8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_6) == 0x0001D0, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation, CallFunc_MakeRotator_Yaw_ImplicitCast_2) == 0x0001D8, "Member 'ABP_InfantryBase_C_BlueprintThreadSafeUpdateAnimation::CallFunc_MakeRotator_Yaw_ImplicitCast_2' has a wrong offset!");

// Function ABP_InfantryBase.ABP_InfantryBase_C.ExecuteUbergraph_ABP_InfantryBase
// 0x0008 (0x0008 - 0x0000)
struct ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase) == 0x000004, "Wrong alignment on ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase");
static_assert(sizeof(ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase) == 0x000008, "Wrong size on ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase");
static_assert(offsetof(ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase, EntryPoint) == 0x000000, "Member 'ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ABP_InfantryBase_C_ExecuteUbergraph_ABP_InfantryBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_InfantryBase.ABP_InfantryBase_C.HasTransitionalAnimations
// 0x0018 (0x0018 - 0x0000)
struct ABP_InfantryBase_C_HasTransitionalAnimations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_InfantryBase_C_HasTransitionalAnimations) == 0x000008, "Wrong alignment on ABP_InfantryBase_C_HasTransitionalAnimations");
static_assert(sizeof(ABP_InfantryBase_C_HasTransitionalAnimations) == 0x000018, "Wrong size on ABP_InfantryBase_C_HasTransitionalAnimations");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, ReturnValue) == 0x000000, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000001, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000002, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000008, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_HasTransitionalAnimations, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x000010, "Member 'ABP_InfantryBase_C_HasTransitionalAnimations::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function ABP_InfantryBase.ABP_InfantryBase_C.SetIdleBreakAnimation
// 0x0058 (0x0058 - 0x0000)
struct ABP_InfantryBase_C_SetIdleBreakAnimation final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_Array_Random_OutItem;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Random_OutIndex;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSequencePlayerReference               CallFunc_SetSequenceWithInertialBlending_ReturnValue; // 0x0048(0x0010)(NoDestructor)
};
static_assert(alignof(ABP_InfantryBase_C_SetIdleBreakAnimation) == 0x000008, "Wrong alignment on ABP_InfantryBase_C_SetIdleBreakAnimation");
static_assert(sizeof(ABP_InfantryBase_C_SetIdleBreakAnimation) == 0x000058, "Wrong size on ABP_InfantryBase_C_SetIdleBreakAnimation");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, Context) == 0x000000, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::Context' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, Node) == 0x000010, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::Node' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, CallFunc_Array_Random_OutItem) == 0x000038, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::CallFunc_Array_Random_OutItem' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, CallFunc_Array_Random_OutIndex) == 0x000040, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::CallFunc_Array_Random_OutIndex' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_SetIdleBreakAnimation, CallFunc_SetSequenceWithInertialBlending_ReturnValue) == 0x000048, "Member 'ABP_InfantryBase_C_SetIdleBreakAnimation::CallFunc_SetSequenceWithInertialBlending_ReturnValue' has a wrong offset!");

// Function ABP_InfantryBase.ABP_InfantryBase_C.UpdateIdleBreakPlayer
// 0x0058 (0x0058 - 0x0000)
struct ABP_InfantryBase_C_UpdateIdleBreakPlayer final
{
public:
	struct FAnimUpdateContext                     Context;                                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FAnimNodeReference                     Node;                                              // 0x0010(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	struct FSequencePlayerReference               CallFunc_ConvertToSequencePlayerPure_SequencePlayer; // 0x0020(0x0010)(NoDestructor)
	bool                                          CallFunc_ConvertToSequencePlayerPure_Result;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAccumulatedTime_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      CallFunc_GetSequencePure_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPlayLength_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_InfantryBase_C_UpdateIdleBreakPlayer) == 0x000008, "Wrong alignment on ABP_InfantryBase_C_UpdateIdleBreakPlayer");
static_assert(sizeof(ABP_InfantryBase_C_UpdateIdleBreakPlayer) == 0x000058, "Wrong size on ABP_InfantryBase_C_UpdateIdleBreakPlayer");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, Context) == 0x000000, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::Context' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, Node) == 0x000010, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::Node' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_ConvertToSequencePlayerPure_SequencePlayer) == 0x000020, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_ConvertToSequencePlayerPure_SequencePlayer' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_ConvertToSequencePlayerPure_Result) == 0x000030, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_ConvertToSequencePlayerPure_Result' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_GetAccumulatedTime_ReturnValue) == 0x000034, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_GetAccumulatedTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_GetSequencePure_ReturnValue) == 0x000038, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_GetSequencePure_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_GetPlayLength_ReturnValue) == 0x000040, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_GetPlayLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000048, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(ABP_InfantryBase_C_UpdateIdleBreakPlayer, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x000050, "Member 'ABP_InfantryBase_C_UpdateIdleBreakPlayer::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");

}

