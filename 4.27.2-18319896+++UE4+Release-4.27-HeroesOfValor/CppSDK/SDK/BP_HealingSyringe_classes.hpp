#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HealingSyringe

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_EquipableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_HealingSyringe.BP_HealingSyringe_C
// 0x0030 (0x0308 - 0x02D8)
class ABP_HealingSyringe_C : public ABP_EquipableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_HealingSyringe_C;                // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Syringe_Head;                                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Loaded;                                            // 0x02F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadTimer;                                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadTime;                                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAmmo;                                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAmmo;                                           // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_HealingSyringe(int32 EntryPoint);
	void OC_Reload();
	void Reload();
	void S_SetLoadedState(bool Loaded_0);
	void LaunchInjector(int32 RemainingAmmo);
	void MC_HealEffects(const struct FVector& HealLocation, class ABP_Character_C* Character);
	void S_HealEffects(const struct FVector& HealLocation, class ABP_Character_C* Character);
	void Use();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnRep_Loaded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_HealingSyringe_C">();
	}
	static class ABP_HealingSyringe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_HealingSyringe_C>();
	}
};
static_assert(alignof(ABP_HealingSyringe_C) == 0x000008, "Wrong alignment on ABP_HealingSyringe_C");
static_assert(sizeof(ABP_HealingSyringe_C) == 0x000308, "Wrong size on ABP_HealingSyringe_C");
static_assert(offsetof(ABP_HealingSyringe_C, UberGraphFrame_BP_HealingSyringe_C) == 0x0002D8, "Member 'ABP_HealingSyringe_C::UberGraphFrame_BP_HealingSyringe_C' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, Syringe_Head) == 0x0002E0, "Member 'ABP_HealingSyringe_C::Syringe_Head' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, Arrow) == 0x0002E8, "Member 'ABP_HealingSyringe_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, Loaded) == 0x0002F0, "Member 'ABP_HealingSyringe_C::Loaded' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, ReloadTimer) == 0x0002F4, "Member 'ABP_HealingSyringe_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, ReloadTime) == 0x0002F8, "Member 'ABP_HealingSyringe_C::ReloadTime' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, CurrentAmmo) == 0x0002FC, "Member 'ABP_HealingSyringe_C::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(ABP_HealingSyringe_C, MaxAmmo) == 0x000300, "Member 'ABP_HealingSyringe_C::MaxAmmo' has a wrong offset!");

}

