#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Task_FindObjective

#include "Basic.hpp"

#include "E_AITeamPlayStyles_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Teams_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Task_FindObjective.Task_FindObjective_C
// 0x0018 (0x00C0 - 0x00A8)
class UTask_FindObjective_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          CanChangeDefendState;                              // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefendStateTimer;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToDefend;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastTimeInSeconds;                                 // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Task_FindObjective(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void GetClosestObjective(class AActor* ControlledPawn, class ABP_ObjectiveBase_C** ClosestObjective);
	void GetRandomObjective(class APawn* ControlledPawn, class ABP_ObjectiveBase_C** Objective);
	void IsCurrentObjectiveWon_(class AActor* PawnActor, bool* ObjectiveWon);
	void GetDefendChance(class APawn* ControlledPawn, bool* Defend, E_AITeamPlayStyles* PlayStyle);
	void GetTeamSupremacy(E_Teams Team, bool* Supremacy);
	void DoWeHaveAnObjective_(class AActor* Pawn, bool* ValidObjective);
	void IsObjectiveStillRelevant_(class APawn* Pawn, bool* StillRelevant);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Task_FindObjective_C">();
	}
	static class UTask_FindObjective_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTask_FindObjective_C>();
	}
};
static_assert(alignof(UTask_FindObjective_C) == 0x000008, "Wrong alignment on UTask_FindObjective_C");
static_assert(sizeof(UTask_FindObjective_C) == 0x0000C0, "Wrong size on UTask_FindObjective_C");
static_assert(offsetof(UTask_FindObjective_C, UberGraphFrame) == 0x0000A8, "Member 'UTask_FindObjective_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTask_FindObjective_C, CanChangeDefendState) == 0x0000B0, "Member 'UTask_FindObjective_C::CanChangeDefendState' has a wrong offset!");
static_assert(offsetof(UTask_FindObjective_C, DefendStateTimer) == 0x0000B4, "Member 'UTask_FindObjective_C::DefendStateTimer' has a wrong offset!");
static_assert(offsetof(UTask_FindObjective_C, TimeToDefend) == 0x0000B8, "Member 'UTask_FindObjective_C::TimeToDefend' has a wrong offset!");
static_assert(offsetof(UTask_FindObjective_C, LastTimeInSeconds) == 0x0000BC, "Member 'UTask_FindObjective_C::LastTimeInSeconds' has a wrong offset!");

}

