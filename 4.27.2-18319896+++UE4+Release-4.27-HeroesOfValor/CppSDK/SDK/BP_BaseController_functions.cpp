#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseController

#include "Basic.hpp"

#include "BP_BaseController_classes.hpp"
#include "BP_BaseController_parameters.hpp"


namespace SDK
{

// Function BP_BaseController.BP_BaseController_C.ExecuteUbergraph_BP_BaseController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::ExecuteUbergraph_BP_BaseController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "ExecuteUbergraph_BP_BaseController");

	Params::BP_BaseController_C_ExecuteUbergraph_BP_BaseController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.RefreshInventoryFromResult
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSteamInventoryResult&     Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::RefreshInventoryFromResult(const struct FSteamInventoryResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "RefreshInventoryFromResult");

	Params::BP_BaseController_C_RefreshInventoryFromResult Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.RefreshCachedSteamInventory
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::RefreshCachedSteamInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "RefreshCachedSteamInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.OpenChest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Generator                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ChestID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::OpenChest(int32 Generator, int32 ChestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "OpenChest");

	Params::BP_BaseController_C_OpenChest Parms{};

	Parms.Generator = Generator;
	Parms.ChestID = ChestID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.CraftChest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Bundle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaterialID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaterialQuantity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_ChestTypes                            ChestType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::CraftChest(int32 Bundle, int32 MaterialID, int32 MaterialQuantity, E_ChestTypes ChestType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "CraftChest");

	Params::BP_BaseController_C_CraftChest Parms{};

	Parms.Bundle = Bundle;
	Parms.MaterialID = MaterialID;
	Parms.MaterialQuantity = MaterialQuantity;
	Parms.ChestType = ChestType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.GrantPlaytestRewards
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::GrantPlaytestRewards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "GrantPlaytestRewards");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.OC_TriggerItemDrop
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::OC_TriggerItemDrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "OC_TriggerItemDrop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.RequestStats
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::RequestStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "RequestStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.RefreshStats
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::RefreshStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "RefreshStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BaseController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseController.BP_BaseController_C.OnCallback_207D6D57481796AD36860BBA2C36B494
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseController_C::OnCallback_207D6D57481796AD36860BBA2C36B494(const class FString& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "OnCallback_207D6D57481796AD36860BBA2C36B494");

	Params::BP_BaseController_C_OnCallback_207D6D57481796AD36860BBA2C36B494 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.InpActEvt_I_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BaseController_C::InpActEvt_I_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "InpActEvt_I_K2Node_InputKeyEvent_0");

	Params::BP_BaseController_C_InpActEvt_I_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.Get Stacked Item ID Amount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::Get_Stacked_Item_ID_Amount(int32 ItemId, int32* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "Get Stacked Item ID Amount");

	Params::BP_BaseController_C_Get_Stacked_Item_ID_Amount Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_BaseController.BP_BaseController_C.GetItemInstanceID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSteamItemInstanceID*            Instance_ID                                            (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ABP_BaseController_C::GetItemInstanceID(int32 ID, struct FSteamItemInstanceID* Instance_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "GetItemInstanceID");

	Params::BP_BaseController_C_GetItemInstanceID Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Instance_ID != nullptr)
		*Instance_ID = std::move(Parms.Instance_ID);
}


// Function BP_BaseController.BP_BaseController_C.UpdateInventoryWithLatestResult
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSteamItemDetails>&       Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_BaseController_C::UpdateInventoryWithLatestResult(TArray<struct FSteamItemDetails>& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "UpdateInventoryWithLatestResult");

	Params::BP_BaseController_C_UpdateInventoryWithLatestResult Parms{};

	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);

	Result = std::move(Parms.Result);
}


// Function BP_BaseController.BP_BaseController_C.ShowSteamProcessPopup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_BaseController_C::ShowSteamProcessPopup(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "ShowSteamProcessPopup");

	Params::BP_BaseController_C_ShowSteamProcessPopup Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseController.BP_BaseController_C.InitOptions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BaseController_C::InitOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseController_C", "InitOptions");

	UObject::ProcessEvent(Func, nullptr);
}

}

