#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MeleeBase

#include "Basic.hpp"

#include "BP_MeleeBase_classes.hpp"
#include "BP_MeleeBase_parameters.hpp"


namespace SDK
{

// Function BP_MeleeBase.BP_MeleeBase_C.ExecuteUbergraph_BP_MeleeBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::ExecuteUbergraph_BP_MeleeBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "ExecuteUbergraph_BP_MeleeBase");

	Params::BP_MeleeBase_C_ExecuteUbergraph_BP_MeleeBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.S_SpawnMeleeProjectile
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   TravelDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::S_SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "S_SpawnMeleeProjectile");

	Params::BP_MeleeBase_C_S_SpawnMeleeProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.TravelDirection = std::move(TravelDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.MC_SpawnMeleeProjectile
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   TravelDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::MC_SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "MC_SpawnMeleeProjectile");

	Params::BP_MeleeBase_C_MC_SpawnMeleeProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.TravelDirection = std::move(TravelDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.SpawnMeleeProjectile
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   TravelDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "SpawnMeleeProjectile");

	Params::BP_MeleeBase_C_SpawnMeleeProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.TravelDirection = std::move(TravelDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.MC_MeleeThrow
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::MC_MeleeThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "MC_MeleeThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.S_MeleeThrow
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::S_MeleeThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "S_MeleeThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.S_SetOnCooldown
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnCooldown_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MeleeBase_C::S_SetOnCooldown(bool OnCooldown_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "S_SetOnCooldown");

	Params::BP_MeleeBase_C_S_SetOnCooldown Parms{};

	Parms.OnCooldown_0 = OnCooldown_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.EnterStabMode
// (BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::EnterStabMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "EnterStabMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.EnterThrowMode
// (BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::EnterThrowMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "EnterThrowMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.MeleeHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FleshHit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   BackupLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::MeleeHit(class USceneComponent* AttachToComponent, bool FleshHit, const struct FVector& BackupLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "MeleeHit");

	Params::BP_MeleeBase_C_MeleeHit Parms{};

	Parms.AttachToComponent = AttachToComponent;
	Parms.FleshHit = FleshHit;
	Parms.BackupLocation = std::move(BackupLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.S_MeleeHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FleshHit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MeleeBase_C::S_MeleeHit(const struct FVector& Location, class USceneComponent* AttachToComponent, bool FleshHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "S_MeleeHit");

	Params::BP_MeleeBase_C_S_MeleeHit Parms{};

	Parms.Location = std::move(Location);
	Parms.AttachToComponent = AttachToComponent;
	Parms.FleshHit = FleshHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.MC_MeleeHit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  AttachToComponent                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FleshHit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MeleeBase_C::MC_MeleeHit(class USceneComponent* AttachToComponent, const struct FVector& Location, bool FleshHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "MC_MeleeHit");

	Params::BP_MeleeBase_C_MC_MeleeHit Parms{};

	Parms.AttachToComponent = AttachToComponent;
	Parms.Location = std::move(Location);
	Parms.FleshHit = FleshHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MeleeBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "ReceiveTick");

	Params::BP_MeleeBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MeleeBase.BP_MeleeBase_C.KnifeThrowMode__UpdateFunc
// (BlueprintEvent)

void ABP_MeleeBase_C::KnifeThrowMode__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "KnifeThrowMode__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.KnifeThrowMode__FinishedFunc
// (BlueprintEvent)

void ABP_MeleeBase_C::KnifeThrowMode__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "KnifeThrowMode__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.OnRep_OnCooldown
// (BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::OnRep_OnCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "OnRep_OnCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.CheckObstacle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   ObstacleDetected                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_MeleeBase_C::CheckObstacle(class ABP_Character_C* Character, bool* ObstacleDetected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "CheckObstacle");

	Params::BP_MeleeBase_C_CheckObstacle Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);

	if (ObstacleDetected != nullptr)
		*ObstacleDetected = Parms.ObstacleDetected;
}


// Function BP_MeleeBase.BP_MeleeBase_C.Use
// (BlueprintCallable, BlueprintEvent)

void ABP_MeleeBase_C::Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "Use");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MeleeBase.BP_MeleeBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MeleeBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MeleeBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

