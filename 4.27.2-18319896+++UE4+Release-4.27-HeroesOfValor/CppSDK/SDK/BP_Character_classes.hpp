#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ST_CharacterCustomization_structs.hpp"
#include "E_WeaponTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Units_structs.hpp"
#include "E_Teams_structs.hpp"
#include "E_MovementModes_structs.hpp"
#include "ClientAuthoritativeCharacterSystem_classes.hpp"
#include "ST_CharacterData_structs.hpp"
#include "E_DamageTypes_structs.hpp"
#include "E_SkillSlots_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character.BP_Character_C
// 0x0660 (0x0B20 - 0x04C0)
class ABP_Character_C final : public AClientAuthoritativeCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SwayTransform;                                     // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Sniper_Aim_Sway;                                   // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FollowCamera;                                      // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    FrontCamSpringArm;                                 // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        GroinAnchor;                                       // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HeadCollider;                                      // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Feet;                                              // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Back;                                              // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FaceCamLoc;                                        // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Torso;                                             // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 FacialHair;                                        // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LowerFace;                                         // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UpperFace;                                         // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Parachute;                                         // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Legs;                                              // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hat;                                               // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Actor_Rotation;                                    // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        VehicleSeatCameraAnchor;                           // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       FrontCamera;                                       // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HatExtra;                                          // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ArrowForCameraPitchOffset;                         // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UsernameLocation;                                  // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnDataComponent_C*                   PawnDataComponent;                                 // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_D8E2316D42E8AAC66C62C19F5D83BA45; // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_D8E2316D42E8AAC66C62C19F5D83BA45; // 0x059C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59D[0x3];                                      // 0x059D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireAnimationTL_Kickback_D4A7BC19470D4F252961F4A766E24D89; // 0x05A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireAnimationTL_Pitch_D4A7BC19470D4F252961F4A766E24D89; // 0x05AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FireAnimationTL__Direction_D4A7BC19470D4F252961F4A766E24D89; // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FireAnimationTL;                                   // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParachuteDeploy_NewTrack_0_2BFF20F84400E6DA91A68D9C5FD24DBF; // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ParachuteDeploy__Direction_2BFF20F84400E6DA91A68D9C5FD24DBF; // 0x05C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ParachuteDeploy;                                   // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Controlled;                                     // 0x05D4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5D5[0x3];                                      // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CoreWeapon;                                        // 0x05D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	struct FDataTableRowHandle                    Equipable1;                                        // 0x05E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	struct FDataTableRowHandle                    Equipable2;                                        // 0x05F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	struct FDataTableRowHandle                    Explosive;                                         // 0x0608(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	class ABP_EquipableBase_C*                    CoreWeaponEquipable;                               // 0x0618(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_EquipableBase_C*                    FirstEquipable;                                    // 0x0620(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_EquipableBase_C*                    SecondEquipable;                                   // 0x0628(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_Controller_C*                       ControllerRef_OnlyValidOnServer_;                  // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UCharacter_Idle_Skeleton_AnimBlueprint_New_C* AnimInstance;                                // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Username_C*                         UsernameRef;                                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 InteractableRef;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Units                                       CharacterClass;                                    // 0x0650(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsDead;                                            // 0x0651(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          IsLocalCharacter_Own_;                             // 0x0652(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653[0x5];                                      // 0x0653(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   KillerName;                                        // 0x0658(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	class FString                                 UserName;                                          // 0x0670(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CurrentHealth;                                     // 0x0680(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_CanFireWeapon;                                  // 0x0684(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_CanAttackPlanes;                                // 0x0685(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_CanAttackVehicles;                              // 0x0686(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_MovementFailed;                                 // 0x0687(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_MeleeEquiped;                                   // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AI_Target;                                         // 0x0690(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_EquipableBase_C*                    ExplosiveEquipable;                                // 0x0698(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_EquipableBase_C*                    ActiveEquipable;                                   // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveEquipableIndex;                              // 0x06A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          PrimaryFirePressed;                                // 0x06AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AD[0x3];                                      // 0x06AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_RandomFireInaccuracy;                           // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B4[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VehicleBase_C*                      VehicleRef;                                        // 0x06B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHealth;                                         // 0x06C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 DamageAmount, const struct FVector& AttackerLocation)> DamageRecieved_ClientOnly_; // 0x06C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BurningBulletsEnabled;                             // 0x06D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PoisonDamageEnabled;                               // 0x06D9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Invisible;                                         // 0x06DA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          RestoreHPOnHitEnabled;                             // 0x06DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBurning;                                         // 0x06DC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPoisoned;                                        // 0x06DD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DE[0x2];                                      // 0x06DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Skill1CooldownTime;                                // 0x06E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill2CooldownTime;                                // 0x06E4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill1CooldownTimer;                               // 0x06E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Skill2CooldownTimer;                               // 0x06EC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Skill1onCD;                                        // 0x06F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Skill2onCD;                                        // 0x06F1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_6F2[0x6];                                      // 0x06F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    Skill1;                                            // 0x06F8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	struct FDataTableRowHandle                    Skill2;                                            // 0x0708(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, NoDestructor)
	bool                                          Skill1Active;                                      // 0x0718(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Skill2Active;                                      // 0x0719(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71A[0x6];                                      // 0x071A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SkillBase_C*                        Skill1Ref;                                         // 0x0720(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SkillBase_C*                        Skill2Ref;                                         // 0x0728(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageMultiplier;                                  // 0x0730(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 UnAlteredDamageAmount)> UnAlteredDamageReceived_Server_;     // 0x0738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              BreakInvisibility;                                 // 0x0748(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          AimingMode;                                        // 0x0758(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          CanUseEquipable;                                   // 0x0759(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75A[0x2];                                      // 0x075A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Kills;                                             // 0x075C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Deaths;                                            // 0x0760(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Score;                                             // 0x0764(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         AI_RandomLookAroundSpeed;                          // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AI_TargetVehicleVelocity;                          // 0x076C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageReceiveMultiplier;                           // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_BuffDebuffBase_C*>           BuffDebuffs;                                       // 0x0780(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         CoreWeaponIndex;                                   // 0x0790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Weapon1Index;                                      // 0x0794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Weapon2Index;                                      // 0x0798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         ExplosiveIndex;                                    // 0x079C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Forward_Axis_Value;                                // 0x07A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Axis_Value;                                  // 0x07A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkSpeedMultiplier;                               // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimSpeedMultiplier;                                // 0x07AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MovementModes                               MovementType;                                      // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WantsToSprint;                                     // 0x07B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Sprinting;                                         // 0x07B2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7B3[0x1];                                      // 0x07B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SingularDamageBoost;                               // 0x07B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              HasFiredAWeapon;                                   // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Skill1Loaded;                                      // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Skill2Loaded;                                      // 0x07C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HideEquipables;                                    // 0x07CA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7CB[0x5];                                      // 0x07CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EquipableBase_C*                    TempThrowableRef_skill_;                           // 0x07D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         Skill1Index;                                       // 0x07D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Skill2Index;                                       // 0x07DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          RecentlyDamaged;                                   // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7E1[0x3];                                      // 0x07E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FireDelay;                                         // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              EquipableSwitched;                                 // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InFPSView;                                         // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnterFiringCloseView;                              // 0x07F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsingEquipable;                                    // 0x07FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSwapping;                                        // 0x07FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SecondaryFirePressed;                              // 0x07FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanEnableCameraLag;                                // 0x07FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7FE[0x2];                                      // 0x07FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VehicleSeat_C*                      VehicleSeat;                                       // 0x0800(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              WeaponSwapped;                                     // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class APawn*                                  CurrentTarget;                                     // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AI_RandomStationaryLookAtRotation;                 // 0x0820(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82C[0x4];                                      // 0x082C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AI_AvailableSkills;                                // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APawn*                                  AI_SensedPawn;                                     // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintBlocked;                                     // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_849[0x3];                                      // 0x0849(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightAboveGround;                                 // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ParachuteOpen;                                     // 0x0850(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          SpeedBoostActive;                                  // 0x0851(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_852[0x6];                                      // 0x0852(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  AI_LastTargetThatAttackedUs;                       // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PawnThatKilledUs;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  LastPawnThatAttackedUs;                            // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LightDirectionSaved;                               // 0x0870(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OutfitLoaded;                                      // 0x087C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MeshMaterialLoaded;                                // 0x087D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HatLoaded;                                         // 0x087E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InShadow;                                          // 0x087F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LookAtKiller;                                      // 0x0880(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RecentlyUsedWeapon;                                // 0x0881(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Unkillable_ForTesting_;                            // 0x0882(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_883[0x5];                                      // 0x0883(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Skill1Ready;                                       // 0x0888(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              Skill2Ready;                                       // 0x0898(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         BonusDamageAmount;                                 // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportLocation;                                  // 0x08AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimFocusAmount;                                    // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DeathCamRotation;                                  // 0x08BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FST_CharacterCustomization             CharacterCustomization;                            // 0x08C8(0x003C)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ClassSet;                                          // 0x0904(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsingScopedWeapon;                                 // 0x0905(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_906[0x2];                                      // 0x0906(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastNonThrowableEquipable;                         // 0x0908(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpreadMultiplier;                                  // 0x090C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Shielded;                                          // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterKillHeight;                               // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalLeftRightAxisValue;                           // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackwardAxisValue;                                 // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TotalForwardBackwardAxisValue;                     // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftAxisValue;                                     // 0x0924(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_VehicleBase_C*                      VehicleBeneathUs;                                  // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AI_TargetCenterLocation;                           // 0x0930(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GunBlockDistance;                                  // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalCameraOffset_GunBlock_;                    // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HorizontalCameraOffset_GunBlock_;                  // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_CanUseUtility_Explosive_;                       // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TempHideEquipables;                                // 0x0949(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_94A[0x6];                                      // 0x094A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  LastLaunchInflicter;                               // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DeathLocation;                                     // 0x0958(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayMontages;                                   // 0x0964(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FrontCamActive;                                    // 0x0965(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_966[0x2];                                      // 0x0966(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Equipable_We_Are_Swapping_To;                      // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwapping_server_;                                // 0x096C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSwap;                                           // 0x096D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TempHideEquipables_Client_;                        // 0x096E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_96F[0x1];                                      // 0x096F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PreferedEquipable;                                 // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DealImpactDamage;                                  // 0x0974(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InAir;                                             // 0x0975(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_976[0x2];                                      // 0x0976(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ReceivedPiercingDamage;                            // 0x0978(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PiercingDamageEnabled;                             // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Legs_MID;                                          // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Character_MID;                                     // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Hat_Item_MID;                                      // 0x09A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Torso_MIDs;                                        // 0x09B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CustomizationLoaded;                               // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9C1[0x7];                                      // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_MapCam_C*                           MapCamRef;                                         // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnCamLocationTarget;                            // 0x09D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9DC[0x4];                                      // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_Character_C* Character)> HasDied;                        // 0x09E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         RunSpeedMultiplier;                                // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeSinceLastSprint;                               // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VerticalCameraOffset_Aiming_;                      // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedSpringArmYOffset_AntiCornerExploit__NonAim; // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedSpringArmYOffset_AntiCornerExploit__Aim; // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpineYawOffset;                                    // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReplicatedMeshAndBoomRotation;                     // 0x0A08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DesiredTargetArmLength;                            // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_EmoteMenu_C*                         EmoteMenu;                                         // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EmotePlaying;                                      // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentEmoteMontage;                               // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        KillerFaceCamRef;                                  // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crouching;                                         // 0x0A38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_A39[0x3];                                      // 0x0A39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RelativeMeshLocationInSeat;                        // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_IsMeleeCommando;                                // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A41[0x3];                                      // 0x0A41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AI_KillEmoteInt;                                   // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireAnimationPitchTarget;                          // 0x0A48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireAnimationKickBackTarget;                       // 0x0A4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0A50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CharacterVelocity_Manual_;                         // 0x0A5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 SpectatingPlayers_indexes_;                        // 0x0A68(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	struct FVector                                CameraBoomRelLocation_Spectator_;                  // 0x0A78(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CameraFOV_Spectator_;                              // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityAfterDeath;                                // 0x0A88(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExtraVelocityAfterDeath;                           // 0x0A94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CharacterVelocityManualInterpolated;               // 0x0AA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousEquipableIndex;                            // 0x0AAC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreEquipablesHidden_;                              // 0x0AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB1[0x3];                                      // 0x0AB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CanUseAfterSwapDelayTime;                          // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRateCDMultiplier;                              // 0x0AB8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_CanSwap;                                        // 0x0ABC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ABD[0x3];                                      // 0x0ABD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          PotentialKillAssists;                              // 0x0AC0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         RequestedQueueSlot;                                // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullBodyAnimationTakeOver;                         // 0x0AD4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseCameraAimingSway;                               // 0x0AD5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AD6[0x2];                                      // 0x0AD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AddedCameraYaw;                                    // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilSidewaysDirection;                           // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         X__Roll_;                                          // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseIsBeingMoved;                                 // 0x0AE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE5[0x3];                                      // 0x0AE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwayAmount;                                        // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomRecoilX;                                     // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomRecoilY;                                     // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraBoomAimOffset;                               // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraBoomCrouchOffset;                            // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterHasPlayerOwner;                           // 0x0AFC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          VehicleDucking;                                    // 0x0AFD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_AFE[0x2];                                      // 0x0AFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_CharacterData                      CharacterData;                                     // 0x0B00(0x0014)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasRecentlyInAir;                                  // 0x0B14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B15[0x3];                                      // 0x0B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AFA;                                               // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AHD;                                               // 0x0B1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Character(int32 EntryPoint);
	void SetVehicleState();
	void ApplyDamage(int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage);
	void MC_AddDeathImpulse(const struct FVector& DamageDirection, int32 DamageAmount);
	void OC_Hit(int32 DamageAmount, const struct FVector& AttackerLocation);
	void MC_HealEffect();
	void KillCharacter(class APawn* AttackerPawn);
	void S_ActivateSkill(class UClass* Skill, E_SkillSlots SkillSlot);
	void AI_UseSkill1();
	void AI_UseSkill2();
	void S_BreakInvisibility();
	void S_SetActiveEquipable(int32 Equipable, bool ReloadPreviousWeapon, bool RemoveTempThrowable);
	void MC_Swap(int32 EquipableWeAreSwappingTo);
	void StopUsingEquipable();
	void Swap_Local_(int32 Equipable_We_Are_Swapping_To_0, float Delay);
	void ForceEndAllCurrentSkills();
	void S_Aiming(bool Aiming);
	void S_EquipTempThrowable(class UClass* ThrowableClas);
	void S_RemoveTempThrowable();
	void UseTempThrowable();
	void S_TempHideEquipables(float Duration);
	void TempHideEquipables_Local_(float Duration);
	void SetInitialWeapon();
	void OC_SwapToPreferedEquipable(float Delay);
	void QueueRequestedSwap();
	void AddFullBodyAnimationTakeOverTime(float Duration);
	void AI_UseEquipable();
	void AI_StopUseEquipable();
	void S_HasFiredAWeapon();
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void CheckSprint();
	void Server_SetSprinting(bool bRunning);
	void ResetJump();
	void MC_JumpSound();
	void S_JumpSound();
	void S_OpenParachute();
	void S_CloseParachute();
	void DeployParachute();
	void StowParachute();
	void BlockSprint(float Duration);
	void OnLanded(const struct FHitResult& Hit);
	void FallDamage();
	void InpAxisEvt_Move_Forward_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_Move_Backward_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_Move_Left_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_Move_Right_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_LookUpDown_K2Node_InputAxisEvent_4(float AxisValue);
	void S_Crouching(bool Crouching_0);
	void S_VehicleDucking(bool VehicleDucking_0);
	void InpAxisEvt_Sprint_K2Node_InputAxisEvent_5(float AxisValue);
	void TeamChanged();
	void MC_SetAISprint(bool Sprint);
	void AI_ChangeWeapon(int32 Slot);
	void AI_EnterFallState();
	void SwapToRegularWeapon();
	void AI_StopWeaponUse();
	void S_SentCharData(const struct FST_CharacterData& CharData);
	void S_SetUserName(const class FString& UserName_0);
	void S_ShareCameraRotation(const struct FRotator& Rotation);
	void MC_ShareCameraRotation(const struct FRotator& Rotation);
	void S_UsingEquipable();
	void SetUsingEquipable(bool Using);
	void MC_UsingEquipable();
	void S_SetCharacterCustomization(const struct FST_CharacterCustomization& CharacterCustomization_0);
	void S_SetPlayerRank(int32 PlayerRank, int32 PlayerIndex);
	void MC_ShareAdvancedCameraState(int32 FOV, const struct FVector& CameraBoomRelLocation);
	void S_ShareAdvancedCameraState(int32 FOV, const struct FVector& CameraBoomRelLocation);
	void RegisterSpectator(const int32& Index_0);
	void S_SetRecentlyTeleported();
	void S_SetPing(class APlayerState* PlayerState_0);
	void S_SetGodMode(bool Enabled);
	void S_SetInvisibility(bool Enabled);
	void S_SetNoClip(bool Enabled);
	void S_RestoreHealthOfOtherPlayer(class ABP_Character_C* OtherCharacter, int32 HealAmount, bool HealEffect, class APawn* PawnThatAppliedTheHeal, bool CleanseDebuffs, float ScoreMultiplier);
	void S_RestoreHealth(int32 Amount, bool HealEffect, class APawn* PawnThatAppliedTheHP, bool CleanseDebuffs, float ScoreMultiplier);
	void S_EndCurrentSkill(class ABP_SkillBase_C* Skill);
	void BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_1_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void ApplyPostDeathRagdoll(const struct FVector& Velocity);
	void TeleportCharacter(const struct FVector& TeleportLocation_0);
	void MC_PlayEmote(class UAnimMontage* EmoteMontage, float EmoteDuration);
	void PlayEmote(class UAnimMontage* EmoteMontage, float EmoteDuration);
	void ApplyRecoil(float RecoilAmount, bool AddSideWaysRecoil, bool RandomRecoil);
	void CloseEmoteMenu();
	void MC_StopEmote(class UAnimMontage* EmoteMontage);
	void S_StopEmote();
	void S_PlayEmote(class UAnimMontage* EmoteMontage, float EmoteDuration);
	void MC_FireAnimation();
	void S_FireAnimation();
	void FireAnimation();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void MC_LaunchCharacter(const struct FVector& LaunchVelocity, class APawn* LaunchInflicter, bool DealImpactDamage_0);
	void S_IncreaseEventToken();
	void OC_TeleportCharacter(const struct FVector& TeleportLocation_0);
	void PlayMontage(class UAnimMontage* MontageToPlay, bool bStopAllMontages, float BlockIncomingMontagesTime, float InPlayRate, bool ForcePlayMontage_OverrideWhenAlreadyPlayingMontage_);
	void PlayMontageFromClient(class UAnimMontage* MontageToPlay, bool bStopAllMontages, float BlockIncomingMontagesTime, bool ForcePlayMontage_OverrideWhenAlreadyPlayingMontage_, float InPlayRate);
	void CleanUp();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void MC_PlayMontage(class UAnimMontage* Montage, bool PlayOnOwningClient, bool bStopAllMontages, float BlockIncomingMontagesTime, bool ForcePlayMontage_OverrideWhenAlreadyPlayingMontage_, float InPlayRate);
	void S_PlayMontage(class UAnimMontage* Montage, bool bStopAllMontages, float BlockIncomingMontagesTime, bool PlayOnOwningClient, bool ForcePlayMontage_OverrideWhenAlreadyPlayingMontage_, float InPlayRate);
	void ReceiveBeginPlay();
	void InpActEvt_Interact_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Actionbar_Slot_1_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Actionbar_Slot_2_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Actionbar_Slot_3_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Skill_1_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Skill_2_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Attack_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Attack_K2Node_InputActionEvent_8(const struct FKey& Key);
	void _alt_attack_K2Node_InputActionEvent_9(const struct FKey& Key);
	void _alt_attack_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Weapon_Quick_Swap_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Actionbar_Slot_4_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_F1_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_V_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Front_Face_Camera__Self_Inspect__K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Front_Face_Camera__Self_Inspect__K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Emote_Menu_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Emote_Menu_K2Node_InputActionEvent_20(const struct FKey& Key);
	void ParachuteDeploy__UpdateFunc();
	void ParachuteDeploy__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void FireAnimationTL__UpdateFunc();
	void FireAnimationTL__FinishedFunc();
	void UserConstructionScript();
	void OnRep_IsDead();
	void OnRep_AI_Target();
	void OnRep_AimingMode();
	void RestoreHealth(int32 HealAmount, bool HealEffect, class APawn* PawnThatAppliedTheHeal, bool CleanseDebuffs, float ScoreMultiplier);
	void AddBuffDebuff(class UClass* BuffDebuff, class APawn* BuffApplier, float BuffScaler, class ABP_SkillBase_C* LinkedSkill_Optional_, bool CanRefresh, class ABP_BuffDebuffBase_C** SpawnedBuffRef);
	void EndBuffDebuff(class UClass* BuffDebuffClass);
	void OnRep_Invisible();
	void SetInvisibility();
	void OnRep_ActiveEquipable();
	void OnRep_FirstEquipable();
	void OnRep_SecondEquipable();
	void OnRep_ExplosiveEquipable();
	void InitActiveEquipable(int32 Equipable);
	void OnRep_Equipable1();
	void OnRep_Equipable2();
	void OnRep_Explosive();
	void OnRep_VehicleRef();
	void SetActiveEquipable();
	void AddRecoil(float RecoilAmount, bool AddSideWaysRecoil, bool RandomRecoil);
	void ScaleAxisInput(float InputAxisValue, float* OutputAxisValue);
	void ApplyMovementTypeMultiplier(float A, float* Return);
	void OnRep_Skill1();
	void OnRep_Skill2();
	void HideSelf_Scope_(bool HideSelf);
	void RefreshAimingMode();
	void getSkill(int32 SkillIndex, struct FDataTableRowHandle* Skill);
	void AI_GetRandomSkill(int32* SkillIndex);
	void AI_FilterAvailableSkills();
	void AI_GetEnemyEngagementDelay(class AActor* EnemyToEngage, float* Delay);
	void AI_SkillUse(class FName SkillName, int32 SkillIndex);
	void OnRep_ThrowableRef();
	void GetWeaponOfTypeSlot(TArray<E_WeaponTypes>& WeaponTypes, int32* WeaponSlot, bool* WeaponTypeFound);
	void OnRep_CharacterClass();
	void OnRep_ParachuteOpen();
	void CalculateFallDamageAmount(bool* TakeFallDamage, float* DamageAmount);
	void OnRep_Skill1onCD();
	void OnRep_Skill2onCD();
	void IsReloadingCurrentWeapon_(bool* Reloading, float* ReloadPercentage);
	void FindPlayerInGameStateStats(int32 PlayerIndex, bool* PlayerFound);
	void CheckIfVulnerable(bool* Vulnerable);
	void OnRep_CharacterCustomization();
	void CanSwapToThrowable_(class UObject* Weapon, bool* CanSwap_0);
	void OnRep_AI_Controlled();
	float GetTickRate();
	void CheckIfWeaponNeedsToAutoReload(bool* AutoReload);
	void SetRimLight(bool EnableRimLight);
	void OnRep_CoreWeapon();
	void OnRep_CoreWeaponEquipable();
	void AI_CheckIfTargetIsStillValid(bool* Valid);
	void OnRep_VehicleSeat();
	void ExitVehicleOrSeat();
	void AI_IsEnemyCharacterLowHealth(class ABP_Character_C* Character, bool* IsLowHealth);
	void AI_IsTargetInRange(float Range, bool* InCloseRange);
	void GetEquipableWithIndex(int32 Index_0, class ABP_EquipableBase_C** Equipable);
	void OnRep_Crouching();
	class UAnimMontage* GetWeaponSwapMontage(int32 Index_0);
	void Get_Kill_Assist_Player(int32* AssistPlayerIndex, class ABP_PlayerState_C** AssistPlayerState, bool* AssistsFound, class APawn** AssistPawn, bool* Count_as_kill);
	void GetCurrentEquipedWeaponType(E_WeaponTypes* WeaponType);
	void OnRep_CharacterHasPlayerOwner();
	bool AI_GetForceLock_TargetPrioritize_(class UObject* Object);
	void OnRep_VehicleDucking();
	void ShouldSlowDownWhenUsingEquipable_(bool* SlowDownWhenUsing_HaltSprint_);
	void IsShielded_(bool* Shielded_0);
	void FetchPing(class APlayerState** PlayerState_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_C">();
	}
	static class ABP_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_C>();
	}
};
static_assert(alignof(ABP_Character_C) == 0x000010, "Wrong alignment on ABP_Character_C");
static_assert(sizeof(ABP_Character_C) == 0x000B20, "Wrong size on ABP_Character_C");
static_assert(offsetof(ABP_Character_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PawnSensing) == 0x0004C8, "Member 'ABP_Character_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SwayTransform) == 0x0004D0, "Member 'ABP_Character_C::SwayTransform' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Sniper_Aim_Sway) == 0x0004D8, "Member 'ABP_Character_C::Sniper_Aim_Sway' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FollowCamera) == 0x0004E0, "Member 'ABP_Character_C::FollowCamera' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FrontCamSpringArm) == 0x0004E8, "Member 'ABP_Character_C::FrontCamSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GroinAnchor) == 0x0004F0, "Member 'ABP_Character_C::GroinAnchor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HeadCollider) == 0x0004F8, "Member 'ABP_Character_C::HeadCollider' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Feet) == 0x000500, "Member 'ABP_Character_C::Feet' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Back) == 0x000508, "Member 'ABP_Character_C::Back' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FaceCamLoc) == 0x000510, "Member 'ABP_Character_C::FaceCamLoc' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Torso) == 0x000518, "Member 'ABP_Character_C::Torso' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FacialHair) == 0x000520, "Member 'ABP_Character_C::FacialHair' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LowerFace) == 0x000528, "Member 'ABP_Character_C::LowerFace' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UpperFace) == 0x000530, "Member 'ABP_Character_C::UpperFace' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Parachute) == 0x000538, "Member 'ABP_Character_C::Parachute' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Legs) == 0x000540, "Member 'ABP_Character_C::Legs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Hat) == 0x000548, "Member 'ABP_Character_C::Hat' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CameraBoom) == 0x000550, "Member 'ABP_Character_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterMesh) == 0x000558, "Member 'ABP_Character_C::CharacterMesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Actor_Rotation) == 0x000560, "Member 'ABP_Character_C::Actor_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VehicleSeatCameraAnchor) == 0x000568, "Member 'ABP_Character_C::VehicleSeatCameraAnchor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FrontCamera) == 0x000570, "Member 'ABP_Character_C::FrontCamera' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HatExtra) == 0x000578, "Member 'ABP_Character_C::HatExtra' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ArrowForCameraPitchOffset) == 0x000580, "Member 'ABP_Character_C::ArrowForCameraPitchOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UsernameLocation) == 0x000588, "Member 'ABP_Character_C::UsernameLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PawnDataComponent) == 0x000590, "Member 'ABP_Character_C::PawnDataComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1_NewTrack_0_D8E2316D42E8AAC66C62C19F5D83BA45) == 0x000598, "Member 'ABP_Character_C::Timeline_1_NewTrack_0_D8E2316D42E8AAC66C62C19F5D83BA45' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1__Direction_D8E2316D42E8AAC66C62C19F5D83BA45) == 0x00059C, "Member 'ABP_Character_C::Timeline_1__Direction_D8E2316D42E8AAC66C62C19F5D83BA45' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Timeline_1) == 0x0005A0, "Member 'ABP_Character_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationTL_Kickback_D4A7BC19470D4F252961F4A766E24D89) == 0x0005A8, "Member 'ABP_Character_C::FireAnimationTL_Kickback_D4A7BC19470D4F252961F4A766E24D89' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationTL_Pitch_D4A7BC19470D4F252961F4A766E24D89) == 0x0005AC, "Member 'ABP_Character_C::FireAnimationTL_Pitch_D4A7BC19470D4F252961F4A766E24D89' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationTL__Direction_D4A7BC19470D4F252961F4A766E24D89) == 0x0005B0, "Member 'ABP_Character_C::FireAnimationTL__Direction_D4A7BC19470D4F252961F4A766E24D89' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationTL) == 0x0005B8, "Member 'ABP_Character_C::FireAnimationTL' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ParachuteDeploy_NewTrack_0_2BFF20F84400E6DA91A68D9C5FD24DBF) == 0x0005C0, "Member 'ABP_Character_C::ParachuteDeploy_NewTrack_0_2BFF20F84400E6DA91A68D9C5FD24DBF' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ParachuteDeploy__Direction_2BFF20F84400E6DA91A68D9C5FD24DBF) == 0x0005C4, "Member 'ABP_Character_C::ParachuteDeploy__Direction_2BFF20F84400E6DA91A68D9C5FD24DBF' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ParachuteDeploy) == 0x0005C8, "Member 'ABP_Character_C::ParachuteDeploy' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Delta_Seconds) == 0x0005D0, "Member 'ABP_Character_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_Controlled) == 0x0005D4, "Member 'ABP_Character_C::AI_Controlled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CoreWeapon) == 0x0005D8, "Member 'ABP_Character_C::CoreWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Equipable1) == 0x0005E8, "Member 'ABP_Character_C::Equipable1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Equipable2) == 0x0005F8, "Member 'ABP_Character_C::Equipable2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Explosive) == 0x000608, "Member 'ABP_Character_C::Explosive' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CoreWeaponEquipable) == 0x000618, "Member 'ABP_Character_C::CoreWeaponEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FirstEquipable) == 0x000620, "Member 'ABP_Character_C::FirstEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SecondEquipable) == 0x000628, "Member 'ABP_Character_C::SecondEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ControllerRef_OnlyValidOnServer_) == 0x000630, "Member 'ABP_Character_C::ControllerRef_OnlyValidOnServer_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AnimInstance) == 0x000638, "Member 'ABP_Character_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UsernameRef) == 0x000640, "Member 'ABP_Character_C::UsernameRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InteractableRef) == 0x000648, "Member 'ABP_Character_C::InteractableRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterClass) == 0x000650, "Member 'ABP_Character_C::CharacterClass' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsDead) == 0x000651, "Member 'ABP_Character_C::IsDead' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsLocalCharacter_Own_) == 0x000652, "Member 'ABP_Character_C::IsLocalCharacter_Own_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, KillerName) == 0x000658, "Member 'ABP_Character_C::KillerName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UserName) == 0x000670, "Member 'ABP_Character_C::UserName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentHealth) == 0x000680, "Member 'ABP_Character_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_CanFireWeapon) == 0x000684, "Member 'ABP_Character_C::AI_CanFireWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_CanAttackPlanes) == 0x000685, "Member 'ABP_Character_C::AI_CanAttackPlanes' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_CanAttackVehicles) == 0x000686, "Member 'ABP_Character_C::AI_CanAttackVehicles' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_MovementFailed) == 0x000687, "Member 'ABP_Character_C::AI_MovementFailed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_MeleeEquiped) == 0x000688, "Member 'ABP_Character_C::AI_MeleeEquiped' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_Target) == 0x000690, "Member 'ABP_Character_C::AI_Target' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ExplosiveEquipable) == 0x000698, "Member 'ABP_Character_C::ExplosiveEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ActiveEquipable) == 0x0006A0, "Member 'ABP_Character_C::ActiveEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ActiveEquipableIndex) == 0x0006A8, "Member 'ABP_Character_C::ActiveEquipableIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PrimaryFirePressed) == 0x0006AC, "Member 'ABP_Character_C::PrimaryFirePressed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_RandomFireInaccuracy) == 0x0006B0, "Member 'ABP_Character_C::AI_RandomFireInaccuracy' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VehicleRef) == 0x0006B8, "Member 'ABP_Character_C::VehicleRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MaxHealth) == 0x0006C0, "Member 'ABP_Character_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DamageRecieved_ClientOnly_) == 0x0006C8, "Member 'ABP_Character_C::DamageRecieved_ClientOnly_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BurningBulletsEnabled) == 0x0006D8, "Member 'ABP_Character_C::BurningBulletsEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PoisonDamageEnabled) == 0x0006D9, "Member 'ABP_Character_C::PoisonDamageEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Invisible) == 0x0006DA, "Member 'ABP_Character_C::Invisible' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RestoreHPOnHitEnabled) == 0x0006DB, "Member 'ABP_Character_C::RestoreHPOnHitEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsBurning) == 0x0006DC, "Member 'ABP_Character_C::IsBurning' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsPoisoned) == 0x0006DD, "Member 'ABP_Character_C::IsPoisoned' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1CooldownTime) == 0x0006E0, "Member 'ABP_Character_C::Skill1CooldownTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2CooldownTime) == 0x0006E4, "Member 'ABP_Character_C::Skill2CooldownTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1CooldownTimer) == 0x0006E8, "Member 'ABP_Character_C::Skill1CooldownTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2CooldownTimer) == 0x0006EC, "Member 'ABP_Character_C::Skill2CooldownTimer' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1onCD) == 0x0006F0, "Member 'ABP_Character_C::Skill1onCD' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2onCD) == 0x0006F1, "Member 'ABP_Character_C::Skill2onCD' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1) == 0x0006F8, "Member 'ABP_Character_C::Skill1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2) == 0x000708, "Member 'ABP_Character_C::Skill2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1Active) == 0x000718, "Member 'ABP_Character_C::Skill1Active' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2Active) == 0x000719, "Member 'ABP_Character_C::Skill2Active' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1Ref) == 0x000720, "Member 'ABP_Character_C::Skill1Ref' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2Ref) == 0x000728, "Member 'ABP_Character_C::Skill2Ref' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DamageMultiplier) == 0x000730, "Member 'ABP_Character_C::DamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UnAlteredDamageReceived_Server_) == 0x000738, "Member 'ABP_Character_C::UnAlteredDamageReceived_Server_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BreakInvisibility) == 0x000748, "Member 'ABP_Character_C::BreakInvisibility' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AimingMode) == 0x000758, "Member 'ABP_Character_C::AimingMode' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanUseEquipable) == 0x000759, "Member 'ABP_Character_C::CanUseEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Kills) == 0x00075C, "Member 'ABP_Character_C::Kills' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Deaths) == 0x000760, "Member 'ABP_Character_C::Deaths' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Score) == 0x000764, "Member 'ABP_Character_C::Score' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_RandomLookAroundSpeed) == 0x000768, "Member 'ABP_Character_C::AI_RandomLookAroundSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_TargetVehicleVelocity) == 0x00076C, "Member 'ABP_Character_C::AI_TargetVehicleVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DamageReceiveMultiplier) == 0x000778, "Member 'ABP_Character_C::DamageReceiveMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BuffDebuffs) == 0x000780, "Member 'ABP_Character_C::BuffDebuffs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CoreWeaponIndex) == 0x000790, "Member 'ABP_Character_C::CoreWeaponIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Weapon1Index) == 0x000794, "Member 'ABP_Character_C::Weapon1Index' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Weapon2Index) == 0x000798, "Member 'ABP_Character_C::Weapon2Index' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ExplosiveIndex) == 0x00079C, "Member 'ABP_Character_C::ExplosiveIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Forward_Axis_Value) == 0x0007A0, "Member 'ABP_Character_C::Forward_Axis_Value' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Right_Axis_Value) == 0x0007A4, "Member 'ABP_Character_C::Right_Axis_Value' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WalkSpeedMultiplier) == 0x0007A8, "Member 'ABP_Character_C::WalkSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AimSpeedMultiplier) == 0x0007AC, "Member 'ABP_Character_C::AimSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MovementType) == 0x0007B0, "Member 'ABP_Character_C::MovementType' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WantsToSprint) == 0x0007B1, "Member 'ABP_Character_C::WantsToSprint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Sprinting) == 0x0007B2, "Member 'ABP_Character_C::Sprinting' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SingularDamageBoost) == 0x0007B4, "Member 'ABP_Character_C::SingularDamageBoost' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasFiredAWeapon) == 0x0007B8, "Member 'ABP_Character_C::HasFiredAWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1Loaded) == 0x0007C8, "Member 'ABP_Character_C::Skill1Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2Loaded) == 0x0007C9, "Member 'ABP_Character_C::Skill2Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HideEquipables) == 0x0007CA, "Member 'ABP_Character_C::HideEquipables' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TempThrowableRef_skill_) == 0x0007D0, "Member 'ABP_Character_C::TempThrowableRef_skill_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1Index) == 0x0007D8, "Member 'ABP_Character_C::Skill1Index' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2Index) == 0x0007DC, "Member 'ABP_Character_C::Skill2Index' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RecentlyDamaged) == 0x0007E0, "Member 'ABP_Character_C::RecentlyDamaged' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireDelay) == 0x0007E4, "Member 'ABP_Character_C::FireDelay' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EquipableSwitched) == 0x0007E8, "Member 'ABP_Character_C::EquipableSwitched' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InFPSView) == 0x0007F8, "Member 'ABP_Character_C::InFPSView' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EnterFiringCloseView) == 0x0007F9, "Member 'ABP_Character_C::EnterFiringCloseView' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UsingEquipable) == 0x0007FA, "Member 'ABP_Character_C::UsingEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsSwapping) == 0x0007FB, "Member 'ABP_Character_C::IsSwapping' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SecondaryFirePressed) == 0x0007FC, "Member 'ABP_Character_C::SecondaryFirePressed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanEnableCameraLag) == 0x0007FD, "Member 'ABP_Character_C::CanEnableCameraLag' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VehicleSeat) == 0x000800, "Member 'ABP_Character_C::VehicleSeat' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WeaponSwapped) == 0x000808, "Member 'ABP_Character_C::WeaponSwapped' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentTarget) == 0x000818, "Member 'ABP_Character_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_RandomStationaryLookAtRotation) == 0x000820, "Member 'ABP_Character_C::AI_RandomStationaryLookAtRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_AvailableSkills) == 0x000830, "Member 'ABP_Character_C::AI_AvailableSkills' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_SensedPawn) == 0x000840, "Member 'ABP_Character_C::AI_SensedPawn' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SprintBlocked) == 0x000848, "Member 'ABP_Character_C::SprintBlocked' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HeightAboveGround) == 0x00084C, "Member 'ABP_Character_C::HeightAboveGround' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ParachuteOpen) == 0x000850, "Member 'ABP_Character_C::ParachuteOpen' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpeedBoostActive) == 0x000851, "Member 'ABP_Character_C::SpeedBoostActive' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_LastTargetThatAttackedUs) == 0x000858, "Member 'ABP_Character_C::AI_LastTargetThatAttackedUs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PawnThatKilledUs) == 0x000860, "Member 'ABP_Character_C::PawnThatKilledUs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastPawnThatAttackedUs) == 0x000868, "Member 'ABP_Character_C::LastPawnThatAttackedUs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LightDirectionSaved) == 0x000870, "Member 'ABP_Character_C::LightDirectionSaved' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OutfitLoaded) == 0x00087C, "Member 'ABP_Character_C::OutfitLoaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MeshMaterialLoaded) == 0x00087D, "Member 'ABP_Character_C::MeshMaterialLoaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HatLoaded) == 0x00087E, "Member 'ABP_Character_C::HatLoaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InShadow) == 0x00087F, "Member 'ABP_Character_C::InShadow' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LookAtKiller) == 0x000880, "Member 'ABP_Character_C::LookAtKiller' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RecentlyUsedWeapon) == 0x000881, "Member 'ABP_Character_C::RecentlyUsedWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Unkillable_ForTesting_) == 0x000882, "Member 'ABP_Character_C::Unkillable_ForTesting_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill1Ready) == 0x000888, "Member 'ABP_Character_C::Skill1Ready' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Skill2Ready) == 0x000898, "Member 'ABP_Character_C::Skill2Ready' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BonusDamageAmount) == 0x0008A8, "Member 'ABP_Character_C::BonusDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TeleportLocation) == 0x0008AC, "Member 'ABP_Character_C::TeleportLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AimFocusAmount) == 0x0008B8, "Member 'ABP_Character_C::AimFocusAmount' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DeathCamRotation) == 0x0008BC, "Member 'ABP_Character_C::DeathCamRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterCustomization) == 0x0008C8, "Member 'ABP_Character_C::CharacterCustomization' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ClassSet) == 0x000904, "Member 'ABP_Character_C::ClassSet' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UsingScopedWeapon) == 0x000905, "Member 'ABP_Character_C::UsingScopedWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastNonThrowableEquipable) == 0x000908, "Member 'ABP_Character_C::LastNonThrowableEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpreadMultiplier) == 0x00090C, "Member 'ABP_Character_C::SpreadMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Shielded) == 0x000910, "Member 'ABP_Character_C::Shielded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterKillHeight) == 0x000914, "Member 'ABP_Character_C::CharacterKillHeight' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TotalLeftRightAxisValue) == 0x000918, "Member 'ABP_Character_C::TotalLeftRightAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BackwardAxisValue) == 0x00091C, "Member 'ABP_Character_C::BackwardAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TotalForwardBackwardAxisValue) == 0x000920, "Member 'ABP_Character_C::TotalForwardBackwardAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LeftAxisValue) == 0x000924, "Member 'ABP_Character_C::LeftAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VehicleBeneathUs) == 0x000928, "Member 'ABP_Character_C::VehicleBeneathUs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_TargetCenterLocation) == 0x000930, "Member 'ABP_Character_C::AI_TargetCenterLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, GunBlockDistance) == 0x00093C, "Member 'ABP_Character_C::GunBlockDistance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VerticalCameraOffset_GunBlock_) == 0x000940, "Member 'ABP_Character_C::VerticalCameraOffset_GunBlock_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HorizontalCameraOffset_GunBlock_) == 0x000944, "Member 'ABP_Character_C::HorizontalCameraOffset_GunBlock_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_CanUseUtility_Explosive_) == 0x000948, "Member 'ABP_Character_C::AI_CanUseUtility_Explosive_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TempHideEquipables) == 0x000949, "Member 'ABP_Character_C::TempHideEquipables' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastLaunchInflicter) == 0x000950, "Member 'ABP_Character_C::LastLaunchInflicter' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DeathLocation) == 0x000958, "Member 'ABP_Character_C::DeathLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanPlayMontages) == 0x000964, "Member 'ABP_Character_C::CanPlayMontages' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FrontCamActive) == 0x000965, "Member 'ABP_Character_C::FrontCamActive' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Equipable_We_Are_Swapping_To) == 0x000968, "Member 'ABP_Character_C::Equipable_We_Are_Swapping_To' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, IsSwapping_server_) == 0x00096C, "Member 'ABP_Character_C::IsSwapping_server_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanSwap) == 0x00096D, "Member 'ABP_Character_C::CanSwap' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TempHideEquipables_Client_) == 0x00096E, "Member 'ABP_Character_C::TempHideEquipables_Client_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreferedEquipable) == 0x000970, "Member 'ABP_Character_C::PreferedEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DealImpactDamage) == 0x000974, "Member 'ABP_Character_C::DealImpactDamage' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, InAir) == 0x000975, "Member 'ABP_Character_C::InAir' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ReceivedPiercingDamage) == 0x000978, "Member 'ABP_Character_C::ReceivedPiercingDamage' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PiercingDamageEnabled) == 0x000988, "Member 'ABP_Character_C::PiercingDamageEnabled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Legs_MID) == 0x000990, "Member 'ABP_Character_C::Legs_MID' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Character_MID) == 0x000998, "Member 'ABP_Character_C::Character_MID' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Hat_Item_MID) == 0x0009A0, "Member 'ABP_Character_C::Hat_Item_MID' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Torso_MIDs) == 0x0009B0, "Member 'ABP_Character_C::Torso_MIDs' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CustomizationLoaded) == 0x0009C0, "Member 'ABP_Character_C::CustomizationLoaded' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MapCamRef) == 0x0009C8, "Member 'ABP_Character_C::MapCamRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpawnCamLocationTarget) == 0x0009D0, "Member 'ABP_Character_C::SpawnCamLocationTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HasDied) == 0x0009E0, "Member 'ABP_Character_C::HasDied' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RunSpeedMultiplier) == 0x0009F0, "Member 'ABP_Character_C::RunSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TimeSinceLastSprint) == 0x0009F4, "Member 'ABP_Character_C::TimeSinceLastSprint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VerticalCameraOffset_Aiming_) == 0x0009F8, "Member 'ABP_Character_C::VerticalCameraOffset_Aiming_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ObstructedSpringArmYOffset_AntiCornerExploit__NonAim) == 0x0009FC, "Member 'ABP_Character_C::ObstructedSpringArmYOffset_AntiCornerExploit__NonAim' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ObstructedSpringArmYOffset_AntiCornerExploit__Aim) == 0x000A00, "Member 'ABP_Character_C::ObstructedSpringArmYOffset_AntiCornerExploit__Aim' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpineYawOffset) == 0x000A04, "Member 'ABP_Character_C::SpineYawOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ReplicatedMeshAndBoomRotation) == 0x000A08, "Member 'ABP_Character_C::ReplicatedMeshAndBoomRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DesiredTargetArmLength) == 0x000A14, "Member 'ABP_Character_C::DesiredTargetArmLength' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EmoteMenu) == 0x000A18, "Member 'ABP_Character_C::EmoteMenu' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EmotePlaying) == 0x000A20, "Member 'ABP_Character_C::EmotePlaying' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CurrentEmoteMontage) == 0x000A28, "Member 'ABP_Character_C::CurrentEmoteMontage' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, KillerFaceCamRef) == 0x000A30, "Member 'ABP_Character_C::KillerFaceCamRef' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Crouching) == 0x000A38, "Member 'ABP_Character_C::Crouching' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RelativeMeshLocationInSeat) == 0x000A3C, "Member 'ABP_Character_C::RelativeMeshLocationInSeat' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_IsMeleeCommando) == 0x000A40, "Member 'ABP_Character_C::AI_IsMeleeCommando' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_KillEmoteInt) == 0x000A44, "Member 'ABP_Character_C::AI_KillEmoteInt' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationPitchTarget) == 0x000A48, "Member 'ABP_Character_C::FireAnimationPitchTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireAnimationKickBackTarget) == 0x000A4C, "Member 'ABP_Character_C::FireAnimationKickBackTarget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastLocation) == 0x000A50, "Member 'ABP_Character_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterVelocity_Manual_) == 0x000A5C, "Member 'ABP_Character_C::CharacterVelocity_Manual_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SpectatingPlayers_indexes_) == 0x000A68, "Member 'ABP_Character_C::SpectatingPlayers_indexes_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CameraBoomRelLocation_Spectator_) == 0x000A78, "Member 'ABP_Character_C::CameraBoomRelLocation_Spectator_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CameraFOV_Spectator_) == 0x000A84, "Member 'ABP_Character_C::CameraFOV_Spectator_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VelocityAfterDeath) == 0x000A88, "Member 'ABP_Character_C::VelocityAfterDeath' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ExtraVelocityAfterDeath) == 0x000A94, "Member 'ABP_Character_C::ExtraVelocityAfterDeath' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterVelocityManualInterpolated) == 0x000AA0, "Member 'ABP_Character_C::CharacterVelocityManualInterpolated' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PreviousEquipableIndex) == 0x000AAC, "Member 'ABP_Character_C::PreviousEquipableIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AreEquipablesHidden_) == 0x000AB0, "Member 'ABP_Character_C::AreEquipablesHidden_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanUseAfterSwapDelayTime) == 0x000AB4, "Member 'ABP_Character_C::CanUseAfterSwapDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FireRateCDMultiplier) == 0x000AB8, "Member 'ABP_Character_C::FireRateCDMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AI_CanSwap) == 0x000ABC, "Member 'ABP_Character_C::AI_CanSwap' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PotentialKillAssists) == 0x000AC0, "Member 'ABP_Character_C::PotentialKillAssists' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RequestedQueueSlot) == 0x000AD0, "Member 'ABP_Character_C::RequestedQueueSlot' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FullBodyAnimationTakeOver) == 0x000AD4, "Member 'ABP_Character_C::FullBodyAnimationTakeOver' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, UseCameraAimingSway) == 0x000AD5, "Member 'ABP_Character_C::UseCameraAimingSway' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AddedCameraYaw) == 0x000AD8, "Member 'ABP_Character_C::AddedCameraYaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RecoilSidewaysDirection) == 0x000ADC, "Member 'ABP_Character_C::RecoilSidewaysDirection' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, X__Roll_) == 0x000AE0, "Member 'ABP_Character_C::X__Roll_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, MouseIsBeingMoved) == 0x000AE4, "Member 'ABP_Character_C::MouseIsBeingMoved' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, SwayAmount) == 0x000AE8, "Member 'ABP_Character_C::SwayAmount' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RandomRecoilX) == 0x000AEC, "Member 'ABP_Character_C::RandomRecoilX' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, RandomRecoilY) == 0x000AF0, "Member 'ABP_Character_C::RandomRecoilY' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CameraBoomAimOffset) == 0x000AF4, "Member 'ABP_Character_C::CameraBoomAimOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CameraBoomCrouchOffset) == 0x000AF8, "Member 'ABP_Character_C::CameraBoomCrouchOffset' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterHasPlayerOwner) == 0x000AFC, "Member 'ABP_Character_C::CharacterHasPlayerOwner' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, VehicleDucking) == 0x000AFD, "Member 'ABP_Character_C::VehicleDucking' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CharacterData) == 0x000B00, "Member 'ABP_Character_C::CharacterData' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WasRecentlyInAir) == 0x000B14, "Member 'ABP_Character_C::WasRecentlyInAir' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AFA) == 0x000B18, "Member 'ABP_Character_C::AFA' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AHD) == 0x000B1C, "Member 'ABP_Character_C::AHD' has a wrong offset!");

}

