#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleBase

#include "Basic.hpp"

#include "BP_VehicleBase_classes.hpp"
#include "BP_VehicleBase_parameters.hpp"


namespace SDK
{

// Function BP_VehicleBase.BP_VehicleBase_C.ExecuteUbergraph_BP_VehicleBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::ExecuteUbergraph_BP_VehicleBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ExecuteUbergraph_BP_VehicleBase");

	Params::BP_VehicleBase_C_ExecuteUbergraph_BP_VehicleBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.InitVehicleThemeSkin
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::InitVehicleThemeSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "InitVehicleThemeSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.AttemptToRemoveVehicle
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::AttemptToRemoveVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "AttemptToRemoveVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.MC_WreckageDestroy
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::MC_WreckageDestroy(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "MC_WreckageDestroy");

	Params::BP_VehicleBase_C_MC_WreckageDestroy Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.RespawnVehicle
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::RespawnVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "RespawnVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.InitPawnDataTeam
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::InitPawnDataTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "InitPawnDataTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.AddPushForce
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinImpulse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "AddPushForce");

	Params::BP_VehicleBase_C_AddPushForce Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.SpinImpulse = std::move(SpinImpulse);
	Parms.SpinLocation = std::move(SpinLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OC_AddPushForce
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinImpulse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::OC_AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OC_AddPushForce");

	Params::BP_VehicleBase_C_OC_AddPushForce Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.SpinImpulse = std::move(SpinImpulse);
	Parms.SpinLocation = std::move(SpinLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_AddPushForce
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Impulse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinImpulse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SpinLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::S_AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_AddPushForce");

	Params::BP_VehicleBase_C_S_AddPushForce Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.SpinImpulse = std::move(SpinImpulse);
	Parms.SpinLocation = std::move(SpinLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_DamageSelf
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::S_DamageSelf(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_DamageSelf");

	Params::BP_VehicleBase_C_S_DamageSelf Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ResetRemove
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::ResetRemove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ResetRemove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.DamagedByPlane(Server)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlaneBase_C*                  Plane                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::DamagedByPlane_Server_(class ABP_PlaneBase_C* Plane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "DamagedByPlane(Server)");

	Params::BP_VehicleBase_C_DamagedByPlane_Server_ Parms{};

	Parms.Plane = Plane;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_SetRepaired
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::S_SetRepaired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_SetRepaired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_SetRepairing
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Repairing_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_VehicleBase_C::S_SetRepairing(bool Repairing_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_SetRepairing");

	Params::BP_VehicleBase_C_S_SetRepairing Parms{};

	Parms.Repairing_0 = Repairing_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.IsPossessedEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::IsPossessedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "IsPossessedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.HealthRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::HealthRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "HealthRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_DestroyVehicle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::S_DestroyVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_DestroyVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OC_Damaged
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AttackerLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::OC_Damaged(int32 DamageAmount, const struct FVector& AttackerLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OC_Damaged");

	Params::BP_VehicleBase_C_OC_Damaged Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.AttackerLocation = std::move(AttackerLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.DestroyedRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::DestroyedRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "DestroyedRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ReceiveUnpossessed");

	Params::BP_VehicleBase_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ReceivePossessed");

	Params::BP_VehicleBase_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.MC_Damaged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   DamageLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageLocationRelative                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "MC_Damaged");

	Params::BP_VehicleBase_C_MC_Damaged Parms{};

	Parms.DamageLocation = std::move(DamageLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageLocationRelative = std::move(DamageLocationRelative);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.S_RemoveVehicle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            AttackerPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::S_RemoveVehicle(float Delay, class APawn* AttackerPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "S_RemoveVehicle");

	Params::BP_VehicleBase_C_S_RemoveVehicle Parms{};

	Parms.Delay = Delay;
	Parms.AttackerPawn = AttackerPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ApplyDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageHitLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            AttackerPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Debuff                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCriticalHit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreTeamProtection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      SpecialKillMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ShouldBreakInvisibility                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPiercingDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_VehicleBase_C::ApplyDamage(int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ApplyDamage");

	Params::BP_VehicleBase_C_ApplyDamage Parms{};

	Parms.DamageAmount = DamageAmount;
	Parms.DamageHitLocation = std::move(DamageHitLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.AttackerPawn = AttackerPawn;
	Parms.Debuff = Debuff;
	Parms.DamageType = DamageType;
	Parms.PlayerIndex = PlayerIndex;
	Parms.IsCriticalHit = IsCriticalHit;
	Parms.IgnoreTeamProtection = IgnoreTeamProtection;
	Parms.SpecialKillMessage = std::move(SpecialKillMessage);
	Parms.ShouldBreakInvisibility = ShouldBreakInvisibility;
	Parms.IsPiercingDamage = IsPiercingDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ReceiveTick");

	Params::BP_VehicleBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_VehicleBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.InpActEvt_Repair_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_VehicleBase_C::InpActEvt_Repair_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "InpActEvt_Repair_K2Node_InputActionEvent_0");

	Params::BP_VehicleBase_C_InpActEvt_Repair_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.InpActEvt_Repair_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_VehicleBase_C::InpActEvt_Repair_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "InpActEvt_Repair_K2Node_InputActionEvent_1");

	Params::BP_VehicleBase_C_InpActEvt_Repair_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.InpActEvt_Interact_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_VehicleBase_C::InpActEvt_Interact_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "InpActEvt_Interact_K2Node_InputActionEvent_2");

	Params::BP_VehicleBase_C_InpActEvt_Interact_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_Destroyed
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_Destroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_Destroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.GetVehicleHealthInformation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  CurrentHealthPercentage                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  CurrentHealthAmount                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  MaxHealth                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::GetVehicleHealthInformation(float* CurrentHealthPercentage, int32* CurrentHealthAmount, int32* MaxHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "GetVehicleHealthInformation");

	Params::BP_VehicleBase_C_GetVehicleHealthInformation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentHealthPercentage != nullptr)
		*CurrentHealthPercentage = Parms.CurrentHealthPercentage;

	if (CurrentHealthAmount != nullptr)
		*CurrentHealthAmount = Parms.CurrentHealthAmount;

	if (MaxHealth != nullptr)
		*MaxHealth = Parms.MaxHealth;
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_AI_Controlled
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_AI_Controlled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_AI_Controlled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.EnableAIController
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::EnableAIController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "EnableAIController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_Health
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_Health()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_Health");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_Possessed
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_Possessed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_Possessed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_Respawning
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_Respawning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_Respawning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_Repairing
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_Repairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_Repairing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.DamageSelf
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::DamageSelf(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "DamageSelf");

	Params::BP_VehicleBase_C_DamageSelf Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_VehicleBase.BP_VehicleBase_C.IsOwnVehicle?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   OwnVehicle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_VehicleBase_C::IsOwnVehicle_(bool* OwnVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "IsOwnVehicle?");

	Params::BP_VehicleBase_C_IsOwnVehicle_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwnVehicle != nullptr)
		*OwnVehicle = Parms.OwnVehicle;
}


// Function BP_VehicleBase.BP_VehicleBase_C.GetPhysicsMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UStaticMeshComponent**            Array_Element                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::GetPhysicsMesh(class UStaticMeshComponent** Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "GetPhysicsMesh");

	Params::BP_VehicleBase_C_GetPhysicsMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array_Element != nullptr)
		*Array_Element = Parms.Array_Element;
}


// Function BP_VehicleBase.BP_VehicleBase_C.GetFreeSeats
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 OwnTeam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_VehicleSeat_C*>*       FreeSeats                                              (Parm, OutParm)
// bool*                                   hasEnemyInSeat                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_VehicleBase_C::GetFreeSeats(E_Teams OwnTeam, TArray<class ABP_VehicleSeat_C*>* FreeSeats, bool* hasEnemyInSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "GetFreeSeats");

	Params::BP_VehicleBase_C_GetFreeSeats Parms{};

	Parms.OwnTeam = OwnTeam;

	UObject::ProcessEvent(Func, &Parms);

	if (FreeSeats != nullptr)
		*FreeSeats = std::move(Parms.FreeSeats);

	if (hasEnemyInSeat != nullptr)
		*hasEnemyInSeat = Parms.hasEnemyInSeat;
}


// Function BP_VehicleBase.BP_VehicleBase_C.OnRep_VehicleSkinTheme
// (BlueprintCallable, BlueprintEvent)

void ABP_VehicleBase_C::OnRep_VehicleSkinTheme()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "OnRep_VehicleSkinTheme");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_VehicleBase.BP_VehicleBase_C.GetExitLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ExitLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_VehicleBase_C::GetExitLocation(struct FVector* ExitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_VehicleBase_C", "GetExitLocation");

	Params::BP_VehicleBase_C_GetExitLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ExitLocation != nullptr)
		*ExitLocation = std::move(Parms.ExitLocation);
}

}

