#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Scenarios_structs.hpp"
#include "ST_Options_structs.hpp"
#include "E_Units_structs.hpp"
#include "ST_Loadout_structs.hpp"
#include "ST_SelectedCosmeticItems_structs.hpp"
#include "ST_ServerManagerPlayerInfo_structs.hpp"
#include "ST_ServerSettings_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameInstance.BP_GameInstance_C
// 0x02E8 (0x0490 - 0x01A8)
class UBP_GameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         BotAmount;                                         // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Tickets;                                           // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Scenarios                                   Scenario;                                          // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AIDifficulty;                                      // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Version;                                           // 0x01C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FST_Options                            Options;                                           // 0x01D8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FST_Loadout                            Loadout;                                           // 0x0248(0x00AC)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_SelectedCosmeticItems              SelectedCosmeticItems;                             // 0x02F8(0x0100)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CurrentMap;                                        // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_Units                                       SelectedClass;                                     // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         RandomMaps;                                        // 0x0410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseRandomMap;                                      // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HideHUD;                                           // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StatsReady;                                        // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ServerSettings                     ServerSettings;                                    // 0x0430(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FST_ServerManagerPlayerInfo>    PermaBanList;                                      // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         GameDurationBanList;                               // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_GameInstance(int32 EntryPoint);
	void ReceiveShutdown();
	void ReceiveInit();
	void SaveOptions();
	void LoadOptions();
	void SaveCustomization();
	void LoadCustomization();
	void SaveLoadout();
	void LoadLoadout();
	void UpdateAudioVolumes();
	void UpdateVideoOptions();
	void SaveServerSettings();
	void LoadServerSettings();
	void ClearGameDurationBanList();
	void SavePermaBanList();
	void LoadPermaBanList();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameInstance_C">();
	}
	static class UBP_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameInstance_C>();
	}
};
static_assert(alignof(UBP_GameInstance_C) == 0x000008, "Wrong alignment on UBP_GameInstance_C");
static_assert(sizeof(UBP_GameInstance_C) == 0x000490, "Wrong size on UBP_GameInstance_C");
static_assert(offsetof(UBP_GameInstance_C, UberGraphFrame) == 0x0001A8, "Member 'UBP_GameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, BotAmount) == 0x0001B0, "Member 'UBP_GameInstance_C::BotAmount' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Tickets) == 0x0001B4, "Member 'UBP_GameInstance_C::Tickets' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Scenario) == 0x0001B8, "Member 'UBP_GameInstance_C::Scenario' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, AIDifficulty) == 0x0001BC, "Member 'UBP_GameInstance_C::AIDifficulty' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Version) == 0x0001C0, "Member 'UBP_GameInstance_C::Version' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Options) == 0x0001D8, "Member 'UBP_GameInstance_C::Options' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Loadout) == 0x000248, "Member 'UBP_GameInstance_C::Loadout' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, SelectedCosmeticItems) == 0x0002F8, "Member 'UBP_GameInstance_C::SelectedCosmeticItems' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, CurrentMap) == 0x0003F8, "Member 'UBP_GameInstance_C::CurrentMap' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, SelectedClass) == 0x000408, "Member 'UBP_GameInstance_C::SelectedClass' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, RandomMaps) == 0x000410, "Member 'UBP_GameInstance_C::RandomMaps' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, UseRandomMap) == 0x000420, "Member 'UBP_GameInstance_C::UseRandomMap' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, HideHUD) == 0x000421, "Member 'UBP_GameInstance_C::HideHUD' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, Level) == 0x000424, "Member 'UBP_GameInstance_C::Level' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, StatsReady) == 0x000428, "Member 'UBP_GameInstance_C::StatsReady' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, ServerSettings) == 0x000430, "Member 'UBP_GameInstance_C::ServerSettings' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, PermaBanList) == 0x000470, "Member 'UBP_GameInstance_C::PermaBanList' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, GameDurationBanList) == 0x000480, "Member 'UBP_GameInstance_C::GameDurationBanList' has a wrong offset!");

}

