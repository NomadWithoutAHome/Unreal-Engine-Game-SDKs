#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MeleeBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Teams_structs.hpp"
#include "BP_EquipableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MeleeBase.BP_MeleeBase_C
// 0x0088 (0x0360 - 0x02D8)
class ABP_MeleeBase_C : public ABP_EquipableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MeleeBase_C;                     // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               Poison;                                            // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         KnifeThrowMode_YLocation_9F3F43AA475D87E903958D80F259E3C0; // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnifeThrowMode_Rotation_9F3F43AA475D87E903958D80F259E3C0; // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KnifeThrowMode_ZLocation_9F3F43AA475D87E903958D80F259E3C0; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KnifeThrowMode__Direction_9F3F43AA475D87E903958D80F259E3C0; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KnifeThrowMode;                                    // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          CanSwapStates;                                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ThrowingMode;                                      // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SwappingStates;                                    // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_313[0x1];                                      // 0x0313(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AttackCounter;                                     // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          CanThrow;                                          // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31A[0x6];                                      // 0x031A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0320(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         CoolDownTime;                                      // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MeleeProjectileClass;                              // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MeleeBase(int32 EntryPoint);
	void S_SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection);
	void MC_SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection);
	void SpawnMeleeProjectile(const struct FTransform& SpawnTransform, const struct FVector& TravelDirection);
	void MC_MeleeThrow();
	void S_MeleeThrow();
	void S_SetOnCooldown(bool OnCooldown_0);
	void EnterStabMode();
	void EnterThrowMode();
	void MeleeHit(class USceneComponent* AttachToComponent, bool FleshHit, const struct FVector& BackupLocation);
	void S_MeleeHit(const struct FVector& Location, class USceneComponent* AttachToComponent, bool FleshHit);
	void MC_MeleeHit(class USceneComponent* AttachToComponent, const struct FVector& Location, bool FleshHit);
	void ReceiveTick(float DeltaSeconds);
	void KnifeThrowMode__UpdateFunc();
	void KnifeThrowMode__FinishedFunc();
	void OnRep_OnCooldown();
	void CheckObstacle(class ABP_Character_C* Character, bool* ObstacleDetected);
	void Use();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MeleeBase_C">();
	}
	static class ABP_MeleeBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MeleeBase_C>();
	}
};
static_assert(alignof(ABP_MeleeBase_C) == 0x000010, "Wrong alignment on ABP_MeleeBase_C");
static_assert(sizeof(ABP_MeleeBase_C) == 0x000360, "Wrong size on ABP_MeleeBase_C");
static_assert(offsetof(ABP_MeleeBase_C, UberGraphFrame_BP_MeleeBase_C) == 0x0002D8, "Member 'ABP_MeleeBase_C::UberGraphFrame_BP_MeleeBase_C' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, Poison) == 0x0002E0, "Member 'ABP_MeleeBase_C::Poison' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, KnifeThrowMode_YLocation_9F3F43AA475D87E903958D80F259E3C0) == 0x0002E8, "Member 'ABP_MeleeBase_C::KnifeThrowMode_YLocation_9F3F43AA475D87E903958D80F259E3C0' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, KnifeThrowMode_Rotation_9F3F43AA475D87E903958D80F259E3C0) == 0x0002EC, "Member 'ABP_MeleeBase_C::KnifeThrowMode_Rotation_9F3F43AA475D87E903958D80F259E3C0' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, KnifeThrowMode_ZLocation_9F3F43AA475D87E903958D80F259E3C0) == 0x0002F0, "Member 'ABP_MeleeBase_C::KnifeThrowMode_ZLocation_9F3F43AA475D87E903958D80F259E3C0' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, KnifeThrowMode__Direction_9F3F43AA475D87E903958D80F259E3C0) == 0x0002F4, "Member 'ABP_MeleeBase_C::KnifeThrowMode__Direction_9F3F43AA475D87E903958D80F259E3C0' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, KnifeThrowMode) == 0x0002F8, "Member 'ABP_MeleeBase_C::KnifeThrowMode' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, HitActors) == 0x000300, "Member 'ABP_MeleeBase_C::HitActors' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, CanSwapStates) == 0x000310, "Member 'ABP_MeleeBase_C::CanSwapStates' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, ThrowingMode) == 0x000311, "Member 'ABP_MeleeBase_C::ThrowingMode' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, SwappingStates) == 0x000312, "Member 'ABP_MeleeBase_C::SwappingStates' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, AttackCounter) == 0x000314, "Member 'ABP_MeleeBase_C::AttackCounter' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, OnCooldown) == 0x000318, "Member 'ABP_MeleeBase_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, CanThrow) == 0x000319, "Member 'ABP_MeleeBase_C::CanThrow' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, InitialTransform) == 0x000320, "Member 'ABP_MeleeBase_C::InitialTransform' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, CoolDownTime) == 0x000350, "Member 'ABP_MeleeBase_C::CoolDownTime' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, Delta_Seconds) == 0x000354, "Member 'ABP_MeleeBase_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_MeleeBase_C, MeleeProjectileClass) == 0x000358, "Member 'ABP_MeleeBase_C::MeleeProjectileClass' has a wrong offset!");

}

