#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TankBase

#include "Basic.hpp"

#include "BP_TankBase_classes.hpp"
#include "BP_TankBase_parameters.hpp"


namespace SDK
{

// Function BP_TankBase.BP_TankBase_C.ExecuteUbergraph_BP_TankBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::ExecuteUbergraph_BP_TankBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ExecuteUbergraph_BP_TankBase");

	Params::BP_TankBase_C_ExecuteUbergraph_BP_TankBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0");

	Params::BP_TankBase_C_InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_AltFire
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::S_AltFire(const struct FVector& FlightDirection, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_AltFire");

	Params::BP_TankBase_C_S_AltFire Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.StopFiringMG
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::StopFiringMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "StopFiringMG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.FireMG
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::FireMG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "FireMG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.AltFire
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::AltFire(const struct FVector& FlightDirection, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "AltFire");

	Params::BP_TankBase_C_AltFire Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.MC_BumperHit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::MC_BumperHit(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_BumperHit");

	Params::BP_TankBase_C_MC_BumperHit Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_BumperHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::S_BumperHit(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_BumperHit");

	Params::BP_TankBase_C_S_BumperHit Parms{};

	Parms.Speed = Speed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ForgetTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::ForgetTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ForgetTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.BndEvt__BP_TankBase_Body_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_TankBase_C::BndEvt__BP_TankBase_Body_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "BndEvt__BP_TankBase_Body_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_TankBase_C_BndEvt__BP_TankBase_Body_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_SetBackwardPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BackwardPressed_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::S_SetBackwardPressed(bool BackwardPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_SetBackwardPressed");

	Params::BP_TankBase_C_S_SetBackwardPressed Parms{};

	Parms.BackwardPressed_0 = BackwardPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_SetForwardPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForwardPressed_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::S_SetForwardPressed(bool ForwardPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_SetForwardPressed");

	Params::BP_TankBase_C_S_SetForwardPressed Parms{};

	Parms.ForwardPressed_0 = ForwardPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_SetRightPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RightPressed_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::S_SetRightPressed(bool RightPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_SetRightPressed");

	Params::BP_TankBase_C_S_SetRightPressed Parms{};

	Parms.RightPressed_0 = RightPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_SetLeftPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    LeftPressed_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::S_SetLeftPressed(bool LeftPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_SetLeftPressed");

	Params::BP_TankBase_C_S_SetLeftPressed Parms{};

	Parms.LeftPressed_0 = LeftPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.RemoveActorFromOverlappingList
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ActorRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::RemoveActorFromOverlappingList(class AActor* ActorRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "RemoveActorFromOverlappingList");

	Params::BP_TankBase_C_RemoveActorFromOverlappingList Parms{};

	Parms.ActorRef = ActorRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_ActorHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::S_ActorHit(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_ActorHit");

	Params::BP_TankBase_C_S_ActorHit Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.MC_ShareTankTransform
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                TankTransform_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::MC_ShareTankTransform(const struct FTransform& TankTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_ShareTankTransform");

	Params::BP_TankBase_C_MC_ShareTankTransform Parms{};

	Parms.TankTransform_0 = std::move(TankTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.S_ShareTankTransform
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                TankTransform_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::S_ShareTankTransform(const struct FTransform& TankTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_ShareTankTransform");

	Params::BP_TankBase_C_S_ShareTankTransform Parms{};

	Parms.TankTransform_0 = std::move(TankTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ResetTankOperational
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::ResetTankOperational()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ResetTankOperational");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.KillingHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           KilledActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::KillingHit(class AActor* KilledActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "KillingHit");

	Params::BP_TankBase_C_KillingHit Parms{};

	Parms.KilledActor = KilledActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.MC_AltFire
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::MC_AltFire(const struct FVector& FlightDirection, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_AltFire");

	Params::BP_TankBase_C_MC_AltFire Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ResetTracksSound
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::ResetTracksSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ResetTracksSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.MC_ActorHit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::MC_ActorHit(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_ActorHit");

	Params::BP_TankBase_C_MC_ActorHit Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_TankBase_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ReceiveHit");

	Params::BP_TankBase_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.MC_Loaded
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::MC_Loaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_Loaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.StopMovement
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::StopMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "StopMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.MoveTo
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::MoveTo(const class AActor* Actor, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MoveTo");

	Params::BP_TankBase_C_MoveTo Parms{};

	Parms.Actor = Actor;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class APawn*                            Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature");

	Params::BP_TankBase_C_BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.MC_Fire
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::MC_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.S_Fire
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::S_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.S_SetBarrelRotation
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::S_SetBarrelRotation(int32 Pitch, int32 Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "S_SetBarrelRotation");

	Params::BP_TankBase_C_S_SetBarrelRotation Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1");

	Params::BP_TankBase_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0");

	Params::BP_TankBase_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Main Gun_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Main_Gun_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Main Gun_K2Node_InputActionEvent_0");

	Params::BP_TankBase_C_InpActEvt_Main_Gun_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Zoom In (Tank)_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Zoom In (Tank)_K2Node_InputActionEvent_1");

	Params::BP_TankBase_C_InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Zoom In (Tank)_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Zoom In (Tank)_K2Node_InputActionEvent_2");

	Params::BP_TankBase_C_InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Machinegun_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Machinegun_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Machinegun_K2Node_InputActionEvent_3");

	Params::BP_TankBase_C_InpActEvt_Machinegun_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Machinegun_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Machinegun_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Machinegun_K2Node_InputActionEvent_4");

	Params::BP_TankBase_C_InpActEvt_Machinegun_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Turn Right_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Turn_Right_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Turn Right_K2Node_InputActionEvent_5");

	Params::BP_TankBase_C_InpActEvt_Turn_Right_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Turn Right_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Turn_Right_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Turn Right_K2Node_InputActionEvent_6");

	Params::BP_TankBase_C_InpActEvt_Turn_Right_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Turn Left_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Turn_Left_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Turn Left_K2Node_InputActionEvent_7");

	Params::BP_TankBase_C_InpActEvt_Turn_Left_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Turn Left_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Turn_Left_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Turn Left_K2Node_InputActionEvent_8");

	Params::BP_TankBase_C_InpActEvt_Turn_Left_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Break_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Break_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Break_K2Node_InputActionEvent_9");

	Params::BP_TankBase_C_InpActEvt_Break_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.InpActEvt_Break_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_TankBase_C::InpActEvt_Break_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "InpActEvt_Break_K2Node_InputActionEvent_10");

	Params::BP_TankBase_C_InpActEvt_Break_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.GetReloadPercentage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  Percentage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::GetReloadPercentage(float* Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "GetReloadPercentage");

	Params::BP_TankBase_C_GetReloadPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Percentage != nullptr)
		*Percentage = Parms.Percentage;
}


// Function BP_TankBase.BP_TankBase_C.IsReloading?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsReloading                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::IsReloading_(bool* IsReloading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "IsReloading?");

	Params::BP_TankBase_C_IsReloading_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReloading != nullptr)
		*IsReloading = Parms.IsReloading;
}


// Function BP_TankBase.BP_TankBase_C.UpdateWheelSpin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsReversing                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OverrideSpeed                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::UpdateWheelSpin(class USceneComponent* Wheel, bool IsReversing, float Direction, float OverrideSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "UpdateWheelSpin");

	Params::BP_TankBase_C_UpdateWheelSpin Parms{};

	Parms.Wheel = Wheel;
	Parms.IsReversing = IsReversing;
	Parms.Direction = Direction;
	Parms.OverrideSpeed = OverrideSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.GetNavigationToTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   TargetLocation                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RandomOffsetRadius                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TankBase_C::GetNavigationToTarget(const struct FVector& TargetLocation, float RandomOffsetRadius, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "GetNavigationToTarget");

	Params::BP_TankBase_C_GetNavigationToTarget Parms{};

	Parms.TargetLocation = std::move(TargetLocation);
	Parms.RandomOffsetRadius = RandomOffsetRadius;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_TankBase.BP_TankBase_C.AI_GetMovementTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          Target                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::AI_GetMovementTarget(class AActor** Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "AI_GetMovementTarget");

	Params::BP_TankBase_C_AI_GetMovementTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target != nullptr)
		*Target = Parms.Target;
}


// Function BP_TankBase.BP_TankBase_C.ClearNavigation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::ClearNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ClearNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.GetBodyMaterial
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface**              Material                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::GetBodyMaterial(class UMaterialInterface** Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "GetBodyMaterial");

	Params::BP_TankBase_C_GetBodyMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Material != nullptr)
		*Material = Parms.Material;
}


// Function BP_TankBase.BP_TankBase_C.IsPossessedEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::IsPossessedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "IsPossessedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.DestroyedRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::DestroyedRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "DestroyedRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.MC_Damaged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   DamageLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageLocationRelative                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "MC_Damaged");

	Params::BP_TankBase_C_MC_Damaged Parms{};

	Parms.DamageLocation = std::move(DamageLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageLocationRelative = std::move(DamageLocationRelative);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TankBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TankBase.BP_TankBase_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ReceiveUnpossessed");

	Params::BP_TankBase_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ReceivePossessed");

	Params::BP_TankBase_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TankBase_C::ReceiveTick(float DeltaSeconds_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "ReceiveTick");

	Params::BP_TankBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds_0 = DeltaSeconds_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TankBase.BP_TankBase_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TankBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TankBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

