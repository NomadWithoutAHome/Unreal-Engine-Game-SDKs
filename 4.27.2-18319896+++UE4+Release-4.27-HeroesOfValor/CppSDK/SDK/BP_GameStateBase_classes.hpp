#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameStateBase

#include "Basic.hpp"

#include "E_Scenarios_structs.hpp"
#include "E_AITeamPlayStyles_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Teams_structs.hpp"
#include "ST_MapVote_structs.hpp"
#include "ST_PlayerStats_structs.hpp"
#include "E_SubScenarios_structs.hpp"
#include "E_Units_structs.hpp"
#include "E_VehicleSkinThemes_structs.hpp"
#include "AdvancedSessions_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameStateBase.BP_GameStateBase_C
// 0x01B8 (0x0428 - 0x0270)
class ABP_GameStateBase_C : public AGameStateBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_ObjectiveBase_C*>            Objectives;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         AlliedControlledObjectives;                        // 0x0290(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AxisControlledObjectives;                          // 0x0294(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       VictoriousTeam;                                    // 0x0298(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NewGameStartTimer;                                 // 0x029C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameHasEnded;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         XPMultiplier;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndOfGameNewGameStartTime;                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_PlayerStats>                PlayerStats;                                       // 0x02B0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	E_Scenarios                                   ActiveScenario;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_KillFeed_C*                          KillFeed;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TODScenarioSet;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ScenarioSet;                                       // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_AITeamPlayStyles                            AI_AxisPlayStyle;                                  // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AITeamPlayStyles                            AI_AlliedPlayStyle;                                // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EA[0x2];                                      // 0x02EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_Seconds;                                     // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullAxisSupremacy;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FullAlliedSupremacy;                               // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Character_C*>                AliveAlliedCharacters;                             // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_Character_C*>                AliveAxisCharacters;                               // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_DecalManager_C*                     DecalManager;                                      // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DefensivePositionRadius;                        // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ShuffledAlliedNames;                               // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ShuffledAxisNames;                                 // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AlliedBotSpawnCounter;                             // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AxisBotSpawnCounter;                               // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FST_MapVote>                    MapVotes;                                          // 0x0350(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TMulticastInlineDelegate<void()>              MapVotesChanged;                                   // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          EnableBots;                                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableMaxDecalRenderDistance;                      // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0378(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	E_Scenarios                                   OldScenario;                                       // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableBOTBalance;                                  // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DefendRandomObjectiveOnSupremacy;                  // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          PushTowardsObjectiveDuringCombat;                  // 0x038B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerState_C*>              Spectators;                                        // 0x0390(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_MapCenter_C*                        MapCenter;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SubScenarios                                CurrentSubScenario;                                // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerHostName;                                    // 0x03B0(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ABP_PlaneBase_C*>                ActivePlanes;                                      // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          EnableRespawn;                                     // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x3];                                      // 0x03D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayersPerTeam;                                 // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TeamBalanceEnabled;                                // 0x03D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D9[0x3];                                      // 0x03D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VotekickYesCount;                                  // 0x03DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VotekickNoCount;                                   // 0x03E0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      PlayerToVoteKick;                                  // 0x03E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         VoteKickTimer;                                     // 0x03F0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F4[0x4];                                      // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerState*>                   YesVotedPlayers;                                   // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class APlayerState*>                   NoVotedPlayers;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              NewVoteKickStarted;                                // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_GameStateBase(int32 EntryPoint);
	void CastVote(bool Yes, const class APlayerState*& PlayerState);
	void StartVoteKick(class ABP_PlayerState_C* PlayerToVoteKick_0, int32 VoteKickTimer_0);
	void UpdateSky();
	void MC_KillFeedAdd(const struct FST_PlayerStats& KillerStats, const struct FST_PlayerStats& VictimStats);
	void MC_ShareChatMessage(const class FText& UserName, const class FText& Message, bool SpecialMessage);
	void OnGameHasEnded();
	void OnKill(E_Teams Team);
	void ReceiveTick(float DeltaSeconds);
	void RespawnActor(const struct FTransform& SpawnTransform, class UClass* Class_0, bool AIControlled, E_Teams Team, E_VehicleSkinThemes VehicleSkinTheme);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SpawnAICharacter(int32 Amount, E_Teams Team, bool IsNewCharacter, class ABP_Character_C* OldCharacterRef);
	void RegisterCharacter(class ABP_Character_C* Character, E_Teams Team);
	void UnregisterCharacter(int32 PlayerIndex);
	void RegisterObjective(const class ABP_ObjectiveBase_C*& Objective);
	void GetControlledObjectivesFromTeam(E_Teams Team, int32* ObjectiveCount);
	void EndGame(E_Teams VictoriousTeam_0);
	void OnRep_VictoriousTeam();
	void AddAliveCharacter(const class ABP_Character_C*& Character, E_Teams Team);
	void RemoveAliveCharacter(const class ABP_Character_C*& Character, E_Teams Team);
	void AddPlayerKill(int32 KillerPlayerIndex, int32 VictimPlayerIndex, bool AIVehicle, const class FString& AIVehicleName, E_Teams AIVehicleTeam, bool IsAssistKill);
	void AddPlayerDeath(int32 PlayerIndex);
	void AddPlayerScore(int32 ScoreAmount, int32 PlayerIndex, E_Units IfVehicle_WhatType_);
	void UpdatePlayerTeam(int32 PlayerIndex, E_Teams Team);
	void OnRep_ActiveScenario();
	void GetTeamBalance(int32* AlliedCharacters, int32* AxisCharacters);
	void RemoveLowestScoreBotFromTeam(E_Teams Team);
	void GetRandomAvailableFlag(E_Teams Team, class ABP_Flag_C** Flag);
	void SetScenario();
	void DoesTeamHaveAllObjectives_(E_Teams Team, bool* HasAllObjectives);
	void UpdatePlayerClass(int32 PlayerIndex, E_Units PlayerClass);
	void GetPlayerWithHighestScore(int32* PlayerIndex);
	void GetPlayerWithMostKills(int32* PlayerIndex);
	void GetPlayerWithMostTankScore(int32* PlayerIndex, bool* NoScore);
	void GetPlayerWithMostPlaneScore(int32* PlayerIndex, bool* NoScore);
	void GetVotedForMap(class FString* Map);
	void AddMapVote(const class FString& Map, const class FString& VoterName);
	void GetVotesForMap(const class FString& Map, int32* MapVotes_0);
	void OnRep_MapVotes();
	void PermaRemove_AIControlled_Vehicles();
	void GetPlayerWithHighestHealScore(int32* PlayerIndex, bool* NoScore);
	void IncreaseEventToken(int32 PlayerIndex);
	void GetNextScenario(E_Scenarios CurrentScenario, E_Scenarios* NextScenario);
	void SpawnLandingCraft(const struct FTransform& SpawnTransform, bool AI_Controlled, E_Teams Team, class ABP_LandingCraft_C** LandingCraft);
	void AddSpectator(const class ABP_PlayerState_C*& PlayerState);
	void RemoveSpectator(const class ABP_PlayerState_C*& PlayerState);
	void RegisterNewPlane(class ABP_PlaneBase_C* Plane);
	void SetPlayerAliveStatus(int32 PlayerIndex, bool IsAlive);
	void AddPlayerHealScore(int32 PlayerIndex, int32 HealScoreToAdd);
	void TempBanPlayer(class APlayerState* PlayerState);
	void PermaBanPlayer(class APlayerState* PlayerState);
	void OnRep_PlayerToVoteKick();
	void CleanUpSpectatorReferenceArray();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameStateBase_C">();
	}
	static class ABP_GameStateBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameStateBase_C>();
	}
};
static_assert(alignof(ABP_GameStateBase_C) == 0x000008, "Wrong alignment on ABP_GameStateBase_C");
static_assert(sizeof(ABP_GameStateBase_C) == 0x000428, "Wrong size on ABP_GameStateBase_C");
static_assert(offsetof(ABP_GameStateBase_C, UberGraphFrame) == 0x000270, "Member 'ABP_GameStateBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, DefaultSceneRoot) == 0x000278, "Member 'ABP_GameStateBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, Objectives) == 0x000280, "Member 'ABP_GameStateBase_C::Objectives' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AlliedControlledObjectives) == 0x000290, "Member 'ABP_GameStateBase_C::AlliedControlledObjectives' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AxisControlledObjectives) == 0x000294, "Member 'ABP_GameStateBase_C::AxisControlledObjectives' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, VictoriousTeam) == 0x000298, "Member 'ABP_GameStateBase_C::VictoriousTeam' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, NewGameStartTimer) == 0x00029C, "Member 'ABP_GameStateBase_C::NewGameStartTimer' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, GameHasEnded) == 0x0002A0, "Member 'ABP_GameStateBase_C::GameHasEnded' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, XPMultiplier) == 0x0002A4, "Member 'ABP_GameStateBase_C::XPMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, EndOfGameNewGameStartTime) == 0x0002A8, "Member 'ABP_GameStateBase_C::EndOfGameNewGameStartTime' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, PlayerStats) == 0x0002B0, "Member 'ABP_GameStateBase_C::PlayerStats' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ActiveScenario) == 0x0002C0, "Member 'ABP_GameStateBase_C::ActiveScenario' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, KillFeed) == 0x0002C8, "Member 'ABP_GameStateBase_C::KillFeed' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, TODScenarioSet) == 0x0002D0, "Member 'ABP_GameStateBase_C::TODScenarioSet' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ScenarioSet) == 0x0002D8, "Member 'ABP_GameStateBase_C::ScenarioSet' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AI_AxisPlayStyle) == 0x0002E8, "Member 'ABP_GameStateBase_C::AI_AxisPlayStyle' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AI_AlliedPlayStyle) == 0x0002E9, "Member 'ABP_GameStateBase_C::AI_AlliedPlayStyle' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, Delta_Seconds) == 0x0002EC, "Member 'ABP_GameStateBase_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, FullAxisSupremacy) == 0x0002F0, "Member 'ABP_GameStateBase_C::FullAxisSupremacy' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, FullAlliedSupremacy) == 0x0002F1, "Member 'ABP_GameStateBase_C::FullAlliedSupremacy' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AliveAlliedCharacters) == 0x0002F8, "Member 'ABP_GameStateBase_C::AliveAlliedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AliveAxisCharacters) == 0x000308, "Member 'ABP_GameStateBase_C::AliveAxisCharacters' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, DecalManager) == 0x000318, "Member 'ABP_GameStateBase_C::DecalManager' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AI_DefensivePositionRadius) == 0x000320, "Member 'ABP_GameStateBase_C::AI_DefensivePositionRadius' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ShuffledAlliedNames) == 0x000328, "Member 'ABP_GameStateBase_C::ShuffledAlliedNames' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ShuffledAxisNames) == 0x000338, "Member 'ABP_GameStateBase_C::ShuffledAxisNames' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AlliedBotSpawnCounter) == 0x000348, "Member 'ABP_GameStateBase_C::AlliedBotSpawnCounter' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, AxisBotSpawnCounter) == 0x00034C, "Member 'ABP_GameStateBase_C::AxisBotSpawnCounter' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, MapVotes) == 0x000350, "Member 'ABP_GameStateBase_C::MapVotes' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, MapVotesChanged) == 0x000360, "Member 'ABP_GameStateBase_C::MapVotesChanged' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, EnableBots) == 0x000370, "Member 'ABP_GameStateBase_C::EnableBots' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, EnableMaxDecalRenderDistance) == 0x000371, "Member 'ABP_GameStateBase_C::EnableMaxDecalRenderDistance' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ServerName) == 0x000378, "Member 'ABP_GameStateBase_C::ServerName' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, OldScenario) == 0x000388, "Member 'ABP_GameStateBase_C::OldScenario' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, EnableBOTBalance) == 0x000389, "Member 'ABP_GameStateBase_C::EnableBOTBalance' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, DefendRandomObjectiveOnSupremacy) == 0x00038A, "Member 'ABP_GameStateBase_C::DefendRandomObjectiveOnSupremacy' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, PushTowardsObjectiveDuringCombat) == 0x00038B, "Member 'ABP_GameStateBase_C::PushTowardsObjectiveDuringCombat' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, Spectators) == 0x000390, "Member 'ABP_GameStateBase_C::Spectators' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, MapCenter) == 0x0003A0, "Member 'ABP_GameStateBase_C::MapCenter' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, CurrentSubScenario) == 0x0003A8, "Member 'ABP_GameStateBase_C::CurrentSubScenario' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ServerHostName) == 0x0003B0, "Member 'ABP_GameStateBase_C::ServerHostName' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, ActivePlanes) == 0x0003C0, "Member 'ABP_GameStateBase_C::ActivePlanes' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, EnableRespawn) == 0x0003D0, "Member 'ABP_GameStateBase_C::EnableRespawn' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, MaxPlayersPerTeam) == 0x0003D4, "Member 'ABP_GameStateBase_C::MaxPlayersPerTeam' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, TeamBalanceEnabled) == 0x0003D8, "Member 'ABP_GameStateBase_C::TeamBalanceEnabled' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, VotekickYesCount) == 0x0003DC, "Member 'ABP_GameStateBase_C::VotekickYesCount' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, VotekickNoCount) == 0x0003E0, "Member 'ABP_GameStateBase_C::VotekickNoCount' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, PlayerToVoteKick) == 0x0003E8, "Member 'ABP_GameStateBase_C::PlayerToVoteKick' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, VoteKickTimer) == 0x0003F0, "Member 'ABP_GameStateBase_C::VoteKickTimer' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, YesVotedPlayers) == 0x0003F8, "Member 'ABP_GameStateBase_C::YesVotedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, NoVotedPlayers) == 0x000408, "Member 'ABP_GameStateBase_C::NoVotedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_GameStateBase_C, NewVoteKickStarted) == 0x000418, "Member 'ABP_GameStateBase_C::NewVoteKickStarted' has a wrong offset!");

}

