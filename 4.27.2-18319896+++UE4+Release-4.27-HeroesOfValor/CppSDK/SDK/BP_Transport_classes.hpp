#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Transport

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_VehicleBase_classes.hpp"
#include "E_DamageTypes_structs.hpp"
#include "E_VehicleSkinThemes_structs.hpp"
#include "E_Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Transport.BP_Transport_C
// 0x0160 (0x0520 - 0x03C0)
class ABP_Transport_C final : public ABP_VehicleBase_C
{
public:
	uint8                                         Pad_3B3[0x5];                                      // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Transport_C;                     // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        DriverSeatAttachPoint;                             // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Fire;                                              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CharacterBlockVolumeWhenUnPossessed;               // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightConeMesh;                                     // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CharacterKillVolume;                               // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FaceCam;                                           // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        S_Honk;                                            // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_MotorbikeExhaust;                                // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrontWheel;                                        // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bike_Front;                                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BackWheel;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeBack2;                                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeBack1;                                        // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        S_Drift;                                           // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        S_MotorBikeEngine;                                 // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TransportVehicleMesh;                              // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ForwardPressed;                                    // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForwardPressedReplicated;                          // 0x0469(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnLeftPressed;                                   // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnLeftPressedReplicated;                         // 0x046B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnRightPressed;                                  // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnRightPressedReplicated;                        // 0x046D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressed;                                   // 0x046E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressedReplicated;                         // 0x046F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HandBreaking;                                      // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HandbreakingReplicated;                            // 0x0471(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InTheAir;                                          // 0x0472(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InAirReplicated;                                   // 0x0473(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Started;                                           // 0x0474(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Honking;                                           // 0x0475(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_476[0xA];                                      // 0x0476(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             VehicleTransform;                                  // 0x0480(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                LastForwardDirection;                              // 0x04B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastVelocity_Server_;                              // 0x04BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds_0;                                   // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementSpeed;                                     // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardBackwardAmount;                             // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnAmount;                                        // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardDirectionAlignment;                         // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        GearSounds;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAmount;                                        // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HonkSound;                                         // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionSpeedMultiplier;                          // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallDownwardForceAmount;                           // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardBackwardAmountReplicated;                   // 0x0500(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastCollisionSpeedValue;                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        LastHitCharacter;                                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            TurnSpeedCurve;                                    // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLean_Tilt_;                                  // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Transport(int32 EntryPoint);
	void InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue);
	void S_ActorHit(const struct FVector& Location);
	void MC_ActorHit(const struct FVector& Location);
	void S_SetLastOffsetAmount(const struct FVector& LastVelocity_Server__0);
	void S_ShareVehicleTransform(const struct FTransform& VehicleTransform_0);
	void S_SetForwardBackwardAmount(float ForwardBackwardAmount_0);
	void S_SetInAir(bool InAir);
	void S_SetHandbreaking(bool HandBreaking_0);
	void S_SetBackwardPressed(bool BackwardPressed_0);
	void S_SetForwardPressed(bool ForwardPressed_0);
	void S_Landed();
	void InitUnpossessedState();
	void BndEvt__BP_Transport_CharacterKillVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void RoadKill(class ABP_Character_C* Character);
	void S_Horn(bool Honking_0);
	void InitTransform();
	void MC_Landed();
	void ResetAccelerationEffects();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void S_SetTurnRight(bool TurnRight);
	void S_SetTurnLeft(bool TurnLeft);
	void MC_Unpossessed();
	void MC_Possessed();
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void InpActEvt_Horn_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Horn_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void OnRep_Honking();
	void GetMovementInputStatus(bool* GoingForward, bool* GoingBackward, bool* TurningLeft, bool* TurningRight, bool* InAir);
	void InitVehicleThemeSkin();
	void MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative);
	void IsPossessedEvent();
	void DestroyedRepNotify();
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Transport_C">();
	}
	static class ABP_Transport_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Transport_C>();
	}
};
static_assert(alignof(ABP_Transport_C) == 0x000010, "Wrong alignment on ABP_Transport_C");
static_assert(sizeof(ABP_Transport_C) == 0x000520, "Wrong size on ABP_Transport_C");
static_assert(offsetof(ABP_Transport_C, UberGraphFrame_BP_Transport_C) == 0x0003B8, "Member 'ABP_Transport_C::UberGraphFrame_BP_Transport_C' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, DriverSeatAttachPoint) == 0x0003C0, "Member 'ABP_Transport_C::DriverSeatAttachPoint' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Fire) == 0x0003C8, "Member 'ABP_Transport_C::Fire' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, NavModifier) == 0x0003D0, "Member 'ABP_Transport_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, CharacterBlockVolumeWhenUnPossessed) == 0x0003D8, "Member 'ABP_Transport_C::CharacterBlockVolumeWhenUnPossessed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Capsule) == 0x0003E0, "Member 'ABP_Transport_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LightConeMesh) == 0x0003E8, "Member 'ABP_Transport_C::LightConeMesh' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, CharacterKillVolume) == 0x0003F0, "Member 'ABP_Transport_C::CharacterKillVolume' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, FaceCam) == 0x0003F8, "Member 'ABP_Transport_C::FaceCam' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, SpotLight) == 0x000400, "Member 'ABP_Transport_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, S_Honk) == 0x000408, "Member 'ABP_Transport_C::S_Honk' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, P_MotorbikeExhaust) == 0x000410, "Member 'ABP_Transport_C::P_MotorbikeExhaust' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, FrontWheel) == 0x000418, "Member 'ABP_Transport_C::FrontWheel' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Bike_Front) == 0x000420, "Member 'ABP_Transport_C::Bike_Front' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, BackWheel) == 0x000428, "Member 'ABP_Transport_C::BackWheel' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, SmokeBack2) == 0x000430, "Member 'ABP_Transport_C::SmokeBack2' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, SmokeBack1) == 0x000438, "Member 'ABP_Transport_C::SmokeBack1' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, S_Drift) == 0x000440, "Member 'ABP_Transport_C::S_Drift' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, S_MotorBikeEngine) == 0x000448, "Member 'ABP_Transport_C::S_MotorBikeEngine' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, SpringArm) == 0x000450, "Member 'ABP_Transport_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Camera) == 0x000458, "Member 'ABP_Transport_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TransportVehicleMesh) == 0x000460, "Member 'ABP_Transport_C::TransportVehicleMesh' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, ForwardPressed) == 0x000468, "Member 'ABP_Transport_C::ForwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, ForwardPressedReplicated) == 0x000469, "Member 'ABP_Transport_C::ForwardPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnLeftPressed) == 0x00046A, "Member 'ABP_Transport_C::TurnLeftPressed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnLeftPressedReplicated) == 0x00046B, "Member 'ABP_Transport_C::TurnLeftPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnRightPressed) == 0x00046C, "Member 'ABP_Transport_C::TurnRightPressed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnRightPressedReplicated) == 0x00046D, "Member 'ABP_Transport_C::TurnRightPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, BackwardPressed) == 0x00046E, "Member 'ABP_Transport_C::BackwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, BackwardPressedReplicated) == 0x00046F, "Member 'ABP_Transport_C::BackwardPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, HandBreaking) == 0x000470, "Member 'ABP_Transport_C::HandBreaking' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, HandbreakingReplicated) == 0x000471, "Member 'ABP_Transport_C::HandbreakingReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, InTheAir) == 0x000472, "Member 'ABP_Transport_C::InTheAir' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, InAirReplicated) == 0x000473, "Member 'ABP_Transport_C::InAirReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Started) == 0x000474, "Member 'ABP_Transport_C::Started' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Honking) == 0x000475, "Member 'ABP_Transport_C::Honking' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, VehicleTransform) == 0x000480, "Member 'ABP_Transport_C::VehicleTransform' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LastForwardDirection) == 0x0004B0, "Member 'ABP_Transport_C::LastForwardDirection' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LastVelocity_Server_) == 0x0004BC, "Member 'ABP_Transport_C::LastVelocity_Server_' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, Delta_Seconds_0) == 0x0004C8, "Member 'ABP_Transport_C::Delta_Seconds_0' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, MovementSpeed) == 0x0004CC, "Member 'ABP_Transport_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, ForwardBackwardAmount) == 0x0004D0, "Member 'ABP_Transport_C::ForwardBackwardAmount' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnAmount) == 0x0004D4, "Member 'ABP_Transport_C::TurnAmount' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, ForwardDirectionAlignment) == 0x0004D8, "Member 'ABP_Transport_C::ForwardDirectionAlignment' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, GearSounds) == 0x0004E0, "Member 'ABP_Transport_C::GearSounds' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LeanAmount) == 0x0004E8, "Member 'ABP_Transport_C::LeanAmount' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, HonkSound) == 0x0004F0, "Member 'ABP_Transport_C::HonkSound' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, CollisionSpeedMultiplier) == 0x0004F8, "Member 'ABP_Transport_C::CollisionSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, FallDownwardForceAmount) == 0x0004FC, "Member 'ABP_Transport_C::FallDownwardForceAmount' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, ForwardBackwardAmountReplicated) == 0x000500, "Member 'ABP_Transport_C::ForwardBackwardAmountReplicated' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LastCollisionSpeedValue) == 0x000504, "Member 'ABP_Transport_C::LastCollisionSpeedValue' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, LastHitCharacter) == 0x000508, "Member 'ABP_Transport_C::LastHitCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, TurnSpeedCurve) == 0x000510, "Member 'ABP_Transport_C::TurnSpeedCurve' has a wrong offset!");
static_assert(offsetof(ABP_Transport_C, EnableLean_Tilt_) == 0x000518, "Member 'ABP_Transport_C::EnableLean_Tilt_' has a wrong offset!");

}

