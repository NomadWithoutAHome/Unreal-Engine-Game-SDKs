#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerState

#include "Basic.hpp"

#include "BP_PlayerState_classes.hpp"
#include "BP_PlayerState_parameters.hpp"


namespace SDK
{

// Function BP_PlayerState.BP_PlayerState_C.ExecuteUbergraph_BP_PlayerState
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::ExecuteUbergraph_BP_PlayerState(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "ExecuteUbergraph_BP_PlayerState");

	Params::BP_PlayerState_C_ExecuteUbergraph_BP_PlayerState Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.ResetKillCounter
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerState_C::ResetKillCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "ResetKillCounter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_SpawnEventToken
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::OC_SpawnEventToken(const struct FVector& Spawn_Transform_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_SpawnEventToken");

	Params::BP_PlayerState_C_OC_SpawnEventToken Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_KickToMainMenu
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerState_C::OC_KickToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_KickToMainMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_SendStatsToSteam
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_PlayerStats&           Stats                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerState_C::OC_SendStatsToSteam(const struct FST_PlayerStats& Stats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_SendStatsToSteam");

	Params::BP_PlayerState_C_OC_SendStatsToSteam Parms{};

	Parms.Stats = std::move(Stats);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_PostSpecialActionNotification
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FLinearColor&              Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::OC_PostSpecialActionNotification(const class FText& Message, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_PostSpecialActionNotification");

	Params::BP_PlayerState_C_OC_PostSpecialActionNotification Parms{};

	Parms.Message = std::move(Message);
	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_Kill
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      KilledEnemyName                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsAssist                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CountAsKill                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerState_C::OC_Kill(const class FText& KilledEnemyName, bool IsAssist, bool CountAsKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_Kill");

	Params::BP_PlayerState_C_OC_Kill Parms{};

	Parms.KilledEnemyName = std::move(KilledEnemyName);
	Parms.IsAssist = IsAssist;
	Parms.CountAsKill = CountAsKill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.OC_DisplayDamageNumbers
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CriticalHit_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::OC_DisplayDamageNumbers(const struct FVector& HitLocation, int32 DamageAmount, bool CriticalHit_, class AActor* HitActor, bool IsLow, E_DamageTypes DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OC_DisplayDamageNumbers");

	Params::BP_PlayerState_C_OC_DisplayDamageNumbers Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.DamageAmount = DamageAmount;
	Parms.CriticalHit_ = CriticalHit_;
	Parms.HitActor = HitActor;
	Parms.IsLow = IsLow;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "ReceiveTick");

	Params::BP_PlayerState_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerState_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerState.BP_PlayerState_C.OnCallback_CBE15C504D14F6B56FCC2DB5DFE71574
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLeaderboardFindResult&    Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerState_C::OnCallback_CBE15C504D14F6B56FCC2DB5DFE71574(const struct FLeaderboardFindResult& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OnCallback_CBE15C504D14F6B56FCC2DB5DFE71574");

	Params::BP_PlayerState_C_OnCallback_CBE15C504D14F6B56FCC2DB5DFE71574 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.OnCallback_B34C091241C05CE2FEC424A9088164C6
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLeaderboardScoreUploaded& Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    bWasSuccessful                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerState_C::OnCallback_B34C091241C05CE2FEC424A9088164C6(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "OnCallback_B34C091241C05CE2FEC424A9088164C6");

	Params::BP_PlayerState_C_OnCallback_B34C091241C05CE2FEC424A9088164C6 Parms{};

	Parms.Data = std::move(Data);
	Parms.bWasSuccessful = bWasSuccessful;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.IncreaseKills
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerState_C::IncreaseKills(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "IncreaseKills");

	Params::BP_PlayerState_C_IncreaseKills Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.CacheUsername
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    UserName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerState_C::CacheUsername(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "CacheUsername");

	Params::BP_PlayerState_C_CacheUsername Parms{};

	Parms.UserName = std::move(UserName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerState.BP_PlayerState_C.ValidateUsername
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    UserName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerState_C::ValidateUsername(const class FString& UserName, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "ValidateUsername");

	Params::BP_PlayerState_C_ValidateUsername Parms{};

	Parms.UserName = std::move(UserName);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_PlayerState.BP_PlayerState_C.GetSteamID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString*                          SteamID                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerState_C::GetSteamID(class FString* SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerState_C", "GetSteamID");

	Params::BP_PlayerState_C_GetSteamID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SteamID != nullptr)
		*SteamID = std::move(Parms.SteamID);
}

}

