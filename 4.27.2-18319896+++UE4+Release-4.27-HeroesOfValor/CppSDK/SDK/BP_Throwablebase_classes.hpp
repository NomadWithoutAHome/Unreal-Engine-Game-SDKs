#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwablebase

#include "Basic.hpp"

#include "E_DamageTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Teams_structs.hpp"
#include "BP_EquipableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Throwablebase.BP_Throwablebase_C
// 0x0088 (0x0360 - 0x02D8)
class ABP_Throwablebase_C : public ABP_EquipableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Throwablebase_C;                 // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Thrown;                                            // 0x02E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThrownGrenades;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanThrow;                                          // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ThrowableProjectileClass;                          // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TrapClass;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AOEDamage;                                         // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOERadius;                                         // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadTime;                                        // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThrowForce;                                        // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticle;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ImpactSound;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ThrowSound;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactParticleSizeMultiplier;                      // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactSoundPitch;                                  // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactDecalSize;                                   // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DamageTypes                                 AOEDamageType;                                     // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLaunchOnDamage;                              // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsSkill;                                           // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_337[0x1];                                      // 0x0337(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThrowableAmount;                                   // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loaded;                                            // 0x033C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadTimer;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldBreakInvisbility;                            // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_345[0x3];                                      // 0x0345(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastPreferedEquipable;                             // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FinalChosenEquipableToSwapTo;                      // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThrowAnimation;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileSpawnDelay;                              // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Throwablebase(int32 EntryPoint);
	void HasBeenEquiped();
	void S_ResetThrowable();
	void EndUsage();
	void GrenadeThrow();
	void S_GrenadeThrow();
	void MC_GrenadeThrow();
	void S_ThrowGrenades(const struct FVector& ThrowDirection, const struct FVector& SSpawnLocation);
	void ReceiveTick(float DeltaSeconds);
	void OnRep_Thrown();
	void GetReloadInfo(bool* Reloading, float* Reload_Percentage);
	void Use();
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Throwablebase_C">();
	}
	static class ABP_Throwablebase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Throwablebase_C>();
	}
};
static_assert(alignof(ABP_Throwablebase_C) == 0x000008, "Wrong alignment on ABP_Throwablebase_C");
static_assert(sizeof(ABP_Throwablebase_C) == 0x000360, "Wrong size on ABP_Throwablebase_C");
static_assert(offsetof(ABP_Throwablebase_C, UberGraphFrame_BP_Throwablebase_C) == 0x0002D8, "Member 'ABP_Throwablebase_C::UberGraphFrame_BP_Throwablebase_C' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, Thrown) == 0x0002E0, "Member 'ABP_Throwablebase_C::Thrown' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrownGrenades) == 0x0002E4, "Member 'ABP_Throwablebase_C::ThrownGrenades' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, CanThrow) == 0x0002E8, "Member 'ABP_Throwablebase_C::CanThrow' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrowableProjectileClass) == 0x0002F0, "Member 'ABP_Throwablebase_C::ThrowableProjectileClass' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, TrapClass) == 0x0002F8, "Member 'ABP_Throwablebase_C::TrapClass' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, AOEDamage) == 0x000300, "Member 'ABP_Throwablebase_C::AOEDamage' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, AOERadius) == 0x000304, "Member 'ABP_Throwablebase_C::AOERadius' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ReloadTime) == 0x000308, "Member 'ABP_Throwablebase_C::ReloadTime' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrowForce) == 0x00030C, "Member 'ABP_Throwablebase_C::ThrowForce' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ImpactParticle) == 0x000310, "Member 'ABP_Throwablebase_C::ImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ImpactSound) == 0x000318, "Member 'ABP_Throwablebase_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrowSound) == 0x000320, "Member 'ABP_Throwablebase_C::ThrowSound' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ImpactParticleSizeMultiplier) == 0x000328, "Member 'ABP_Throwablebase_C::ImpactParticleSizeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ImpactSoundPitch) == 0x00032C, "Member 'ABP_Throwablebase_C::ImpactSoundPitch' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ImpactDecalSize) == 0x000330, "Member 'ABP_Throwablebase_C::ImpactDecalSize' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, AOEDamageType) == 0x000334, "Member 'ABP_Throwablebase_C::AOEDamageType' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, EnableLaunchOnDamage) == 0x000335, "Member 'ABP_Throwablebase_C::EnableLaunchOnDamage' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, IsSkill) == 0x000336, "Member 'ABP_Throwablebase_C::IsSkill' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrowableAmount) == 0x000338, "Member 'ABP_Throwablebase_C::ThrowableAmount' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, Loaded) == 0x00033C, "Member 'ABP_Throwablebase_C::Loaded' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ReloadTimer) == 0x000340, "Member 'ABP_Throwablebase_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ShouldBreakInvisbility) == 0x000344, "Member 'ABP_Throwablebase_C::ShouldBreakInvisbility' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, LastPreferedEquipable) == 0x000348, "Member 'ABP_Throwablebase_C::LastPreferedEquipable' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, FinalChosenEquipableToSwapTo) == 0x00034C, "Member 'ABP_Throwablebase_C::FinalChosenEquipableToSwapTo' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ThrowAnimation) == 0x000350, "Member 'ABP_Throwablebase_C::ThrowAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Throwablebase_C, ProjectileSpawnDelay) == 0x000358, "Member 'ABP_Throwablebase_C::ProjectileSpawnDelay' has a wrong offset!");

}

