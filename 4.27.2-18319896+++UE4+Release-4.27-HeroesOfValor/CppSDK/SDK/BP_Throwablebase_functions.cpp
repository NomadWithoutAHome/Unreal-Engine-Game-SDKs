#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Throwablebase

#include "Basic.hpp"

#include "BP_Throwablebase_classes.hpp"
#include "BP_Throwablebase_parameters.hpp"


namespace SDK
{

// Function BP_Throwablebase.BP_Throwablebase_C.ExecuteUbergraph_BP_Throwablebase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwablebase_C::ExecuteUbergraph_BP_Throwablebase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "ExecuteUbergraph_BP_Throwablebase");

	Params::BP_Throwablebase_C_ExecuteUbergraph_BP_Throwablebase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwablebase.BP_Throwablebase_C.HasBeenEquiped
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::HasBeenEquiped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "HasBeenEquiped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.S_ResetThrowable
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::S_ResetThrowable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "S_ResetThrowable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.EndUsage
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::EndUsage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "EndUsage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.GrenadeThrow
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::GrenadeThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "GrenadeThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.S_GrenadeThrow
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::S_GrenadeThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "S_GrenadeThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.MC_GrenadeThrow
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::MC_GrenadeThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "MC_GrenadeThrow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.S_ThrowGrenades
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   ThrowDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SSpawnLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwablebase_C::S_ThrowGrenades(const struct FVector& ThrowDirection, const struct FVector& SSpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "S_ThrowGrenades");

	Params::BP_Throwablebase_C_S_ThrowGrenades Parms{};

	Parms.ThrowDirection = std::move(ThrowDirection);
	Parms.SSpawnLocation = std::move(SSpawnLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwablebase.BP_Throwablebase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwablebase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "ReceiveTick");

	Params::BP_Throwablebase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Throwablebase.BP_Throwablebase_C.OnRep_Thrown
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::OnRep_Thrown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "OnRep_Thrown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.GetReloadInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Reloading                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  Reload_Percentage                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Throwablebase_C::GetReloadInfo(bool* Reloading, float* Reload_Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "GetReloadInfo");

	Params::BP_Throwablebase_C_GetReloadInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Reloading != nullptr)
		*Reloading = Parms.Reloading;

	if (Reload_Percentage != nullptr)
		*Reload_Percentage = Parms.Reload_Percentage;
}


// Function BP_Throwablebase.BP_Throwablebase_C.Use
// (BlueprintCallable, BlueprintEvent)

void ABP_Throwablebase_C::Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "Use");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Throwablebase.BP_Throwablebase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Throwablebase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Throwablebase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

