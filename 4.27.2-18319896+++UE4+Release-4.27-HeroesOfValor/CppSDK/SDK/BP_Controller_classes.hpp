#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller

#include "Basic.hpp"

#include "E_CombatZoneTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_VoteOptions_structs.hpp"
#include "E_Teams_structs.hpp"
#include "BP_BaseController_classes.hpp"
#include "E_Menus_structs.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Controller.BP_Controller_C
// 0x00C0 (0x06D0 - 0x0610)
class ABP_Controller_C final : public ABP_BaseController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Controller_C;                    // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        OutOfCombatAlarm;                                  // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        CharacterRef;                                      // 0x0620(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_TeamSelect_C*                        TeamSelectWidget;                                  // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_HUD_C*                               HUDWidget;                                         // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            ActiveSpawnMenu;                                   // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_IngameMenu_C*                        IngameMenu;                                        // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_ChatOverlay_C*                       ChatOverlay;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CustomCommandWidget;                               // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_MapCam_C*                           MapCam_SpawnSelect_;                               // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_FreeCam_C*                          SpectatorCamRef;                                   // 0x0660(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IngameMenuOpen;                                    // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRegistered;                                      // 0x0669(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A[0x2];                                      // 0x066A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x066C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DynamicCrosshairScreenLocation;                    // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentCrosshairScale;                             // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VehicleExitTeleportLocation;                       // 0x067C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageNumberIndex_Looped_;                         // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_68C[0x4];                                      // 0x068C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_WorldDamageNumber_C*>        CurrentActiveDamageNumberActors;                   // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UW_ScoreBoard_C*                        ScoreBoardWidget;                                  // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              HasHitATarget;                                     // 0x06A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_CombatZoneTypes                             CurrentCombatZoneState;                            // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6B9[0x3];                                      // 0x06B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CombatZoneTypes                             CurrentZoneTypePawnIsIn;                           // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InAllowedCombatZone;                               // 0x06C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6C2[0x2];                                      // 0x06C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutOfCombatZoneCountdown;                          // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VoteKickCooldownTimer;                             // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnVoteKickCooldown;                                // 0x06CC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_VoteOptions                                 OwnVotekickVoteChoice;                             // 0x06CD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Controller(int32 EntryPoint);
	void RemoveSelfFromSpectators();
	void NewVoteKickStarted();
	void S_SendVote(bool Yes);
	void S_StartVoteKick(class ABP_PlayerState_C* PlayerToVoteKick);
	void CloseCustomWidget();
	void OC_OpenCustomCommandWidget(class UClass* WidgetClass);
	void S_SpawnSpectorCam();
	void OC_EnterSpectatorCam();
	void EnterSpectatorCam();
	void S_RegisterAsSpecatorForPlayer(class ABP_Character_C* PlayerToSpectate);
	void S_EnterVehicleSeat(class ABP_VehicleSeat_C* VehicleSeat);
	void OC_TeleportFromSpecCam();
	void S_AddMapVote(const class FString& Map);
	void S_LaunchOtherCharacter(class ABP_Character_C* Character_0, const struct FVector& LaunchVelocity, class APawn* LaunchInflicter);
	void IncreaseDamageNumberLoop();
	void S_ToggleSpectatorCam();
	void Respawn();
	void ReceiveDestroyed();
	void OC_CreateHUD();
	void S_Suicide();
	void ReceiveChatMessage(const class FText& UserName, const class FText& Message, bool SpecialMessage);
	void S_SendChatMessage(const class FText& Message);
	void ReceiveTick(float DeltaSeconds);
	void OC_SpawnSelect(E_Teams Team);
	void OC_AddLoadingScreen(const class FText& Loading_Text, const class FText& MapName);
	void CloseIngameMenu();
	void OC_DisplayDamageNumbers(const struct FVector& HitLocation, int32 DamageAmount, bool CriticalHit_, class AActor* HitActor, bool IsLow, E_DamageTypes DamageType);
	void S_ApplyDamage(class UObject* Target, int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex_0, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage);
	void ApplyDamage(class UObject* Target, int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex_0, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage);
	void S_Spawn(const struct FST_SpawnInfo& SpawnInfo, class ABP_VehicleBase_C* VehicleToEnterAfterSpawn_Optional_);
	void S_JoinTeam(E_Teams Team);
	void S_EnterCharacter(bool teleport, const struct FVector& TeleportLocation, class ABP_VehicleBase_C* Vehicle);
	void S_EnterVehicle(class ABP_VehicleBase_C* Vehicle, class UPawnDataComponent_C* PawnData);
	void InpActEvt_F2_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_F1_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Delete_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_PageDown_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Scoreboard_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Scoreboard_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_K_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_Enter_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_F6_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_Escape_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void SwitchSpawnMenu(E_Menus Menu, class UUserWidget** menuWidget);
	void CheckForChatCommand(const class FText& ChatMessage, bool IsHost, bool* CommandFound_, class FText* ResponseMessage, bool* Broadcast);
	void KickPlayer(const class FString& PlayerName, class FText* Response);
	void GetCurrentZoneType(E_CombatZoneTypes* ZoneType);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Controller_C">();
	}
	static class ABP_Controller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Controller_C>();
	}
};
static_assert(alignof(ABP_Controller_C) == 0x000008, "Wrong alignment on ABP_Controller_C");
static_assert(sizeof(ABP_Controller_C) == 0x0006D0, "Wrong size on ABP_Controller_C");
static_assert(offsetof(ABP_Controller_C, UberGraphFrame_BP_Controller_C) == 0x000610, "Member 'ABP_Controller_C::UberGraphFrame_BP_Controller_C' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, OutOfCombatAlarm) == 0x000618, "Member 'ABP_Controller_C::OutOfCombatAlarm' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CharacterRef) == 0x000620, "Member 'ABP_Controller_C::CharacterRef' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, TeamSelectWidget) == 0x000628, "Member 'ABP_Controller_C::TeamSelectWidget' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, HUDWidget) == 0x000630, "Member 'ABP_Controller_C::HUDWidget' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, ActiveSpawnMenu) == 0x000638, "Member 'ABP_Controller_C::ActiveSpawnMenu' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, IngameMenu) == 0x000640, "Member 'ABP_Controller_C::IngameMenu' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, ChatOverlay) == 0x000648, "Member 'ABP_Controller_C::ChatOverlay' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CustomCommandWidget) == 0x000650, "Member 'ABP_Controller_C::CustomCommandWidget' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, MapCam_SpawnSelect_) == 0x000658, "Member 'ABP_Controller_C::MapCam_SpawnSelect_' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, SpectatorCamRef) == 0x000660, "Member 'ABP_Controller_C::SpectatorCamRef' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, IngameMenuOpen) == 0x000668, "Member 'ABP_Controller_C::IngameMenuOpen' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, IsRegistered) == 0x000669, "Member 'ABP_Controller_C::IsRegistered' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, PlayerIndex) == 0x00066C, "Member 'ABP_Controller_C::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, DynamicCrosshairScreenLocation) == 0x000670, "Member 'ABP_Controller_C::DynamicCrosshairScreenLocation' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CurrentCrosshairScale) == 0x000678, "Member 'ABP_Controller_C::CurrentCrosshairScale' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, VehicleExitTeleportLocation) == 0x00067C, "Member 'ABP_Controller_C::VehicleExitTeleportLocation' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, DamageNumberIndex_Looped_) == 0x000688, "Member 'ABP_Controller_C::DamageNumberIndex_Looped_' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CurrentActiveDamageNumberActors) == 0x000690, "Member 'ABP_Controller_C::CurrentActiveDamageNumberActors' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, ScoreBoardWidget) == 0x0006A0, "Member 'ABP_Controller_C::ScoreBoardWidget' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, HasHitATarget) == 0x0006A8, "Member 'ABP_Controller_C::HasHitATarget' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CurrentCombatZoneState) == 0x0006B8, "Member 'ABP_Controller_C::CurrentCombatZoneState' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, DeltaTime) == 0x0006BC, "Member 'ABP_Controller_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, CurrentZoneTypePawnIsIn) == 0x0006C0, "Member 'ABP_Controller_C::CurrentZoneTypePawnIsIn' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, InAllowedCombatZone) == 0x0006C1, "Member 'ABP_Controller_C::InAllowedCombatZone' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, OutOfCombatZoneCountdown) == 0x0006C4, "Member 'ABP_Controller_C::OutOfCombatZoneCountdown' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, VoteKickCooldownTimer) == 0x0006C8, "Member 'ABP_Controller_C::VoteKickCooldownTimer' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, OnVoteKickCooldown) == 0x0006CC, "Member 'ABP_Controller_C::OnVoteKickCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Controller_C, OwnVotekickVoteChoice) == 0x0006CD, "Member 'ABP_Controller_C::OwnVotekickVoteChoice' has a wrong offset!");

}

