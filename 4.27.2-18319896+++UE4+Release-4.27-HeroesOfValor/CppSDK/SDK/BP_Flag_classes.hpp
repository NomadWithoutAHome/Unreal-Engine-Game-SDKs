#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Flag

#include "Basic.hpp"

#include "E_Teams_structs.hpp"
#include "E_SpawnType_structs.hpp"
#include "BP_ObjectiveBase_classes.hpp"
#include "Engine_structs.hpp"
#include "E_Units_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Flag.BP_Flag_C
// 0x0090 (0x02C8 - 0x0238)
class ABP_Flag_C : public ABP_ObjectiveBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Flag_C;                          // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        OldRadioSong;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Flag;                                              // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlagPole;                                          // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard_FlagIcon;                                // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SpawnRadius;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_SpawnPointSelect;                           // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget_FlagInfo;                                   // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNeutral;                                         // 0x0278(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlagCaptureProgress;                               // 0x027C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       CapturingTeam;                                     // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delta_Seconds;                                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FlagName;                                          // 0x0288(0x0018)(Edit, BlueprintVisible)
	float                                         CaptureRadius;                                     // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureSpeed;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CapturingPlayers;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APawn*>                          CapturingPawns;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         SpawnRadiusDistance;                               // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSpawnOn;                                        // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_SpawnType                                   SpawnType;                                         // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       InitialControllingTeam;                            // 0x02C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Flag(int32 EntryPoint);
	void RefreshFlag();
	void ControllingTeamChanged();
	void MC_Capture(E_Teams Team);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GetCapturingTeam(bool* IsBeingCaptured, E_Teams* CapturingTeam_0);
	void GrantScoreToCapturingPawns();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Flag_C">();
	}
	static class ABP_Flag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Flag_C>();
	}
};
static_assert(alignof(ABP_Flag_C) == 0x000008, "Wrong alignment on ABP_Flag_C");
static_assert(sizeof(ABP_Flag_C) == 0x0002C8, "Wrong size on ABP_Flag_C");
static_assert(offsetof(ABP_Flag_C, UberGraphFrame_BP_Flag_C) == 0x000238, "Member 'ABP_Flag_C::UberGraphFrame_BP_Flag_C' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, OldRadioSong) == 0x000240, "Member 'ABP_Flag_C::OldRadioSong' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, Flag) == 0x000248, "Member 'ABP_Flag_C::Flag' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, FlagPole) == 0x000250, "Member 'ABP_Flag_C::FlagPole' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, Billboard_FlagIcon) == 0x000258, "Member 'ABP_Flag_C::Billboard_FlagIcon' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, SpawnRadius) == 0x000260, "Member 'ABP_Flag_C::SpawnRadius' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, Widget_SpawnPointSelect) == 0x000268, "Member 'ABP_Flag_C::Widget_SpawnPointSelect' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, Widget_FlagInfo) == 0x000270, "Member 'ABP_Flag_C::Widget_FlagInfo' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, IsNeutral) == 0x000278, "Member 'ABP_Flag_C::IsNeutral' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, FlagCaptureProgress) == 0x00027C, "Member 'ABP_Flag_C::FlagCaptureProgress' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CapturingTeam) == 0x000280, "Member 'ABP_Flag_C::CapturingTeam' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, Delta_Seconds) == 0x000284, "Member 'ABP_Flag_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, FlagName) == 0x000288, "Member 'ABP_Flag_C::FlagName' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CaptureRadius) == 0x0002A0, "Member 'ABP_Flag_C::CaptureRadius' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CaptureSpeed) == 0x0002A4, "Member 'ABP_Flag_C::CaptureSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CapturingPlayers) == 0x0002A8, "Member 'ABP_Flag_C::CapturingPlayers' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CapturingPawns) == 0x0002B0, "Member 'ABP_Flag_C::CapturingPawns' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, SpawnRadiusDistance) == 0x0002C0, "Member 'ABP_Flag_C::SpawnRadiusDistance' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, CanSpawnOn) == 0x0002C4, "Member 'ABP_Flag_C::CanSpawnOn' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, SpawnType) == 0x0002C5, "Member 'ABP_Flag_C::SpawnType' has a wrong offset!");
static_assert(offsetof(ABP_Flag_C, InitialControllingTeam) == 0x0002C6, "Member 'ABP_Flag_C::InitialControllingTeam' has a wrong offset!");

}

