#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameStateBase

#include "Basic.hpp"

#include "BP_GameStateBase_classes.hpp"
#include "BP_GameStateBase_parameters.hpp"


namespace SDK
{

// Function BP_GameStateBase.BP_GameStateBase_C.ExecuteUbergraph_BP_GameStateBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::ExecuteUbergraph_BP_GameStateBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "ExecuteUbergraph_BP_GameStateBase");

	Params::BP_GameStateBase_C_ExecuteUbergraph_BP_GameStateBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.CastVote
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class APlayerState*&              PlayerState                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::CastVote(bool Yes, const class APlayerState*& PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "CastVote");

	Params::BP_GameStateBase_C_CastVote Parms{};

	Parms.Yes = Yes;
	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.StartVoteKick
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_C*                PlayerToVoteKick_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VoteKickTimer_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::StartVoteKick(class ABP_PlayerState_C* PlayerToVoteKick_0, int32 VoteKickTimer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "StartVoteKick");

	Params::BP_GameStateBase_C_StartVoteKick Parms{};

	Parms.PlayerToVoteKick_0 = PlayerToVoteKick_0;
	Parms.VoteKickTimer_0 = VoteKickTimer_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.UpdateSky
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::UpdateSky()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "UpdateSky");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.MC_KillFeedAdd
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_PlayerStats&           KillerStats                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FST_PlayerStats&           VictimStats                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_GameStateBase_C::MC_KillFeedAdd(const struct FST_PlayerStats& KillerStats, const struct FST_PlayerStats& VictimStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "MC_KillFeedAdd");

	Params::BP_GameStateBase_C_MC_KillFeedAdd Parms{};

	Parms.KillerStats = std::move(KillerStats);
	Parms.VictimStats = std::move(VictimStats);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.MC_ShareChatMessage
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      UserName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    SpecialMessage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::MC_ShareChatMessage(const class FText& UserName, const class FText& Message, bool SpecialMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "MC_ShareChatMessage");

	Params::BP_GameStateBase_C_MC_ShareChatMessage Parms{};

	Parms.UserName = std::move(UserName);
	Parms.Message = std::move(Message);
	Parms.SpecialMessage = SpecialMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnGameHasEnded
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::OnGameHasEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnGameHasEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnKill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::OnKill(E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnKill");

	Params::BP_GameStateBase_C_OnKill Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "ReceiveTick");

	Params::BP_GameStateBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RespawnActor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AIControlled                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_VehicleSkinThemes                     VehicleSkinTheme                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RespawnActor(const struct FTransform& SpawnTransform, class UClass* Class_0, bool AIControlled, E_Teams Team, E_VehicleSkinThemes VehicleSkinTheme)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RespawnActor");

	Params::BP_GameStateBase_C_RespawnActor Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Class_0 = Class_0;
	Parms.AIControlled = AIControlled;
	Parms.Team = Team;
	Parms.VehicleSkinTheme = VehicleSkinTheme;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_GameStateBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.SpawnAICharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNewCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_Character_C*                  OldCharacterRef                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::SpawnAICharacter(int32 Amount, E_Teams Team, bool IsNewCharacter, class ABP_Character_C* OldCharacterRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "SpawnAICharacter");

	Params::BP_GameStateBase_C_SpawnAICharacter Parms{};

	Parms.Amount = Amount;
	Parms.Team = Team;
	Parms.IsNewCharacter = IsNewCharacter;
	Parms.OldCharacterRef = OldCharacterRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RegisterCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RegisterCharacter(class ABP_Character_C* Character, E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RegisterCharacter");

	Params::BP_GameStateBase_C_RegisterCharacter Parms{};

	Parms.Character = Character;
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.UnregisterCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::UnregisterCharacter(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "UnregisterCharacter");

	Params::BP_GameStateBase_C_UnregisterCharacter Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RegisterObjective
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_ObjectiveBase_C*&       Objective                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RegisterObjective(const class ABP_ObjectiveBase_C*& Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RegisterObjective");

	Params::BP_GameStateBase_C_RegisterObjective Parms{};

	Parms.Objective = Objective;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetControlledObjectivesFromTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ObjectiveCount                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetControlledObjectivesFromTeam(E_Teams Team, int32* ObjectiveCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetControlledObjectivesFromTeam");

	Params::BP_GameStateBase_C_GetControlledObjectivesFromTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectiveCount != nullptr)
		*ObjectiveCount = Parms.ObjectiveCount;
}


// Function BP_GameStateBase.BP_GameStateBase_C.EndGame
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 VictoriousTeam_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::EndGame(E_Teams VictoriousTeam_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "EndGame");

	Params::BP_GameStateBase_C_EndGame Parms{};

	Parms.VictoriousTeam_0 = VictoriousTeam_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnRep_VictoriousTeam
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::OnRep_VictoriousTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnRep_VictoriousTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddAliveCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_Character_C*&           Character                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddAliveCharacter(const class ABP_Character_C*& Character, E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddAliveCharacter");

	Params::BP_GameStateBase_C_AddAliveCharacter Parms{};

	Parms.Character = Character;
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RemoveAliveCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_Character_C*&           Character                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RemoveAliveCharacter(const class ABP_Character_C*& Character, E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RemoveAliveCharacter");

	Params::BP_GameStateBase_C_RemoveAliveCharacter Parms{};

	Parms.Character = Character;
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddPlayerKill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   KillerPlayerIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   VictimPlayerIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AIVehicle                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FString&                    AIVehicleName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// E_Teams                                 AIVehicleTeam                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAssistKill                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::AddPlayerKill(int32 KillerPlayerIndex, int32 VictimPlayerIndex, bool AIVehicle, const class FString& AIVehicleName, E_Teams AIVehicleTeam, bool IsAssistKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddPlayerKill");

	Params::BP_GameStateBase_C_AddPlayerKill Parms{};

	Parms.KillerPlayerIndex = KillerPlayerIndex;
	Parms.VictimPlayerIndex = VictimPlayerIndex;
	Parms.AIVehicle = AIVehicle;
	Parms.AIVehicleName = std::move(AIVehicleName);
	Parms.AIVehicleTeam = AIVehicleTeam;
	Parms.IsAssistKill = IsAssistKill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddPlayerDeath
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddPlayerDeath(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddPlayerDeath");

	Params::BP_GameStateBase_C_AddPlayerDeath Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddPlayerScore
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ScoreAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Units                                 IfVehicle_WhatType_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddPlayerScore(int32 ScoreAmount, int32 PlayerIndex, E_Units IfVehicle_WhatType_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddPlayerScore");

	Params::BP_GameStateBase_C_AddPlayerScore Parms{};

	Parms.ScoreAmount = ScoreAmount;
	Parms.PlayerIndex = PlayerIndex;
	Parms.IfVehicle_WhatType_ = IfVehicle_WhatType_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.UpdatePlayerTeam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::UpdatePlayerTeam(int32 PlayerIndex, E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "UpdatePlayerTeam");

	Params::BP_GameStateBase_C_UpdatePlayerTeam Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnRep_ActiveScenario
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::OnRep_ActiveScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnRep_ActiveScenario");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetTeamBalance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  AlliedCharacters                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AxisCharacters                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetTeamBalance(int32* AlliedCharacters, int32* AxisCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetTeamBalance");

	Params::BP_GameStateBase_C_GetTeamBalance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AlliedCharacters != nullptr)
		*AlliedCharacters = Parms.AlliedCharacters;

	if (AxisCharacters != nullptr)
		*AxisCharacters = Parms.AxisCharacters;
}


// Function BP_GameStateBase.BP_GameStateBase_C.RemoveLowestScoreBotFromTeam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RemoveLowestScoreBotFromTeam(E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RemoveLowestScoreBotFromTeam");

	Params::BP_GameStateBase_C_RemoveLowestScoreBotFromTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetRandomAvailableFlag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Flag_C**                      Flag                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetRandomAvailableFlag(E_Teams Team, class ABP_Flag_C** Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetRandomAvailableFlag");

	Params::BP_GameStateBase_C_GetRandomAvailableFlag Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Flag != nullptr)
		*Flag = Parms.Flag;
}


// Function BP_GameStateBase.BP_GameStateBase_C.SetScenario
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::SetScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "SetScenario");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.DoesTeamHaveAllObjectives?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasAllObjectives                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::DoesTeamHaveAllObjectives_(E_Teams Team, bool* HasAllObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "DoesTeamHaveAllObjectives?");

	Params::BP_GameStateBase_C_DoesTeamHaveAllObjectives_ Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (HasAllObjectives != nullptr)
		*HasAllObjectives = Parms.HasAllObjectives;
}


// Function BP_GameStateBase.BP_GameStateBase_C.UpdatePlayerClass
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Units                                 PlayerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::UpdatePlayerClass(int32 PlayerIndex, E_Units PlayerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "UpdatePlayerClass");

	Params::BP_GameStateBase_C_UpdatePlayerClass Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.PlayerClass = PlayerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetPlayerWithHighestScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayerIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetPlayerWithHighestScore(int32* PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetPlayerWithHighestScore");

	Params::BP_GameStateBase_C_GetPlayerWithHighestScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIndex != nullptr)
		*PlayerIndex = Parms.PlayerIndex;
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetPlayerWithMostKills
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayerIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetPlayerWithMostKills(int32* PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetPlayerWithMostKills");

	Params::BP_GameStateBase_C_GetPlayerWithMostKills Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIndex != nullptr)
		*PlayerIndex = Parms.PlayerIndex;
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetPlayerWithMostTankScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayerIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NoScore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::GetPlayerWithMostTankScore(int32* PlayerIndex, bool* NoScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetPlayerWithMostTankScore");

	Params::BP_GameStateBase_C_GetPlayerWithMostTankScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIndex != nullptr)
		*PlayerIndex = Parms.PlayerIndex;

	if (NoScore != nullptr)
		*NoScore = Parms.NoScore;
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetPlayerWithMostPlaneScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayerIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NoScore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::GetPlayerWithMostPlaneScore(int32* PlayerIndex, bool* NoScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetPlayerWithMostPlaneScore");

	Params::BP_GameStateBase_C_GetPlayerWithMostPlaneScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIndex != nullptr)
		*PlayerIndex = Parms.PlayerIndex;

	if (NoScore != nullptr)
		*NoScore = Parms.NoScore;
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetVotedForMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString*                          Map                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetVotedForMap(class FString* Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetVotedForMap");

	Params::BP_GameStateBase_C_GetVotedForMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Map != nullptr)
		*Map = std::move(Parms.Map);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddMapVote
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    VoterName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddMapVote(const class FString& Map, const class FString& VoterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddMapVote");

	Params::BP_GameStateBase_C_AddMapVote Parms{};

	Parms.Map = std::move(Map);
	Parms.VoterName = std::move(VoterName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetVotesForMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FString&                    Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32*                                  MapVotes_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetVotesForMap(const class FString& Map, int32* MapVotes_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetVotesForMap");

	Params::BP_GameStateBase_C_GetVotesForMap Parms{};

	Parms.Map = std::move(Map);

	UObject::ProcessEvent(Func, &Parms);

	if (MapVotes_0 != nullptr)
		*MapVotes_0 = Parms.MapVotes_0;
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnRep_MapVotes
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::OnRep_MapVotes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnRep_MapVotes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.PermaRemove AIControlled Vehicles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::PermaRemove_AIControlled_Vehicles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "PermaRemove AIControlled Vehicles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetPlayerWithHighestHealScore
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  PlayerIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NoScore                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::GetPlayerWithHighestHealScore(int32* PlayerIndex, bool* NoScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetPlayerWithHighestHealScore");

	Params::BP_GameStateBase_C_GetPlayerWithHighestHealScore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerIndex != nullptr)
		*PlayerIndex = Parms.PlayerIndex;

	if (NoScore != nullptr)
		*NoScore = Parms.NoScore;
}


// Function BP_GameStateBase.BP_GameStateBase_C.IncreaseEventToken
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::IncreaseEventToken(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "IncreaseEventToken");

	Params::BP_GameStateBase_C_IncreaseEventToken Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.GetNextScenario
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Scenarios                             CurrentScenario                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Scenarios*                            NextScenario                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::GetNextScenario(E_Scenarios CurrentScenario, E_Scenarios* NextScenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "GetNextScenario");

	Params::BP_GameStateBase_C_GetNextScenario Parms{};

	Parms.CurrentScenario = CurrentScenario;

	UObject::ProcessEvent(Func, &Parms);

	if (NextScenario != nullptr)
		*NextScenario = Parms.NextScenario;
}


// Function BP_GameStateBase.BP_GameStateBase_C.SpawnLandingCraft
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    AI_Controlled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_LandingCraft_C**              LandingCraft                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::SpawnLandingCraft(const struct FTransform& SpawnTransform, bool AI_Controlled, E_Teams Team, class ABP_LandingCraft_C** LandingCraft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "SpawnLandingCraft");

	Params::BP_GameStateBase_C_SpawnLandingCraft Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.AI_Controlled = AI_Controlled;
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (LandingCraft != nullptr)
		*LandingCraft = Parms.LandingCraft;
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddSpectator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_PlayerState_C*&         PlayerState                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddSpectator(const class ABP_PlayerState_C*& PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddSpectator");

	Params::BP_GameStateBase_C_AddSpectator Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RemoveSpectator
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_PlayerState_C*&         PlayerState                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RemoveSpectator(const class ABP_PlayerState_C*& PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RemoveSpectator");

	Params::BP_GameStateBase_C_RemoveSpectator Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.RegisterNewPlane
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlaneBase_C*                  Plane                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::RegisterNewPlane(class ABP_PlaneBase_C* Plane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "RegisterNewPlane");

	Params::BP_GameStateBase_C_RegisterNewPlane Parms{};

	Parms.Plane = Plane;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.SetPlayerAliveStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAlive                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_GameStateBase_C::SetPlayerAliveStatus(int32 PlayerIndex, bool IsAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "SetPlayerAliveStatus");

	Params::BP_GameStateBase_C_SetPlayerAliveStatus Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.IsAlive = IsAlive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.AddPlayerHealScore
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   HealScoreToAdd                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::AddPlayerHealScore(int32 PlayerIndex, int32 HealScoreToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "AddPlayerHealScore");

	Params::BP_GameStateBase_C_AddPlayerHealScore Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.HealScoreToAdd = HealScoreToAdd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.TempBanPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::TempBanPlayer(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "TempBanPlayer");

	Params::BP_GameStateBase_C_TempBanPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.PermaBanPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_GameStateBase_C::PermaBanPlayer(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "PermaBanPlayer");

	Params::BP_GameStateBase_C_PermaBanPlayer Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameStateBase.BP_GameStateBase_C.OnRep_PlayerToVoteKick
// (BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::OnRep_PlayerToVoteKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "OnRep_PlayerToVoteKick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameStateBase.BP_GameStateBase_C.CleanUpSpectatorReferenceArray
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_GameStateBase_C::CleanUpSpectatorReferenceArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameStateBase_C", "CleanUpSpectatorReferenceArray");

	UObject::ProcessEvent(Func, nullptr);
}

}

