#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Teams_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_VehicleSkinThemes_structs.hpp"
#include "E_VehicleAnimationTypes_structs.hpp"
#include "E_DamageTypes_structs.hpp"
#include "E_Units_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleBase.BP_VehicleBase_C
// 0x0140 (0x03C0 - 0x0280)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_VehicleBase_C : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   PhysicsBaseMesh;                                   // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VehicleRepairSound;                                // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DriverSeatTransformNew;                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UsernameLocation;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnDataComponent_C*                   PawnDataComponent;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VehicleTransform_AttachToVehiclePhysics_;          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentHealth;                                     // 0x02B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   VehicleName;                                       // 0x02C0(0x0018)(Edit, BlueprintVisible)
	bool                                          AI_Controlled;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor)
	E_Teams                                       Team;                                              // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHealth_InitialHP_;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SpawnTransform;                                    // 0x02E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Destroyed;                                         // 0x0310(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Controller_C*                       ControllerRef;                                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VehicleVelocity;                                   // 0x032C(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanRepair;                                         // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmallCalDamageAmount;                              // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 DamageAmount, const struct FVector& AttackerLocation)> DamageReceived; // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         VehicleZKillHeight;                                // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeakAOEDamageAmount;                               // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MediumCallDamageAmount;                            // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LargeCalStrongDamageAmount;                        // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Anti_AirDamageAmount;                              // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableManualRepairing;                             // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseAutoRepairInBase;                               // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_366[0x2];                                      // 0x0366(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToRepair;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HidePilotingPlayer;                                // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_VehicleAnimationTypes                       VehicleDriverAnimation;                            // 0x036D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36E[0x2];                                      // 0x036E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationTurningAmount;                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Possessed;                                         // 0x0374(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_375[0x3];                                      // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WreckageTime;                                      // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTimePlayerVehicle;                          // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnTimeForAI;                                  // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WaitingForRemoval;                                 // 0x0384(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Repairing;                                         // 0x0385(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_386[0x2];                                      // 0x0386(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepairProgress;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalPlayerVehicle;                              // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsPawnControlled;                                 // 0x038D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasBeenRespawned;                                  // 0x038E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_38F[0x1];                                      // 0x038F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_VehicleSkinThemes                           VehicleSkinTheme;                                  // 0x0394(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExitLocationRightOffsetDistance;                   // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceApplicationMultiplier;                        // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 VehicleUsernameFallback_AI_;                       // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsSelfDamage;                                      // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RecalculateDamageLocationEffectsLocally;           // 0x03B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          RemoveVehicleAfterWhileWhenNotUsed;                // 0x03B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_VehicleBase(int32 EntryPoint);
	void InitVehicleThemeSkin();
	void AttemptToRemoveVehicle();
	void MC_WreckageDestroy(const struct FVector& Location);
	void RespawnVehicle();
	void InitPawnDataTeam();
	void AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation);
	void OC_AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation);
	void S_AddPushForce(const struct FVector& Impulse, const struct FVector& SpinImpulse, const struct FVector& SpinLocation);
	void S_DamageSelf(int32 Amount);
	void ResetRemove();
	void DamagedByPlane_Server_(class ABP_PlaneBase_C* Plane);
	void S_SetRepaired();
	void S_SetRepairing(bool Repairing_0);
	void IsPossessedEvent();
	void HealthRepNotify();
	void S_DestroyVehicle();
	void OC_Damaged(int32 DamageAmount, const struct FVector& AttackerLocation);
	void DestroyedRepNotify();
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative);
	void S_RemoveVehicle(float Delay, class APawn* AttackerPawn);
	void ApplyDamage(int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void InpActEvt_Repair_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Repair_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Interact_K2Node_InputActionEvent_2(const struct FKey& Key);
	void UserConstructionScript();
	void OnRep_Destroyed();
	void GetVehicleHealthInformation(float* CurrentHealthPercentage, int32* CurrentHealthAmount, int32* MaxHealth);
	void OnRep_AI_Controlled();
	void EnableAIController();
	void OnRep_Health();
	void OnRep_Possessed();
	void OnRep_Respawning();
	void OnRep_Repairing();
	void DamageSelf(int32 Amount);
	void IsOwnVehicle_(bool* OwnVehicle);
	void GetPhysicsMesh(class UStaticMeshComponent** Array_Element);
	void GetFreeSeats(E_Teams OwnTeam, TArray<class ABP_VehicleSeat_C*>* FreeSeats, bool* hasEnemyInSeat);
	void OnRep_VehicleSkinTheme();
	void GetExitLocation(struct FVector* ExitLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleBase_C">();
	}
	static class ABP_VehicleBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_VehicleBase_C) == 0x000010, "Wrong alignment on ABP_VehicleBase_C");
static_assert(sizeof(ABP_VehicleBase_C) == 0x0003C0, "Wrong size on ABP_VehicleBase_C");
static_assert(offsetof(ABP_VehicleBase_C, UberGraphFrame) == 0x000280, "Member 'ABP_VehicleBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, PhysicsBaseMesh) == 0x000288, "Member 'ABP_VehicleBase_C::PhysicsBaseMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleRepairSound) == 0x000290, "Member 'ABP_VehicleBase_C::VehicleRepairSound' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, DriverSeatTransformNew) == 0x000298, "Member 'ABP_VehicleBase_C::DriverSeatTransformNew' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, UsernameLocation) == 0x0002A0, "Member 'ABP_VehicleBase_C::UsernameLocation' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, PawnDataComponent) == 0x0002A8, "Member 'ABP_VehicleBase_C::PawnDataComponent' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleTransform_AttachToVehiclePhysics_) == 0x0002B0, "Member 'ABP_VehicleBase_C::VehicleTransform_AttachToVehiclePhysics_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, CurrentHealth) == 0x0002B8, "Member 'ABP_VehicleBase_C::CurrentHealth' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleName) == 0x0002C0, "Member 'ABP_VehicleBase_C::VehicleName' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, AI_Controlled) == 0x0002D8, "Member 'ABP_VehicleBase_C::AI_Controlled' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, Team) == 0x0002D9, "Member 'ABP_VehicleBase_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, MaxHealth_InitialHP_) == 0x0002DC, "Member 'ABP_VehicleBase_C::MaxHealth_InitialHP_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, SpawnTransform) == 0x0002E0, "Member 'ABP_VehicleBase_C::SpawnTransform' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, Destroyed) == 0x000310, "Member 'ABP_VehicleBase_C::Destroyed' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, ControllerRef) == 0x000318, "Member 'ABP_VehicleBase_C::ControllerRef' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, LastLocation) == 0x000320, "Member 'ABP_VehicleBase_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleVelocity) == 0x00032C, "Member 'ABP_VehicleBase_C::VehicleVelocity' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, CanRepair) == 0x000338, "Member 'ABP_VehicleBase_C::CanRepair' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, SmallCalDamageAmount) == 0x00033C, "Member 'ABP_VehicleBase_C::SmallCalDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, DamageReceived) == 0x000340, "Member 'ABP_VehicleBase_C::DamageReceived' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleZKillHeight) == 0x000350, "Member 'ABP_VehicleBase_C::VehicleZKillHeight' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, WeakAOEDamageAmount) == 0x000354, "Member 'ABP_VehicleBase_C::WeakAOEDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, MediumCallDamageAmount) == 0x000358, "Member 'ABP_VehicleBase_C::MediumCallDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, LargeCalStrongDamageAmount) == 0x00035C, "Member 'ABP_VehicleBase_C::LargeCalStrongDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, Anti_AirDamageAmount) == 0x000360, "Member 'ABP_VehicleBase_C::Anti_AirDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, EnableManualRepairing) == 0x000364, "Member 'ABP_VehicleBase_C::EnableManualRepairing' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, UseAutoRepairInBase) == 0x000365, "Member 'ABP_VehicleBase_C::UseAutoRepairInBase' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, TimeToRepair) == 0x000368, "Member 'ABP_VehicleBase_C::TimeToRepair' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, HidePilotingPlayer) == 0x00036C, "Member 'ABP_VehicleBase_C::HidePilotingPlayer' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleDriverAnimation) == 0x00036D, "Member 'ABP_VehicleBase_C::VehicleDriverAnimation' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, AnimationTurningAmount) == 0x000370, "Member 'ABP_VehicleBase_C::AnimationTurningAmount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, Possessed) == 0x000374, "Member 'ABP_VehicleBase_C::Possessed' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, WreckageTime) == 0x000378, "Member 'ABP_VehicleBase_C::WreckageTime' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, RespawnTimePlayerVehicle) == 0x00037C, "Member 'ABP_VehicleBase_C::RespawnTimePlayerVehicle' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, RespawnTimeForAI) == 0x000380, "Member 'ABP_VehicleBase_C::RespawnTimeForAI' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, WaitingForRemoval) == 0x000384, "Member 'ABP_VehicleBase_C::WaitingForRemoval' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, Repairing) == 0x000385, "Member 'ABP_VehicleBase_C::Repairing' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, RepairProgress) == 0x000388, "Member 'ABP_VehicleBase_C::RepairProgress' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, IsLocalPlayerVehicle) == 0x00038C, "Member 'ABP_VehicleBase_C::IsLocalPlayerVehicle' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, bIsPawnControlled) == 0x00038D, "Member 'ABP_VehicleBase_C::bIsPawnControlled' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, HasBeenRespawned) == 0x00038E, "Member 'ABP_VehicleBase_C::HasBeenRespawned' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, DeltaTime) == 0x000390, "Member 'ABP_VehicleBase_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleSkinTheme) == 0x000394, "Member 'ABP_VehicleBase_C::VehicleSkinTheme' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, ExitLocationRightOffsetDistance) == 0x000398, "Member 'ABP_VehicleBase_C::ExitLocationRightOffsetDistance' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, ForceApplicationMultiplier) == 0x00039C, "Member 'ABP_VehicleBase_C::ForceApplicationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, VehicleUsernameFallback_AI_) == 0x0003A0, "Member 'ABP_VehicleBase_C::VehicleUsernameFallback_AI_' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, IsSelfDamage) == 0x0003B0, "Member 'ABP_VehicleBase_C::IsSelfDamage' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, RecalculateDamageLocationEffectsLocally) == 0x0003B1, "Member 'ABP_VehicleBase_C::RecalculateDamageLocationEffectsLocally' has a wrong offset!");
static_assert(offsetof(ABP_VehicleBase_C, RemoveVehicleAfterWhileWhenNotUsed) == 0x0003B2, "Member 'ABP_VehicleBase_C::RemoveVehicleAfterWhileWhenNotUsed' has a wrong offset!");

}

