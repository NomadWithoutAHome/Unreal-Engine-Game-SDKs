#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NewSky

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NewSky.BP_NewSky_C
// 0x0088 (0x02A8 - 0x0220)
class ABP_NewSky_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkySphereMesh;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh;                                           // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           FogColor;                                          // 0x0244(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SkyTexture;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyboxHeight;                                      // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSunHaze;                                        // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunHazeColor;                                      // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TODEmissiveness;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNight;                                           // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightColor;                                        // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LightDirection;                                    // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temperature;                                       // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NewSky(int32 EntryPoint);
	void LoadShadowBasedLightSettings();
	void RefreshSkyParameters();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NewSky_C">();
	}
	static class ABP_NewSky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NewSky_C>();
	}
};
static_assert(alignof(ABP_NewSky_C) == 0x000008, "Wrong alignment on ABP_NewSky_C");
static_assert(sizeof(ABP_NewSky_C) == 0x0002A8, "Wrong size on ABP_NewSky_C");
static_assert(offsetof(ABP_NewSky_C, UberGraphFrame) == 0x000220, "Member 'ABP_NewSky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, DirectionalLight) == 0x000228, "Member 'ABP_NewSky_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, SkySphereMesh) == 0x000230, "Member 'ABP_NewSky_C::SkySphereMesh' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_NewSky_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, Refresh) == 0x000240, "Member 'ABP_NewSky_C::Refresh' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, FogColor) == 0x000244, "Member 'ABP_NewSky_C::FogColor' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, SkyTexture) == 0x000258, "Member 'ABP_NewSky_C::SkyTexture' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, SkyboxHeight) == 0x000260, "Member 'ABP_NewSky_C::SkyboxHeight' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, UseSunHaze) == 0x000264, "Member 'ABP_NewSky_C::UseSunHaze' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, SunHazeColor) == 0x000268, "Member 'ABP_NewSky_C::SunHazeColor' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, TODEmissiveness) == 0x000278, "Member 'ABP_NewSky_C::TODEmissiveness' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, IsNight) == 0x00027C, "Member 'ABP_NewSky_C::IsNight' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, LightColor) == 0x000280, "Member 'ABP_NewSky_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, LightDirection) == 0x000290, "Member 'ABP_NewSky_C::LightDirection' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, Temperature) == 0x00029C, "Member 'ABP_NewSky_C::Temperature' has a wrong offset!");
static_assert(offsetof(ABP_NewSky_C, Intensity) == 0x0002A0, "Member 'ABP_NewSky_C::Intensity' has a wrong offset!");

}

