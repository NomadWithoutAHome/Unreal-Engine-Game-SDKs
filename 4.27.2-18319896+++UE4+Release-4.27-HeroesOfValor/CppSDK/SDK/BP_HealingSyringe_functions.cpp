#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HealingSyringe

#include "Basic.hpp"

#include "BP_HealingSyringe_classes.hpp"
#include "BP_HealingSyringe_parameters.hpp"


namespace SDK
{

// Function BP_HealingSyringe.BP_HealingSyringe_C.ExecuteUbergraph_BP_HealingSyringe
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HealingSyringe_C::ExecuteUbergraph_BP_HealingSyringe(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "ExecuteUbergraph_BP_HealingSyringe");

	Params::BP_HealingSyringe_C_ExecuteUbergraph_BP_HealingSyringe Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.OC_Reload
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_HealingSyringe_C::OC_Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "OC_Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.Reload
// (BlueprintCallable, BlueprintEvent)

void ABP_HealingSyringe_C::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.S_SetLoadedState
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Loaded_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HealingSyringe_C::S_SetLoadedState(bool Loaded_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "S_SetLoadedState");

	Params::BP_HealingSyringe_C_S_SetLoadedState Parms{};

	Parms.Loaded_0 = Loaded_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.LaunchInjector
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   RemainingAmmo                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HealingSyringe_C::LaunchInjector(int32 RemainingAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "LaunchInjector");

	Params::BP_HealingSyringe_C_LaunchInjector Parms{};

	Parms.RemainingAmmo = RemainingAmmo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.MC_HealEffects
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HealLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HealingSyringe_C::MC_HealEffects(const struct FVector& HealLocation, class ABP_Character_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "MC_HealEffects");

	Params::BP_HealingSyringe_C_MC_HealEffects Parms{};

	Parms.HealLocation = std::move(HealLocation);
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.S_HealEffects
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HealLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HealingSyringe_C::S_HealEffects(const struct FVector& HealLocation, class ABP_Character_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "S_HealEffects");

	Params::BP_HealingSyringe_C_S_HealEffects Parms{};

	Parms.HealLocation = std::move(HealLocation);
	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.Use
// (BlueprintCallable, BlueprintEvent)

void ABP_HealingSyringe_C::Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "Use");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HealingSyringe_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "ReceiveTick");

	Params::BP_HealingSyringe_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HealingSyringe_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HealingSyringe.BP_HealingSyringe_C.OnRep_Loaded
// (BlueprintCallable, BlueprintEvent)

void ABP_HealingSyringe_C::OnRep_Loaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HealingSyringe_C", "OnRep_Loaded");

	UObject::ProcessEvent(Func, nullptr);
}

}

