#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerState

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Teams_structs.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerState.BP_PlayerState_C
// 0x0068 (0x0388 - 0x0320)
class ABP_PlayerState_C final : public APlayerState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       Team;                                              // 0x0330(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FText KilledEnemyName, bool IsAssistKill)> OnEnemyKilled;    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         PlayerIndex;                                       // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillCounter_MultikillAnnouncement_;                // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHost;                                            // 0x0350(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MultiKillCounter;                                  // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   RecentlyKilledPlayer;                              // 0x0358(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ParsedPlayerName;                                  // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CachedUsername;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_PlayerState(int32 EntryPoint);
	void ResetKillCounter();
	void OC_SpawnEventToken(const struct FVector& Spawn_Transform_Location);
	void OC_KickToMainMenu();
	void OC_SendStatsToSteam(const struct FST_PlayerStats& Stats);
	void OC_PostSpecialActionNotification(const class FText& Message, const struct FLinearColor& Color);
	void OC_Kill(const class FText& KilledEnemyName, bool IsAssist, bool CountAsKill);
	void OC_DisplayDamageNumbers(const struct FVector& HitLocation, int32 DamageAmount, bool CriticalHit_, class AActor* HitActor, bool IsLow, E_DamageTypes DamageType);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnCallback_CBE15C504D14F6B56FCC2DB5DFE71574(const struct FLeaderboardFindResult& Data, bool bWasSuccessful);
	void OnCallback_B34C091241C05CE2FEC424A9088164C6(const struct FLeaderboardScoreUploaded& Data, bool bWasSuccessful);
	void IncreaseKills(int32 Amount);
	void CacheUsername(const class FString& UserName);
	void ValidateUsername(const class FString& UserName, bool* IsValid);
	void GetSteamID(class FString* SteamID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerState_C">();
	}
	static class ABP_PlayerState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerState_C>();
	}
};
static_assert(alignof(ABP_PlayerState_C) == 0x000008, "Wrong alignment on ABP_PlayerState_C");
static_assert(sizeof(ABP_PlayerState_C) == 0x000388, "Wrong size on ABP_PlayerState_C");
static_assert(offsetof(ABP_PlayerState_C, UberGraphFrame) == 0x000320, "Member 'ABP_PlayerState_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, DefaultSceneRoot) == 0x000328, "Member 'ABP_PlayerState_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, Team) == 0x000330, "Member 'ABP_PlayerState_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, OnEnemyKilled) == 0x000338, "Member 'ABP_PlayerState_C::OnEnemyKilled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, PlayerIndex) == 0x000348, "Member 'ABP_PlayerState_C::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, KillCounter_MultikillAnnouncement_) == 0x00034C, "Member 'ABP_PlayerState_C::KillCounter_MultikillAnnouncement_' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, IsHost) == 0x000350, "Member 'ABP_PlayerState_C::IsHost' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, MultiKillCounter) == 0x000354, "Member 'ABP_PlayerState_C::MultiKillCounter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, RecentlyKilledPlayer) == 0x000358, "Member 'ABP_PlayerState_C::RecentlyKilledPlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, ParsedPlayerName) == 0x000370, "Member 'ABP_PlayerState_C::ParsedPlayerName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerState_C, CachedUsername) == 0x000378, "Member 'ABP_PlayerState_C::CachedUsername' has a wrong offset!");

}

