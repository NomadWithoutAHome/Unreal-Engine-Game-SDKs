#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameModeBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AdvancedSessions_structs.hpp"
#include "ST_UserIDBanCheck_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameModeBase.BP_GameModeBase_C
// 0x0060 (0x0320 - 0x02C0)
class ABP_GameModeBase_C : public AGameModeBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSessionPropertyKeyPair>        LastFetchedExtraSessionSettings;                   // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ConnectedPlayerAmount;                             // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FST_UserIDBanCheck>             ToBeBanCheckedIDs;                                 // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         LatestCommunityBanList;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BanListReady;                                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UsesPassword;                                      // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AController*>                    ConnectedControllers;                              // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_GameModeBase(int32 EntryPoint);
	void BanListFetched(class UVaRestRequestJSON* Request);
	void FetchLatestBanList();
	void BootPlayer(class AController* Player);
	void CheckIfPlayerIsCommunityBanned();
	void ReceiveBeginPlay();
	void UpdateSessesionString(class FName Key, const class FString& StringValue);
	void UpdateSessionInt(class FName Key, int32 IntValue);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void OnSuccess_9852C3DF41CA2991DFE1CB829D68D4CD();
	void OnFailure_9852C3DF41CA2991DFE1CB829D68D4CD();
	void OnSuccess_5637587B49E186B5EBC2B1A699F2E746();
	void OnFailure_5637587B49E186B5EBC2B1A699F2E746();
	void CheckIfPlayerIsBannedOnHost(const class FString& UniqueUserID, class AController* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameModeBase_C">();
	}
	static class ABP_GameModeBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameModeBase_C>();
	}
};
static_assert(alignof(ABP_GameModeBase_C) == 0x000008, "Wrong alignment on ABP_GameModeBase_C");
static_assert(sizeof(ABP_GameModeBase_C) == 0x000320, "Wrong size on ABP_GameModeBase_C");
static_assert(offsetof(ABP_GameModeBase_C, UberGraphFrame) == 0x0002C0, "Member 'ABP_GameModeBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_GameModeBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, LastFetchedExtraSessionSettings) == 0x0002D0, "Member 'ABP_GameModeBase_C::LastFetchedExtraSessionSettings' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, ConnectedPlayerAmount) == 0x0002E0, "Member 'ABP_GameModeBase_C::ConnectedPlayerAmount' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, ToBeBanCheckedIDs) == 0x0002E8, "Member 'ABP_GameModeBase_C::ToBeBanCheckedIDs' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, LatestCommunityBanList) == 0x0002F8, "Member 'ABP_GameModeBase_C::LatestCommunityBanList' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, BanListReady) == 0x000308, "Member 'ABP_GameModeBase_C::BanListReady' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, UsesPassword) == 0x000309, "Member 'ABP_GameModeBase_C::UsesPassword' has a wrong offset!");
static_assert(offsetof(ABP_GameModeBase_C, ConnectedControllers) == 0x000310, "Member 'ABP_GameModeBase_C::ConnectedControllers' has a wrong offset!");

}

