#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Trapbase

#include "Basic.hpp"

#include "BP_Trapbase_classes.hpp"
#include "BP_Trapbase_parameters.hpp"


namespace SDK
{

// Function BP_Trapbase.BP_Trapbase_C.ExecuteUbergraph_BP_Trapbase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Trapbase_C::ExecuteUbergraph_BP_Trapbase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ExecuteUbergraph_BP_Trapbase");

	Params::BP_Trapbase_C_ExecuteUbergraph_BP_Trapbase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Trapbase.BP_Trapbase_C.RemoveTrap
// (BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::RemoveTrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "RemoveTrap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.SetArmedMaterialState
// (BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::SetArmedMaterialState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "SetArmedMaterialState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.ApplyDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamageAmount_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageHitLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            AttackerPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Debuff                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCriticalHit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreTeamProtection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      SpecialKillMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ShouldBreakInvisibility                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPiercingDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Trapbase_C::ApplyDamage(int32 DamageAmount_0, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType_0, int32 PlayerIndex, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ApplyDamage");

	Params::BP_Trapbase_C_ApplyDamage Parms{};

	Parms.DamageAmount_0 = DamageAmount_0;
	Parms.DamageHitLocation = std::move(DamageHitLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.AttackerPawn = AttackerPawn;
	Parms.Debuff = Debuff;
	Parms.DamageType_0 = DamageType_0;
	Parms.PlayerIndex = PlayerIndex;
	Parms.IsCriticalHit = IsCriticalHit;
	Parms.IgnoreTeamProtection = IgnoreTeamProtection;
	Parms.SpecialKillMessage = std::move(SpecialKillMessage);
	Parms.ShouldBreakInvisibility = ShouldBreakInvisibility;
	Parms.IsPiercingDamage = IsPiercingDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Trapbase.BP_Trapbase_C.MC_Placed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::MC_Placed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "MC_Placed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Trapbase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ReceiveTick");

	Params::BP_Trapbase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Trapbase.BP_Trapbase_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Trapbase_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ReceiveHit");

	Params::BP_Trapbase_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Trapbase.BP_Trapbase_C.Explode
// (BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "Explode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.MC_Explode
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::MC_Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "MC_Explode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Trapbase_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ReceiveActorBeginOverlap");

	Params::BP_Trapbase_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Trapbase.BP_Trapbase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Trapbase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.AutoDetonateCountdown__UpdateFunc
// (BlueprintEvent)

void ABP_Trapbase_C::AutoDetonateCountdown__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "AutoDetonateCountdown__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.AutoDetonateCountdown__FinishedFunc
// (BlueprintEvent)

void ABP_Trapbase_C::AutoDetonateCountdown__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "AutoDetonateCountdown__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.OnRep_Placed
// (BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::OnRep_Placed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "OnRep_Placed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.OnRep_Armed
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Trapbase_C::OnRep_Armed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "OnRep_Armed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Trapbase.BP_Trapbase_C.FindActiveTrapAmountForOwner
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  TrapAmount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Trapbase_C**                  OldestTrap                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Trapbase_C::FindActiveTrapAmountForOwner(int32* TrapAmount, class ABP_Trapbase_C** OldestTrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Trapbase_C", "FindActiveTrapAmountForOwner");

	Params::BP_Trapbase_C_FindActiveTrapAmountForOwner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TrapAmount != nullptr)
		*TrapAmount = Parms.TrapAmount;

	if (OldestTrap != nullptr)
		*OldestTrap = Parms.OldestTrap;
}

}

