#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ApplyDamage

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK::Params
{

// Function ApplyDamage.ApplyDamage_C.ApplyDamage
// 0x0060 (0x0060 - 0x0000)
struct ApplyDamage_C_ApplyDamage final
{
public:
	int32                                         DamageAmount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageHitLocation;                                 // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DamageDirection;                                   // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  AttackerPawn;                                      // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Debuff;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DamageTypes                                 DamageType;                                        // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerIndex;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCriticalHit;                                     // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IgnoreTeamProtection;                              // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SpecialKillMessage;                                // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          ShouldBreakInvisibility;                           // 0x0058(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsPiercingDamage;                                  // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ApplyDamage_C_ApplyDamage) == 0x000008, "Wrong alignment on ApplyDamage_C_ApplyDamage");
static_assert(sizeof(ApplyDamage_C_ApplyDamage) == 0x000060, "Wrong size on ApplyDamage_C_ApplyDamage");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, DamageAmount) == 0x000000, "Member 'ApplyDamage_C_ApplyDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, DamageHitLocation) == 0x000004, "Member 'ApplyDamage_C_ApplyDamage::DamageHitLocation' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, DamageDirection) == 0x000010, "Member 'ApplyDamage_C_ApplyDamage::DamageDirection' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, AttackerPawn) == 0x000020, "Member 'ApplyDamage_C_ApplyDamage::AttackerPawn' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, Debuff) == 0x000028, "Member 'ApplyDamage_C_ApplyDamage::Debuff' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, DamageType) == 0x000030, "Member 'ApplyDamage_C_ApplyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, PlayerIndex) == 0x000034, "Member 'ApplyDamage_C_ApplyDamage::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, IsCriticalHit) == 0x000038, "Member 'ApplyDamage_C_ApplyDamage::IsCriticalHit' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, IgnoreTeamProtection) == 0x000039, "Member 'ApplyDamage_C_ApplyDamage::IgnoreTeamProtection' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, SpecialKillMessage) == 0x000040, "Member 'ApplyDamage_C_ApplyDamage::SpecialKillMessage' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, ShouldBreakInvisibility) == 0x000058, "Member 'ApplyDamage_C_ApplyDamage::ShouldBreakInvisibility' has a wrong offset!");
static_assert(offsetof(ApplyDamage_C_ApplyDamage, IsPiercingDamage) == 0x000059, "Member 'ApplyDamage_C_ApplyDamage::IsPiercingDamage' has a wrong offset!");

}

