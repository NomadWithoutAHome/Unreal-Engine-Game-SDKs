#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Trapbase

#include "Basic.hpp"

#include "E_DamageTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Teams_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Trapbase.BP_Trapbase_C
// 0x0110 (0x0330 - 0x0220)
class ABP_Trapbase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               TrapIndicator;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_TrapThrowTrail;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TrapActivationRadius;                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TrapMesh;                                          // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         AutoDetonateCountdown_NewTrack_0_9A9F1F144D30BD7DC15169B6058158A9; // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AutoDetonateCountdown__Direction_9A9F1F144D30BD7DC15169B6058158A9; // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AutoDetonateCountdown;                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       Team;                                              // 0x0260(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OwningPlayerIndex;                                 // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class APawn*                                  OwningPawn;                                        // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                ThrowDirection;                                    // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0280(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Placed;                                            // 0x02B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_2B1[0xF];                                      // 0x02B1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FinalTransform;                                    // 0x02C0(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_Teams                                       OwnTeam;                                           // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOERadius;                                         // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DamageTypes                                 DamageType;                                        // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 BuffDebuff;                                        // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageAmount;                                      // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactParticleSize;                                // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ExplosionParticle;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Armed;                                             // 0x0318(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoDetonateTimePassed;                            // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GlowMID;                                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchForce;                                       // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ThrowForce;                                        // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Trapbase(int32 EntryPoint);
	void RemoveTrap();
	void SetArmedMaterialState();
	void ApplyDamage(int32 DamageAmount_0, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType_0, int32 PlayerIndex, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage);
	void MC_Placed();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Explode();
	void MC_Explode();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void AutoDetonateCountdown__UpdateFunc();
	void AutoDetonateCountdown__FinishedFunc();
	void OnRep_Placed();
	void OnRep_Armed();
	void FindActiveTrapAmountForOwner(int32* TrapAmount, class ABP_Trapbase_C** OldestTrap);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Trapbase_C">();
	}
	static class ABP_Trapbase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Trapbase_C>();
	}
};
static_assert(alignof(ABP_Trapbase_C) == 0x000010, "Wrong alignment on ABP_Trapbase_C");
static_assert(sizeof(ABP_Trapbase_C) == 0x000330, "Wrong size on ABP_Trapbase_C");
static_assert(offsetof(ABP_Trapbase_C, UberGraphFrame) == 0x000220, "Member 'ABP_Trapbase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, TrapIndicator) == 0x000228, "Member 'ABP_Trapbase_C::TrapIndicator' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, P_TrapThrowTrail) == 0x000230, "Member 'ABP_Trapbase_C::P_TrapThrowTrail' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, TrapActivationRadius) == 0x000238, "Member 'ABP_Trapbase_C::TrapActivationRadius' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, TrapMesh) == 0x000240, "Member 'ABP_Trapbase_C::TrapMesh' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_Trapbase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, AutoDetonateCountdown_NewTrack_0_9A9F1F144D30BD7DC15169B6058158A9) == 0x000250, "Member 'ABP_Trapbase_C::AutoDetonateCountdown_NewTrack_0_9A9F1F144D30BD7DC15169B6058158A9' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, AutoDetonateCountdown__Direction_9A9F1F144D30BD7DC15169B6058158A9) == 0x000254, "Member 'ABP_Trapbase_C::AutoDetonateCountdown__Direction_9A9F1F144D30BD7DC15169B6058158A9' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, AutoDetonateCountdown) == 0x000258, "Member 'ABP_Trapbase_C::AutoDetonateCountdown' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, Team) == 0x000260, "Member 'ABP_Trapbase_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, OwningPlayerIndex) == 0x000264, "Member 'ABP_Trapbase_C::OwningPlayerIndex' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, OwningPawn) == 0x000268, "Member 'ABP_Trapbase_C::OwningPawn' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, ThrowDirection) == 0x000270, "Member 'ABP_Trapbase_C::ThrowDirection' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, Transform) == 0x000280, "Member 'ABP_Trapbase_C::Transform' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, Placed) == 0x0002B0, "Member 'ABP_Trapbase_C::Placed' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, FinalTransform) == 0x0002C0, "Member 'ABP_Trapbase_C::FinalTransform' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, OwnTeam) == 0x0002F0, "Member 'ABP_Trapbase_C::OwnTeam' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, AOERadius) == 0x0002F4, "Member 'ABP_Trapbase_C::AOERadius' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, DamageType) == 0x0002F8, "Member 'ABP_Trapbase_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, BuffDebuff) == 0x000300, "Member 'ABP_Trapbase_C::BuffDebuff' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, DamageAmount) == 0x000308, "Member 'ABP_Trapbase_C::DamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, ImpactParticleSize) == 0x00030C, "Member 'ABP_Trapbase_C::ImpactParticleSize' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, ExplosionParticle) == 0x000310, "Member 'ABP_Trapbase_C::ExplosionParticle' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, Armed) == 0x000318, "Member 'ABP_Trapbase_C::Armed' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, AutoDetonateTimePassed) == 0x00031C, "Member 'ABP_Trapbase_C::AutoDetonateTimePassed' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, GlowMID) == 0x000320, "Member 'ABP_Trapbase_C::GlowMID' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, LaunchForce) == 0x000328, "Member 'ABP_Trapbase_C::LaunchForce' has a wrong offset!");
static_assert(offsetof(ABP_Trapbase_C, ThrowForce) == 0x00032C, "Member 'ABP_Trapbase_C::ThrowForce' has a wrong offset!");

}

