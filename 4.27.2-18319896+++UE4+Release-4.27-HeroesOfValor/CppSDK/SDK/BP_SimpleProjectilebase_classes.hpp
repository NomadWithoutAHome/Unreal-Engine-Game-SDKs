#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SimpleProjectilebase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SimpleProjectilebase.BP_SimpleProjectilebase_C
// 0x0138 (0x0358 - 0x0220)
class ABP_SimpleProjectilebase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               PoisonSmoke;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FlightSound;                                       // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TravelDirection;                                   // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x025C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Freeze;                                            // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Actors_to_Ignore;                                  // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	struct FVector                                InitialLocation;                                   // 0x0280(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalProjectile;                                   // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsAIProjectile;                                    // 0x028D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_28E[0x2];                                      // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  AttackerPawn;                                      // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DropAmount;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPoisonInfused;                                   // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusDamage;                                       // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USoundBase*                             CharacterImpactSound;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnvironmentImpactSound;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactParticle;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TravelSpeed;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DropSpeed;                                         // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LingerTime;                                        // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreEnemies;                                     // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LastHit;                                           // 0x02D0(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)

public:
	void ExecuteUbergraph_BP_SimpleProjectilebase(int32 EntryPoint);
	void CharacterHit(class ABP_Character_C* Character, const struct FVector& HitLocation);
	void SetMeleeWeaponSkin(int32 SkinIndex);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void FindClosestCharacterBone(const struct FVector& ImpactPoint, class ABP_Character_C* Character, class FName* ClosestBoneName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SimpleProjectilebase_C">();
	}
	static class ABP_SimpleProjectilebase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SimpleProjectilebase_C>();
	}
};
static_assert(alignof(ABP_SimpleProjectilebase_C) == 0x000008, "Wrong alignment on ABP_SimpleProjectilebase_C");
static_assert(sizeof(ABP_SimpleProjectilebase_C) == 0x000358, "Wrong size on ABP_SimpleProjectilebase_C");
static_assert(offsetof(ABP_SimpleProjectilebase_C, UberGraphFrame) == 0x000220, "Member 'ABP_SimpleProjectilebase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, PoisonSmoke) == 0x000228, "Member 'ABP_SimpleProjectilebase_C::PoisonSmoke' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, FlightSound) == 0x000230, "Member 'ABP_SimpleProjectilebase_C::FlightSound' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, RotatingMovement) == 0x000238, "Member 'ABP_SimpleProjectilebase_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, StaticMesh) == 0x000240, "Member 'ABP_SimpleProjectilebase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_SimpleProjectilebase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, TravelDirection) == 0x000250, "Member 'ABP_SimpleProjectilebase_C::TravelDirection' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, LastLocation) == 0x00025C, "Member 'ABP_SimpleProjectilebase_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, Freeze) == 0x000268, "Member 'ABP_SimpleProjectilebase_C::Freeze' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, Actors_to_Ignore) == 0x000270, "Member 'ABP_SimpleProjectilebase_C::Actors_to_Ignore' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, InitialLocation) == 0x000280, "Member 'ABP_SimpleProjectilebase_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, LocalProjectile) == 0x00028C, "Member 'ABP_SimpleProjectilebase_C::LocalProjectile' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, IsAIProjectile) == 0x00028D, "Member 'ABP_SimpleProjectilebase_C::IsAIProjectile' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, AttackerPawn) == 0x000290, "Member 'ABP_SimpleProjectilebase_C::AttackerPawn' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, DropAmount) == 0x000298, "Member 'ABP_SimpleProjectilebase_C::DropAmount' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, Delta_Seconds) == 0x00029C, "Member 'ABP_SimpleProjectilebase_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, IsPoisonInfused) == 0x0002A0, "Member 'ABP_SimpleProjectilebase_C::IsPoisonInfused' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, BonusDamage) == 0x0002A4, "Member 'ABP_SimpleProjectilebase_C::BonusDamage' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, CharacterImpactSound) == 0x0002A8, "Member 'ABP_SimpleProjectilebase_C::CharacterImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, EnvironmentImpactSound) == 0x0002B0, "Member 'ABP_SimpleProjectilebase_C::EnvironmentImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, ImpactParticle) == 0x0002B8, "Member 'ABP_SimpleProjectilebase_C::ImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, TravelSpeed) == 0x0002C0, "Member 'ABP_SimpleProjectilebase_C::TravelSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, DropSpeed) == 0x0002C4, "Member 'ABP_SimpleProjectilebase_C::DropSpeed' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, LingerTime) == 0x0002C8, "Member 'ABP_SimpleProjectilebase_C::LingerTime' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, IgnoreEnemies) == 0x0002CC, "Member 'ABP_SimpleProjectilebase_C::IgnoreEnemies' has a wrong offset!");
static_assert(offsetof(ABP_SimpleProjectilebase_C, LastHit) == 0x0002D0, "Member 'ABP_SimpleProjectilebase_C::LastHit' has a wrong offset!");

}

