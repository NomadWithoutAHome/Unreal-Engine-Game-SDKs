#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlobalFunctions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Units_structs.hpp"
#include "E_UnlockableCategories_structs.hpp"
#include "E_Teams_structs.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GlobalFunctions.GlobalFunctions_C
// 0x0000 (0x0028 - 0x0028)
class UGlobalFunctions_C final : public UBlueprintFunctionLibrary
{
public:
	static void Get_PlayerUnitType(class APawn* Pawn, class UObject* __WorldContext, E_Units* UnitType);
	static void GetRandomSpawnPoint(class ABP_Flag_C* Flag, bool IsAI, class UObject* __WorldContext, struct FVector* SpawnLocation, struct FRotator* SpawnRotation, class ABP_VehicleBase_C** VehicleToEnterAfterSpawn);
	static void GetProjectileFireDirection(class UArrowComponent* ProjectileStart, const struct FVector& CameraLocation, const struct FVector& CameraDirection, const TArray<class AActor*>& ActorsToIgnore, const struct FVector& ActorLocation, bool UseSimpleDirection, class UObject* __WorldContext, struct FVector* FinalDirection, float* Distance, bool* IsInstantHit, struct FHitResult* InstantHit);
	static void GetCosmeticItemIndex(const struct FST_Unlockable& Item, class UObject* __WorldContext, int32* ItemIndex);
	static void IsItemUnlocked_(E_UnlockableCategories Category, int32 ItemIndex, class UObject* __WorldContext, bool* Unlocked);
	static void GetCosmeticItemDatatable(E_UnlockableCategories Category, class UObject* __WorldContext, class UDataTable** NewParam);
	static void DisplayDamageNumber(const struct FVector& WorldPosition, int32 DamageAmount, bool CriticalHit_, class AActor* HitActor, bool IsLow, E_DamageTypes DamageType, class UObject* __WorldContext);
	static void GetPawnData(class AActor* PawnActor, class UObject* __WorldContext, E_Teams* Team, int32* PlayerIndex, struct FST_PlayerStats* PlayerStats, class UPawnDataComponent_C** PawnDataComponent);
	static void EnterUIModus(class UObject* __WorldContext);
	static void EnterGameModus(class UObject* __WorldContext);
	static void InflictDamage(const class AActor*& HitActor, const struct FVector& HitLocation, int32 DamageAmount, E_DamageTypes DamageType, const TArray<class AActor*>& AlreadyHitActors, bool FromServer, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* BuffDebuff, int32 PlayerIndex_Attacker_, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsCriticalHit, bool IsPiercingDamage, class UObject* __WorldContext);
	static void InflictAOEDamage(const struct FVector& AOELocation, float AOERadius, E_DamageTypes DamageType, const TArray<class AActor*>& AlreadyHitActors, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* BuffDebuff, bool FromServer, int32 DamageAmount, bool Debug, int32 PlayerIndex, const class FText& SpecialKillMessage, bool EnableLaunch, float LaunchForce, bool IgnoreAOERadius_AlwaysDealFullDMG_, const struct FHitResult& ExtraHit_optional_, class UObject* __WorldContext);
	static void GetRandomTeamFlag(E_Teams Team, class UObject* __WorldContext, class ABP_Flag_C** Flag);
	static void GetAllPlayerUnitsProgress(class UObject* __WorldContext, TArray<struct FST_UnitProgress>* UnitProgress);
	static void GetPlayerUnitProgress(E_Units Class_0, E_Teams Team, class UObject* __WorldContext, struct FST_UnitProgress* Progress);
	static void ApplyWeaponSkin(const struct FST_Unlockable& Cosmetic, class UStaticMeshComponent* MeshComponent, bool MainlyWoodenWeapon, class UObject* __WorldContext);
	static void GetCosmeticItemStruct(int32 Index_0, E_UnlockableCategories Category, class UObject* __WorldContext, struct FST_Unlockable* Item);
	static void LevelableUnitsAPICallsList(class UObject* __WorldContext, TArray<class FString>* Units);
	static void GetUnitLevel(const struct FST_UnitProgress& UnitProgress, class UObject* __WorldContext, int32* Level, int32* RequiredXPForNextLevel, int32* CurrentXPAmountProgress);
	static void GetLevelFromXP(int32 XPAmount, class UObject* __WorldContext, int32* Level, int32* RequiredXPForNextLevel, int32* CurrentXPAmountProgress);
	static void GetPlayerRankTitle(int32 TotalLevel, class UObject* __WorldContext, class FString* Rank);
	static void GetPlayerRank(class UObject* __WorldContext, int32* PlayerRank);
	static int32 GetRequiredXPForLevel(int32 Level, class UObject* __WorldContext);
	static void GetTotalPlayerScore(class UObject* __WorldContext, int32* TotalScore);
	static void GetPlayerStats(int32 PlayerIndex, class UObject* __WorldContext, struct FST_PlayerStats* Stats);
	static void Global_Game_Settings(class UObject* __WorldContext, float* AI_CommandoDetectRange, float* GravityAmount, float* Camera_FOV);
	static void GetOptions(class UObject* __WorldContext, struct FST_Options* Options);
	static void ApplyCharacterCustomization(const struct FST_CharacterCustomization& Customization, class USkeletalMeshComponent* FacialHair, class USkeletalMeshComponent* CharacterMesh, class UStaticMeshComponent* Hat, class UStaticMeshComponent* HatExtras, class USkeletalMeshComponent* Legs, class UStaticMeshComponent* UpperFace, class USkeletalMeshComponent* Torso, class UStaticMeshComponent* LowerFace, class USkeletalMeshComponent* Back, class USkeletalMeshComponent* Feet, class UObject* __WorldContext, class UMaterialInstanceDynamic** LegsMID, class UMaterialInstanceDynamic** CharacterMID, TArray<class UMaterialInstanceDynamic*>* HatItemMIDs, TArray<class UMaterialInstanceDynamic*>* TorsoMIDs);
	static void GetClassAndTeamUnitIndex(E_Units Class_0, E_Teams Team, class UObject* __WorldContext, int32* Index_0);
	static void IncreaseStat(const class FString& Stat, int32 IncreaseAmount, class UObject* __WorldContext, bool* Success);
	static void GetEventRewardFromScore(int32 Score, class UObject* __WorldContext, int32* Amount);
	static void GetAOEObstacleHitAmount(class AActor* HitActor, const struct FVector& AOEOriginLocation, class UObject* __WorldContext, float* DamageAmount_0_1_);
	static void Get_Unit_Character_Customization(const struct FST_SelectedCosmeticItems& SelectedCosmeticItems, int32 UnitIndex, class UObject* __WorldContext, struct FST_CharacterCustomization* CharacterCustomization);
	static void GetSteamItemUnlockedState(int32 ItemIndex, class UObject* __WorldContext, bool* Unlocked, int32* Quantity);
	static void CheckIfPawnIsAlive(class APawn* Pawn, class UObject* __WorldContext, bool* Alive);
	static void GetMapCenter(class UObject* __WorldContext, struct FVector* MapCenterLocation, bool* IsValid);
	static void GetTruePawnLocation(class APawn* Pawn, class UObject* __WorldContext, struct FVector* PawnLocation);
	static void GetCharacterDamageBuffDebuff(class ABP_Character_C* Character, class UObject* __WorldContext, class UClass** BuffDebuff);
	static void InitOptions(class UObject* __WorldContext);
	static void RemovePlayerFromGame(class APlayerState* PlayerState, class UObject* __WorldContext);
	static void CheckIfOnCommunityBanList(class APlayerState* PlayerState, class UObject* __WorldContext, bool* OnList);
	static void GetPlayerControllerFromPlayerState(class APlayerState* PlayerState, class UObject* __WorldContext, class APlayerController** PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GlobalFunctions_C">();
	}
	static class UGlobalFunctions_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalFunctions_C>();
	}
};
static_assert(alignof(UGlobalFunctions_C) == 0x000008, "Wrong alignment on UGlobalFunctions_C");
static_assert(sizeof(UGlobalFunctions_C) == 0x000028, "Wrong size on UGlobalFunctions_C");

}

