#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RangedWeaponBase

#include "Basic.hpp"

#include "E_DamageTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "E_WeaponRange_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_EquipableBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RangedWeaponBase.BP_RangedWeaponBase_C
// 0x01B0 (0x0488 - 0x02D8)
class ABP_RangedWeaponBase_C : public ABP_EquipableBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_RangedWeaponBase_C;              // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               MuzzlePoison;                                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        SightLocation_Scope_;                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FireSound;                                         // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               MuzzleFlame;                                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        BulletEjectLocation;                               // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ReloadSound;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ProjectileStartLocation;                           // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_DE5C8BA7409CA0EF11A41CAA4CAC0FFC; // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_DE5C8BA7409CA0EF11A41CAA4CAC0FFC; // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SingleShotFireSound;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ClipEmptySound;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ImpactSound;                                       // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InsertMagSoundEffect;                              // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RemoveMagSoundEffect;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FinishedReloadSoundEffect;                         // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FireParticleEffect;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Ammo;                                              // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ImpactParticleEffect;                              // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        VehicleImpactParticle;                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FireAnimation;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HipFireMontageAnimation;                           // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeaponRange                                 WeaponRange;                                       // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x3];                                      // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MagazineSize;                                      // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullyLoaded;                                       // 0x0398(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          PreLoaded;                                         // 0x0399(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_39A[0x2];                                      // 0x039A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadTimer;                                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DirectDamageAmount;                                // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DamageTypes                                 DirectDamageType;                                  // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProjectileAmount_PerShot_;                         // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRateCD;                                        // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadTime_Cooldown_;                              // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilAmount_HipFire_;                             // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilAmount_WhileAiming_;                         // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableSidewaysRecoil;                              // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseRandomRecoil;                                   // 0x03BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BE[0x2];                                      // 0x03BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpreadAmount;                                      // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipFireSpreadAmountMultiplier;                     // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HipFireExtraAddedRandomSpread;                     // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AOEDamageAmount;                                   // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AOERadius;                                         // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DamageTypes                                 AOEDamageType;                                     // 0x03D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreAOERadius_AlwaysDealFullDMG_;                // 0x03D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableDamageMultiplierOnAOE;                       // 0x03D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D7[0x1];                                      // 0x03D7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeaponAimZoomFOV;                                  // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileSpeed;                                   // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Seconds;                                     // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Firing;                                            // 0x03E4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileDropRate;                                // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ProjectileClass;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSimpleDirectionCalculation;                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableHeadshots;                                   // 0x03F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableSpreadMultiplier_FromSkills_;                // 0x03FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableAutoFire;                                    // 0x03FB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanOverrideFireRate;                               // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ScopedWeapon;                                      // 0x03FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableAimInaccuracyForAI;                          // 0x03FE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FF[0x1];                                      // 0x03FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_MaxAimInaccuracy;                               // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableRandomAIFireCD;                              // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableBulletEjectAfterEachShot;                    // 0x0405(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_406[0x2];                                      // 0x0406(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OtherPlayerWeaponSoundVolume;                      // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ownWeaponSoundVolume;                              // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFire;                                           // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableBulletEjectWhenEmpty;                        // 0x0411(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_412[0x2];                                      // 0x0412(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BulletEjectAfterEmptyDelay;                        // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttachToLeftHandWhileReloading;                    // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CreateBulletTrail;                                 // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseLongTrail;                                      // 0x041A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableWeaponCockAnimation;                         // 0x041B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableAimSway;                                     // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableDryFireSoundWhenEmpty;                       // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 FireCameraShake;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MuzzleSize;                                        // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactParticleSize;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactDecalSize;                                   // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireCameraShakeAmount;                             // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeaponInMainHand;                                  // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeaponAttachedToLeftHand;                          // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43A[0x2];                                      // 0x043A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MuzzleLightIntensity;                              // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MuzzleLightMaxRandomIntensity;                     // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RecentlyFiredAll;                                  // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SingleFireRequest;                                 // 0x0445(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinalFlightDirection;                              // 0x0448(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireDelayAfterSprint;                              // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationRecoilAmount;                             // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationHandRecoilAmount;                         // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadPercentageUntilHideMag;                      // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadPercentageUntilShowMagAgain;                 // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponReloadSpeedMultiplier_NonFramebasedReloads_; // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EjectedBulletCaseSize;                             // 0x046C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ProjectileTracerType;                              // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRateSpeedPercentage;                           // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireAnimationSpeed;                                // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RangedWeaponBase(int32 EntryPoint);
	void ResetDryFire();
	void OC_Reload();
	void Reload();
	void DryFire();
	void ResetBulletEjectWhenEmpty();
	void HasBeenUnequiped();
	void S_ShareCorrectReloadTimerFromClient(float ReloadTimer_0);
	void ShareCorrectReloadTimerFromClient();
	void MC_ShareCorrectReloadTimerFromClient(float ReloadTimer_0);
	void S_SetPreloaded(bool PreLoaded_0);
	void InstantReload();
	void EquipedStateChanged(bool Equiped);
	void AttemptSingleFire();
	void RevertWeaponSocket();
	void SingleMuzzleLightFlash();
	void AttachWeaponToLeftHand();
	void WeaponUsed_NonAutoRepeating_();
	void AttachWeaponToRightHand();
	void SetCanFire(bool CanFire_0);
	void S_SetLoaded(bool Loaded);
	void S_ClipEmpty();
	void S_SetFiring(bool Firing_0);
	void MC_FireProjectile(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile);
	void S_Fire(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile, const struct FST_WeaponData& WeaponData);
	void MC_ClipEmpty();
	void Fire(const struct FVector& CameraDirection, const struct FVector& StartLocation, const struct FVector& CameraLocation, float RandomOffset);
	void FireProjectile(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void OnRep_Firing();
	void GetAmmoPercentage(float* AmmoPercentage, int32* AmmoAmount, int32* MaxAmmo);
	void OnRep_Loaded();
	void GetReloadInfo(bool* Reloading, float* ReloadPercentage, bool* PreLoaded_0, bool* FullyLoaded_0);
	void IsLoaded_(bool* IsLoaded);
	void IsRecentlyFired_All_(bool* RecentlyFired);
	void OnRep_PreLoaded();
	void OnRep_LatestReloadPercentageAmount_ForAnimation_();
	bool IsWeaponPointingFoward();
	void GetFireAnimation(class UAnimMontage** FireMontage);
	float GetMuzzleDistanceFromBarrel();
	void GetFinalFireRate(float* FireRate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RangedWeaponBase_C">();
	}
	static class ABP_RangedWeaponBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RangedWeaponBase_C>();
	}
};
static_assert(alignof(ABP_RangedWeaponBase_C) == 0x000008, "Wrong alignment on ABP_RangedWeaponBase_C");
static_assert(sizeof(ABP_RangedWeaponBase_C) == 0x000488, "Wrong size on ABP_RangedWeaponBase_C");
static_assert(offsetof(ABP_RangedWeaponBase_C, UberGraphFrame_BP_RangedWeaponBase_C) == 0x0002D8, "Member 'ABP_RangedWeaponBase_C::UberGraphFrame_BP_RangedWeaponBase_C' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MuzzlePoison) == 0x0002E0, "Member 'ABP_RangedWeaponBase_C::MuzzlePoison' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, SightLocation_Scope_) == 0x0002E8, "Member 'ABP_RangedWeaponBase_C::SightLocation_Scope_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireSound) == 0x0002F0, "Member 'ABP_RangedWeaponBase_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MuzzleFlame) == 0x0002F8, "Member 'ABP_RangedWeaponBase_C::MuzzleFlame' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, PointLight) == 0x000300, "Member 'ABP_RangedWeaponBase_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, BulletEjectLocation) == 0x000308, "Member 'ABP_RangedWeaponBase_C::BulletEjectLocation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ReloadSound) == 0x000310, "Member 'ABP_RangedWeaponBase_C::ReloadSound' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileStartLocation) == 0x000318, "Member 'ABP_RangedWeaponBase_C::ProjectileStartLocation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Timeline_1_NewTrack_0_DE5C8BA7409CA0EF11A41CAA4CAC0FFC) == 0x000320, "Member 'ABP_RangedWeaponBase_C::Timeline_1_NewTrack_0_DE5C8BA7409CA0EF11A41CAA4CAC0FFC' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Timeline_1__Direction_DE5C8BA7409CA0EF11A41CAA4CAC0FFC) == 0x000324, "Member 'ABP_RangedWeaponBase_C::Timeline_1__Direction_DE5C8BA7409CA0EF11A41CAA4CAC0FFC' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Timeline_1) == 0x000328, "Member 'ABP_RangedWeaponBase_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, SingleShotFireSound) == 0x000330, "Member 'ABP_RangedWeaponBase_C::SingleShotFireSound' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ClipEmptySound) == 0x000338, "Member 'ABP_RangedWeaponBase_C::ClipEmptySound' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ImpactSound) == 0x000340, "Member 'ABP_RangedWeaponBase_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, InsertMagSoundEffect) == 0x000348, "Member 'ABP_RangedWeaponBase_C::InsertMagSoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, RemoveMagSoundEffect) == 0x000350, "Member 'ABP_RangedWeaponBase_C::RemoveMagSoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FinishedReloadSoundEffect) == 0x000358, "Member 'ABP_RangedWeaponBase_C::FinishedReloadSoundEffect' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireParticleEffect) == 0x000360, "Member 'ABP_RangedWeaponBase_C::FireParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Ammo) == 0x000368, "Member 'ABP_RangedWeaponBase_C::Ammo' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ImpactParticleEffect) == 0x000370, "Member 'ABP_RangedWeaponBase_C::ImpactParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, VehicleImpactParticle) == 0x000378, "Member 'ABP_RangedWeaponBase_C::VehicleImpactParticle' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireAnimation) == 0x000380, "Member 'ABP_RangedWeaponBase_C::FireAnimation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, HipFireMontageAnimation) == 0x000388, "Member 'ABP_RangedWeaponBase_C::HipFireMontageAnimation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, WeaponRange) == 0x000390, "Member 'ABP_RangedWeaponBase_C::WeaponRange' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MagazineSize) == 0x000394, "Member 'ABP_RangedWeaponBase_C::MagazineSize' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FullyLoaded) == 0x000398, "Member 'ABP_RangedWeaponBase_C::FullyLoaded' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, PreLoaded) == 0x000399, "Member 'ABP_RangedWeaponBase_C::PreLoaded' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ReloadTimer) == 0x00039C, "Member 'ABP_RangedWeaponBase_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, DirectDamageAmount) == 0x0003A0, "Member 'ABP_RangedWeaponBase_C::DirectDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, DirectDamageType) == 0x0003A4, "Member 'ABP_RangedWeaponBase_C::DirectDamageType' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileAmount_PerShot_) == 0x0003A8, "Member 'ABP_RangedWeaponBase_C::ProjectileAmount_PerShot_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireRateCD) == 0x0003AC, "Member 'ABP_RangedWeaponBase_C::FireRateCD' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ReloadTime_Cooldown_) == 0x0003B0, "Member 'ABP_RangedWeaponBase_C::ReloadTime_Cooldown_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, RecoilAmount_HipFire_) == 0x0003B4, "Member 'ABP_RangedWeaponBase_C::RecoilAmount_HipFire_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, RecoilAmount_WhileAiming_) == 0x0003B8, "Member 'ABP_RangedWeaponBase_C::RecoilAmount_WhileAiming_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableSidewaysRecoil) == 0x0003BC, "Member 'ABP_RangedWeaponBase_C::EnableSidewaysRecoil' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, UseRandomRecoil) == 0x0003BD, "Member 'ABP_RangedWeaponBase_C::UseRandomRecoil' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, SpreadAmount) == 0x0003C0, "Member 'ABP_RangedWeaponBase_C::SpreadAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, HipFireSpreadAmountMultiplier) == 0x0003C4, "Member 'ABP_RangedWeaponBase_C::HipFireSpreadAmountMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, HipFireExtraAddedRandomSpread) == 0x0003C8, "Member 'ABP_RangedWeaponBase_C::HipFireExtraAddedRandomSpread' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AOEDamageAmount) == 0x0003CC, "Member 'ABP_RangedWeaponBase_C::AOEDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AOERadius) == 0x0003D0, "Member 'ABP_RangedWeaponBase_C::AOERadius' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AOEDamageType) == 0x0003D4, "Member 'ABP_RangedWeaponBase_C::AOEDamageType' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, IgnoreAOERadius_AlwaysDealFullDMG_) == 0x0003D5, "Member 'ABP_RangedWeaponBase_C::IgnoreAOERadius_AlwaysDealFullDMG_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableDamageMultiplierOnAOE) == 0x0003D6, "Member 'ABP_RangedWeaponBase_C::EnableDamageMultiplierOnAOE' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, WeaponAimZoomFOV) == 0x0003D8, "Member 'ABP_RangedWeaponBase_C::WeaponAimZoomFOV' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileSpeed) == 0x0003DC, "Member 'ABP_RangedWeaponBase_C::ProjectileSpeed' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Delta_Seconds) == 0x0003E0, "Member 'ABP_RangedWeaponBase_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, Firing) == 0x0003E4, "Member 'ABP_RangedWeaponBase_C::Firing' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileDropRate) == 0x0003E8, "Member 'ABP_RangedWeaponBase_C::ProjectileDropRate' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileClass) == 0x0003F0, "Member 'ABP_RangedWeaponBase_C::ProjectileClass' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, UseSimpleDirectionCalculation) == 0x0003F8, "Member 'ABP_RangedWeaponBase_C::UseSimpleDirectionCalculation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableHeadshots) == 0x0003F9, "Member 'ABP_RangedWeaponBase_C::EnableHeadshots' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableSpreadMultiplier_FromSkills_) == 0x0003FA, "Member 'ABP_RangedWeaponBase_C::EnableSpreadMultiplier_FromSkills_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableAutoFire) == 0x0003FB, "Member 'ABP_RangedWeaponBase_C::EnableAutoFire' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, CanOverrideFireRate) == 0x0003FC, "Member 'ABP_RangedWeaponBase_C::CanOverrideFireRate' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ScopedWeapon) == 0x0003FD, "Member 'ABP_RangedWeaponBase_C::ScopedWeapon' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableAimInaccuracyForAI) == 0x0003FE, "Member 'ABP_RangedWeaponBase_C::EnableAimInaccuracyForAI' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AI_MaxAimInaccuracy) == 0x000400, "Member 'ABP_RangedWeaponBase_C::AI_MaxAimInaccuracy' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableRandomAIFireCD) == 0x000404, "Member 'ABP_RangedWeaponBase_C::EnableRandomAIFireCD' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableBulletEjectAfterEachShot) == 0x000405, "Member 'ABP_RangedWeaponBase_C::EnableBulletEjectAfterEachShot' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, OtherPlayerWeaponSoundVolume) == 0x000408, "Member 'ABP_RangedWeaponBase_C::OtherPlayerWeaponSoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ownWeaponSoundVolume) == 0x00040C, "Member 'ABP_RangedWeaponBase_C::ownWeaponSoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, CanFire) == 0x000410, "Member 'ABP_RangedWeaponBase_C::CanFire' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableBulletEjectWhenEmpty) == 0x000411, "Member 'ABP_RangedWeaponBase_C::EnableBulletEjectWhenEmpty' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, BulletEjectAfterEmptyDelay) == 0x000414, "Member 'ABP_RangedWeaponBase_C::BulletEjectAfterEmptyDelay' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AttachToLeftHandWhileReloading) == 0x000418, "Member 'ABP_RangedWeaponBase_C::AttachToLeftHandWhileReloading' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, CreateBulletTrail) == 0x000419, "Member 'ABP_RangedWeaponBase_C::CreateBulletTrail' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, UseLongTrail) == 0x00041A, "Member 'ABP_RangedWeaponBase_C::UseLongTrail' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableWeaponCockAnimation) == 0x00041B, "Member 'ABP_RangedWeaponBase_C::EnableWeaponCockAnimation' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableAimSway) == 0x00041C, "Member 'ABP_RangedWeaponBase_C::EnableAimSway' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EnableDryFireSoundWhenEmpty) == 0x00041D, "Member 'ABP_RangedWeaponBase_C::EnableDryFireSoundWhenEmpty' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireCameraShake) == 0x000420, "Member 'ABP_RangedWeaponBase_C::FireCameraShake' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MuzzleSize) == 0x000428, "Member 'ABP_RangedWeaponBase_C::MuzzleSize' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ImpactParticleSize) == 0x00042C, "Member 'ABP_RangedWeaponBase_C::ImpactParticleSize' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ImpactDecalSize) == 0x000430, "Member 'ABP_RangedWeaponBase_C::ImpactDecalSize' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireCameraShakeAmount) == 0x000434, "Member 'ABP_RangedWeaponBase_C::FireCameraShakeAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, WeaponInMainHand) == 0x000438, "Member 'ABP_RangedWeaponBase_C::WeaponInMainHand' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, WeaponAttachedToLeftHand) == 0x000439, "Member 'ABP_RangedWeaponBase_C::WeaponAttachedToLeftHand' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MuzzleLightIntensity) == 0x00043C, "Member 'ABP_RangedWeaponBase_C::MuzzleLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, MuzzleLightMaxRandomIntensity) == 0x000440, "Member 'ABP_RangedWeaponBase_C::MuzzleLightMaxRandomIntensity' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, RecentlyFiredAll) == 0x000444, "Member 'ABP_RangedWeaponBase_C::RecentlyFiredAll' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, SingleFireRequest) == 0x000445, "Member 'ABP_RangedWeaponBase_C::SingleFireRequest' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FinalFlightDirection) == 0x000448, "Member 'ABP_RangedWeaponBase_C::FinalFlightDirection' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireDelayAfterSprint) == 0x000454, "Member 'ABP_RangedWeaponBase_C::FireDelayAfterSprint' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AnimationRecoilAmount) == 0x000458, "Member 'ABP_RangedWeaponBase_C::AnimationRecoilAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, AnimationHandRecoilAmount) == 0x00045C, "Member 'ABP_RangedWeaponBase_C::AnimationHandRecoilAmount' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ReloadPercentageUntilHideMag) == 0x000460, "Member 'ABP_RangedWeaponBase_C::ReloadPercentageUntilHideMag' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ReloadPercentageUntilShowMagAgain) == 0x000464, "Member 'ABP_RangedWeaponBase_C::ReloadPercentageUntilShowMagAgain' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, WeaponReloadSpeedMultiplier_NonFramebasedReloads_) == 0x000468, "Member 'ABP_RangedWeaponBase_C::WeaponReloadSpeedMultiplier_NonFramebasedReloads_' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, EjectedBulletCaseSize) == 0x00046C, "Member 'ABP_RangedWeaponBase_C::EjectedBulletCaseSize' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, ProjectileTracerType) == 0x000478, "Member 'ABP_RangedWeaponBase_C::ProjectileTracerType' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireRateSpeedPercentage) == 0x000480, "Member 'ABP_RangedWeaponBase_C::FireRateSpeedPercentage' has a wrong offset!");
static_assert(offsetof(ABP_RangedWeaponBase_C, FireAnimationSpeed) == 0x000484, "Member 'ABP_RangedWeaponBase_C::FireAnimationSpeed' has a wrong offset!");

}

