#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Transport

#include "Basic.hpp"

#include "BP_Transport_classes.hpp"
#include "BP_Transport_parameters.hpp"


namespace SDK
{

// Function BP_Transport.BP_Transport_C.ExecuteUbergraph_BP_Transport
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::ExecuteUbergraph_BP_Transport(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ExecuteUbergraph_BP_Transport");

	Params::BP_Transport_C_ExecuteUbergraph_BP_Transport Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0");

	Params::BP_Transport_C_InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_ActorHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::S_ActorHit(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_ActorHit");

	Params::BP_Transport_C_S_ActorHit Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.MC_ActorHit
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::MC_ActorHit(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "MC_ActorHit");

	Params::BP_Transport_C_MC_ActorHit Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetLastOffsetAmount
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   LastVelocity_Server__0                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::S_SetLastOffsetAmount(const struct FVector& LastVelocity_Server__0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetLastOffsetAmount");

	Params::BP_Transport_C_S_SetLastOffsetAmount Parms{};

	Parms.LastVelocity_Server__0 = std::move(LastVelocity_Server__0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_ShareVehicleTransform
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                VehicleTransform_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_ShareVehicleTransform(const struct FTransform& VehicleTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_ShareVehicleTransform");

	Params::BP_Transport_C_S_ShareVehicleTransform Parms{};

	Parms.VehicleTransform_0 = std::move(VehicleTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetForwardBackwardAmount
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ForwardBackwardAmount_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::S_SetForwardBackwardAmount(float ForwardBackwardAmount_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetForwardBackwardAmount");

	Params::BP_Transport_C_S_SetForwardBackwardAmount Parms{};

	Parms.ForwardBackwardAmount_0 = ForwardBackwardAmount_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetInAir
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAir                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetInAir(bool InAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetInAir");

	Params::BP_Transport_C_S_SetInAir Parms{};

	Parms.InAir = InAir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetHandbreaking
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HandBreaking_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetHandbreaking(bool HandBreaking_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetHandbreaking");

	Params::BP_Transport_C_S_SetHandbreaking Parms{};

	Parms.HandBreaking_0 = HandBreaking_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetBackwardPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BackwardPressed_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetBackwardPressed(bool BackwardPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetBackwardPressed");

	Params::BP_Transport_C_S_SetBackwardPressed Parms{};

	Parms.BackwardPressed_0 = BackwardPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetForwardPressed
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForwardPressed_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetForwardPressed(bool ForwardPressed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetForwardPressed");

	Params::BP_Transport_C_S_SetForwardPressed Parms{};

	Parms.ForwardPressed_0 = ForwardPressed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_Landed
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::S_Landed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_Landed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.InitUnpossessedState
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::InitUnpossessedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InitUnpossessedState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.BndEvt__BP_Transport_CharacterKillVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Transport_C::BndEvt__BP_Transport_CharacterKillVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "BndEvt__BP_Transport_CharacterKillVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Transport_C_BndEvt__BP_Transport_CharacterKillVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.RoadKill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::RoadKill(class ABP_Character_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "RoadKill");

	Params::BP_Transport_C_RoadKill Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_Horn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Honking_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_Horn(bool Honking_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_Horn");

	Params::BP_Transport_C_S_Horn Parms{};

	Parms.Honking_0 = Honking_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InitTransform
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::InitTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InitTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.MC_Landed
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::MC_Landed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "MC_Landed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.ResetAccelerationEffects
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::ResetAccelerationEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ResetAccelerationEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Transport_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ReceiveHit");

	Params::BP_Transport_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetTurnRight
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TurnRight                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetTurnRight(bool TurnRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetTurnRight");

	Params::BP_Transport_C_S_SetTurnRight Parms{};

	Parms.TurnRight = TurnRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.S_SetTurnLeft
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TurnLeft                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::S_SetTurnLeft(bool TurnLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "S_SetTurnLeft");

	Params::BP_Transport_C_S_SetTurnLeft Parms{};

	Parms.TurnLeft = TurnLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.MC_Unpossessed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::MC_Unpossessed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "MC_Unpossessed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.MC_Possessed
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::MC_Possessed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "MC_Possessed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1");

	Params::BP_Transport_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0");

	Params::BP_Transport_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Horn_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Horn_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Horn_K2Node_InputActionEvent_0");

	Params::BP_Transport_C_InpActEvt_Horn_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Horn_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Horn_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Horn_K2Node_InputActionEvent_1");

	Params::BP_Transport_C_InpActEvt_Horn_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Turn Right_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Turn_Right_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Turn Right_K2Node_InputActionEvent_2");

	Params::BP_Transport_C_InpActEvt_Turn_Right_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Turn Right_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Turn_Right_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Turn Right_K2Node_InputActionEvent_3");

	Params::BP_Transport_C_InpActEvt_Turn_Right_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Turn Left_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Turn_Left_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Turn Left_K2Node_InputActionEvent_4");

	Params::BP_Transport_C_InpActEvt_Turn_Left_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Turn Left_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Turn_Left_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Turn Left_K2Node_InputActionEvent_5");

	Params::BP_Transport_C_InpActEvt_Turn_Left_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Break_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Break_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Break_K2Node_InputActionEvent_6");

	Params::BP_Transport_C_InpActEvt_Break_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_Break_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_Break_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_Break_K2Node_InputActionEvent_7");

	Params::BP_Transport_C_InpActEvt_Break_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_SpaceBar_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_SpaceBar_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_SpaceBar_K2Node_InputKeyEvent_0");

	Params::BP_Transport_C_InpActEvt_SpaceBar_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.InpActEvt_SpaceBar_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Transport_C::InpActEvt_SpaceBar_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InpActEvt_SpaceBar_K2Node_InputKeyEvent_1");

	Params::BP_Transport_C_InpActEvt_SpaceBar_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.OnRep_Honking
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::OnRep_Honking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "OnRep_Honking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.GetMovementInputStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   GoingForward                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   GoingBackward                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   TurningLeft                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   TurningRight                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   InAir                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Transport_C::GetMovementInputStatus(bool* GoingForward, bool* GoingBackward, bool* TurningLeft, bool* TurningRight, bool* InAir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "GetMovementInputStatus");

	Params::BP_Transport_C_GetMovementInputStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GoingForward != nullptr)
		*GoingForward = Parms.GoingForward;

	if (GoingBackward != nullptr)
		*GoingBackward = Parms.GoingBackward;

	if (TurningLeft != nullptr)
		*TurningLeft = Parms.TurningLeft;

	if (TurningRight != nullptr)
		*TurningRight = Parms.TurningRight;

	if (InAir != nullptr)
		*InAir = Parms.InAir;
}


// Function BP_Transport.BP_Transport_C.InitVehicleThemeSkin
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::InitVehicleThemeSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "InitVehicleThemeSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.MC_Damaged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   DamageLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageLocationRelative                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "MC_Damaged");

	Params::BP_Transport_C_MC_Damaged Parms{};

	Parms.DamageLocation = std::move(DamageLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageLocationRelative = std::move(DamageLocationRelative);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.IsPossessedEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::IsPossessedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "IsPossessedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.DestroyedRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_Transport_C::DestroyedRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "DestroyedRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Transport.BP_Transport_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ReceiveUnpossessed");

	Params::BP_Transport_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ReceivePossessed");

	Params::BP_Transport_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Transport_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ReceiveTick");

	Params::BP_Transport_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Transport.BP_Transport_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Transport_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Transport_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

