#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LandingCraft

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_VehicleBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LandingCraft.BP_LandingCraft_C
// 0x00B0 (0x0470 - 0x03C0)
class ABP_LandingCraft_C final : public ABP_VehicleBase_C
{
public:
	uint8                                         Pad_3B3[0x5];                                      // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LandingCraft_C;                  // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          PlayerDetectVolume;                                // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hatch;                                             // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSound;                                       // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule2;                                          // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule1;                                          // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh_0;                                      // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 LandingCraftSkeleton;                              // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ForwardPressed;                                    // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressed;                                   // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LandingCraftTransform;                             // 0x0420(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DeltaSeconds;                                      // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurnLeftPressed;                                   // 0x0454(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TurnRightPressed;                                  // 0x0455(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          OpenHatch;                                         // 0x0456(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CloseHatch;                                        // 0x0457(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         HatchRotation;                                     // 0x0458(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoardedPlayers;                                    // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Landed;                                            // 0x0460(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_LandingCraft(int32 EntryPoint);
	void S_CloseHatch(bool Close);
	void S_OpenHatch(bool Open);
	void S_TurnRight(bool TurnRight);
	void S_TurnLeft(bool TurnLeft);
	void S_Backward(bool BackwardPressed_0);
	void S_Forward(bool ForwardPressed_0);
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Accelerate_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Accelerate_K2Node_InputActionEvent_7(const struct FKey& Key);
	void OnRep_Landed();
	void ReceiveBeginPlay();
	void IsPossessedEvent();
	void ReceiveTick(float DeltaSeconds_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LandingCraft_C">();
	}
	static class ABP_LandingCraft_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LandingCraft_C>();
	}
};
static_assert(alignof(ABP_LandingCraft_C) == 0x000010, "Wrong alignment on ABP_LandingCraft_C");
static_assert(sizeof(ABP_LandingCraft_C) == 0x000470, "Wrong size on ABP_LandingCraft_C");
static_assert(offsetof(ABP_LandingCraft_C, UberGraphFrame_BP_LandingCraft_C) == 0x0003B8, "Member 'ABP_LandingCraft_C::UberGraphFrame_BP_LandingCraft_C' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, PlayerDetectVolume) == 0x0003C0, "Member 'ABP_LandingCraft_C::PlayerDetectVolume' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Hatch) == 0x0003C8, "Member 'ABP_LandingCraft_C::Hatch' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Cube) == 0x0003D0, "Member 'ABP_LandingCraft_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, EngineSound) == 0x0003D8, "Member 'ABP_LandingCraft_C::EngineSound' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Capsule2) == 0x0003E0, "Member 'ABP_LandingCraft_C::Capsule2' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Capsule1) == 0x0003E8, "Member 'ABP_LandingCraft_C::Capsule1' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Capsule) == 0x0003F0, "Member 'ABP_LandingCraft_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Camera) == 0x0003F8, "Member 'ABP_LandingCraft_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, SpringArm) == 0x000400, "Member 'ABP_LandingCraft_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, StaticMesh_0) == 0x000408, "Member 'ABP_LandingCraft_C::StaticMesh_0' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, LandingCraftSkeleton) == 0x000410, "Member 'ABP_LandingCraft_C::LandingCraftSkeleton' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, ForwardPressed) == 0x000418, "Member 'ABP_LandingCraft_C::ForwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, BackwardPressed) == 0x000419, "Member 'ABP_LandingCraft_C::BackwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, LandingCraftTransform) == 0x000420, "Member 'ABP_LandingCraft_C::LandingCraftTransform' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, DeltaSeconds) == 0x000450, "Member 'ABP_LandingCraft_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, TurnLeftPressed) == 0x000454, "Member 'ABP_LandingCraft_C::TurnLeftPressed' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, TurnRightPressed) == 0x000455, "Member 'ABP_LandingCraft_C::TurnRightPressed' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, OpenHatch) == 0x000456, "Member 'ABP_LandingCraft_C::OpenHatch' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, CloseHatch) == 0x000457, "Member 'ABP_LandingCraft_C::CloseHatch' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, HatchRotation) == 0x000458, "Member 'ABP_LandingCraft_C::HatchRotation' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, BoardedPlayers) == 0x00045C, "Member 'ABP_LandingCraft_C::BoardedPlayers' has a wrong offset!");
static_assert(offsetof(ABP_LandingCraft_C, Landed) == 0x000460, "Member 'ABP_LandingCraft_C::Landed' has a wrong offset!");

}

