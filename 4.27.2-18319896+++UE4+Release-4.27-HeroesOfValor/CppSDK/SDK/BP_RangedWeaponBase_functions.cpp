#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RangedWeaponBase

#include "Basic.hpp"

#include "BP_RangedWeaponBase_classes.hpp"
#include "BP_RangedWeaponBase_parameters.hpp"


namespace SDK
{

// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ExecuteUbergraph_BP_RangedWeaponBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::ExecuteUbergraph_BP_RangedWeaponBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ExecuteUbergraph_BP_RangedWeaponBase");

	Params::BP_RangedWeaponBase_C_ExecuteUbergraph_BP_RangedWeaponBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ResetDryFire
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::ResetDryFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ResetDryFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.OC_Reload
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::OC_Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "OC_Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.Reload
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::Reload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "Reload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.DryFire
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::DryFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "DryFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ResetBulletEjectWhenEmpty
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::ResetBulletEjectWhenEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ResetBulletEjectWhenEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.HasBeenUnequiped
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::HasBeenUnequiped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "HasBeenUnequiped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_ShareCorrectReloadTimerFromClient
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReloadTimer_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::S_ShareCorrectReloadTimerFromClient(float ReloadTimer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_ShareCorrectReloadTimerFromClient");

	Params::BP_RangedWeaponBase_C_S_ShareCorrectReloadTimerFromClient Parms{};

	Parms.ReloadTimer_0 = ReloadTimer_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ShareCorrectReloadTimerFromClient
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::ShareCorrectReloadTimerFromClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ShareCorrectReloadTimerFromClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.MC_ShareCorrectReloadTimerFromClient
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReloadTimer_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::MC_ShareCorrectReloadTimerFromClient(float ReloadTimer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "MC_ShareCorrectReloadTimerFromClient");

	Params::BP_RangedWeaponBase_C_MC_ShareCorrectReloadTimerFromClient Parms{};

	Parms.ReloadTimer_0 = ReloadTimer_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_SetPreloaded
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PreLoaded_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::S_SetPreloaded(bool PreLoaded_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_SetPreloaded");

	Params::BP_RangedWeaponBase_C_S_SetPreloaded Parms{};

	Parms.PreLoaded_0 = PreLoaded_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.InstantReload
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::InstantReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "InstantReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.EquipedStateChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Equiped                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::EquipedStateChanged(bool Equiped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "EquipedStateChanged");

	Params::BP_RangedWeaponBase_C_EquipedStateChanged Parms{};

	Parms.Equiped = Equiped;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.AttemptSingleFire
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::AttemptSingleFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "AttemptSingleFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.RevertWeaponSocket
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::RevertWeaponSocket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "RevertWeaponSocket");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.SingleMuzzleLightFlash
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::SingleMuzzleLightFlash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "SingleMuzzleLightFlash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.AttachWeaponToLeftHand
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::AttachWeaponToLeftHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "AttachWeaponToLeftHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.WeaponUsed(NonAutoRepeating)
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::WeaponUsed_NonAutoRepeating_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "WeaponUsed(NonAutoRepeating)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.AttachWeaponToRightHand
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::AttachWeaponToRightHand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "AttachWeaponToRightHand");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.SetCanFire
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanFire_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::SetCanFire(bool CanFire_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "SetCanFire");

	Params::BP_RangedWeaponBase_C_SetCanFire Parms{};

	Parms.CanFire_0 = CanFire_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_SetLoaded
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::S_SetLoaded(bool Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_SetLoaded");

	Params::BP_RangedWeaponBase_C_S_SetLoaded Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_ClipEmpty
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::S_ClipEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_ClipEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_SetFiring
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Firing_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::S_SetFiring(bool Firing_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_SetFiring");

	Params::BP_RangedWeaponBase_C_S_SetFiring Parms{};

	Parms.Firing_0 = Firing_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.MC_FireProjectile
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    lastRound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ProjectileCollisionImmuneDistance                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInstantHit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    FirstProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::MC_FireProjectile(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "MC_FireProjectile");

	Params::BP_RangedWeaponBase_C_MC_FireProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.FlightDirection = std::move(FlightDirection);
	Parms.lastRound = lastRound;
	Parms.ProjectileCollisionImmuneDistance = ProjectileCollisionImmuneDistance;
	Parms.IsInstantHit = IsInstantHit;
	Parms.HitResult = std::move(HitResult);
	Parms.FirstProjectile = FirstProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.S_Fire
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    lastRound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ProjectileCollisionImmuneDistance                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInstantHit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    FirstProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FST_WeaponData&            WeaponData                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::S_Fire(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile, const struct FST_WeaponData& WeaponData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "S_Fire");

	Params::BP_RangedWeaponBase_C_S_Fire Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.FlightDirection = std::move(FlightDirection);
	Parms.lastRound = lastRound;
	Parms.ProjectileCollisionImmuneDistance = ProjectileCollisionImmuneDistance;
	Parms.IsInstantHit = IsInstantHit;
	Parms.HitResult = std::move(HitResult);
	Parms.FirstProjectile = FirstProjectile;
	Parms.WeaponData = std::move(WeaponData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.MC_ClipEmpty
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::MC_ClipEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "MC_ClipEmpty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.Fire
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   CameraDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   StartLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RandomOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::Fire(const struct FVector& CameraDirection, const struct FVector& StartLocation, const struct FVector& CameraLocation, float RandomOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "Fire");

	Params::BP_RangedWeaponBase_C_Fire Parms{};

	Parms.CameraDirection = std::move(CameraDirection);
	Parms.StartLocation = std::move(StartLocation);
	Parms.CameraLocation = std::move(CameraLocation);
	Parms.RandomOffset = RandomOffset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.FireProjectile
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    lastRound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ProjectileCollisionImmuneDistance                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInstantHit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    FirstProjectile                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::FireProjectile(const struct FTransform& SpawnTransform, const struct FVector& FlightDirection, bool lastRound, float ProjectileCollisionImmuneDistance, bool IsInstantHit, const struct FHitResult& HitResult, bool FirstProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "FireProjectile");

	Params::BP_RangedWeaponBase_C_FireProjectile Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.FlightDirection = std::move(FlightDirection);
	Parms.lastRound = lastRound;
	Parms.ProjectileCollisionImmuneDistance = ProjectileCollisionImmuneDistance;
	Parms.IsInstantHit = IsInstantHit;
	Parms.HitResult = std::move(HitResult);
	Parms.FirstProjectile = FirstProjectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ReceiveTick");

	Params::BP_RangedWeaponBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RangedWeaponBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.Timeline_1__UpdateFunc
// (BlueprintEvent)

void ABP_RangedWeaponBase_C::Timeline_1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "Timeline_1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.Timeline_1__FinishedFunc
// (BlueprintEvent)

void ABP_RangedWeaponBase_C::Timeline_1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "Timeline_1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.OnRep_Firing
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::OnRep_Firing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "OnRep_Firing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.GetAmmoPercentage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  AmmoPercentage                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AmmoAmount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  MaxAmmo                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::GetAmmoPercentage(float* AmmoPercentage, int32* AmmoAmount, int32* MaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "GetAmmoPercentage");

	Params::BP_RangedWeaponBase_C_GetAmmoPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AmmoPercentage != nullptr)
		*AmmoPercentage = Parms.AmmoPercentage;

	if (AmmoAmount != nullptr)
		*AmmoAmount = Parms.AmmoAmount;

	if (MaxAmmo != nullptr)
		*MaxAmmo = Parms.MaxAmmo;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.OnRep_Loaded
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::OnRep_Loaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "OnRep_Loaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.GetReloadInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Reloading                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float*                                  ReloadPercentage                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   PreLoaded_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   FullyLoaded_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::GetReloadInfo(bool* Reloading, float* ReloadPercentage, bool* PreLoaded_0, bool* FullyLoaded_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "GetReloadInfo");

	Params::BP_RangedWeaponBase_C_GetReloadInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Reloading != nullptr)
		*Reloading = Parms.Reloading;

	if (ReloadPercentage != nullptr)
		*ReloadPercentage = Parms.ReloadPercentage;

	if (PreLoaded_0 != nullptr)
		*PreLoaded_0 = Parms.PreLoaded_0;

	if (FullyLoaded_0 != nullptr)
		*FullyLoaded_0 = Parms.FullyLoaded_0;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.IsLoaded?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::IsLoaded_(bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "IsLoaded?");

	Params::BP_RangedWeaponBase_C_IsLoaded_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.IsRecentlyFired(All)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   RecentlyFired                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_RangedWeaponBase_C::IsRecentlyFired_All_(bool* RecentlyFired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "IsRecentlyFired(All)");

	Params::BP_RangedWeaponBase_C_IsRecentlyFired_All_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RecentlyFired != nullptr)
		*RecentlyFired = Parms.RecentlyFired;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.OnRep_PreLoaded
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::OnRep_PreLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "OnRep_PreLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.OnRep_LatestReloadPercentageAmount(ForAnimation)
// (BlueprintCallable, BlueprintEvent)

void ABP_RangedWeaponBase_C::OnRep_LatestReloadPercentageAmount_ForAnimation_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "OnRep_LatestReloadPercentageAmount(ForAnimation)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.IsWeaponPointingFoward
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_RangedWeaponBase_C::IsWeaponPointingFoward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "IsWeaponPointingFoward");

	Params::BP_RangedWeaponBase_C_IsWeaponPointingFoward Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.GetFireAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage**                    FireMontage                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::GetFireAnimation(class UAnimMontage** FireMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "GetFireAnimation");

	Params::BP_RangedWeaponBase_C_GetFireAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FireMontage != nullptr)
		*FireMontage = Parms.FireMontage;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.GetMuzzleDistanceFromBarrel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_RangedWeaponBase_C::GetMuzzleDistanceFromBarrel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "GetMuzzleDistanceFromBarrel");

	Params::BP_RangedWeaponBase_C_GetMuzzleDistanceFromBarrel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RangedWeaponBase.BP_RangedWeaponBase_C.GetFinalFireRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float*                                  FireRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RangedWeaponBase_C::GetFinalFireRate(float* FireRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RangedWeaponBase_C", "GetFinalFireRate");

	Params::BP_RangedWeaponBase_C_GetFinalFireRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FireRate != nullptr)
		*FireRate = Parms.FireRate;
}

}

