#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ObjectiveBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ObjectiveBase.BP_ObjectiveBase_C
// 0x0018 (0x0238 - 0x0220)
class ABP_ObjectiveBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_Teams                                       ControllingTeam;                                   // 0x0230(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Uncontestable;                                     // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBeCapturedByAllies;                             // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanBeCapturedByAxis;                               // 0x0233(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CanOnlyBecapturedOnce;                             // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ObjectiveBase(int32 EntryPoint);
	void ControllingTeamChanged();
	void ReceiveBeginPlay();
	void OnRep_ControllingTeam();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ObjectiveBase_C">();
	}
	static class ABP_ObjectiveBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ObjectiveBase_C>();
	}
};
static_assert(alignof(ABP_ObjectiveBase_C) == 0x000008, "Wrong alignment on ABP_ObjectiveBase_C");
static_assert(sizeof(ABP_ObjectiveBase_C) == 0x000238, "Wrong size on ABP_ObjectiveBase_C");
static_assert(offsetof(ABP_ObjectiveBase_C, UberGraphFrame) == 0x000220, "Member 'ABP_ObjectiveBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_ObjectiveBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, ControllingTeam) == 0x000230, "Member 'ABP_ObjectiveBase_C::ControllingTeam' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, Uncontestable) == 0x000231, "Member 'ABP_ObjectiveBase_C::Uncontestable' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, CanBeCapturedByAllies) == 0x000232, "Member 'ABP_ObjectiveBase_C::CanBeCapturedByAllies' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, CanBeCapturedByAxis) == 0x000233, "Member 'ABP_ObjectiveBase_C::CanBeCapturedByAxis' has a wrong offset!");
static_assert(offsetof(ABP_ObjectiveBase_C, CanOnlyBecapturedOnce) == 0x000234, "Member 'ABP_ObjectiveBase_C::CanOnlyBecapturedOnce' has a wrong offset!");

}

