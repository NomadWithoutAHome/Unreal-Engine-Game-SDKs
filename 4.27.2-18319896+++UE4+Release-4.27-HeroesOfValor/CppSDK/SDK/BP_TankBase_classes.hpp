#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TankBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Teams_structs.hpp"
#include "BP_VehicleBase_classes.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TankBase.BP_TankBase_C
// 0x02D0 (0x0690 - 0x03C0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_TankBase_C : public ABP_VehicleBase_C
{
public:
	uint8                                         Pad_3B3[0x5];                                      // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_TankBase_C;                      // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BackCollisionDetect;                               // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FrontCollisionDetect;                              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WreckageFireSound;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DestroyedWreckageFire;                             // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ExhaustSmoke;                                      // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TurretArmor;                                       // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BodyArmor;                                         // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Seat1;                                             // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FaceCam;                                           // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EffectBase;                                        // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ProjectileStart_MG;                                // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MGSound_AltFire_;                                  // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        TracksSound;                                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPawnSensingComponent*                  PawnSensing;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFloatingPawnMovement*                  FloatingPawnMovement;                              // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeFront2;                                       // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeFront1;                                       // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeBack2;                                        // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SmokeBack1;                                        // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ProjectileStart_MainGun;                           // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BarrelRotateSound;                                 // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSound;                                       // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Turret;                                            // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Barrel;                                            // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Body;                                              // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          ForwardPressed;                                    // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressed;                                   // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AA[0x2];                                      // 0x04AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSeconds;                                      // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeftPressed;                                       // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RightPressed;                                      // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B2[0x2];                                      // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnSpeed;                                         // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnTorqueAmount;                                  // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnAmount;                                        // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardBackwardAmount;                             // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelYawRotation;                                 // 0x04C4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BarrelPitchRotation;                               // 0x04C8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastRotation;                                      // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TankTransform;                                     // 0x04D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LocalBarrelRot;                                    // 0x0500(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MovementSpeed;                                     // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AI_BarrelLookAtLocation;                           // 0x0510(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TurretRotation;                                    // 0x051C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               BarrelRotation;                                    // 0x0528(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanMove;                                           // 0x0534(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLoaded;                                          // 0x0535(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_536[0x2];                                      // 0x0536(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReloadTime;                                        // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReloadTimer;                                       // 0x053C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TireLeftMaterial;                                  // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TireRightMaterial;                                 // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TireScrubRight;                                    // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TireScrubLeft;                                     // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           LeftWheels;                                        // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           RightWheels;                                       // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          UpdateLeftWheels;                                  // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_Teams                                       Team_0;                                            // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_NewObjectiveSet;                                // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57B[0x5];                                      // 0x057B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        AI_CurrentNavigation;                              // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AI_NavigationPointIndex;                           // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AI_TargetObjective;                                // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AI_TargetEnemy;                                    // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ARecastNavMesh*                         AI_NavData;                                        // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 AI_TargetLocationActor;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_ForwardBackwardInterpolated;                    // 0x05B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_ForwardBackwardTarget;                          // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_RandomNavStartOffsetRadius;                     // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_EngageEnemy;                                    // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AI_AddedTargetVelocity;                            // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebug;                                       // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D5[0x3];                                      // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TurretPitch;                                       // 0x05D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TurretYaw;                                         // 0x05DC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastVelocity;                                      // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        RevSound;                                          // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FinalBarrelLookAtLocation;                         // 0x05F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedMultiplier;                                   // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         HitActors;                                         // 0x0600(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Zooming;                                           // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MainMenuTank;                                      // 0x0611(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BackwardReverseTurn;                               // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastHitLocation;                                   // 0x0618(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OverlappingActors;                                 // 0x0628(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          LeftPressedReplicated;                             // 0x0638(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RightPressedReplicated;                            // 0x0639(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ForwardPressedReplicated;                          // 0x063A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressedReplicated;                         // 0x063B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            DestroyedBodyMesh;                                 // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            DestroyedTurretMesh;                               // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrontalCollisionSpeedMultiplier;                   // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackwardCollisionSpeedMultiplier;                  // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AltFire_Local_;                                    // 0x0658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_659[0x3];                                      // 0x0659(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MgProjectileDirection;                             // 0x065C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DistanceBasedBarrelPitch;                       // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66C[0x4];                                      // 0x066C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           AllWheels;                                         // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         RepairingSpeedMultiplier;                          // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_TankBase(int32 EntryPoint);
	void InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue);
	void S_AltFire(const struct FVector& FlightDirection, const struct FVector& Location);
	void StopFiringMG();
	void FireMG();
	void AltFire(const struct FVector& FlightDirection, const struct FVector& Location);
	void MC_BumperHit(float Speed);
	void S_BumperHit(float Speed);
	void ForgetTarget();
	void BndEvt__BP_TankBase_Body_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void S_SetBackwardPressed(bool BackwardPressed_0);
	void S_SetForwardPressed(bool ForwardPressed_0);
	void S_SetRightPressed(bool RightPressed_0);
	void S_SetLeftPressed(bool LeftPressed_0);
	void RemoveActorFromOverlappingList(class AActor* ActorRef);
	void S_ActorHit(const struct FVector& Location);
	void MC_ShareTankTransform(const struct FTransform& TankTransform_0);
	void S_ShareTankTransform(const struct FTransform& TankTransform_0);
	void ResetTankOperational();
	void KillingHit(class AActor* KilledActor);
	void MC_AltFire(const struct FVector& FlightDirection, const struct FVector& Location);
	void ResetTracksSound();
	void MC_ActorHit(const struct FVector& Location);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void MC_Loaded();
	void StopMovement();
	void MoveTo(const class AActor* Actor, const struct FVector& Location);
	void BndEvt__BP_Character_PawnSensing_K2Node_ComponentBoundEvent_0_SeePawnDelegate__DelegateSignature(class APawn* Pawn);
	void MC_Fire();
	void S_Fire();
	void S_SetBarrelRotation(int32 Pitch, int32 Yaw);
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void InpActEvt_Main_Gun_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Zoom_In__Tank__K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Machinegun_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Machinegun_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Turn_Right_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Turn_Left_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_10(const struct FKey& Key);
	void GetReloadPercentage(float* Percentage);
	void IsReloading_(bool* IsReloading);
	void UpdateWheelSpin(class USceneComponent* Wheel, bool IsReversing, float Direction, float OverrideSpeed);
	void GetNavigationToTarget(const struct FVector& TargetLocation, float RandomOffsetRadius, bool* Success);
	void AI_GetMovementTarget(class AActor** Target);
	void ClearNavigation();
	void GetBodyMaterial(class UMaterialInterface** Material);
	void IsPossessedEvent();
	void DestroyedRepNotify();
	void MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative);
	void ReceiveBeginPlay();
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds_0);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TankBase_C">();
	}
	static class ABP_TankBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TankBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_TankBase_C) == 0x000010, "Wrong alignment on ABP_TankBase_C");
static_assert(sizeof(ABP_TankBase_C) == 0x000690, "Wrong size on ABP_TankBase_C");
static_assert(offsetof(ABP_TankBase_C, UberGraphFrame_BP_TankBase_C) == 0x0003B8, "Member 'ABP_TankBase_C::UberGraphFrame_BP_TankBase_C' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BackCollisionDetect) == 0x0003C0, "Member 'ABP_TankBase_C::BackCollisionDetect' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, FrontCollisionDetect) == 0x0003C8, "Member 'ABP_TankBase_C::FrontCollisionDetect' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, PointLight) == 0x0003D0, "Member 'ABP_TankBase_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, WreckageFireSound) == 0x0003D8, "Member 'ABP_TankBase_C::WreckageFireSound' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, DestroyedWreckageFire) == 0x0003E0, "Member 'ABP_TankBase_C::DestroyedWreckageFire' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ExhaustSmoke) == 0x0003E8, "Member 'ABP_TankBase_C::ExhaustSmoke' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurretArmor) == 0x0003F0, "Member 'ABP_TankBase_C::TurretArmor' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BodyArmor) == 0x0003F8, "Member 'ABP_TankBase_C::BodyArmor' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Seat1) == 0x000400, "Member 'ABP_TankBase_C::Seat1' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, FaceCam) == 0x000408, "Member 'ABP_TankBase_C::FaceCam' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, EffectBase) == 0x000410, "Member 'ABP_TankBase_C::EffectBase' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ProjectileStart_MG) == 0x000418, "Member 'ABP_TankBase_C::ProjectileStart_MG' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, MGSound_AltFire_) == 0x000420, "Member 'ABP_TankBase_C::MGSound_AltFire_' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TracksSound) == 0x000428, "Member 'ABP_TankBase_C::TracksSound' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, PawnSensing) == 0x000430, "Member 'ABP_TankBase_C::PawnSensing' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, NavModifier) == 0x000438, "Member 'ABP_TankBase_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, FloatingPawnMovement) == 0x000440, "Member 'ABP_TankBase_C::FloatingPawnMovement' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SmokeFront2) == 0x000448, "Member 'ABP_TankBase_C::SmokeFront2' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SmokeFront1) == 0x000450, "Member 'ABP_TankBase_C::SmokeFront1' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SmokeBack2) == 0x000458, "Member 'ABP_TankBase_C::SmokeBack2' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SmokeBack1) == 0x000460, "Member 'ABP_TankBase_C::SmokeBack1' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ProjectileStart_MainGun) == 0x000468, "Member 'ABP_TankBase_C::ProjectileStart_MainGun' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BarrelRotateSound) == 0x000470, "Member 'ABP_TankBase_C::BarrelRotateSound' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, EngineSound) == 0x000478, "Member 'ABP_TankBase_C::EngineSound' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SpringArm) == 0x000480, "Member 'ABP_TankBase_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Camera) == 0x000488, "Member 'ABP_TankBase_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Turret) == 0x000490, "Member 'ABP_TankBase_C::Turret' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Barrel) == 0x000498, "Member 'ABP_TankBase_C::Barrel' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Body) == 0x0004A0, "Member 'ABP_TankBase_C::Body' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ForwardPressed) == 0x0004A8, "Member 'ABP_TankBase_C::ForwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BackwardPressed) == 0x0004A9, "Member 'ABP_TankBase_C::BackwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, DeltaSeconds) == 0x0004AC, "Member 'ABP_TankBase_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LeftPressed) == 0x0004B0, "Member 'ABP_TankBase_C::LeftPressed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, RightPressed) == 0x0004B1, "Member 'ABP_TankBase_C::RightPressed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurnSpeed) == 0x0004B4, "Member 'ABP_TankBase_C::TurnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurnTorqueAmount) == 0x0004B8, "Member 'ABP_TankBase_C::TurnTorqueAmount' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurnAmount) == 0x0004BC, "Member 'ABP_TankBase_C::TurnAmount' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ForwardBackwardAmount) == 0x0004C0, "Member 'ABP_TankBase_C::ForwardBackwardAmount' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BarrelYawRotation) == 0x0004C4, "Member 'ABP_TankBase_C::BarrelYawRotation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BarrelPitchRotation) == 0x0004C8, "Member 'ABP_TankBase_C::BarrelPitchRotation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LastRotation) == 0x0004CC, "Member 'ABP_TankBase_C::LastRotation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TankTransform) == 0x0004D0, "Member 'ABP_TankBase_C::TankTransform' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LocalBarrelRot) == 0x000500, "Member 'ABP_TankBase_C::LocalBarrelRot' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, MovementSpeed) == 0x00050C, "Member 'ABP_TankBase_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_BarrelLookAtLocation) == 0x000510, "Member 'ABP_TankBase_C::AI_BarrelLookAtLocation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurretRotation) == 0x00051C, "Member 'ABP_TankBase_C::TurretRotation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BarrelRotation) == 0x000528, "Member 'ABP_TankBase_C::BarrelRotation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, CanMove) == 0x000534, "Member 'ABP_TankBase_C::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, IsLoaded) == 0x000535, "Member 'ABP_TankBase_C::IsLoaded' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ReloadTime) == 0x000538, "Member 'ABP_TankBase_C::ReloadTime' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ReloadTimer) == 0x00053C, "Member 'ABP_TankBase_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TireLeftMaterial) == 0x000540, "Member 'ABP_TankBase_C::TireLeftMaterial' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TireRightMaterial) == 0x000548, "Member 'ABP_TankBase_C::TireRightMaterial' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TireScrubRight) == 0x000550, "Member 'ABP_TankBase_C::TireScrubRight' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TireScrubLeft) == 0x000554, "Member 'ABP_TankBase_C::TireScrubLeft' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LeftWheels) == 0x000558, "Member 'ABP_TankBase_C::LeftWheels' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, RightWheels) == 0x000568, "Member 'ABP_TankBase_C::RightWheels' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, UpdateLeftWheels) == 0x000578, "Member 'ABP_TankBase_C::UpdateLeftWheels' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Team_0) == 0x000579, "Member 'ABP_TankBase_C::Team_0' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_NewObjectiveSet) == 0x00057A, "Member 'ABP_TankBase_C::AI_NewObjectiveSet' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_CurrentNavigation) == 0x000580, "Member 'ABP_TankBase_C::AI_CurrentNavigation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_NavigationPointIndex) == 0x000590, "Member 'ABP_TankBase_C::AI_NavigationPointIndex' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_TargetObjective) == 0x000598, "Member 'ABP_TankBase_C::AI_TargetObjective' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_TargetEnemy) == 0x0005A0, "Member 'ABP_TankBase_C::AI_TargetEnemy' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_NavData) == 0x0005A8, "Member 'ABP_TankBase_C::AI_NavData' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_TargetLocationActor) == 0x0005B0, "Member 'ABP_TankBase_C::AI_TargetLocationActor' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_ForwardBackwardInterpolated) == 0x0005B8, "Member 'ABP_TankBase_C::AI_ForwardBackwardInterpolated' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_ForwardBackwardTarget) == 0x0005BC, "Member 'ABP_TankBase_C::AI_ForwardBackwardTarget' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_RandomNavStartOffsetRadius) == 0x0005C0, "Member 'ABP_TankBase_C::AI_RandomNavStartOffsetRadius' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_EngageEnemy) == 0x0005C4, "Member 'ABP_TankBase_C::AI_EngageEnemy' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_AddedTargetVelocity) == 0x0005C8, "Member 'ABP_TankBase_C::AI_AddedTargetVelocity' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, EnableDebug) == 0x0005D4, "Member 'ABP_TankBase_C::EnableDebug' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurretPitch) == 0x0005D8, "Member 'ABP_TankBase_C::TurretPitch' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, TurretYaw) == 0x0005DC, "Member 'ABP_TankBase_C::TurretYaw' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LastVelocity) == 0x0005E0, "Member 'ABP_TankBase_C::LastVelocity' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, RevSound) == 0x0005E8, "Member 'ABP_TankBase_C::RevSound' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, FinalBarrelLookAtLocation) == 0x0005F0, "Member 'ABP_TankBase_C::FinalBarrelLookAtLocation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, SpeedMultiplier) == 0x0005FC, "Member 'ABP_TankBase_C::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, HitActors) == 0x000600, "Member 'ABP_TankBase_C::HitActors' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, Zooming) == 0x000610, "Member 'ABP_TankBase_C::Zooming' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, MainMenuTank) == 0x000611, "Member 'ABP_TankBase_C::MainMenuTank' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BackwardReverseTurn) == 0x000614, "Member 'ABP_TankBase_C::BackwardReverseTurn' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LastHitLocation) == 0x000618, "Member 'ABP_TankBase_C::LastHitLocation' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, OverlappingActors) == 0x000628, "Member 'ABP_TankBase_C::OverlappingActors' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, LeftPressedReplicated) == 0x000638, "Member 'ABP_TankBase_C::LeftPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, RightPressedReplicated) == 0x000639, "Member 'ABP_TankBase_C::RightPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, ForwardPressedReplicated) == 0x00063A, "Member 'ABP_TankBase_C::ForwardPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BackwardPressedReplicated) == 0x00063B, "Member 'ABP_TankBase_C::BackwardPressedReplicated' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, DestroyedBodyMesh) == 0x000640, "Member 'ABP_TankBase_C::DestroyedBodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, DestroyedTurretMesh) == 0x000648, "Member 'ABP_TankBase_C::DestroyedTurretMesh' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, FrontalCollisionSpeedMultiplier) == 0x000650, "Member 'ABP_TankBase_C::FrontalCollisionSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, BackwardCollisionSpeedMultiplier) == 0x000654, "Member 'ABP_TankBase_C::BackwardCollisionSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AltFire_Local_) == 0x000658, "Member 'ABP_TankBase_C::AltFire_Local_' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, MgProjectileDirection) == 0x00065C, "Member 'ABP_TankBase_C::MgProjectileDirection' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AI_DistanceBasedBarrelPitch) == 0x000668, "Member 'ABP_TankBase_C::AI_DistanceBasedBarrelPitch' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, AllWheels) == 0x000670, "Member 'ABP_TankBase_C::AllWheels' has a wrong offset!");
static_assert(offsetof(ABP_TankBase_C, RepairingSpeedMultiplier) == 0x000680, "Member 'ABP_TankBase_C::RepairingSpeedMultiplier' has a wrong offset!");

}

