#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProjectileBase

#include "Basic.hpp"

#include "E_DamageTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_WeaponRange_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ST_ThrowableAttachment_structs.hpp"
#include "E_Teams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ProjectileBase.BP_ProjectileBase_C
// 0x0340 (0x0560 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_ProjectileBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Tracer2;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   projectileMesh;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FlightDirection;                                   // 0x0240(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsThrowable;                                       // 0x024C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DamageAmount;                                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	E_WeaponRange                                 WeaponDamageRange;                                 // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AOEDamage_;                                        // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_27A[0x2];                                      // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOERadius;                                         // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         AOEDamageAmount;                                   // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         AlreadyHitActors;                                  // 0x0288(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UClass*                                 BuffDebuffToApply;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ProjectileLifeSpan;                                // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DropRate;                                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UParticleSystem*                        TracerType;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DropAmount;                                        // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EnvironmentImpactParticleEffect;                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UParticleSystem*                        CharacterImpactParticleEffect;                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UParticleSystem*                        VehicleImpactParticleEffect;                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ImpactParticleSizeMultiplier;                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ImpactSound;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ImpactSoundPitch;                                  // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ImpactDecal;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         ImpactDecalScale;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_DamageTypes                                 DirectHitDamageType;                               // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_DamageTypes                                 AOEDamageType;                                     // 0x02F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2F6[0x2];                                      // 0x02F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  AttackerPawn_DontEdit_;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LocalProjectile_EnableIfServerOrAI_;               // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          EnableDropRate;                                    // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0304(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Active;                                            // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ThrowableTransform;                                // 0x0390(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DetonationDelay;                                   // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             ThrowableBounceSound;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastThrowableLocation;                             // 0x03D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableFlyBySound;                                  // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          CanCriticalHit;                                    // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialLocation;                                   // 0x03E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileCollisionImmuneDistance;                 // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         HitDetectionOffset;                                // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCloseByCollisionImunity;                        // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          VehicleHit;                                        // 0x03F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CharacterHit;                                      // 0x03F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DirectHit;                                         // 0x03F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMulticastInlineDelegate<void(class AActor* KilledActor)> OnDirectHit;                           // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsAIProjectile;                                    // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SpecialKillMessage;                                // 0x0410(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          EnableHeadshots;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            WeaponRangeCurve;                                  // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CharacterOrigin;                                   // 0x0438(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchForce;                                       // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CreateTrail;                                       // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrailWidth;                                        // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseLongTrail;                                      // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_451[0x3];                                      // 0x0451(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileRadius;                                  // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsHeadShot;                                        // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ProjectileTrailBase_C*              TrailRef;                                          // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StickyThrowable;                                   // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsStuckToObject_StickyThrowable_;                  // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A[0x2];                                      // 0x046A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LastStickyThrowableObjectHit;                      // 0x046C(0x0088)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_ThrowableAttachment                ThrowableAttachment;                               // 0x04F8(0x0028)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          AttachImpactParticleToCharacter;                   // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsPiercingDamage;                                  // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_522[0x2];                                      // 0x0522(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeaponProjectileExitLocation;                      // 0x0524(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          EnableCloseByDamageReduction;                      // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IgnoreAOERadius_AlwaysDealFullDMG_;                // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          EnableDebug;                                       // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_533[0x1];                                      // 0x0533(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BonusDamage;                                       // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 TrailToUse;                                        // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ExplodeOnLifeEnd;                                  // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxProjectileTravelDistance;                       // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                AOELocation;                                       // 0x0548(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ProjectileBase(int32 EntryPoint);
	void KillProjectile();
	void TriggerAOE();
	void Detonate();
	void InstantHit(const struct FHitResult& HitResult);
	void WasDirectHit();
	void KillThrowable();
	void MC_ThrowableExplode(const struct FVector& Location);
	void MC_Bounce();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0);
	void ReceiveTick(float DeltaSeconds_0);
	void ReceiveBeginPlay();
	void OnRep_IsThrowable();
	void CalculateDamageFalloff(int32 DamageIn, int32* ResultingDamage);
	void OnRep_ThrowableAttachment();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ProjectileBase_C">();
	}
	static class ABP_ProjectileBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ProjectileBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_ProjectileBase_C) == 0x000010, "Wrong alignment on ABP_ProjectileBase_C");
static_assert(sizeof(ABP_ProjectileBase_C) == 0x000560, "Wrong size on ABP_ProjectileBase_C");
static_assert(offsetof(ABP_ProjectileBase_C, UberGraphFrame) == 0x000220, "Member 'ABP_ProjectileBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, P_Tracer2) == 0x000228, "Member 'ABP_ProjectileBase_C::P_Tracer2' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, projectileMesh) == 0x000230, "Member 'ABP_ProjectileBase_C::projectileMesh' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_ProjectileBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, FlightDirection) == 0x000240, "Member 'ABP_ProjectileBase_C::FlightDirection' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsThrowable) == 0x00024C, "Member 'ABP_ProjectileBase_C::IsThrowable' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Speed) == 0x000250, "Member 'ABP_ProjectileBase_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DeltaSeconds) == 0x000254, "Member 'ABP_ProjectileBase_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LastLocation) == 0x000258, "Member 'ABP_ProjectileBase_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DamageAmount) == 0x000264, "Member 'ABP_ProjectileBase_C::DamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ActorsToIgnore) == 0x000268, "Member 'ABP_ProjectileBase_C::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, WeaponDamageRange) == 0x000278, "Member 'ABP_ProjectileBase_C::WeaponDamageRange' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AOEDamage_) == 0x000279, "Member 'ABP_ProjectileBase_C::AOEDamage_' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AOERadius) == 0x00027C, "Member 'ABP_ProjectileBase_C::AOERadius' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AOEDamageAmount) == 0x000280, "Member 'ABP_ProjectileBase_C::AOEDamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AlreadyHitActors) == 0x000288, "Member 'ABP_ProjectileBase_C::AlreadyHitActors' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, BuffDebuffToApply) == 0x000298, "Member 'ABP_ProjectileBase_C::BuffDebuffToApply' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileLifeSpan) == 0x0002A0, "Member 'ABP_ProjectileBase_C::ProjectileLifeSpan' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DropRate) == 0x0002A4, "Member 'ABP_ProjectileBase_C::DropRate' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, TracerType) == 0x0002A8, "Member 'ABP_ProjectileBase_C::TracerType' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DropAmount) == 0x0002B0, "Member 'ABP_ProjectileBase_C::DropAmount' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnvironmentImpactParticleEffect) == 0x0002B8, "Member 'ABP_ProjectileBase_C::EnvironmentImpactParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, CharacterImpactParticleEffect) == 0x0002C0, "Member 'ABP_ProjectileBase_C::CharacterImpactParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, VehicleImpactParticleEffect) == 0x0002C8, "Member 'ABP_ProjectileBase_C::VehicleImpactParticleEffect' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactParticleSizeMultiplier) == 0x0002D0, "Member 'ABP_ProjectileBase_C::ImpactParticleSizeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactSound) == 0x0002D8, "Member 'ABP_ProjectileBase_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactSoundPitch) == 0x0002E0, "Member 'ABP_ProjectileBase_C::ImpactSoundPitch' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactDecal) == 0x0002E8, "Member 'ABP_ProjectileBase_C::ImpactDecal' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ImpactDecalScale) == 0x0002F0, "Member 'ABP_ProjectileBase_C::ImpactDecalScale' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DirectHitDamageType) == 0x0002F4, "Member 'ABP_ProjectileBase_C::DirectHitDamageType' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AOEDamageType) == 0x0002F5, "Member 'ABP_ProjectileBase_C::AOEDamageType' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AttackerPawn_DontEdit_) == 0x0002F8, "Member 'ABP_ProjectileBase_C::AttackerPawn_DontEdit_' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LocalProjectile_EnableIfServerOrAI_) == 0x000300, "Member 'ABP_ProjectileBase_C::LocalProjectile_EnableIfServerOrAI_' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnableDropRate) == 0x000301, "Member 'ABP_ProjectileBase_C::EnableDropRate' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Hit) == 0x000304, "Member 'ABP_ProjectileBase_C::Hit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, Active) == 0x00038C, "Member 'ABP_ProjectileBase_C::Active' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ThrowableTransform) == 0x000390, "Member 'ABP_ProjectileBase_C::ThrowableTransform' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DetonationDelay) == 0x0003C0, "Member 'ABP_ProjectileBase_C::DetonationDelay' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ThrowableBounceSound) == 0x0003C8, "Member 'ABP_ProjectileBase_C::ThrowableBounceSound' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LastThrowableLocation) == 0x0003D0, "Member 'ABP_ProjectileBase_C::LastThrowableLocation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnableFlyBySound) == 0x0003DC, "Member 'ABP_ProjectileBase_C::EnableFlyBySound' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, CanCriticalHit) == 0x0003DD, "Member 'ABP_ProjectileBase_C::CanCriticalHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, InitialLocation) == 0x0003E0, "Member 'ABP_ProjectileBase_C::InitialLocation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileCollisionImmuneDistance) == 0x0003EC, "Member 'ABP_ProjectileBase_C::ProjectileCollisionImmuneDistance' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, HitDetectionOffset) == 0x0003F0, "Member 'ABP_ProjectileBase_C::HitDetectionOffset' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, UseCloseByCollisionImunity) == 0x0003F4, "Member 'ABP_ProjectileBase_C::UseCloseByCollisionImunity' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, VehicleHit) == 0x0003F5, "Member 'ABP_ProjectileBase_C::VehicleHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, CharacterHit) == 0x0003F6, "Member 'ABP_ProjectileBase_C::CharacterHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, DirectHit) == 0x0003F7, "Member 'ABP_ProjectileBase_C::DirectHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, OnDirectHit) == 0x0003F8, "Member 'ABP_ProjectileBase_C::OnDirectHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsAIProjectile) == 0x000408, "Member 'ABP_ProjectileBase_C::IsAIProjectile' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, SpecialKillMessage) == 0x000410, "Member 'ABP_ProjectileBase_C::SpecialKillMessage' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnableHeadshots) == 0x000428, "Member 'ABP_ProjectileBase_C::EnableHeadshots' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, WeaponRangeCurve) == 0x000430, "Member 'ABP_ProjectileBase_C::WeaponRangeCurve' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, CharacterOrigin) == 0x000438, "Member 'ABP_ProjectileBase_C::CharacterOrigin' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LaunchForce) == 0x000444, "Member 'ABP_ProjectileBase_C::LaunchForce' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, CreateTrail) == 0x000448, "Member 'ABP_ProjectileBase_C::CreateTrail' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, TrailWidth) == 0x00044C, "Member 'ABP_ProjectileBase_C::TrailWidth' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, UseLongTrail) == 0x000450, "Member 'ABP_ProjectileBase_C::UseLongTrail' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ProjectileRadius) == 0x000454, "Member 'ABP_ProjectileBase_C::ProjectileRadius' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsHeadShot) == 0x000458, "Member 'ABP_ProjectileBase_C::IsHeadShot' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, TrailRef) == 0x000460, "Member 'ABP_ProjectileBase_C::TrailRef' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, StickyThrowable) == 0x000468, "Member 'ABP_ProjectileBase_C::StickyThrowable' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsStuckToObject_StickyThrowable_) == 0x000469, "Member 'ABP_ProjectileBase_C::IsStuckToObject_StickyThrowable_' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, LastStickyThrowableObjectHit) == 0x00046C, "Member 'ABP_ProjectileBase_C::LastStickyThrowableObjectHit' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ThrowableAttachment) == 0x0004F8, "Member 'ABP_ProjectileBase_C::ThrowableAttachment' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AttachImpactParticleToCharacter) == 0x000520, "Member 'ABP_ProjectileBase_C::AttachImpactParticleToCharacter' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IsPiercingDamage) == 0x000521, "Member 'ABP_ProjectileBase_C::IsPiercingDamage' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, WeaponProjectileExitLocation) == 0x000524, "Member 'ABP_ProjectileBase_C::WeaponProjectileExitLocation' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnableCloseByDamageReduction) == 0x000530, "Member 'ABP_ProjectileBase_C::EnableCloseByDamageReduction' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, IgnoreAOERadius_AlwaysDealFullDMG_) == 0x000531, "Member 'ABP_ProjectileBase_C::IgnoreAOERadius_AlwaysDealFullDMG_' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, EnableDebug) == 0x000532, "Member 'ABP_ProjectileBase_C::EnableDebug' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, BonusDamage) == 0x000534, "Member 'ABP_ProjectileBase_C::BonusDamage' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, TrailToUse) == 0x000538, "Member 'ABP_ProjectileBase_C::TrailToUse' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, ExplodeOnLifeEnd) == 0x000540, "Member 'ABP_ProjectileBase_C::ExplodeOnLifeEnd' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, MaxProjectileTravelDistance) == 0x000544, "Member 'ABP_ProjectileBase_C::MaxProjectileTravelDistance' has a wrong offset!");
static_assert(offsetof(ABP_ProjectileBase_C, AOELocation) == 0x000548, "Member 'ABP_ProjectileBase_C::AOELocation' has a wrong offset!");

}

