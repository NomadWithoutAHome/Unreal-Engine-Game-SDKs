#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FockeWulf

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_VehicleSkinThemes_structs.hpp"
#include "BP_PlaneBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FockeWulf.BP_FockeWulf_C
// 0x0060 (0x07B0 - 0x0750)
class ABP_FockeWulf_C final : public ABP_PlaneBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_FockeWulf_C;                     // 0x0750(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Nose;                                              // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrontWingFlapRight;                                // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FrontWingFlapLeft;                                 // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BackWingFlapRight;                                 // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BackWingFlapLeft;                                  // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Rudder;                                            // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RotorWash;                                         // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Rotor;                                             // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MGArrowLeft;                                       // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        MGArrowRight;                                      // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FockeWulf(int32 EntryPoint);
	void InitVehicleThemeSkin();
	void ReceiveTick(float DeltaSeconds_0);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FockeWulf_C">();
	}
	static class ABP_FockeWulf_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FockeWulf_C>();
	}
};
static_assert(alignof(ABP_FockeWulf_C) == 0x000010, "Wrong alignment on ABP_FockeWulf_C");
static_assert(sizeof(ABP_FockeWulf_C) == 0x0007B0, "Wrong size on ABP_FockeWulf_C");
static_assert(offsetof(ABP_FockeWulf_C, UberGraphFrame_BP_FockeWulf_C) == 0x000750, "Member 'ABP_FockeWulf_C::UberGraphFrame_BP_FockeWulf_C' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, Nose) == 0x000758, "Member 'ABP_FockeWulf_C::Nose' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, FrontWingFlapRight) == 0x000760, "Member 'ABP_FockeWulf_C::FrontWingFlapRight' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, FrontWingFlapLeft) == 0x000768, "Member 'ABP_FockeWulf_C::FrontWingFlapLeft' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, BackWingFlapRight) == 0x000770, "Member 'ABP_FockeWulf_C::BackWingFlapRight' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, BackWingFlapLeft) == 0x000778, "Member 'ABP_FockeWulf_C::BackWingFlapLeft' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, Rudder) == 0x000780, "Member 'ABP_FockeWulf_C::Rudder' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, RotorWash) == 0x000788, "Member 'ABP_FockeWulf_C::RotorWash' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, Rotor) == 0x000790, "Member 'ABP_FockeWulf_C::Rotor' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, MGArrowLeft) == 0x000798, "Member 'ABP_FockeWulf_C::MGArrowLeft' has a wrong offset!");
static_assert(offsetof(ABP_FockeWulf_C, MGArrowRight) == 0x0007A0, "Member 'ABP_FockeWulf_C::MGArrowRight' has a wrong offset!");

}

