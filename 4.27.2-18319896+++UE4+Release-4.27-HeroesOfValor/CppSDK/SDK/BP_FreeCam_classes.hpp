#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeCam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeCam.BP_FreeCam_C
// 0x0038 (0x02B8 - 0x0280)
class ABP_FreeCam_C final : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraComponent*                       Camera;                                            // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Forward;                                           // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Backward;                                          // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Left;                                              // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Right;                                             // 0x029B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         MovementSpeed;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraSmooth;                                      // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AxisValueX;                                        // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AxisValueY;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        SpectatingPlayer;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FreeCam(int32 EntryPoint);
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void ReceiveTick(float DeltaSeconds);
	void InpActEvt_SpaceBar_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_D_K2Node_InputKeyEvent_4(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_5(const struct FKey& Key);
	void InpActEvt_A_K2Node_InputKeyEvent_6(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_7(const struct FKey& Key);
	void InpActEvt_S_K2Node_InputKeyEvent_8(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_9(const struct FKey& Key);
	void InpActEvt_W_K2Node_InputKeyEvent_10(const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeCam_C">();
	}
	static class ABP_FreeCam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FreeCam_C>();
	}
};
static_assert(alignof(ABP_FreeCam_C) == 0x000008, "Wrong alignment on ABP_FreeCam_C");
static_assert(sizeof(ABP_FreeCam_C) == 0x0002B8, "Wrong size on ABP_FreeCam_C");
static_assert(offsetof(ABP_FreeCam_C, UberGraphFrame) == 0x000280, "Member 'ABP_FreeCam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, Camera) == 0x000288, "Member 'ABP_FreeCam_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, DefaultSceneRoot) == 0x000290, "Member 'ABP_FreeCam_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, Forward) == 0x000298, "Member 'ABP_FreeCam_C::Forward' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, Backward) == 0x000299, "Member 'ABP_FreeCam_C::Backward' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, Left) == 0x00029A, "Member 'ABP_FreeCam_C::Left' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, Right) == 0x00029B, "Member 'ABP_FreeCam_C::Right' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, MovementSpeed) == 0x00029C, "Member 'ABP_FreeCam_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, CameraSmooth) == 0x0002A0, "Member 'ABP_FreeCam_C::CameraSmooth' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, AxisValueX) == 0x0002A4, "Member 'ABP_FreeCam_C::AxisValueX' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, AxisValueY) == 0x0002A8, "Member 'ABP_FreeCam_C::AxisValueY' has a wrong offset!");
static_assert(offsetof(ABP_FreeCam_C, SpectatingPlayer) == 0x0002B0, "Member 'ABP_FreeCam_C::SpectatingPlayer' has a wrong offset!");

}

