#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaneBase

#include "Basic.hpp"

#include "BP_PlaneBase_classes.hpp"
#include "BP_PlaneBase_parameters.hpp"


namespace SDK
{

// Function BP_PlaneBase.BP_PlaneBase_C.ExecuteUbergraph_BP_PlaneBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::ExecuteUbergraph_BP_PlaneBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ExecuteUbergraph_BP_PlaneBase");

	Params::BP_PlaneBase_C_ExecuteUbergraph_BP_PlaneBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.PickRandomAirLocationInMap
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::PickRandomAirLocationInMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "PickRandomAirLocationInMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ResetFlyAwayTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::ResetFlyAwayTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ResetFlyAwayTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.StopChasing
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::StopChasing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "StopChasing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.AttackPlane
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlaneBase_C*                  Plane                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::AttackPlane(class ABP_PlaneBase_C* Plane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "AttackPlane");

	Params::BP_PlaneBase_C_AttackPlane Parms{};

	Parms.Plane = Plane;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ForcePickRandomAirLocationInMap
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::ForcePickRandomAirLocationInMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ForcePickRandomAirLocationInMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.GetRandomTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::GetRandomTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "GetRandomTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.StopAttackAndFlyToRandomAirLocationOnMap
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::StopAttackAndFlyToRandomAirLocationOnMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "StopAttackAndFlyToRandomAirLocationOnMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.StopBeingChased
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::StopBeingChased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "StopBeingChased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_FinalSpeed
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FinalSpeed_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_FinalSpeed(float FinalSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_FinalSpeed");

	Params::BP_PlaneBase_C_S_FinalSpeed Parms{};

	Parms.FinalSpeed_0 = FinalSpeed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_SetInAirAndFlyingLow
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAir_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FlyingLow_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlaneBase_C::S_SetInAirAndFlyingLow(bool InAir_0, bool FlyingLow_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_SetInAirAndFlyingLow");

	Params::BP_PlaneBase_C_S_SetInAirAndFlyingLow Parms{};

	Parms.InAir_0 = InAir_0;
	Parms.FlyingLow_0 = FlyingLow_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_FinalSpeed
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FinalSpeed_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_FinalSpeed(float FinalSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_FinalSpeed");

	Params::BP_PlaneBase_C_MC_FinalSpeed Parms{};

	Parms.FinalSpeed_0 = FinalSpeed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_SetInAirAndFlyingLow
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InAir_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    FlyingLow_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlaneBase_C::MC_SetInAirAndFlyingLow(bool InAir_0, bool FlyingLow_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_SetInAirAndFlyingLow");

	Params::BP_PlaneBase_C_MC_SetInAirAndFlyingLow Parms{};

	Parms.InAir_0 = InAir_0;
	Parms.FlyingLow_0 = FlyingLow_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_MotorSpeed
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MotorSpeed_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_MotorSpeed(float MotorSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_MotorSpeed");

	Params::BP_PlaneBase_C_MC_MotorSpeed Parms{};

	Parms.MotorSpeed_0 = MotorSpeed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_MotorSpeed
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MotorSpeed_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_MotorSpeed(float MotorSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_MotorSpeed");

	Params::BP_PlaneBase_C_S_MotorSpeed Parms{};

	Parms.MotorSpeed_0 = MotorSpeed_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_SetPitchRoll
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Roll_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_SetPitchRoll(float Pitch_0, float Roll_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_SetPitchRoll");

	Params::BP_PlaneBase_C_S_SetPitchRoll Parms{};

	Parms.Pitch_0 = Pitch_0;
	Parms.Roll_0 = Roll_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_SetPitchRoll
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Roll_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_SetPitchRoll(float Pitch_0, float Roll_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_SetPitchRoll");

	Params::BP_PlaneBase_C_MC_SetPitchRoll Parms{};

	Parms.Pitch_0 = Pitch_0;
	Parms.Roll_0 = Roll_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_SetLastForce
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   LastForce_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_SetLastForce(const struct FVector& LastForce_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_SetLastForce");

	Params::BP_PlaneBase_C_S_SetLastForce Parms{};

	Parms.LastForce_0 = std::move(LastForce_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0");

	Params::BP_PlaneBase_C_InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_TerrainCollision
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::S_TerrainCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_TerrainCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.TerrainCollision(LocalEffects)
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::TerrainCollision_LocalEffects_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "TerrainCollision(LocalEffects)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_TerrainCollision
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::MC_TerrainCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_TerrainCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.AI_DropBomb
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::AI_DropBomb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "AI_DropBomb");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1");

	Params::BP_PlaneBase_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0");

	Params::BP_PlaneBase_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.BombDrop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::BombDrop(const struct FVector& FlightDirection, float Speed, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "BombDrop");

	Params::BP_PlaneBase_C_BombDrop Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.Speed = Speed;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_FireMainWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Fire                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlaneBase_C::S_FireMainWeapon(bool Fire)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_FireMainWeapon");

	Params::BP_PlaneBase_C_S_FireMainWeapon Parms{};

	Parms.Fire = Fire;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_EngineStart
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::MC_EngineStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_EngineStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_SetStrafing
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PlaneStrafingStates                   StrafingState_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_SetStrafing(E_PlaneStrafingStates StrafingState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_SetStrafing");

	Params::BP_PlaneBase_C_S_SetStrafing Parms{};

	Parms.StrafingState_0 = StrafingState_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_SharePlaneTransform
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                PlaneTransform_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_PlaneBase_C::MC_SharePlaneTransform(const struct FTransform& PlaneTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_SharePlaneTransform");

	Params::BP_PlaneBase_C_MC_SharePlaneTransform Parms{};

	Parms.PlaneTransform_0 = std::move(PlaneTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_SharePlaneTransform
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FTransform&                PlaneTransform_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_PlaneBase_C::S_SharePlaneTransform(const struct FTransform& PlaneTransform_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_SharePlaneTransform");

	Params::BP_PlaneBase_C_S_SharePlaneTransform Parms{};

	Parms.PlaneTransform_0 = std::move(PlaneTransform_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.FireProjectile
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                SpawnTransform_0                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor)
// class UArrowComponent*                  Arrow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   WeaponProjectileExitLocation                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "FireProjectile");

	Params::BP_PlaneBase_C_FireProjectile Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.SpawnTransform_0 = std::move(SpawnTransform_0);
	Parms.Arrow = Arrow;
	Parms.WeaponProjectileExitLocation = std::move(WeaponProjectileExitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_RefreshRotors
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::MC_RefreshRotors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_RefreshRotors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_BombDrop
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_BombDrop(const struct FVector& Location, float Speed, const struct FVector& FlightDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_BombDrop");

	Params::BP_PlaneBase_C_MC_BombDrop Parms{};

	Parms.Location = std::move(Location);
	Parms.Speed = Speed;
	Parms.FlightDirection = std::move(FlightDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_DropBomb
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Speed                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_DropBomb(float Speed, const struct FVector& FlightDirection, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_DropBomb");

	Params::BP_PlaneBase_C_S_DropBomb Parms{};

	Parms.Speed = Speed;
	Parms.FlightDirection = std::move(FlightDirection);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ReceiveHit
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              MyComp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSelfMoved                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitNormal                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_PlaneBase_C::ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ReceiveHit");

	Params::BP_PlaneBase_C_ReceiveHit Parms{};

	Parms.MyComp = MyComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.bSelfMoved = bSelfMoved;
	Parms.HitLocation = std::move(HitLocation);
	Parms.HitNormal = std::move(HitNormal);
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.S_FireProjectile
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                SpawnTransform_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UArrowComponent*                  Arrow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   WeaponProjectileExitLocation                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::S_FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "S_FireProjectile");

	Params::BP_PlaneBase_C_S_FireProjectile Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.SpawnTransform_0 = std::move(SpawnTransform_0);
	Parms.Arrow = Arrow;
	Parms.WeaponProjectileExitLocation = std::move(WeaponProjectileExitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_FireProjectile
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FlightDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTransform&                SpawnTransform_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UArrowComponent*                  Arrow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   WeaponProjectileExitLocation                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_FireProjectile");

	Params::BP_PlaneBase_C_MC_FireProjectile Parms{};

	Parms.FlightDirection = std::move(FlightDirection);
	Parms.SpawnTransform_0 = std::move(SpawnTransform_0);
	Parms.Arrow = Arrow;
	Parms.WeaponProjectileExitLocation = std::move(WeaponProjectileExitLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.DropGear
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::DropGear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "DropGear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.RetractGear
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::RetractGear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "RetractGear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Zoom In (Plane)_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Zoom In (Plane)_K2Node_InputActionEvent_0");

	Params::BP_PlaneBase_C_InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Zoom In (Plane)_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Zoom In (Plane)_K2Node_InputActionEvent_1");

	Params::BP_PlaneBase_C_InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Machineguns_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Machineguns_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Machineguns_K2Node_InputActionEvent_2");

	Params::BP_PlaneBase_C_InpActEvt_Machineguns_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Machineguns_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Machineguns_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Machineguns_K2Node_InputActionEvent_3");

	Params::BP_PlaneBase_C_InpActEvt_Machineguns_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_WEP (Speedboost)_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_WEP (Speedboost)_K2Node_InputActionEvent_4");

	Params::BP_PlaneBase_C_InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_WEP (Speedboost)_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_WEP (Speedboost)_K2Node_InputActionEvent_5");

	Params::BP_PlaneBase_C_InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Freelook (Orbit Camera)_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Freelook (Orbit Camera)_K2Node_InputActionEvent_6");

	Params::BP_PlaneBase_C_InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Freelook (Orbit Camera)_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Freelook (Orbit Camera)_K2Node_InputActionEvent_7");

	Params::BP_PlaneBase_C_InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Look Behind_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Look_Behind_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Look Behind_K2Node_InputActionEvent_8");

	Params::BP_PlaneBase_C_InpActEvt_Look_Behind_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Look Behind_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Look_Behind_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Look Behind_K2Node_InputActionEvent_9");

	Params::BP_PlaneBase_C_InpActEvt_Look_Behind_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Strafe Right_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Strafe_Right_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Strafe Right_K2Node_InputActionEvent_10");

	Params::BP_PlaneBase_C_InpActEvt_Strafe_Right_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Strafe Right_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Strafe_Right_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Strafe Right_K2Node_InputActionEvent_11");

	Params::BP_PlaneBase_C_InpActEvt_Strafe_Right_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Strafe Left_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Strafe_Left_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Strafe Left_K2Node_InputActionEvent_12");

	Params::BP_PlaneBase_C_InpActEvt_Strafe_Left_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Strafe Left_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Strafe_Left_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Strafe Left_K2Node_InputActionEvent_13");

	Params::BP_PlaneBase_C_InpActEvt_Strafe_Left_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Break_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Break_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Break_K2Node_InputActionEvent_14");

	Params::BP_PlaneBase_C_InpActEvt_Break_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Break_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Break_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Break_K2Node_InputActionEvent_15");

	Params::BP_PlaneBase_C_InpActEvt_Break_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.InpActEvt_Drop Bomb_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlaneBase_C::InpActEvt_Drop_Bomb_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "InpActEvt_Drop Bomb_K2Node_InputActionEvent_16");

	Params::BP_PlaneBase_C_InpActEvt_Drop_Bomb_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.Gear__UpdateFunc
// (BlueprintEvent)

void ABP_PlaneBase_C::Gear__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "Gear__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.Gear__FinishedFunc
// (BlueprintEvent)

void ABP_PlaneBase_C::Gear__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "Gear__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.OnRep_FireMainWeapon
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::OnRep_FireMainWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "OnRep_FireMainWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.AI_MaintainPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Pitch_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float*                                  PitchResult                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::AI_MaintainPitch(float Pitch_0, float* PitchResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "AI_MaintainPitch");

	Params::BP_PlaneBase_C_AI_MaintainPitch Parms{};

	Parms.Pitch_0 = Pitch_0;

	UObject::ProcessEvent(Func, &Parms);

	if (PitchResult != nullptr)
		*PitchResult = Parms.PitchResult;
}


// Function BP_PlaneBase.BP_PlaneBase_C.AI_MaintainRoll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Roll_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::AI_MaintainRoll(float Roll_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "AI_MaintainRoll");

	Params::BP_PlaneBase_C_AI_MaintainRoll Parms{};

	Parms.Roll_0 = Roll_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.AI_GetPossibleCharacterTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Character_C*>*         PossibleCharTargets                                    (Parm, OutParm)

void ABP_PlaneBase_C::AI_GetPossibleCharacterTargets(TArray<class ABP_Character_C*>* PossibleCharTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "AI_GetPossibleCharacterTargets");

	Params::BP_PlaneBase_C_AI_GetPossibleCharacterTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PossibleCharTargets != nullptr)
		*PossibleCharTargets = std::move(Parms.PossibleCharTargets);
}


// Function BP_PlaneBase.BP_PlaneBase_C.OnRep_LowHealth
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::OnRep_LowHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "OnRep_LowHealth");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.DamagedByPlane(Server)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlaneBase_C*                  Plane                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::DamagedByPlane_Server_(class ABP_PlaneBase_C* Plane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "DamagedByPlane(Server)");

	Params::BP_PlaneBase_C_DamagedByPlane_Server_ Parms{};

	Parms.Plane = Plane;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.IsPossessedEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::IsPossessedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "IsPossessedEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.HealthRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::HealthRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "HealthRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.MC_Damaged
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   DamageLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageLocationRelative                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "MC_Damaged");

	Params::BP_PlaneBase_C_MC_Damaged Parms{};

	Parms.DamageLocation = std::move(DamageLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.DamageAmount = DamageAmount;
	Parms.DamageType = DamageType;
	Parms.DamageLocationRelative = std::move(DamageLocationRelative);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.DestroyedRepNotify
// (BlueprintCallable, BlueprintEvent)

void ABP_PlaneBase_C::DestroyedRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "DestroyedRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::ReceiveTick(float DeltaSeconds_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ReceiveTick");

	Params::BP_PlaneBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds_0 = DeltaSeconds_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ReceiveUnpossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ReceiveUnpossessed");

	Params::BP_PlaneBase_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ReceivePossessed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlaneBase_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ReceivePossessed");

	Params::BP_PlaneBase_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlaneBase.BP_PlaneBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlaneBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlaneBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

