#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Controller

#include "Basic.hpp"

#include "BP_Controller_classes.hpp"
#include "BP_Controller_parameters.hpp"


namespace SDK
{

// Function BP_Controller.BP_Controller_C.ExecuteUbergraph_BP_Controller
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::ExecuteUbergraph_BP_Controller(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ExecuteUbergraph_BP_Controller");

	Params::BP_Controller_C_ExecuteUbergraph_BP_Controller Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.RemoveSelfFromSpectators
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::RemoveSelfFromSpectators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "RemoveSelfFromSpectators");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.NewVoteKickStarted
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::NewVoteKickStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "NewVoteKickStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.S_SendVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Yes                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Controller_C::S_SendVote(bool Yes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_SendVote");

	Params::BP_Controller_C_S_SendVote Parms{};

	Parms.Yes = Yes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_StartVoteKick
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerState_C*                PlayerToVoteKick                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_StartVoteKick(class ABP_PlayerState_C* PlayerToVoteKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_StartVoteKick");

	Params::BP_Controller_C_S_StartVoteKick Parms{};

	Parms.PlayerToVoteKick = PlayerToVoteKick;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.CloseCustomWidget
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::CloseCustomWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "CloseCustomWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.OC_OpenCustomCommandWidget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WidgetClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::OC_OpenCustomCommandWidget(class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_OpenCustomCommandWidget");

	Params::BP_Controller_C_OC_OpenCustomCommandWidget Parms{};

	Parms.WidgetClass = WidgetClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_SpawnSpectorCam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::S_SpawnSpectorCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_SpawnSpectorCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.OC_EnterSpectatorCam
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::OC_EnterSpectatorCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_EnterSpectatorCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.EnterSpectatorCam
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::EnterSpectatorCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "EnterSpectatorCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.S_RegisterAsSpecatorForPlayer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  PlayerToSpectate                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_RegisterAsSpecatorForPlayer(class ABP_Character_C* PlayerToSpectate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_RegisterAsSpecatorForPlayer");

	Params::BP_Controller_C_S_RegisterAsSpecatorForPlayer Parms{};

	Parms.PlayerToSpectate = PlayerToSpectate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_EnterVehicleSeat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_VehicleSeat_C*                VehicleSeat                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_EnterVehicleSeat(class ABP_VehicleSeat_C* VehicleSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_EnterVehicleSeat");

	Params::BP_Controller_C_S_EnterVehicleSeat Parms{};

	Parms.VehicleSeat = VehicleSeat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.OC_TeleportFromSpecCam
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::OC_TeleportFromSpecCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_TeleportFromSpecCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.S_AddMapVote
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Map                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_Controller_C::S_AddMapVote(const class FString& Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_AddMapVote");

	Params::BP_Controller_C_S_AddMapVote Parms{};

	Parms.Map = std::move(Map);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_LaunchOtherCharacter
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Character_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   LaunchVelocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            LaunchInflicter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_LaunchOtherCharacter(class ABP_Character_C* Character_0, const struct FVector& LaunchVelocity, class APawn* LaunchInflicter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_LaunchOtherCharacter");

	Params::BP_Controller_C_S_LaunchOtherCharacter Parms{};

	Parms.Character_0 = Character_0;
	Parms.LaunchVelocity = std::move(LaunchVelocity);
	Parms.LaunchInflicter = LaunchInflicter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.IncreaseDamageNumberLoop
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::IncreaseDamageNumberLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "IncreaseDamageNumberLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.S_ToggleSpectatorCam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::S_ToggleSpectatorCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_ToggleSpectatorCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.Respawn
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::Respawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "Respawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ABP_Controller_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.OC_CreateHUD
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::OC_CreateHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_CreateHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.S_Suicide
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::S_Suicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_Suicide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.ReceiveChatMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      UserName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    SpecialMessage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Controller_C::ReceiveChatMessage(const class FText& UserName, const class FText& Message, bool SpecialMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ReceiveChatMessage");

	Params::BP_Controller_C_ReceiveChatMessage Parms{};

	Parms.UserName = std::move(UserName);
	Parms.Message = std::move(Message);
	Parms.SpecialMessage = SpecialMessage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_SendChatMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Controller_C::S_SendChatMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_SendChatMessage");

	Params::BP_Controller_C_S_SendChatMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ReceiveTick");

	Params::BP_Controller_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.OC_SpawnSelect
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::OC_SpawnSelect(E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_SpawnSelect");

	Params::BP_Controller_C_OC_SpawnSelect Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.OC_AddLoadingScreen
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Loading_Text                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FText&                      MapName                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Controller_C::OC_AddLoadingScreen(const class FText& Loading_Text, const class FText& MapName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_AddLoadingScreen");

	Params::BP_Controller_C_OC_AddLoadingScreen Parms{};

	Parms.Loading_Text = std::move(Loading_Text);
	Parms.MapName = std::move(MapName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.CloseIngameMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_Controller_C::CloseIngameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "CloseIngameMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Controller.BP_Controller_C.OC_DisplayDamageNumbers
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CriticalHit_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class AActor*                           HitActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLow                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::OC_DisplayDamageNumbers(const struct FVector& HitLocation, int32 DamageAmount, bool CriticalHit_, class AActor* HitActor, bool IsLow, E_DamageTypes DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "OC_DisplayDamageNumbers");

	Params::BP_Controller_C_OC_DisplayDamageNumbers Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.DamageAmount = DamageAmount;
	Parms.CriticalHit_ = CriticalHit_;
	Parms.HitActor = HitActor;
	Parms.IsLow = IsLow;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_ApplyDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageHitLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            AttackerPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Debuff                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCriticalHit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreTeamProtection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      SpecialKillMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ShouldBreakInvisibility                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPiercingDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Controller_C::S_ApplyDamage(class UObject* Target, int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex_0, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_ApplyDamage");

	Params::BP_Controller_C_S_ApplyDamage Parms{};

	Parms.Target = Target;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageHitLocation = std::move(DamageHitLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.AttackerPawn = AttackerPawn;
	Parms.Debuff = Debuff;
	Parms.DamageType = DamageType;
	Parms.PlayerIndex_0 = PlayerIndex_0;
	Parms.IsCriticalHit = IsCriticalHit;
	Parms.IgnoreTeamProtection = IgnoreTeamProtection;
	Parms.SpecialKillMessage = std::move(SpecialKillMessage);
	Parms.ShouldBreakInvisibility = ShouldBreakInvisibility;
	Parms.IsPiercingDamage = IsPiercingDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.ApplyDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DamageAmount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageHitLocation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DamageDirection                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            AttackerPawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Debuff                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_DamageTypes                           DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerIndex_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCriticalHit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreTeamProtection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const class FText&                      SpecialKillMessage                                     (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    ShouldBreakInvisibility                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IsPiercingDamage                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Controller_C::ApplyDamage(class UObject* Target, int32 DamageAmount, const struct FVector& DamageHitLocation, const struct FVector& DamageDirection, class APawn* AttackerPawn, class UClass* Debuff, E_DamageTypes DamageType, int32 PlayerIndex_0, bool IsCriticalHit, bool IgnoreTeamProtection, const class FText& SpecialKillMessage, bool ShouldBreakInvisibility, bool IsPiercingDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ApplyDamage");

	Params::BP_Controller_C_ApplyDamage Parms{};

	Parms.Target = Target;
	Parms.DamageAmount = DamageAmount;
	Parms.DamageHitLocation = std::move(DamageHitLocation);
	Parms.DamageDirection = std::move(DamageDirection);
	Parms.AttackerPawn = AttackerPawn;
	Parms.Debuff = Debuff;
	Parms.DamageType = DamageType;
	Parms.PlayerIndex_0 = PlayerIndex_0;
	Parms.IsCriticalHit = IsCriticalHit;
	Parms.IgnoreTeamProtection = IgnoreTeamProtection;
	Parms.SpecialKillMessage = std::move(SpecialKillMessage);
	Parms.ShouldBreakInvisibility = ShouldBreakInvisibility;
	Parms.IsPiercingDamage = IsPiercingDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_Spawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FST_SpawnInfo&             SpawnInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_VehicleBase_C*                VehicleToEnterAfterSpawn_Optional_                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_Spawn(const struct FST_SpawnInfo& SpawnInfo, class ABP_VehicleBase_C* VehicleToEnterAfterSpawn_Optional_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_Spawn");

	Params::BP_Controller_C_S_Spawn Parms{};

	Parms.SpawnInfo = std::move(SpawnInfo);
	Parms.VehicleToEnterAfterSpawn_Optional_ = VehicleToEnterAfterSpawn_Optional_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_JoinTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Teams                                 Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_JoinTeam(E_Teams Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_JoinTeam");

	Params::BP_Controller_C_S_JoinTeam Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_EnterCharacter
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    teleport                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   TeleportLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_VehicleBase_C*                Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_EnterCharacter(bool teleport, const struct FVector& TeleportLocation, class ABP_VehicleBase_C* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_EnterCharacter");

	Params::BP_Controller_C_S_EnterCharacter Parms{};

	Parms.teleport = teleport;
	Parms.TeleportLocation = std::move(TeleportLocation);
	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.S_EnterVehicle
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_VehicleBase_C*                Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPawnDataComponent_C*             PawnData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::S_EnterVehicle(class ABP_VehicleBase_C* Vehicle, class UPawnDataComponent_C* PawnData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "S_EnterVehicle");

	Params::BP_Controller_C_S_EnterVehicle Parms{};

	Parms.Vehicle = Vehicle;
	Parms.PawnData = PawnData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_F2_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_F2_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_F2_K2Node_InputKeyEvent_0");

	Params::BP_Controller_C_InpActEvt_F2_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_F1_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_F1_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_F1_K2Node_InputKeyEvent_1");

	Params::BP_Controller_C_InpActEvt_F1_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_Delete_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_Delete_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_Delete_K2Node_InputKeyEvent_2");

	Params::BP_Controller_C_InpActEvt_Delete_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_PageDown_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_PageDown_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_PageDown_K2Node_InputKeyEvent_3");

	Params::BP_Controller_C_InpActEvt_PageDown_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_0");

	Params::BP_Controller_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_1");

	Params::BP_Controller_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_SpaceBar_K2Node_InputKeyEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_SpaceBar_K2Node_InputKeyEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_SpaceBar_K2Node_InputKeyEvent_4");

	Params::BP_Controller_C_InpActEvt_SpaceBar_K2Node_InputKeyEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_K_K2Node_InputKeyEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_K_K2Node_InputKeyEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_K_K2Node_InputKeyEvent_5");

	Params::BP_Controller_C_InpActEvt_K_K2Node_InputKeyEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_Enter_K2Node_InputKeyEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_Enter_K2Node_InputKeyEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_Enter_K2Node_InputKeyEvent_6");

	Params::BP_Controller_C_InpActEvt_Enter_K2Node_InputKeyEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_F6_K2Node_InputKeyEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_F6_K2Node_InputKeyEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_F6_K2Node_InputKeyEvent_7");

	Params::BP_Controller_C_InpActEvt_F6_K2Node_InputKeyEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.InpActEvt_Escape_K2Node_InputKeyEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Controller_C::InpActEvt_Escape_K2Node_InputKeyEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "InpActEvt_Escape_K2Node_InputKeyEvent_8");

	Params::BP_Controller_C_InpActEvt_Escape_K2Node_InputKeyEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Controller.BP_Controller_C.SwitchSpawnMenu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Menus                                 Menu                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget**                     menuWidget                                             (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::SwitchSpawnMenu(E_Menus Menu, class UUserWidget** menuWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "SwitchSpawnMenu");

	Params::BP_Controller_C_SwitchSpawnMenu Parms{};

	Parms.Menu = Menu;

	UObject::ProcessEvent(Func, &Parms);

	if (menuWidget != nullptr)
		*menuWidget = Parms.menuWidget;
}


// Function BP_Controller.BP_Controller_C.CheckForChatCommand
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      ChatMessage                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsHost                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   CommandFound_                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText*                            ResponseMessage                                        (Parm, OutParm)
// bool*                                   Broadcast                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Controller_C::CheckForChatCommand(const class FText& ChatMessage, bool IsHost, bool* CommandFound_, class FText* ResponseMessage, bool* Broadcast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "CheckForChatCommand");

	Params::BP_Controller_C_CheckForChatCommand Parms{};

	Parms.ChatMessage = std::move(ChatMessage);
	Parms.IsHost = IsHost;

	UObject::ProcessEvent(Func, &Parms);

	if (CommandFound_ != nullptr)
		*CommandFound_ = Parms.CommandFound_;

	if (ResponseMessage != nullptr)
		*ResponseMessage = std::move(Parms.ResponseMessage);

	if (Broadcast != nullptr)
		*Broadcast = Parms.Broadcast;
}


// Function BP_Controller.BP_Controller_C.KickPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FText*                            Response                                               (Parm, OutParm)

void ABP_Controller_C::KickPlayer(const class FString& PlayerName, class FText* Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "KickPlayer");

	Params::BP_Controller_C_KickPlayer Parms{};

	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);

	if (Response != nullptr)
		*Response = std::move(Parms.Response);
}


// Function BP_Controller.BP_Controller_C.GetCurrentZoneType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_CombatZoneTypes*                      ZoneType                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Controller_C::GetCurrentZoneType(E_CombatZoneTypes* ZoneType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "GetCurrentZoneType");

	Params::BP_Controller_C_GetCurrentZoneType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZoneType != nullptr)
		*ZoneType = Parms.ZoneType;
}


// Function BP_Controller.BP_Controller_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Controller_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Controller_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

