#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldDamageNumber

#include "Basic.hpp"

#include "E_DamageTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WorldDamageNumber.BP_WorldDamageNumber_C
// 0x0038 (0x0258 - 0x0220)
class ABP_WorldDamageNumber_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CriticalHit;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DamageAmount;                                      // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandomHorizontalOffset;                            // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HitActor;                                          // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsLow;                                             // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsWithinView;                                      // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	E_DamageTypes                                 DamageType;                                        // 0x0252(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_WorldDamageNumber(int32 EntryPoint);
	void ReceiveBeginPlay();
	void AddDamage(const struct FST_DamageInformation& DamageInfo);
	void DamageNumberEnded();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WorldDamageNumber_C">();
	}
	static class ABP_WorldDamageNumber_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WorldDamageNumber_C>();
	}
};
static_assert(alignof(ABP_WorldDamageNumber_C) == 0x000008, "Wrong alignment on ABP_WorldDamageNumber_C");
static_assert(sizeof(ABP_WorldDamageNumber_C) == 0x000258, "Wrong size on ABP_WorldDamageNumber_C");
static_assert(offsetof(ABP_WorldDamageNumber_C, UberGraphFrame) == 0x000220, "Member 'ABP_WorldDamageNumber_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, Widget) == 0x000228, "Member 'ABP_WorldDamageNumber_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_WorldDamageNumber_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, CriticalHit) == 0x000238, "Member 'ABP_WorldDamageNumber_C::CriticalHit' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, DamageAmount) == 0x00023C, "Member 'ABP_WorldDamageNumber_C::DamageAmount' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, RandomHorizontalOffset) == 0x000240, "Member 'ABP_WorldDamageNumber_C::RandomHorizontalOffset' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, HitActor) == 0x000248, "Member 'ABP_WorldDamageNumber_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, IsLow) == 0x000250, "Member 'ABP_WorldDamageNumber_C::IsLow' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, IsWithinView) == 0x000251, "Member 'ABP_WorldDamageNumber_C::IsWithinView' has a wrong offset!");
static_assert(offsetof(ABP_WorldDamageNumber_C, DamageType) == 0x000252, "Member 'ABP_WorldDamageNumber_C::DamageType' has a wrong offset!");

}

