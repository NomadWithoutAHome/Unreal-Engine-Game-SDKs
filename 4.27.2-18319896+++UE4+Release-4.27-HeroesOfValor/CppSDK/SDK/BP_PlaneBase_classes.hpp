#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlaneBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_PlaneStrafingStates_structs.hpp"
#include "BP_VehicleBase_classes.hpp"
#include "E_Teams_structs.hpp"
#include "E_DamageTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlaneBase.BP_PlaneBase_C
// 0x0390 (0x0750 - 0x03C0)
class ABP_PlaneBase_C : public ABP_VehicleBase_C
{
public:
	uint8                                         Pad_3B3[0x5];                                      // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlaneBase_C;                     // 0x03B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               WreckageFlamesAndSmoke;                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LeftBrokenWing;                                    // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RightBrokenWing;                                   // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   P51_BrokenFuselage;                                // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FlyByDetectBack;                                   // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FlyByBase;                                         // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DivingSound;                                       // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        S_FastWindSheer;                                   // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WarningAlarm;                                      // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WEPEngineBoostSound;                               // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        FastFlyingWind;                                    // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FaceCam;                                           // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AI_FlyTargetDebugSphere;                           // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        AI_ArrowBase2;                                     // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        AI_ArrowBase1;                                     // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BackWheel;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Smoke;                                             // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MGSound;                                           // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_WingTipTrailRight;                              // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_WingTipTrailLeft;                               // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSoundIdle;                                   // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlaneModel;                                        // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WheelRight;                                        // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WheelLeft;                                         // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSoundFar;                                    // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        EngineSoundFlying;                                 // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PhysicsModel;                                      // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Gear_NewTrack_0_2B721E4044547183BD4B31A26B3DCF7B;  // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Gear__Direction_2B721E4044547183BD4B31A26B3DCF7B;  // 0x04AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Gear;                                              // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForwardPressed;                                    // 0x04B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardPressed;                                   // 0x04B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA[0x2];                                      // 0x04BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Mouse_Y;                                           // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Mouse_X;                                           // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StrafeLeft;                                        // 0x04C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StrafeRight;                                       // 0x04C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C6[0xA];                                      // 0x04C6(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PlaneTransform;                                    // 0x04D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DesiredSpeed;                                      // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PlaneSpeed;                                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExtraPitchBasedSpeed;                              // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalSpeed;                                        // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MotorSpeed;                                        // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeCamPressed;                                    // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BackwardCamPressed;                                // 0x0519(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51A[0x2];                                      // 0x051A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Pitch;                                             // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roll;                                              // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FireMainWeapon;                                    // 0x0524(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          InAir;                                             // 0x0525(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlyingLow;                                         // 0x0526(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_527[0x1];                                      // 0x0527(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpeed;                                          // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           Rotors;                                            // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           RotorWashes;                                       // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Rudders;                                           // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           BackWingFlaps;                                     // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           FrontWingFlapsLeft;                                // 0x0570(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           FrontWingFlapsRight;                               // 0x0580(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           BackWheels;                                        // 0x0590(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Noses;                                             // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UArrowComponent*>                MachineGunArrows;                                  // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         PlaneControl;                                      // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundTaxiYaw;                                     // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundTaxiYawTarget;                               // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BombReloading;                                     // 0x05CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CD[0x3];                                      // 0x05CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BombReloadTimer;                                   // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetCameraFOV;                                   // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_PlaneStrafingStates                         StrafingState;                                     // 0x05D8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearRetractAngle;                                  // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAirDetectionDistance;                            // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackWheelRetractAmount;                            // 0x05E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BackWheelAddition;                                 // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        FlyBySoundRef;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastFlyByLoc;                                      // 0x05F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastFlyByDistance;                                 // 0x0604(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FlyBySound;                                        // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FlyByAfterSound;                                   // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyByTriggerDistance;                              // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RollRight;                                         // 0x061C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RollLeft;                                          // 0x061D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61E[0x2];                                      // 0x061E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               RotorsMat;                                         // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      RotorMaterial;                                     // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_RollAmount;                                     // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_PitchAmount;                                    // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AI_FlyTargetLocation;                              // 0x0638(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Climb;                                          // 0x0644(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_645[0x3];                                      // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_TargetDot;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AI_FlyTargetLocationFinal;                         // 0x064C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DistanceToTarget;                               // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_PathToTargetObstructed;                         // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_DistanceFromCollision;                          // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_Evade;                                          // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AI_Target;                                         // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_EvadePitch;                                     // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_CanAttack;                                      // 0x0674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_675[0x3];                                      // 0x0675(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_EvadeRoll;                                      // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_EvadeRollSide;                                  // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_TargetInLOS;                                    // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 AI_OldTarget;                                      // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_EvadeDuration;                                  // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_PostEvadeDiveAmount;                            // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_TargetSide;                                     // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LowHealth;                                         // 0x069C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          AI_ChasingPlane;                                   // 0x069D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_BeingChased;                                    // 0x069E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69F[0x1];                                      // 0x069F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AI_TargetNotInLOSTime;                             // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastForce;                                         // 0x06A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedMultiplier;                                   // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WEPEnabled;                                        // 0x06B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6B5[0x3];                                      // 0x06B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WEPBoostAmount;                                    // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlaneBase_C*                        LastPlaneThatAttackedUs;                           // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlaneBase_C*                        AI_DogFightPlaneTarget;                            // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StudioPlane;                                       // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D1[0x3];                                      // 0x06D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalSpeed;                                        // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DistanceFromCenterOfMap;                        // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_MaxFlyRange;                                    // 0x06DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GlobalSpeedMultiplier;                             // 0x06E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WEPSoundAmount;                                    // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindSheerAmount;                                   // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyByVolume;                                       // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlyByPitch;                                        // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FlyByPitchCurve;                                   // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseInAirFlyBy;                                     // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_701[0x3];                                      // 0x0701(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DiveSoundVolume;                                   // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MachineGunBarrelCounter;                           // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FinalMGProjectileDirection;                        // 0x070C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BombReloadTime;                                    // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterHeight;                                       // 0x071C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_BeingChasedRandomizedSpeed;                     // 0x0720(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DistanceFromImpactCollision;                    // 0x0724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_PerformRollManouvre_Side_;                      // 0x0728(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_Perform_Roll_Manouvre_Side_Smoothed;            // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_DistanceBetweenOurAttackerAndUs;                // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AI_ChasedByPlayer;                                 // 0x0734(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AI_CreateDistanceBetweenSelfAndTarget;             // 0x0735(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_736[0x2];                                      // 0x0736(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastVelocityBeforeDestroy;                         // 0x0738(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestroyedRemnantVelocity;                          // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotateWreckageToVelocity;                          // 0x0748(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlaneBase(int32 EntryPoint);
	void PickRandomAirLocationInMap();
	void ResetFlyAwayTarget();
	void StopChasing();
	void AttackPlane(class ABP_PlaneBase_C* Plane);
	void ForcePickRandomAirLocationInMap();
	void GetRandomTarget();
	void StopAttackAndFlyToRandomAirLocationOnMap();
	void StopBeingChased();
	void S_FinalSpeed(float FinalSpeed_0);
	void S_SetInAirAndFlyingLow(bool InAir_0, bool FlyingLow_0);
	void MC_FinalSpeed(float FinalSpeed_0);
	void MC_SetInAirAndFlyingLow(bool InAir_0, bool FlyingLow_0);
	void MC_MotorSpeed(float MotorSpeed_0);
	void S_MotorSpeed(float MotorSpeed_0);
	void S_SetPitchRoll(float Pitch_0, float Roll_0);
	void MC_SetPitchRoll(float Pitch_0, float Roll_0);
	void S_SetLastForce(const struct FVector& LastForce_0);
	void InpAxisEvt_Accelerate_K2Node_InputAxisEvent_0(float AxisValue);
	void S_TerrainCollision();
	void TerrainCollision_LocalEffects_();
	void MC_TerrainCollision();
	void AI_DropBomb();
	void InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1(float AxisValue);
	void InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0(float AxisValue);
	void BombDrop(const struct FVector& FlightDirection, float Speed, const struct FVector& Location);
	void S_FireMainWeapon(bool Fire);
	void MC_EngineStart();
	void S_SetStrafing(E_PlaneStrafingStates StrafingState_0);
	void MC_SharePlaneTransform(const struct FTransform& PlaneTransform_0);
	void S_SharePlaneTransform(const struct FTransform& PlaneTransform_0);
	void FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation);
	void MC_RefreshRotors();
	void MC_BombDrop(const struct FVector& Location, float Speed, const struct FVector& FlightDirection);
	void S_DropBomb(float Speed, const struct FVector& FlightDirection, const struct FVector& Location);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void S_FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation);
	void MC_FireProjectile(const struct FVector& FlightDirection, const struct FTransform& SpawnTransform_0, class UArrowComponent* Arrow, const struct FVector& WeaponProjectileExitLocation);
	void DropGear();
	void RetractGear();
	void InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Zoom_In__Plane__K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Machineguns_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_Machineguns_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_WEP__Speedboost__K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Freelook__Orbit_Camera__K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Look_Behind_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Look_Behind_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Strafe_Right_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Strafe_Right_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Strafe_Left_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Strafe_Left_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Break_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Drop_Bomb_K2Node_InputActionEvent_16(const struct FKey& Key);
	void Gear__UpdateFunc();
	void Gear__FinishedFunc();
	void OnRep_FireMainWeapon();
	void AI_MaintainPitch(float Pitch_0, float* PitchResult);
	void AI_MaintainRoll(float Roll_0);
	void AI_GetPossibleCharacterTargets(TArray<class ABP_Character_C*>* PossibleCharTargets);
	void OnRep_LowHealth();
	void DamagedByPlane_Server_(class ABP_PlaneBase_C* Plane);
	void IsPossessedEvent();
	void HealthRepNotify();
	void MC_Damaged(const struct FVector& DamageLocation, const struct FVector& DamageDirection, int32 DamageAmount, E_DamageTypes DamageType, const struct FVector& DamageLocationRelative);
	void DestroyedRepNotify();
	void ReceiveTick(float DeltaSeconds_0);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlaneBase_C">();
	}
	static class ABP_PlaneBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlaneBase_C>();
	}
};
static_assert(alignof(ABP_PlaneBase_C) == 0x000010, "Wrong alignment on ABP_PlaneBase_C");
static_assert(sizeof(ABP_PlaneBase_C) == 0x000750, "Wrong size on ABP_PlaneBase_C");
static_assert(offsetof(ABP_PlaneBase_C, UberGraphFrame_BP_PlaneBase_C) == 0x0003B8, "Member 'ABP_PlaneBase_C::UberGraphFrame_BP_PlaneBase_C' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WreckageFlamesAndSmoke) == 0x0003C0, "Member 'ABP_PlaneBase_C::WreckageFlamesAndSmoke' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LeftBrokenWing) == 0x0003C8, "Member 'ABP_PlaneBase_C::LeftBrokenWing' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RightBrokenWing) == 0x0003D0, "Member 'ABP_PlaneBase_C::RightBrokenWing' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, P51_BrokenFuselage) == 0x0003D8, "Member 'ABP_PlaneBase_C::P51_BrokenFuselage' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByDetectBack) == 0x0003E0, "Member 'ABP_PlaneBase_C::FlyByDetectBack' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByBase) == 0x0003E8, "Member 'ABP_PlaneBase_C::FlyByBase' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, DivingSound) == 0x0003F0, "Member 'ABP_PlaneBase_C::DivingSound' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, S_FastWindSheer) == 0x0003F8, "Member 'ABP_PlaneBase_C::S_FastWindSheer' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WarningAlarm) == 0x000400, "Member 'ABP_PlaneBase_C::WarningAlarm' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WEPEngineBoostSound) == 0x000408, "Member 'ABP_PlaneBase_C::WEPEngineBoostSound' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FastFlyingWind) == 0x000410, "Member 'ABP_PlaneBase_C::FastFlyingWind' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FaceCam) == 0x000418, "Member 'ABP_PlaneBase_C::FaceCam' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_FlyTargetDebugSphere) == 0x000420, "Member 'ABP_PlaneBase_C::AI_FlyTargetDebugSphere' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_ArrowBase2) == 0x000428, "Member 'ABP_PlaneBase_C::AI_ArrowBase2' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_ArrowBase1) == 0x000430, "Member 'ABP_PlaneBase_C::AI_ArrowBase1' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackWheel) == 0x000438, "Member 'ABP_PlaneBase_C::BackWheel' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Smoke) == 0x000440, "Member 'ABP_PlaneBase_C::Smoke' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, MGSound) == 0x000448, "Member 'ABP_PlaneBase_C::MGSound' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, NS_WingTipTrailRight) == 0x000450, "Member 'ABP_PlaneBase_C::NS_WingTipTrailRight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, NS_WingTipTrailLeft) == 0x000458, "Member 'ABP_PlaneBase_C::NS_WingTipTrailLeft' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, EngineSoundIdle) == 0x000460, "Member 'ABP_PlaneBase_C::EngineSoundIdle' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, PlaneModel) == 0x000468, "Member 'ABP_PlaneBase_C::PlaneModel' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WheelRight) == 0x000470, "Member 'ABP_PlaneBase_C::WheelRight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WheelLeft) == 0x000478, "Member 'ABP_PlaneBase_C::WheelLeft' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, EngineSoundFar) == 0x000480, "Member 'ABP_PlaneBase_C::EngineSoundFar' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, EngineSoundFlying) == 0x000488, "Member 'ABP_PlaneBase_C::EngineSoundFlying' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, SpringArm) == 0x000490, "Member 'ABP_PlaneBase_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Camera) == 0x000498, "Member 'ABP_PlaneBase_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, PhysicsModel) == 0x0004A0, "Member 'ABP_PlaneBase_C::PhysicsModel' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Gear_NewTrack_0_2B721E4044547183BD4B31A26B3DCF7B) == 0x0004A8, "Member 'ABP_PlaneBase_C::Gear_NewTrack_0_2B721E4044547183BD4B31A26B3DCF7B' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Gear__Direction_2B721E4044547183BD4B31A26B3DCF7B) == 0x0004AC, "Member 'ABP_PlaneBase_C::Gear__Direction_2B721E4044547183BD4B31A26B3DCF7B' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Gear) == 0x0004B0, "Member 'ABP_PlaneBase_C::Gear' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, ForwardPressed) == 0x0004B8, "Member 'ABP_PlaneBase_C::ForwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackwardPressed) == 0x0004B9, "Member 'ABP_PlaneBase_C::BackwardPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Mouse_Y) == 0x0004BC, "Member 'ABP_PlaneBase_C::Mouse_Y' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Mouse_X) == 0x0004C0, "Member 'ABP_PlaneBase_C::Mouse_X' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, StrafeLeft) == 0x0004C4, "Member 'ABP_PlaneBase_C::StrafeLeft' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, StrafeRight) == 0x0004C5, "Member 'ABP_PlaneBase_C::StrafeRight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, PlaneTransform) == 0x0004D0, "Member 'ABP_PlaneBase_C::PlaneTransform' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, DesiredSpeed) == 0x000500, "Member 'ABP_PlaneBase_C::DesiredSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, DeltaSeconds) == 0x000504, "Member 'ABP_PlaneBase_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, PlaneSpeed) == 0x000508, "Member 'ABP_PlaneBase_C::PlaneSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, ExtraPitchBasedSpeed) == 0x00050C, "Member 'ABP_PlaneBase_C::ExtraPitchBasedSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FinalSpeed) == 0x000510, "Member 'ABP_PlaneBase_C::FinalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, MotorSpeed) == 0x000514, "Member 'ABP_PlaneBase_C::MotorSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FreeCamPressed) == 0x000518, "Member 'ABP_PlaneBase_C::FreeCamPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackwardCamPressed) == 0x000519, "Member 'ABP_PlaneBase_C::BackwardCamPressed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Pitch) == 0x00051C, "Member 'ABP_PlaneBase_C::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Roll) == 0x000520, "Member 'ABP_PlaneBase_C::Roll' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FireMainWeapon) == 0x000524, "Member 'ABP_PlaneBase_C::FireMainWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, InAir) == 0x000525, "Member 'ABP_PlaneBase_C::InAir' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyingLow) == 0x000526, "Member 'ABP_PlaneBase_C::FlyingLow' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, MinSpeed) == 0x000528, "Member 'ABP_PlaneBase_C::MinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Rotors) == 0x000530, "Member 'ABP_PlaneBase_C::Rotors' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RotorWashes) == 0x000540, "Member 'ABP_PlaneBase_C::RotorWashes' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Rudders) == 0x000550, "Member 'ABP_PlaneBase_C::Rudders' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackWingFlaps) == 0x000560, "Member 'ABP_PlaneBase_C::BackWingFlaps' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FrontWingFlapsLeft) == 0x000570, "Member 'ABP_PlaneBase_C::FrontWingFlapsLeft' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FrontWingFlapsRight) == 0x000580, "Member 'ABP_PlaneBase_C::FrontWingFlapsRight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackWheels) == 0x000590, "Member 'ABP_PlaneBase_C::BackWheels' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, Noses) == 0x0005A0, "Member 'ABP_PlaneBase_C::Noses' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, MachineGunArrows) == 0x0005B0, "Member 'ABP_PlaneBase_C::MachineGunArrows' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, PlaneControl) == 0x0005C0, "Member 'ABP_PlaneBase_C::PlaneControl' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, GroundTaxiYaw) == 0x0005C4, "Member 'ABP_PlaneBase_C::GroundTaxiYaw' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, GroundTaxiYawTarget) == 0x0005C8, "Member 'ABP_PlaneBase_C::GroundTaxiYawTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BombReloading) == 0x0005CC, "Member 'ABP_PlaneBase_C::BombReloading' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BombReloadTimer) == 0x0005D0, "Member 'ABP_PlaneBase_C::BombReloadTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, TargetCameraFOV) == 0x0005D4, "Member 'ABP_PlaneBase_C::TargetCameraFOV' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, StrafingState) == 0x0005D8, "Member 'ABP_PlaneBase_C::StrafingState' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, GearRetractAngle) == 0x0005DC, "Member 'ABP_PlaneBase_C::GearRetractAngle' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, InAirDetectionDistance) == 0x0005E0, "Member 'ABP_PlaneBase_C::InAirDetectionDistance' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackWheelRetractAmount) == 0x0005E4, "Member 'ABP_PlaneBase_C::BackWheelRetractAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BackWheelAddition) == 0x0005E8, "Member 'ABP_PlaneBase_C::BackWheelAddition' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyBySoundRef) == 0x0005F0, "Member 'ABP_PlaneBase_C::FlyBySoundRef' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LastFlyByLoc) == 0x0005F8, "Member 'ABP_PlaneBase_C::LastFlyByLoc' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LastFlyByDistance) == 0x000604, "Member 'ABP_PlaneBase_C::LastFlyByDistance' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyBySound) == 0x000608, "Member 'ABP_PlaneBase_C::FlyBySound' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByAfterSound) == 0x000610, "Member 'ABP_PlaneBase_C::FlyByAfterSound' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByTriggerDistance) == 0x000618, "Member 'ABP_PlaneBase_C::FlyByTriggerDistance' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RollRight) == 0x00061C, "Member 'ABP_PlaneBase_C::RollRight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RollLeft) == 0x00061D, "Member 'ABP_PlaneBase_C::RollLeft' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RotorsMat) == 0x000620, "Member 'ABP_PlaneBase_C::RotorsMat' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RotorMaterial) == 0x000628, "Member 'ABP_PlaneBase_C::RotorMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_RollAmount) == 0x000630, "Member 'ABP_PlaneBase_C::AI_RollAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_PitchAmount) == 0x000634, "Member 'ABP_PlaneBase_C::AI_PitchAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_FlyTargetLocation) == 0x000638, "Member 'ABP_PlaneBase_C::AI_FlyTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_Climb) == 0x000644, "Member 'ABP_PlaneBase_C::AI_Climb' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_TargetDot) == 0x000648, "Member 'ABP_PlaneBase_C::AI_TargetDot' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_FlyTargetLocationFinal) == 0x00064C, "Member 'ABP_PlaneBase_C::AI_FlyTargetLocationFinal' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DistanceToTarget) == 0x000658, "Member 'ABP_PlaneBase_C::AI_DistanceToTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_PathToTargetObstructed) == 0x00065C, "Member 'ABP_PlaneBase_C::AI_PathToTargetObstructed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DistanceFromCollision) == 0x000660, "Member 'ABP_PlaneBase_C::AI_DistanceFromCollision' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_Evade) == 0x000664, "Member 'ABP_PlaneBase_C::AI_Evade' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_Target) == 0x000668, "Member 'ABP_PlaneBase_C::AI_Target' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_EvadePitch) == 0x000670, "Member 'ABP_PlaneBase_C::AI_EvadePitch' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_CanAttack) == 0x000674, "Member 'ABP_PlaneBase_C::AI_CanAttack' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_EvadeRoll) == 0x000678, "Member 'ABP_PlaneBase_C::AI_EvadeRoll' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_EvadeRollSide) == 0x00067C, "Member 'ABP_PlaneBase_C::AI_EvadeRollSide' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_TargetInLOS) == 0x000680, "Member 'ABP_PlaneBase_C::AI_TargetInLOS' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_OldTarget) == 0x000688, "Member 'ABP_PlaneBase_C::AI_OldTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_EvadeDuration) == 0x000690, "Member 'ABP_PlaneBase_C::AI_EvadeDuration' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_PostEvadeDiveAmount) == 0x000694, "Member 'ABP_PlaneBase_C::AI_PostEvadeDiveAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_TargetSide) == 0x000698, "Member 'ABP_PlaneBase_C::AI_TargetSide' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LowHealth) == 0x00069C, "Member 'ABP_PlaneBase_C::LowHealth' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_ChasingPlane) == 0x00069D, "Member 'ABP_PlaneBase_C::AI_ChasingPlane' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_BeingChased) == 0x00069E, "Member 'ABP_PlaneBase_C::AI_BeingChased' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_TargetNotInLOSTime) == 0x0006A0, "Member 'ABP_PlaneBase_C::AI_TargetNotInLOSTime' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LastForce) == 0x0006A4, "Member 'ABP_PlaneBase_C::LastForce' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, SpeedMultiplier) == 0x0006B0, "Member 'ABP_PlaneBase_C::SpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WEPEnabled) == 0x0006B4, "Member 'ABP_PlaneBase_C::WEPEnabled' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WEPBoostAmount) == 0x0006B8, "Member 'ABP_PlaneBase_C::WEPBoostAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LastPlaneThatAttackedUs) == 0x0006C0, "Member 'ABP_PlaneBase_C::LastPlaneThatAttackedUs' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DogFightPlaneTarget) == 0x0006C8, "Member 'ABP_PlaneBase_C::AI_DogFightPlaneTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, StudioPlane) == 0x0006D0, "Member 'ABP_PlaneBase_C::StudioPlane' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, TotalSpeed) == 0x0006D4, "Member 'ABP_PlaneBase_C::TotalSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DistanceFromCenterOfMap) == 0x0006D8, "Member 'ABP_PlaneBase_C::AI_DistanceFromCenterOfMap' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_MaxFlyRange) == 0x0006DC, "Member 'ABP_PlaneBase_C::AI_MaxFlyRange' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, GlobalSpeedMultiplier) == 0x0006E0, "Member 'ABP_PlaneBase_C::GlobalSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WEPSoundAmount) == 0x0006E4, "Member 'ABP_PlaneBase_C::WEPSoundAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WindSheerAmount) == 0x0006E8, "Member 'ABP_PlaneBase_C::WindSheerAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByVolume) == 0x0006EC, "Member 'ABP_PlaneBase_C::FlyByVolume' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByPitch) == 0x0006F0, "Member 'ABP_PlaneBase_C::FlyByPitch' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FlyByPitchCurve) == 0x0006F8, "Member 'ABP_PlaneBase_C::FlyByPitchCurve' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, UseInAirFlyBy) == 0x000700, "Member 'ABP_PlaneBase_C::UseInAirFlyBy' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, DiveSoundVolume) == 0x000704, "Member 'ABP_PlaneBase_C::DiveSoundVolume' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, MachineGunBarrelCounter) == 0x000708, "Member 'ABP_PlaneBase_C::MachineGunBarrelCounter' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, FinalMGProjectileDirection) == 0x00070C, "Member 'ABP_PlaneBase_C::FinalMGProjectileDirection' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, BombReloadTime) == 0x000718, "Member 'ABP_PlaneBase_C::BombReloadTime' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, WaterHeight) == 0x00071C, "Member 'ABP_PlaneBase_C::WaterHeight' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_BeingChasedRandomizedSpeed) == 0x000720, "Member 'ABP_PlaneBase_C::AI_BeingChasedRandomizedSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DistanceFromImpactCollision) == 0x000724, "Member 'ABP_PlaneBase_C::AI_DistanceFromImpactCollision' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_PerformRollManouvre_Side_) == 0x000728, "Member 'ABP_PlaneBase_C::AI_PerformRollManouvre_Side_' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_Perform_Roll_Manouvre_Side_Smoothed) == 0x00072C, "Member 'ABP_PlaneBase_C::AI_Perform_Roll_Manouvre_Side_Smoothed' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_DistanceBetweenOurAttackerAndUs) == 0x000730, "Member 'ABP_PlaneBase_C::AI_DistanceBetweenOurAttackerAndUs' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_ChasedByPlayer) == 0x000734, "Member 'ABP_PlaneBase_C::AI_ChasedByPlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, AI_CreateDistanceBetweenSelfAndTarget) == 0x000735, "Member 'ABP_PlaneBase_C::AI_CreateDistanceBetweenSelfAndTarget' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, LastVelocityBeforeDestroy) == 0x000738, "Member 'ABP_PlaneBase_C::LastVelocityBeforeDestroy' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, DestroyedRemnantVelocity) == 0x000744, "Member 'ABP_PlaneBase_C::DestroyedRemnantVelocity' has a wrong offset!");
static_assert(offsetof(ABP_PlaneBase_C, RotateWreckageToVelocity) == 0x000748, "Member 'ABP_PlaneBase_C::RotateWreckageToVelocity' has a wrong offset!");

}

