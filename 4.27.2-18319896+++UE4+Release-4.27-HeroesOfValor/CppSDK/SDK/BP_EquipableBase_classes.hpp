#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EquipableBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_WeaponCrosshairStyles_structs.hpp"
#include "E_WeaponPoses_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EquipableBase.BP_EquipableBase_C
// 0x00B8 (0x02D8 - 0x0220)
class ABP_EquipableBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   MagazineMesh;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Using;                                             // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           WeaponSwapMontage;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeaponCrosshairStyles                       CrosshairStyle;                                    // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WeaponPoses                                 EquipablePose;                                     // 0x0251(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InacurateCloseby;                                  // 0x0252(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_253[0x5];                                      // 0x0253(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        OwningCharacter;                                   // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkinIndex;                                         // 0x0260(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          SkinLoaded_Client_;                                // 0x0264(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableSkins;                                       // 0x0265(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          MainlyWoodenWeapon_skins_;                         // 0x0266(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsTemporaryEquipable;                              // 0x0267(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          SlowDownWhenUsing_HaltSprint_;                     // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LaunchForceOnDamage;                               // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpineRotationOffset;                               // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpineRotationOffsetWhileAiming;                    // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpinePitchOffset;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftArmPitchOffset;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftArmPitchOffsetWhileAiming;                     // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftArmPitchOffsetWhileSprinting;                  // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftArmYawOffset;                                  // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftArmYawOffsetWhileSprinting;                    // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightHandCloseAmount;                              // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandTiltAmount;                                // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandCloseAmount;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandCloseAmountWhileAiming;                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandCloseAmountWhileSprinting;                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandThumbCloseAmount;                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandThumbCloseAmountWhileAiming;               // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeftHandThumbCloseAmountWhileSprinting;            // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EquipSoundPitch;                                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            NonEmptyMesh;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentlyEquiped;                                  // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CanUseAfterSwapDelayTime;                          // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SwapAnimationSpeed;                                // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AI_AimTilt_Ballistics_;                            // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            EmptyMesh_DuringReload_;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_EquipableBase(int32 EntryPoint);
	void OC_Reload();
	void Reload();
	void HasBeenUnequiped();
	void HasBeenEquiped();
	void UnhideWeapon();
	void HideWeapon();
	void S_LoadSkin(int32 SkinIndex_0);
	void EquipedStateChanged(bool Equiped);
	void WeaponUsed_NonAutoRepeating_();
	void UsingStateChanged();
	void ReceiveTick(float DeltaSeconds);
	void StopUse();
	void Use();
	void ReceiveBeginPlay();
	void OnRep_SkinIndex();
	void CheckIfOwnerOfThisWeapon(bool* IsOwner);
	void IsCurrentlyEquiped_(bool* Equiped);
	void GetSkinIndex(int32* SkinIndex_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EquipableBase_C">();
	}
	static class ABP_EquipableBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EquipableBase_C>();
	}
};
static_assert(alignof(ABP_EquipableBase_C) == 0x000008, "Wrong alignment on ABP_EquipableBase_C");
static_assert(sizeof(ABP_EquipableBase_C) == 0x0002D8, "Wrong size on ABP_EquipableBase_C");
static_assert(offsetof(ABP_EquipableBase_C, UberGraphFrame) == 0x000220, "Member 'ABP_EquipableBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, MagazineMesh) == 0x000228, "Member 'ABP_EquipableBase_C::MagazineMesh' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, StaticMesh) == 0x000230, "Member 'ABP_EquipableBase_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_EquipableBase_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, Using) == 0x000240, "Member 'ABP_EquipableBase_C::Using' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, WeaponSwapMontage) == 0x000248, "Member 'ABP_EquipableBase_C::WeaponSwapMontage' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, CrosshairStyle) == 0x000250, "Member 'ABP_EquipableBase_C::CrosshairStyle' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, EquipablePose) == 0x000251, "Member 'ABP_EquipableBase_C::EquipablePose' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, InacurateCloseby) == 0x000252, "Member 'ABP_EquipableBase_C::InacurateCloseby' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, OwningCharacter) == 0x000258, "Member 'ABP_EquipableBase_C::OwningCharacter' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SkinIndex) == 0x000260, "Member 'ABP_EquipableBase_C::SkinIndex' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SkinLoaded_Client_) == 0x000264, "Member 'ABP_EquipableBase_C::SkinLoaded_Client_' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, EnableSkins) == 0x000265, "Member 'ABP_EquipableBase_C::EnableSkins' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, MainlyWoodenWeapon_skins_) == 0x000266, "Member 'ABP_EquipableBase_C::MainlyWoodenWeapon_skins_' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, IsTemporaryEquipable) == 0x000267, "Member 'ABP_EquipableBase_C::IsTemporaryEquipable' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SlowDownWhenUsing_HaltSprint_) == 0x000268, "Member 'ABP_EquipableBase_C::SlowDownWhenUsing_HaltSprint_' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LaunchForceOnDamage) == 0x00026C, "Member 'ABP_EquipableBase_C::LaunchForceOnDamage' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SpineRotationOffset) == 0x000270, "Member 'ABP_EquipableBase_C::SpineRotationOffset' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SpineRotationOffsetWhileAiming) == 0x000274, "Member 'ABP_EquipableBase_C::SpineRotationOffsetWhileAiming' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SpinePitchOffset) == 0x000278, "Member 'ABP_EquipableBase_C::SpinePitchOffset' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftArmPitchOffset) == 0x00027C, "Member 'ABP_EquipableBase_C::LeftArmPitchOffset' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftArmPitchOffsetWhileAiming) == 0x000280, "Member 'ABP_EquipableBase_C::LeftArmPitchOffsetWhileAiming' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftArmPitchOffsetWhileSprinting) == 0x000284, "Member 'ABP_EquipableBase_C::LeftArmPitchOffsetWhileSprinting' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftArmYawOffset) == 0x000288, "Member 'ABP_EquipableBase_C::LeftArmYawOffset' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftArmYawOffsetWhileSprinting) == 0x00028C, "Member 'ABP_EquipableBase_C::LeftArmYawOffsetWhileSprinting' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, RightHandCloseAmount) == 0x000290, "Member 'ABP_EquipableBase_C::RightHandCloseAmount' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandTiltAmount) == 0x000294, "Member 'ABP_EquipableBase_C::LeftHandTiltAmount' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandCloseAmount) == 0x000298, "Member 'ABP_EquipableBase_C::LeftHandCloseAmount' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandCloseAmountWhileAiming) == 0x00029C, "Member 'ABP_EquipableBase_C::LeftHandCloseAmountWhileAiming' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandCloseAmountWhileSprinting) == 0x0002A0, "Member 'ABP_EquipableBase_C::LeftHandCloseAmountWhileSprinting' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandThumbCloseAmount) == 0x0002A4, "Member 'ABP_EquipableBase_C::LeftHandThumbCloseAmount' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandThumbCloseAmountWhileAiming) == 0x0002A8, "Member 'ABP_EquipableBase_C::LeftHandThumbCloseAmountWhileAiming' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, LeftHandThumbCloseAmountWhileSprinting) == 0x0002AC, "Member 'ABP_EquipableBase_C::LeftHandThumbCloseAmountWhileSprinting' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, EquipSoundPitch) == 0x0002B0, "Member 'ABP_EquipableBase_C::EquipSoundPitch' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, NonEmptyMesh) == 0x0002B8, "Member 'ABP_EquipableBase_C::NonEmptyMesh' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, CurrentlyEquiped) == 0x0002C0, "Member 'ABP_EquipableBase_C::CurrentlyEquiped' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, CanUseAfterSwapDelayTime) == 0x0002C4, "Member 'ABP_EquipableBase_C::CanUseAfterSwapDelayTime' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, SwapAnimationSpeed) == 0x0002C8, "Member 'ABP_EquipableBase_C::SwapAnimationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, AI_AimTilt_Ballistics_) == 0x0002CC, "Member 'ABP_EquipableBase_C::AI_AimTilt_Ballistics_' has a wrong offset!");
static_assert(offsetof(ABP_EquipableBase_C, EmptyMesh_DuringReload_) == 0x0002D0, "Member 'ABP_EquipableBase_C::EmptyMesh_DuringReload_' has a wrong offset!");

}

